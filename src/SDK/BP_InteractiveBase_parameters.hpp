#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InteractiveBase

#include "Basic.hpp"

#include "JackGame_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_InteractiveBase.BP_InteractiveBase_C.BndEvt__Sphere_K2Node_ComponentBoundEvent_126_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_126_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    bpp__OverlappedComponent__pf;                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 bpp__OtherActor__pf;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    bpp__OtherComp__pf;                                // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__OtherBodyIndex__pf;                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bFromSweep__pf;                               // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             bpp__SweepResult__pf__const;                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_126_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_126_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_126_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_126_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_126_ComponentBeginOverlapSignature__DelegateSignature, bpp__OverlappedComponent__pf) == 0x000000, "Member 'BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_126_ComponentBeginOverlapSignature__DelegateSignature::bpp__OverlappedComponent__pf' has a wrong offset!");
static_assert(offsetof(BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_126_ComponentBeginOverlapSignature__DelegateSignature, bpp__OtherActor__pf) == 0x000008, "Member 'BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_126_ComponentBeginOverlapSignature__DelegateSignature::bpp__OtherActor__pf' has a wrong offset!");
static_assert(offsetof(BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_126_ComponentBeginOverlapSignature__DelegateSignature, bpp__OtherComp__pf) == 0x000010, "Member 'BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_126_ComponentBeginOverlapSignature__DelegateSignature::bpp__OtherComp__pf' has a wrong offset!");
static_assert(offsetof(BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_126_ComponentBeginOverlapSignature__DelegateSignature, bpp__OtherBodyIndex__pf) == 0x000018, "Member 'BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_126_ComponentBeginOverlapSignature__DelegateSignature::bpp__OtherBodyIndex__pf' has a wrong offset!");
static_assert(offsetof(BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_126_ComponentBeginOverlapSignature__DelegateSignature, bpp__bFromSweep__pf) == 0x00001C, "Member 'BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_126_ComponentBeginOverlapSignature__DelegateSignature::bpp__bFromSweep__pf' has a wrong offset!");
static_assert(offsetof(BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_126_ComponentBeginOverlapSignature__DelegateSignature, bpp__SweepResult__pf__const) == 0x000020, "Member 'BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_126_ComponentBeginOverlapSignature__DelegateSignature::bpp__SweepResult__pf__const' has a wrong offset!");

// Function BP_InteractiveBase.BP_InteractiveBase_C.BndEvt__Sphere_K2Node_ComponentBoundEvent_128_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_128_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    bpp__OverlappedComponent__pf;                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 bpp__OtherActor__pf;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    bpp__OtherComp__pf;                                // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__OtherBodyIndex__pf;                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_128_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_128_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_128_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_128_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_128_ComponentEndOverlapSignature__DelegateSignature, bpp__OverlappedComponent__pf) == 0x000000, "Member 'BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_128_ComponentEndOverlapSignature__DelegateSignature::bpp__OverlappedComponent__pf' has a wrong offset!");
static_assert(offsetof(BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_128_ComponentEndOverlapSignature__DelegateSignature, bpp__OtherActor__pf) == 0x000008, "Member 'BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_128_ComponentEndOverlapSignature__DelegateSignature::bpp__OtherActor__pf' has a wrong offset!");
static_assert(offsetof(BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_128_ComponentEndOverlapSignature__DelegateSignature, bpp__OtherComp__pf) == 0x000010, "Member 'BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_128_ComponentEndOverlapSignature__DelegateSignature::bpp__OtherComp__pf' has a wrong offset!");
static_assert(offsetof(BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_128_ComponentEndOverlapSignature__DelegateSignature, bpp__OtherBodyIndex__pf) == 0x000018, "Member 'BP_InteractiveBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_128_ComponentEndOverlapSignature__DelegateSignature::bpp__OtherBodyIndex__pf' has a wrong offset!");

// Function BP_InteractiveBase.BP_InteractiveBase_C.ChangeCutSceneFlag
// 0x0010 (0x0010 - 0x0000)
struct BP_InteractiveBase_C_ChangeCutSceneFlag final
{
public:
	struct FJackLDT_GameFlagDataCutScene          bpp__CutSceneFlag__pf;                             // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_InteractiveBase_C_ChangeCutSceneFlag) == 0x000008, "Wrong alignment on BP_InteractiveBase_C_ChangeCutSceneFlag");
static_assert(sizeof(BP_InteractiveBase_C_ChangeCutSceneFlag) == 0x000010, "Wrong size on BP_InteractiveBase_C_ChangeCutSceneFlag");
static_assert(offsetof(BP_InteractiveBase_C_ChangeCutSceneFlag, bpp__CutSceneFlag__pf) == 0x000000, "Member 'BP_InteractiveBase_C_ChangeCutSceneFlag::bpp__CutSceneFlag__pf' has a wrong offset!");

// Function BP_InteractiveBase.BP_InteractiveBase_C.ChangeScenarioFlag
// 0x0010 (0x0010 - 0x0000)
struct BP_InteractiveBase_C_ChangeScenarioFlag final
{
public:
	struct FJackLDT_GameFlagDataScenario          bpp__ScenarioFlag__pf;                             // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_InteractiveBase_C_ChangeScenarioFlag) == 0x000008, "Wrong alignment on BP_InteractiveBase_C_ChangeScenarioFlag");
static_assert(sizeof(BP_InteractiveBase_C_ChangeScenarioFlag) == 0x000010, "Wrong size on BP_InteractiveBase_C_ChangeScenarioFlag");
static_assert(offsetof(BP_InteractiveBase_C_ChangeScenarioFlag, bpp__ScenarioFlag__pf) == 0x000000, "Member 'BP_InteractiveBase_C_ChangeScenarioFlag::bpp__ScenarioFlag__pf' has a wrong offset!");

// Function BP_InteractiveBase.BP_InteractiveBase_C.OnBeginOverlapSphere
// 0x0008 (0x0008 - 0x0000)
struct BP_InteractiveBase_C_OnBeginOverlapSphere final
{
public:
	class AActor*                                 bpp__Actor__pf;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_InteractiveBase_C_OnBeginOverlapSphere) == 0x000008, "Wrong alignment on BP_InteractiveBase_C_OnBeginOverlapSphere");
static_assert(sizeof(BP_InteractiveBase_C_OnBeginOverlapSphere) == 0x000008, "Wrong size on BP_InteractiveBase_C_OnBeginOverlapSphere");
static_assert(offsetof(BP_InteractiveBase_C_OnBeginOverlapSphere, bpp__Actor__pf) == 0x000000, "Member 'BP_InteractiveBase_C_OnBeginOverlapSphere::bpp__Actor__pf' has a wrong offset!");

// Function BP_InteractiveBase.BP_InteractiveBase_C.OnEndOverlapSphere
// 0x0008 (0x0008 - 0x0000)
struct BP_InteractiveBase_C_OnEndOverlapSphere final
{
public:
	class AActor*                                 bpp__Actor__pf;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_InteractiveBase_C_OnEndOverlapSphere) == 0x000008, "Wrong alignment on BP_InteractiveBase_C_OnEndOverlapSphere");
static_assert(sizeof(BP_InteractiveBase_C_OnEndOverlapSphere) == 0x000008, "Wrong size on BP_InteractiveBase_C_OnEndOverlapSphere");
static_assert(offsetof(BP_InteractiveBase_C_OnEndOverlapSphere, bpp__Actor__pf) == 0x000000, "Member 'BP_InteractiveBase_C_OnEndOverlapSphere::bpp__Actor__pf' has a wrong offset!");

// Function BP_InteractiveBase.BP_InteractiveBase_C.SetCompleteInteraction
// 0x0001 (0x0001 - 0x0000)
struct BP_InteractiveBase_C_SetCompleteInteraction final
{
public:
	bool                                          bpp__RestartInteraction__pf;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_InteractiveBase_C_SetCompleteInteraction) == 0x000001, "Wrong alignment on BP_InteractiveBase_C_SetCompleteInteraction");
static_assert(sizeof(BP_InteractiveBase_C_SetCompleteInteraction) == 0x000001, "Wrong size on BP_InteractiveBase_C_SetCompleteInteraction");
static_assert(offsetof(BP_InteractiveBase_C_SetCompleteInteraction, bpp__RestartInteraction__pf) == 0x000000, "Member 'BP_InteractiveBase_C_SetCompleteInteraction::bpp__RestartInteraction__pf' has a wrong offset!");

// Function BP_InteractiveBase.BP_InteractiveBase_C.SetEnableInteraction
// 0x0001 (0x0001 - 0x0000)
struct BP_InteractiveBase_C_SetEnableInteraction final
{
public:
	bool                                          bpp__Enable__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_InteractiveBase_C_SetEnableInteraction) == 0x000001, "Wrong alignment on BP_InteractiveBase_C_SetEnableInteraction");
static_assert(sizeof(BP_InteractiveBase_C_SetEnableInteraction) == 0x000001, "Wrong size on BP_InteractiveBase_C_SetEnableInteraction");
static_assert(offsetof(BP_InteractiveBase_C_SetEnableInteraction, bpp__Enable__pf) == 0x000000, "Member 'BP_InteractiveBase_C_SetEnableInteraction::bpp__Enable__pf' has a wrong offset!");

}

