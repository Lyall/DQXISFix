#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterCaptureCamera

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "JackGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterCaptureCamera.BP_CharacterCaptureCamera_C
// 0x0078 (0x04E8 - 0x0470)
class ABP_CharacterCaptureCamera_C : public AJackCharacterCaptureCamera
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0470(0x0008)(Transient, DuplicateTransient)
	class UPointLightComponent*                   PointLight1;                                       // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DebugSampleMinTargetSize;                          // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DebugSampleMaxTargetSize;                          // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DebugSampleTargetParent;                           // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DirectionalLight3_BackLight_;                      // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DirectionalLight2_FillLight_;                      // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DirectionalLight1_KeyLight_;                       // 0x04A8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 PreviewMesh;                                       // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialBillboardComponent*            Wallpaper;                                         // 0x04B8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         WallpaperDistance;                                 // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C4[0x4];                                      // 0x04C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDirectionalLightComponent*>     DirectionalLightList;                              // 0x04C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UPointLightComponent*>           PointlLightList;                                   // 0x04D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_CharacterCaptureCamera(int32 EntryPoint);
	void SetDebugTargetSize(bool bVisible, const struct FVector2D& SlideTargetOrigin, const struct FVector2D& MaxSlideTargetSize, const struct FVector2D& MinSlideTargetSize);
	void SetWallpaperDistance(float Distance);
	void SetLightParameter(const TArray<struct FJackZukanMotionDirectionalLightParameter>& DirectionalLightParameterList, const TArray<struct FJackZukanMotionPointLightParameter>& PointLightParameterList);
	void HideDebugInfo();
	void HideDebugTargetSize();
	void ShowDebugInfo();
	void ShowDebugTargetSize();
	void UpdateWallpaparPosition();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterCaptureCamera_C">();
	}
	static class ABP_CharacterCaptureCamera_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CharacterCaptureCamera_C>();
	}
};
static_assert(alignof(ABP_CharacterCaptureCamera_C) == 0x000008, "Wrong alignment on ABP_CharacterCaptureCamera_C");
static_assert(sizeof(ABP_CharacterCaptureCamera_C) == 0x0004E8, "Wrong size on ABP_CharacterCaptureCamera_C");
static_assert(offsetof(ABP_CharacterCaptureCamera_C, UberGraphFrame) == 0x000470, "Member 'ABP_CharacterCaptureCamera_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CharacterCaptureCamera_C, PointLight1) == 0x000478, "Member 'ABP_CharacterCaptureCamera_C::PointLight1' has a wrong offset!");
static_assert(offsetof(ABP_CharacterCaptureCamera_C, DebugSampleMinTargetSize) == 0x000480, "Member 'ABP_CharacterCaptureCamera_C::DebugSampleMinTargetSize' has a wrong offset!");
static_assert(offsetof(ABP_CharacterCaptureCamera_C, DebugSampleMaxTargetSize) == 0x000488, "Member 'ABP_CharacterCaptureCamera_C::DebugSampleMaxTargetSize' has a wrong offset!");
static_assert(offsetof(ABP_CharacterCaptureCamera_C, DebugSampleTargetParent) == 0x000490, "Member 'ABP_CharacterCaptureCamera_C::DebugSampleTargetParent' has a wrong offset!");
static_assert(offsetof(ABP_CharacterCaptureCamera_C, DirectionalLight3_BackLight_) == 0x000498, "Member 'ABP_CharacterCaptureCamera_C::DirectionalLight3_BackLight_' has a wrong offset!");
static_assert(offsetof(ABP_CharacterCaptureCamera_C, DirectionalLight2_FillLight_) == 0x0004A0, "Member 'ABP_CharacterCaptureCamera_C::DirectionalLight2_FillLight_' has a wrong offset!");
static_assert(offsetof(ABP_CharacterCaptureCamera_C, DirectionalLight1_KeyLight_) == 0x0004A8, "Member 'ABP_CharacterCaptureCamera_C::DirectionalLight1_KeyLight_' has a wrong offset!");
static_assert(offsetof(ABP_CharacterCaptureCamera_C, PreviewMesh) == 0x0004B0, "Member 'ABP_CharacterCaptureCamera_C::PreviewMesh' has a wrong offset!");
static_assert(offsetof(ABP_CharacterCaptureCamera_C, Wallpaper) == 0x0004B8, "Member 'ABP_CharacterCaptureCamera_C::Wallpaper' has a wrong offset!");
static_assert(offsetof(ABP_CharacterCaptureCamera_C, WallpaperDistance) == 0x0004C0, "Member 'ABP_CharacterCaptureCamera_C::WallpaperDistance' has a wrong offset!");
static_assert(offsetof(ABP_CharacterCaptureCamera_C, DirectionalLightList) == 0x0004C8, "Member 'ABP_CharacterCaptureCamera_C::DirectionalLightList' has a wrong offset!");
static_assert(offsetof(ABP_CharacterCaptureCamera_C, PointlLightList) == 0x0004D8, "Member 'ABP_CharacterCaptureCamera_C::PointlLightList' has a wrong offset!");

}

