#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DebugAutoPlayer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DebugAutoPlayer.BP_DebugAutoPlayer_C
// 0x0090 (0x0428 - 0x0398)
class ABP_DebugAutoPlayer_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0398(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AJackMapJumpVolume*                     NextMapJump;                                       // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BattleResult;                                      // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B1[0x3];                                      // 0x03B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NextPoint;                                         // 0x03B4(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OldLocation;                                       // 0x03C0(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StopCounter;                                       // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TeleportSequence;                                  // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D1[0x3];                                      // 0x03D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TeleportOffset;                                    // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SearchVector;                                      // 0x03D8(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BattleIn;                                          // 0x03E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E5[0x3];                                      // 0x03E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ARecastNavMesh*                         NavData;                                           // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayerMove;                                        // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NaviSuccess;                                       // 0x03F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F2[0x2];                                      // 0x03F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeleportCounter;                                   // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 DispCommand;                                       // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Enable;                                            // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OldPossess;                                        // 0x0409(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_40A[0x2];                                      // 0x040A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BattleBasePoint;                                   // 0x040C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BattleRadius;                                      // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BattleLevel;                                       // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CommandWait;                                       // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ForceStartPlayed;                                  // 0x0421(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ForceStop;                                         // 0x0422(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_DebugAutoPlayer(int32 EntryPoint);
	void ForceStopAutoPlay();
	void DebugMenuSelected();
	void ForceStartAutoPlay();
	void EndCutScene(class FName CSID);
	void StartCutScene(class FName CSID);
	void ReceiveTick(float DeltaSeconds);
	void StartAutoPlay();
	void CustomEvent_7(class AActor* OverlappedActor, class AActor* OtherActor);
	void StartAutoPlayGo();
	void TimerCheck();
	void CustomEvent();
	void CustomEvent_3();
	void BattleControl();
	void CustomEvent_4(const struct FJackCommandBattleInitialize& InCommand);
	void MapJumpBeginPlay();
	void CustomEvent_1();
	void ReceiveBeginPlay();
	void MapJumpEndPlay();
	void StartCutSceneCharacterSettingAfter(class FName CSID);
	void EndCutSceneFadInBefore(class FName CSID);
	void StartCutSceneFadeOutAfter(class FName CSID);
	void StartCutsceneBeforeLoad(class FName CSID);
	void EndCutSceneBeforeUnload(class FName CSID);
	void UserConstructionScript();
	void Initialize();
	void RopeTeleport(bool* Teleport);
	void NavTeleport(bool* Teleport);
	void NearNaviTeleport(bool* Teleport, bool* NoNavi);
	void MapJumpTeleport(bool* Teleport);
	void MapStartInitialize();
	void DoorTeleport(bool* Teleport);
	void IsNaviSuccess(bool* Success);
	void GetCommand(class FString* Command, class FString* Value1, class FString* Value2, class FString* Value3);
	void SetNextCommand();
	void Command_MoveMapJump(const class FString& Value1, class AActor** Actor);
	void Command_Teleport(const class FString& Value1, const class FString& Value2, const class FString& Value3);
	void Command_MapJump(const class FString& Value1);
	void Command_ScenarioProgress(const class FString& Value1);
	void Command_ScenarioFlag(const class FString& Value1, const class FString& Value2);
	void Command_CutsceneFlag(const class FString& Value1, const class FString& Value2);
	void Command_ConsoleCommand(const class FString& Value1);
	void IsCanAction(bool* CanActine);
	void GetNearMonster(class AActor** Monster);
	void Command_InfinityBattle(const class FString& Value1, const class FString& Value2);
	void Command_WorldProgress(const class FString& Value1);
	void AddDebugMenu();
	void Command_Goto(const class FString& Value1);
	void Command_EquipWeapon(const class FString& Value1, const class FString& Value2);
	void AddDebugMenuSimple();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DebugAutoPlayer_C">();
	}
	static class ABP_DebugAutoPlayer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DebugAutoPlayer_C>();
	}
};
static_assert(alignof(ABP_DebugAutoPlayer_C) == 0x000008, "Wrong alignment on ABP_DebugAutoPlayer_C");
static_assert(sizeof(ABP_DebugAutoPlayer_C) == 0x000428, "Wrong size on ABP_DebugAutoPlayer_C");
static_assert(offsetof(ABP_DebugAutoPlayer_C, UberGraphFrame) == 0x000398, "Member 'ABP_DebugAutoPlayer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DebugAutoPlayer_C, DefaultSceneRoot) == 0x0003A0, "Member 'ABP_DebugAutoPlayer_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_DebugAutoPlayer_C, NextMapJump) == 0x0003A8, "Member 'ABP_DebugAutoPlayer_C::NextMapJump' has a wrong offset!");
static_assert(offsetof(ABP_DebugAutoPlayer_C, BattleResult) == 0x0003B0, "Member 'ABP_DebugAutoPlayer_C::BattleResult' has a wrong offset!");
static_assert(offsetof(ABP_DebugAutoPlayer_C, NextPoint) == 0x0003B4, "Member 'ABP_DebugAutoPlayer_C::NextPoint' has a wrong offset!");
static_assert(offsetof(ABP_DebugAutoPlayer_C, OldLocation) == 0x0003C0, "Member 'ABP_DebugAutoPlayer_C::OldLocation' has a wrong offset!");
static_assert(offsetof(ABP_DebugAutoPlayer_C, StopCounter) == 0x0003CC, "Member 'ABP_DebugAutoPlayer_C::StopCounter' has a wrong offset!");
static_assert(offsetof(ABP_DebugAutoPlayer_C, TeleportSequence) == 0x0003D0, "Member 'ABP_DebugAutoPlayer_C::TeleportSequence' has a wrong offset!");
static_assert(offsetof(ABP_DebugAutoPlayer_C, TeleportOffset) == 0x0003D4, "Member 'ABP_DebugAutoPlayer_C::TeleportOffset' has a wrong offset!");
static_assert(offsetof(ABP_DebugAutoPlayer_C, SearchVector) == 0x0003D8, "Member 'ABP_DebugAutoPlayer_C::SearchVector' has a wrong offset!");
static_assert(offsetof(ABP_DebugAutoPlayer_C, BattleIn) == 0x0003E4, "Member 'ABP_DebugAutoPlayer_C::BattleIn' has a wrong offset!");
static_assert(offsetof(ABP_DebugAutoPlayer_C, NavData) == 0x0003E8, "Member 'ABP_DebugAutoPlayer_C::NavData' has a wrong offset!");
static_assert(offsetof(ABP_DebugAutoPlayer_C, PlayerMove) == 0x0003F0, "Member 'ABP_DebugAutoPlayer_C::PlayerMove' has a wrong offset!");
static_assert(offsetof(ABP_DebugAutoPlayer_C, NaviSuccess) == 0x0003F1, "Member 'ABP_DebugAutoPlayer_C::NaviSuccess' has a wrong offset!");
static_assert(offsetof(ABP_DebugAutoPlayer_C, TeleportCounter) == 0x0003F4, "Member 'ABP_DebugAutoPlayer_C::TeleportCounter' has a wrong offset!");
static_assert(offsetof(ABP_DebugAutoPlayer_C, DispCommand) == 0x0003F8, "Member 'ABP_DebugAutoPlayer_C::DispCommand' has a wrong offset!");
static_assert(offsetof(ABP_DebugAutoPlayer_C, Enable) == 0x000408, "Member 'ABP_DebugAutoPlayer_C::Enable' has a wrong offset!");
static_assert(offsetof(ABP_DebugAutoPlayer_C, OldPossess) == 0x000409, "Member 'ABP_DebugAutoPlayer_C::OldPossess' has a wrong offset!");
static_assert(offsetof(ABP_DebugAutoPlayer_C, BattleBasePoint) == 0x00040C, "Member 'ABP_DebugAutoPlayer_C::BattleBasePoint' has a wrong offset!");
static_assert(offsetof(ABP_DebugAutoPlayer_C, BattleRadius) == 0x000418, "Member 'ABP_DebugAutoPlayer_C::BattleRadius' has a wrong offset!");
static_assert(offsetof(ABP_DebugAutoPlayer_C, BattleLevel) == 0x00041C, "Member 'ABP_DebugAutoPlayer_C::BattleLevel' has a wrong offset!");
static_assert(offsetof(ABP_DebugAutoPlayer_C, CommandWait) == 0x000420, "Member 'ABP_DebugAutoPlayer_C::CommandWait' has a wrong offset!");
static_assert(offsetof(ABP_DebugAutoPlayer_C, ForceStartPlayed) == 0x000421, "Member 'ABP_DebugAutoPlayer_C::ForceStartPlayed' has a wrong offset!");
static_assert(offsetof(ABP_DebugAutoPlayer_C, ForceStop) == 0x000422, "Member 'ABP_DebugAutoPlayer_C::ForceStop' has a wrong offset!");

}

