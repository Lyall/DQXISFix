#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SkyBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "JackGame_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "STRUCT_SkyParam_structs.hpp"


namespace SDK
{

// DynamicClass BP_SkyBase.BP_SkyBase_C
// 0x0850 (0x0BE8 - 0x0398)
class ABP_SkyBase_C final : public AActor
{
public:
	uint8                                         Pad_398[0x8];                                      // 0x0398(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialBillboardComponent*            Taiju;                                             // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialBillboardComponent*            MajouKumo;                                         // 0x03A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialBillboardComponent*            Majou;                                             // 0x03B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialBillboardComponent*            Redstar;                                           // 0x03B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialBillboardComponent*            Moon;                                              // 0x03C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   SkyDomeInner;                                      // 0x03C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   SkyDomeOuter;                                      // 0x03D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   SkyDomeMiddle;                                     // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Base;                                              // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADirectionalLight*                      SunLight;                                          // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADirectionalLight*                      MoonLight;                                         // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MoonMaterial;                                      // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EditorTime;                                        // 0x0400(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExecUpdate;                                        // 0x040C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40D[0x3];                                      // 0x040D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               MID_Outer;                                         // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               MID_Inner;                                         // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               MID_Middle;                                        // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               MID_Moon;                                          // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               MID_CloudShadow;                                   // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               MID_Majou;                                         // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               MID_MajouKumo;                                     // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               MID_Taiju;                                         // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               MID_LightFunction;                                 // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudyRate;                                        // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NightRate;                                         // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRot;                                         // 0x0460(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               DirectionalLightRotAxis;                           // 0x046C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CurrentSunRot;                                     // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentLightRot;                                   // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeatherChangeTime;                                 // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeatherChangeTimeBase;                             // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               MoonRot;                                           // 0x0488(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MoonSize;                                          // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonEmissivePow;                                   // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MoonColor;                                         // 0x049C(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MoonLightColor;                                    // 0x04AC(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonLightBrightness;                               // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkyTime;                                           // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldTime;                                           // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunTiltAngle;                                      // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunPathAngle;                                      // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     CloudTopMaterial;                                  // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     CloudSideMaterial;                                 // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     LightFunctionMaterial;                             // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudScrollAngle;                                  // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudNearSpeed;                                    // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudFarSpeed;                                     // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudSideSpeed;                                    // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpdateCounter;                                     // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4FC[0x4];                                      // 0x04FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 NightRateTable;                                    // 0x0500(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         TopCloudRate;                                      // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunHeight;                                         // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UpdateOtherEditorTime;                             // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SunLightMove;                                      // 0x0519(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51A[0x2];                                      // 0x051A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RedstarRot;                                        // 0x051C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RedstarSize;                                       // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52C[0x4];                                      // 0x052C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 SunRadius;                                         // 0x0530(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRotator                               MoonLightRotationTemp;                             // 0x0540(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_54C[0x4];                                      // 0x054C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandleFine;                                   // 0x0550(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTimerHandle                           TimerHandleCloudy;                                 // 0x0558(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CloudyCloudNearSpeed;                              // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudyCloudFarSpeed;                               // 0x0564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudyCloudSideSpeed;                              // 0x0568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudyTopCloudRate;                                // 0x056C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 StarBrightness;                                    // 0x0570(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         StarRepeatscale;                                   // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RedstarVisible;                                    // 0x0584(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_585[0x3];                                      // 0x0585(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               MajouRot;                                          // 0x0588(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MajouSize;                                         // 0x0594(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MajouVisible;                                      // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_599[0x7];                                      // 0x0599(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSTRUCT_SkyParam>               SkyParameter;                                      // 0x05A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyZenithColor;                                    // 0x05B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyMiddleColor;                                    // 0x05C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyHorizonColor;                                   // 0x05D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkySunLightColor;                                  // 0x05E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyOverallColor;                                   // 0x05F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkySunColor;                                       // 0x0600(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyCloudColor;                                     // 0x0610(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyCloudColorShadow;                               // 0x0620(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyMoonLightColor;                                 // 0x0630(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyTaijuColorPlaneBright;                          // 0x0640(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyTaijuColorPlaneShadow;                          // 0x0650(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyMajouColorPlaneBright;                          // 0x0660(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyMajouColorPlaneShadow;                          // 0x0670(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkySunLightIntensity;                              // 0x0680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyHorizonFalloff;                                 // 0x0684(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyMiddleFalloff;                                  // 0x0688(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             OldWeather;                                        // 0x068C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             NewWeather;                                        // 0x068D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68E[0x2];                                      // 0x068E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandleWeatherChange;                          // 0x0690(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         WeatherChangeRate;                                 // 0x0698(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyStarBrightness;                                 // 0x069C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyCloudOpacity;                                   // 0x06A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyMoonlightBrightness;                            // 0x06A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkySunBrightness;                                  // 0x06A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6AC[0x4];                                      // 0x06AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_SkyParam                       TempSkyParam;                                      // 0x06B0(0x0108)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         SkyMoonLightIntensity;                             // 0x07B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyMoonAlpha;                                      // 0x07BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TempZenithColor;                                   // 0x07C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TempMiddleColor;                                   // 0x07D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TempHorizonColor;                                  // 0x07E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TempOverallColor;                                  // 0x07F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TempSunLightColor;                                 // 0x0800(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TempSunColor;                                      // 0x0810(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TempCloudColor;                                    // 0x0820(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TempCloudColorShadow;                              // 0x0830(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TempMoonLightColor;                                // 0x0840(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TempTaijuColorPlaneBright;                         // 0x0850(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TempTaijuColorPlaneShadow;                         // 0x0860(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TempMajouColorPlaneBright;                         // 0x0870(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TempMajouColorPlaneShadow;                         // 0x0880(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempSunLightIntensity;                             // 0x0890(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempHorizonFalloff;                                // 0x0894(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempMiddleFalloff;                                 // 0x0898(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempCloudOpacity;                                  // 0x089C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempMoonLightBrightness;                           // 0x08A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             EditorWeather;                                     // 0x08A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableThunder;                                     // 0x08A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DefaultThunder;                                    // 0x08A6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A7[0x1];                                      // 0x08A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Thunderdirection;                                  // 0x08A8(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ThunderInterval;                                   // 0x08B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThunderPower;                                      // 0x08B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThunderRadiusSize;                                 // 0x08BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABP_TimeChangeFogBase_C*                TimeChangeFog;                                     // 0x08C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ThunderColor;                                      // 0x08C8(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkyChangeReq;                                      // 0x08D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D9[0x7];                                      // 0x08D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 SunRadiusRateTable;                                // 0x08E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 SunShadowCancelRate;                               // 0x08F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<float>                                 MoonShadowCancelRate;                              // 0x0900(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         SunRadiusRate;                                     // 0x0910(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_914[0x4];                                      // 0x0914(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_TimeChangeCloud_C*                  TimeChangeCloud;                                   // 0x0918(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightRate;                                         // 0x0920(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TaijuRot;                                          // 0x0924(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TaijuSize;                                         // 0x0930(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TaijuVisible;                                      // 0x0934(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FastWeatherChange;                                 // 0x0935(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_936[0x2];                                      // 0x0936(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThunderMaskAlpha;                                  // 0x0938(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThunderMaskConst;                                  // 0x093C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowScrollAngleOffset;                      // 0x0940(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OpacityAll;                                        // 0x0944(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RedstarSScenarioVisible;                           // 0x0948(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RedstarEternalHidden;                              // 0x0949(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TaijuEternalHidden;                                // 0x094A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TempRedStarVisible;                                // 0x094B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TempMajoVisible;                                   // 0x094C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TempTaijuVisible;                                  // 0x094D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Test3DMode;                                        // 0x094E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94F[0x1];                                      // 0x094F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Conv3DScale;                                       // 0x0950(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowScale;                                  // 0x0954(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowPosX;                                   // 0x0958(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowPosY;                                   // 0x095C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CroudShadowRadius;                                 // 0x0960(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BillboardDistanceScale;                            // 0x0964(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndingSkyParameterIndex;                           // 0x0968(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutRangeA;                                         // 0x096C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutRangeB;                                         // 0x0970(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunShadowCorrection;                               // 0x0974(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SunShadowMaxLimit;                                 // 0x0978(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_979[0x7];                                      // 0x0979(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_CSID7;                                // 0x0980(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           K2Node_CustomEvent_SunLightColor;                  // 0x0988(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         K2Node_CustomEvent_SunLightIntensity;              // 0x0998(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           K2Node_CustomEvent_SunColor;                       // 0x099C(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         K2Node_CustomEvent_SunBrightness;                  // 0x09AC(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         K2Node_CustomEvent_SunRadius;                      // 0x09B0(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         K2Node_CustomEvent_MoonAlpha;                      // 0x09B4(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         K2Node_CustomEvent_StarBrightness;                 // 0x09B8(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         K2Node_CustomEvent_StarRepeatscale;                // 0x09BC(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           K2Node_CustomEvent_CloudColor;                     // 0x09C0(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           K2Node_CustomEvent_CloudColorShadow;               // 0x09D0(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         K2Node_CustomEvent_CloudyRate;                     // 0x09E0(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               K2Node_CustomEvent_SunLightRotation;               // 0x09E4(0x000C)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           K2Node_CustomEvent_LightDirection;                 // 0x09F0(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           K2Node_CustomEvent_SkygradDirection;               // 0x0A00(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   K2Node_Event_CSID3;                                // 0x0A10(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_MathExpression_ReturnValue;                 // 0x0A18(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A19[0x7];                                      // 0x0A19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_COMP_WeatherAffect_C*               K2Node_DynamicCast_AsBP_COMP_Weather_Affect;       // 0x0A20(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0A28(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A29[0x3];                                      // 0x0A29(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_CustomEvent_ZenithColor;                    // 0x0A2C(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           K2Node_CustomEvent_MiddleColor;                    // 0x0A3C(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           K2Node_CustomEvent_HorizonColor;                   // 0x0A4C(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           K2Node_CustomEvent_OverallColor;                   // 0x0A5C(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         K2Node_CustomEvent_HorizonFalloff;                 // 0x0A6C(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         K2Node_CustomEvent_MiddleFalloff;                  // 0x0A70(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetWeatherChangeRate_WeatherChangeRate;   // 0x0A74(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float;                     // 0x0A78(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CallFunc_GetNowSkyParameter_ZenithColor;           // 0x0A7C(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CallFunc_GetNowSkyParameter_MiddleColor;           // 0x0A8C(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CallFunc_GetNowSkyParameter_HorizonColor;          // 0x0A9C(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CallFunc_GetNowSkyParameter_OverallColor;          // 0x0AAC(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CallFunc_GetNowSkyParameter_SunLightColor;         // 0x0ABC(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CallFunc_GetNowSkyParameter_SunColor;              // 0x0ACC(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CallFunc_GetNowSkyParameter_CloudColor;            // 0x0ADC(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CallFunc_GetNowSkyParameter_CloudColorShadow;      // 0x0AEC(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetNowSkyParameter_SunLightIntensity;     // 0x0AFC(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetNowSkyParameter_HorizonFalloff;        // 0x0B00(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetNowSkyParameter_MiddleFalloff;         // 0x0B04(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetNowSkyParameter_CloudOpacity;          // 0x0B08(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CallFunc_GetNowSkyParameter_MoonLightColor;        // 0x0B0C(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetNowSkyParameter_MoonLightBrightness;   // 0x0B1C(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CallFunc_GetNowSkyParameter_TaijuColorPlaneBright; // 0x0B20(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CallFunc_GetNowSkyParameter_TaijuColorPlaneShadow; // 0x0B30(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CallFunc_GetNowSkyParameter_MajouColorPlaneBright; // 0x0B40(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CallFunc_GetNowSkyParameter_MajouColorPlaneShadow; // 0x0B50(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   K2Node_Event_CSID2;                                // 0x0B60(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   K2Node_Event_CSID;                                 // 0x0B68(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               K2Node_CustomEvent_MaterialInstanceDynamic;        // 0x0B70(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           K2Node_CustomEvent_ColorPlaneBright;               // 0x0B78(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           K2Node_CustomEvent_ColorPlaneShadow;               // 0x0B88(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         K2Node_CustomEvent_Alpha;                          // 0x0B98(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9C[0x4];                                      // 0x0B9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_COMP_WeatherAffect_C*               K2Node_DynamicCast_AsBP_COMP_Weather_Affect2;      // 0x0BA0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0BA8(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA9[0x7];                                      // 0x0BA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_COMP_WeatherAffect_C*               K2Node_DynamicCast_AsBP_COMP_Weather_Affect3;      // 0x0BB0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0BB8(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BB9[0x7];                                      // 0x0BB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_CSID4;                                // 0x0BC0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0BC8(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BCC[0x4];                                      // 0x0BCC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_CSID5;                                // 0x0BD0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   K2Node_Event_CSID6;                                // 0x0BD8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float2;                    // 0x0BE0(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         K2Node_MathExpression_ReturnValue2;                // 0x0BE4(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void EndCutScene(class FName bpp__CSID__pf);
	void EndCutSceneBeforeUnload(class FName bpp__CSID__pf);
	void EndCutSceneFadInBefore(class FName bpp__CSID__pf);
	void ExecuteUbergraph_BP_SkyBase_4(int32 bpp__EntryPoint__pf);
	void GetNowColorWeatherCalc(const struct FLinearColor& bpp__OldColor__pf, TArray<struct FLinearColor>* bpp__NewColor__pf, float bpp__WeatherChangeRate__pf, struct FLinearColor* bpp__NowColor__pf);
	void GetNowFloatWeatherCalc(float bpp__OldFloat__pf, TArray<float>* bpp__NewFloat__pf, float bpp__WeatherChangeRate__pf, float* bpp__NowFloat__pf);
	void GetNowSkyParameter(EJackWorldWeather bpp__NewWeather__pf, float bpp__WeatherChangeRate__pf, struct FLinearColor* bpp__ZenithColor__pf, struct FLinearColor* bpp__MiddleColor__pf, struct FLinearColor* bpp__HorizonColor__pf, struct FLinearColor* bpp__OverallColor__pf, struct FLinearColor* bpp__SunLightColor__pf, struct FLinearColor* bpp__SunColor__pf, struct FLinearColor* bpp__CloudColor__pf, struct FLinearColor* bpp__CloudColorShadow__pf, float* bpp__SunLightIntensity__pf, float* bpp__HorizonFalloff__pf, float* bpp__MiddleFalloff__pf, float* bpp__CloudOpacity__pf, struct FLinearColor* bpp__MoonLightColor__pf, float* bpp__MoonLightBrightness__pf, struct FLinearColor* bpp__TaijuColorPlaneBright__pf, struct FLinearColor* bpp__TaijuColorPlaneShadow__pf, struct FLinearColor* bpp__MajouColorPlaneBright__pf, struct FLinearColor* bpp__MajouColorPlaneShadow__pf);
	void GetSkyParamID(EJackWorldWeather bpp__Weather__pf, int32* bpp__SkyParamID__pf);
	void GetWeatherChangeRate(float* bpp__WeatherChangeRate__pf);
	void ReceiveBeginPlay();
	void ReceiveTick(float bpp__DeltaSeconds__pf);
	void SetBillboardSkyParts(class UMaterialBillboardComponent* bpp__MaterialBillboard__pf, const struct FRotator& bpp__Rotation__pf, float* bpp__WorldConvScale__pf);
	void SetCloudAngle();
	void SetCloudParam(const struct FLinearColor& bpp__CloudColor__pf, const struct FLinearColor& bpp__CloudColorShadow__pf, float bpp__CloudyRate__pf);
	void SetCloudWeather(float bpp__WeatherChangeRate__pf);
	void SetFogWeather(float bpp__WeatherChangeRate__pf);
	void SetMoonParam(float bpp__MoonAlpha__pf);
	void SetNightRate();
	void SetPlaneParam(class UMaterialInstanceDynamic* bpp__MaterialInstanceDynamic__pf, const struct FLinearColor& bpp__ColorPlaneBright__pf, const struct FLinearColor& bpp__ColorPlaneShadow__pf, float bpp__Alpha__pf);
	void SetSkyDomeParam(const struct FLinearColor& bpp__ZenithColor__pf, const struct FLinearColor& bpp__MiddleColor__pf, const struct FLinearColor& bpp__HorizonColor__pf, const struct FLinearColor& bpp__OverallColor__pf, float bpp__HorizonFalloff__pf, float bpp__MiddleFalloff__pf);
	void SetSkyWeather(EJackWorldWeather bpp__NewWeather__pf, bool bpp__ForceSet__pf);
	void SetStarParam(float bpp__StarBrightness__pf, float bpp__StarRepeatscale__pf);
	void SetSunLightParam(const struct FRotator& bpp__SunLightRotation__pf, const struct FLinearColor& bpp__LightDirection__pf, const struct FLinearColor& bpp__SkygradDirection__pf);
	void SetSunParam(const struct FLinearColor& bpp__SunLightColor__pf, float bpp__SunLightIntensity__pf, const struct FLinearColor& bpp__SunColor__pf, float bpp__SunBrightness__pf, float bpp__SunRadius__pf);
	void SetSunRadiusRate();
	void SetTempParameter();
	void SetThunder(EJackWorldWeather bpp__NewWeather__pf);
	void SetWeatherChangeTimeBase();
	void SkyPartsScenarioVisible();
	void StartCutScene(class FName bpp__CSID__pf);
	void StartCutsceneBeforeLoad(class FName bpp__CSID__pf);
	void StartCutSceneCharacterSettingAfter(class FName bpp__CSID__pf);
	void StartCutSceneFadeOutAfter(class FName bpp__CSID__pf);
	void TimerEventWeatherChange();
	void UpdateSky();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BP_SkyBase_C">();
	}
	static class ABP_SkyBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SkyBase_C>();
	}
};
static_assert(alignof(ABP_SkyBase_C) == 0x000008, "Wrong alignment on ABP_SkyBase_C");
static_assert(sizeof(ABP_SkyBase_C) == 0x000BE8, "Wrong size on ABP_SkyBase_C");
static_assert(offsetof(ABP_SkyBase_C, Taiju) == 0x0003A0, "Member 'ABP_SkyBase_C::Taiju' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, MajouKumo) == 0x0003A8, "Member 'ABP_SkyBase_C::MajouKumo' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, Majou) == 0x0003B0, "Member 'ABP_SkyBase_C::Majou' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, Redstar) == 0x0003B8, "Member 'ABP_SkyBase_C::Redstar' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, Moon) == 0x0003C0, "Member 'ABP_SkyBase_C::Moon' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkyDomeInner) == 0x0003C8, "Member 'ABP_SkyBase_C::SkyDomeInner' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkyDomeOuter) == 0x0003D0, "Member 'ABP_SkyBase_C::SkyDomeOuter' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkyDomeMiddle) == 0x0003D8, "Member 'ABP_SkyBase_C::SkyDomeMiddle' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, Base) == 0x0003E0, "Member 'ABP_SkyBase_C::Base' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SunLight) == 0x0003E8, "Member 'ABP_SkyBase_C::SunLight' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, MoonLight) == 0x0003F0, "Member 'ABP_SkyBase_C::MoonLight' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, MoonMaterial) == 0x0003F8, "Member 'ABP_SkyBase_C::MoonMaterial' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, EditorTime) == 0x000400, "Member 'ABP_SkyBase_C::EditorTime' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, ExecUpdate) == 0x00040C, "Member 'ABP_SkyBase_C::ExecUpdate' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, MID_Outer) == 0x000410, "Member 'ABP_SkyBase_C::MID_Outer' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, MID_Inner) == 0x000418, "Member 'ABP_SkyBase_C::MID_Inner' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, MID_Middle) == 0x000420, "Member 'ABP_SkyBase_C::MID_Middle' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, MID_Moon) == 0x000428, "Member 'ABP_SkyBase_C::MID_Moon' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, MID_CloudShadow) == 0x000430, "Member 'ABP_SkyBase_C::MID_CloudShadow' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, MID_Majou) == 0x000438, "Member 'ABP_SkyBase_C::MID_Majou' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, MID_MajouKumo) == 0x000440, "Member 'ABP_SkyBase_C::MID_MajouKumo' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, MID_Taiju) == 0x000448, "Member 'ABP_SkyBase_C::MID_Taiju' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, MID_LightFunction) == 0x000450, "Member 'ABP_SkyBase_C::MID_LightFunction' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CloudyRate) == 0x000458, "Member 'ABP_SkyBase_C::CloudyRate' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, NightRate) == 0x00045C, "Member 'ABP_SkyBase_C::NightRate' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, OffsetRot) == 0x000460, "Member 'ABP_SkyBase_C::OffsetRot' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, DirectionalLightRotAxis) == 0x00046C, "Member 'ABP_SkyBase_C::DirectionalLightRotAxis' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CurrentSunRot) == 0x000478, "Member 'ABP_SkyBase_C::CurrentSunRot' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CurrentLightRot) == 0x00047C, "Member 'ABP_SkyBase_C::CurrentLightRot' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, WeatherChangeTime) == 0x000480, "Member 'ABP_SkyBase_C::WeatherChangeTime' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, WeatherChangeTimeBase) == 0x000484, "Member 'ABP_SkyBase_C::WeatherChangeTimeBase' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, MoonRot) == 0x000488, "Member 'ABP_SkyBase_C::MoonRot' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, MoonSize) == 0x000494, "Member 'ABP_SkyBase_C::MoonSize' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, MoonEmissivePow) == 0x000498, "Member 'ABP_SkyBase_C::MoonEmissivePow' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, MoonColor) == 0x00049C, "Member 'ABP_SkyBase_C::MoonColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, MoonLightColor) == 0x0004AC, "Member 'ABP_SkyBase_C::MoonLightColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, MoonLightBrightness) == 0x0004BC, "Member 'ABP_SkyBase_C::MoonLightBrightness' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkyTime) == 0x0004C0, "Member 'ABP_SkyBase_C::SkyTime' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, OldTime) == 0x0004C4, "Member 'ABP_SkyBase_C::OldTime' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SunTiltAngle) == 0x0004C8, "Member 'ABP_SkyBase_C::SunTiltAngle' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SunPathAngle) == 0x0004CC, "Member 'ABP_SkyBase_C::SunPathAngle' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CloudTopMaterial) == 0x0004D0, "Member 'ABP_SkyBase_C::CloudTopMaterial' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CloudSideMaterial) == 0x0004D8, "Member 'ABP_SkyBase_C::CloudSideMaterial' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, LightFunctionMaterial) == 0x0004E0, "Member 'ABP_SkyBase_C::LightFunctionMaterial' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CloudScrollAngle) == 0x0004E8, "Member 'ABP_SkyBase_C::CloudScrollAngle' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CloudNearSpeed) == 0x0004EC, "Member 'ABP_SkyBase_C::CloudNearSpeed' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CloudFarSpeed) == 0x0004F0, "Member 'ABP_SkyBase_C::CloudFarSpeed' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CloudSideSpeed) == 0x0004F4, "Member 'ABP_SkyBase_C::CloudSideSpeed' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, UpdateCounter) == 0x0004F8, "Member 'ABP_SkyBase_C::UpdateCounter' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, NightRateTable) == 0x000500, "Member 'ABP_SkyBase_C::NightRateTable' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TopCloudRate) == 0x000510, "Member 'ABP_SkyBase_C::TopCloudRate' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SunHeight) == 0x000514, "Member 'ABP_SkyBase_C::SunHeight' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, UpdateOtherEditorTime) == 0x000518, "Member 'ABP_SkyBase_C::UpdateOtherEditorTime' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SunLightMove) == 0x000519, "Member 'ABP_SkyBase_C::SunLightMove' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, RedstarRot) == 0x00051C, "Member 'ABP_SkyBase_C::RedstarRot' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, RedstarSize) == 0x000528, "Member 'ABP_SkyBase_C::RedstarSize' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SunRadius) == 0x000530, "Member 'ABP_SkyBase_C::SunRadius' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, MoonLightRotationTemp) == 0x000540, "Member 'ABP_SkyBase_C::MoonLightRotationTemp' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TimerHandleFine) == 0x000550, "Member 'ABP_SkyBase_C::TimerHandleFine' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TimerHandleCloudy) == 0x000558, "Member 'ABP_SkyBase_C::TimerHandleCloudy' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CloudyCloudNearSpeed) == 0x000560, "Member 'ABP_SkyBase_C::CloudyCloudNearSpeed' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CloudyCloudFarSpeed) == 0x000564, "Member 'ABP_SkyBase_C::CloudyCloudFarSpeed' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CloudyCloudSideSpeed) == 0x000568, "Member 'ABP_SkyBase_C::CloudyCloudSideSpeed' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CloudyTopCloudRate) == 0x00056C, "Member 'ABP_SkyBase_C::CloudyTopCloudRate' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, StarBrightness) == 0x000570, "Member 'ABP_SkyBase_C::StarBrightness' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, StarRepeatscale) == 0x000580, "Member 'ABP_SkyBase_C::StarRepeatscale' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, RedstarVisible) == 0x000584, "Member 'ABP_SkyBase_C::RedstarVisible' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, MajouRot) == 0x000588, "Member 'ABP_SkyBase_C::MajouRot' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, MajouSize) == 0x000594, "Member 'ABP_SkyBase_C::MajouSize' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, MajouVisible) == 0x000598, "Member 'ABP_SkyBase_C::MajouVisible' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkyParameter) == 0x0005A0, "Member 'ABP_SkyBase_C::SkyParameter' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkyZenithColor) == 0x0005B0, "Member 'ABP_SkyBase_C::SkyZenithColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkyMiddleColor) == 0x0005C0, "Member 'ABP_SkyBase_C::SkyMiddleColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkyHorizonColor) == 0x0005D0, "Member 'ABP_SkyBase_C::SkyHorizonColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkySunLightColor) == 0x0005E0, "Member 'ABP_SkyBase_C::SkySunLightColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkyOverallColor) == 0x0005F0, "Member 'ABP_SkyBase_C::SkyOverallColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkySunColor) == 0x000600, "Member 'ABP_SkyBase_C::SkySunColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkyCloudColor) == 0x000610, "Member 'ABP_SkyBase_C::SkyCloudColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkyCloudColorShadow) == 0x000620, "Member 'ABP_SkyBase_C::SkyCloudColorShadow' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkyMoonLightColor) == 0x000630, "Member 'ABP_SkyBase_C::SkyMoonLightColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkyTaijuColorPlaneBright) == 0x000640, "Member 'ABP_SkyBase_C::SkyTaijuColorPlaneBright' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkyTaijuColorPlaneShadow) == 0x000650, "Member 'ABP_SkyBase_C::SkyTaijuColorPlaneShadow' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkyMajouColorPlaneBright) == 0x000660, "Member 'ABP_SkyBase_C::SkyMajouColorPlaneBright' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkyMajouColorPlaneShadow) == 0x000670, "Member 'ABP_SkyBase_C::SkyMajouColorPlaneShadow' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkySunLightIntensity) == 0x000680, "Member 'ABP_SkyBase_C::SkySunLightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkyHorizonFalloff) == 0x000684, "Member 'ABP_SkyBase_C::SkyHorizonFalloff' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkyMiddleFalloff) == 0x000688, "Member 'ABP_SkyBase_C::SkyMiddleFalloff' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, OldWeather) == 0x00068C, "Member 'ABP_SkyBase_C::OldWeather' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, NewWeather) == 0x00068D, "Member 'ABP_SkyBase_C::NewWeather' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TimerHandleWeatherChange) == 0x000690, "Member 'ABP_SkyBase_C::TimerHandleWeatherChange' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, WeatherChangeRate) == 0x000698, "Member 'ABP_SkyBase_C::WeatherChangeRate' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkyStarBrightness) == 0x00069C, "Member 'ABP_SkyBase_C::SkyStarBrightness' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkyCloudOpacity) == 0x0006A0, "Member 'ABP_SkyBase_C::SkyCloudOpacity' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkyMoonlightBrightness) == 0x0006A4, "Member 'ABP_SkyBase_C::SkyMoonlightBrightness' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkySunBrightness) == 0x0006A8, "Member 'ABP_SkyBase_C::SkySunBrightness' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TempSkyParam) == 0x0006B0, "Member 'ABP_SkyBase_C::TempSkyParam' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkyMoonLightIntensity) == 0x0007B8, "Member 'ABP_SkyBase_C::SkyMoonLightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkyMoonAlpha) == 0x0007BC, "Member 'ABP_SkyBase_C::SkyMoonAlpha' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TempZenithColor) == 0x0007C0, "Member 'ABP_SkyBase_C::TempZenithColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TempMiddleColor) == 0x0007D0, "Member 'ABP_SkyBase_C::TempMiddleColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TempHorizonColor) == 0x0007E0, "Member 'ABP_SkyBase_C::TempHorizonColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TempOverallColor) == 0x0007F0, "Member 'ABP_SkyBase_C::TempOverallColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TempSunLightColor) == 0x000800, "Member 'ABP_SkyBase_C::TempSunLightColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TempSunColor) == 0x000810, "Member 'ABP_SkyBase_C::TempSunColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TempCloudColor) == 0x000820, "Member 'ABP_SkyBase_C::TempCloudColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TempCloudColorShadow) == 0x000830, "Member 'ABP_SkyBase_C::TempCloudColorShadow' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TempMoonLightColor) == 0x000840, "Member 'ABP_SkyBase_C::TempMoonLightColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TempTaijuColorPlaneBright) == 0x000850, "Member 'ABP_SkyBase_C::TempTaijuColorPlaneBright' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TempTaijuColorPlaneShadow) == 0x000860, "Member 'ABP_SkyBase_C::TempTaijuColorPlaneShadow' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TempMajouColorPlaneBright) == 0x000870, "Member 'ABP_SkyBase_C::TempMajouColorPlaneBright' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TempMajouColorPlaneShadow) == 0x000880, "Member 'ABP_SkyBase_C::TempMajouColorPlaneShadow' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TempSunLightIntensity) == 0x000890, "Member 'ABP_SkyBase_C::TempSunLightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TempHorizonFalloff) == 0x000894, "Member 'ABP_SkyBase_C::TempHorizonFalloff' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TempMiddleFalloff) == 0x000898, "Member 'ABP_SkyBase_C::TempMiddleFalloff' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TempCloudOpacity) == 0x00089C, "Member 'ABP_SkyBase_C::TempCloudOpacity' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TempMoonLightBrightness) == 0x0008A0, "Member 'ABP_SkyBase_C::TempMoonLightBrightness' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, EditorWeather) == 0x0008A4, "Member 'ABP_SkyBase_C::EditorWeather' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, EnableThunder) == 0x0008A5, "Member 'ABP_SkyBase_C::EnableThunder' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, DefaultThunder) == 0x0008A6, "Member 'ABP_SkyBase_C::DefaultThunder' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, Thunderdirection) == 0x0008A8, "Member 'ABP_SkyBase_C::Thunderdirection' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, ThunderInterval) == 0x0008B4, "Member 'ABP_SkyBase_C::ThunderInterval' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, ThunderPower) == 0x0008B8, "Member 'ABP_SkyBase_C::ThunderPower' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, ThunderRadiusSize) == 0x0008BC, "Member 'ABP_SkyBase_C::ThunderRadiusSize' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TimeChangeFog) == 0x0008C0, "Member 'ABP_SkyBase_C::TimeChangeFog' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, ThunderColor) == 0x0008C8, "Member 'ABP_SkyBase_C::ThunderColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SkyChangeReq) == 0x0008D8, "Member 'ABP_SkyBase_C::SkyChangeReq' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SunRadiusRateTable) == 0x0008E0, "Member 'ABP_SkyBase_C::SunRadiusRateTable' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SunShadowCancelRate) == 0x0008F0, "Member 'ABP_SkyBase_C::SunShadowCancelRate' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, MoonShadowCancelRate) == 0x000900, "Member 'ABP_SkyBase_C::MoonShadowCancelRate' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SunRadiusRate) == 0x000910, "Member 'ABP_SkyBase_C::SunRadiusRate' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TimeChangeCloud) == 0x000918, "Member 'ABP_SkyBase_C::TimeChangeCloud' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, LightRate) == 0x000920, "Member 'ABP_SkyBase_C::LightRate' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TaijuRot) == 0x000924, "Member 'ABP_SkyBase_C::TaijuRot' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TaijuSize) == 0x000930, "Member 'ABP_SkyBase_C::TaijuSize' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TaijuVisible) == 0x000934, "Member 'ABP_SkyBase_C::TaijuVisible' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, FastWeatherChange) == 0x000935, "Member 'ABP_SkyBase_C::FastWeatherChange' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, ThunderMaskAlpha) == 0x000938, "Member 'ABP_SkyBase_C::ThunderMaskAlpha' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, ThunderMaskConst) == 0x00093C, "Member 'ABP_SkyBase_C::ThunderMaskConst' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CloudShadowScrollAngleOffset) == 0x000940, "Member 'ABP_SkyBase_C::CloudShadowScrollAngleOffset' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, OpacityAll) == 0x000944, "Member 'ABP_SkyBase_C::OpacityAll' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, RedstarSScenarioVisible) == 0x000948, "Member 'ABP_SkyBase_C::RedstarSScenarioVisible' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, RedstarEternalHidden) == 0x000949, "Member 'ABP_SkyBase_C::RedstarEternalHidden' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TaijuEternalHidden) == 0x00094A, "Member 'ABP_SkyBase_C::TaijuEternalHidden' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TempRedStarVisible) == 0x00094B, "Member 'ABP_SkyBase_C::TempRedStarVisible' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TempMajoVisible) == 0x00094C, "Member 'ABP_SkyBase_C::TempMajoVisible' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, TempTaijuVisible) == 0x00094D, "Member 'ABP_SkyBase_C::TempTaijuVisible' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, Test3DMode) == 0x00094E, "Member 'ABP_SkyBase_C::Test3DMode' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, Conv3DScale) == 0x000950, "Member 'ABP_SkyBase_C::Conv3DScale' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CloudShadowScale) == 0x000954, "Member 'ABP_SkyBase_C::CloudShadowScale' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CloudShadowPosX) == 0x000958, "Member 'ABP_SkyBase_C::CloudShadowPosX' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CloudShadowPosY) == 0x00095C, "Member 'ABP_SkyBase_C::CloudShadowPosY' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CroudShadowRadius) == 0x000960, "Member 'ABP_SkyBase_C::CroudShadowRadius' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, BillboardDistanceScale) == 0x000964, "Member 'ABP_SkyBase_C::BillboardDistanceScale' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, EndingSkyParameterIndex) == 0x000968, "Member 'ABP_SkyBase_C::EndingSkyParameterIndex' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, OutRangeA) == 0x00096C, "Member 'ABP_SkyBase_C::OutRangeA' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, OutRangeB) == 0x000970, "Member 'ABP_SkyBase_C::OutRangeB' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SunShadowCorrection) == 0x000974, "Member 'ABP_SkyBase_C::SunShadowCorrection' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, SunShadowMaxLimit) == 0x000978, "Member 'ABP_SkyBase_C::SunShadowMaxLimit' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_Event_CSID7) == 0x000980, "Member 'ABP_SkyBase_C::K2Node_Event_CSID7' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_CustomEvent_SunLightColor) == 0x000988, "Member 'ABP_SkyBase_C::K2Node_CustomEvent_SunLightColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_CustomEvent_SunLightIntensity) == 0x000998, "Member 'ABP_SkyBase_C::K2Node_CustomEvent_SunLightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_CustomEvent_SunColor) == 0x00099C, "Member 'ABP_SkyBase_C::K2Node_CustomEvent_SunColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_CustomEvent_SunBrightness) == 0x0009AC, "Member 'ABP_SkyBase_C::K2Node_CustomEvent_SunBrightness' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_CustomEvent_SunRadius) == 0x0009B0, "Member 'ABP_SkyBase_C::K2Node_CustomEvent_SunRadius' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_CustomEvent_MoonAlpha) == 0x0009B4, "Member 'ABP_SkyBase_C::K2Node_CustomEvent_MoonAlpha' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_CustomEvent_StarBrightness) == 0x0009B8, "Member 'ABP_SkyBase_C::K2Node_CustomEvent_StarBrightness' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_CustomEvent_StarRepeatscale) == 0x0009BC, "Member 'ABP_SkyBase_C::K2Node_CustomEvent_StarRepeatscale' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_CustomEvent_CloudColor) == 0x0009C0, "Member 'ABP_SkyBase_C::K2Node_CustomEvent_CloudColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_CustomEvent_CloudColorShadow) == 0x0009D0, "Member 'ABP_SkyBase_C::K2Node_CustomEvent_CloudColorShadow' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_CustomEvent_CloudyRate) == 0x0009E0, "Member 'ABP_SkyBase_C::K2Node_CustomEvent_CloudyRate' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_CustomEvent_SunLightRotation) == 0x0009E4, "Member 'ABP_SkyBase_C::K2Node_CustomEvent_SunLightRotation' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_CustomEvent_LightDirection) == 0x0009F0, "Member 'ABP_SkyBase_C::K2Node_CustomEvent_LightDirection' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_CustomEvent_SkygradDirection) == 0x000A00, "Member 'ABP_SkyBase_C::K2Node_CustomEvent_SkygradDirection' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_Event_CSID3) == 0x000A10, "Member 'ABP_SkyBase_C::K2Node_Event_CSID3' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_MathExpression_ReturnValue) == 0x000A18, "Member 'ABP_SkyBase_C::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_DynamicCast_AsBP_COMP_Weather_Affect) == 0x000A20, "Member 'ABP_SkyBase_C::K2Node_DynamicCast_AsBP_COMP_Weather_Affect' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_DynamicCast_bSuccess) == 0x000A28, "Member 'ABP_SkyBase_C::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_CustomEvent_ZenithColor) == 0x000A2C, "Member 'ABP_SkyBase_C::K2Node_CustomEvent_ZenithColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_CustomEvent_MiddleColor) == 0x000A3C, "Member 'ABP_SkyBase_C::K2Node_CustomEvent_MiddleColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_CustomEvent_HorizonColor) == 0x000A4C, "Member 'ABP_SkyBase_C::K2Node_CustomEvent_HorizonColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_CustomEvent_OverallColor) == 0x000A5C, "Member 'ABP_SkyBase_C::K2Node_CustomEvent_OverallColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_CustomEvent_HorizonFalloff) == 0x000A6C, "Member 'ABP_SkyBase_C::K2Node_CustomEvent_HorizonFalloff' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_CustomEvent_MiddleFalloff) == 0x000A70, "Member 'ABP_SkyBase_C::K2Node_CustomEvent_MiddleFalloff' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CallFunc_GetWeatherChangeRate_WeatherChangeRate) == 0x000A74, "Member 'ABP_SkyBase_C::CallFunc_GetWeatherChangeRate_WeatherChangeRate' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CallFunc_Get_Time_Float_Float) == 0x000A78, "Member 'ABP_SkyBase_C::CallFunc_Get_Time_Float_Float' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CallFunc_GetNowSkyParameter_ZenithColor) == 0x000A7C, "Member 'ABP_SkyBase_C::CallFunc_GetNowSkyParameter_ZenithColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CallFunc_GetNowSkyParameter_MiddleColor) == 0x000A8C, "Member 'ABP_SkyBase_C::CallFunc_GetNowSkyParameter_MiddleColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CallFunc_GetNowSkyParameter_HorizonColor) == 0x000A9C, "Member 'ABP_SkyBase_C::CallFunc_GetNowSkyParameter_HorizonColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CallFunc_GetNowSkyParameter_OverallColor) == 0x000AAC, "Member 'ABP_SkyBase_C::CallFunc_GetNowSkyParameter_OverallColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CallFunc_GetNowSkyParameter_SunLightColor) == 0x000ABC, "Member 'ABP_SkyBase_C::CallFunc_GetNowSkyParameter_SunLightColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CallFunc_GetNowSkyParameter_SunColor) == 0x000ACC, "Member 'ABP_SkyBase_C::CallFunc_GetNowSkyParameter_SunColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CallFunc_GetNowSkyParameter_CloudColor) == 0x000ADC, "Member 'ABP_SkyBase_C::CallFunc_GetNowSkyParameter_CloudColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CallFunc_GetNowSkyParameter_CloudColorShadow) == 0x000AEC, "Member 'ABP_SkyBase_C::CallFunc_GetNowSkyParameter_CloudColorShadow' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CallFunc_GetNowSkyParameter_SunLightIntensity) == 0x000AFC, "Member 'ABP_SkyBase_C::CallFunc_GetNowSkyParameter_SunLightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CallFunc_GetNowSkyParameter_HorizonFalloff) == 0x000B00, "Member 'ABP_SkyBase_C::CallFunc_GetNowSkyParameter_HorizonFalloff' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CallFunc_GetNowSkyParameter_MiddleFalloff) == 0x000B04, "Member 'ABP_SkyBase_C::CallFunc_GetNowSkyParameter_MiddleFalloff' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CallFunc_GetNowSkyParameter_CloudOpacity) == 0x000B08, "Member 'ABP_SkyBase_C::CallFunc_GetNowSkyParameter_CloudOpacity' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CallFunc_GetNowSkyParameter_MoonLightColor) == 0x000B0C, "Member 'ABP_SkyBase_C::CallFunc_GetNowSkyParameter_MoonLightColor' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CallFunc_GetNowSkyParameter_MoonLightBrightness) == 0x000B1C, "Member 'ABP_SkyBase_C::CallFunc_GetNowSkyParameter_MoonLightBrightness' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CallFunc_GetNowSkyParameter_TaijuColorPlaneBright) == 0x000B20, "Member 'ABP_SkyBase_C::CallFunc_GetNowSkyParameter_TaijuColorPlaneBright' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CallFunc_GetNowSkyParameter_TaijuColorPlaneShadow) == 0x000B30, "Member 'ABP_SkyBase_C::CallFunc_GetNowSkyParameter_TaijuColorPlaneShadow' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CallFunc_GetNowSkyParameter_MajouColorPlaneBright) == 0x000B40, "Member 'ABP_SkyBase_C::CallFunc_GetNowSkyParameter_MajouColorPlaneBright' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CallFunc_GetNowSkyParameter_MajouColorPlaneShadow) == 0x000B50, "Member 'ABP_SkyBase_C::CallFunc_GetNowSkyParameter_MajouColorPlaneShadow' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_Event_CSID2) == 0x000B60, "Member 'ABP_SkyBase_C::K2Node_Event_CSID2' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_Event_CSID) == 0x000B68, "Member 'ABP_SkyBase_C::K2Node_Event_CSID' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_CustomEvent_MaterialInstanceDynamic) == 0x000B70, "Member 'ABP_SkyBase_C::K2Node_CustomEvent_MaterialInstanceDynamic' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_CustomEvent_ColorPlaneBright) == 0x000B78, "Member 'ABP_SkyBase_C::K2Node_CustomEvent_ColorPlaneBright' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_CustomEvent_ColorPlaneShadow) == 0x000B88, "Member 'ABP_SkyBase_C::K2Node_CustomEvent_ColorPlaneShadow' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_CustomEvent_Alpha) == 0x000B98, "Member 'ABP_SkyBase_C::K2Node_CustomEvent_Alpha' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_DynamicCast_AsBP_COMP_Weather_Affect2) == 0x000BA0, "Member 'ABP_SkyBase_C::K2Node_DynamicCast_AsBP_COMP_Weather_Affect2' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_DynamicCast_bSuccess2) == 0x000BA8, "Member 'ABP_SkyBase_C::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_DynamicCast_AsBP_COMP_Weather_Affect3) == 0x000BB0, "Member 'ABP_SkyBase_C::K2Node_DynamicCast_AsBP_COMP_Weather_Affect3' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_DynamicCast_bSuccess3) == 0x000BB8, "Member 'ABP_SkyBase_C::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_Event_CSID4) == 0x000BC0, "Member 'ABP_SkyBase_C::K2Node_Event_CSID4' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_Event_DeltaSeconds) == 0x000BC8, "Member 'ABP_SkyBase_C::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_Event_CSID5) == 0x000BD0, "Member 'ABP_SkyBase_C::K2Node_Event_CSID5' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_Event_CSID6) == 0x000BD8, "Member 'ABP_SkyBase_C::K2Node_Event_CSID6' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, CallFunc_Get_Time_Float_Float2) == 0x000BE0, "Member 'ABP_SkyBase_C::CallFunc_Get_Time_Float_Float2' has a wrong offset!");
static_assert(offsetof(ABP_SkyBase_C, K2Node_MathExpression_ReturnValue2) == 0x000BE4, "Member 'ABP_SkyBase_C::K2Node_MathExpression_ReturnValue2' has a wrong offset!");

}

