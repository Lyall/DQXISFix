#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ActionSecondCheck

#include "Basic.hpp"

#include "JackGame_structs.hpp"
#include "JackGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ActionSecondCheck.BP_ActionSecondCheck_C
// 0x0018 (0x0478 - 0x0460)
class ABP_ActionSecondCheck_C final : public AJackActionSecondCheck
{
public:
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Parts;                                             // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void SC_Yakusou_Ema(bool* Success);
	void SC_Test_Hoimi(bool* Success);
	void SC_Monster_Renkei_T(bool* Success);
	void UserConstructionScript();
	void SC_M603_AliveLeftArm(bool* bSuccess);
	void SC_M603_AliveRightArm(bool* bSuccess);
	void SC_M603_MaskLess(bool* Success);
	void SC_M601_Akaikiri(bool* bSuccess);
	bool SC_M603_DarkMinadein_1();
	void SC_KingSlime_M005_E001(bool* bSuccess);
	void SC_M718_NakamaYobi_Start(bool* Success);
	void SC_M718_NakamaYobi_02(bool* Success);
	void SC_M564_OriNiTozikomeru(bool* bReturnValue);
	bool SC_M603_TokiWoUbau();
	void SC_Tgt_Mahokanta_F(bool* Success);
	void SC_Cast_HP30_Up_F(bool* Success);
	void SC_Cast_HP50_Up_F(bool* Success);
	void SC_Tgt_HP50_Up_F(bool* Success);
	void SC_TgtArea_HP50_Under_66per_T(bool* Success);
	void SC_Tgt_OddEffect_T(bool* Success);
	void SC_TgtArea_Sibou_Megazaru_T(bool* Success);
	void SC_Tgt_SlideMax_F(bool* Success);
	void SC_Tgt_OddEffect_Attribute0_F(bool* Success);
	void SC_Tgt_OddEffect_F(bool* Success);
	void SC_M603_DeadLeftArm(bool* ReturnValu);
	void SC_M603_DeadRightArm(bool* ReturnValu);
	void SC_Tgt_Asutoron_Gold_F(bool* Success);
	void SC_EnemyAll_MP0_Under_F(bool* Success);
	void SC_EnemyAll_Fuuin_F(bool* Success);
	void SC_Tgt_MP0_Under_F(bool* Success);
	void SC_Tgt_MP100_Up_F(bool* Success);
	void SC_Nioudati_F(bool* Success);
	void SC_Tgt_AutoKaifuku_HP_F(bool* Success);
	void SC_Tgt_HonooTaisei_Down_F(bool* Success);
	void SC_Tgt_ConditionGood_T(bool* Success);
	void SC_TgtArea_Zone_66per_F(bool* Success);
	void SC_Cast_Zone_T(bool* Success);
	void SC_Cast_Genwaku_F(bool* Success);
	void SC_Cast_Not_YamiNoKoromoHomerosu_T(bool* Success);
	void SC_Cast_Not_YamiNoKoromo_T(bool* Success);
	void SC_Cast_HP50_Under_T(bool* Success);
	void SC_Cast_HP50_Under_F(bool* Success);
	void SC_Tgt_AsutoronGold_One_T(bool* Success);
	void SC_Tgt_Genwaku_One_F(bool* Success);
	void SC_Tgt_MeikaiNoKiri_One_F(bool* Success);
	void SC_Tgt_RedOrb_One_F(bool* Success);
	void SC_Tgt_TokiWoUbau_One_F(bool* Success);
	void SC_Tgt_KougekiDamage0_F(bool* Success);
	void SC_Tgt_OnaziMonsterID_F(bool* Success);
	void SC_NakamaYobi_1_Under_T(bool* Success);
	void SC_NakamaYobi_2_Up_F(bool* Success);
	void SC_NakamaYobi_3_Up_F(bool* Success);
	void SC_NakamaYobi_4_Up_F(bool* Success);
	void SC_NakamaYobi_CostOver_F(bool* Success);
	void SC_Kabau_Kuragon_T(bool* Success);
	void SC_Nigeru_T(bool* Success);
	void SC_KinguSuraimu_T(bool* Success);
	void SC_Tgt_Ryuugan_Damage_F(bool* Success);
	void SC_1st_Tgt_HP50per_Under_F(bool* Success);
	void SC_Nakama_2_Under_F(bool* Success);
	void SC_Tgt_AsutoronGold_Zero_T(bool* Success);
	void SC_Nakama_1_Under_F(bool* Success);
	void SC_Tukkomi_T(bool* Success);
	void SC_Cast_HP80_Up_F(bool* Success);
	void SC_Enemy_AsutoronGold_One_T(bool* Success);
	void SC_Enemy_AsutoronGold_Zero_T(bool* Success);
	void SC_Kabau_F(bool* Success);
	void SC_Cast_MP15_Under_T_M708(bool* Success);
	void SC_Cast_MP3_Under_T_M704(bool* Success);
	void SC_Cast_MP8_Up_T_M704(bool* Success);
	void SC_Tgt_Sosei_CostOver_F(bool* Success);
	void SC_TgtArea_Sosei_CostOver_F(bool* Success);
	void SC_Tgt_NioudatiTarget_T(bool* Success);
	void SC_Enemy_Number_1_Under_T(bool* Success);
	void SC_Tgt_MP50per_Under_T(bool* Success);
	void SC_Enemy_Tozikomerareru_Zero_T(bool* Success);
	void SC_Cast_HP_Down_M716_01_T(bool* Success);
	void SC_Cast_HP_Down_M716_02_T(bool* Success);
	void SC_Tgt_Mahi_F(bool* Success);
	void SC_Tgt_Nemuri_F(bool* Succsess);
	void SC_Tgt_Yasumi_F(bool* Succsess);
	void CS_Cast_Taberu_F(bool* Success);
	void SC_Tgt_TyouBannougusuri_T(bool* Success);
	void SC_Tgt_Oharai_T(bool* Success);
	void SC_JasinNoKo_Number_T(bool* Success);
	void SC_Enemy_Dead_3_Up_F(bool* Success);
	void SC_Enemy_TokiWoUbau_1_Up_T(bool* Success);
	void SC_Enemy_TokiWoUbau_0_T(bool* Success);
	void SC_Tgt_MP30per_Under_T(bool* Success);
	void SC_Tgt_Guest_F(bool* Success);
	bool SC_M603_DarkMinadein_2();
	bool SC_M603_DarkMinadein_3();
	bool SC_M603_DarkMinadein_4();
	void SC_Tgt_TokiWoUbau_OddEffect_F(bool* Success);
	bool SC_M603_DarkMinadein_5();
	void SC_JasinNoKo_1_Up_T(bool* Success);
	void SC_NakamaYobi_M007_E004_1_F(bool* Success);
	void SC_NakamaYobi_M568_E005_1_F(bool* Success);
	void SC_Nigeru_M548_E093_S01_1_F(bool* Success);
	void SC_Nigeru_Ride_F(bool* Success);
	void SC_Tgt_Ryuugan_F(bool* Success);
	void SC_Tgt_Moudoku_F(bool* Success);
	void SC_1st_Tgt_Konran_F(bool* Success);
	void SC_1st_Tgt_Yasumi_F(bool* Success);
	void SC_1st_Tgt_Nemuri_F(bool* Success);
	void SC_Cast_MP7_Down_T_M540(bool* Success);
	void SC_Cast_MP64_Under_F(bool* Success);
	void SC_TgtArea_HP60_Under_66per_T(bool* Success);
	void SC_Tgt_Asutoron_F(bool* Succsess);
	void SC_Tgt_Gender_Male_F(bool* Succsess);
	void SC_1st_Tgt_Metal_F(bool* Succsess);
	void SC_Tgt_Metal_1_Up_F(bool* Succsess);
	void SC_TgtArea_HP70_Under_66per_T(bool* Success);
	void SC_1st_Tgt_Fuuin_F(bool* Success);
	void SC_1st_Tgt_Mahi_F(bool* Success);
	void SC_JasinNoKo_Nenziru_Number_F(bool* Success);
	void SC_Tgt_JoutaiHenkaMukou_F(bool* Success);
	void SC_Cast_MP30per_Under_F(bool* Success);
	void SC_Cast_Zone_F(bool* Success);
	void SC_Tgt_HP50per_Up_T(bool* Success);
	void SC_Tgt_P001_T(bool* Success);
	void SC_Tgt_P002_T(bool* Success);
	void SC_Tgt_P003_T(bool* Success);
	void SC_Tgt_P004_T(bool* Success);
	void SC_Tgt_P005_T(bool* Success);
	void SC_Tgt_P006_T(bool* Success);
	void SC_Tgt_P007_T(bool* Success);
	void SC_Tgt_P008_T(bool* Success);
	void SC_Tgt_AutoKaifuku_MP_F(bool* Success);
	void SC_Tgt_Bunsin_F(bool* Success);
	void SC_Tgt_HP1Nokori_Seijo_F(bool* Success);
	void SC_Tgt_HP1Nokori_Megami_F(bool* Success);
	void SC_Tgt_Counter_F(bool* Success);
	void SC_Tgt_AutoZaoriku_F(bool* Success);
	void SC_Tgt_Defense_Slide_0_Under_T(bool* Success);
	void SC_Tgt_MikawasiRitu_Up_F(bool* Success);
	void SC_Tgt_DropConfirm_F(bool* Success);
	void SC_Tgt_BousouRitu_Up_F(bool* Success);
	void SC_Tgt_TyouBousouMahouzin_F(bool* Success);
	void SC_Tgt_PowerUp_Yamabiko_F(bool* Success);
	void SC_Tgt_MPSyouhi0_F(bool* Success);
	void SC_Tgt_ZenZokuseiTaisei_Down_F(bool* Success);
	void SC_Tgt_PowerUp_Devil_Mode_F(bool* Success);
	void SC_Tgt_PowerUp_Satan_Mode_F(bool* Success);
	void SC_Tgt_Defense_Slide_1_Up_F(bool* Success);
	void SC_Tgt_HP70_Up_F(bool* Success);
	void SC_TgtArea_AreaHeal_T(bool* Success);
	void SC_HustleDance_T(bool* Success);
	void SC_RoundOver_10_T(bool* Success);
	void SC_Tgt_HP100_Up_F(bool* Success);
	void SC_Tgt_HP80_Up_F(bool* Success);
	void SC_Tgt_Resist_Joutaiijou_Up_F(bool* Success);
	void SC_Enemy_Dead_2_Up_F(bool* Success);
	void SC_Tgt_MPCostUp_F(bool* Success);
	void SC_Nanimosinai_2_Under_F(bool* Success);
	void SC_Appeal_Arisu_F(bool* Success);
	void CS_Cast_TyouTaberu_F_0(bool* Success);
	void SC_Cast_JOUTAIIJOU_UP_F(bool* Success);
	void SC_ZonePoint_T(bool* Success);
	void SC_Tgt_HP95_Up_F(bool* Success);
	void SC_TyouTaberu_Decision_F(bool* Success);
	void SC_Cast_HP5_Under_T(bool* Success);
	void SC_TgtArea_HP70_Under_1per_T(bool* Success);
	void SC_EnemyArea_S040Garinga_T(bool* Success);
	void SC_Cast_Tikaratame_F(bool* Success);
	void SC_TyouTaberu_Oddeffect_F(bool* Success);
	void SC_RoundOver_8_T(bool* Success);
	void SC_EnemyArea_SScenario_T(bool* Success);
	void SC_Enemy_Number_3_Up_T(bool* Success);
	void SC_TgtArea_HP60_Under_1per_T(bool* Success);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ActionSecondCheck_C">();
	}
	static class ABP_ActionSecondCheck_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ActionSecondCheck_C>();
	}
};
static_assert(alignof(ABP_ActionSecondCheck_C) == 0x000008, "Wrong alignment on ABP_ActionSecondCheck_C");
static_assert(sizeof(ABP_ActionSecondCheck_C) == 0x000478, "Wrong size on ABP_ActionSecondCheck_C");
static_assert(offsetof(ABP_ActionSecondCheck_C, DefaultSceneRoot) == 0x000460, "Member 'ABP_ActionSecondCheck_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ActionSecondCheck_C, Parts) == 0x000468, "Member 'ABP_ActionSecondCheck_C::Parts' has a wrong offset!");

}

