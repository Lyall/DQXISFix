#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Menu_Parts_CharacterCapture_000

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "JackGame_structs.hpp"
#include "JackGame_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Menu_Parts_CharacterCapture_000.WBP_Menu_Parts_CharacterCapture_000_C
// 0x02A8 (0x0618 - 0x0370)
class UWBP_Menu_Parts_CharacterCapture_000_C final : public UJackUMGCharacterCaptureControlWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(Transient, DuplicateTransient)
	class UWidgetAnimation*                       ShowCapture;                                       // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CaptureImage;                                      // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           RootPanel;                                         // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Load_Indicator_000_C*              WBP_Load_Indicator_000;                            // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FRotator                               TurnTableRotationDelta;                            // 0x0398(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         CameraMoveInput;                                   // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              AxisVector2D;                                      // 0x03A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayer;                                          // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EJackCharacter                                CharacterType;                                     // 0x03B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B2[0x6];                                      // 0x03B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CharacterName;                                     // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShowingCaptureFlag;                              // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AJackCharacterCaptureCamera*            CaptureCameraRef;                                  // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraZoomPer;                                     // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraBaseLocation;                                // 0x03D4(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CameraSlide;                                       // 0x03E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraPitch;                                       // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CameraSlideInput;                                  // 0x03EC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraSlideSpeed;                                  // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MotionIndex;                                       // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCreatingCaracter;                                // 0x03FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FD[0x3];                                      // 0x03FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CaptureActorLocation;                              // 0x0400(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              FarCameraSlideAreaMin;                             // 0x040C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              FarCameraSlideAreaMax;                             // 0x0414(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              NearCameraSlideAreaMin;                            // 0x041C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              NearCameraSlideAreaMax;                            // 0x0424(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SpawnCharacterState;                               // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_Debug_CharacterCaptureInfo_C*      DebugInfo;                                         // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MonsterAnimDuration;                               // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MonsterAnimRepeatTime;                             // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInSoubiMenu;                                      // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_441[0x3];                                      // 0x0441(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DebugTargetPosMotionOffset;                        // 0x0444(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsDisableCharacterControl;                        // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackDataTableMonsterZukanMotion       MotionData;                                        // 0x0458(0x00C8)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FJackDataTableMonsterZukanMotion       DefaultMotionData;                                 // 0x0520(0x00C8)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bInitializedFlag;                                  // 0x05E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsRightStickSlide;                                // 0x05E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is2DMonster;                                       // 0x05EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5EB[0x1];                                      // 0x05EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               SaveTurnTableRotation;                             // 0x05EC(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsChangedEquipmentOnly;                           // 0x05F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInitializedCamera;                                // 0x05F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FA[0x6];                                      // 0x05FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DispDebugString;                                   // 0x0600(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bIsClosingCapture;                                 // 0x0610(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_WBP_Menu_Parts_CharacterCapture_000(int32 EntryPoint);
	void SetDebugTargetSize(bool bVisible, const struct FVector2D& SlideTargetOrigin, const struct FVector2D& MaxSlideTargetSize, const struct FVector2D& MinSlideTargetSize);
	void Construct();
	void StartClosingCapture();
	void BindCaptureCharacterController(bool bIsRightStickSlide_0);
	void ResetCaptureCameraPosition();
	void HideDebugTargetSize();
	void HideDebugInfo();
	void ShowDebugTargetSize();
	void ShowDebugInfo();
	void UpdateDebugInfo();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdatePlayerCharacter();
	void PlayMotion();
	void SettingMotionData(class FName MonsterZukanID);
	void LeftAxisInput(const struct FVector2D& InVector2D);
	void SetPlayerCharacter(EJackCharacter SetCharacterType);
	void RightAxisInput(const struct FVector2D& InVector2D);
	void Destruct();
	void DeleteCharacter();
	void SetMonsterCharacter(class FName InName);
	void CalcCameraBaseLocation(float NewCameraZoomPer, bool bInit);
	void ClampCameraSlide();
	void EnableDepthMask(class UWidget* InPanel, const struct FVector2D& InAdjustSize);
	void DisableDepthMask();
	void ApplyCameraParamater();
	void InitPlayerCharacterPose();
	void PostInitCharacter(class AJackCharacterCaptureCamera* CaptureCamera);
	void CalcCameraSlideArea();
	void GetCameraSlideArea(float CameraZoomPer_0, struct FVector2D* CameraSlideAreaMax, struct FVector2D* CameraSlideAreaMin);
	void GetCameraSlidePercent(float CameraZoomPer_0, const struct FVector2D& CameraSlide_0, struct FVector2D* CameraSlidePercent);
	void GetCameraSlidePercentMain(float Current, float Max, float Min, float* Percent);
	void SetCameraSlidePercent(float CameraZoomPer_0, const struct FVector2D& CameraSlidePercent);
	void NextSpawnCharacterState();
	void ResetSpawnCharacterState();
	void GetPlayerAnimData(struct FJackZukanMotionWeaponAnimData* WeaponAnimData);
	void IsDisableCharacterControl(bool bIsDisableCharacterControl_0);
	void GetMotionData(struct FJackDataTableMonsterZukanMotion* MotionData_0);
	void SetMotionData(const struct FJackDataTableMonsterZukanMotion& MotionData_0);
	void SetEnableEnvironmentObjects();
	void DisplayDebug(const class FString& InCaption, const class FString& InParam, bool bIsResetString);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Menu_Parts_CharacterCapture_000_C">();
	}
	static class UWBP_Menu_Parts_CharacterCapture_000_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Menu_Parts_CharacterCapture_000_C>();
	}
};
static_assert(alignof(UWBP_Menu_Parts_CharacterCapture_000_C) == 0x000008, "Wrong alignment on UWBP_Menu_Parts_CharacterCapture_000_C");
static_assert(sizeof(UWBP_Menu_Parts_CharacterCapture_000_C) == 0x000618, "Wrong size on UWBP_Menu_Parts_CharacterCapture_000_C");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, UberGraphFrame) == 0x000370, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, ShowCapture) == 0x000378, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::ShowCapture' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, CaptureImage) == 0x000380, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::CaptureImage' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, RootPanel) == 0x000388, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::RootPanel' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, WBP_Load_Indicator_000) == 0x000390, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::WBP_Load_Indicator_000' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, TurnTableRotationDelta) == 0x000398, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::TurnTableRotationDelta' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, CameraMoveInput) == 0x0003A4, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::CameraMoveInput' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, AxisVector2D) == 0x0003A8, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::AxisVector2D' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, IsPlayer) == 0x0003B0, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::IsPlayer' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, CharacterType) == 0x0003B1, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::CharacterType' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, CharacterName) == 0x0003B8, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::CharacterName' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, IsShowingCaptureFlag) == 0x0003C0, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::IsShowingCaptureFlag' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, CaptureCameraRef) == 0x0003C8, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::CaptureCameraRef' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, CameraZoomPer) == 0x0003D0, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::CameraZoomPer' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, CameraBaseLocation) == 0x0003D4, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::CameraBaseLocation' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, CameraSlide) == 0x0003E0, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::CameraSlide' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, CameraPitch) == 0x0003E8, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::CameraPitch' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, CameraSlideInput) == 0x0003EC, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::CameraSlideInput' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, CameraSlideSpeed) == 0x0003F4, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::CameraSlideSpeed' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, MotionIndex) == 0x0003F8, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::MotionIndex' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, IsCreatingCaracter) == 0x0003FC, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::IsCreatingCaracter' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, CaptureActorLocation) == 0x000400, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::CaptureActorLocation' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, FarCameraSlideAreaMin) == 0x00040C, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::FarCameraSlideAreaMin' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, FarCameraSlideAreaMax) == 0x000414, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::FarCameraSlideAreaMax' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, NearCameraSlideAreaMin) == 0x00041C, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::NearCameraSlideAreaMin' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, NearCameraSlideAreaMax) == 0x000424, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::NearCameraSlideAreaMax' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, SpawnCharacterState) == 0x00042C, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::SpawnCharacterState' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, DebugInfo) == 0x000430, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::DebugInfo' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, MonsterAnimDuration) == 0x000438, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::MonsterAnimDuration' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, MonsterAnimRepeatTime) == 0x00043C, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::MonsterAnimRepeatTime' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, bInSoubiMenu) == 0x000440, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::bInSoubiMenu' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, DebugTargetPosMotionOffset) == 0x000444, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::DebugTargetPosMotionOffset' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, bIsDisableCharacterControl) == 0x000450, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::bIsDisableCharacterControl' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, MotionData) == 0x000458, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::MotionData' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, DefaultMotionData) == 0x000520, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::DefaultMotionData' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, bInitializedFlag) == 0x0005E8, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::bInitializedFlag' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, bIsRightStickSlide) == 0x0005E9, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::bIsRightStickSlide' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, Is2DMonster) == 0x0005EA, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::Is2DMonster' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, SaveTurnTableRotation) == 0x0005EC, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::SaveTurnTableRotation' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, bIsChangedEquipmentOnly) == 0x0005F8, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::bIsChangedEquipmentOnly' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, bInitializedCamera) == 0x0005F9, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::bInitializedCamera' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, DispDebugString) == 0x000600, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::DispDebugString' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Parts_CharacterCapture_000_C, bIsClosingCapture) == 0x000610, "Member 'UWBP_Menu_Parts_CharacterCapture_000_C::bIsClosingCapture' has a wrong offset!");

}

