#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KanbanBase

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_KanbanBase.BP_KanbanBase_C.BndEvt__Collision_Back_K2Node_ComponentBoundEvent_91_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_91_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    bpp__OverlappedComponent__pf;                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 bpp__OtherActor__pf;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    bpp__OtherComp__pf;                                // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__OtherBodyIndex__pf;                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bFromSweep__pf;                               // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             bpp__SweepResult__pf__const;                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_91_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_91_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_91_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_91_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_91_ComponentBeginOverlapSignature__DelegateSignature, bpp__OverlappedComponent__pf) == 0x000000, "Member 'BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_91_ComponentBeginOverlapSignature__DelegateSignature::bpp__OverlappedComponent__pf' has a wrong offset!");
static_assert(offsetof(BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_91_ComponentBeginOverlapSignature__DelegateSignature, bpp__OtherActor__pf) == 0x000008, "Member 'BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_91_ComponentBeginOverlapSignature__DelegateSignature::bpp__OtherActor__pf' has a wrong offset!");
static_assert(offsetof(BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_91_ComponentBeginOverlapSignature__DelegateSignature, bpp__OtherComp__pf) == 0x000010, "Member 'BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_91_ComponentBeginOverlapSignature__DelegateSignature::bpp__OtherComp__pf' has a wrong offset!");
static_assert(offsetof(BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_91_ComponentBeginOverlapSignature__DelegateSignature, bpp__OtherBodyIndex__pf) == 0x000018, "Member 'BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_91_ComponentBeginOverlapSignature__DelegateSignature::bpp__OtherBodyIndex__pf' has a wrong offset!");
static_assert(offsetof(BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_91_ComponentBeginOverlapSignature__DelegateSignature, bpp__bFromSweep__pf) == 0x00001C, "Member 'BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_91_ComponentBeginOverlapSignature__DelegateSignature::bpp__bFromSweep__pf' has a wrong offset!");
static_assert(offsetof(BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_91_ComponentBeginOverlapSignature__DelegateSignature, bpp__SweepResult__pf__const) == 0x000020, "Member 'BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_91_ComponentBeginOverlapSignature__DelegateSignature::bpp__SweepResult__pf__const' has a wrong offset!");

// Function BP_KanbanBase.BP_KanbanBase_C.BndEvt__Collision_Back_K2Node_ComponentBoundEvent_96_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_96_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    bpp__OverlappedComponent__pf;                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 bpp__OtherActor__pf;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    bpp__OtherComp__pf;                                // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__OtherBodyIndex__pf;                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_96_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_96_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_96_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_96_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_96_ComponentEndOverlapSignature__DelegateSignature, bpp__OverlappedComponent__pf) == 0x000000, "Member 'BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_96_ComponentEndOverlapSignature__DelegateSignature::bpp__OverlappedComponent__pf' has a wrong offset!");
static_assert(offsetof(BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_96_ComponentEndOverlapSignature__DelegateSignature, bpp__OtherActor__pf) == 0x000008, "Member 'BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_96_ComponentEndOverlapSignature__DelegateSignature::bpp__OtherActor__pf' has a wrong offset!");
static_assert(offsetof(BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_96_ComponentEndOverlapSignature__DelegateSignature, bpp__OtherComp__pf) == 0x000010, "Member 'BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_96_ComponentEndOverlapSignature__DelegateSignature::bpp__OtherComp__pf' has a wrong offset!");
static_assert(offsetof(BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_96_ComponentEndOverlapSignature__DelegateSignature, bpp__OtherBodyIndex__pf) == 0x000018, "Member 'BP_KanbanBase_C_BndEvt__Collision_Back_K2Node_ComponentBoundEvent_96_ComponentEndOverlapSignature__DelegateSignature::bpp__OtherBodyIndex__pf' has a wrong offset!");

// Function BP_KanbanBase.BP_KanbanBase_C.BndEvt__Collision_Front_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    bpp__OverlappedComponent__pf;                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 bpp__OtherActor__pf;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    bpp__OtherComp__pf;                                // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__OtherBodyIndex__pf;                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bFromSweep__pf;                               // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             bpp__SweepResult__pf__const;                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature, bpp__OverlappedComponent__pf) == 0x000000, "Member 'BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature::bpp__OverlappedComponent__pf' has a wrong offset!");
static_assert(offsetof(BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature, bpp__OtherActor__pf) == 0x000008, "Member 'BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature::bpp__OtherActor__pf' has a wrong offset!");
static_assert(offsetof(BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature, bpp__OtherComp__pf) == 0x000010, "Member 'BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature::bpp__OtherComp__pf' has a wrong offset!");
static_assert(offsetof(BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature, bpp__OtherBodyIndex__pf) == 0x000018, "Member 'BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature::bpp__OtherBodyIndex__pf' has a wrong offset!");
static_assert(offsetof(BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature, bpp__bFromSweep__pf) == 0x00001C, "Member 'BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature::bpp__bFromSweep__pf' has a wrong offset!");
static_assert(offsetof(BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature, bpp__SweepResult__pf__const) == 0x000020, "Member 'BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature::bpp__SweepResult__pf__const' has a wrong offset!");

// Function BP_KanbanBase.BP_KanbanBase_C.BndEvt__Collision_Front_K2Node_ComponentBoundEvent_87_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_87_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    bpp__OverlappedComponent__pf;                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 bpp__OtherActor__pf;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    bpp__OtherComp__pf;                                // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__OtherBodyIndex__pf;                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_87_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_87_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_87_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_87_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_87_ComponentEndOverlapSignature__DelegateSignature, bpp__OverlappedComponent__pf) == 0x000000, "Member 'BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_87_ComponentEndOverlapSignature__DelegateSignature::bpp__OverlappedComponent__pf' has a wrong offset!");
static_assert(offsetof(BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_87_ComponentEndOverlapSignature__DelegateSignature, bpp__OtherActor__pf) == 0x000008, "Member 'BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_87_ComponentEndOverlapSignature__DelegateSignature::bpp__OtherActor__pf' has a wrong offset!");
static_assert(offsetof(BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_87_ComponentEndOverlapSignature__DelegateSignature, bpp__OtherComp__pf) == 0x000010, "Member 'BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_87_ComponentEndOverlapSignature__DelegateSignature::bpp__OtherComp__pf' has a wrong offset!");
static_assert(offsetof(BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_87_ComponentEndOverlapSignature__DelegateSignature, bpp__OtherBodyIndex__pf) == 0x000018, "Member 'BP_KanbanBase_C_BndEvt__Collision_Front_K2Node_ComponentBoundEvent_87_ComponentEndOverlapSignature__DelegateSignature::bpp__OtherBodyIndex__pf' has a wrong offset!");

// Function BP_KanbanBase.BP_KanbanBase_C.BndEvt__JackInteractiveActor_K2Node_ComponentBoundEvent_164_ComponentInteractSignature__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_KanbanBase_C_BndEvt__JackInteractiveActor_K2Node_ComponentBoundEvent_164_ComponentInteractSignature__DelegateSignature final
{
public:
	class AActor*                                 bpp__OtherActor__pf;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_KanbanBase_C_BndEvt__JackInteractiveActor_K2Node_ComponentBoundEvent_164_ComponentInteractSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_KanbanBase_C_BndEvt__JackInteractiveActor_K2Node_ComponentBoundEvent_164_ComponentInteractSignature__DelegateSignature");
static_assert(sizeof(BP_KanbanBase_C_BndEvt__JackInteractiveActor_K2Node_ComponentBoundEvent_164_ComponentInteractSignature__DelegateSignature) == 0x000008, "Wrong size on BP_KanbanBase_C_BndEvt__JackInteractiveActor_K2Node_ComponentBoundEvent_164_ComponentInteractSignature__DelegateSignature");
static_assert(offsetof(BP_KanbanBase_C_BndEvt__JackInteractiveActor_K2Node_ComponentBoundEvent_164_ComponentInteractSignature__DelegateSignature, bpp__OtherActor__pf) == 0x000000, "Member 'BP_KanbanBase_C_BndEvt__JackInteractiveActor_K2Node_ComponentBoundEvent_164_ComponentInteractSignature__DelegateSignature::bpp__OtherActor__pf' has a wrong offset!");

// Function BP_KanbanBase.BP_KanbanBase_C.CalcMessageID
// 0x0008 (0x0008 - 0x0000)
struct BP_KanbanBase_C_CalcMessageID final
{
public:
	class FName                                   bpp__MessageID__pf;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_KanbanBase_C_CalcMessageID) == 0x000004, "Wrong alignment on BP_KanbanBase_C_CalcMessageID");
static_assert(sizeof(BP_KanbanBase_C_CalcMessageID) == 0x000008, "Wrong size on BP_KanbanBase_C_CalcMessageID");
static_assert(offsetof(BP_KanbanBase_C_CalcMessageID, bpp__MessageID__pf) == 0x000000, "Member 'BP_KanbanBase_C_CalcMessageID::bpp__MessageID__pf' has a wrong offset!");

// Function BP_KanbanBase.BP_KanbanBase_C.ExecuteUbergraph_BP_KanbanBase_0
// 0x0004 (0x0004 - 0x0000)
struct BP_KanbanBase_C_ExecuteUbergraph_BP_KanbanBase_0 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_KanbanBase_C_ExecuteUbergraph_BP_KanbanBase_0) == 0x000004, "Wrong alignment on BP_KanbanBase_C_ExecuteUbergraph_BP_KanbanBase_0");
static_assert(sizeof(BP_KanbanBase_C_ExecuteUbergraph_BP_KanbanBase_0) == 0x000004, "Wrong size on BP_KanbanBase_C_ExecuteUbergraph_BP_KanbanBase_0");
static_assert(offsetof(BP_KanbanBase_C_ExecuteUbergraph_BP_KanbanBase_0, bpp__EntryPoint__pf) == 0x000000, "Member 'BP_KanbanBase_C_ExecuteUbergraph_BP_KanbanBase_0::bpp__EntryPoint__pf' has a wrong offset!");

// Function BP_KanbanBase.BP_KanbanBase_C.GetQuestMessageID
// 0x0010 (0x0010 - 0x0000)
struct BP_KanbanBase_C_GetQuestMessageID final
{
public:
	class FName                                   bpp__MessageID__pf;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__QuestID__pf;                                  // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_KanbanBase_C_GetQuestMessageID) == 0x000004, "Wrong alignment on BP_KanbanBase_C_GetQuestMessageID");
static_assert(sizeof(BP_KanbanBase_C_GetQuestMessageID) == 0x000010, "Wrong size on BP_KanbanBase_C_GetQuestMessageID");
static_assert(offsetof(BP_KanbanBase_C_GetQuestMessageID, bpp__MessageID__pf) == 0x000000, "Member 'BP_KanbanBase_C_GetQuestMessageID::bpp__MessageID__pf' has a wrong offset!");
static_assert(offsetof(BP_KanbanBase_C_GetQuestMessageID, bpp__QuestID__pf) == 0x000008, "Member 'BP_KanbanBase_C_GetQuestMessageID::bpp__QuestID__pf' has a wrong offset!");

// Function BP_KanbanBase.BP_KanbanBase_C.QuestComplete
// 0x0001 (0x0001 - 0x0000)
struct BP_KanbanBase_C_QuestComplete final
{
public:
	bool                                          bpp__Ret__pf;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_KanbanBase_C_QuestComplete) == 0x000001, "Wrong alignment on BP_KanbanBase_C_QuestComplete");
static_assert(sizeof(BP_KanbanBase_C_QuestComplete) == 0x000001, "Wrong size on BP_KanbanBase_C_QuestComplete");
static_assert(offsetof(BP_KanbanBase_C_QuestComplete, bpp__Ret__pf) == 0x000000, "Member 'BP_KanbanBase_C_QuestComplete::bpp__Ret__pf' has a wrong offset!");

// Function BP_KanbanBase.BP_KanbanBase_C.QuestCompleteAfterTick
// 0x0004 (0x0004 - 0x0000)
struct BP_KanbanBase_C_QuestCompleteAfterTick final
{
public:
	float                                         bpp__DeltaSeconds__pf;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_KanbanBase_C_QuestCompleteAfterTick) == 0x000004, "Wrong alignment on BP_KanbanBase_C_QuestCompleteAfterTick");
static_assert(sizeof(BP_KanbanBase_C_QuestCompleteAfterTick) == 0x000004, "Wrong size on BP_KanbanBase_C_QuestCompleteAfterTick");
static_assert(offsetof(BP_KanbanBase_C_QuestCompleteAfterTick, bpp__DeltaSeconds__pf) == 0x000000, "Member 'BP_KanbanBase_C_QuestCompleteAfterTick::bpp__DeltaSeconds__pf' has a wrong offset!");

// Function BP_KanbanBase.BP_KanbanBase_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_KanbanBase_C_ReceiveTick final
{
public:
	float                                         bpp__DeltaSeconds__pf;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_KanbanBase_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_KanbanBase_C_ReceiveTick");
static_assert(sizeof(BP_KanbanBase_C_ReceiveTick) == 0x000004, "Wrong size on BP_KanbanBase_C_ReceiveTick");
static_assert(offsetof(BP_KanbanBase_C_ReceiveTick, bpp__DeltaSeconds__pf) == 0x000000, "Member 'BP_KanbanBase_C_ReceiveTick::bpp__DeltaSeconds__pf' has a wrong offset!");

// Function BP_KanbanBase.BP_KanbanBase_C.SetCompleteInteraction
// 0x0001 (0x0001 - 0x0000)
struct BP_KanbanBase_C_SetCompleteInteraction final
{
public:
	bool                                          bpp__RestartInteraction__pf;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_KanbanBase_C_SetCompleteInteraction) == 0x000001, "Wrong alignment on BP_KanbanBase_C_SetCompleteInteraction");
static_assert(sizeof(BP_KanbanBase_C_SetCompleteInteraction) == 0x000001, "Wrong size on BP_KanbanBase_C_SetCompleteInteraction");
static_assert(offsetof(BP_KanbanBase_C_SetCompleteInteraction, bpp__RestartInteraction__pf) == 0x000000, "Member 'BP_KanbanBase_C_SetCompleteInteraction::bpp__RestartInteraction__pf' has a wrong offset!");

// Function BP_KanbanBase.BP_KanbanBase_C.SetEnableInteraction
// 0x0001 (0x0001 - 0x0000)
struct BP_KanbanBase_C_SetEnableInteraction final
{
public:
	bool                                          bpp__Enable__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_KanbanBase_C_SetEnableInteraction) == 0x000001, "Wrong alignment on BP_KanbanBase_C_SetEnableInteraction");
static_assert(sizeof(BP_KanbanBase_C_SetEnableInteraction) == 0x000001, "Wrong size on BP_KanbanBase_C_SetEnableInteraction");
static_assert(offsetof(BP_KanbanBase_C_SetEnableInteraction, bpp__Enable__pf) == 0x000000, "Member 'BP_KanbanBase_C_SetEnableInteraction::bpp__Enable__pf' has a wrong offset!");

}

