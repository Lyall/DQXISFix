#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FLIB_UMG

#include "Basic.hpp"

#include "ENUM_Menu_ActionFlowResult_structs.hpp"
#include "JackGame_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.BPFLibTestSetItemId
// 0x00B0 (0x00B0 - 0x0000)
struct BP_FLIB_UMG_C_BPFLibTestSetItemId final
{
public:
	class FName                                   InItemId;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorItem*                   CallFunc_GetAccessorItem_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetItemNameFromId_ReturnValue;            // 0x0020(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0038(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0078(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0088(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_UMG_C_BPFLibTestSetItemId) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_BPFLibTestSetItemId");
static_assert(sizeof(BP_FLIB_UMG_C_BPFLibTestSetItemId) == 0x0000B0, "Wrong size on BP_FLIB_UMG_C_BPFLibTestSetItemId");
static_assert(offsetof(BP_FLIB_UMG_C_BPFLibTestSetItemId, InItemId) == 0x000000, "Member 'BP_FLIB_UMG_C_BPFLibTestSetItemId::InItemId' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_BPFLibTestSetItemId, __WorldContext) == 0x000008, "Member 'BP_FLIB_UMG_C_BPFLibTestSetItemId::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_BPFLibTestSetItemId, CallFunc_GetUMGManager_ReturnValue) == 0x000010, "Member 'BP_FLIB_UMG_C_BPFLibTestSetItemId::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_BPFLibTestSetItemId, CallFunc_GetAccessorItem_ReturnValue) == 0x000018, "Member 'BP_FLIB_UMG_C_BPFLibTestSetItemId::CallFunc_GetAccessorItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_BPFLibTestSetItemId, CallFunc_GetItemNameFromId_ReturnValue) == 0x000020, "Member 'BP_FLIB_UMG_C_BPFLibTestSetItemId::CallFunc_GetItemNameFromId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_BPFLibTestSetItemId, K2Node_MakeStruct_FormatArgumentData) == 0x000038, "Member 'BP_FLIB_UMG_C_BPFLibTestSetItemId::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_BPFLibTestSetItemId, K2Node_MakeArray_Array) == 0x000078, "Member 'BP_FLIB_UMG_C_BPFLibTestSetItemId::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_BPFLibTestSetItemId, CallFunc_Format_ReturnValue) == 0x000088, "Member 'BP_FLIB_UMG_C_BPFLibTestSetItemId::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_BPFLibTestSetItemId, CallFunc_Conv_TextToString_ReturnValue) == 0x0000A0, "Member 'BP_FLIB_UMG_C_BPFLibTestSetItemId::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.DoBattleItemAction
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_UMG_C_DoBattleItemAction final
{
public:
	class UJackUMGUIActionInfo*                   InUIActionInfo;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorBattle*                 CallFunc_GetAccessorBattle_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BattleCommandMenuItem_ReturnValue;        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_UMG_C_DoBattleItemAction) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_DoBattleItemAction");
static_assert(sizeof(BP_FLIB_UMG_C_DoBattleItemAction) == 0x000028, "Wrong size on BP_FLIB_UMG_C_DoBattleItemAction");
static_assert(offsetof(BP_FLIB_UMG_C_DoBattleItemAction, InUIActionInfo) == 0x000000, "Member 'BP_FLIB_UMG_C_DoBattleItemAction::InUIActionInfo' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoBattleItemAction, __WorldContext) == 0x000008, "Member 'BP_FLIB_UMG_C_DoBattleItemAction::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoBattleItemAction, CallFunc_GetUMGManager_ReturnValue) == 0x000010, "Member 'BP_FLIB_UMG_C_DoBattleItemAction::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoBattleItemAction, CallFunc_GetAccessorBattle_ReturnValue) == 0x000018, "Member 'BP_FLIB_UMG_C_DoBattleItemAction::CallFunc_GetAccessorBattle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoBattleItemAction, CallFunc_BattleCommandMenuItem_ReturnValue) == 0x000020, "Member 'BP_FLIB_UMG_C_DoBattleItemAction::CallFunc_BattleCommandMenuItem_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.DoItemUseCommand
// 0x0180 (0x0180 - 0x0000)
struct BP_FLIB_UMG_C_DoItemUseCommand final
{
public:
	class UJackUMGUIActionInfo*                   InUIActionInfoRef;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_Menu_ActionFlowResult                    FlowResult;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackUMGUIActionFlow                          UIFrow;                                            // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGUIActionInfo*                   UIActionInfoRef;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_Menu_ActionFlowResult                    Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorMembers*                CallFunc_GetAccessorMembers_ReturnValue;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorItem*                   CallFunc_GetAccessorItem_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue2;               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacter                                CallFunc_GetBagTargetChar_ReturnValue;             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGAccessorBattle*                 CallFunc_GetAccessorBattle_ReturnValue;            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackFriendGameCharacter*               CallFunc_GetJackCharacterFromType_ReturnValue;     // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue3;               // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGWidgetBase*                     CallFunc_AddUMGMenuWidget_ReturnValue;             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorMembers*                CallFunc_GetAccessorMembers_ReturnValue2;          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_DynamicCast_AsWBP_Menu_Battle_List_001;     // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGAccessorItem*                   CallFunc_GetAccessorItem_ReturnValue2;             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue4;               // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacter                                CallFunc_GetBagTargetChar_ReturnValue2;            // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGAccessorItem*                   CallFunc_GetAccessorItem_ReturnValue3;             // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackFriendGameCharacter*               CallFunc_GetJackCharacterFromType_ReturnValue2;    // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_ActionItem_ReturnValue;                   // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackItem_Bag                                 CallFunc_GetBagSelectedType_ReturnValue;           // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGWidgetBase*                     CallFunc_AddUMGMenuWidget_ReturnValue2;            // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGWidgetBase*                     CallFunc_AddUMGMenuWidget_ReturnValue3;            // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue5;               // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue6;               // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorItem*                   CallFunc_GetAccessorItem_ReturnValue4;             // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorBattle*                 CallFunc_GetAccessorBattle_ReturnValue2;           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_ActionItem_ReturnValue2;                  // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackItem_Bag                                 CallFunc_GetBagSelectedType_ReturnValue2;          // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue7;               // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorBattle*                 CallFunc_GetAccessorBattle_ReturnValue3;           // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue8;               // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorBattle*                 CallFunc_GetAccessorBattle_ReturnValue4;           // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue9;               // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorBattle*                 CallFunc_GetAccessorBattle_ReturnValue5;           // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGWidgetBase*                     CallFunc_AddUMGMenuWidget_ReturnValue4;            // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_DynamicCast_AsWBP_Menu_Battle_List_013;     // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AJackBattleManager*                     CallFunc_GetBattleManager_ReturnValue;             // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInBattle_ReturnValue;                   // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue2;           // 0x0142(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_Menu_ActionFlowResult                    Temp_byte_Variable2;                               // 0x0143(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_BattleCommandMenuItem_ReturnValue;        // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x014D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_Menu_ActionFlowResult                    Temp_byte_Variable3;                               // 0x014E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x014F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable2;                               // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchName2_CmpSuccess;                     // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_Menu_ActionFlowResult                    Temp_byte_Variable4;                               // 0x0152(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_Menu_ActionFlowResult                    Temp_byte_Variable5;                               // 0x0153(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_Menu_ActionFlowResult                    Temp_byte_Variable6;                               // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_Menu_ActionFlowResult                    Temp_byte_Variable7;                               // 0x0155(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_156[0x2];                                      // 0x0156(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackGameCharacter*                     CallFunc_GetFirstTargetCharacter_ReturnValue;      // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BattleCommandMenuItem_ReturnValue2;       // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue2;           // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_Menu_ActionFlowResult                    K2Node_Select_Default;                             // 0x0165(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_166[0x2];                                      // 0x0166(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_BattleCommandMenuItem_ReturnValue3;       // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BattleCommandMenuItem_ReturnValue4;       // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue3;           // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue4;           // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable3;                               // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_Menu_ActionFlowResult                    K2Node_Select2_Default;                            // 0x0173(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum2_CmpSuccess;                     // 0x0175(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable4;                               // 0x0176(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_Menu_ActionFlowResult                    K2Node_Select3_Default;                            // 0x0177(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue3;           // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_Menu_ActionFlowResult                    Temp_byte_Variable8;                               // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_Menu_ActionFlowResult                    K2Node_Select4_Default;                            // 0x017A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_UMG_C_DoItemUseCommand) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_DoItemUseCommand");
static_assert(sizeof(BP_FLIB_UMG_C_DoItemUseCommand) == 0x000180, "Wrong size on BP_FLIB_UMG_C_DoItemUseCommand");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, InUIActionInfoRef) == 0x000000, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::InUIActionInfoRef' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, __WorldContext) == 0x000008, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, FlowResult) == 0x000010, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::FlowResult' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, UIFrow) == 0x000011, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::UIFrow' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, UIActionInfoRef) == 0x000018, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::UIActionInfoRef' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, Temp_byte_Variable) == 0x000020, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetUMGManager_ReturnValue) == 0x000028, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetAccessorMembers_ReturnValue) == 0x000030, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetAccessorMembers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetAccessorItem_ReturnValue) == 0x000038, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetAccessorItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetUMGManager_ReturnValue2) == 0x000040, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetUMGManager_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetBagTargetChar_ReturnValue) == 0x000048, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetBagTargetChar_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetAccessorBattle_ReturnValue) == 0x000050, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetAccessorBattle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetJackCharacterFromType_ReturnValue) == 0x000058, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetJackCharacterFromType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetUMGManager_ReturnValue3) == 0x000060, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetUMGManager_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_AddUMGMenuWidget_ReturnValue) == 0x000068, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_AddUMGMenuWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetAccessorMembers_ReturnValue2) == 0x000070, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetAccessorMembers_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, K2Node_DynamicCast_AsWBP_Menu_Battle_List_001) == 0x000078, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::K2Node_DynamicCast_AsWBP_Menu_Battle_List_001' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetAccessorItem_ReturnValue2) == 0x000088, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetAccessorItem_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetUMGManager_ReturnValue4) == 0x000090, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetUMGManager_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetBagTargetChar_ReturnValue2) == 0x000098, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetBagTargetChar_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetAccessorItem_ReturnValue3) == 0x0000A0, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetAccessorItem_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetJackCharacterFromType_ReturnValue2) == 0x0000A8, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetJackCharacterFromType_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_ActionItem_ReturnValue) == 0x0000B0, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_ActionItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetBagSelectedType_ReturnValue) == 0x0000B4, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetBagSelectedType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_AddUMGMenuWidget_ReturnValue2) == 0x0000B8, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_AddUMGMenuWidget_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_AddUMGMenuWidget_ReturnValue3) == 0x0000C0, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_AddUMGMenuWidget_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetUMGManager_ReturnValue5) == 0x0000C8, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetUMGManager_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetUMGManager_ReturnValue6) == 0x0000D0, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetUMGManager_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetAccessorItem_ReturnValue4) == 0x0000D8, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetAccessorItem_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetAccessorBattle_ReturnValue2) == 0x0000E0, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetAccessorBattle_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_ActionItem_ReturnValue2) == 0x0000E8, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_ActionItem_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetBagSelectedType_ReturnValue2) == 0x0000EC, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetBagSelectedType_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetUMGManager_ReturnValue7) == 0x0000F0, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetUMGManager_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetAccessorBattle_ReturnValue3) == 0x0000F8, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetAccessorBattle_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetUMGManager_ReturnValue8) == 0x000100, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetUMGManager_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetAccessorBattle_ReturnValue4) == 0x000108, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetAccessorBattle_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetUMGManager_ReturnValue9) == 0x000110, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetUMGManager_ReturnValue9' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetAccessorBattle_ReturnValue5) == 0x000118, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetAccessorBattle_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_AddUMGMenuWidget_ReturnValue4) == 0x000120, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_AddUMGMenuWidget_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, K2Node_DynamicCast_AsWBP_Menu_Battle_List_013) == 0x000128, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::K2Node_DynamicCast_AsWBP_Menu_Battle_List_013' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, K2Node_DynamicCast_bSuccess2) == 0x000130, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetBattleManager_ReturnValue) == 0x000138, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetBattleManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_IsInBattle_ReturnValue) == 0x000140, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_IsInBattle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_NotEqual_NameName_ReturnValue) == 0x000141, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_NotEqual_NameName_ReturnValue2) == 0x000142, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_NotEqual_NameName_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, Temp_byte_Variable2) == 0x000143, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_BooleanOR_ReturnValue) == 0x000144, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_BattleCommandMenuItem_ReturnValue) == 0x000148, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_BattleCommandMenuItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, K2Node_SwitchName_CmpSuccess) == 0x00014C, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00014D, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, Temp_byte_Variable3) == 0x00014E, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, Temp_bool_Variable) == 0x00014F, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, Temp_bool_Variable2) == 0x000150, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, K2Node_SwitchName2_CmpSuccess) == 0x000151, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::K2Node_SwitchName2_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, Temp_byte_Variable4) == 0x000152, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::Temp_byte_Variable4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, Temp_byte_Variable5) == 0x000153, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::Temp_byte_Variable5' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, Temp_byte_Variable6) == 0x000154, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::Temp_byte_Variable6' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, Temp_byte_Variable7) == 0x000155, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::Temp_byte_Variable7' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_GetFirstTargetCharacter_ReturnValue) == 0x000158, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_GetFirstTargetCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_BattleCommandMenuItem_ReturnValue2) == 0x000160, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_BattleCommandMenuItem_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_EqualEqual_IntInt_ReturnValue2) == 0x000164, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_EqualEqual_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, K2Node_Select_Default) == 0x000165, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_BattleCommandMenuItem_ReturnValue3) == 0x000168, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_BattleCommandMenuItem_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_BattleCommandMenuItem_ReturnValue4) == 0x00016C, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_BattleCommandMenuItem_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_EqualEqual_IntInt_ReturnValue3) == 0x000170, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_EqualEqual_IntInt_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_EqualEqual_IntInt_ReturnValue4) == 0x000171, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_EqualEqual_IntInt_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, Temp_bool_Variable3) == 0x000172, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, K2Node_Select2_Default) == 0x000173, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, K2Node_SwitchEnum_CmpSuccess) == 0x000174, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, K2Node_SwitchEnum2_CmpSuccess) == 0x000175, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::K2Node_SwitchEnum2_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, Temp_bool_Variable4) == 0x000176, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::Temp_bool_Variable4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, K2Node_Select3_Default) == 0x000177, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::K2Node_Select3_Default' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, CallFunc_NotEqual_NameName_ReturnValue3) == 0x000178, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::CallFunc_NotEqual_NameName_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, Temp_byte_Variable8) == 0x000179, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::Temp_byte_Variable8' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoItemUseCommand, K2Node_Select4_Default) == 0x00017A, "Member 'BP_FLIB_UMG_C_DoItemUseCommand::K2Node_Select4_Default' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.SetOddEffectList
// 0x00A0 (0x00A0 - 0x0000)
struct BP_FLIB_UMG_C_SetOddEffectList final
{
public:
	class UJackUMGAccessorMembers*                Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacter                                InCharType;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWBP_Menu_Parts_Buff_000_C*>     BuffPanels;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UWBP_Menu_Parts_Buff_000_C*>     BuffPanelList;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<class FName>                           BuffIdList;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<class FName>                           CallFunc_GetOddEffectIdList_ReturnValue;           // 0x0048(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_Menu_Parts_Buff_000_C*             CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue2;                // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable2;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable2;                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item2;                          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue2;                 // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_Menu_Parts_Buff_000_C*             CallFunc_Array_Get_Item3;                          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetOddEffectId_Debuff;                    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_UMG_C_SetOddEffectList) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_SetOddEffectList");
static_assert(sizeof(BP_FLIB_UMG_C_SetOddEffectList) == 0x0000A0, "Wrong size on BP_FLIB_UMG_C_SetOddEffectList");
static_assert(offsetof(BP_FLIB_UMG_C_SetOddEffectList, Target) == 0x000000, "Member 'BP_FLIB_UMG_C_SetOddEffectList::Target' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetOddEffectList, InCharType) == 0x000008, "Member 'BP_FLIB_UMG_C_SetOddEffectList::InCharType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetOddEffectList, BuffPanels) == 0x000010, "Member 'BP_FLIB_UMG_C_SetOddEffectList::BuffPanels' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetOddEffectList, __WorldContext) == 0x000020, "Member 'BP_FLIB_UMG_C_SetOddEffectList::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetOddEffectList, BuffPanelList) == 0x000028, "Member 'BP_FLIB_UMG_C_SetOddEffectList::BuffPanelList' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetOddEffectList, BuffIdList) == 0x000038, "Member 'BP_FLIB_UMG_C_SetOddEffectList::BuffIdList' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetOddEffectList, CallFunc_GetOddEffectIdList_ReturnValue) == 0x000048, "Member 'BP_FLIB_UMG_C_SetOddEffectList::CallFunc_GetOddEffectIdList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetOddEffectList, Temp_int_Array_Index_Variable) == 0x000058, "Member 'BP_FLIB_UMG_C_SetOddEffectList::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetOddEffectList, Temp_int_Loop_Counter_Variable) == 0x00005C, "Member 'BP_FLIB_UMG_C_SetOddEffectList::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetOddEffectList, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'BP_FLIB_UMG_C_SetOddEffectList::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetOddEffectList, CallFunc_Array_Length_ReturnValue) == 0x000064, "Member 'BP_FLIB_UMG_C_SetOddEffectList::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetOddEffectList, CallFunc_Array_Get_Item) == 0x000068, "Member 'BP_FLIB_UMG_C_SetOddEffectList::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetOddEffectList, CallFunc_Array_Length_ReturnValue2) == 0x000070, "Member 'BP_FLIB_UMG_C_SetOddEffectList::CallFunc_Array_Length_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetOddEffectList, CallFunc_Less_IntInt_ReturnValue) == 0x000074, "Member 'BP_FLIB_UMG_C_SetOddEffectList::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetOddEffectList, Temp_int_Array_Index_Variable2) == 0x000078, "Member 'BP_FLIB_UMG_C_SetOddEffectList::Temp_int_Array_Index_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetOddEffectList, Temp_int_Loop_Counter_Variable2) == 0x00007C, "Member 'BP_FLIB_UMG_C_SetOddEffectList::Temp_int_Loop_Counter_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetOddEffectList, CallFunc_Array_Get_Item2) == 0x000080, "Member 'BP_FLIB_UMG_C_SetOddEffectList::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetOddEffectList, CallFunc_Less_IntInt_ReturnValue2) == 0x000088, "Member 'BP_FLIB_UMG_C_SetOddEffectList::CallFunc_Less_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetOddEffectList, CallFunc_Add_IntInt_ReturnValue2) == 0x00008C, "Member 'BP_FLIB_UMG_C_SetOddEffectList::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetOddEffectList, CallFunc_Array_Get_Item3) == 0x000090, "Member 'BP_FLIB_UMG_C_SetOddEffectList::CallFunc_Array_Get_Item3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetOddEffectList, CallFunc_SetOddEffectId_Debuff) == 0x000098, "Member 'BP_FLIB_UMG_C_SetOddEffectList::CallFunc_SetOddEffectId_Debuff' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.GetUMGBagText
// 0x0050 (0x0050 - 0x0000)
struct BP_FLIB_UMG_C_GetUMGBagText final
{
public:
	EJackItem_Bag                                 Selection;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   NewParam;                                          // 0x0010(0x0018)(Parm, OutParm)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorItem*                   CallFunc_GetAccessorItem_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetBagNameText_OutBagName;                // 0x0038(0x0018)()
};
static_assert(alignof(BP_FLIB_UMG_C_GetUMGBagText) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_GetUMGBagText");
static_assert(sizeof(BP_FLIB_UMG_C_GetUMGBagText) == 0x000050, "Wrong size on BP_FLIB_UMG_C_GetUMGBagText");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGBagText, Selection) == 0x000000, "Member 'BP_FLIB_UMG_C_GetUMGBagText::Selection' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGBagText, __WorldContext) == 0x000008, "Member 'BP_FLIB_UMG_C_GetUMGBagText::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGBagText, NewParam) == 0x000010, "Member 'BP_FLIB_UMG_C_GetUMGBagText::NewParam' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGBagText, CallFunc_GetUMGManager_ReturnValue) == 0x000028, "Member 'BP_FLIB_UMG_C_GetUMGBagText::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGBagText, CallFunc_GetAccessorItem_ReturnValue) == 0x000030, "Member 'BP_FLIB_UMG_C_GetUMGBagText::CallFunc_GetAccessorItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGBagText, CallFunc_GetBagNameText_OutBagName) == 0x000038, "Member 'BP_FLIB_UMG_C_GetUMGBagText::CallFunc_GetBagNameText_OutBagName' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.GetNearestMiniMapCameraFromPC
// 0x0080 (0x0080 - 0x0000)
struct BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC final
{
public:
	TArray<class ABP_MiniMapCamera_C*>            BP_Mini_Map_Camera_Array;                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MiniMapCamera_C*                    Nearest_BP_Mini_Map_Camera;                        // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MiniMapCamera_C*                    NearestCameraCandidate;                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraDistance;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue;       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x003C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MiniMapCamera_C*                    CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue2;         // 0x0058(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0068(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC");
static_assert(sizeof(BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC) == 0x000080, "Wrong size on BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC");
static_assert(offsetof(BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC, BP_Mini_Map_Camera_Array) == 0x000000, "Member 'BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC::BP_Mini_Map_Camera_Array' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC, __WorldContext) == 0x000010, "Member 'BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC, Nearest_BP_Mini_Map_Camera) == 0x000018, "Member 'BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC::Nearest_BP_Mini_Map_Camera' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC, NearestCameraCandidate) == 0x000020, "Member 'BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC::NearestCameraCandidate' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC, CameraDistance) == 0x000028, "Member 'BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC::CameraDistance' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC, CallFunc_GetJackPlayerCharacter_ReturnValue) == 0x000030, "Member 'BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC::CallFunc_GetJackPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00003C, "Member 'BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC, Temp_int_Array_Index_Variable) == 0x000048, "Member 'BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC, CallFunc_Array_Get_Item) == 0x000050, "Member 'BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC, CallFunc_K2_GetActorLocation_ReturnValue2) == 0x000058, "Member 'BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC::CallFunc_K2_GetActorLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC, CallFunc_Less_IntInt_ReturnValue) == 0x000064, "Member 'BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000068, "Member 'BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC, CallFunc_VSize_ReturnValue) == 0x000074, "Member 'BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC, CallFunc_Add_IntInt_ReturnValue) == 0x000078, "Member 'BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00007C, "Member 'BP_FLIB_UMG_C_GetNearestMiniMapCameraFromPC::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.GetUMGTargetTaneName
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_UMG_C_GetUMGTargetTaneName final
{
public:
	class FName                                   Selection;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   NewParam;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_UMG_C_GetUMGTargetTaneName) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_GetUMGTargetTaneName");
static_assert(sizeof(BP_FLIB_UMG_C_GetUMGTargetTaneName) == 0x000020, "Wrong size on BP_FLIB_UMG_C_GetUMGTargetTaneName");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGTargetTaneName, Selection) == 0x000000, "Member 'BP_FLIB_UMG_C_GetUMGTargetTaneName::Selection' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGTargetTaneName, __WorldContext) == 0x000008, "Member 'BP_FLIB_UMG_C_GetUMGTargetTaneName::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGTargetTaneName, NewParam) == 0x000010, "Member 'BP_FLIB_UMG_C_GetUMGTargetTaneName::NewParam' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGTargetTaneName, K2Node_SwitchName_CmpSuccess) == 0x000018, "Member 'BP_FLIB_UMG_C_GetUMGTargetTaneName::K2Node_SwitchName_CmpSuccess' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.GetUMGTaneParam
// 0x0070 (0x0070 - 0x0000)
struct BP_FLIB_UMG_C_GetUMGTaneParam final
{
public:
	class UJackGameCharacter*                     Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Selection;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OutTaneParam;                                      // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetTokugiPoint_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FJackGameCharacterParameters           CallFunc_GetSeedCorrectParameters_ReturnValue;     // 0x0024(0x004C)(NoDestructor)
};
static_assert(alignof(BP_FLIB_UMG_C_GetUMGTaneParam) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_GetUMGTaneParam");
static_assert(sizeof(BP_FLIB_UMG_C_GetUMGTaneParam) == 0x000070, "Wrong size on BP_FLIB_UMG_C_GetUMGTaneParam");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGTaneParam, Target) == 0x000000, "Member 'BP_FLIB_UMG_C_GetUMGTaneParam::Target' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGTaneParam, Selection) == 0x000008, "Member 'BP_FLIB_UMG_C_GetUMGTaneParam::Selection' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGTaneParam, __WorldContext) == 0x000010, "Member 'BP_FLIB_UMG_C_GetUMGTaneParam::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGTaneParam, OutTaneParam) == 0x000018, "Member 'BP_FLIB_UMG_C_GetUMGTaneParam::OutTaneParam' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGTaneParam, K2Node_SwitchName_CmpSuccess) == 0x00001C, "Member 'BP_FLIB_UMG_C_GetUMGTaneParam::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGTaneParam, CallFunc_GetTokugiPoint_ReturnValue) == 0x000020, "Member 'BP_FLIB_UMG_C_GetUMGTaneParam::CallFunc_GetTokugiPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGTaneParam, CallFunc_GetSeedCorrectParameters_ReturnValue) == 0x000024, "Member 'BP_FLIB_UMG_C_GetUMGTaneParam::CallFunc_GetSeedCorrectParameters_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.GetUMGRarityTextAndColor
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_UMG_C_GetUMGRarityTextAndColor final
{
public:
	int32                                         InRarity;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   OutText;                                           // 0x0010(0x0018)(Parm, OutParm)
	EJackUMGTextColorSet                          OutColor;                                          // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_UMG_C_GetUMGRarityTextAndColor) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_GetUMGRarityTextAndColor");
static_assert(sizeof(BP_FLIB_UMG_C_GetUMGRarityTextAndColor) == 0x000030, "Wrong size on BP_FLIB_UMG_C_GetUMGRarityTextAndColor");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGRarityTextAndColor, InRarity) == 0x000000, "Member 'BP_FLIB_UMG_C_GetUMGRarityTextAndColor::InRarity' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGRarityTextAndColor, __WorldContext) == 0x000008, "Member 'BP_FLIB_UMG_C_GetUMGRarityTextAndColor::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGRarityTextAndColor, OutText) == 0x000010, "Member 'BP_FLIB_UMG_C_GetUMGRarityTextAndColor::OutText' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGRarityTextAndColor, OutColor) == 0x000028, "Member 'BP_FLIB_UMG_C_GetUMGRarityTextAndColor::OutColor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGRarityTextAndColor, K2Node_SwitchInteger_CmpSuccess) == 0x000029, "Member 'BP_FLIB_UMG_C_GetUMGRarityTextAndColor::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.IsTokugiNitouryuu
// 0x0048 (0x0048 - 0x0000)
struct BP_FLIB_UMG_C_IsTokugiNitouryuu final
{
public:
	EJackCharacter                                InType;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorMembers*                CallFunc_GetAccessorMembers_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackFriendGameCharacter*               CallFunc_GetJackCharacterFromType_ReturnValue;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetExecutablePassiveTokugis_ReturnValue;  // 0x0030(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_UMG_C_IsTokugiNitouryuu) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_IsTokugiNitouryuu");
static_assert(sizeof(BP_FLIB_UMG_C_IsTokugiNitouryuu) == 0x000048, "Wrong size on BP_FLIB_UMG_C_IsTokugiNitouryuu");
static_assert(offsetof(BP_FLIB_UMG_C_IsTokugiNitouryuu, InType) == 0x000000, "Member 'BP_FLIB_UMG_C_IsTokugiNitouryuu::InType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsTokugiNitouryuu, __WorldContext) == 0x000008, "Member 'BP_FLIB_UMG_C_IsTokugiNitouryuu::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsTokugiNitouryuu, NewParam) == 0x000010, "Member 'BP_FLIB_UMG_C_IsTokugiNitouryuu::NewParam' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsTokugiNitouryuu, CallFunc_GetUMGManager_ReturnValue) == 0x000018, "Member 'BP_FLIB_UMG_C_IsTokugiNitouryuu::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsTokugiNitouryuu, CallFunc_GetAccessorMembers_ReturnValue) == 0x000020, "Member 'BP_FLIB_UMG_C_IsTokugiNitouryuu::CallFunc_GetAccessorMembers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsTokugiNitouryuu, CallFunc_GetJackCharacterFromType_ReturnValue) == 0x000028, "Member 'BP_FLIB_UMG_C_IsTokugiNitouryuu::CallFunc_GetJackCharacterFromType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsTokugiNitouryuu, CallFunc_GetExecutablePassiveTokugis_ReturnValue) == 0x000030, "Member 'BP_FLIB_UMG_C_IsTokugiNitouryuu::CallFunc_GetExecutablePassiveTokugis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsTokugiNitouryuu, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_FLIB_UMG_C_IsTokugiNitouryuu::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsTokugiNitouryuu, CallFunc_Greater_IntInt_ReturnValue) == 0x000044, "Member 'BP_FLIB_UMG_C_IsTokugiNitouryuu::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.DoUMGEquipumentTarget
// 0x0038 (0x0038 - 0x0000)
struct BP_FLIB_UMG_C_DoUMGEquipumentTarget final
{
public:
	EJackEquipmentRegion                          InRegionType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackItem_Bag                                 SaveBagSelectedType;                               // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorItem*                   CallFunc_GetAccessorItem_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackItem_Bag                                 CallFunc_GetBagSelectedType_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_ActionItem_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackItem_Bag                                 CallFunc_GetBagTargetType_ReturnValue;             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_UMG_C_DoUMGEquipumentTarget) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_DoUMGEquipumentTarget");
static_assert(sizeof(BP_FLIB_UMG_C_DoUMGEquipumentTarget) == 0x000038, "Wrong size on BP_FLIB_UMG_C_DoUMGEquipumentTarget");
static_assert(offsetof(BP_FLIB_UMG_C_DoUMGEquipumentTarget, InRegionType) == 0x000000, "Member 'BP_FLIB_UMG_C_DoUMGEquipumentTarget::InRegionType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoUMGEquipumentTarget, __WorldContext) == 0x000008, "Member 'BP_FLIB_UMG_C_DoUMGEquipumentTarget::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoUMGEquipumentTarget, SaveBagSelectedType) == 0x000010, "Member 'BP_FLIB_UMG_C_DoUMGEquipumentTarget::SaveBagSelectedType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoUMGEquipumentTarget, CallFunc_GetUMGManager_ReturnValue) == 0x000018, "Member 'BP_FLIB_UMG_C_DoUMGEquipumentTarget::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoUMGEquipumentTarget, CallFunc_GetAccessorItem_ReturnValue) == 0x000020, "Member 'BP_FLIB_UMG_C_DoUMGEquipumentTarget::CallFunc_GetAccessorItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoUMGEquipumentTarget, CallFunc_GetBagSelectedType_ReturnValue) == 0x000028, "Member 'BP_FLIB_UMG_C_DoUMGEquipumentTarget::CallFunc_GetBagSelectedType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoUMGEquipumentTarget, CallFunc_ActionItem_ReturnValue) == 0x00002C, "Member 'BP_FLIB_UMG_C_DoUMGEquipumentTarget::CallFunc_ActionItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_DoUMGEquipumentTarget, CallFunc_GetBagTargetType_ReturnValue) == 0x000030, "Member 'BP_FLIB_UMG_C_DoUMGEquipumentTarget::CallFunc_GetBagTargetType_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.SaveUMGDouguCursor
// 0x0048 (0x0048 - 0x0000)
struct BP_FLIB_UMG_C_SaveUMGDouguCursor final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue2;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorItem*                   CallFunc_GetAccessorItem_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackBattleManager*                     CallFunc_GetBattleManager_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacter                                CallFunc_GetBagSelectedChar_ReturnValue;           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInBattle_ReturnValue;                   // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetActionItemId_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetBagSelectedItemIndex_ReturnValue;      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCursorSaveScene                          Temp_byte_Variable;                                // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCursorSaveScene                          Temp_byte_Variable2;                               // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCursorSaveScene                          K2Node_Select_Default;                             // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_UMG_C_SaveUMGDouguCursor) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_SaveUMGDouguCursor");
static_assert(sizeof(BP_FLIB_UMG_C_SaveUMGDouguCursor) == 0x000048, "Wrong size on BP_FLIB_UMG_C_SaveUMGDouguCursor");
static_assert(offsetof(BP_FLIB_UMG_C_SaveUMGDouguCursor, __WorldContext) == 0x000000, "Member 'BP_FLIB_UMG_C_SaveUMGDouguCursor::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SaveUMGDouguCursor, Temp_bool_Variable) == 0x000008, "Member 'BP_FLIB_UMG_C_SaveUMGDouguCursor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SaveUMGDouguCursor, CallFunc_GetUMGManager_ReturnValue) == 0x000010, "Member 'BP_FLIB_UMG_C_SaveUMGDouguCursor::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SaveUMGDouguCursor, CallFunc_GetUMGManager_ReturnValue2) == 0x000018, "Member 'BP_FLIB_UMG_C_SaveUMGDouguCursor::CallFunc_GetUMGManager_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SaveUMGDouguCursor, CallFunc_GetAccessorItem_ReturnValue) == 0x000020, "Member 'BP_FLIB_UMG_C_SaveUMGDouguCursor::CallFunc_GetAccessorItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SaveUMGDouguCursor, CallFunc_GetBattleManager_ReturnValue) == 0x000028, "Member 'BP_FLIB_UMG_C_SaveUMGDouguCursor::CallFunc_GetBattleManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SaveUMGDouguCursor, CallFunc_GetBagSelectedChar_ReturnValue) == 0x000030, "Member 'BP_FLIB_UMG_C_SaveUMGDouguCursor::CallFunc_GetBagSelectedChar_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SaveUMGDouguCursor, CallFunc_IsInBattle_ReturnValue) == 0x000031, "Member 'BP_FLIB_UMG_C_SaveUMGDouguCursor::CallFunc_IsInBattle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SaveUMGDouguCursor, CallFunc_GetActionItemId_ReturnValue) == 0x000038, "Member 'BP_FLIB_UMG_C_SaveUMGDouguCursor::CallFunc_GetActionItemId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SaveUMGDouguCursor, CallFunc_GetBagSelectedItemIndex_ReturnValue) == 0x000040, "Member 'BP_FLIB_UMG_C_SaveUMGDouguCursor::CallFunc_GetBagSelectedItemIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SaveUMGDouguCursor, Temp_byte_Variable) == 0x000044, "Member 'BP_FLIB_UMG_C_SaveUMGDouguCursor::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SaveUMGDouguCursor, Temp_byte_Variable2) == 0x000045, "Member 'BP_FLIB_UMG_C_SaveUMGDouguCursor::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SaveUMGDouguCursor, K2Node_Select_Default) == 0x000046, "Member 'BP_FLIB_UMG_C_SaveUMGDouguCursor::K2Node_Select_Default' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.IsUMGSouthpaw
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_UMG_C_IsUMGSouthpaw final
{
public:
	EJackCharacter                                InCharType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSouthpaw;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_UMG_C_IsUMGSouthpaw) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_IsUMGSouthpaw");
static_assert(sizeof(BP_FLIB_UMG_C_IsUMGSouthpaw) == 0x000018, "Wrong size on BP_FLIB_UMG_C_IsUMGSouthpaw");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGSouthpaw, InCharType) == 0x000000, "Member 'BP_FLIB_UMG_C_IsUMGSouthpaw::InCharType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGSouthpaw, __WorldContext) == 0x000008, "Member 'BP_FLIB_UMG_C_IsUMGSouthpaw::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGSouthpaw, IsSouthpaw) == 0x000010, "Member 'BP_FLIB_UMG_C_IsUMGSouthpaw::IsSouthpaw' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGSouthpaw, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000011, "Member 'BP_FLIB_UMG_C_IsUMGSouthpaw::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.GetUMGEquippedItemFromRegion
// 0x0048 (0x0048 - 0x0000)
struct BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion final
{
public:
	EJackCharacter                                InCharType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackEquipmentRegion                          InRegionType;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGUIActionInfo*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EquipmentRegion;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorItem*                   CallFunc_GetAccessorItem_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackItem_Bag                                 CallFunc_CharTypeToBagType_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGUIActionInfo*                   CallFunc_GetItemEquipmentInfo_ReturnValue;         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetItemIndexFromRegion_ReturnValue;       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion");
static_assert(sizeof(BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion) == 0x000048, "Wrong size on BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion, InCharType) == 0x000000, "Member 'BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion::InCharType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion, InRegionType) == 0x000001, "Member 'BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion::InRegionType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion, __WorldContext) == 0x000008, "Member 'BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion, ReturnValue) == 0x000010, "Member 'BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion, EquipmentRegion) == 0x000018, "Member 'BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion::EquipmentRegion' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion, CallFunc_GetUMGManager_ReturnValue) == 0x000020, "Member 'BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion, CallFunc_GetAccessorItem_ReturnValue) == 0x000028, "Member 'BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion::CallFunc_GetAccessorItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion, CallFunc_CharTypeToBagType_ReturnValue) == 0x000030, "Member 'BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion::CallFunc_CharTypeToBagType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000031, "Member 'BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion, CallFunc_GetItemEquipmentInfo_ReturnValue) == 0x000038, "Member 'BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion::CallFunc_GetItemEquipmentInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion, CallFunc_GetItemIndexFromRegion_ReturnValue) == 0x000040, "Member 'BP_FLIB_UMG_C_GetUMGEquippedItemFromRegion::CallFunc_GetItemIndexFromRegion_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.ActionUMGEquipment
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_UMG_C_ActionUMGEquipment final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackEquipmentRegion                          InRegion;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InArg1;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorItem*                   CallFunc_GetAccessorItem_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_ActionItem_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_UMG_C_ActionUMGEquipment) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_ActionUMGEquipment");
static_assert(sizeof(BP_FLIB_UMG_C_ActionUMGEquipment) == 0x000030, "Wrong size on BP_FLIB_UMG_C_ActionUMGEquipment");
static_assert(offsetof(BP_FLIB_UMG_C_ActionUMGEquipment, InIndex) == 0x000000, "Member 'BP_FLIB_UMG_C_ActionUMGEquipment::InIndex' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_ActionUMGEquipment, InRegion) == 0x000004, "Member 'BP_FLIB_UMG_C_ActionUMGEquipment::InRegion' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_ActionUMGEquipment, InArg1) == 0x000008, "Member 'BP_FLIB_UMG_C_ActionUMGEquipment::InArg1' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_ActionUMGEquipment, __WorldContext) == 0x000010, "Member 'BP_FLIB_UMG_C_ActionUMGEquipment::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_ActionUMGEquipment, CallFunc_GetUMGManager_ReturnValue) == 0x000018, "Member 'BP_FLIB_UMG_C_ActionUMGEquipment::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_ActionUMGEquipment, CallFunc_GetAccessorItem_ReturnValue) == 0x000020, "Member 'BP_FLIB_UMG_C_ActionUMGEquipment::CallFunc_GetAccessorItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_ActionUMGEquipment, CallFunc_ActionItem_ReturnValue) == 0x000028, "Member 'BP_FLIB_UMG_C_ActionUMGEquipment::CallFunc_ActionItem_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.PlayUMGEquipmentSound
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_UMG_C_PlayUMGEquipmentSound final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGSoundSet*                       CallFunc_GetSoundSet_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_UMG_C_PlayUMGEquipmentSound) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_PlayUMGEquipmentSound");
static_assert(sizeof(BP_FLIB_UMG_C_PlayUMGEquipmentSound) == 0x000018, "Wrong size on BP_FLIB_UMG_C_PlayUMGEquipmentSound");
static_assert(offsetof(BP_FLIB_UMG_C_PlayUMGEquipmentSound, __WorldContext) == 0x000000, "Member 'BP_FLIB_UMG_C_PlayUMGEquipmentSound::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_PlayUMGEquipmentSound, CallFunc_GetUMGManager_ReturnValue) == 0x000008, "Member 'BP_FLIB_UMG_C_PlayUMGEquipmentSound::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_PlayUMGEquipmentSound, CallFunc_GetSoundSet_ReturnValue) == 0x000010, "Member 'BP_FLIB_UMG_C_PlayUMGEquipmentSound::CallFunc_GetSoundSet_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.GetUMGAliveCharacterType
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_UMG_C_GetUMGAliveCharacterType final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacter                                ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_UMG_C_GetUMGAliveCharacterType) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_GetUMGAliveCharacterType");
static_assert(sizeof(BP_FLIB_UMG_C_GetUMGAliveCharacterType) == 0x000010, "Wrong size on BP_FLIB_UMG_C_GetUMGAliveCharacterType");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGAliveCharacterType, __WorldContext) == 0x000000, "Member 'BP_FLIB_UMG_C_GetUMGAliveCharacterType::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGAliveCharacterType, ReturnValue) == 0x000008, "Member 'BP_FLIB_UMG_C_GetUMGAliveCharacterType::ReturnValue' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.GetUMGAliveCharacterName
// 0x0038 (0x0038 - 0x0000)
struct BP_FLIB_UMG_C_GetUMGAliveCharacterName final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorMembers*                CallFunc_GetAccessorMembers_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetCharNameFromType_ReturnValue;          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_UMG_C_GetUMGAliveCharacterName) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_GetUMGAliveCharacterName");
static_assert(sizeof(BP_FLIB_UMG_C_GetUMGAliveCharacterName) == 0x000038, "Wrong size on BP_FLIB_UMG_C_GetUMGAliveCharacterName");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGAliveCharacterName, __WorldContext) == 0x000000, "Member 'BP_FLIB_UMG_C_GetUMGAliveCharacterName::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGAliveCharacterName, ReturnValue) == 0x000008, "Member 'BP_FLIB_UMG_C_GetUMGAliveCharacterName::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGAliveCharacterName, CallFunc_GetUMGManager_ReturnValue) == 0x000018, "Member 'BP_FLIB_UMG_C_GetUMGAliveCharacterName::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGAliveCharacterName, CallFunc_GetAccessorMembers_ReturnValue) == 0x000020, "Member 'BP_FLIB_UMG_C_GetUMGAliveCharacterName::CallFunc_GetAccessorMembers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGAliveCharacterName, CallFunc_GetCharNameFromType_ReturnValue) == 0x000028, "Member 'BP_FLIB_UMG_C_GetUMGAliveCharacterName::CallFunc_GetCharNameFromType_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.UpdateUMGSmallLocationTitle
// 0x0040 (0x0040 - 0x0000)
struct BP_FLIB_UMG_C_UpdateUMGSmallLocationTitle final
{
public:
	bool                                          InIsShowMenu;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGWidgetBase*                     CallFunc_GetUMGWidgetFromName_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable;                                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable2;                               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_UMG_C_UpdateUMGSmallLocationTitle) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_UpdateUMGSmallLocationTitle");
static_assert(sizeof(BP_FLIB_UMG_C_UpdateUMGSmallLocationTitle) == 0x000040, "Wrong size on BP_FLIB_UMG_C_UpdateUMGSmallLocationTitle");
static_assert(offsetof(BP_FLIB_UMG_C_UpdateUMGSmallLocationTitle, InIsShowMenu) == 0x000000, "Member 'BP_FLIB_UMG_C_UpdateUMGSmallLocationTitle::InIsShowMenu' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_UpdateUMGSmallLocationTitle, __WorldContext) == 0x000008, "Member 'BP_FLIB_UMG_C_UpdateUMGSmallLocationTitle::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_UpdateUMGSmallLocationTitle, Temp_bool_Variable) == 0x000010, "Member 'BP_FLIB_UMG_C_UpdateUMGSmallLocationTitle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_UpdateUMGSmallLocationTitle, CallFunc_GetUMGManager_ReturnValue) == 0x000018, "Member 'BP_FLIB_UMG_C_UpdateUMGSmallLocationTitle::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_UpdateUMGSmallLocationTitle, CallFunc_GetUMGWidgetFromName_ReturnValue) == 0x000020, "Member 'BP_FLIB_UMG_C_UpdateUMGSmallLocationTitle::CallFunc_GetUMGWidgetFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_UpdateUMGSmallLocationTitle, Temp_name_Variable) == 0x000028, "Member 'BP_FLIB_UMG_C_UpdateUMGSmallLocationTitle::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_UpdateUMGSmallLocationTitle, Temp_name_Variable2) == 0x000030, "Member 'BP_FLIB_UMG_C_UpdateUMGSmallLocationTitle::Temp_name_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_UpdateUMGSmallLocationTitle, K2Node_Select_Default) == 0x000038, "Member 'BP_FLIB_UMG_C_UpdateUMGSmallLocationTitle::K2Node_Select_Default' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.IsUMGShowLocationTitle
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_UMG_C_IsUMGShowLocationTitle final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOpen;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGWidgetBase*                     CallFunc_GetUMGWidgetFromName_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_UMG_C_IsUMGShowLocationTitle) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_IsUMGShowLocationTitle");
static_assert(sizeof(BP_FLIB_UMG_C_IsUMGShowLocationTitle) == 0x000028, "Wrong size on BP_FLIB_UMG_C_IsUMGShowLocationTitle");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGShowLocationTitle, __WorldContext) == 0x000000, "Member 'BP_FLIB_UMG_C_IsUMGShowLocationTitle::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGShowLocationTitle, IsOpen) == 0x000008, "Member 'BP_FLIB_UMG_C_IsUMGShowLocationTitle::IsOpen' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGShowLocationTitle, CallFunc_GetUMGManager_ReturnValue) == 0x000010, "Member 'BP_FLIB_UMG_C_IsUMGShowLocationTitle::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGShowLocationTitle, CallFunc_GetUMGWidgetFromName_ReturnValue) == 0x000018, "Member 'BP_FLIB_UMG_C_IsUMGShowLocationTitle::CallFunc_GetUMGWidgetFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGShowLocationTitle, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000020, "Member 'BP_FLIB_UMG_C_IsUMGShowLocationTitle::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.GetUMGBagString
// 0x0050 (0x0050 - 0x0000)
struct BP_FLIB_UMG_C_GetUMGBagString final
{
public:
	EJackItem_Bag                                 InBagType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCharaName;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsList;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 NewParam;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FName                                   BagTextId;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorItem*                   CallFunc_GetAccessorItem_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetBagNameString_OutBagName;              // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_UMG_C_GetUMGBagString) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_GetUMGBagString");
static_assert(sizeof(BP_FLIB_UMG_C_GetUMGBagString) == 0x000050, "Wrong size on BP_FLIB_UMG_C_GetUMGBagString");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGBagString, InBagType) == 0x000000, "Member 'BP_FLIB_UMG_C_GetUMGBagString::InBagType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGBagString, IsCharaName) == 0x000001, "Member 'BP_FLIB_UMG_C_GetUMGBagString::IsCharaName' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGBagString, IsList) == 0x000002, "Member 'BP_FLIB_UMG_C_GetUMGBagString::IsList' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGBagString, __WorldContext) == 0x000008, "Member 'BP_FLIB_UMG_C_GetUMGBagString::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGBagString, NewParam) == 0x000010, "Member 'BP_FLIB_UMG_C_GetUMGBagString::NewParam' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGBagString, BagTextId) == 0x000020, "Member 'BP_FLIB_UMG_C_GetUMGBagString::BagTextId' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGBagString, CallFunc_Not_PreBool_ReturnValue) == 0x000028, "Member 'BP_FLIB_UMG_C_GetUMGBagString::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGBagString, CallFunc_GetUMGManager_ReturnValue) == 0x000030, "Member 'BP_FLIB_UMG_C_GetUMGBagString::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGBagString, CallFunc_GetAccessorItem_ReturnValue) == 0x000038, "Member 'BP_FLIB_UMG_C_GetUMGBagString::CallFunc_GetAccessorItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGBagString, CallFunc_GetBagNameString_OutBagName) == 0x000040, "Member 'BP_FLIB_UMG_C_GetUMGBagString::CallFunc_GetBagNameString_OutBagName' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.IsUIDisableCommandByFish
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_UMG_C_IsUIDisableCommandByFish final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDisableCommandByFish;                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_VerifyDataTableRowName_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetGameFlagBool_ReturnValue;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_UMG_C_IsUIDisableCommandByFish) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_IsUIDisableCommandByFish");
static_assert(sizeof(BP_FLIB_UMG_C_IsUIDisableCommandByFish) == 0x000020, "Wrong size on BP_FLIB_UMG_C_IsUIDisableCommandByFish");
static_assert(offsetof(BP_FLIB_UMG_C_IsUIDisableCommandByFish, __WorldContext) == 0x000000, "Member 'BP_FLIB_UMG_C_IsUIDisableCommandByFish::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUIDisableCommandByFish, IsDisableCommandByFish) == 0x000008, "Member 'BP_FLIB_UMG_C_IsUIDisableCommandByFish::IsDisableCommandByFish' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUIDisableCommandByFish, CallFunc_VerifyDataTableRowName_ReturnValue) == 0x000010, "Member 'BP_FLIB_UMG_C_IsUIDisableCommandByFish::CallFunc_VerifyDataTableRowName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUIDisableCommandByFish, CallFunc_GetGameFlagBool_ReturnValue) == 0x000018, "Member 'BP_FLIB_UMG_C_IsUIDisableCommandByFish::CallFunc_GetGameFlagBool_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.SetSoubiListDataToParts001List
// 0x0058 (0x0058 - 0x0000)
struct BP_FLIB_UMG_C_SetSoubiListDataToParts001List final
{
public:
	TArray<class UObject*>                        Parts001List;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	class UJackUMGSoubiList*                      SoubiList;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackUMGBackgroundColor                       BgType;                                            // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Array_Get_Item2;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Array_Get_Item3;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Array_Get_Item4;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Array_Get_Item5;                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Array_Get_Item6;                          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_UMG_C_SetSoubiListDataToParts001List) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_SetSoubiListDataToParts001List");
static_assert(sizeof(BP_FLIB_UMG_C_SetSoubiListDataToParts001List) == 0x000058, "Wrong size on BP_FLIB_UMG_C_SetSoubiListDataToParts001List");
static_assert(offsetof(BP_FLIB_UMG_C_SetSoubiListDataToParts001List, Parts001List) == 0x000000, "Member 'BP_FLIB_UMG_C_SetSoubiListDataToParts001List::Parts001List' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetSoubiListDataToParts001List, SoubiList) == 0x000010, "Member 'BP_FLIB_UMG_C_SetSoubiListDataToParts001List::SoubiList' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetSoubiListDataToParts001List, BgType) == 0x000018, "Member 'BP_FLIB_UMG_C_SetSoubiListDataToParts001List::BgType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetSoubiListDataToParts001List, __WorldContext) == 0x000020, "Member 'BP_FLIB_UMG_C_SetSoubiListDataToParts001List::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetSoubiListDataToParts001List, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_FLIB_UMG_C_SetSoubiListDataToParts001List::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetSoubiListDataToParts001List, CallFunc_Array_Get_Item2) == 0x000030, "Member 'BP_FLIB_UMG_C_SetSoubiListDataToParts001List::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetSoubiListDataToParts001List, CallFunc_Array_Get_Item3) == 0x000038, "Member 'BP_FLIB_UMG_C_SetSoubiListDataToParts001List::CallFunc_Array_Get_Item3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetSoubiListDataToParts001List, CallFunc_Array_Get_Item4) == 0x000040, "Member 'BP_FLIB_UMG_C_SetSoubiListDataToParts001List::CallFunc_Array_Get_Item4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetSoubiListDataToParts001List, CallFunc_Array_Get_Item5) == 0x000048, "Member 'BP_FLIB_UMG_C_SetSoubiListDataToParts001List::CallFunc_Array_Get_Item5' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetSoubiListDataToParts001List, CallFunc_Array_Get_Item6) == 0x000050, "Member 'BP_FLIB_UMG_C_SetSoubiListDataToParts001List::CallFunc_Array_Get_Item6' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.SetUIDisableCamera
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_UMG_C_SetUIDisableCamera final
{
public:
	bool                                          bIsDisable;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_UMG_C_SetUIDisableCamera) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_SetUIDisableCamera");
static_assert(sizeof(BP_FLIB_UMG_C_SetUIDisableCamera) == 0x000010, "Wrong size on BP_FLIB_UMG_C_SetUIDisableCamera");
static_assert(offsetof(BP_FLIB_UMG_C_SetUIDisableCamera, bIsDisable) == 0x000000, "Member 'BP_FLIB_UMG_C_SetUIDisableCamera::bIsDisable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_SetUIDisableCamera, __WorldContext) == 0x000008, "Member 'BP_FLIB_UMG_C_SetUIDisableCamera::__WorldContext' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.RemoveMenuItem
// 0x0080 (0x0080 - 0x0000)
struct BP_FLIB_UMG_C_RemoveMenuItem final
{
public:
	TArray<class UJackUMGItemBase*>               MenuItemList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	class UJackUMGItemBase*                       RemoveTarget;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                ParentPanel;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGItemBase*                       CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0040(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue2;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0050(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSize_ReturnValue;                      // 0x0058(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue2;        // 0x0060(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_UMG_C_RemoveMenuItem) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_RemoveMenuItem");
static_assert(sizeof(BP_FLIB_UMG_C_RemoveMenuItem) == 0x000080, "Wrong size on BP_FLIB_UMG_C_RemoveMenuItem");
static_assert(offsetof(BP_FLIB_UMG_C_RemoveMenuItem, MenuItemList) == 0x000000, "Member 'BP_FLIB_UMG_C_RemoveMenuItem::MenuItemList' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_RemoveMenuItem, RemoveTarget) == 0x000010, "Member 'BP_FLIB_UMG_C_RemoveMenuItem::RemoveTarget' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_RemoveMenuItem, ParentPanel) == 0x000018, "Member 'BP_FLIB_UMG_C_RemoveMenuItem::ParentPanel' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_RemoveMenuItem, __WorldContext) == 0x000020, "Member 'BP_FLIB_UMG_C_RemoveMenuItem::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_RemoveMenuItem, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BP_FLIB_UMG_C_RemoveMenuItem::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_RemoveMenuItem, CallFunc_IsValid_ReturnValue) == 0x00002C, "Member 'BP_FLIB_UMG_C_RemoveMenuItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_RemoveMenuItem, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_FLIB_UMG_C_RemoveMenuItem::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_RemoveMenuItem, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000038, "Member 'BP_FLIB_UMG_C_RemoveMenuItem::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_RemoveMenuItem, CallFunc_GetPosition_ReturnValue) == 0x000040, "Member 'BP_FLIB_UMG_C_RemoveMenuItem::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_RemoveMenuItem, CallFunc_SlotAsCanvasSlot_ReturnValue2) == 0x000048, "Member 'BP_FLIB_UMG_C_RemoveMenuItem::CallFunc_SlotAsCanvasSlot_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_RemoveMenuItem, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000050, "Member 'BP_FLIB_UMG_C_RemoveMenuItem::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_RemoveMenuItem, CallFunc_GetSize_ReturnValue) == 0x000058, "Member 'BP_FLIB_UMG_C_RemoveMenuItem::CallFunc_GetSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_RemoveMenuItem, CallFunc_Add_Vector2DVector2D_ReturnValue2) == 0x000060, "Member 'BP_FLIB_UMG_C_RemoveMenuItem::CallFunc_Add_Vector2DVector2D_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_RemoveMenuItem, CallFunc_Array_Find_ReturnValue) == 0x000068, "Member 'BP_FLIB_UMG_C_RemoveMenuItem::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_RemoveMenuItem, CallFunc_Array_Length_ReturnValue) == 0x00006C, "Member 'BP_FLIB_UMG_C_RemoveMenuItem::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_RemoveMenuItem, CallFunc_Greater_IntInt_ReturnValue) == 0x000070, "Member 'BP_FLIB_UMG_C_RemoveMenuItem::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_RemoveMenuItem, Temp_int_Loop_Counter_Variable) == 0x000074, "Member 'BP_FLIB_UMG_C_RemoveMenuItem::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_RemoveMenuItem, CallFunc_Less_IntInt_ReturnValue) == 0x000078, "Member 'BP_FLIB_UMG_C_RemoveMenuItem::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_RemoveMenuItem, CallFunc_Add_IntInt_ReturnValue) == 0x00007C, "Member 'BP_FLIB_UMG_C_RemoveMenuItem::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.GetUMGSoubiRegionTextId
// 0x00B8 (0x00B8 - 0x0000)
struct BP_FLIB_UMG_C_GetUMGSoubiRegionTextId final
{
public:
	EJackCharacter                                InCharType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackEquipmentRegion                          InRegionType;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   OutTextId;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackEquipmentRegion                          Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUMGSouthpaw_IsSouthpaw;                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable2;                               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable3;                               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable4;                               // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable5;                               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable6;                               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable7;                               // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackEquipmentRegion                          Temp_byte_Variable2;                               // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable8;                               // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable9;                               // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable10;                              // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable11;                              // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable12;                              // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable13;                              // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable14;                              // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select2_Default;                            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select3_Default;                            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_GetUMGSoubiRegionTextId");
static_assert(sizeof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId) == 0x0000B8, "Wrong size on BP_FLIB_UMG_C_GetUMGSoubiRegionTextId");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, InCharType) == 0x000000, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::InCharType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, InRegionType) == 0x000001, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::InRegionType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, __WorldContext) == 0x000008, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, OutTextId) == 0x000010, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::OutTextId' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, Temp_byte_Variable) == 0x000018, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, CallFunc_IsUMGSouthpaw_IsSouthpaw) == 0x000019, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::CallFunc_IsUMGSouthpaw_IsSouthpaw' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, Temp_name_Variable) == 0x000020, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, Temp_name_Variable2) == 0x000028, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::Temp_name_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, Temp_name_Variable3) == 0x000030, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::Temp_name_Variable3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, Temp_name_Variable4) == 0x000038, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::Temp_name_Variable4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, Temp_name_Variable5) == 0x000040, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::Temp_name_Variable5' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, Temp_name_Variable6) == 0x000048, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::Temp_name_Variable6' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, Temp_name_Variable7) == 0x000050, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::Temp_name_Variable7' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, Temp_bool_Variable) == 0x000058, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, K2Node_Select_Default) == 0x000060, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, Temp_byte_Variable2) == 0x000068, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, Temp_name_Variable8) == 0x000070, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::Temp_name_Variable8' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, Temp_name_Variable9) == 0x000078, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::Temp_name_Variable9' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, Temp_name_Variable10) == 0x000080, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::Temp_name_Variable10' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, Temp_name_Variable11) == 0x000088, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::Temp_name_Variable11' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, Temp_name_Variable12) == 0x000090, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::Temp_name_Variable12' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, Temp_name_Variable13) == 0x000098, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::Temp_name_Variable13' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, Temp_name_Variable14) == 0x0000A0, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::Temp_name_Variable14' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, K2Node_Select2_Default) == 0x0000A8, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionTextId, K2Node_Select3_Default) == 0x0000B0, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionTextId::K2Node_Select3_Default' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.GetUMGSoubiRegionMessageTextId
// 0x00B8 (0x00B8 - 0x0000)
struct BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId final
{
public:
	EJackCharacter                                InCharType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackEquipmentRegion                          Index_0;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackEquipmentRegion                          Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUMGSouthpaw_IsSouthpaw;                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable2;                               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable3;                               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable4;                               // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable5;                               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable6;                               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable7;                               // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackEquipmentRegion                          Temp_byte_Variable2;                               // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable8;                               // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable9;                               // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable10;                              // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable11;                              // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable12;                              // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable13;                              // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable14;                              // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select2_Default;                            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select3_Default;                            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId");
static_assert(sizeof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId) == 0x0000B8, "Wrong size on BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, InCharType) == 0x000000, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::InCharType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, Index_0) == 0x000001, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::Index_0' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, __WorldContext) == 0x000008, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, ReturnValue) == 0x000010, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, Temp_byte_Variable) == 0x000018, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, CallFunc_IsUMGSouthpaw_IsSouthpaw) == 0x000019, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::CallFunc_IsUMGSouthpaw_IsSouthpaw' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, Temp_name_Variable) == 0x000020, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, Temp_name_Variable2) == 0x000028, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::Temp_name_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, Temp_name_Variable3) == 0x000030, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::Temp_name_Variable3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, Temp_name_Variable4) == 0x000038, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::Temp_name_Variable4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, Temp_name_Variable5) == 0x000040, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::Temp_name_Variable5' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, Temp_name_Variable6) == 0x000048, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::Temp_name_Variable6' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, Temp_name_Variable7) == 0x000050, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::Temp_name_Variable7' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, Temp_bool_Variable) == 0x000058, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, K2Node_Select_Default) == 0x000060, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, Temp_byte_Variable2) == 0x000068, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, Temp_name_Variable8) == 0x000070, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::Temp_name_Variable8' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, Temp_name_Variable9) == 0x000078, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::Temp_name_Variable9' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, Temp_name_Variable10) == 0x000080, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::Temp_name_Variable10' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, Temp_name_Variable11) == 0x000088, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::Temp_name_Variable11' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, Temp_name_Variable12) == 0x000090, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::Temp_name_Variable12' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, Temp_name_Variable13) == 0x000098, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::Temp_name_Variable13' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, Temp_name_Variable14) == 0x0000A0, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::Temp_name_Variable14' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, K2Node_Select2_Default) == 0x0000A8, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId, K2Node_Select3_Default) == 0x0000B0, "Member 'BP_FLIB_UMG_C_GetUMGSoubiRegionMessageTextId::K2Node_Select3_Default' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.ToggleUMGCounter
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_UMG_C_ToggleUMGCounter final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InMin;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InMax;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OutValue;                                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LocalVar_0;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_UMG_C_ToggleUMGCounter) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_ToggleUMGCounter");
static_assert(sizeof(BP_FLIB_UMG_C_ToggleUMGCounter) == 0x000028, "Wrong size on BP_FLIB_UMG_C_ToggleUMGCounter");
static_assert(offsetof(BP_FLIB_UMG_C_ToggleUMGCounter, InValue) == 0x000000, "Member 'BP_FLIB_UMG_C_ToggleUMGCounter::InValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_ToggleUMGCounter, InMin) == 0x000004, "Member 'BP_FLIB_UMG_C_ToggleUMGCounter::InMin' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_ToggleUMGCounter, InMax) == 0x000008, "Member 'BP_FLIB_UMG_C_ToggleUMGCounter::InMax' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_ToggleUMGCounter, __WorldContext) == 0x000010, "Member 'BP_FLIB_UMG_C_ToggleUMGCounter::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_ToggleUMGCounter, OutValue) == 0x000018, "Member 'BP_FLIB_UMG_C_ToggleUMGCounter::OutValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_ToggleUMGCounter, LocalVar_0) == 0x00001C, "Member 'BP_FLIB_UMG_C_ToggleUMGCounter::LocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_ToggleUMGCounter, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_FLIB_UMG_C_ToggleUMGCounter::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_ToggleUMGCounter, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000024, "Member 'BP_FLIB_UMG_C_ToggleUMGCounter::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.GetUIDisableCamera
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_UMG_C_GetUIDisableCamera final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Disabled;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsGamePlayerCondition_ReturnValue;        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_UMG_C_GetUIDisableCamera) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_GetUIDisableCamera");
static_assert(sizeof(BP_FLIB_UMG_C_GetUIDisableCamera) == 0x000010, "Wrong size on BP_FLIB_UMG_C_GetUIDisableCamera");
static_assert(offsetof(BP_FLIB_UMG_C_GetUIDisableCamera, __WorldContext) == 0x000000, "Member 'BP_FLIB_UMG_C_GetUIDisableCamera::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUIDisableCamera, Disabled) == 0x000008, "Member 'BP_FLIB_UMG_C_GetUIDisableCamera::Disabled' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUIDisableCamera, CallFunc_IsGamePlayerCondition_ReturnValue) == 0x000009, "Member 'BP_FLIB_UMG_C_GetUIDisableCamera::CallFunc_IsGamePlayerCondition_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.GetUMGBagCharacter
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_UMG_C_GetUMGBagCharacter final
{
public:
	EJackItem_Bag                                 InBagType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackGameCharacter*                     NewParam;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorItem*                   CallFunc_GetAccessorItem_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackGameCharacter*                     CallFunc_GetBagCharacter_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_UMG_C_GetUMGBagCharacter) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_GetUMGBagCharacter");
static_assert(sizeof(BP_FLIB_UMG_C_GetUMGBagCharacter) == 0x000030, "Wrong size on BP_FLIB_UMG_C_GetUMGBagCharacter");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGBagCharacter, InBagType) == 0x000000, "Member 'BP_FLIB_UMG_C_GetUMGBagCharacter::InBagType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGBagCharacter, __WorldContext) == 0x000008, "Member 'BP_FLIB_UMG_C_GetUMGBagCharacter::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGBagCharacter, NewParam) == 0x000010, "Member 'BP_FLIB_UMG_C_GetUMGBagCharacter::NewParam' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGBagCharacter, CallFunc_GetUMGManager_ReturnValue) == 0x000018, "Member 'BP_FLIB_UMG_C_GetUMGBagCharacter::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGBagCharacter, CallFunc_GetAccessorItem_ReturnValue) == 0x000020, "Member 'BP_FLIB_UMG_C_GetUMGBagCharacter::CallFunc_GetAccessorItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_GetUMGBagCharacter, CallFunc_GetBagCharacter_ReturnValue) == 0x000028, "Member 'BP_FLIB_UMG_C_GetUMGBagCharacter::CallFunc_GetBagCharacter_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.IsUMGDeadCharacter
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_UMG_C_IsUMGDeadCharacter final
{
public:
	EJackCharacter                                InCharType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsDead;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorMembers*                CallFunc_GetAccessorMembers_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_ReturnValue;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_UMG_C_IsUMGDeadCharacter) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_IsUMGDeadCharacter");
static_assert(sizeof(BP_FLIB_UMG_C_IsUMGDeadCharacter) == 0x000030, "Wrong size on BP_FLIB_UMG_C_IsUMGDeadCharacter");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGDeadCharacter, InCharType) == 0x000000, "Member 'BP_FLIB_UMG_C_IsUMGDeadCharacter::InCharType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGDeadCharacter, __WorldContext) == 0x000008, "Member 'BP_FLIB_UMG_C_IsUMGDeadCharacter::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGDeadCharacter, bIsDead) == 0x000010, "Member 'BP_FLIB_UMG_C_IsUMGDeadCharacter::bIsDead' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGDeadCharacter, CallFunc_GetUMGManager_ReturnValue) == 0x000018, "Member 'BP_FLIB_UMG_C_IsUMGDeadCharacter::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGDeadCharacter, CallFunc_GetAccessorMembers_ReturnValue) == 0x000020, "Member 'BP_FLIB_UMG_C_IsUMGDeadCharacter::CallFunc_GetAccessorMembers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGDeadCharacter, CallFunc_IsDead_ReturnValue) == 0x000028, "Member 'BP_FLIB_UMG_C_IsUMGDeadCharacter::CallFunc_IsDead_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.IsUMGAliveCharacter
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_UMG_C_IsUMGAliveCharacter final
{
public:
	EJackCharacter                                InType;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsAlive;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorMembers*                CallFunc_GetAccessorMembers_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_ReturnValue;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_UMG_C_IsUMGAliveCharacter) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_IsUMGAliveCharacter");
static_assert(sizeof(BP_FLIB_UMG_C_IsUMGAliveCharacter) == 0x000030, "Wrong size on BP_FLIB_UMG_C_IsUMGAliveCharacter");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGAliveCharacter, InType) == 0x000000, "Member 'BP_FLIB_UMG_C_IsUMGAliveCharacter::InType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGAliveCharacter, __WorldContext) == 0x000008, "Member 'BP_FLIB_UMG_C_IsUMGAliveCharacter::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGAliveCharacter, bIsAlive) == 0x000010, "Member 'BP_FLIB_UMG_C_IsUMGAliveCharacter::bIsAlive' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGAliveCharacter, CallFunc_GetUMGManager_ReturnValue) == 0x000018, "Member 'BP_FLIB_UMG_C_IsUMGAliveCharacter::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGAliveCharacter, CallFunc_GetAccessorMembers_ReturnValue) == 0x000020, "Member 'BP_FLIB_UMG_C_IsUMGAliveCharacter::CallFunc_GetAccessorMembers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGAliveCharacter, CallFunc_IsDead_ReturnValue) == 0x000028, "Member 'BP_FLIB_UMG_C_IsUMGAliveCharacter::CallFunc_IsDead_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGAliveCharacter, CallFunc_Not_PreBool_ReturnValue) == 0x000029, "Member 'BP_FLIB_UMG_C_IsUMGAliveCharacter::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.IsUMGSelectItemEquipmentRegion
// 0x0040 (0x0040 - 0x0000)
struct BP_FLIB_UMG_C_IsUMGSelectItemEquipmentRegion final
{
public:
	EJackEquipmentRegion                          InEquipmentRegion;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEquipument;                                      // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorItem*                   CallFunc_GetAccessorItem_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackItem_Bag                                 CallFunc_GetBagSelectedType_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetBagSelectedItemIndex_ReturnValue;      // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGUIActionInfo*                   CallFunc_GetItemEquipmentInfo_ReturnValue;         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_UMG_C_IsUMGSelectItemEquipmentRegion) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_IsUMGSelectItemEquipmentRegion");
static_assert(sizeof(BP_FLIB_UMG_C_IsUMGSelectItemEquipmentRegion) == 0x000040, "Wrong size on BP_FLIB_UMG_C_IsUMGSelectItemEquipmentRegion");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGSelectItemEquipmentRegion, InEquipmentRegion) == 0x000000, "Member 'BP_FLIB_UMG_C_IsUMGSelectItemEquipmentRegion::InEquipmentRegion' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGSelectItemEquipmentRegion, __WorldContext) == 0x000008, "Member 'BP_FLIB_UMG_C_IsUMGSelectItemEquipmentRegion::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGSelectItemEquipmentRegion, IsEquipument) == 0x000010, "Member 'BP_FLIB_UMG_C_IsUMGSelectItemEquipmentRegion::IsEquipument' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGSelectItemEquipmentRegion, CallFunc_GetUMGManager_ReturnValue) == 0x000018, "Member 'BP_FLIB_UMG_C_IsUMGSelectItemEquipmentRegion::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGSelectItemEquipmentRegion, CallFunc_GetAccessorItem_ReturnValue) == 0x000020, "Member 'BP_FLIB_UMG_C_IsUMGSelectItemEquipmentRegion::CallFunc_GetAccessorItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGSelectItemEquipmentRegion, CallFunc_GetBagSelectedType_ReturnValue) == 0x000028, "Member 'BP_FLIB_UMG_C_IsUMGSelectItemEquipmentRegion::CallFunc_GetBagSelectedType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGSelectItemEquipmentRegion, CallFunc_GetBagSelectedItemIndex_ReturnValue) == 0x00002C, "Member 'BP_FLIB_UMG_C_IsUMGSelectItemEquipmentRegion::CallFunc_GetBagSelectedItemIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGSelectItemEquipmentRegion, CallFunc_GetItemEquipmentInfo_ReturnValue) == 0x000030, "Member 'BP_FLIB_UMG_C_IsUMGSelectItemEquipmentRegion::CallFunc_GetItemEquipmentInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGSelectItemEquipmentRegion, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000038, "Member 'BP_FLIB_UMG_C_IsUMGSelectItemEquipmentRegion::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.IsUMGAliveSelectCharacter
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_UMG_C_IsUMGAliveSelectCharacter final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsLive;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorItem*                   CallFunc_GetAccessorItem_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacter                                CallFunc_GetBagSelectedChar_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUMGAliveCharacter_bIsAlive;             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_UMG_C_IsUMGAliveSelectCharacter) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_IsUMGAliveSelectCharacter");
static_assert(sizeof(BP_FLIB_UMG_C_IsUMGAliveSelectCharacter) == 0x000028, "Wrong size on BP_FLIB_UMG_C_IsUMGAliveSelectCharacter");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGAliveSelectCharacter, __WorldContext) == 0x000000, "Member 'BP_FLIB_UMG_C_IsUMGAliveSelectCharacter::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGAliveSelectCharacter, bIsLive) == 0x000008, "Member 'BP_FLIB_UMG_C_IsUMGAliveSelectCharacter::bIsLive' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGAliveSelectCharacter, CallFunc_GetUMGManager_ReturnValue) == 0x000010, "Member 'BP_FLIB_UMG_C_IsUMGAliveSelectCharacter::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGAliveSelectCharacter, CallFunc_GetAccessorItem_ReturnValue) == 0x000018, "Member 'BP_FLIB_UMG_C_IsUMGAliveSelectCharacter::CallFunc_GetAccessorItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGAliveSelectCharacter, CallFunc_GetBagSelectedChar_ReturnValue) == 0x000020, "Member 'BP_FLIB_UMG_C_IsUMGAliveSelectCharacter::CallFunc_GetBagSelectedChar_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGAliveSelectCharacter, CallFunc_IsUMGAliveCharacter_bIsAlive) == 0x000021, "Member 'BP_FLIB_UMG_C_IsUMGAliveSelectCharacter::CallFunc_IsUMGAliveCharacter_bIsAlive' has a wrong offset!");

// Function BP_FLIB_UMG.BP_FLIB_UMG_C.IsUMGAliveTargetCharacter
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_UMG_C_IsUMGAliveTargetCharacter final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsAlive;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorItem*                   CallFunc_GetAccessorItem_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacter                                CallFunc_GetBagTargetChar_ReturnValue;             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUMGAliveCharacter_bIsAlive;             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_UMG_C_IsUMGAliveTargetCharacter) == 0x000008, "Wrong alignment on BP_FLIB_UMG_C_IsUMGAliveTargetCharacter");
static_assert(sizeof(BP_FLIB_UMG_C_IsUMGAliveTargetCharacter) == 0x000028, "Wrong size on BP_FLIB_UMG_C_IsUMGAliveTargetCharacter");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGAliveTargetCharacter, __WorldContext) == 0x000000, "Member 'BP_FLIB_UMG_C_IsUMGAliveTargetCharacter::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGAliveTargetCharacter, bIsAlive) == 0x000008, "Member 'BP_FLIB_UMG_C_IsUMGAliveTargetCharacter::bIsAlive' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGAliveTargetCharacter, CallFunc_GetUMGManager_ReturnValue) == 0x000010, "Member 'BP_FLIB_UMG_C_IsUMGAliveTargetCharacter::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGAliveTargetCharacter, CallFunc_GetAccessorItem_ReturnValue) == 0x000018, "Member 'BP_FLIB_UMG_C_IsUMGAliveTargetCharacter::CallFunc_GetAccessorItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGAliveTargetCharacter, CallFunc_GetBagTargetChar_ReturnValue) == 0x000020, "Member 'BP_FLIB_UMG_C_IsUMGAliveTargetCharacter::CallFunc_GetBagTargetChar_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UMG_C_IsUMGAliveTargetCharacter, CallFunc_IsUMGAliveCharacter_bIsAlive) == 0x000021, "Member 'BP_FLIB_UMG_C_IsUMGAliveTargetCharacter::CallFunc_IsUMGAliveCharacter_bIsAlive' has a wrong offset!");

}

