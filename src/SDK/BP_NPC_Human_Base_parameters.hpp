#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPC_Human_Base

#include "Basic.hpp"

#include "STRUCT_NpcAttachDisc_structs.hpp"
#include "JackGame_structs.hpp"
#include "Engine_structs.hpp"
#include "ENUM_CoordinateMeshSlot_structs.hpp"
#include "ENUM_Schedule_Pattern_structs.hpp"


namespace SDK::Params
{

// Function BP_NPC_Human_Base.BP_NPC_Human_Base_C.AddAttachDisc
// 0x0010 (0x0010 - 0x0000)
struct BP_NPC_Human_Base_C_AddAttachDisc final
{
public:
	class FName                                   bpp__AttachmentID__pf;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackNPCAttachmentType                        bpp__Type__pf;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_NPC_Human_Base_C_AddAttachDisc) == 0x000004, "Wrong alignment on BP_NPC_Human_Base_C_AddAttachDisc");
static_assert(sizeof(BP_NPC_Human_Base_C_AddAttachDisc) == 0x000010, "Wrong size on BP_NPC_Human_Base_C_AddAttachDisc");
static_assert(offsetof(BP_NPC_Human_Base_C_AddAttachDisc, bpp__AttachmentID__pf) == 0x000000, "Member 'BP_NPC_Human_Base_C_AddAttachDisc::bpp__AttachmentID__pf' has a wrong offset!");
static_assert(offsetof(BP_NPC_Human_Base_C_AddAttachDisc, bpp__Type__pf) == 0x000008, "Member 'BP_NPC_Human_Base_C_AddAttachDisc::bpp__Type__pf' has a wrong offset!");

// Function BP_NPC_Human_Base.BP_NPC_Human_Base_C.AttachGadget
// 0x0020 (0x0020 - 0x0000)
struct BP_NPC_Human_Base_C_AttachGadget final
{
public:
	class UStaticMeshComponent*                   bpp__AttachBase__pf;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            bpp__AttachMesh__pf;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__AttachSocket__pf;                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Visible__pf;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_NPC_Human_Base_C_AttachGadget) == 0x000008, "Wrong alignment on BP_NPC_Human_Base_C_AttachGadget");
static_assert(sizeof(BP_NPC_Human_Base_C_AttachGadget) == 0x000020, "Wrong size on BP_NPC_Human_Base_C_AttachGadget");
static_assert(offsetof(BP_NPC_Human_Base_C_AttachGadget, bpp__AttachBase__pf) == 0x000000, "Member 'BP_NPC_Human_Base_C_AttachGadget::bpp__AttachBase__pf' has a wrong offset!");
static_assert(offsetof(BP_NPC_Human_Base_C_AttachGadget, bpp__AttachMesh__pf) == 0x000008, "Member 'BP_NPC_Human_Base_C_AttachGadget::bpp__AttachMesh__pf' has a wrong offset!");
static_assert(offsetof(BP_NPC_Human_Base_C_AttachGadget, bpp__AttachSocket__pf) == 0x000010, "Member 'BP_NPC_Human_Base_C_AttachGadget::bpp__AttachSocket__pf' has a wrong offset!");
static_assert(offsetof(BP_NPC_Human_Base_C_AttachGadget, bpp__Visible__pf) == 0x000018, "Member 'BP_NPC_Human_Base_C_AttachGadget::bpp__Visible__pf' has a wrong offset!");

// Function BP_NPC_Human_Base.BP_NPC_Human_Base_C.AttachmentVisibleCtrlFromTimeZone
// 0x0001 (0x0001 - 0x0000)
struct BP_NPC_Human_Base_C_AttachmentVisibleCtrlFromTimeZone final
{
public:
	ENUM_Schedule_Pattern                         bpp__SchedulePtn__pf;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Human_Base_C_AttachmentVisibleCtrlFromTimeZone) == 0x000001, "Wrong alignment on BP_NPC_Human_Base_C_AttachmentVisibleCtrlFromTimeZone");
static_assert(sizeof(BP_NPC_Human_Base_C_AttachmentVisibleCtrlFromTimeZone) == 0x000001, "Wrong size on BP_NPC_Human_Base_C_AttachmentVisibleCtrlFromTimeZone");
static_assert(offsetof(BP_NPC_Human_Base_C_AttachmentVisibleCtrlFromTimeZone, bpp__SchedulePtn__pf) == 0x000000, "Member 'BP_NPC_Human_Base_C_AttachmentVisibleCtrlFromTimeZone::bpp__SchedulePtn__pf' has a wrong offset!");

// Function BP_NPC_Human_Base.BP_NPC_Human_Base_C.AttachmentVisibleCtrl FromTimeZoneSimple
// 0x0020 (0x0020 - 0x0000)
struct BP_NPC_Human_Base_C_AttachmentVisibleCtrl_FromTimeZoneSimple final
{
public:
	struct FSTRUCT_NpcAttachDisc                  bpp__AttachDisc__pf;                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__SchedulePtn__pf;                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_NPC_Human_Base_C_AttachmentVisibleCtrl_FromTimeZoneSimple) == 0x000008, "Wrong alignment on BP_NPC_Human_Base_C_AttachmentVisibleCtrl_FromTimeZoneSimple");
static_assert(sizeof(BP_NPC_Human_Base_C_AttachmentVisibleCtrl_FromTimeZoneSimple) == 0x000020, "Wrong size on BP_NPC_Human_Base_C_AttachmentVisibleCtrl_FromTimeZoneSimple");
static_assert(offsetof(BP_NPC_Human_Base_C_AttachmentVisibleCtrl_FromTimeZoneSimple, bpp__AttachDisc__pf) == 0x000000, "Member 'BP_NPC_Human_Base_C_AttachmentVisibleCtrl_FromTimeZoneSimple::bpp__AttachDisc__pf' has a wrong offset!");
static_assert(offsetof(BP_NPC_Human_Base_C_AttachmentVisibleCtrl_FromTimeZoneSimple, bpp__SchedulePtn__pf) == 0x000018, "Member 'BP_NPC_Human_Base_C_AttachmentVisibleCtrl_FromTimeZoneSimple::bpp__SchedulePtn__pf' has a wrong offset!");

// Function BP_NPC_Human_Base.BP_NPC_Human_Base_C.AttachProc
// 0x0020 (0x0020 - 0x0000)
struct BP_NPC_Human_Base_C_AttachProc final
{
public:
	struct FSTRUCT_NpcAttachDisc                  bpp__AttachDisc__pf;                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Result__pf;                                   // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_NPC_Human_Base_C_AttachProc) == 0x000008, "Wrong alignment on BP_NPC_Human_Base_C_AttachProc");
static_assert(sizeof(BP_NPC_Human_Base_C_AttachProc) == 0x000020, "Wrong size on BP_NPC_Human_Base_C_AttachProc");
static_assert(offsetof(BP_NPC_Human_Base_C_AttachProc, bpp__AttachDisc__pf) == 0x000000, "Member 'BP_NPC_Human_Base_C_AttachProc::bpp__AttachDisc__pf' has a wrong offset!");
static_assert(offsetof(BP_NPC_Human_Base_C_AttachProc, bpp__Result__pf) == 0x000018, "Member 'BP_NPC_Human_Base_C_AttachProc::bpp__Result__pf' has a wrong offset!");

// Function BP_NPC_Human_Base.BP_NPC_Human_Base_C.CallHiddenAttachmentNpcOptional
// 0x0010 (0x0010 - 0x0000)
struct BP_NPC_Human_Base_C_CallHiddenAttachmentNpcOptional final
{
public:
	TArray<class FName>                           bpp__PropName__pf;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Human_Base_C_CallHiddenAttachmentNpcOptional) == 0x000008, "Wrong alignment on BP_NPC_Human_Base_C_CallHiddenAttachmentNpcOptional");
static_assert(sizeof(BP_NPC_Human_Base_C_CallHiddenAttachmentNpcOptional) == 0x000010, "Wrong size on BP_NPC_Human_Base_C_CallHiddenAttachmentNpcOptional");
static_assert(offsetof(BP_NPC_Human_Base_C_CallHiddenAttachmentNpcOptional, bpp__PropName__pf) == 0x000000, "Member 'BP_NPC_Human_Base_C_CallHiddenAttachmentNpcOptional::bpp__PropName__pf' has a wrong offset!");

// Function BP_NPC_Human_Base.BP_NPC_Human_Base_C.CallShowAttachmentNpcOptional
// 0x0010 (0x0010 - 0x0000)
struct BP_NPC_Human_Base_C_CallShowAttachmentNpcOptional final
{
public:
	TArray<class FName>                           bpp__PropName__pf;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Human_Base_C_CallShowAttachmentNpcOptional) == 0x000008, "Wrong alignment on BP_NPC_Human_Base_C_CallShowAttachmentNpcOptional");
static_assert(sizeof(BP_NPC_Human_Base_C_CallShowAttachmentNpcOptional) == 0x000010, "Wrong size on BP_NPC_Human_Base_C_CallShowAttachmentNpcOptional");
static_assert(offsetof(BP_NPC_Human_Base_C_CallShowAttachmentNpcOptional, bpp__PropName__pf) == 0x000000, "Member 'BP_NPC_Human_Base_C_CallShowAttachmentNpcOptional::bpp__PropName__pf' has a wrong offset!");

// Function BP_NPC_Human_Base.BP_NPC_Human_Base_C.DetachProc
// 0x0018 (0x0018 - 0x0000)
struct BP_NPC_Human_Base_C_DetachProc final
{
public:
	struct FSTRUCT_NpcAttachDisc                  bpp__AttachDisc__pf;                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Human_Base_C_DetachProc) == 0x000008, "Wrong alignment on BP_NPC_Human_Base_C_DetachProc");
static_assert(sizeof(BP_NPC_Human_Base_C_DetachProc) == 0x000018, "Wrong size on BP_NPC_Human_Base_C_DetachProc");
static_assert(offsetof(BP_NPC_Human_Base_C_DetachProc, bpp__AttachDisc__pf) == 0x000000, "Member 'BP_NPC_Human_Base_C_DetachProc::bpp__AttachDisc__pf' has a wrong offset!");

// Function BP_NPC_Human_Base.BP_NPC_Human_Base_C.Event_NPC_Human_HiddenAttachment
// 0x0010 (0x0010 - 0x0000)
struct BP_NPC_Human_Base_C_Event_NPC_Human_HiddenAttachment final
{
public:
	TArray<class FName>                           bpp__PropName__pf__const;                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Human_Base_C_Event_NPC_Human_HiddenAttachment) == 0x000008, "Wrong alignment on BP_NPC_Human_Base_C_Event_NPC_Human_HiddenAttachment");
static_assert(sizeof(BP_NPC_Human_Base_C_Event_NPC_Human_HiddenAttachment) == 0x000010, "Wrong size on BP_NPC_Human_Base_C_Event_NPC_Human_HiddenAttachment");
static_assert(offsetof(BP_NPC_Human_Base_C_Event_NPC_Human_HiddenAttachment, bpp__PropName__pf__const) == 0x000000, "Member 'BP_NPC_Human_Base_C_Event_NPC_Human_HiddenAttachment::bpp__PropName__pf__const' has a wrong offset!");

// Function BP_NPC_Human_Base.BP_NPC_Human_Base_C.Event_NPC_Human_ShowAttachment
// 0x0010 (0x0010 - 0x0000)
struct BP_NPC_Human_Base_C_Event_NPC_Human_ShowAttachment final
{
public:
	TArray<class FName>                           bpp__PropName__pf__const;                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Human_Base_C_Event_NPC_Human_ShowAttachment) == 0x000008, "Wrong alignment on BP_NPC_Human_Base_C_Event_NPC_Human_ShowAttachment");
static_assert(sizeof(BP_NPC_Human_Base_C_Event_NPC_Human_ShowAttachment) == 0x000010, "Wrong size on BP_NPC_Human_Base_C_Event_NPC_Human_ShowAttachment");
static_assert(offsetof(BP_NPC_Human_Base_C_Event_NPC_Human_ShowAttachment, bpp__PropName__pf__const) == 0x000000, "Member 'BP_NPC_Human_Base_C_Event_NPC_Human_ShowAttachment::bpp__PropName__pf__const' has a wrong offset!");

// Function BP_NPC_Human_Base.BP_NPC_Human_Base_C.Event_NpcAttachmentPropHiddenDirectCall
// 0x0018 (0x0018 - 0x0000)
struct BP_NPC_Human_Base_C_Event_NpcAttachmentPropHiddenDirectCall final
{
public:
	TArray<class FName>                           bpp__PropID__pf__const;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bpp__Hidden__pf;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_NPC_Human_Base_C_Event_NpcAttachmentPropHiddenDirectCall) == 0x000008, "Wrong alignment on BP_NPC_Human_Base_C_Event_NpcAttachmentPropHiddenDirectCall");
static_assert(sizeof(BP_NPC_Human_Base_C_Event_NpcAttachmentPropHiddenDirectCall) == 0x000018, "Wrong size on BP_NPC_Human_Base_C_Event_NpcAttachmentPropHiddenDirectCall");
static_assert(offsetof(BP_NPC_Human_Base_C_Event_NpcAttachmentPropHiddenDirectCall, bpp__PropID__pf__const) == 0x000000, "Member 'BP_NPC_Human_Base_C_Event_NpcAttachmentPropHiddenDirectCall::bpp__PropID__pf__const' has a wrong offset!");
static_assert(offsetof(BP_NPC_Human_Base_C_Event_NpcAttachmentPropHiddenDirectCall, bpp__Hidden__pf) == 0x000010, "Member 'BP_NPC_Human_Base_C_Event_NpcAttachmentPropHiddenDirectCall::bpp__Hidden__pf' has a wrong offset!");

// Function BP_NPC_Human_Base.BP_NPC_Human_Base_C.ExecuteUbergraph_BP_NPC_Human_Base_2
// 0x0004 (0x0004 - 0x0000)
struct BP_NPC_Human_Base_C_ExecuteUbergraph_BP_NPC_Human_Base_2 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Human_Base_C_ExecuteUbergraph_BP_NPC_Human_Base_2) == 0x000004, "Wrong alignment on BP_NPC_Human_Base_C_ExecuteUbergraph_BP_NPC_Human_Base_2");
static_assert(sizeof(BP_NPC_Human_Base_C_ExecuteUbergraph_BP_NPC_Human_Base_2) == 0x000004, "Wrong size on BP_NPC_Human_Base_C_ExecuteUbergraph_BP_NPC_Human_Base_2");
static_assert(offsetof(BP_NPC_Human_Base_C_ExecuteUbergraph_BP_NPC_Human_Base_2, bpp__EntryPoint__pf) == 0x000000, "Member 'BP_NPC_Human_Base_C_ExecuteUbergraph_BP_NPC_Human_Base_2::bpp__EntryPoint__pf' has a wrong offset!");

// Function BP_NPC_Human_Base.BP_NPC_Human_Base_C.GetFacialAnimManager
// 0x0008 (0x0008 - 0x0000)
struct BP_NPC_Human_Base_C_GetFacialAnimManager final
{
public:
	class UJackFacialControlComponent*            bpp__JackFacialControlComponent__pf;               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Human_Base_C_GetFacialAnimManager) == 0x000008, "Wrong alignment on BP_NPC_Human_Base_C_GetFacialAnimManager");
static_assert(sizeof(BP_NPC_Human_Base_C_GetFacialAnimManager) == 0x000008, "Wrong size on BP_NPC_Human_Base_C_GetFacialAnimManager");
static_assert(offsetof(BP_NPC_Human_Base_C_GetFacialAnimManager, bpp__JackFacialControlComponent__pf) == 0x000000, "Member 'BP_NPC_Human_Base_C_GetFacialAnimManager::bpp__JackFacialControlComponent__pf' has a wrong offset!");

// Function BP_NPC_Human_Base.BP_NPC_Human_Base_C.GetMeshByCoordinateSlotType
// 0x0010 (0x0010 - 0x0000)
struct BP_NPC_Human_Base_C_GetMeshByCoordinateSlotType final
{
public:
	ENUM_CoordinateMeshSlot                       bpp__SlotType__pf;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 bpp__SkeletalMeshComponent__pf;                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Human_Base_C_GetMeshByCoordinateSlotType) == 0x000008, "Wrong alignment on BP_NPC_Human_Base_C_GetMeshByCoordinateSlotType");
static_assert(sizeof(BP_NPC_Human_Base_C_GetMeshByCoordinateSlotType) == 0x000010, "Wrong size on BP_NPC_Human_Base_C_GetMeshByCoordinateSlotType");
static_assert(offsetof(BP_NPC_Human_Base_C_GetMeshByCoordinateSlotType, bpp__SlotType__pf) == 0x000000, "Member 'BP_NPC_Human_Base_C_GetMeshByCoordinateSlotType::bpp__SlotType__pf' has a wrong offset!");
static_assert(offsetof(BP_NPC_Human_Base_C_GetMeshByCoordinateSlotType, bpp__SkeletalMeshComponent__pf) == 0x000008, "Member 'BP_NPC_Human_Base_C_GetMeshByCoordinateSlotType::bpp__SkeletalMeshComponent__pf' has a wrong offset!");

// Function BP_NPC_Human_Base.BP_NPC_Human_Base_C.Hidden Attachment Simple
// 0x0008 (0x0008 - 0x0000)
struct BP_NPC_Human_Base_C_Hidden_Attachment_Simple final
{
public:
	class FName                                   bpp__AttachmentName__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Human_Base_C_Hidden_Attachment_Simple) == 0x000004, "Wrong alignment on BP_NPC_Human_Base_C_Hidden_Attachment_Simple");
static_assert(sizeof(BP_NPC_Human_Base_C_Hidden_Attachment_Simple) == 0x000008, "Wrong size on BP_NPC_Human_Base_C_Hidden_Attachment_Simple");
static_assert(offsetof(BP_NPC_Human_Base_C_Hidden_Attachment_Simple, bpp__AttachmentName__pf) == 0x000000, "Member 'BP_NPC_Human_Base_C_Hidden_Attachment_Simple::bpp__AttachmentName__pf' has a wrong offset!");

// Function BP_NPC_Human_Base.BP_NPC_Human_Base_C.IsOverlapPropID
// 0x0010 (0x0010 - 0x0000)
struct BP_NPC_Human_Base_C_IsOverlapPropID final
{
public:
	class FName                                   bpp__PropID__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Result__pf;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_NPC_Human_Base_C_IsOverlapPropID) == 0x000004, "Wrong alignment on BP_NPC_Human_Base_C_IsOverlapPropID");
static_assert(sizeof(BP_NPC_Human_Base_C_IsOverlapPropID) == 0x000010, "Wrong size on BP_NPC_Human_Base_C_IsOverlapPropID");
static_assert(offsetof(BP_NPC_Human_Base_C_IsOverlapPropID, bpp__PropID__pf) == 0x000000, "Member 'BP_NPC_Human_Base_C_IsOverlapPropID::bpp__PropID__pf' has a wrong offset!");
static_assert(offsetof(BP_NPC_Human_Base_C_IsOverlapPropID, bpp__Result__pf) == 0x000008, "Member 'BP_NPC_Human_Base_C_IsOverlapPropID::bpp__Result__pf' has a wrong offset!");

// Function BP_NPC_Human_Base.BP_NPC_Human_Base_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_NPC_Human_Base_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                bpp__EndPlayReason__pf;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Human_Base_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_NPC_Human_Base_C_ReceiveEndPlay");
static_assert(sizeof(BP_NPC_Human_Base_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_NPC_Human_Base_C_ReceiveEndPlay");
static_assert(offsetof(BP_NPC_Human_Base_C_ReceiveEndPlay, bpp__EndPlayReason__pf) == 0x000000, "Member 'BP_NPC_Human_Base_C_ReceiveEndPlay::bpp__EndPlayReason__pf' has a wrong offset!");

// Function BP_NPC_Human_Base.BP_NPC_Human_Base_C.SetHiddenEquipment
// 0x0008 (0x0008 - 0x0000)
struct BP_NPC_Human_Base_C_SetHiddenEquipment final
{
public:
	class UJackEquipmentControlComponent*         bpp__EquipmentComponent__pf;                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Human_Base_C_SetHiddenEquipment) == 0x000008, "Wrong alignment on BP_NPC_Human_Base_C_SetHiddenEquipment");
static_assert(sizeof(BP_NPC_Human_Base_C_SetHiddenEquipment) == 0x000008, "Wrong size on BP_NPC_Human_Base_C_SetHiddenEquipment");
static_assert(offsetof(BP_NPC_Human_Base_C_SetHiddenEquipment, bpp__EquipmentComponent__pf) == 0x000000, "Member 'BP_NPC_Human_Base_C_SetHiddenEquipment::bpp__EquipmentComponent__pf' has a wrong offset!");

// Function BP_NPC_Human_Base.BP_NPC_Human_Base_C.ShowAttachmentEnableFromID
// 0x0018 (0x0018 - 0x0000)
struct BP_NPC_Human_Base_C_ShowAttachmentEnableFromID final
{
public:
	struct FJackLDT_AttachedProps_NPC             bpp__ID__pf;                                       // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bpp__Enable__pf;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_NPC_Human_Base_C_ShowAttachmentEnableFromID) == 0x000008, "Wrong alignment on BP_NPC_Human_Base_C_ShowAttachmentEnableFromID");
static_assert(sizeof(BP_NPC_Human_Base_C_ShowAttachmentEnableFromID) == 0x000018, "Wrong size on BP_NPC_Human_Base_C_ShowAttachmentEnableFromID");
static_assert(offsetof(BP_NPC_Human_Base_C_ShowAttachmentEnableFromID, bpp__ID__pf) == 0x000000, "Member 'BP_NPC_Human_Base_C_ShowAttachmentEnableFromID::bpp__ID__pf' has a wrong offset!");
static_assert(offsetof(BP_NPC_Human_Base_C_ShowAttachmentEnableFromID, bpp__Enable__pf) == 0x000010, "Member 'BP_NPC_Human_Base_C_ShowAttachmentEnableFromID::bpp__Enable__pf' has a wrong offset!");

// Function BP_NPC_Human_Base.BP_NPC_Human_Base_C.ShowAttachment Simple
// 0x0008 (0x0008 - 0x0000)
struct BP_NPC_Human_Base_C_ShowAttachment_Simple final
{
public:
	class FName                                   bpp__AttachmentName__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Human_Base_C_ShowAttachment_Simple) == 0x000004, "Wrong alignment on BP_NPC_Human_Base_C_ShowAttachment_Simple");
static_assert(sizeof(BP_NPC_Human_Base_C_ShowAttachment_Simple) == 0x000008, "Wrong size on BP_NPC_Human_Base_C_ShowAttachment_Simple");
static_assert(offsetof(BP_NPC_Human_Base_C_ShowAttachment_Simple, bpp__AttachmentName__pf) == 0x000000, "Member 'BP_NPC_Human_Base_C_ShowAttachment_Simple::bpp__AttachmentName__pf' has a wrong offset!");

// Function BP_NPC_Human_Base.BP_NPC_Human_Base_C.Show Attachment Day
// 0x0018 (0x0018 - 0x0000)
struct BP_NPC_Human_Base_C_Show_Attachment_Day final
{
public:
	struct FSTRUCT_NpcAttachDisc                  bpp__AttachDisc__pf;                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Human_Base_C_Show_Attachment_Day) == 0x000008, "Wrong alignment on BP_NPC_Human_Base_C_Show_Attachment_Day");
static_assert(sizeof(BP_NPC_Human_Base_C_Show_Attachment_Day) == 0x000018, "Wrong size on BP_NPC_Human_Base_C_Show_Attachment_Day");
static_assert(offsetof(BP_NPC_Human_Base_C_Show_Attachment_Day, bpp__AttachDisc__pf) == 0x000000, "Member 'BP_NPC_Human_Base_C_Show_Attachment_Day::bpp__AttachDisc__pf' has a wrong offset!");

// Function BP_NPC_Human_Base.BP_NPC_Human_Base_C.Show Attachment Night
// 0x0018 (0x0018 - 0x0000)
struct BP_NPC_Human_Base_C_Show_Attachment_Night final
{
public:
	struct FSTRUCT_NpcAttachDisc                  bpp__AttachDisc__pf;                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Human_Base_C_Show_Attachment_Night) == 0x000008, "Wrong alignment on BP_NPC_Human_Base_C_Show_Attachment_Night");
static_assert(sizeof(BP_NPC_Human_Base_C_Show_Attachment_Night) == 0x000018, "Wrong size on BP_NPC_Human_Base_C_Show_Attachment_Night");
static_assert(offsetof(BP_NPC_Human_Base_C_Show_Attachment_Night, bpp__AttachDisc__pf) == 0x000000, "Member 'BP_NPC_Human_Base_C_Show_Attachment_Night::bpp__AttachDisc__pf' has a wrong offset!");

}

