#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Title_HUD

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "JackGame_structs.hpp"


namespace SDK::Params
{

// Function BP_Title_HUD.BP_Title_HUD_C.ExecuteUbergraph_BP_Title_HUD
// 0x0030 (0x0030 - 0x0000)
struct BP_Title_HUD_C_ExecuteUbergraph_BP_Title_HUD final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_InWorldLocation;                      // 0x0004(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackPopupBalloon                             K2Node_Event_InPopupBalloon;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_InNumber;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackGameCharacter*                     K2Node_Event_InGameCharacter;                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_Event_InLocalMesh;                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_InSocketName;                         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Title_HUD_C_ExecuteUbergraph_BP_Title_HUD) == 0x000008, "Wrong alignment on BP_Title_HUD_C_ExecuteUbergraph_BP_Title_HUD");
static_assert(sizeof(BP_Title_HUD_C_ExecuteUbergraph_BP_Title_HUD) == 0x000030, "Wrong size on BP_Title_HUD_C_ExecuteUbergraph_BP_Title_HUD");
static_assert(offsetof(BP_Title_HUD_C_ExecuteUbergraph_BP_Title_HUD, EntryPoint) == 0x000000, "Member 'BP_Title_HUD_C_ExecuteUbergraph_BP_Title_HUD::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Title_HUD_C_ExecuteUbergraph_BP_Title_HUD, K2Node_Event_InWorldLocation) == 0x000004, "Member 'BP_Title_HUD_C_ExecuteUbergraph_BP_Title_HUD::K2Node_Event_InWorldLocation' has a wrong offset!");
static_assert(offsetof(BP_Title_HUD_C_ExecuteUbergraph_BP_Title_HUD, K2Node_Event_InPopupBalloon) == 0x000010, "Member 'BP_Title_HUD_C_ExecuteUbergraph_BP_Title_HUD::K2Node_Event_InPopupBalloon' has a wrong offset!");
static_assert(offsetof(BP_Title_HUD_C_ExecuteUbergraph_BP_Title_HUD, K2Node_Event_InNumber) == 0x000014, "Member 'BP_Title_HUD_C_ExecuteUbergraph_BP_Title_HUD::K2Node_Event_InNumber' has a wrong offset!");
static_assert(offsetof(BP_Title_HUD_C_ExecuteUbergraph_BP_Title_HUD, K2Node_Event_InGameCharacter) == 0x000018, "Member 'BP_Title_HUD_C_ExecuteUbergraph_BP_Title_HUD::K2Node_Event_InGameCharacter' has a wrong offset!");
static_assert(offsetof(BP_Title_HUD_C_ExecuteUbergraph_BP_Title_HUD, K2Node_Event_InLocalMesh) == 0x000020, "Member 'BP_Title_HUD_C_ExecuteUbergraph_BP_Title_HUD::K2Node_Event_InLocalMesh' has a wrong offset!");
static_assert(offsetof(BP_Title_HUD_C_ExecuteUbergraph_BP_Title_HUD, K2Node_Event_InSocketName) == 0x000028, "Member 'BP_Title_HUD_C_ExecuteUbergraph_BP_Title_HUD::K2Node_Event_InSocketName' has a wrong offset!");

// Function BP_Title_HUD.BP_Title_HUD_C.SpawnPopupBalloon
// 0x0030 (0x0030 - 0x0000)
struct BP_Title_HUD_C_SpawnPopupBalloon final
{
public:
	struct FVector                                InWorldLocation;                                   // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackPopupBalloon                             InPopupBalloon;                                    // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InNumber;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackGameCharacter*                     InGameCharacter;                                   // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 InLocalMesh;                                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   InSocketName;                                      // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Title_HUD_C_SpawnPopupBalloon) == 0x000008, "Wrong alignment on BP_Title_HUD_C_SpawnPopupBalloon");
static_assert(sizeof(BP_Title_HUD_C_SpawnPopupBalloon) == 0x000030, "Wrong size on BP_Title_HUD_C_SpawnPopupBalloon");
static_assert(offsetof(BP_Title_HUD_C_SpawnPopupBalloon, InWorldLocation) == 0x000000, "Member 'BP_Title_HUD_C_SpawnPopupBalloon::InWorldLocation' has a wrong offset!");
static_assert(offsetof(BP_Title_HUD_C_SpawnPopupBalloon, InPopupBalloon) == 0x00000C, "Member 'BP_Title_HUD_C_SpawnPopupBalloon::InPopupBalloon' has a wrong offset!");
static_assert(offsetof(BP_Title_HUD_C_SpawnPopupBalloon, InNumber) == 0x000010, "Member 'BP_Title_HUD_C_SpawnPopupBalloon::InNumber' has a wrong offset!");
static_assert(offsetof(BP_Title_HUD_C_SpawnPopupBalloon, InGameCharacter) == 0x000018, "Member 'BP_Title_HUD_C_SpawnPopupBalloon::InGameCharacter' has a wrong offset!");
static_assert(offsetof(BP_Title_HUD_C_SpawnPopupBalloon, InLocalMesh) == 0x000020, "Member 'BP_Title_HUD_C_SpawnPopupBalloon::InLocalMesh' has a wrong offset!");
static_assert(offsetof(BP_Title_HUD_C_SpawnPopupBalloon, InSocketName) == 0x000028, "Member 'BP_Title_HUD_C_SpawnPopupBalloon::InSocketName' has a wrong offset!");

// Function BP_Title_HUD.BP_Title_HUD_C.CheckReamAttack
// 0x0058 (0x0058 - 0x0000)
struct BP_Title_HUD_C_CheckReamAttack final
{
public:
	struct FVector                                InPosition;                                        // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackGameCharacter*                     InGameCharacter;                                   // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OutPosition;                                       // 0x0018(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempVector;                                        // 0x0024(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorBattle*                 CallFunc_GetAccessorBattle_ReturnValue;            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SetRengekiOffset_ReturnValue;             // 0x0040(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x004C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Title_HUD_C_CheckReamAttack) == 0x000008, "Wrong alignment on BP_Title_HUD_C_CheckReamAttack");
static_assert(sizeof(BP_Title_HUD_C_CheckReamAttack) == 0x000058, "Wrong size on BP_Title_HUD_C_CheckReamAttack");
static_assert(offsetof(BP_Title_HUD_C_CheckReamAttack, InPosition) == 0x000000, "Member 'BP_Title_HUD_C_CheckReamAttack::InPosition' has a wrong offset!");
static_assert(offsetof(BP_Title_HUD_C_CheckReamAttack, InGameCharacter) == 0x000010, "Member 'BP_Title_HUD_C_CheckReamAttack::InGameCharacter' has a wrong offset!");
static_assert(offsetof(BP_Title_HUD_C_CheckReamAttack, OutPosition) == 0x000018, "Member 'BP_Title_HUD_C_CheckReamAttack::OutPosition' has a wrong offset!");
static_assert(offsetof(BP_Title_HUD_C_CheckReamAttack, TempVector) == 0x000024, "Member 'BP_Title_HUD_C_CheckReamAttack::TempVector' has a wrong offset!");
static_assert(offsetof(BP_Title_HUD_C_CheckReamAttack, CallFunc_GetUMGManager_ReturnValue) == 0x000030, "Member 'BP_Title_HUD_C_CheckReamAttack::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Title_HUD_C_CheckReamAttack, CallFunc_GetAccessorBattle_ReturnValue) == 0x000038, "Member 'BP_Title_HUD_C_CheckReamAttack::CallFunc_GetAccessorBattle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Title_HUD_C_CheckReamAttack, CallFunc_SetRengekiOffset_ReturnValue) == 0x000040, "Member 'BP_Title_HUD_C_CheckReamAttack::CallFunc_SetRengekiOffset_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Title_HUD_C_CheckReamAttack, CallFunc_Add_VectorVector_ReturnValue) == 0x00004C, "Member 'BP_Title_HUD_C_CheckReamAttack::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

}

