#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SkyBase

#include "Basic.hpp"

#include "JackGame_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_SkyBase.BP_SkyBase_C.EndCutScene
// 0x0008 (0x0008 - 0x0000)
struct BP_SkyBase_C_EndCutScene final
{
public:
	class FName                                   bpp__CSID__pf;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SkyBase_C_EndCutScene) == 0x000004, "Wrong alignment on BP_SkyBase_C_EndCutScene");
static_assert(sizeof(BP_SkyBase_C_EndCutScene) == 0x000008, "Wrong size on BP_SkyBase_C_EndCutScene");
static_assert(offsetof(BP_SkyBase_C_EndCutScene, bpp__CSID__pf) == 0x000000, "Member 'BP_SkyBase_C_EndCutScene::bpp__CSID__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.EndCutSceneBeforeUnload
// 0x0008 (0x0008 - 0x0000)
struct BP_SkyBase_C_EndCutSceneBeforeUnload final
{
public:
	class FName                                   bpp__CSID__pf;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SkyBase_C_EndCutSceneBeforeUnload) == 0x000004, "Wrong alignment on BP_SkyBase_C_EndCutSceneBeforeUnload");
static_assert(sizeof(BP_SkyBase_C_EndCutSceneBeforeUnload) == 0x000008, "Wrong size on BP_SkyBase_C_EndCutSceneBeforeUnload");
static_assert(offsetof(BP_SkyBase_C_EndCutSceneBeforeUnload, bpp__CSID__pf) == 0x000000, "Member 'BP_SkyBase_C_EndCutSceneBeforeUnload::bpp__CSID__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.EndCutSceneFadInBefore
// 0x0008 (0x0008 - 0x0000)
struct BP_SkyBase_C_EndCutSceneFadInBefore final
{
public:
	class FName                                   bpp__CSID__pf;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SkyBase_C_EndCutSceneFadInBefore) == 0x000004, "Wrong alignment on BP_SkyBase_C_EndCutSceneFadInBefore");
static_assert(sizeof(BP_SkyBase_C_EndCutSceneFadInBefore) == 0x000008, "Wrong size on BP_SkyBase_C_EndCutSceneFadInBefore");
static_assert(offsetof(BP_SkyBase_C_EndCutSceneFadInBefore, bpp__CSID__pf) == 0x000000, "Member 'BP_SkyBase_C_EndCutSceneFadInBefore::bpp__CSID__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.ExecuteUbergraph_BP_SkyBase_4
// 0x0004 (0x0004 - 0x0000)
struct BP_SkyBase_C_ExecuteUbergraph_BP_SkyBase_4 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SkyBase_C_ExecuteUbergraph_BP_SkyBase_4) == 0x000004, "Wrong alignment on BP_SkyBase_C_ExecuteUbergraph_BP_SkyBase_4");
static_assert(sizeof(BP_SkyBase_C_ExecuteUbergraph_BP_SkyBase_4) == 0x000004, "Wrong size on BP_SkyBase_C_ExecuteUbergraph_BP_SkyBase_4");
static_assert(offsetof(BP_SkyBase_C_ExecuteUbergraph_BP_SkyBase_4, bpp__EntryPoint__pf) == 0x000000, "Member 'BP_SkyBase_C_ExecuteUbergraph_BP_SkyBase_4::bpp__EntryPoint__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.GetNowColorWeatherCalc
// 0x0038 (0x0038 - 0x0000)
struct BP_SkyBase_C_GetNowColorWeatherCalc final
{
public:
	struct FLinearColor                           bpp__OldColor__pf;                                 // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   bpp__NewColor__pf;                                 // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         bpp__WeatherChangeRate__pf;                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__NowColor__pf;                                 // 0x0024(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_SkyBase_C_GetNowColorWeatherCalc) == 0x000008, "Wrong alignment on BP_SkyBase_C_GetNowColorWeatherCalc");
static_assert(sizeof(BP_SkyBase_C_GetNowColorWeatherCalc) == 0x000038, "Wrong size on BP_SkyBase_C_GetNowColorWeatherCalc");
static_assert(offsetof(BP_SkyBase_C_GetNowColorWeatherCalc, bpp__OldColor__pf) == 0x000000, "Member 'BP_SkyBase_C_GetNowColorWeatherCalc::bpp__OldColor__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowColorWeatherCalc, bpp__NewColor__pf) == 0x000010, "Member 'BP_SkyBase_C_GetNowColorWeatherCalc::bpp__NewColor__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowColorWeatherCalc, bpp__WeatherChangeRate__pf) == 0x000020, "Member 'BP_SkyBase_C_GetNowColorWeatherCalc::bpp__WeatherChangeRate__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowColorWeatherCalc, bpp__NowColor__pf) == 0x000024, "Member 'BP_SkyBase_C_GetNowColorWeatherCalc::bpp__NowColor__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.GetNowFloatWeatherCalc
// 0x0020 (0x0020 - 0x0000)
struct BP_SkyBase_C_GetNowFloatWeatherCalc final
{
public:
	float                                         bpp__OldFloat__pf;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 bpp__NewFloat__pf;                                 // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         bpp__WeatherChangeRate__pf;                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__NowFloat__pf;                                 // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SkyBase_C_GetNowFloatWeatherCalc) == 0x000008, "Wrong alignment on BP_SkyBase_C_GetNowFloatWeatherCalc");
static_assert(sizeof(BP_SkyBase_C_GetNowFloatWeatherCalc) == 0x000020, "Wrong size on BP_SkyBase_C_GetNowFloatWeatherCalc");
static_assert(offsetof(BP_SkyBase_C_GetNowFloatWeatherCalc, bpp__OldFloat__pf) == 0x000000, "Member 'BP_SkyBase_C_GetNowFloatWeatherCalc::bpp__OldFloat__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowFloatWeatherCalc, bpp__NewFloat__pf) == 0x000008, "Member 'BP_SkyBase_C_GetNowFloatWeatherCalc::bpp__NewFloat__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowFloatWeatherCalc, bpp__WeatherChangeRate__pf) == 0x000018, "Member 'BP_SkyBase_C_GetNowFloatWeatherCalc::bpp__WeatherChangeRate__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowFloatWeatherCalc, bpp__NowFloat__pf) == 0x00001C, "Member 'BP_SkyBase_C_GetNowFloatWeatherCalc::bpp__NowFloat__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.GetNowSkyParameter
// 0x00EC (0x00EC - 0x0000)
struct BP_SkyBase_C_GetNowSkyParameter final
{
public:
	EJackWorldWeather                             bpp__NewWeather__pf;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         bpp__WeatherChangeRate__pf;                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__ZenithColor__pf;                              // 0x0008(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__MiddleColor__pf;                              // 0x0018(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__HorizonColor__pf;                             // 0x0028(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__OverallColor__pf;                             // 0x0038(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__SunLightColor__pf;                            // 0x0048(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__SunColor__pf;                                 // 0x0058(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__CloudColor__pf;                               // 0x0068(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__CloudColorShadow__pf;                         // 0x0078(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__SunLightIntensity__pf;                        // 0x0088(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__HorizonFalloff__pf;                           // 0x008C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__MiddleFalloff__pf;                            // 0x0090(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__CloudOpacity__pf;                             // 0x0094(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__MoonLightColor__pf;                           // 0x0098(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__MoonLightBrightness__pf;                      // 0x00A8(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__TaijuColorPlaneBright__pf;                    // 0x00AC(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__TaijuColorPlaneShadow__pf;                    // 0x00BC(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__MajouColorPlaneBright__pf;                    // 0x00CC(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__MajouColorPlaneShadow__pf;                    // 0x00DC(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SkyBase_C_GetNowSkyParameter) == 0x000004, "Wrong alignment on BP_SkyBase_C_GetNowSkyParameter");
static_assert(sizeof(BP_SkyBase_C_GetNowSkyParameter) == 0x0000EC, "Wrong size on BP_SkyBase_C_GetNowSkyParameter");
static_assert(offsetof(BP_SkyBase_C_GetNowSkyParameter, bpp__NewWeather__pf) == 0x000000, "Member 'BP_SkyBase_C_GetNowSkyParameter::bpp__NewWeather__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowSkyParameter, bpp__WeatherChangeRate__pf) == 0x000004, "Member 'BP_SkyBase_C_GetNowSkyParameter::bpp__WeatherChangeRate__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowSkyParameter, bpp__ZenithColor__pf) == 0x000008, "Member 'BP_SkyBase_C_GetNowSkyParameter::bpp__ZenithColor__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowSkyParameter, bpp__MiddleColor__pf) == 0x000018, "Member 'BP_SkyBase_C_GetNowSkyParameter::bpp__MiddleColor__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowSkyParameter, bpp__HorizonColor__pf) == 0x000028, "Member 'BP_SkyBase_C_GetNowSkyParameter::bpp__HorizonColor__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowSkyParameter, bpp__OverallColor__pf) == 0x000038, "Member 'BP_SkyBase_C_GetNowSkyParameter::bpp__OverallColor__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowSkyParameter, bpp__SunLightColor__pf) == 0x000048, "Member 'BP_SkyBase_C_GetNowSkyParameter::bpp__SunLightColor__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowSkyParameter, bpp__SunColor__pf) == 0x000058, "Member 'BP_SkyBase_C_GetNowSkyParameter::bpp__SunColor__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowSkyParameter, bpp__CloudColor__pf) == 0x000068, "Member 'BP_SkyBase_C_GetNowSkyParameter::bpp__CloudColor__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowSkyParameter, bpp__CloudColorShadow__pf) == 0x000078, "Member 'BP_SkyBase_C_GetNowSkyParameter::bpp__CloudColorShadow__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowSkyParameter, bpp__SunLightIntensity__pf) == 0x000088, "Member 'BP_SkyBase_C_GetNowSkyParameter::bpp__SunLightIntensity__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowSkyParameter, bpp__HorizonFalloff__pf) == 0x00008C, "Member 'BP_SkyBase_C_GetNowSkyParameter::bpp__HorizonFalloff__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowSkyParameter, bpp__MiddleFalloff__pf) == 0x000090, "Member 'BP_SkyBase_C_GetNowSkyParameter::bpp__MiddleFalloff__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowSkyParameter, bpp__CloudOpacity__pf) == 0x000094, "Member 'BP_SkyBase_C_GetNowSkyParameter::bpp__CloudOpacity__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowSkyParameter, bpp__MoonLightColor__pf) == 0x000098, "Member 'BP_SkyBase_C_GetNowSkyParameter::bpp__MoonLightColor__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowSkyParameter, bpp__MoonLightBrightness__pf) == 0x0000A8, "Member 'BP_SkyBase_C_GetNowSkyParameter::bpp__MoonLightBrightness__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowSkyParameter, bpp__TaijuColorPlaneBright__pf) == 0x0000AC, "Member 'BP_SkyBase_C_GetNowSkyParameter::bpp__TaijuColorPlaneBright__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowSkyParameter, bpp__TaijuColorPlaneShadow__pf) == 0x0000BC, "Member 'BP_SkyBase_C_GetNowSkyParameter::bpp__TaijuColorPlaneShadow__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowSkyParameter, bpp__MajouColorPlaneBright__pf) == 0x0000CC, "Member 'BP_SkyBase_C_GetNowSkyParameter::bpp__MajouColorPlaneBright__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetNowSkyParameter, bpp__MajouColorPlaneShadow__pf) == 0x0000DC, "Member 'BP_SkyBase_C_GetNowSkyParameter::bpp__MajouColorPlaneShadow__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.GetSkyParamID
// 0x0008 (0x0008 - 0x0000)
struct BP_SkyBase_C_GetSkyParamID final
{
public:
	EJackWorldWeather                             bpp__Weather__pf;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         bpp__SkyParamID__pf;                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SkyBase_C_GetSkyParamID) == 0x000004, "Wrong alignment on BP_SkyBase_C_GetSkyParamID");
static_assert(sizeof(BP_SkyBase_C_GetSkyParamID) == 0x000008, "Wrong size on BP_SkyBase_C_GetSkyParamID");
static_assert(offsetof(BP_SkyBase_C_GetSkyParamID, bpp__Weather__pf) == 0x000000, "Member 'BP_SkyBase_C_GetSkyParamID::bpp__Weather__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_GetSkyParamID, bpp__SkyParamID__pf) == 0x000004, "Member 'BP_SkyBase_C_GetSkyParamID::bpp__SkyParamID__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.GetWeatherChangeRate
// 0x0004 (0x0004 - 0x0000)
struct BP_SkyBase_C_GetWeatherChangeRate final
{
public:
	float                                         bpp__WeatherChangeRate__pf;                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SkyBase_C_GetWeatherChangeRate) == 0x000004, "Wrong alignment on BP_SkyBase_C_GetWeatherChangeRate");
static_assert(sizeof(BP_SkyBase_C_GetWeatherChangeRate) == 0x000004, "Wrong size on BP_SkyBase_C_GetWeatherChangeRate");
static_assert(offsetof(BP_SkyBase_C_GetWeatherChangeRate, bpp__WeatherChangeRate__pf) == 0x000000, "Member 'BP_SkyBase_C_GetWeatherChangeRate::bpp__WeatherChangeRate__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_SkyBase_C_ReceiveTick final
{
public:
	float                                         bpp__DeltaSeconds__pf;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SkyBase_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_SkyBase_C_ReceiveTick");
static_assert(sizeof(BP_SkyBase_C_ReceiveTick) == 0x000004, "Wrong size on BP_SkyBase_C_ReceiveTick");
static_assert(offsetof(BP_SkyBase_C_ReceiveTick, bpp__DeltaSeconds__pf) == 0x000000, "Member 'BP_SkyBase_C_ReceiveTick::bpp__DeltaSeconds__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.SetBillboardSkyParts
// 0x0018 (0x0018 - 0x0000)
struct BP_SkyBase_C_SetBillboardSkyParts final
{
public:
	class UMaterialBillboardComponent*            bpp__MaterialBillboard__pf;                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__Rotation__pf;                                 // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         bpp__WorldConvScale__pf;                           // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SkyBase_C_SetBillboardSkyParts) == 0x000008, "Wrong alignment on BP_SkyBase_C_SetBillboardSkyParts");
static_assert(sizeof(BP_SkyBase_C_SetBillboardSkyParts) == 0x000018, "Wrong size on BP_SkyBase_C_SetBillboardSkyParts");
static_assert(offsetof(BP_SkyBase_C_SetBillboardSkyParts, bpp__MaterialBillboard__pf) == 0x000000, "Member 'BP_SkyBase_C_SetBillboardSkyParts::bpp__MaterialBillboard__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_SetBillboardSkyParts, bpp__Rotation__pf) == 0x000008, "Member 'BP_SkyBase_C_SetBillboardSkyParts::bpp__Rotation__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_SetBillboardSkyParts, bpp__WorldConvScale__pf) == 0x000014, "Member 'BP_SkyBase_C_SetBillboardSkyParts::bpp__WorldConvScale__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.SetCloudParam
// 0x0024 (0x0024 - 0x0000)
struct BP_SkyBase_C_SetCloudParam final
{
public:
	struct FLinearColor                           bpp__CloudColor__pf;                               // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__CloudColorShadow__pf;                         // 0x0010(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__CloudyRate__pf;                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SkyBase_C_SetCloudParam) == 0x000004, "Wrong alignment on BP_SkyBase_C_SetCloudParam");
static_assert(sizeof(BP_SkyBase_C_SetCloudParam) == 0x000024, "Wrong size on BP_SkyBase_C_SetCloudParam");
static_assert(offsetof(BP_SkyBase_C_SetCloudParam, bpp__CloudColor__pf) == 0x000000, "Member 'BP_SkyBase_C_SetCloudParam::bpp__CloudColor__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_SetCloudParam, bpp__CloudColorShadow__pf) == 0x000010, "Member 'BP_SkyBase_C_SetCloudParam::bpp__CloudColorShadow__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_SetCloudParam, bpp__CloudyRate__pf) == 0x000020, "Member 'BP_SkyBase_C_SetCloudParam::bpp__CloudyRate__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.SetCloudWeather
// 0x0004 (0x0004 - 0x0000)
struct BP_SkyBase_C_SetCloudWeather final
{
public:
	float                                         bpp__WeatherChangeRate__pf;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SkyBase_C_SetCloudWeather) == 0x000004, "Wrong alignment on BP_SkyBase_C_SetCloudWeather");
static_assert(sizeof(BP_SkyBase_C_SetCloudWeather) == 0x000004, "Wrong size on BP_SkyBase_C_SetCloudWeather");
static_assert(offsetof(BP_SkyBase_C_SetCloudWeather, bpp__WeatherChangeRate__pf) == 0x000000, "Member 'BP_SkyBase_C_SetCloudWeather::bpp__WeatherChangeRate__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.SetFogWeather
// 0x0004 (0x0004 - 0x0000)
struct BP_SkyBase_C_SetFogWeather final
{
public:
	float                                         bpp__WeatherChangeRate__pf;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SkyBase_C_SetFogWeather) == 0x000004, "Wrong alignment on BP_SkyBase_C_SetFogWeather");
static_assert(sizeof(BP_SkyBase_C_SetFogWeather) == 0x000004, "Wrong size on BP_SkyBase_C_SetFogWeather");
static_assert(offsetof(BP_SkyBase_C_SetFogWeather, bpp__WeatherChangeRate__pf) == 0x000000, "Member 'BP_SkyBase_C_SetFogWeather::bpp__WeatherChangeRate__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.SetMoonParam
// 0x0004 (0x0004 - 0x0000)
struct BP_SkyBase_C_SetMoonParam final
{
public:
	float                                         bpp__MoonAlpha__pf;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SkyBase_C_SetMoonParam) == 0x000004, "Wrong alignment on BP_SkyBase_C_SetMoonParam");
static_assert(sizeof(BP_SkyBase_C_SetMoonParam) == 0x000004, "Wrong size on BP_SkyBase_C_SetMoonParam");
static_assert(offsetof(BP_SkyBase_C_SetMoonParam, bpp__MoonAlpha__pf) == 0x000000, "Member 'BP_SkyBase_C_SetMoonParam::bpp__MoonAlpha__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.SetPlaneParam
// 0x0030 (0x0030 - 0x0000)
struct BP_SkyBase_C_SetPlaneParam final
{
public:
	class UMaterialInstanceDynamic*               bpp__MaterialInstanceDynamic__pf;                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__ColorPlaneBright__pf;                         // 0x0008(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__ColorPlaneShadow__pf;                         // 0x0018(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Alpha__pf;                                    // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_SkyBase_C_SetPlaneParam) == 0x000008, "Wrong alignment on BP_SkyBase_C_SetPlaneParam");
static_assert(sizeof(BP_SkyBase_C_SetPlaneParam) == 0x000030, "Wrong size on BP_SkyBase_C_SetPlaneParam");
static_assert(offsetof(BP_SkyBase_C_SetPlaneParam, bpp__MaterialInstanceDynamic__pf) == 0x000000, "Member 'BP_SkyBase_C_SetPlaneParam::bpp__MaterialInstanceDynamic__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_SetPlaneParam, bpp__ColorPlaneBright__pf) == 0x000008, "Member 'BP_SkyBase_C_SetPlaneParam::bpp__ColorPlaneBright__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_SetPlaneParam, bpp__ColorPlaneShadow__pf) == 0x000018, "Member 'BP_SkyBase_C_SetPlaneParam::bpp__ColorPlaneShadow__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_SetPlaneParam, bpp__Alpha__pf) == 0x000028, "Member 'BP_SkyBase_C_SetPlaneParam::bpp__Alpha__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.SetSkyDomeParam
// 0x0048 (0x0048 - 0x0000)
struct BP_SkyBase_C_SetSkyDomeParam final
{
public:
	struct FLinearColor                           bpp__ZenithColor__pf;                              // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__MiddleColor__pf;                              // 0x0010(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__HorizonColor__pf;                             // 0x0020(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__OverallColor__pf;                             // 0x0030(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__HorizonFalloff__pf;                           // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__MiddleFalloff__pf;                            // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SkyBase_C_SetSkyDomeParam) == 0x000004, "Wrong alignment on BP_SkyBase_C_SetSkyDomeParam");
static_assert(sizeof(BP_SkyBase_C_SetSkyDomeParam) == 0x000048, "Wrong size on BP_SkyBase_C_SetSkyDomeParam");
static_assert(offsetof(BP_SkyBase_C_SetSkyDomeParam, bpp__ZenithColor__pf) == 0x000000, "Member 'BP_SkyBase_C_SetSkyDomeParam::bpp__ZenithColor__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_SetSkyDomeParam, bpp__MiddleColor__pf) == 0x000010, "Member 'BP_SkyBase_C_SetSkyDomeParam::bpp__MiddleColor__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_SetSkyDomeParam, bpp__HorizonColor__pf) == 0x000020, "Member 'BP_SkyBase_C_SetSkyDomeParam::bpp__HorizonColor__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_SetSkyDomeParam, bpp__OverallColor__pf) == 0x000030, "Member 'BP_SkyBase_C_SetSkyDomeParam::bpp__OverallColor__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_SetSkyDomeParam, bpp__HorizonFalloff__pf) == 0x000040, "Member 'BP_SkyBase_C_SetSkyDomeParam::bpp__HorizonFalloff__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_SetSkyDomeParam, bpp__MiddleFalloff__pf) == 0x000044, "Member 'BP_SkyBase_C_SetSkyDomeParam::bpp__MiddleFalloff__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.SetSkyWeather
// 0x0002 (0x0002 - 0x0000)
struct BP_SkyBase_C_SetSkyWeather final
{
public:
	EJackWorldWeather                             bpp__NewWeather__pf;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__ForceSet__pf;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SkyBase_C_SetSkyWeather) == 0x000001, "Wrong alignment on BP_SkyBase_C_SetSkyWeather");
static_assert(sizeof(BP_SkyBase_C_SetSkyWeather) == 0x000002, "Wrong size on BP_SkyBase_C_SetSkyWeather");
static_assert(offsetof(BP_SkyBase_C_SetSkyWeather, bpp__NewWeather__pf) == 0x000000, "Member 'BP_SkyBase_C_SetSkyWeather::bpp__NewWeather__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_SetSkyWeather, bpp__ForceSet__pf) == 0x000001, "Member 'BP_SkyBase_C_SetSkyWeather::bpp__ForceSet__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.SetStarParam
// 0x0008 (0x0008 - 0x0000)
struct BP_SkyBase_C_SetStarParam final
{
public:
	float                                         bpp__StarBrightness__pf;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__StarRepeatscale__pf;                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SkyBase_C_SetStarParam) == 0x000004, "Wrong alignment on BP_SkyBase_C_SetStarParam");
static_assert(sizeof(BP_SkyBase_C_SetStarParam) == 0x000008, "Wrong size on BP_SkyBase_C_SetStarParam");
static_assert(offsetof(BP_SkyBase_C_SetStarParam, bpp__StarBrightness__pf) == 0x000000, "Member 'BP_SkyBase_C_SetStarParam::bpp__StarBrightness__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_SetStarParam, bpp__StarRepeatscale__pf) == 0x000004, "Member 'BP_SkyBase_C_SetStarParam::bpp__StarRepeatscale__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.SetSunLightParam
// 0x002C (0x002C - 0x0000)
struct BP_SkyBase_C_SetSunLightParam final
{
public:
	struct FRotator                               bpp__SunLightRotation__pf;                         // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__LightDirection__pf;                           // 0x000C(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__SkygradDirection__pf;                         // 0x001C(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SkyBase_C_SetSunLightParam) == 0x000004, "Wrong alignment on BP_SkyBase_C_SetSunLightParam");
static_assert(sizeof(BP_SkyBase_C_SetSunLightParam) == 0x00002C, "Wrong size on BP_SkyBase_C_SetSunLightParam");
static_assert(offsetof(BP_SkyBase_C_SetSunLightParam, bpp__SunLightRotation__pf) == 0x000000, "Member 'BP_SkyBase_C_SetSunLightParam::bpp__SunLightRotation__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_SetSunLightParam, bpp__LightDirection__pf) == 0x00000C, "Member 'BP_SkyBase_C_SetSunLightParam::bpp__LightDirection__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_SetSunLightParam, bpp__SkygradDirection__pf) == 0x00001C, "Member 'BP_SkyBase_C_SetSunLightParam::bpp__SkygradDirection__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.SetSunParam
// 0x002C (0x002C - 0x0000)
struct BP_SkyBase_C_SetSunParam final
{
public:
	struct FLinearColor                           bpp__SunLightColor__pf;                            // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__SunLightIntensity__pf;                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__SunColor__pf;                                 // 0x0014(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__SunBrightness__pf;                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__SunRadius__pf;                                // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SkyBase_C_SetSunParam) == 0x000004, "Wrong alignment on BP_SkyBase_C_SetSunParam");
static_assert(sizeof(BP_SkyBase_C_SetSunParam) == 0x00002C, "Wrong size on BP_SkyBase_C_SetSunParam");
static_assert(offsetof(BP_SkyBase_C_SetSunParam, bpp__SunLightColor__pf) == 0x000000, "Member 'BP_SkyBase_C_SetSunParam::bpp__SunLightColor__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_SetSunParam, bpp__SunLightIntensity__pf) == 0x000010, "Member 'BP_SkyBase_C_SetSunParam::bpp__SunLightIntensity__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_SetSunParam, bpp__SunColor__pf) == 0x000014, "Member 'BP_SkyBase_C_SetSunParam::bpp__SunColor__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_SetSunParam, bpp__SunBrightness__pf) == 0x000024, "Member 'BP_SkyBase_C_SetSunParam::bpp__SunBrightness__pf' has a wrong offset!");
static_assert(offsetof(BP_SkyBase_C_SetSunParam, bpp__SunRadius__pf) == 0x000028, "Member 'BP_SkyBase_C_SetSunParam::bpp__SunRadius__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.SetThunder
// 0x0001 (0x0001 - 0x0000)
struct BP_SkyBase_C_SetThunder final
{
public:
	EJackWorldWeather                             bpp__NewWeather__pf;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SkyBase_C_SetThunder) == 0x000001, "Wrong alignment on BP_SkyBase_C_SetThunder");
static_assert(sizeof(BP_SkyBase_C_SetThunder) == 0x000001, "Wrong size on BP_SkyBase_C_SetThunder");
static_assert(offsetof(BP_SkyBase_C_SetThunder, bpp__NewWeather__pf) == 0x000000, "Member 'BP_SkyBase_C_SetThunder::bpp__NewWeather__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.StartCutScene
// 0x0008 (0x0008 - 0x0000)
struct BP_SkyBase_C_StartCutScene final
{
public:
	class FName                                   bpp__CSID__pf;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SkyBase_C_StartCutScene) == 0x000004, "Wrong alignment on BP_SkyBase_C_StartCutScene");
static_assert(sizeof(BP_SkyBase_C_StartCutScene) == 0x000008, "Wrong size on BP_SkyBase_C_StartCutScene");
static_assert(offsetof(BP_SkyBase_C_StartCutScene, bpp__CSID__pf) == 0x000000, "Member 'BP_SkyBase_C_StartCutScene::bpp__CSID__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.StartCutsceneBeforeLoad
// 0x0008 (0x0008 - 0x0000)
struct BP_SkyBase_C_StartCutsceneBeforeLoad final
{
public:
	class FName                                   bpp__CSID__pf;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SkyBase_C_StartCutsceneBeforeLoad) == 0x000004, "Wrong alignment on BP_SkyBase_C_StartCutsceneBeforeLoad");
static_assert(sizeof(BP_SkyBase_C_StartCutsceneBeforeLoad) == 0x000008, "Wrong size on BP_SkyBase_C_StartCutsceneBeforeLoad");
static_assert(offsetof(BP_SkyBase_C_StartCutsceneBeforeLoad, bpp__CSID__pf) == 0x000000, "Member 'BP_SkyBase_C_StartCutsceneBeforeLoad::bpp__CSID__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.StartCutSceneCharacterSettingAfter
// 0x0008 (0x0008 - 0x0000)
struct BP_SkyBase_C_StartCutSceneCharacterSettingAfter final
{
public:
	class FName                                   bpp__CSID__pf;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SkyBase_C_StartCutSceneCharacterSettingAfter) == 0x000004, "Wrong alignment on BP_SkyBase_C_StartCutSceneCharacterSettingAfter");
static_assert(sizeof(BP_SkyBase_C_StartCutSceneCharacterSettingAfter) == 0x000008, "Wrong size on BP_SkyBase_C_StartCutSceneCharacterSettingAfter");
static_assert(offsetof(BP_SkyBase_C_StartCutSceneCharacterSettingAfter, bpp__CSID__pf) == 0x000000, "Member 'BP_SkyBase_C_StartCutSceneCharacterSettingAfter::bpp__CSID__pf' has a wrong offset!");

// Function BP_SkyBase.BP_SkyBase_C.StartCutSceneFadeOutAfter
// 0x0008 (0x0008 - 0x0000)
struct BP_SkyBase_C_StartCutSceneFadeOutAfter final
{
public:
	class FName                                   bpp__CSID__pf;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SkyBase_C_StartCutSceneFadeOutAfter) == 0x000004, "Wrong alignment on BP_SkyBase_C_StartCutSceneFadeOutAfter");
static_assert(sizeof(BP_SkyBase_C_StartCutSceneFadeOutAfter) == 0x000008, "Wrong size on BP_SkyBase_C_StartCutSceneFadeOutAfter");
static_assert(offsetof(BP_SkyBase_C_StartCutSceneFadeOutAfter, bpp__CSID__pf) == 0x000000, "Member 'BP_SkyBase_C_StartCutSceneFadeOutAfter::bpp__CSID__pf' has a wrong offset!");

}

