#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FLIB_Debug

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "JackGame_structs.hpp"
#include "ENUM_DebugStringColor_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FLIB_Debug.BP_FLIB_Debug_C
// 0x0000 (0x0038 - 0x0038)
class UBP_FLIB_Debug_C final : public UBlueprintFunctionLibrary
{
public:
	static void Get_Time_String(class UObject* __WorldContext, class FString* TimeString);
	static void Debug_Warp(const struct FVector& WarpLocation, const class FString& DispString, class UObject* __WorldContext);
	static void Debug_Warp_Actor(class AActor* WarpActor, const class FString& DispString, class UObject* __WorldContext);
	static void Debug_Print_String(const class FString& Message, ENUM_DebugStringColor Color, class UObject* __WorldContext);
	static void DebugScenarioFlagOn(const struct FJackLDT_GameFlagDataScenario& FlagName, class UObject* __WorldContext);
	static void DebugCutSceneFlagOn(const struct FJackLDT_GameFlagDataCutScene& FlagName, class UObject* __WorldContext);
	static void DebugConvertViewportPosition(float Position, class UObject* __WorldContext, float* CalcPositionX, float* CalcPositionY);
	static void DebugSetCoordinateToClass(class UObject* __WorldContext);
	static void DebugFullReload(const struct FJackLDT_MapStart& MapStart, class UObject* __WorldContext);
	static void SetBpWarning(const class FString& String, class UObject* __WorldContext);
	static void DebugFriendAllJoin(class UObject* __WorldContext);
	static void DebugCampSetNo(int32 No, class UObject* __WorldContext);
	static void GetDebugFontSize(class UObject* __WorldContext, float* DebugFontSize, float* CharSizeHalfWidthX, float* CharSizeFullWidthX, float* CharSizeY);
	static void CollisionChecker(const class FString& LevelName, bool ChangeVisible, bool OutputStaticMeshActorList, class UObject* __WorldContext, TArray<class FString>* IllegalCollisionLog, TArray<class FString>* CustomNoCollisionLog, TMap<class AActor*, class FString>* IllegalCollisionActor, TMap<class AActor*, class FString>* WarningCollisionActor);
	static void MakeIllegalCollisionLog(const class FString& LevelName, class AActor* Actor, class FName CollisionPreset, class UObject* __WorldContext, class FString* LogString);
	static void CollisionCheckCore(const class FString& LevelName, class AActor* Actor, class FName CollisionProfileName, ECollisionEnabled CollisionEnabled, TArray<class FName>& IgnoreCollisionPreset, TMap<class AActor*, class FString>& RefIllegalColision, TMap<class AActor*, class FString>& RefCustomNoColision, TArray<class FString>& RefIllegalCollisionLog, TArray<class FString>& RefCustomNoCollisionLog, bool OutputActorList, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FLIB_Debug_C">();
	}
	static class UBP_FLIB_Debug_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_FLIB_Debug_C>();
	}
};
static_assert(alignof(UBP_FLIB_Debug_C) == 0x000008, "Wrong alignment on UBP_FLIB_Debug_C");
static_assert(sizeof(UBP_FLIB_Debug_C) == 0x000038, "Wrong size on UBP_FLIB_Debug_C");

}

