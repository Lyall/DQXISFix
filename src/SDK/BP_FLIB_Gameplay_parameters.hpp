#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FLIB_Gameplay

#include "Basic.hpp"

#include "JackGame_structs.hpp"
#include "Engine_structs.hpp"
#include "ENUM_MedalExchangeFirstContact_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Player Input Disabled
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Gameplay_C_Player_Input_Disabled final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackPlayerController*                  CallFunc_GetJackPlayerController_ReturnValue;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Player_Input_Disabled) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Player_Input_Disabled");
static_assert(sizeof(BP_FLIB_Gameplay_C_Player_Input_Disabled) == 0x000018, "Wrong size on BP_FLIB_Gameplay_C_Player_Input_Disabled");
static_assert(offsetof(BP_FLIB_Gameplay_C_Player_Input_Disabled, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Player_Input_Disabled::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Player_Input_Disabled, CallFunc_GetJackPlayerController_ReturnValue) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Player_Input_Disabled::CallFunc_GetJackPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Player_Input_Disabled, CallFunc_GetJackPlayerCharacter_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_Player_Input_Disabled::CallFunc_GetJackPlayerCharacter_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Player Input Enabled
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Gameplay_C_Player_Input_Enabled final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackPlayerController*                  CallFunc_GetJackPlayerController_ReturnValue;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Player_Input_Enabled) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Player_Input_Enabled");
static_assert(sizeof(BP_FLIB_Gameplay_C_Player_Input_Enabled) == 0x000018, "Wrong size on BP_FLIB_Gameplay_C_Player_Input_Enabled");
static_assert(offsetof(BP_FLIB_Gameplay_C_Player_Input_Enabled, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Player_Input_Enabled::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Player_Input_Enabled, CallFunc_GetJackPlayerCharacter_ReturnValue) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Player_Input_Enabled::CallFunc_GetJackPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Player_Input_Enabled, CallFunc_GetJackPlayerController_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_Player_Input_Enabled::CallFunc_GetJackPlayerController_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Character Movement Enabled
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Gameplay_C_Character_Movement_Enabled final
{
public:
	class AJackCharacter*                         JackCharacter;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Character_Movement_Enabled) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Character_Movement_Enabled");
static_assert(sizeof(BP_FLIB_Gameplay_C_Character_Movement_Enabled) == 0x000010, "Wrong size on BP_FLIB_Gameplay_C_Character_Movement_Enabled");
static_assert(offsetof(BP_FLIB_Gameplay_C_Character_Movement_Enabled, JackCharacter) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Character_Movement_Enabled::JackCharacter' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Character_Movement_Enabled, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Character_Movement_Enabled::__WorldContext' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Character Movement Disabled
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Gameplay_C_Character_Movement_Disabled final
{
public:
	class AJackCharacter*                         JackCharacter;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Character_Movement_Disabled) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Character_Movement_Disabled");
static_assert(sizeof(BP_FLIB_Gameplay_C_Character_Movement_Disabled) == 0x000010, "Wrong size on BP_FLIB_Gameplay_C_Character_Movement_Disabled");
static_assert(offsetof(BP_FLIB_Gameplay_C_Character_Movement_Disabled, JackCharacter) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Character_Movement_Disabled::JackCharacter' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Character_Movement_Disabled, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Character_Movement_Disabled::__WorldContext' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Player Camera Reset
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Gameplay_C_Player_Camera_Reset final
{
public:
	float                                         Interp_Second;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackPlayerController*                  CallFunc_GetJackPlayerController_ReturnValue;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Player_Camera_Reset) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Player_Camera_Reset");
static_assert(sizeof(BP_FLIB_Gameplay_C_Player_Camera_Reset) == 0x000018, "Wrong size on BP_FLIB_Gameplay_C_Player_Camera_Reset");
static_assert(offsetof(BP_FLIB_Gameplay_C_Player_Camera_Reset, Interp_Second) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Player_Camera_Reset::Interp_Second' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Player_Camera_Reset, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Player_Camera_Reset::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Player_Camera_Reset, CallFunc_GetJackPlayerController_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_Player_Camera_Reset::CallFunc_GetJackPlayerController_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Talk Camera Enabled
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Gameplay_C_Talk_Camera_Enabled final
{
public:
	class AJackCharacter*                         TalkCharacter;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LocationUpdate;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackPlayerController*                  CallFunc_GetJackPlayerController_ReturnValue;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Talk_Camera_Enabled) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Talk_Camera_Enabled");
static_assert(sizeof(BP_FLIB_Gameplay_C_Talk_Camera_Enabled) == 0x000020, "Wrong size on BP_FLIB_Gameplay_C_Talk_Camera_Enabled");
static_assert(offsetof(BP_FLIB_Gameplay_C_Talk_Camera_Enabled, TalkCharacter) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Talk_Camera_Enabled::TalkCharacter' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Talk_Camera_Enabled, LocationUpdate) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Talk_Camera_Enabled::LocationUpdate' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Talk_Camera_Enabled, __WorldContext) == 0x000010, "Member 'BP_FLIB_Gameplay_C_Talk_Camera_Enabled::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Talk_Camera_Enabled, CallFunc_GetJackPlayerController_ReturnValue) == 0x000018, "Member 'BP_FLIB_Gameplay_C_Talk_Camera_Enabled::CallFunc_GetJackPlayerController_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Talk Camera Disabled
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Gameplay_C_Talk_Camera_Disabled final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackPlayerController*                  CallFunc_GetJackPlayerController_ReturnValue;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Talk_Camera_Disabled) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Talk_Camera_Disabled");
static_assert(sizeof(BP_FLIB_Gameplay_C_Talk_Camera_Disabled) == 0x000010, "Wrong size on BP_FLIB_Gameplay_C_Talk_Camera_Disabled");
static_assert(offsetof(BP_FLIB_Gameplay_C_Talk_Camera_Disabled, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Talk_Camera_Disabled::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Talk_Camera_Disabled, CallFunc_GetJackPlayerController_ReturnValue) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Talk_Camera_Disabled::CallFunc_GetJackPlayerController_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Player Movement Enabled
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Gameplay_C_Player_Movement_Enabled final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Player_Movement_Enabled) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Player_Movement_Enabled");
static_assert(sizeof(BP_FLIB_Gameplay_C_Player_Movement_Enabled) == 0x000010, "Wrong size on BP_FLIB_Gameplay_C_Player_Movement_Enabled");
static_assert(offsetof(BP_FLIB_Gameplay_C_Player_Movement_Enabled, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Player_Movement_Enabled::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Player_Movement_Enabled, CallFunc_GetJackPlayerCharacter_ReturnValue) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Player_Movement_Enabled::CallFunc_GetJackPlayerCharacter_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Player Movement Disabled
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Gameplay_C_Player_Movement_Disabled final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Player_Movement_Disabled) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Player_Movement_Disabled");
static_assert(sizeof(BP_FLIB_Gameplay_C_Player_Movement_Disabled) == 0x000010, "Wrong size on BP_FLIB_Gameplay_C_Player_Movement_Disabled");
static_assert(offsetof(BP_FLIB_Gameplay_C_Player_Movement_Disabled, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Player_Movement_Disabled::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Player_Movement_Disabled, CallFunc_GetJackPlayerCharacter_ReturnValue) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Player_Movement_Disabled::CallFunc_GetJackPlayerCharacter_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Set Hidden All Characters
// 0x0078 (0x0078 - 0x0000)
struct BP_FLIB_Gameplay_C_Set_Hidden_All_Characters final
{
public:
	EJackCharacterHiddenPurpose                   Purpose;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewHidden;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PlayerPause;                                       // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnoreSymbolMonster;                               // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AJackCharacter*>                 TmpJackCharacters;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AJackBattleManager*                     CallFunc_GetBattleManager_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInBattle_ReturnValue;                   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AJackCharacter*>                 CallFunc_GetCharacters_ReturnValue;                // 0x0038(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackCharacter*                         CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActorControlledByPlayer_ReturnValue;    // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F[0x1];                                       // 0x005F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AJackMonsterCharacter*                  K2Node_DynamicCast_AsJack_Monster_Character;       // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Set_Hidden_All_Characters) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Set_Hidden_All_Characters");
static_assert(sizeof(BP_FLIB_Gameplay_C_Set_Hidden_All_Characters) == 0x000078, "Wrong size on BP_FLIB_Gameplay_C_Set_Hidden_All_Characters");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_All_Characters, Purpose) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_All_Characters::Purpose' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_All_Characters, NewHidden) == 0x000001, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_All_Characters::NewHidden' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_All_Characters, PlayerPause) == 0x000002, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_All_Characters::PlayerPause' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_All_Characters, IgnoreSymbolMonster) == 0x000003, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_All_Characters::IgnoreSymbolMonster' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_All_Characters, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_All_Characters::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_All_Characters, TmpJackCharacters) == 0x000010, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_All_Characters::TmpJackCharacters' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_All_Characters, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_All_Characters::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_All_Characters, CallFunc_GetBattleManager_ReturnValue) == 0x000028, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_All_Characters::CallFunc_GetBattleManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_All_Characters, CallFunc_IsInBattle_ReturnValue) == 0x000030, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_All_Characters::CallFunc_IsInBattle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_All_Characters, CallFunc_GetCharacters_ReturnValue) == 0x000038, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_All_Characters::CallFunc_GetCharacters_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_All_Characters, CallFunc_Not_PreBool_ReturnValue) == 0x000048, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_All_Characters::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_All_Characters, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_All_Characters::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_All_Characters, CallFunc_Array_Get_Item) == 0x000050, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_All_Characters::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_All_Characters, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_All_Characters::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_All_Characters, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_All_Characters::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_All_Characters, CallFunc_IsActorControlledByPlayer_ReturnValue) == 0x00005D, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_All_Characters::CallFunc_IsActorControlledByPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_All_Characters, CallFunc_BooleanAND_ReturnValue) == 0x00005E, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_All_Characters::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_All_Characters, K2Node_DynamicCast_AsJack_Monster_Character) == 0x000060, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_All_Characters::K2Node_DynamicCast_AsJack_Monster_Character' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_All_Characters, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_All_Characters::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_All_Characters, CallFunc_Add_IntInt_ReturnValue) == 0x00006C, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_All_Characters::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_All_Characters, CallFunc_BooleanAND_ReturnValue2) == 0x000070, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_All_Characters::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.AddInteractiveActorComponent
// 0x0068 (0x0068 - 0x0000)
struct BP_FLIB_Gameplay_C_AddInteractiveActorComponent final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackInteractiveActorComponent*         InComponent;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UJackInteractorComponent*>       TmpJackInteractorComponent;                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UJackInteractorComponent*>       CallFunc_GetComponentsByClass_ReturnValue;         // 0x0030(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackInteractorComponent*               CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_AddInteractiveActorComponent) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_AddInteractiveActorComponent");
static_assert(sizeof(BP_FLIB_Gameplay_C_AddInteractiveActorComponent) == 0x000068, "Wrong size on BP_FLIB_Gameplay_C_AddInteractiveActorComponent");
static_assert(offsetof(BP_FLIB_Gameplay_C_AddInteractiveActorComponent, InActor) == 0x000000, "Member 'BP_FLIB_Gameplay_C_AddInteractiveActorComponent::InActor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AddInteractiveActorComponent, InComponent) == 0x000008, "Member 'BP_FLIB_Gameplay_C_AddInteractiveActorComponent::InComponent' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AddInteractiveActorComponent, __WorldContext) == 0x000010, "Member 'BP_FLIB_Gameplay_C_AddInteractiveActorComponent::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AddInteractiveActorComponent, TmpJackInteractorComponent) == 0x000018, "Member 'BP_FLIB_Gameplay_C_AddInteractiveActorComponent::TmpJackInteractorComponent' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AddInteractiveActorComponent, CallFunc_GetOwner_ReturnValue) == 0x000028, "Member 'BP_FLIB_Gameplay_C_AddInteractiveActorComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AddInteractiveActorComponent, CallFunc_GetComponentsByClass_ReturnValue) == 0x000030, "Member 'BP_FLIB_Gameplay_C_AddInteractiveActorComponent::CallFunc_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AddInteractiveActorComponent, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000040, "Member 'BP_FLIB_Gameplay_C_AddInteractiveActorComponent::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AddInteractiveActorComponent, Temp_bool_True_if_break_was_hit_Variable) == 0x000041, "Member 'BP_FLIB_Gameplay_C_AddInteractiveActorComponent::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AddInteractiveActorComponent, Temp_int_Array_Index_Variable) == 0x000044, "Member 'BP_FLIB_Gameplay_C_AddInteractiveActorComponent::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AddInteractiveActorComponent, CallFunc_Not_PreBool_ReturnValue) == 0x000048, "Member 'BP_FLIB_Gameplay_C_AddInteractiveActorComponent::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AddInteractiveActorComponent, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'BP_FLIB_Gameplay_C_AddInteractiveActorComponent::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AddInteractiveActorComponent, CallFunc_Array_Get_Item) == 0x000050, "Member 'BP_FLIB_Gameplay_C_AddInteractiveActorComponent::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AddInteractiveActorComponent, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'BP_FLIB_Gameplay_C_AddInteractiveActorComponent::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AddInteractiveActorComponent, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'BP_FLIB_Gameplay_C_AddInteractiveActorComponent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AddInteractiveActorComponent, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'BP_FLIB_Gameplay_C_AddInteractiveActorComponent::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AddInteractiveActorComponent, CallFunc_BooleanAND_ReturnValue) == 0x000061, "Member 'BP_FLIB_Gameplay_C_AddInteractiveActorComponent::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.RemoveInteractiveActorComponent
// 0x0060 (0x0060 - 0x0000)
struct BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackInteractiveActorComponent*         InComponent;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UJackInteractorComponent*>       TmpJackInteractorComponent;                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UJackInteractorComponent*>       CallFunc_GetComponentsByClass_ReturnValue;         // 0x0028(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackInteractorComponent*               CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent");
static_assert(sizeof(BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent) == 0x000060, "Wrong size on BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent, InActor) == 0x000000, "Member 'BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent::InActor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent, InComponent) == 0x000008, "Member 'BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent::InComponent' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent, __WorldContext) == 0x000010, "Member 'BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent, TmpJackInteractorComponent) == 0x000018, "Member 'BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent::TmpJackInteractorComponent' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent, CallFunc_GetComponentsByClass_ReturnValue) == 0x000028, "Member 'BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent::CallFunc_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent, Temp_bool_True_if_break_was_hit_Variable) == 0x000038, "Member 'BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent, CallFunc_Not_PreBool_ReturnValue) == 0x000039, "Member 'BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent, CallFunc_Array_Get_Item) == 0x000050, "Member 'BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent, CallFunc_Less_IntInt_ReturnValue) == 0x000058, "Member 'BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent, CallFunc_BooleanAND_ReturnValue) == 0x000059, "Member 'BP_FLIB_Gameplay_C_RemoveInteractiveActorComponent::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Get Time Color
// 0x0040 (0x0040 - 0x0000)
struct BP_FLIB_Gameplay_C_Get_Time_Color final
{
public:
	TArray<struct FLinearColor>                   ColorTable;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	int32                                         Time;                                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0020(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetTimeColorNative_ReturnValue;           // 0x0030(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Get_Time_Color) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Get_Time_Color");
static_assert(sizeof(BP_FLIB_Gameplay_C_Get_Time_Color) == 0x000040, "Wrong size on BP_FLIB_Gameplay_C_Get_Time_Color");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Color, ColorTable) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Get_Time_Color::ColorTable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Color, Time) == 0x000010, "Member 'BP_FLIB_Gameplay_C_Get_Time_Color::Time' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Color, __WorldContext) == 0x000018, "Member 'BP_FLIB_Gameplay_C_Get_Time_Color::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Color, Color) == 0x000020, "Member 'BP_FLIB_Gameplay_C_Get_Time_Color::Color' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Color, CallFunc_GetTimeColorNative_ReturnValue) == 0x000030, "Member 'BP_FLIB_Gameplay_C_Get_Time_Color::CallFunc_GetTimeColorNative_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Get Time Float
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_Gameplay_C_Get_Time_Float final
{
public:
	TArray<float>                                 FloatTable;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	int32                                         Time;                                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Float;                                             // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeFloatNative_ReturnValue;           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Get_Time_Float) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Get_Time_Float");
static_assert(sizeof(BP_FLIB_Gameplay_C_Get_Time_Float) == 0x000028, "Wrong size on BP_FLIB_Gameplay_C_Get_Time_Float");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Float, FloatTable) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Get_Time_Float::FloatTable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Float, Time) == 0x000010, "Member 'BP_FLIB_Gameplay_C_Get_Time_Float::Time' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Float, __WorldContext) == 0x000018, "Member 'BP_FLIB_Gameplay_C_Get_Time_Float::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Float, Float) == 0x000020, "Member 'BP_FLIB_Gameplay_C_Get_Time_Float::Float' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Float, CallFunc_GetTimeFloatNative_ReturnValue) == 0x000024, "Member 'BP_FLIB_Gameplay_C_Get_Time_Float::CallFunc_GetTimeFloatNative_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Set Player Camera Rotation
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_Gameplay_C_Set_Player_Camera_Rotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         Length;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterpSeconds;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRelativeRotation;                                 // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AJackPlayerController*                  CallFunc_GetJackPlayerController_ReturnValue;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Set_Player_Camera_Rotation) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Set_Player_Camera_Rotation");
static_assert(sizeof(BP_FLIB_Gameplay_C_Set_Player_Camera_Rotation) == 0x000030, "Wrong size on BP_FLIB_Gameplay_C_Set_Player_Camera_Rotation");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Player_Camera_Rotation, Rotation) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Set_Player_Camera_Rotation::Rotation' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Player_Camera_Rotation, Length) == 0x00000C, "Member 'BP_FLIB_Gameplay_C_Set_Player_Camera_Rotation::Length' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Player_Camera_Rotation, InterpSeconds) == 0x000010, "Member 'BP_FLIB_Gameplay_C_Set_Player_Camera_Rotation::InterpSeconds' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Player_Camera_Rotation, bRelativeRotation) == 0x000014, "Member 'BP_FLIB_Gameplay_C_Set_Player_Camera_Rotation::bRelativeRotation' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Player_Camera_Rotation, __WorldContext) == 0x000018, "Member 'BP_FLIB_Gameplay_C_Set_Player_Camera_Rotation::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Player_Camera_Rotation, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_FLIB_Gameplay_C_Set_Player_Camera_Rotation::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Player_Camera_Rotation, CallFunc_GetJackPlayerController_ReturnValue) == 0x000028, "Member 'BP_FLIB_Gameplay_C_Set_Player_Camera_Rotation::CallFunc_GetJackPlayerController_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Set Player Camera Target Rotation
// 0x0070 (0x0070 - 0x0000)
struct BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Length;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterpSeconds;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               OffsetRotator;                                     // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0028(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue;       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue2;         // 0x0040(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x004C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0058(0x000C)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0064(0x000C)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation");
static_assert(sizeof(BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation) == 0x000070, "Wrong size on BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation, Target) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation::Target' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation, Length) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation::Length' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation, InterpSeconds) == 0x00000C, "Member 'BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation::InterpSeconds' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation, OffsetRotator) == 0x000010, "Member 'BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation::OffsetRotator' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation, __WorldContext) == 0x000020, "Member 'BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000028, "Member 'BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation, CallFunc_GetJackPlayerCharacter_ReturnValue) == 0x000038, "Member 'BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation::CallFunc_GetJackPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation, CallFunc_K2_GetActorLocation_ReturnValue2) == 0x000040, "Member 'BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation::CallFunc_K2_GetActorLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00004C, "Member 'BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000058, "Member 'BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation, CallFunc_ComposeRotators_ReturnValue) == 0x000064, "Member 'BP_FLIB_Gameplay_C_Set_Player_Camera_Target_Rotation::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Player Teleport And Camera Reset
// 0x0090 (0x0090 - 0x0000)
struct BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CameraRotation;                                    // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         CameraInterpSeconds;                               // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CameraRelativeRotation;                            // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue;       // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0068(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0074(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0080(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_TeleportTo_ReturnValue;                // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset) == 0x000010, "Wrong alignment on BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset");
static_assert(sizeof(BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset) == 0x000090, "Wrong size on BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset");
static_assert(offsetof(BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset, Actor) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset::Actor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset, CameraRotation) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset::CameraRotation' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset, CameraInterpSeconds) == 0x000014, "Member 'BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset::CameraInterpSeconds' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset, CameraRelativeRotation) == 0x000018, "Member 'BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset::CameraRelativeRotation' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset, __WorldContext) == 0x000020, "Member 'BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset, CallFunc_GetTransform_ReturnValue) == 0x000030, "Member 'BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset, CallFunc_GetJackPlayerCharacter_ReturnValue) == 0x000060, "Member 'BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset::CallFunc_GetJackPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset, CallFunc_BreakTransform_Location) == 0x000068, "Member 'BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset, CallFunc_BreakTransform_Rotation) == 0x000074, "Member 'BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset, CallFunc_BreakTransform_Scale) == 0x000080, "Member 'BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset, CallFunc_K2_TeleportTo_ReturnValue) == 0x00008C, "Member 'BP_FLIB_Gameplay_C_Player_Teleport_And_Camera_Reset::CallFunc_K2_TeleportTo_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Set Player Condition Riding On Horse
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Gameplay_C_Set_Player_Condition_Riding_On_Horse final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackGamePlayer*                        CallFunc_GetJackGamePlayer_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Set_Player_Condition_Riding_On_Horse) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Set_Player_Condition_Riding_On_Horse");
static_assert(sizeof(BP_FLIB_Gameplay_C_Set_Player_Condition_Riding_On_Horse) == 0x000010, "Wrong size on BP_FLIB_Gameplay_C_Set_Player_Condition_Riding_On_Horse");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Player_Condition_Riding_On_Horse, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Set_Player_Condition_Riding_On_Horse::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Player_Condition_Riding_On_Horse, CallFunc_GetJackGamePlayer_ReturnValue) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Set_Player_Condition_Riding_On_Horse::CallFunc_GetJackGamePlayer_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.On Begin Gimmick
// 0x0058 (0x0058 - 0x0000)
struct BP_FLIB_Gameplay_C_On_Begin_Gimmick final
{
public:
	class AJackCharacter*                         JackCharacter;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIgnoreLookAt;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIgnoreFootIK;                                     // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIgnoreFieldActionControl;                         // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bGuestNPCHiddenControl;                            // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UJackFootIKComponent*>           TmpJackFootIKComponent;                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UJackFootIKComponent*>           CallFunc_GetComponentsByClass_ReturnValue;         // 0x0028(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackFootIKComponent*                   CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_On_Begin_Gimmick) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_On_Begin_Gimmick");
static_assert(sizeof(BP_FLIB_Gameplay_C_On_Begin_Gimmick) == 0x000058, "Wrong size on BP_FLIB_Gameplay_C_On_Begin_Gimmick");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_Begin_Gimmick, JackCharacter) == 0x000000, "Member 'BP_FLIB_Gameplay_C_On_Begin_Gimmick::JackCharacter' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_Begin_Gimmick, bIgnoreLookAt) == 0x000008, "Member 'BP_FLIB_Gameplay_C_On_Begin_Gimmick::bIgnoreLookAt' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_Begin_Gimmick, bIgnoreFootIK) == 0x000009, "Member 'BP_FLIB_Gameplay_C_On_Begin_Gimmick::bIgnoreFootIK' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_Begin_Gimmick, bIgnoreFieldActionControl) == 0x00000A, "Member 'BP_FLIB_Gameplay_C_On_Begin_Gimmick::bIgnoreFieldActionControl' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_Begin_Gimmick, bGuestNPCHiddenControl) == 0x00000B, "Member 'BP_FLIB_Gameplay_C_On_Begin_Gimmick::bGuestNPCHiddenControl' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_Begin_Gimmick, __WorldContext) == 0x000010, "Member 'BP_FLIB_Gameplay_C_On_Begin_Gimmick::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_Begin_Gimmick, TmpJackFootIKComponent) == 0x000018, "Member 'BP_FLIB_Gameplay_C_On_Begin_Gimmick::TmpJackFootIKComponent' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_Begin_Gimmick, CallFunc_GetComponentsByClass_ReturnValue) == 0x000028, "Member 'BP_FLIB_Gameplay_C_On_Begin_Gimmick::CallFunc_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_Begin_Gimmick, Temp_int_Array_Index_Variable) == 0x000038, "Member 'BP_FLIB_Gameplay_C_On_Begin_Gimmick::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_Begin_Gimmick, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'BP_FLIB_Gameplay_C_On_Begin_Gimmick::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_Begin_Gimmick, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'BP_FLIB_Gameplay_C_On_Begin_Gimmick::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_Begin_Gimmick, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_FLIB_Gameplay_C_On_Begin_Gimmick::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_Begin_Gimmick, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_FLIB_Gameplay_C_On_Begin_Gimmick::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_Begin_Gimmick, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'BP_FLIB_Gameplay_C_On_Begin_Gimmick::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.On End Gimmick
// 0x0058 (0x0058 - 0x0000)
struct BP_FLIB_Gameplay_C_On_End_Gimmick final
{
public:
	class AJackCharacter*                         JackCharacter;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIgnoreLookAt;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIgnoreFootIK;                                     // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIgnoreFieldActionControl;                         // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bGuestNPCHiddenControl;                            // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UJackFootIKComponent*>           TmpJackFootIKComponent;                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UJackFootIKComponent*>           CallFunc_GetComponentsByClass_ReturnValue;         // 0x0028(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackFootIKComponent*                   CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_On_End_Gimmick) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_On_End_Gimmick");
static_assert(sizeof(BP_FLIB_Gameplay_C_On_End_Gimmick) == 0x000058, "Wrong size on BP_FLIB_Gameplay_C_On_End_Gimmick");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_End_Gimmick, JackCharacter) == 0x000000, "Member 'BP_FLIB_Gameplay_C_On_End_Gimmick::JackCharacter' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_End_Gimmick, bIgnoreLookAt) == 0x000008, "Member 'BP_FLIB_Gameplay_C_On_End_Gimmick::bIgnoreLookAt' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_End_Gimmick, bIgnoreFootIK) == 0x000009, "Member 'BP_FLIB_Gameplay_C_On_End_Gimmick::bIgnoreFootIK' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_End_Gimmick, bIgnoreFieldActionControl) == 0x00000A, "Member 'BP_FLIB_Gameplay_C_On_End_Gimmick::bIgnoreFieldActionControl' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_End_Gimmick, bGuestNPCHiddenControl) == 0x00000B, "Member 'BP_FLIB_Gameplay_C_On_End_Gimmick::bGuestNPCHiddenControl' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_End_Gimmick, __WorldContext) == 0x000010, "Member 'BP_FLIB_Gameplay_C_On_End_Gimmick::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_End_Gimmick, TmpJackFootIKComponent) == 0x000018, "Member 'BP_FLIB_Gameplay_C_On_End_Gimmick::TmpJackFootIKComponent' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_End_Gimmick, CallFunc_GetComponentsByClass_ReturnValue) == 0x000028, "Member 'BP_FLIB_Gameplay_C_On_End_Gimmick::CallFunc_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_End_Gimmick, Temp_int_Array_Index_Variable) == 0x000038, "Member 'BP_FLIB_Gameplay_C_On_End_Gimmick::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_End_Gimmick, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'BP_FLIB_Gameplay_C_On_End_Gimmick::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_End_Gimmick, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'BP_FLIB_Gameplay_C_On_End_Gimmick::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_End_Gimmick, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_FLIB_Gameplay_C_On_End_Gimmick::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_End_Gimmick, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_FLIB_Gameplay_C_On_End_Gimmick::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_On_End_Gimmick, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'BP_FLIB_Gameplay_C_On_End_Gimmick::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.StartEventPlayerSetting
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_Gameplay_C_StartEventPlayerSetting final
{
public:
	bool                                          EventWrapper;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidUMGManager_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanPossessPlayerControl_ReturnValue;      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackGamePlayerConditionControlPurpose        Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackGamePlayerConditionControlPurpose        Temp_byte_Variable2;                               // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EJackGamePlayerConditionControlPurpose        K2Node_Select_Default;                             // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_StartEventPlayerSetting) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_StartEventPlayerSetting");
static_assert(sizeof(BP_FLIB_Gameplay_C_StartEventPlayerSetting) == 0x000028, "Wrong size on BP_FLIB_Gameplay_C_StartEventPlayerSetting");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartEventPlayerSetting, EventWrapper) == 0x000000, "Member 'BP_FLIB_Gameplay_C_StartEventPlayerSetting::EventWrapper' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartEventPlayerSetting, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_StartEventPlayerSetting::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartEventPlayerSetting, CallFunc_IsValidUMGManager_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_StartEventPlayerSetting::CallFunc_IsValidUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartEventPlayerSetting, CallFunc_CanPossessPlayerControl_ReturnValue) == 0x000011, "Member 'BP_FLIB_Gameplay_C_StartEventPlayerSetting::CallFunc_CanPossessPlayerControl_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartEventPlayerSetting, CallFunc_GetUMGManager_ReturnValue) == 0x000018, "Member 'BP_FLIB_Gameplay_C_StartEventPlayerSetting::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartEventPlayerSetting, Temp_byte_Variable) == 0x000020, "Member 'BP_FLIB_Gameplay_C_StartEventPlayerSetting::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartEventPlayerSetting, Temp_byte_Variable2) == 0x000021, "Member 'BP_FLIB_Gameplay_C_StartEventPlayerSetting::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartEventPlayerSetting, Temp_bool_Variable) == 0x000022, "Member 'BP_FLIB_Gameplay_C_StartEventPlayerSetting::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartEventPlayerSetting, K2Node_Select_Default) == 0x000023, "Member 'BP_FLIB_Gameplay_C_StartEventPlayerSetting::K2Node_Select_Default' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.EndEventPlayerSetting
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Gameplay_C_EndEventPlayerSetting final
{
public:
	bool                                          EventWrapper;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_EndEventPlayerSetting) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_EndEventPlayerSetting");
static_assert(sizeof(BP_FLIB_Gameplay_C_EndEventPlayerSetting) == 0x000010, "Wrong size on BP_FLIB_Gameplay_C_EndEventPlayerSetting");
static_assert(offsetof(BP_FLIB_Gameplay_C_EndEventPlayerSetting, EventWrapper) == 0x000000, "Member 'BP_FLIB_Gameplay_C_EndEventPlayerSetting::EventWrapper' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_EndEventPlayerSetting, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_EndEventPlayerSetting::__WorldContext' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Character Teleport
// 0x0038 (0x0038 - 0x0000)
struct BP_FLIB_Gameplay_C_Character_Teleport final
{
public:
	class AJackCharacter*                         Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0024(0x000C)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_TeleportTo_ReturnValue;                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Character_Teleport) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Character_Teleport");
static_assert(sizeof(BP_FLIB_Gameplay_C_Character_Teleport) == 0x000038, "Wrong size on BP_FLIB_Gameplay_C_Character_Teleport");
static_assert(offsetof(BP_FLIB_Gameplay_C_Character_Teleport, Target) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Character_Teleport::Target' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Character_Teleport, Actor) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Character_Teleport::Actor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Character_Teleport, __WorldContext) == 0x000010, "Member 'BP_FLIB_Gameplay_C_Character_Teleport::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Character_Teleport, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_FLIB_Gameplay_C_Character_Teleport::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Character_Teleport, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000024, "Member 'BP_FLIB_Gameplay_C_Character_Teleport::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Character_Teleport, CallFunc_K2_TeleportTo_ReturnValue) == 0x000030, "Member 'BP_FLIB_Gameplay_C_Character_Teleport::CallFunc_K2_TeleportTo_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.StartMessagePlayerSettings
// 0x0008 (0x0008 - 0x0000)
struct BP_FLIB_Gameplay_C_StartMessagePlayerSettings final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_StartMessagePlayerSettings) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_StartMessagePlayerSettings");
static_assert(sizeof(BP_FLIB_Gameplay_C_StartMessagePlayerSettings) == 0x000008, "Wrong size on BP_FLIB_Gameplay_C_StartMessagePlayerSettings");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartMessagePlayerSettings, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_StartMessagePlayerSettings::__WorldContext' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.EndMessagePlayerSettings
// 0x0008 (0x0008 - 0x0000)
struct BP_FLIB_Gameplay_C_EndMessagePlayerSettings final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_EndMessagePlayerSettings) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_EndMessagePlayerSettings");
static_assert(sizeof(BP_FLIB_Gameplay_C_EndMessagePlayerSettings) == 0x000008, "Wrong size on BP_FLIB_Gameplay_C_EndMessagePlayerSettings");
static_assert(offsetof(BP_FLIB_Gameplay_C_EndMessagePlayerSettings, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_EndMessagePlayerSettings::__WorldContext' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.SetCharacterMaxSpeedType
// 0x0058 (0x0058 - 0x0000)
struct BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacterMovementMaxSpeed                MaxSpeedType;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UJackCharacterMovementComponent*> TmpMoveComponents;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UJackCharacterMovementComponent*> CallFunc_GetComponentsByClass_ReturnValue;         // 0x0028(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackCharacterMovementComponent*        CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType");
static_assert(sizeof(BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType) == 0x000058, "Wrong size on BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType, Actor) == 0x000000, "Member 'BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType::Actor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType, MaxSpeedType) == 0x000008, "Member 'BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType::MaxSpeedType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType, __WorldContext) == 0x000010, "Member 'BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType, TmpMoveComponents) == 0x000018, "Member 'BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType::TmpMoveComponents' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType, CallFunc_GetComponentsByClass_ReturnValue) == 0x000028, "Member 'BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType::CallFunc_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType, Temp_int_Array_Index_Variable) == 0x000038, "Member 'BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'BP_FLIB_Gameplay_C_SetCharacterMaxSpeedType::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Attach Prop To Player
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Gameplay_C_Attach_Prop_To_Player final
{
public:
	class FName                                   PropName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Attach_Prop_To_Player) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Attach_Prop_To_Player");
static_assert(sizeof(BP_FLIB_Gameplay_C_Attach_Prop_To_Player) == 0x000018, "Wrong size on BP_FLIB_Gameplay_C_Attach_Prop_To_Player");
static_assert(offsetof(BP_FLIB_Gameplay_C_Attach_Prop_To_Player, PropName) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Attach_Prop_To_Player::PropName' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Attach_Prop_To_Player, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Attach_Prop_To_Player::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Attach_Prop_To_Player, CallFunc_GetJackPlayerCharacter_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_Attach_Prop_To_Player::CallFunc_GetJackPlayerCharacter_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Detach Prop From Player
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Gameplay_C_Detach_Prop_From_Player final
{
public:
	class FName                                   PropName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Detach_Prop_From_Player) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Detach_Prop_From_Player");
static_assert(sizeof(BP_FLIB_Gameplay_C_Detach_Prop_From_Player) == 0x000018, "Wrong size on BP_FLIB_Gameplay_C_Detach_Prop_From_Player");
static_assert(offsetof(BP_FLIB_Gameplay_C_Detach_Prop_From_Player, PropName) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Detach_Prop_From_Player::PropName' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Detach_Prop_From_Player, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Detach_Prop_From_Player::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Detach_Prop_From_Player, CallFunc_GetJackPlayerCharacter_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_Detach_Prop_From_Player::CallFunc_GetJackPlayerCharacter_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.SetHiddenCharacterWeapon
// 0x0048 (0x0048 - 0x0000)
struct BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon final
{
public:
	class AJackCharacter*                         Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewHidden;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable2;                                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue2;              // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_GetCharacterWeaponMeshComponent_ReturnValue; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon");
static_assert(sizeof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon) == 0x000048, "Wrong size on BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon, Character) == 0x000000, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon::Character' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon, NewHidden) == 0x000008, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon::NewHidden' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon, __WorldContext) == 0x000010, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon, Temp_int_Variable) == 0x000018, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon, Temp_int_Variable2) == 0x00001C, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon::Temp_int_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon, CallFunc_Conv_IntToByte_ReturnValue) == 0x000020, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon, CallFunc_GetValidValue_ReturnValue) == 0x000028, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon, CallFunc_Conv_IntToByte_ReturnValue2) == 0x000029, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon::CallFunc_Conv_IntToByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon, CallFunc_GetCharacterWeaponMeshComponent_ReturnValue) == 0x000030, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon::CallFunc_GetCharacterWeaponMeshComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x000038, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon, CallFunc_IsValid_ReturnValue) == 0x000039, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00003C, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon, CallFunc_MakeLiteralInt_ReturnValue) == 0x000040, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeapon::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.SetHiddenCharacterWeaponAccessary
// 0x0048 (0x0048 - 0x0000)
struct BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary final
{
public:
	class AJackCharacter*                         Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewHidden;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable2;                                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue2;              // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_GetCharacterWeaponAccessaryMeshComponent_ReturnValue; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary");
static_assert(sizeof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary) == 0x000048, "Wrong size on BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary, Character) == 0x000000, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary::Character' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary, NewHidden) == 0x000008, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary::NewHidden' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary, __WorldContext) == 0x000010, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary, Temp_int_Variable) == 0x000018, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary, Temp_int_Variable2) == 0x00001C, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary::Temp_int_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary, CallFunc_Conv_IntToByte_ReturnValue) == 0x000020, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary, CallFunc_GetValidValue_ReturnValue) == 0x000028, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary, CallFunc_Conv_IntToByte_ReturnValue2) == 0x000029, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary::CallFunc_Conv_IntToByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary, CallFunc_GetCharacterWeaponAccessaryMeshComponent_ReturnValue) == 0x000030, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary::CallFunc_GetCharacterWeaponAccessaryMeshComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x000038, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary, CallFunc_IsValid_ReturnValue) == 0x000039, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00003C, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary, CallFunc_MakeLiteralInt_ReturnValue) == 0x000040, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'BP_FLIB_Gameplay_C_SetHiddenCharacterWeaponAccessary::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.SetHiddenPlayerWeapon
// 0x0048 (0x0048 - 0x0000)
struct BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon final
{
public:
	bool                                          NewHidden;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable2;                                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue2;              // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_GetCharacterWeaponMeshComponent_ReturnValue; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon");
static_assert(sizeof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon) == 0x000048, "Wrong size on BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon, NewHidden) == 0x000000, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon::NewHidden' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon, CallFunc_GetJackPlayerCharacter_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon::CallFunc_GetJackPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon, Temp_int_Variable) == 0x000018, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon, Temp_int_Variable2) == 0x00001C, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon::Temp_int_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon, CallFunc_Conv_IntToByte_ReturnValue) == 0x000020, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon, CallFunc_GetValidValue_ReturnValue) == 0x000028, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon, CallFunc_Conv_IntToByte_ReturnValue2) == 0x000029, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon::CallFunc_Conv_IntToByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon, CallFunc_GetCharacterWeaponMeshComponent_ReturnValue) == 0x000030, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon::CallFunc_GetCharacterWeaponMeshComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x000038, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon, CallFunc_IsValid_ReturnValue) == 0x000039, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00003C, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon, CallFunc_MakeLiteralInt_ReturnValue) == 0x000040, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeapon::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.SetHiddenPlayerWeaponAccessary
// 0x0048 (0x0048 - 0x0000)
struct BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary final
{
public:
	bool                                          NewHidden;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable2;                                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue2;              // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_GetCharacterWeaponAccessaryMeshComponent_ReturnValue; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary");
static_assert(sizeof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary) == 0x000048, "Wrong size on BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary, NewHidden) == 0x000000, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary::NewHidden' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary, CallFunc_GetJackPlayerCharacter_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary::CallFunc_GetJackPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary, Temp_int_Variable) == 0x000018, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary, Temp_int_Variable2) == 0x00001C, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary::Temp_int_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary, CallFunc_Conv_IntToByte_ReturnValue) == 0x000020, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary, CallFunc_GetValidValue_ReturnValue) == 0x000028, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary, CallFunc_Conv_IntToByte_ReturnValue2) == 0x000029, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary::CallFunc_Conv_IntToByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary, CallFunc_GetCharacterWeaponAccessaryMeshComponent_ReturnValue) == 0x000030, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary::CallFunc_GetCharacterWeaponAccessaryMeshComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x000038, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary, CallFunc_IsValid_ReturnValue) == 0x000039, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00003C, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary, CallFunc_MakeLiteralInt_ReturnValue) == 0x000040, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'BP_FLIB_Gameplay_C_SetHiddenPlayerWeaponAccessary::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Get Time Color Blend
// 0x0078 (0x0078 - 0x0000)
struct BP_FLIB_Gameplay_C_Get_Time_Color_Blend final
{
public:
	TArray<struct FLinearColor>                   FineColor;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	TArray<struct FLinearColor>                   CloudyColor;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	float                                         CloudyRate;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Time;                                              // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                WorldContext;                                      // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BlendedColor;                                      // 0x0038(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Get_Time_Color_Color;                     // 0x0048(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Get_Time_Color_Color2;                    // 0x0058(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x0068(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Get_Time_Color_Blend) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Get_Time_Color_Blend");
static_assert(sizeof(BP_FLIB_Gameplay_C_Get_Time_Color_Blend) == 0x000078, "Wrong size on BP_FLIB_Gameplay_C_Get_Time_Color_Blend");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Color_Blend, FineColor) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Get_Time_Color_Blend::FineColor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Color_Blend, CloudyColor) == 0x000010, "Member 'BP_FLIB_Gameplay_C_Get_Time_Color_Blend::CloudyColor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Color_Blend, CloudyRate) == 0x000020, "Member 'BP_FLIB_Gameplay_C_Get_Time_Color_Blend::CloudyRate' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Color_Blend, Time) == 0x000024, "Member 'BP_FLIB_Gameplay_C_Get_Time_Color_Blend::Time' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Color_Blend, WorldContext) == 0x000028, "Member 'BP_FLIB_Gameplay_C_Get_Time_Color_Blend::WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Color_Blend, __WorldContext) == 0x000030, "Member 'BP_FLIB_Gameplay_C_Get_Time_Color_Blend::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Color_Blend, BlendedColor) == 0x000038, "Member 'BP_FLIB_Gameplay_C_Get_Time_Color_Blend::BlendedColor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Color_Blend, CallFunc_Get_Time_Color_Color) == 0x000048, "Member 'BP_FLIB_Gameplay_C_Get_Time_Color_Blend::CallFunc_Get_Time_Color_Color' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Color_Blend, CallFunc_Get_Time_Color_Color2) == 0x000058, "Member 'BP_FLIB_Gameplay_C_Get_Time_Color_Blend::CallFunc_Get_Time_Color_Color2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Color_Blend, CallFunc_LinearColorLerp_ReturnValue) == 0x000068, "Member 'BP_FLIB_Gameplay_C_Get_Time_Color_Blend::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Get Time Float Blend
// 0x0048 (0x0048 - 0x0000)
struct BP_FLIB_Gameplay_C_Get_Time_Float_Blend final
{
public:
	TArray<float>                                 Fine;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	TArray<float>                                 Cloudy;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	float                                         ClodyRate;                                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Time;                                              // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                WorldContext;                                      // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendedColor;                                      // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Get_Time_Float_Float;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Get_Time_Float_Float2;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Get_Time_Float_Blend) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Get_Time_Float_Blend");
static_assert(sizeof(BP_FLIB_Gameplay_C_Get_Time_Float_Blend) == 0x000048, "Wrong size on BP_FLIB_Gameplay_C_Get_Time_Float_Blend");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Float_Blend, Fine) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Get_Time_Float_Blend::Fine' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Float_Blend, Cloudy) == 0x000010, "Member 'BP_FLIB_Gameplay_C_Get_Time_Float_Blend::Cloudy' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Float_Blend, ClodyRate) == 0x000020, "Member 'BP_FLIB_Gameplay_C_Get_Time_Float_Blend::ClodyRate' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Float_Blend, Time) == 0x000024, "Member 'BP_FLIB_Gameplay_C_Get_Time_Float_Blend::Time' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Float_Blend, WorldContext) == 0x000028, "Member 'BP_FLIB_Gameplay_C_Get_Time_Float_Blend::WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Float_Blend, __WorldContext) == 0x000030, "Member 'BP_FLIB_Gameplay_C_Get_Time_Float_Blend::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Float_Blend, BlendedColor) == 0x000038, "Member 'BP_FLIB_Gameplay_C_Get_Time_Float_Blend::BlendedColor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Float_Blend, CallFunc_Get_Time_Float_Float) == 0x00003C, "Member 'BP_FLIB_Gameplay_C_Get_Time_Float_Blend::CallFunc_Get_Time_Float_Float' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Float_Blend, CallFunc_Get_Time_Float_Float2) == 0x000040, "Member 'BP_FLIB_Gameplay_C_Get_Time_Float_Blend::CallFunc_Get_Time_Float_Float2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Time_Float_Blend, CallFunc_Lerp_ReturnValue) == 0x000044, "Member 'BP_FLIB_Gameplay_C_Get_Time_Float_Blend::CallFunc_Lerp_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Set Day Night
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_Gameplay_C_Set_Day_Night final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNowWorldTime_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue2;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue3;             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue4;             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue2;            // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue3;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue4;            // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Set_Day_Night) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Set_Day_Night");
static_assert(sizeof(BP_FLIB_Gameplay_C_Set_Day_Night) == 0x000030, "Wrong size on BP_FLIB_Gameplay_C_Set_Day_Night");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Day_Night, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Set_Day_Night::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Day_Night, CallFunc_Multiply_IntInt_ReturnValue) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Set_Day_Night::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Day_Night, CallFunc_GetNowWorldTime_ReturnValue) == 0x00000C, "Member 'BP_FLIB_Gameplay_C_Set_Day_Night::CallFunc_GetNowWorldTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Day_Night, CallFunc_Multiply_IntInt_ReturnValue2) == 0x000010, "Member 'BP_FLIB_Gameplay_C_Set_Day_Night::CallFunc_Multiply_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Day_Night, CallFunc_Multiply_IntInt_ReturnValue3) == 0x000014, "Member 'BP_FLIB_Gameplay_C_Set_Day_Night::CallFunc_Multiply_IntInt_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Day_Night, CallFunc_Multiply_IntInt_ReturnValue4) == 0x000018, "Member 'BP_FLIB_Gameplay_C_Set_Day_Night::CallFunc_Multiply_IntInt_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Day_Night, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_FLIB_Gameplay_C_Set_Day_Night::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Day_Night, CallFunc_Add_IntInt_ReturnValue2) == 0x000020, "Member 'BP_FLIB_Gameplay_C_Set_Day_Night::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Day_Night, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000024, "Member 'BP_FLIB_Gameplay_C_Set_Day_Night::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Day_Night, CallFunc_Greater_IntInt_ReturnValue) == 0x000025, "Member 'BP_FLIB_Gameplay_C_Set_Day_Night::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Day_Night, CallFunc_Less_IntInt_ReturnValue) == 0x000026, "Member 'BP_FLIB_Gameplay_C_Set_Day_Night::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Day_Night, CallFunc_LessEqual_IntInt_ReturnValue2) == 0x000027, "Member 'BP_FLIB_Gameplay_C_Set_Day_Night::CallFunc_LessEqual_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Day_Night, CallFunc_LessEqual_IntInt_ReturnValue3) == 0x000028, "Member 'BP_FLIB_Gameplay_C_Set_Day_Night::CallFunc_LessEqual_IntInt_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Day_Night, CallFunc_LessEqual_IntInt_ReturnValue4) == 0x000029, "Member 'BP_FLIB_Gameplay_C_Set_Day_Night::CallFunc_LessEqual_IntInt_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Day_Night, CallFunc_BooleanAND_ReturnValue) == 0x00002A, "Member 'BP_FLIB_Gameplay_C_Set_Day_Night::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Day_Night, CallFunc_BooleanAND_ReturnValue2) == 0x00002B, "Member 'BP_FLIB_Gameplay_C_Set_Day_Night::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Is Can Interrupt
// 0x0048 (0x0048 - 0x0000)
struct BP_FLIB_Gameplay_C_Is_Can_Interrupt final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanInterrupt;                                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue2;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBPControl_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableFading_ReturnValue;               // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsGamePlayerCondition_ReturnValue;        // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsGamePlayerCondition_ReturnValue2;       // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsGamePlayerCondition_ReturnValue3;       // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsGamePlayerCondition_ReturnValue4;       // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackBattleManager*                     CallFunc_GetBattleManager_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOpenedMenu_ReturnValue;                 // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInBattle_ReturnValue;                   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue2;                   // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue3;                   // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue4;                   // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue5;                   // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue6;                   // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue7;                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue8;                   // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Is_Can_Interrupt) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Is_Can_Interrupt");
static_assert(sizeof(BP_FLIB_Gameplay_C_Is_Can_Interrupt) == 0x000048, "Wrong size on BP_FLIB_Gameplay_C_Is_Can_Interrupt");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Can_Interrupt, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Is_Can_Interrupt::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Can_Interrupt, CanInterrupt) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Is_Can_Interrupt::CanInterrupt' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Can_Interrupt, CallFunc_GetJackPlayerCharacter_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_Is_Can_Interrupt::CallFunc_GetJackPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Can_Interrupt, CallFunc_GetJackPlayerCharacter_ReturnValue2) == 0x000018, "Member 'BP_FLIB_Gameplay_C_Is_Can_Interrupt::CallFunc_GetJackPlayerCharacter_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Can_Interrupt, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_FLIB_Gameplay_C_Is_Can_Interrupt::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Can_Interrupt, CallFunc_IsBPControl_ReturnValue) == 0x000021, "Member 'BP_FLIB_Gameplay_C_Is_Can_Interrupt::CallFunc_IsBPControl_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Can_Interrupt, CallFunc_IsEnableFading_ReturnValue) == 0x000022, "Member 'BP_FLIB_Gameplay_C_Is_Can_Interrupt::CallFunc_IsEnableFading_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Can_Interrupt, CallFunc_IsGamePlayerCondition_ReturnValue) == 0x000023, "Member 'BP_FLIB_Gameplay_C_Is_Can_Interrupt::CallFunc_IsGamePlayerCondition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Can_Interrupt, CallFunc_IsGamePlayerCondition_ReturnValue2) == 0x000024, "Member 'BP_FLIB_Gameplay_C_Is_Can_Interrupt::CallFunc_IsGamePlayerCondition_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Can_Interrupt, CallFunc_IsGamePlayerCondition_ReturnValue3) == 0x000025, "Member 'BP_FLIB_Gameplay_C_Is_Can_Interrupt::CallFunc_IsGamePlayerCondition_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Can_Interrupt, CallFunc_IsGamePlayerCondition_ReturnValue4) == 0x000026, "Member 'BP_FLIB_Gameplay_C_Is_Can_Interrupt::CallFunc_IsGamePlayerCondition_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Can_Interrupt, CallFunc_GetUMGManager_ReturnValue) == 0x000028, "Member 'BP_FLIB_Gameplay_C_Is_Can_Interrupt::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Can_Interrupt, CallFunc_GetBattleManager_ReturnValue) == 0x000030, "Member 'BP_FLIB_Gameplay_C_Is_Can_Interrupt::CallFunc_GetBattleManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Can_Interrupt, CallFunc_IsOpenedMenu_ReturnValue) == 0x000038, "Member 'BP_FLIB_Gameplay_C_Is_Can_Interrupt::CallFunc_IsOpenedMenu_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Can_Interrupt, CallFunc_IsInBattle_ReturnValue) == 0x000039, "Member 'BP_FLIB_Gameplay_C_Is_Can_Interrupt::CallFunc_IsInBattle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Can_Interrupt, CallFunc_BooleanOR_ReturnValue) == 0x00003A, "Member 'BP_FLIB_Gameplay_C_Is_Can_Interrupt::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Can_Interrupt, CallFunc_BooleanOR_ReturnValue2) == 0x00003B, "Member 'BP_FLIB_Gameplay_C_Is_Can_Interrupt::CallFunc_BooleanOR_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Can_Interrupt, CallFunc_BooleanOR_ReturnValue3) == 0x00003C, "Member 'BP_FLIB_Gameplay_C_Is_Can_Interrupt::CallFunc_BooleanOR_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Can_Interrupt, CallFunc_BooleanOR_ReturnValue4) == 0x00003D, "Member 'BP_FLIB_Gameplay_C_Is_Can_Interrupt::CallFunc_BooleanOR_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Can_Interrupt, CallFunc_BooleanOR_ReturnValue5) == 0x00003E, "Member 'BP_FLIB_Gameplay_C_Is_Can_Interrupt::CallFunc_BooleanOR_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Can_Interrupt, CallFunc_BooleanOR_ReturnValue6) == 0x00003F, "Member 'BP_FLIB_Gameplay_C_Is_Can_Interrupt::CallFunc_BooleanOR_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Can_Interrupt, CallFunc_BooleanOR_ReturnValue7) == 0x000040, "Member 'BP_FLIB_Gameplay_C_Is_Can_Interrupt::CallFunc_BooleanOR_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Can_Interrupt, CallFunc_BooleanOR_ReturnValue8) == 0x000041, "Member 'BP_FLIB_Gameplay_C_Is_Can_Interrupt::CallFunc_BooleanOR_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Can_Interrupt, CallFunc_Not_PreBool_ReturnValue) == 0x000042, "Member 'BP_FLIB_Gameplay_C_Is_Can_Interrupt::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.All Door Close
// 0x0070 (0x0070 - 0x0000)
struct BP_FLIB_Gameplay_C_All_Door_Close final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Actors;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	bool                                          CallFunc_GetGameFlagBool_ReturnValue;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetAllActorsWithInterface_OutActors;      // 0x0020(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBP_IF_Gimmick_C>      K2Node_DynamicCast_AsBP_IF_Gimmick;                // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_All_Door_Close) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_All_Door_Close");
static_assert(sizeof(BP_FLIB_Gameplay_C_All_Door_Close) == 0x000070, "Wrong size on BP_FLIB_Gameplay_C_All_Door_Close");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Close, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_All_Door_Close::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Close, Actors) == 0x000008, "Member 'BP_FLIB_Gameplay_C_All_Door_Close::Actors' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Close, CallFunc_GetGameFlagBool_ReturnValue) == 0x000018, "Member 'BP_FLIB_Gameplay_C_All_Door_Close::CallFunc_GetGameFlagBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Close, CallFunc_GetAllActorsWithInterface_OutActors) == 0x000020, "Member 'BP_FLIB_Gameplay_C_All_Door_Close::CallFunc_GetAllActorsWithInterface_OutActors' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Close, CallFunc_Not_PreBool_ReturnValue) == 0x000030, "Member 'BP_FLIB_Gameplay_C_All_Door_Close::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Close, Temp_int_Array_Index_Variable) == 0x000034, "Member 'BP_FLIB_Gameplay_C_All_Door_Close::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Close, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'BP_FLIB_Gameplay_C_All_Door_Close::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Close, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'BP_FLIB_Gameplay_C_All_Door_Close::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Close, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_FLIB_Gameplay_C_All_Door_Close::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Close, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_FLIB_Gameplay_C_All_Door_Close::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Close, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'BP_FLIB_Gameplay_C_All_Door_Close::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Close, K2Node_DynamicCast_AsBP_IF_Gimmick) == 0x000058, "Member 'BP_FLIB_Gameplay_C_All_Door_Close::K2Node_DynamicCast_AsBP_IF_Gimmick' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Close, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'BP_FLIB_Gameplay_C_All_Door_Close::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.StartDayNightPlayerSettings
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Gameplay_C_StartDayNightPlayerSettings final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_StartDayNightPlayerSettings) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_StartDayNightPlayerSettings");
static_assert(sizeof(BP_FLIB_Gameplay_C_StartDayNightPlayerSettings) == 0x000010, "Wrong size on BP_FLIB_Gameplay_C_StartDayNightPlayerSettings");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartDayNightPlayerSettings, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_StartDayNightPlayerSettings::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartDayNightPlayerSettings, CallFunc_GetUMGManager_ReturnValue) == 0x000008, "Member 'BP_FLIB_Gameplay_C_StartDayNightPlayerSettings::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.EndDayNightPlayerSettings
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Gameplay_C_EndDayNightPlayerSettings final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_EndDayNightPlayerSettings) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_EndDayNightPlayerSettings");
static_assert(sizeof(BP_FLIB_Gameplay_C_EndDayNightPlayerSettings) == 0x000010, "Wrong size on BP_FLIB_Gameplay_C_EndDayNightPlayerSettings");
static_assert(offsetof(BP_FLIB_Gameplay_C_EndDayNightPlayerSettings, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_EndDayNightPlayerSettings::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_EndDayNightPlayerSettings, CallFunc_GetUMGManager_ReturnValue) == 0x000008, "Member 'BP_FLIB_Gameplay_C_EndDayNightPlayerSettings::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.GatPlayerCoordinate
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Gameplay_C_GatPlayerCoordinate final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Coordinate;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCharacterCoordinate_ReturnValue;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_GatPlayerCoordinate) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_GatPlayerCoordinate");
static_assert(sizeof(BP_FLIB_Gameplay_C_GatPlayerCoordinate) == 0x000020, "Wrong size on BP_FLIB_Gameplay_C_GatPlayerCoordinate");
static_assert(offsetof(BP_FLIB_Gameplay_C_GatPlayerCoordinate, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_GatPlayerCoordinate::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GatPlayerCoordinate, Coordinate) == 0x000008, "Member 'BP_FLIB_Gameplay_C_GatPlayerCoordinate::Coordinate' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GatPlayerCoordinate, CallFunc_GetJackPlayerCharacter_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_GatPlayerCoordinate::CallFunc_GetJackPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GatPlayerCoordinate, CallFunc_GetCharacterCoordinate_ReturnValue) == 0x000018, "Member 'BP_FLIB_Gameplay_C_GatPlayerCoordinate::CallFunc_GetCharacterCoordinate_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Get Npc From Unique ID
// 0x0070 (0x0070 - 0x0000)
struct BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID final
{
public:
	struct FJackLDT_NPCList                       UniqueID;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackScheduledNPC*                      NPC;                                               // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AJackNPC*>                       TmpJackNPC;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<class AJackNPC*>                       CallFunc_GetNPCCharacters_ReturnValue;             // 0x0030(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AJackNPC*                               CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AJackScheduledNPC*                      K2Node_DynamicCast_AsJack_Scheduled_NPC;           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID");
static_assert(sizeof(BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID) == 0x000070, "Wrong size on BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID, UniqueID) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID::UniqueID' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID, __WorldContext) == 0x000010, "Member 'BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID, NPC) == 0x000018, "Member 'BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID::NPC' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID, TmpJackNPC) == 0x000020, "Member 'BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID::TmpJackNPC' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID, CallFunc_GetNPCCharacters_ReturnValue) == 0x000030, "Member 'BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID::CallFunc_GetNPCCharacters_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID, Temp_int_Array_Index_Variable) == 0x000040, "Member 'BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID, K2Node_DynamicCast_AsJack_Scheduled_NPC) == 0x000058, "Member 'BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID::K2Node_DynamicCast_AsJack_Scheduled_NPC' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID, Temp_int_Loop_Counter_Variable) == 0x000064, "Member 'BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000068, "Member 'BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID, CallFunc_Less_IntInt_ReturnValue) == 0x000069, "Member 'BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID, CallFunc_Add_IntInt_ReturnValue) == 0x00006C, "Member 'BP_FLIB_Gameplay_C_Get_Npc_From_Unique_ID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Set Fog Visible
// 0x0078 (0x0078 - 0x0000)
struct BP_FLIB_Gameplay_C_Set_Fog_Visible final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AtmosphericFog;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HeightFog;                                         // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Visible;                                           // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         TmpActors;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetLevelActorsByName_ReturnValue;         // 0x0030(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AExponentialHeightFog*                  K2Node_DynamicCast_AsExponential_Height_Fog;       // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AAtmosphericFog*                        K2Node_DynamicCast_AsAtmospheric_Fog;              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Set_Fog_Visible) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Set_Fog_Visible");
static_assert(sizeof(BP_FLIB_Gameplay_C_Set_Fog_Visible) == 0x000078, "Wrong size on BP_FLIB_Gameplay_C_Set_Fog_Visible");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Fog_Visible, LevelName) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Set_Fog_Visible::LevelName' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Fog_Visible, AtmosphericFog) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Set_Fog_Visible::AtmosphericFog' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Fog_Visible, HeightFog) == 0x000009, "Member 'BP_FLIB_Gameplay_C_Set_Fog_Visible::HeightFog' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Fog_Visible, Visible) == 0x00000A, "Member 'BP_FLIB_Gameplay_C_Set_Fog_Visible::Visible' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Fog_Visible, __WorldContext) == 0x000010, "Member 'BP_FLIB_Gameplay_C_Set_Fog_Visible::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Fog_Visible, TmpActors) == 0x000018, "Member 'BP_FLIB_Gameplay_C_Set_Fog_Visible::TmpActors' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Fog_Visible, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BP_FLIB_Gameplay_C_Set_Fog_Visible::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Fog_Visible, CallFunc_GetLevelActorsByName_ReturnValue) == 0x000030, "Member 'BP_FLIB_Gameplay_C_Set_Fog_Visible::CallFunc_GetLevelActorsByName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Fog_Visible, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'BP_FLIB_Gameplay_C_Set_Fog_Visible::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Fog_Visible, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'BP_FLIB_Gameplay_C_Set_Fog_Visible::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Fog_Visible, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_FLIB_Gameplay_C_Set_Fog_Visible::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Fog_Visible, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_FLIB_Gameplay_C_Set_Fog_Visible::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Fog_Visible, K2Node_DynamicCast_AsExponential_Height_Fog) == 0x000058, "Member 'BP_FLIB_Gameplay_C_Set_Fog_Visible::K2Node_DynamicCast_AsExponential_Height_Fog' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Fog_Visible, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BP_FLIB_Gameplay_C_Set_Fog_Visible::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Fog_Visible, CallFunc_Less_IntInt_ReturnValue) == 0x000061, "Member 'BP_FLIB_Gameplay_C_Set_Fog_Visible::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Fog_Visible, K2Node_DynamicCast_AsAtmospheric_Fog) == 0x000068, "Member 'BP_FLIB_Gameplay_C_Set_Fog_Visible::K2Node_DynamicCast_AsAtmospheric_Fog' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Fog_Visible, K2Node_DynamicCast_bSuccess2) == 0x000070, "Member 'BP_FLIB_Gameplay_C_Set_Fog_Visible::K2Node_DynamicCast_bSuccess2' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Is Player Riding on Vehicle
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Gameplay_C_Is_Player_Riding_on_Vehicle final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Player_Riding;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRidingOnVehicle_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Is_Player_Riding_on_Vehicle) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Is_Player_Riding_on_Vehicle");
static_assert(sizeof(BP_FLIB_Gameplay_C_Is_Player_Riding_on_Vehicle) == 0x000020, "Wrong size on BP_FLIB_Gameplay_C_Is_Player_Riding_on_Vehicle");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Player_Riding_on_Vehicle, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Is_Player_Riding_on_Vehicle::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Player_Riding_on_Vehicle, Player_Riding) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Is_Player_Riding_on_Vehicle::Player_Riding' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Player_Riding_on_Vehicle, CallFunc_GetJackPlayerCharacter_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_Is_Player_Riding_on_Vehicle::CallFunc_GetJackPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Player_Riding_on_Vehicle, CallFunc_IsRidingOnVehicle_ReturnValue) == 0x000018, "Member 'BP_FLIB_Gameplay_C_Is_Player_Riding_on_Vehicle::CallFunc_IsRidingOnVehicle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Is_Player_Riding_on_Vehicle, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BP_FLIB_Gameplay_C_Is_Player_Riding_on_Vehicle::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.EndEventPlayerSettingCore
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_Gameplay_C_EndEventPlayerSettingCore final
{
public:
	bool                                          EventWrapper;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bKeepPossessPlayerControl;                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EJackGamePlayerConditionControlPurpose        Temp_byte_Variable;                                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackGamePlayerConditionControlPurpose        Temp_byte_Variable2;                               // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackGamePlayerConditionControlPurpose        K2Node_Select_Default;                             // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_EndEventPlayerSettingCore) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_EndEventPlayerSettingCore");
static_assert(sizeof(BP_FLIB_Gameplay_C_EndEventPlayerSettingCore) == 0x000028, "Wrong size on BP_FLIB_Gameplay_C_EndEventPlayerSettingCore");
static_assert(offsetof(BP_FLIB_Gameplay_C_EndEventPlayerSettingCore, EventWrapper) == 0x000000, "Member 'BP_FLIB_Gameplay_C_EndEventPlayerSettingCore::EventWrapper' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_EndEventPlayerSettingCore, bKeepPossessPlayerControl) == 0x000001, "Member 'BP_FLIB_Gameplay_C_EndEventPlayerSettingCore::bKeepPossessPlayerControl' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_EndEventPlayerSettingCore, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_EndEventPlayerSettingCore::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_EndEventPlayerSettingCore, Temp_bool_Variable) == 0x000010, "Member 'BP_FLIB_Gameplay_C_EndEventPlayerSettingCore::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_EndEventPlayerSettingCore, CallFunc_GetUMGManager_ReturnValue) == 0x000018, "Member 'BP_FLIB_Gameplay_C_EndEventPlayerSettingCore::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_EndEventPlayerSettingCore, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_FLIB_Gameplay_C_EndEventPlayerSettingCore::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_EndEventPlayerSettingCore, Temp_byte_Variable) == 0x000021, "Member 'BP_FLIB_Gameplay_C_EndEventPlayerSettingCore::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_EndEventPlayerSettingCore, Temp_byte_Variable2) == 0x000022, "Member 'BP_FLIB_Gameplay_C_EndEventPlayerSettingCore::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_EndEventPlayerSettingCore, K2Node_Select_Default) == 0x000023, "Member 'BP_FLIB_Gameplay_C_EndEventPlayerSettingCore::K2Node_Select_Default' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.StartTalkToEventPlayerSetting
// 0x0008 (0x0008 - 0x0000)
struct BP_FLIB_Gameplay_C_StartTalkToEventPlayerSetting final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_StartTalkToEventPlayerSetting) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_StartTalkToEventPlayerSetting");
static_assert(sizeof(BP_FLIB_Gameplay_C_StartTalkToEventPlayerSetting) == 0x000008, "Wrong size on BP_FLIB_Gameplay_C_StartTalkToEventPlayerSetting");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartTalkToEventPlayerSetting, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_StartTalkToEventPlayerSetting::__WorldContext' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.PlayerPartyFullRecover
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Gameplay_C_PlayerPartyFullRecover final
{
public:
	bool                                          ClearOddEffect_0;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_PlayerPartyFullRecover) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_PlayerPartyFullRecover");
static_assert(sizeof(BP_FLIB_Gameplay_C_PlayerPartyFullRecover) == 0x000010, "Wrong size on BP_FLIB_Gameplay_C_PlayerPartyFullRecover");
static_assert(offsetof(BP_FLIB_Gameplay_C_PlayerPartyFullRecover, ClearOddEffect_0) == 0x000000, "Member 'BP_FLIB_Gameplay_C_PlayerPartyFullRecover::ClearOddEffect_0' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_PlayerPartyFullRecover, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_PlayerPartyFullRecover::__WorldContext' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.AllDeadFullRecover
// 0x0038 (0x0038 - 0x0000)
struct BP_FLIB_Gameplay_C_AllDeadFullRecover final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelStreaming*                        CallFunc_GetStreamingLevel_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ALevelScriptActor*                      CallFunc_GetLevelScriptActor_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBP_IF_CommonEvent_C>  K2Node_DynamicCast_AsBP_IF_Common_Event;           // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_AllDeadFullRecover) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_AllDeadFullRecover");
static_assert(sizeof(BP_FLIB_Gameplay_C_AllDeadFullRecover) == 0x000038, "Wrong size on BP_FLIB_Gameplay_C_AllDeadFullRecover");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllDeadFullRecover, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_AllDeadFullRecover::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllDeadFullRecover, CallFunc_GetStreamingLevel_ReturnValue) == 0x000008, "Member 'BP_FLIB_Gameplay_C_AllDeadFullRecover::CallFunc_GetStreamingLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllDeadFullRecover, CallFunc_GetJackPlayerCharacter_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_AllDeadFullRecover::CallFunc_GetJackPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllDeadFullRecover, CallFunc_GetLevelScriptActor_ReturnValue) == 0x000018, "Member 'BP_FLIB_Gameplay_C_AllDeadFullRecover::CallFunc_GetLevelScriptActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllDeadFullRecover, K2Node_DynamicCast_AsBP_IF_Common_Event) == 0x000020, "Member 'BP_FLIB_Gameplay_C_AllDeadFullRecover::K2Node_DynamicCast_AsBP_IF_Common_Event' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllDeadFullRecover, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_FLIB_Gameplay_C_AllDeadFullRecover::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllDeadFullRecover, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'BP_FLIB_Gameplay_C_AllDeadFullRecover::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Get Actor In CS Level
// 0x00A0 (0x00A0 - 0x0000)
struct BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Actor;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<class FString>                         AllLevelNames;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<class AActor*>                         CSLevelActor;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<class FString>                         CallFunc_GetLevelNames_ReturnValue;                // 0x0038(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindSubstring_ReturnValue;                // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindSubstring_ReturnValue2;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetLevelActorsByName_ReturnValue;         // 0x0080(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue2;             // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level");
static_assert(sizeof(BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level) == 0x0000A0, "Wrong size on BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level, Actor) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level::Actor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level, AllLevelNames) == 0x000018, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level::AllLevelNames' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level, CSLevelActor) == 0x000028, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level::CSLevelActor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level, CallFunc_GetLevelNames_ReturnValue) == 0x000038, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level::CallFunc_GetLevelNames_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level, Temp_int_Array_Index_Variable) == 0x000048, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level, CallFunc_Array_Get_Item) == 0x000050, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level, CallFunc_FindSubstring_ReturnValue) == 0x000064, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level::CallFunc_FindSubstring_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000069, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level, CallFunc_Conv_StringToName_ReturnValue) == 0x000070, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level, CallFunc_FindSubstring_ReturnValue2) == 0x000078, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level::CallFunc_FindSubstring_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level, CallFunc_GetLevelActorsByName_ReturnValue) == 0x000080, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level::CallFunc_GetLevelActorsByName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level, CallFunc_NotEqual_IntInt_ReturnValue2) == 0x000090, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level::CallFunc_NotEqual_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level, CallFunc_Add_IntInt_ReturnValue) == 0x000094, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level, CallFunc_BooleanOR_ReturnValue) == 0x000098, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_CS_Level::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.IsCurrentMapRemainOrb
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_Gameplay_C_IsCurrentMapRemainOrb final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRemain;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackSaveData*                          CallFunc_GetSaveData_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetActiveMapID_ReturnValue;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMapRemainOrb_IsRemain;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_IsCurrentMapRemainOrb) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_IsCurrentMapRemainOrb");
static_assert(sizeof(BP_FLIB_Gameplay_C_IsCurrentMapRemainOrb) == 0x000028, "Wrong size on BP_FLIB_Gameplay_C_IsCurrentMapRemainOrb");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsCurrentMapRemainOrb, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_IsCurrentMapRemainOrb::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsCurrentMapRemainOrb, bRemain) == 0x000008, "Member 'BP_FLIB_Gameplay_C_IsCurrentMapRemainOrb::bRemain' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsCurrentMapRemainOrb, CallFunc_GetSaveData_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_IsCurrentMapRemainOrb::CallFunc_GetSaveData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsCurrentMapRemainOrb, CallFunc_GetActiveMapID_ReturnValue) == 0x000018, "Member 'BP_FLIB_Gameplay_C_IsCurrentMapRemainOrb::CallFunc_GetActiveMapID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsCurrentMapRemainOrb, CallFunc_IsMapRemainOrb_IsRemain) == 0x000020, "Member 'BP_FLIB_Gameplay_C_IsCurrentMapRemainOrb::CallFunc_IsMapRemainOrb_IsRemain' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.All Door Set Auto Close Enable that is Opened By Player
// 0x0060 (0x0060 - 0x0000)
struct BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player final
{
public:
	bool                                          AutoCloseEnable;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         TempActors;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<class AActor*>                         CallFunc_GetAllActorsWithInterface_OutActors;      // 0x0020(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBP_IF_Gimmick_C>      K2Node_DynamicCast_AsBP_IF_Gimmick;                // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player");
static_assert(sizeof(BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player) == 0x000060, "Wrong size on BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player, AutoCloseEnable) == 0x000000, "Member 'BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player::AutoCloseEnable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player, TempActors) == 0x000010, "Member 'BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player::TempActors' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player, CallFunc_GetAllActorsWithInterface_OutActors) == 0x000020, "Member 'BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player::CallFunc_GetAllActorsWithInterface_OutActors' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player, K2Node_DynamicCast_AsBP_IF_Gimmick) == 0x000048, "Member 'BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player::K2Node_DynamicCast_AsBP_IF_Gimmick' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player, CallFunc_Less_IntInt_ReturnValue) == 0x000059, "Member 'BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'BP_FLIB_Gameplay_C_All_Door_Set_Auto_Close_Enable_that_is_Opened_By_Player::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Set Hidden Renkei Character Setting
// 0x0098 (0x0098 - 0x0000)
struct BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MartinaDevilMode;                                  // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DevilMode;                                         // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HiddenHane;                                        // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_Get_Actor_In_Renkei_Level_Actor;          // 0x0010(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackCharacter*                         K2Node_DynamicCast_AsJack_Character;               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USkinnedMeshComponent*                  CallFunc_GetCoordinatePartsMeshComponent_ReturnValue; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCharacterCoordinate_ReturnValue;       // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue2;         // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue3;         // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue4;         // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue2;                // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue2;                   // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue3;                   // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetCharacterCoordinate_ReturnValue2;      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue5;         // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EJackCharacter                                CallFunc_GetCharacterType_ReturnValue;             // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable2;                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable2;                    // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue2;                 // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item2;                          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting");
static_assert(sizeof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting) == 0x000098, "Wrong size on BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, MartinaDevilMode) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::MartinaDevilMode' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, DevilMode) == 0x000009, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::DevilMode' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, HiddenHane) == 0x00000A, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::HiddenHane' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, CallFunc_Get_Actor_In_Renkei_Level_Actor) == 0x000010, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::CallFunc_Get_Actor_In_Renkei_Level_Actor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, Temp_bool_True_if_break_was_hit_Variable) == 0x000030, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, K2Node_DynamicCast_AsJack_Character) == 0x000040, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::K2Node_DynamicCast_AsJack_Character' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, CallFunc_Not_PreBool_ReturnValue) == 0x000049, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, CallFunc_GetCoordinatePartsMeshComponent_ReturnValue) == 0x000050, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::CallFunc_GetCoordinatePartsMeshComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, CallFunc_GetCharacterCoordinate_ReturnValue) == 0x000058, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::CallFunc_GetCharacterCoordinate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000060, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, CallFunc_EqualEqual_NameName_ReturnValue2) == 0x000061, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::CallFunc_EqualEqual_NameName_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, CallFunc_EqualEqual_NameName_ReturnValue3) == 0x000062, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::CallFunc_EqualEqual_NameName_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, CallFunc_EqualEqual_NameName_ReturnValue4) == 0x000063, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::CallFunc_EqualEqual_NameName_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, CallFunc_BooleanOR_ReturnValue) == 0x000064, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, CallFunc_Array_Length_ReturnValue2) == 0x000068, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::CallFunc_Array_Length_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, CallFunc_BooleanOR_ReturnValue2) == 0x00006C, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::CallFunc_BooleanOR_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, CallFunc_BooleanOR_ReturnValue3) == 0x00006D, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::CallFunc_BooleanOR_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, CallFunc_GetCharacterCoordinate_ReturnValue2) == 0x000070, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::CallFunc_GetCharacterCoordinate_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, CallFunc_EqualEqual_NameName_ReturnValue5) == 0x000078, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::CallFunc_EqualEqual_NameName_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, CallFunc_IsValid_ReturnValue) == 0x000079, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, CallFunc_GetCharacterType_ReturnValue) == 0x00007A, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::CallFunc_GetCharacterType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, K2Node_SwitchEnum_CmpSuccess) == 0x00007B, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, Temp_int_Loop_Counter_Variable2) == 0x00007C, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::Temp_int_Loop_Counter_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, Temp_int_Array_Index_Variable2) == 0x000080, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::Temp_int_Array_Index_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, CallFunc_Less_IntInt_ReturnValue2) == 0x000084, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::CallFunc_Less_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, CallFunc_Array_Get_Item2) == 0x000088, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, CallFunc_BooleanAND_ReturnValue) == 0x000090, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, K2Node_SwitchName_CmpSuccess) == 0x000091, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting, CallFunc_Add_IntInt_ReturnValue2) == 0x000094, "Member 'BP_FLIB_Gameplay_C_Set_Hidden_Renkei_Character_Setting::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.CheckCurrentMapTown
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Gameplay_C_CheckCurrentMapTown final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTown;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckCurrentMapConditionID_Ret;           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_CheckCurrentMapTown) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_CheckCurrentMapTown");
static_assert(sizeof(BP_FLIB_Gameplay_C_CheckCurrentMapTown) == 0x000010, "Wrong size on BP_FLIB_Gameplay_C_CheckCurrentMapTown");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckCurrentMapTown, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_CheckCurrentMapTown::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckCurrentMapTown, bTown) == 0x000008, "Member 'BP_FLIB_Gameplay_C_CheckCurrentMapTown::bTown' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckCurrentMapTown, CallFunc_CheckCurrentMapConditionID_Ret) == 0x000009, "Member 'BP_FLIB_Gameplay_C_CheckCurrentMapTown::CallFunc_CheckCurrentMapConditionID_Ret' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.AllActorChangeScenarioFlag
// 0x0070 (0x0070 - 0x0000)
struct BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag final
{
public:
	struct FJackLDT_GameFlagDataScenario          ScenarioFlag;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         TempActors;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<class AActor*>                         CallFunc_GetAllActorsWithInterface_OutActors;      // 0x0028(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBP_IF_ChangeFlag_C>   K2Node_DynamicCast_AsBP_IF_Change_Flag;            // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag");
static_assert(sizeof(BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag) == 0x000070, "Wrong size on BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag, ScenarioFlag) == 0x000000, "Member 'BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag::ScenarioFlag' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag, __WorldContext) == 0x000010, "Member 'BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag, TempActors) == 0x000018, "Member 'BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag::TempActors' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag, CallFunc_GetAllActorsWithInterface_OutActors) == 0x000028, "Member 'BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag::CallFunc_GetAllActorsWithInterface_OutActors' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag, Temp_int_Array_Index_Variable) == 0x000038, "Member 'BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag, K2Node_DynamicCast_AsBP_IF_Change_Flag) == 0x000058, "Member 'BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag::K2Node_DynamicCast_AsBP_IF_Change_Flag' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'BP_FLIB_Gameplay_C_AllActorChangeScenarioFlag::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.OpenTitle
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Gameplay_C_OpenTitle final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackMusicManager*                      CallFunc_GetMusicManager_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_OpenTitle) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_OpenTitle");
static_assert(sizeof(BP_FLIB_Gameplay_C_OpenTitle) == 0x000018, "Wrong size on BP_FLIB_Gameplay_C_OpenTitle");
static_assert(offsetof(BP_FLIB_Gameplay_C_OpenTitle, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_OpenTitle::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_OpenTitle, CallFunc_GetUMGManager_ReturnValue) == 0x000008, "Member 'BP_FLIB_Gameplay_C_OpenTitle::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_OpenTitle, CallFunc_GetMusicManager_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_OpenTitle::CallFunc_GetMusicManager_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Get Actor In Renkei Level
// 0x0098 (0x0098 - 0x0000)
struct BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Actor;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<class FString>                         AllLevelNames;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<class AActor*>                         RenkeiLevelActor;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<class FString>                         CallFunc_GetLevelNames_ReturnValue;                // 0x0038(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetLevelActorsByName_ReturnValue;         // 0x0078(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_FindSubstring_ReturnValue;                // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level");
static_assert(sizeof(BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level) == 0x000098, "Wrong size on BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level, Actor) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level::Actor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level, AllLevelNames) == 0x000018, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level::AllLevelNames' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level, RenkeiLevelActor) == 0x000028, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level::RenkeiLevelActor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level, CallFunc_GetLevelNames_ReturnValue) == 0x000038, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level::CallFunc_GetLevelNames_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level, Temp_int_Array_Index_Variable) == 0x000048, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level, CallFunc_Array_Get_Item) == 0x000050, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level, CallFunc_Conv_StringToName_ReturnValue) == 0x000068, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level, CallFunc_Less_IntInt_ReturnValue) == 0x000070, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level, CallFunc_GetLevelActorsByName_ReturnValue) == 0x000078, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level::CallFunc_GetLevelActorsByName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level, CallFunc_FindSubstring_ReturnValue) == 0x000088, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level::CallFunc_FindSubstring_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level, CallFunc_Add_IntInt_ReturnValue) == 0x00008C, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000090, "Member 'BP_FLIB_Gameplay_C_Get_Actor_In_Renkei_Level::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.RemoteEventByLevel
// 0x0038 (0x0038 - 0x0000)
struct BP_FLIB_Gameplay_C_RemoteEventByLevel final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LevelName;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           K2Node_MakeArray_Array;                            // 0x0020(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_SpecificLevelRemoteEvent_ReturnValue;     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_RemoteEventByLevel) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_RemoteEventByLevel");
static_assert(sizeof(BP_FLIB_Gameplay_C_RemoteEventByLevel) == 0x000038, "Wrong size on BP_FLIB_Gameplay_C_RemoteEventByLevel");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoteEventByLevel, EventName) == 0x000000, "Member 'BP_FLIB_Gameplay_C_RemoteEventByLevel::EventName' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoteEventByLevel, LevelName) == 0x000008, "Member 'BP_FLIB_Gameplay_C_RemoteEventByLevel::LevelName' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoteEventByLevel, __WorldContext) == 0x000010, "Member 'BP_FLIB_Gameplay_C_RemoteEventByLevel::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoteEventByLevel, Result) == 0x000018, "Member 'BP_FLIB_Gameplay_C_RemoteEventByLevel::Result' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoteEventByLevel, K2Node_MakeArray_Array) == 0x000020, "Member 'BP_FLIB_Gameplay_C_RemoteEventByLevel::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoteEventByLevel, CallFunc_SpecificLevelRemoteEvent_ReturnValue) == 0x000030, "Member 'BP_FLIB_Gameplay_C_RemoteEventByLevel::CallFunc_SpecificLevelRemoteEvent_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.RemoteEventByLevels
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_Gameplay_C_RemoteEventByLevels final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           LevelNames;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SpecificLevelRemoteEvent_ReturnValue;     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_RemoteEventByLevels) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_RemoteEventByLevels");
static_assert(sizeof(BP_FLIB_Gameplay_C_RemoteEventByLevels) == 0x000028, "Wrong size on BP_FLIB_Gameplay_C_RemoteEventByLevels");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoteEventByLevels, EventName) == 0x000000, "Member 'BP_FLIB_Gameplay_C_RemoteEventByLevels::EventName' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoteEventByLevels, LevelNames) == 0x000008, "Member 'BP_FLIB_Gameplay_C_RemoteEventByLevels::LevelNames' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoteEventByLevels, __WorldContext) == 0x000018, "Member 'BP_FLIB_Gameplay_C_RemoteEventByLevels::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoteEventByLevels, Result) == 0x000020, "Member 'BP_FLIB_Gameplay_C_RemoteEventByLevels::Result' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_RemoteEventByLevels, CallFunc_SpecificLevelRemoteEvent_ReturnValue) == 0x000021, "Member 'BP_FLIB_Gameplay_C_RemoteEventByLevels::CallFunc_SpecificLevelRemoteEvent_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.ForceEquipmentFromDataTable
// 0x0038 (0x0038 - 0x0000)
struct BP_FLIB_Gameplay_C_ForceEquipmentFromDataTable final
{
public:
	EJackCharacter                                Chara;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackEquipmentRegion                          Region;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackLDT_ItemTable                     EquipID;                                           // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          EnableFixupCharacterLooks;                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackItemManager*                       CallFunc_GetItemManager_ReturnValue;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AutoEquipmentAttach_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_ForceEquipmentFromDataTable) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_ForceEquipmentFromDataTable");
static_assert(sizeof(BP_FLIB_Gameplay_C_ForceEquipmentFromDataTable) == 0x000038, "Wrong size on BP_FLIB_Gameplay_C_ForceEquipmentFromDataTable");
static_assert(offsetof(BP_FLIB_Gameplay_C_ForceEquipmentFromDataTable, Chara) == 0x000000, "Member 'BP_FLIB_Gameplay_C_ForceEquipmentFromDataTable::Chara' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_ForceEquipmentFromDataTable, Region) == 0x000001, "Member 'BP_FLIB_Gameplay_C_ForceEquipmentFromDataTable::Region' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_ForceEquipmentFromDataTable, EquipID) == 0x000008, "Member 'BP_FLIB_Gameplay_C_ForceEquipmentFromDataTable::EquipID' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_ForceEquipmentFromDataTable, EnableFixupCharacterLooks) == 0x000018, "Member 'BP_FLIB_Gameplay_C_ForceEquipmentFromDataTable::EnableFixupCharacterLooks' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_ForceEquipmentFromDataTable, __WorldContext) == 0x000020, "Member 'BP_FLIB_Gameplay_C_ForceEquipmentFromDataTable::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_ForceEquipmentFromDataTable, CallFunc_GetItemManager_ReturnValue) == 0x000028, "Member 'BP_FLIB_Gameplay_C_ForceEquipmentFromDataTable::CallFunc_GetItemManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_ForceEquipmentFromDataTable, CallFunc_AutoEquipmentAttach_ReturnValue) == 0x000030, "Member 'BP_FLIB_Gameplay_C_ForceEquipmentFromDataTable::CallFunc_AutoEquipmentAttach_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.GetNowWorldTime
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_Gameplay_C_GetNowWorldTime final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Hour;                                              // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Minute;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Second;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackWorldTime*                         CallFunc_GetWorldTime_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNowHour_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNowSecond_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNowMinute_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_GetNowWorldTime) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_GetNowWorldTime");
static_assert(sizeof(BP_FLIB_Gameplay_C_GetNowWorldTime) == 0x000030, "Wrong size on BP_FLIB_Gameplay_C_GetNowWorldTime");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetNowWorldTime, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_GetNowWorldTime::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetNowWorldTime, Hour) == 0x000008, "Member 'BP_FLIB_Gameplay_C_GetNowWorldTime::Hour' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetNowWorldTime, Minute) == 0x00000C, "Member 'BP_FLIB_Gameplay_C_GetNowWorldTime::Minute' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetNowWorldTime, Second) == 0x000010, "Member 'BP_FLIB_Gameplay_C_GetNowWorldTime::Second' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetNowWorldTime, CallFunc_GetWorldTime_ReturnValue) == 0x000018, "Member 'BP_FLIB_Gameplay_C_GetNowWorldTime::CallFunc_GetWorldTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetNowWorldTime, CallFunc_GetNowHour_ReturnValue) == 0x000020, "Member 'BP_FLIB_Gameplay_C_GetNowWorldTime::CallFunc_GetNowHour_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetNowWorldTime, CallFunc_GetNowSecond_ReturnValue) == 0x000024, "Member 'BP_FLIB_Gameplay_C_GetNowWorldTime::CallFunc_GetNowSecond_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetNowWorldTime, CallFunc_GetNowMinute_ReturnValue) == 0x000028, "Member 'BP_FLIB_Gameplay_C_GetNowWorldTime::CallFunc_GetNowMinute_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Set LOD By Tag
// 0x0058 (0x0058 - 0x0000)
struct BP_FLIB_Gameplay_C_Set_LOD_By_Tag final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LOD;                                               // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetActorsByTag_bSuccess;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetActorsByTag_ReturnValue;               // 0x0020(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AStaticMeshActor*                       K2Node_DynamicCast_AsStatic_Mesh_Actor;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Set_LOD_By_Tag) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Set_LOD_By_Tag");
static_assert(sizeof(BP_FLIB_Gameplay_C_Set_LOD_By_Tag) == 0x000058, "Wrong size on BP_FLIB_Gameplay_C_Set_LOD_By_Tag");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_LOD_By_Tag, Tag) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Set_LOD_By_Tag::Tag' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_LOD_By_Tag, LOD) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Set_LOD_By_Tag::LOD' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_LOD_By_Tag, __WorldContext) == 0x000010, "Member 'BP_FLIB_Gameplay_C_Set_LOD_By_Tag::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_LOD_By_Tag, CallFunc_GetActorsByTag_bSuccess) == 0x000018, "Member 'BP_FLIB_Gameplay_C_Set_LOD_By_Tag::CallFunc_GetActorsByTag_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_LOD_By_Tag, CallFunc_GetActorsByTag_ReturnValue) == 0x000020, "Member 'BP_FLIB_Gameplay_C_Set_LOD_By_Tag::CallFunc_GetActorsByTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_LOD_By_Tag, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_FLIB_Gameplay_C_Set_LOD_By_Tag::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_LOD_By_Tag, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'BP_FLIB_Gameplay_C_Set_LOD_By_Tag::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_LOD_By_Tag, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_FLIB_Gameplay_C_Set_LOD_By_Tag::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_LOD_By_Tag, K2Node_DynamicCast_AsStatic_Mesh_Actor) == 0x000040, "Member 'BP_FLIB_Gameplay_C_Set_LOD_By_Tag::K2Node_DynamicCast_AsStatic_Mesh_Actor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_LOD_By_Tag, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_FLIB_Gameplay_C_Set_LOD_By_Tag::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_LOD_By_Tag, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'BP_FLIB_Gameplay_C_Set_LOD_By_Tag::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_LOD_By_Tag, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'BP_FLIB_Gameplay_C_Set_LOD_By_Tag::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_LOD_By_Tag, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'BP_FLIB_Gameplay_C_Set_LOD_By_Tag::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.GetPartyTalkData
// 0x00F8 (0x00F8 - 0x0000)
struct BP_FLIB_Gameplay_C_GetPartyTalkData final
{
public:
	EJackCharacter                                CharacterID;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PriorityTalk;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FJackPartyTalkDescription              Description;                                       // 0x0010(0x0070)(Parm, OutParm)
	class UJackTextManager*                       CallFunc_GetTextManager_ReturnValue;               // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FJackPartyTalkDescription              CallFunc_GetPartyTalkData_ReturnValue;             // 0x0088(0x0070)()
};
static_assert(alignof(BP_FLIB_Gameplay_C_GetPartyTalkData) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_GetPartyTalkData");
static_assert(sizeof(BP_FLIB_Gameplay_C_GetPartyTalkData) == 0x0000F8, "Wrong size on BP_FLIB_Gameplay_C_GetPartyTalkData");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetPartyTalkData, CharacterID) == 0x000000, "Member 'BP_FLIB_Gameplay_C_GetPartyTalkData::CharacterID' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetPartyTalkData, PriorityTalk) == 0x000001, "Member 'BP_FLIB_Gameplay_C_GetPartyTalkData::PriorityTalk' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetPartyTalkData, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_GetPartyTalkData::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetPartyTalkData, Description) == 0x000010, "Member 'BP_FLIB_Gameplay_C_GetPartyTalkData::Description' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetPartyTalkData, CallFunc_GetTextManager_ReturnValue) == 0x000080, "Member 'BP_FLIB_Gameplay_C_GetPartyTalkData::CallFunc_GetTextManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetPartyTalkData, CallFunc_GetPartyTalkData_ReturnValue) == 0x000088, "Member 'BP_FLIB_Gameplay_C_GetPartyTalkData::CallFunc_GetPartyTalkData_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.IsMapRemainOrb
// 0x00A0 (0x00A0 - 0x0000)
struct BP_FLIB_Gameplay_C_IsMapRemainOrb final
{
public:
	class FName                                   MapId;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRemain;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackItemManager*                       CallFunc_GetItemManager_ReturnValue;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FJackDataTableMap                      CallFunc_GetDataTableRowFromName_OutRow;           // 0x0020(0x0058)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackLDT_GameFlagDataGameProgress      K2Node_MakeStruct_JackLDT_GameFlagDataGameProgress; // 0x0080(0x0010)(NoDestructor)
	bool                                          CallFunc_GetProgressFlag_Flag;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetItemCount_ReturnValue;                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_IsMapRemainOrb) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_IsMapRemainOrb");
static_assert(sizeof(BP_FLIB_Gameplay_C_IsMapRemainOrb) == 0x0000A0, "Wrong size on BP_FLIB_Gameplay_C_IsMapRemainOrb");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsMapRemainOrb, MapId) == 0x000000, "Member 'BP_FLIB_Gameplay_C_IsMapRemainOrb::MapId' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsMapRemainOrb, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_IsMapRemainOrb::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsMapRemainOrb, IsRemain) == 0x000010, "Member 'BP_FLIB_Gameplay_C_IsMapRemainOrb::IsRemain' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsMapRemainOrb, CallFunc_GetItemManager_ReturnValue) == 0x000018, "Member 'BP_FLIB_Gameplay_C_IsMapRemainOrb::CallFunc_GetItemManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsMapRemainOrb, CallFunc_GetDataTableRowFromName_OutRow) == 0x000020, "Member 'BP_FLIB_Gameplay_C_IsMapRemainOrb::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsMapRemainOrb, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000078, "Member 'BP_FLIB_Gameplay_C_IsMapRemainOrb::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsMapRemainOrb, K2Node_MakeStruct_JackLDT_GameFlagDataGameProgress) == 0x000080, "Member 'BP_FLIB_Gameplay_C_IsMapRemainOrb::K2Node_MakeStruct_JackLDT_GameFlagDataGameProgress' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsMapRemainOrb, CallFunc_GetProgressFlag_Flag) == 0x000090, "Member 'BP_FLIB_Gameplay_C_IsMapRemainOrb::CallFunc_GetProgressFlag_Flag' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsMapRemainOrb, CallFunc_Not_PreBool_ReturnValue) == 0x000091, "Member 'BP_FLIB_Gameplay_C_IsMapRemainOrb::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsMapRemainOrb, CallFunc_GetItemCount_ReturnValue) == 0x000094, "Member 'BP_FLIB_Gameplay_C_IsMapRemainOrb::CallFunc_GetItemCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsMapRemainOrb, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000098, "Member 'BP_FLIB_Gameplay_C_IsMapRemainOrb::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsMapRemainOrb, K2Node_SwitchName_CmpSuccess) == 0x000099, "Member 'BP_FLIB_Gameplay_C_IsMapRemainOrb::K2Node_SwitchName_CmpSuccess' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.GetMapOrbFlagName
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_Gameplay_C_GetMapOrbFlagName final
{
public:
	class FName                                   MapId;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   FlagName;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RetFlagName;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_GetMapOrbFlagName) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_GetMapOrbFlagName");
static_assert(sizeof(BP_FLIB_Gameplay_C_GetMapOrbFlagName) == 0x000028, "Wrong size on BP_FLIB_Gameplay_C_GetMapOrbFlagName");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetMapOrbFlagName, MapId) == 0x000000, "Member 'BP_FLIB_Gameplay_C_GetMapOrbFlagName::MapId' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetMapOrbFlagName, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_GetMapOrbFlagName::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetMapOrbFlagName, FlagName) == 0x000010, "Member 'BP_FLIB_Gameplay_C_GetMapOrbFlagName::FlagName' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetMapOrbFlagName, RetFlagName) == 0x000018, "Member 'BP_FLIB_Gameplay_C_GetMapOrbFlagName::RetFlagName' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetMapOrbFlagName, K2Node_SwitchName_CmpSuccess) == 0x000020, "Member 'BP_FLIB_Gameplay_C_GetMapOrbFlagName::K2Node_SwitchName_CmpSuccess' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.SetPlayerYumeNoNaka
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_Gameplay_C_SetPlayerYumeNoNaka final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetGameFlagBool_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_SetPlayerYumeNoNaka) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_SetPlayerYumeNoNaka");
static_assert(sizeof(BP_FLIB_Gameplay_C_SetPlayerYumeNoNaka) == 0x000028, "Wrong size on BP_FLIB_Gameplay_C_SetPlayerYumeNoNaka");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetPlayerYumeNoNaka, On) == 0x000000, "Member 'BP_FLIB_Gameplay_C_SetPlayerYumeNoNaka::On' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetPlayerYumeNoNaka, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_SetPlayerYumeNoNaka::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetPlayerYumeNoNaka, CallFunc_GetGameFlagBool_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_SetPlayerYumeNoNaka::CallFunc_GetGameFlagBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetPlayerYumeNoNaka, CallFunc_GetJackPlayerCharacter_ReturnValue) == 0x000018, "Member 'BP_FLIB_Gameplay_C_SetPlayerYumeNoNaka::CallFunc_GetJackPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetPlayerYumeNoNaka, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000020, "Member 'BP_FLIB_Gameplay_C_SetPlayerYumeNoNaka::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.CalcPlayerMovePosSceneComponentAway
// 0x0220 (0x0220 - 0x0000)
struct BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway final
{
public:
	class USceneComponent*                        NewParam;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnDistance;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0018(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0024(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor)
	bool                                          LocationNG;                                        // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TempLocation;                                      // 0x0034(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempYaw;                                           // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempForwardVector;                                 // 0x0044(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempDistance;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BaseLocation;                                      // 0x0054(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue;       // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue2;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue3;      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue4;      // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0080(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_DynamicCast_AsPrimitive_Component;          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOverlappingActor_ReturnValue;           // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x009C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x00A8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0138(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0144(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0150(0x000C)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult2;      // 0x0160(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue2;         // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E9[0x3];                                      // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x01EC(0x000C)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue2;                 // 0x0204(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0210(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway");
static_assert(sizeof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway) == 0x000220, "Wrong size on BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, NewParam) == 0x000000, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::NewParam' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, ReturnDistance) == 0x000008, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::ReturnDistance' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, __WorldContext) == 0x000010, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, Location) == 0x000018, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::Location' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, Rotation) == 0x000024, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::Rotation' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, LocationNG) == 0x000030, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::LocationNG' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, TempLocation) == 0x000034, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::TempLocation' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, TempYaw) == 0x000040, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::TempYaw' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, TempForwardVector) == 0x000044, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::TempForwardVector' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, TempDistance) == 0x000050, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::TempDistance' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, BaseLocation) == 0x000054, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::BaseLocation' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, CallFunc_GetJackPlayerCharacter_ReturnValue) == 0x000060, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::CallFunc_GetJackPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, CallFunc_GetJackPlayerCharacter_ReturnValue2) == 0x000068, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::CallFunc_GetJackPlayerCharacter_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, CallFunc_GetJackPlayerCharacter_ReturnValue3) == 0x000070, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::CallFunc_GetJackPlayerCharacter_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, CallFunc_GetJackPlayerCharacter_ReturnValue4) == 0x000078, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::CallFunc_GetJackPlayerCharacter_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000080, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, K2Node_DynamicCast_AsPrimitive_Component) == 0x000090, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::K2Node_DynamicCast_AsPrimitive_Component' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, K2Node_DynamicCast_bSuccess) == 0x000098, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, CallFunc_IsOverlappingActor_ReturnValue) == 0x000099, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::CallFunc_IsOverlappingActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00009C, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x0000A8, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000130, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, CallFunc_Add_FloatFloat_ReturnValue) == 0x000134, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000138, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, CallFunc_Add_VectorVector_ReturnValue) == 0x000144, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, CallFunc_MakeRotator_ReturnValue) == 0x000150, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, CallFunc_K2_SetActorLocation_SweepHitResult2) == 0x000160, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::CallFunc_K2_SetActorLocation_SweepHitResult2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, CallFunc_K2_SetActorLocation_ReturnValue2) == 0x0001E8, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::CallFunc_K2_SetActorLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, CallFunc_FindLookAtRotation_ReturnValue) == 0x0001EC, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, CallFunc_BreakRotator_Roll) == 0x0001F8, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, CallFunc_BreakRotator_Pitch) == 0x0001FC, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, CallFunc_BreakRotator_Yaw) == 0x000200, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, CallFunc_MakeRotator_ReturnValue2) == 0x000204, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::CallFunc_MakeRotator_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway, CallFunc_GetForwardVector_ReturnValue) == 0x000210, "Member 'BP_FLIB_Gameplay_C_CalcPlayerMovePosSceneComponentAway::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.CheckMedalExchangeFirstContact
// 0x0040 (0x0040 - 0x0000)
struct BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact final
{
public:
	EJackMedal_Shop                               MedalShopType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_MedalExchangeFirstContact                NewParam;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FlagName;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_MedalExchangeFirstContact                RetType;                                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HaveStamp;                                         // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EJackMedal_Shop                               Temp_byte_Variable;                                // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackItemManager*                       CallFunc_GetItemManager_ReturnValue;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetItemCount_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_MedalExchangeFirstContact                Temp_byte_Variable2;                               // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_MedalExchangeFirstContact                Temp_byte_Variable3;                               // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_MedalExchangeFirstContact                Temp_byte_Variable4;                               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_MedalExchangeFirstContact                K2Node_Select_Default;                             // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_MedalExchangeFirstContact                Temp_byte_Variable5;                               // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackMedal_Shop                               Temp_byte_Variable6;                               // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetGameFlagBool_ReturnValue;              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_MedalExchangeFirstContact                K2Node_Select2_Default;                            // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact");
static_assert(sizeof(BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact) == 0x000040, "Wrong size on BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact, MedalShopType) == 0x000000, "Member 'BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact::MedalShopType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact, NewParam) == 0x000010, "Member 'BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact::NewParam' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact, FlagName) == 0x000018, "Member 'BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact::FlagName' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact, RetType) == 0x000020, "Member 'BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact::RetType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact, HaveStamp) == 0x000021, "Member 'BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact::HaveStamp' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact, Temp_byte_Variable) == 0x000022, "Member 'BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact, CallFunc_GetItemManager_ReturnValue) == 0x000028, "Member 'BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact::CallFunc_GetItemManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact, CallFunc_GetItemCount_ReturnValue) == 0x000030, "Member 'BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact::CallFunc_GetItemCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact, K2Node_SwitchEnum_CmpSuccess) == 0x000034, "Member 'BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000035, "Member 'BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact, Temp_byte_Variable2) == 0x000036, "Member 'BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact, Temp_byte_Variable3) == 0x000037, "Member 'BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact, Temp_byte_Variable4) == 0x000038, "Member 'BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact::Temp_byte_Variable4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact, K2Node_Select_Default) == 0x000039, "Member 'BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact, Temp_byte_Variable5) == 0x00003A, "Member 'BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact::Temp_byte_Variable5' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact, Temp_byte_Variable6) == 0x00003B, "Member 'BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact::Temp_byte_Variable6' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact, CallFunc_GetGameFlagBool_ReturnValue) == 0x00003C, "Member 'BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact::CallFunc_GetGameFlagBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact, K2Node_Select2_Default) == 0x00003D, "Member 'BP_FLIB_Gameplay_C_CheckMedalExchangeFirstContact::K2Node_Select2_Default' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.OnFlagMedalExchangeFirstContact
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Gameplay_C_OnFlagMedalExchangeFirstContact final
{
public:
	EJackMedal_Shop                               MedalShopType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   FlagName;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_OnFlagMedalExchangeFirstContact) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_OnFlagMedalExchangeFirstContact");
static_assert(sizeof(BP_FLIB_Gameplay_C_OnFlagMedalExchangeFirstContact) == 0x000020, "Wrong size on BP_FLIB_Gameplay_C_OnFlagMedalExchangeFirstContact");
static_assert(offsetof(BP_FLIB_Gameplay_C_OnFlagMedalExchangeFirstContact, MedalShopType) == 0x000000, "Member 'BP_FLIB_Gameplay_C_OnFlagMedalExchangeFirstContact::MedalShopType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_OnFlagMedalExchangeFirstContact, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_OnFlagMedalExchangeFirstContact::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_OnFlagMedalExchangeFirstContact, FlagName) == 0x000010, "Member 'BP_FLIB_Gameplay_C_OnFlagMedalExchangeFirstContact::FlagName' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_OnFlagMedalExchangeFirstContact, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'BP_FLIB_Gameplay_C_OnFlagMedalExchangeFirstContact::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.SetLevelVisible
// 0x0068 (0x0068 - 0x0000)
struct BP_FLIB_Gameplay_C_SetLevelVisible final
{
public:
	TArray<class FName>                           LevelNames;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          Visible;                                           // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetVisible;                                        // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         TmpActors;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelStreaming*                        CallFunc_GetStreamingLevel_ReturnValue;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_SetLevelVisible) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_SetLevelVisible");
static_assert(sizeof(BP_FLIB_Gameplay_C_SetLevelVisible) == 0x000068, "Wrong size on BP_FLIB_Gameplay_C_SetLevelVisible");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetLevelVisible, LevelNames) == 0x000000, "Member 'BP_FLIB_Gameplay_C_SetLevelVisible::LevelNames' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetLevelVisible, Visible) == 0x000010, "Member 'BP_FLIB_Gameplay_C_SetLevelVisible::Visible' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetLevelVisible, __WorldContext) == 0x000018, "Member 'BP_FLIB_Gameplay_C_SetLevelVisible::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetLevelVisible, RetVisible) == 0x000020, "Member 'BP_FLIB_Gameplay_C_SetLevelVisible::RetVisible' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetLevelVisible, TmpActors) == 0x000028, "Member 'BP_FLIB_Gameplay_C_SetLevelVisible::TmpActors' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetLevelVisible, Temp_int_Array_Index_Variable) == 0x000038, "Member 'BP_FLIB_Gameplay_C_SetLevelVisible::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetLevelVisible, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_FLIB_Gameplay_C_SetLevelVisible::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetLevelVisible, CallFunc_GetStreamingLevel_ReturnValue) == 0x000048, "Member 'BP_FLIB_Gameplay_C_SetLevelVisible::CallFunc_GetStreamingLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetLevelVisible, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_FLIB_Gameplay_C_SetLevelVisible::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetLevelVisible, CallFunc_IsValid_ReturnValue) == 0x000054, "Member 'BP_FLIB_Gameplay_C_SetLevelVisible::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetLevelVisible, Temp_int_Loop_Counter_Variable) == 0x000058, "Member 'BP_FLIB_Gameplay_C_SetLevelVisible::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetLevelVisible, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'BP_FLIB_Gameplay_C_SetLevelVisible::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetLevelVisible, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'BP_FLIB_Gameplay_C_SetLevelVisible::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.GetItemCount
// 0x0078 (0x0078 - 0x0000)
struct BP_FLIB_Gameplay_C_GetItemCount final
{
public:
	struct FJackLDT_ItemTable                     ItemID;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          IgnoreEquip;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ItemCount;                                         // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetItemCount;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EJackCharacter>                        CheckChara;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	class UJackItemManager*                       CallFunc_GetItemManager_ReturnValue;               // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetItemCount_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EJackCharacter>                        K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EJackCharacter                                CallFunc_Array_Get_Item;                           // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_63[0x1];                                       // 0x0063(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetEquippedItemCount_Count;               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_GetItemCount) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_GetItemCount");
static_assert(sizeof(BP_FLIB_Gameplay_C_GetItemCount) == 0x000078, "Wrong size on BP_FLIB_Gameplay_C_GetItemCount");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetItemCount, ItemID) == 0x000000, "Member 'BP_FLIB_Gameplay_C_GetItemCount::ItemID' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetItemCount, IgnoreEquip) == 0x000010, "Member 'BP_FLIB_Gameplay_C_GetItemCount::IgnoreEquip' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetItemCount, __WorldContext) == 0x000018, "Member 'BP_FLIB_Gameplay_C_GetItemCount::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetItemCount, ItemCount) == 0x000020, "Member 'BP_FLIB_Gameplay_C_GetItemCount::ItemCount' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetItemCount, RetItemCount) == 0x000024, "Member 'BP_FLIB_Gameplay_C_GetItemCount::RetItemCount' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetItemCount, CheckChara) == 0x000028, "Member 'BP_FLIB_Gameplay_C_GetItemCount::CheckChara' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetItemCount, CallFunc_GetItemManager_ReturnValue) == 0x000038, "Member 'BP_FLIB_Gameplay_C_GetItemCount::CallFunc_GetItemManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetItemCount, Temp_int_Array_Index_Variable) == 0x000040, "Member 'BP_FLIB_Gameplay_C_GetItemCount::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetItemCount, CallFunc_GetItemCount_ReturnValue) == 0x000044, "Member 'BP_FLIB_Gameplay_C_GetItemCount::CallFunc_GetItemCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetItemCount, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'BP_FLIB_Gameplay_C_GetItemCount::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetItemCount, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'BP_FLIB_Gameplay_C_GetItemCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetItemCount, K2Node_MakeArray_Array) == 0x000050, "Member 'BP_FLIB_Gameplay_C_GetItemCount::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetItemCount, CallFunc_Greater_IntInt_ReturnValue) == 0x000060, "Member 'BP_FLIB_Gameplay_C_GetItemCount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetItemCount, CallFunc_BooleanAND_ReturnValue) == 0x000061, "Member 'BP_FLIB_Gameplay_C_GetItemCount::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetItemCount, CallFunc_Array_Get_Item) == 0x000062, "Member 'BP_FLIB_Gameplay_C_GetItemCount::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetItemCount, CallFunc_GetEquippedItemCount_Count) == 0x000064, "Member 'BP_FLIB_Gameplay_C_GetItemCount::CallFunc_GetEquippedItemCount_Count' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetItemCount, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'BP_FLIB_Gameplay_C_GetItemCount::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetItemCount, CallFunc_Subtract_IntInt_ReturnValue) == 0x00006C, "Member 'BP_FLIB_Gameplay_C_GetItemCount::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetItemCount, CallFunc_Less_IntInt_ReturnValue) == 0x000070, "Member 'BP_FLIB_Gameplay_C_GetItemCount::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.IsEquippedItem
// 0x0080 (0x0080 - 0x0000)
struct BP_FLIB_Gameplay_C_IsEquippedItem final
{
public:
	EJackCharacter                                CharaType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackLDT_ItemTable                     ItemID;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Equipped;                                          // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackGameCharacterEquippedItem> TmpEquippedItems;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	bool                                          RetEquipped;                                       // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackGameCharacter*                     CallFunc_GetGameCharacter_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FJackGameCharacterEquippedItem> CallFunc_GetEquippedItems_ReturnValue;             // 0x0048(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FJackGameCharacterEquippedItem         CallFunc_Array_Get_Item;                           // 0x0068(0x0010)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_IsEquippedItem) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_IsEquippedItem");
static_assert(sizeof(BP_FLIB_Gameplay_C_IsEquippedItem) == 0x000080, "Wrong size on BP_FLIB_Gameplay_C_IsEquippedItem");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsEquippedItem, CharaType) == 0x000000, "Member 'BP_FLIB_Gameplay_C_IsEquippedItem::CharaType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsEquippedItem, ItemID) == 0x000008, "Member 'BP_FLIB_Gameplay_C_IsEquippedItem::ItemID' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsEquippedItem, __WorldContext) == 0x000018, "Member 'BP_FLIB_Gameplay_C_IsEquippedItem::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsEquippedItem, Equipped) == 0x000020, "Member 'BP_FLIB_Gameplay_C_IsEquippedItem::Equipped' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsEquippedItem, TmpEquippedItems) == 0x000028, "Member 'BP_FLIB_Gameplay_C_IsEquippedItem::TmpEquippedItems' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsEquippedItem, RetEquipped) == 0x000038, "Member 'BP_FLIB_Gameplay_C_IsEquippedItem::RetEquipped' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsEquippedItem, CallFunc_GetGameCharacter_ReturnValue) == 0x000040, "Member 'BP_FLIB_Gameplay_C_IsEquippedItem::CallFunc_GetGameCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsEquippedItem, CallFunc_GetEquippedItems_ReturnValue) == 0x000048, "Member 'BP_FLIB_Gameplay_C_IsEquippedItem::CallFunc_GetEquippedItems_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsEquippedItem, Temp_bool_True_if_break_was_hit_Variable) == 0x000058, "Member 'BP_FLIB_Gameplay_C_IsEquippedItem::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsEquippedItem, CallFunc_Not_PreBool_ReturnValue) == 0x000059, "Member 'BP_FLIB_Gameplay_C_IsEquippedItem::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsEquippedItem, Temp_int_Array_Index_Variable) == 0x00005C, "Member 'BP_FLIB_Gameplay_C_IsEquippedItem::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsEquippedItem, Temp_int_Loop_Counter_Variable) == 0x000060, "Member 'BP_FLIB_Gameplay_C_IsEquippedItem::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsEquippedItem, CallFunc_Add_IntInt_ReturnValue) == 0x000064, "Member 'BP_FLIB_Gameplay_C_IsEquippedItem::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsEquippedItem, CallFunc_Array_Get_Item) == 0x000068, "Member 'BP_FLIB_Gameplay_C_IsEquippedItem::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsEquippedItem, CallFunc_Array_Length_ReturnValue) == 0x000078, "Member 'BP_FLIB_Gameplay_C_IsEquippedItem::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsEquippedItem, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00007C, "Member 'BP_FLIB_Gameplay_C_IsEquippedItem::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsEquippedItem, CallFunc_Less_IntInt_ReturnValue) == 0x00007D, "Member 'BP_FLIB_Gameplay_C_IsEquippedItem::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsEquippedItem, CallFunc_BooleanAND_ReturnValue) == 0x00007E, "Member 'BP_FLIB_Gameplay_C_IsEquippedItem::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.SetRuraCondition
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Gameplay_C_SetRuraCondition final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_SetRuraCondition) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_SetRuraCondition");
static_assert(sizeof(BP_FLIB_Gameplay_C_SetRuraCondition) == 0x000010, "Wrong size on BP_FLIB_Gameplay_C_SetRuraCondition");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetRuraCondition, Enable) == 0x000000, "Member 'BP_FLIB_Gameplay_C_SetRuraCondition::Enable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetRuraCondition, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_SetRuraCondition::__WorldContext' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.IsAcquiredActiveTokugis
// 0x00B0 (0x00B0 - 0x0000)
struct BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis final
{
public:
	EJackCharacter                                Character;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Tokugis;                                           // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          AndCheck;                                          // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Acquired;                                          // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TmpNames;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	bool                                          ChaHave;                                           // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Break;                                             // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Ret;                                               // 0x0042(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackGameCharacter*                     CallFunc_GetGameCharacter_ReturnValue;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetAcquiredActiveTokugis_ReturnValue;     // 0x0058(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable2;                   // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable2;                    // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item2;                          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue2;                // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue2;                 // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis");
static_assert(sizeof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis) == 0x0000B0, "Wrong size on BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, Character) == 0x000000, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::Character' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, Tokugis) == 0x000008, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::Tokugis' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, AndCheck) == 0x000018, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::AndCheck' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, __WorldContext) == 0x000020, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, Acquired) == 0x000028, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::Acquired' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, TmpNames) == 0x000030, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::TmpNames' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, ChaHave) == 0x000040, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::ChaHave' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, Break) == 0x000041, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::Break' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, Ret) == 0x000042, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::Ret' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, CallFunc_GetGameCharacter_ReturnValue) == 0x000048, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::CallFunc_GetGameCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, CallFunc_GetAcquiredActiveTokugis_ReturnValue) == 0x000058, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::CallFunc_GetAcquiredActiveTokugis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, Temp_bool_True_if_break_was_hit_Variable) == 0x00006C, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, Temp_int_Array_Index_Variable) == 0x000070, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, CallFunc_Array_Get_Item) == 0x000078, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, CallFunc_Not_PreBool_ReturnValue) == 0x000080, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, Temp_int_Loop_Counter_Variable) == 0x000084, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, CallFunc_Less_IntInt_ReturnValue) == 0x000088, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, CallFunc_Add_IntInt_ReturnValue) == 0x00008C, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, CallFunc_BooleanAND_ReturnValue) == 0x000090, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, Temp_int_Loop_Counter_Variable2) == 0x000094, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::Temp_int_Loop_Counter_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, CallFunc_Add_IntInt_ReturnValue2) == 0x000098, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, Temp_int_Array_Index_Variable2) == 0x00009C, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::Temp_int_Array_Index_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, CallFunc_Array_Get_Item2) == 0x0000A0, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, CallFunc_Array_Length_ReturnValue2) == 0x0000A8, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::CallFunc_Array_Length_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, CallFunc_EqualEqual_NameName_ReturnValue) == 0x0000AC, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis, CallFunc_Less_IntInt_ReturnValue2) == 0x0000AD, "Member 'BP_FLIB_Gameplay_C_IsAcquiredActiveTokugis::CallFunc_Less_IntInt_ReturnValue2' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.CheckCurrentMapRoom
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Gameplay_C_CheckCurrentMapRoom final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RoomMap;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckCurrentMapConditionID_Ret;           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_CheckCurrentMapRoom) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_CheckCurrentMapRoom");
static_assert(sizeof(BP_FLIB_Gameplay_C_CheckCurrentMapRoom) == 0x000010, "Wrong size on BP_FLIB_Gameplay_C_CheckCurrentMapRoom");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckCurrentMapRoom, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_CheckCurrentMapRoom::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckCurrentMapRoom, RoomMap) == 0x000008, "Member 'BP_FLIB_Gameplay_C_CheckCurrentMapRoom::RoomMap' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckCurrentMapRoom, CallFunc_CheckCurrentMapConditionID_Ret) == 0x000009, "Member 'BP_FLIB_Gameplay_C_CheckCurrentMapRoom::CallFunc_CheckCurrentMapConditionID_Ret' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.CheckCurrentMapConditionID
// 0x0088 (0x0088 - 0x0000)
struct BP_FLIB_Gameplay_C_CheckCurrentMapConditionID final
{
public:
	class FName                                   ConditionID;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackSaveData*                          CallFunc_GetSaveData_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetActiveMapID_ReturnValue;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FJackDataTableMap                      CallFunc_GetDataTableRowFromName_OutRow;           // 0x0028(0x0058)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_CheckCurrentMapConditionID) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_CheckCurrentMapConditionID");
static_assert(sizeof(BP_FLIB_Gameplay_C_CheckCurrentMapConditionID) == 0x000088, "Wrong size on BP_FLIB_Gameplay_C_CheckCurrentMapConditionID");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckCurrentMapConditionID, ConditionID) == 0x000000, "Member 'BP_FLIB_Gameplay_C_CheckCurrentMapConditionID::ConditionID' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckCurrentMapConditionID, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_CheckCurrentMapConditionID::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckCurrentMapConditionID, Ret) == 0x000010, "Member 'BP_FLIB_Gameplay_C_CheckCurrentMapConditionID::Ret' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckCurrentMapConditionID, CallFunc_GetSaveData_ReturnValue) == 0x000018, "Member 'BP_FLIB_Gameplay_C_CheckCurrentMapConditionID::CallFunc_GetSaveData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckCurrentMapConditionID, CallFunc_GetActiveMapID_ReturnValue) == 0x000020, "Member 'BP_FLIB_Gameplay_C_CheckCurrentMapConditionID::CallFunc_GetActiveMapID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckCurrentMapConditionID, CallFunc_GetDataTableRowFromName_OutRow) == 0x000028, "Member 'BP_FLIB_Gameplay_C_CheckCurrentMapConditionID::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckCurrentMapConditionID, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000080, "Member 'BP_FLIB_Gameplay_C_CheckCurrentMapConditionID::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckCurrentMapConditionID, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000081, "Member 'BP_FLIB_Gameplay_C_CheckCurrentMapConditionID::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.SetCullingDistanceVolumeByTag
// 0x0058 (0x0058 - 0x0000)
struct BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetActorsByTag_bSuccess;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetActorsByTag_ReturnValue;               // 0x0020(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACullDistanceVolume*                    K2Node_DynamicCast_AsCull_Distance_Volume;         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag");
static_assert(sizeof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag) == 0x000058, "Wrong size on BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag, Tag) == 0x000000, "Member 'BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag::Tag' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag, Enable) == 0x000008, "Member 'BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag::Enable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag, __WorldContext) == 0x000010, "Member 'BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag, CallFunc_GetActorsByTag_bSuccess) == 0x000018, "Member 'BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag::CallFunc_GetActorsByTag_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag, CallFunc_GetActorsByTag_ReturnValue) == 0x000020, "Member 'BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag::CallFunc_GetActorsByTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag, K2Node_DynamicCast_AsCull_Distance_Volume) == 0x000040, "Member 'BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag::K2Node_DynamicCast_AsCull_Distance_Volume' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'BP_FLIB_Gameplay_C_SetCullingDistanceVolumeByTag::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.SetFogVisibleByTag
// 0x0068 (0x0068 - 0x0000)
struct BP_FLIB_Gameplay_C_SetFogVisibleByTag final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Visible;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetActorsByTag_bSuccess;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetActorsByTag_ReturnValue;               // 0x0020(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AExponentialHeightFog*                  K2Node_DynamicCast_AsExponential_Height_Fog;       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAtmosphericFog*                        K2Node_DynamicCast_AsAtmospheric_Fog;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_SetFogVisibleByTag) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_SetFogVisibleByTag");
static_assert(sizeof(BP_FLIB_Gameplay_C_SetFogVisibleByTag) == 0x000068, "Wrong size on BP_FLIB_Gameplay_C_SetFogVisibleByTag");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFogVisibleByTag, Tag) == 0x000000, "Member 'BP_FLIB_Gameplay_C_SetFogVisibleByTag::Tag' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFogVisibleByTag, Visible) == 0x000008, "Member 'BP_FLIB_Gameplay_C_SetFogVisibleByTag::Visible' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFogVisibleByTag, __WorldContext) == 0x000010, "Member 'BP_FLIB_Gameplay_C_SetFogVisibleByTag::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFogVisibleByTag, CallFunc_GetActorsByTag_bSuccess) == 0x000018, "Member 'BP_FLIB_Gameplay_C_SetFogVisibleByTag::CallFunc_GetActorsByTag_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFogVisibleByTag, CallFunc_GetActorsByTag_ReturnValue) == 0x000020, "Member 'BP_FLIB_Gameplay_C_SetFogVisibleByTag::CallFunc_GetActorsByTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFogVisibleByTag, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_FLIB_Gameplay_C_SetFogVisibleByTag::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFogVisibleByTag, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'BP_FLIB_Gameplay_C_SetFogVisibleByTag::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFogVisibleByTag, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_FLIB_Gameplay_C_SetFogVisibleByTag::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFogVisibleByTag, K2Node_DynamicCast_AsExponential_Height_Fog) == 0x000040, "Member 'BP_FLIB_Gameplay_C_SetFogVisibleByTag::K2Node_DynamicCast_AsExponential_Height_Fog' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFogVisibleByTag, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_FLIB_Gameplay_C_SetFogVisibleByTag::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFogVisibleByTag, K2Node_DynamicCast_AsAtmospheric_Fog) == 0x000050, "Member 'BP_FLIB_Gameplay_C_SetFogVisibleByTag::K2Node_DynamicCast_AsAtmospheric_Fog' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFogVisibleByTag, K2Node_DynamicCast_bSuccess2) == 0x000058, "Member 'BP_FLIB_Gameplay_C_SetFogVisibleByTag::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFogVisibleByTag, Temp_int_Loop_Counter_Variable) == 0x00005C, "Member 'BP_FLIB_Gameplay_C_SetFogVisibleByTag::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFogVisibleByTag, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'BP_FLIB_Gameplay_C_SetFogVisibleByTag::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFogVisibleByTag, CallFunc_Add_IntInt_ReturnValue) == 0x000064, "Member 'BP_FLIB_Gameplay_C_SetFogVisibleByTag::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.ForceEquipmentDetachFromDataTable
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_Gameplay_C_ForceEquipmentDetachFromDataTable final
{
public:
	EJackCharacter                                Chara;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackLDT_ItemTable                     EquipID;                                           // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackItemManager*                       CallFunc_GetItemManager_ReturnValue;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AutoEquipmentDetach_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_ForceEquipmentDetachFromDataTable) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_ForceEquipmentDetachFromDataTable");
static_assert(sizeof(BP_FLIB_Gameplay_C_ForceEquipmentDetachFromDataTable) == 0x000030, "Wrong size on BP_FLIB_Gameplay_C_ForceEquipmentDetachFromDataTable");
static_assert(offsetof(BP_FLIB_Gameplay_C_ForceEquipmentDetachFromDataTable, Chara) == 0x000000, "Member 'BP_FLIB_Gameplay_C_ForceEquipmentDetachFromDataTable::Chara' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_ForceEquipmentDetachFromDataTable, EquipID) == 0x000008, "Member 'BP_FLIB_Gameplay_C_ForceEquipmentDetachFromDataTable::EquipID' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_ForceEquipmentDetachFromDataTable, __WorldContext) == 0x000018, "Member 'BP_FLIB_Gameplay_C_ForceEquipmentDetachFromDataTable::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_ForceEquipmentDetachFromDataTable, CallFunc_GetItemManager_ReturnValue) == 0x000020, "Member 'BP_FLIB_Gameplay_C_ForceEquipmentDetachFromDataTable::CallFunc_GetItemManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_ForceEquipmentDetachFromDataTable, CallFunc_AutoEquipmentDetach_ReturnValue) == 0x000028, "Member 'BP_FLIB_Gameplay_C_ForceEquipmentDetachFromDataTable::CallFunc_AutoEquipmentDetach_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.MakeItemGetMessageTag
// 0x0040 (0x0040 - 0x0000)
struct BP_FLIB_Gameplay_C_MakeItemGetMessageTag final
{
public:
	class FName                                   ItemID;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ItemCount;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackItem_Bag                                 BagType;                                           // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FJackMessageArgumentData>       Tags;                                              // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor)
	class UJackItemManager*                       CallFunc_GetItemManager_ReturnValue;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FJackMessageArgumentData>       CallFunc_MakeItemGetMessageTag_ReturnValue;        // 0x0030(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(BP_FLIB_Gameplay_C_MakeItemGetMessageTag) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_MakeItemGetMessageTag");
static_assert(sizeof(BP_FLIB_Gameplay_C_MakeItemGetMessageTag) == 0x000040, "Wrong size on BP_FLIB_Gameplay_C_MakeItemGetMessageTag");
static_assert(offsetof(BP_FLIB_Gameplay_C_MakeItemGetMessageTag, ItemID) == 0x000000, "Member 'BP_FLIB_Gameplay_C_MakeItemGetMessageTag::ItemID' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_MakeItemGetMessageTag, ItemCount) == 0x000008, "Member 'BP_FLIB_Gameplay_C_MakeItemGetMessageTag::ItemCount' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_MakeItemGetMessageTag, BagType) == 0x00000C, "Member 'BP_FLIB_Gameplay_C_MakeItemGetMessageTag::BagType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_MakeItemGetMessageTag, __WorldContext) == 0x000010, "Member 'BP_FLIB_Gameplay_C_MakeItemGetMessageTag::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_MakeItemGetMessageTag, Tags) == 0x000018, "Member 'BP_FLIB_Gameplay_C_MakeItemGetMessageTag::Tags' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_MakeItemGetMessageTag, CallFunc_GetItemManager_ReturnValue) == 0x000028, "Member 'BP_FLIB_Gameplay_C_MakeItemGetMessageTag::CallFunc_GetItemManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_MakeItemGetMessageTag, CallFunc_MakeItemGetMessageTag_ReturnValue) == 0x000030, "Member 'BP_FLIB_Gameplay_C_MakeItemGetMessageTag::CallFunc_MakeItemGetMessageTag_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.SetCullingDistanceVolumeForActorByTag
// 0x0050 (0x0050 - 0x0000)
struct BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetActorsByTag_bSuccess;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetActorsByTag_ReturnValue;               // 0x0020(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag");
static_assert(sizeof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag) == 0x000050, "Wrong size on BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag, Tag) == 0x000000, "Member 'BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag::Tag' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag, Enable) == 0x000008, "Member 'BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag::Enable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag, __WorldContext) == 0x000010, "Member 'BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag, CallFunc_GetActorsByTag_bSuccess) == 0x000018, "Member 'BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag::CallFunc_GetActorsByTag_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag, CallFunc_GetActorsByTag_ReturnValue) == 0x000020, "Member 'BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag::CallFunc_GetActorsByTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'BP_FLIB_Gameplay_C_SetCullingDistanceVolumeForActorByTag::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.SetFriendCoordinate
// 0x0090 (0x0090 - 0x0000)
struct BP_FLIB_Gameplay_C_SetFriendCoordinate final
{
public:
	EJackCharacter                                Friend;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackLDT_Coordinate                    Coordinate;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          Reset;                                             // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          QueryFilterAll;                                    // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UJackFriendGameCharacter*>       TmpFriends;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	class FName                                   Temp_name_Variable;                                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackGamePlayer*                        CallFunc_GetJackGamePlayer_ReturnValue;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackFriendGameCharacter*               CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCharacterType_ReturnValue;              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EJackFriendCharacterQueryFilter               Temp_byte_Variable;                                // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackFriendCharacterQueryFilter               Temp_byte_Variable2;                               // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable2;                               // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EJackFriendCharacterQueryFilter               K2Node_Select2_Default;                            // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B[0x5];                                       // 0x007B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJackFriendGameCharacter*>       CallFunc_GetPartyMembers_ReturnValue;              // 0x0080(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(BP_FLIB_Gameplay_C_SetFriendCoordinate) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_SetFriendCoordinate");
static_assert(sizeof(BP_FLIB_Gameplay_C_SetFriendCoordinate) == 0x000090, "Wrong size on BP_FLIB_Gameplay_C_SetFriendCoordinate");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFriendCoordinate, Friend) == 0x000000, "Member 'BP_FLIB_Gameplay_C_SetFriendCoordinate::Friend' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFriendCoordinate, Coordinate) == 0x000008, "Member 'BP_FLIB_Gameplay_C_SetFriendCoordinate::Coordinate' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFriendCoordinate, Reset) == 0x000018, "Member 'BP_FLIB_Gameplay_C_SetFriendCoordinate::Reset' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFriendCoordinate, QueryFilterAll) == 0x000019, "Member 'BP_FLIB_Gameplay_C_SetFriendCoordinate::QueryFilterAll' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFriendCoordinate, __WorldContext) == 0x000020, "Member 'BP_FLIB_Gameplay_C_SetFriendCoordinate::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFriendCoordinate, TmpFriends) == 0x000028, "Member 'BP_FLIB_Gameplay_C_SetFriendCoordinate::TmpFriends' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFriendCoordinate, Temp_name_Variable) == 0x000038, "Member 'BP_FLIB_Gameplay_C_SetFriendCoordinate::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFriendCoordinate, CallFunc_GetJackGamePlayer_ReturnValue) == 0x000040, "Member 'BP_FLIB_Gameplay_C_SetFriendCoordinate::CallFunc_GetJackGamePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFriendCoordinate, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BP_FLIB_Gameplay_C_SetFriendCoordinate::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFriendCoordinate, Temp_int_Array_Index_Variable) == 0x00004C, "Member 'BP_FLIB_Gameplay_C_SetFriendCoordinate::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFriendCoordinate, Temp_int_Loop_Counter_Variable) == 0x000050, "Member 'BP_FLIB_Gameplay_C_SetFriendCoordinate::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFriendCoordinate, CallFunc_Array_Get_Item) == 0x000058, "Member 'BP_FLIB_Gameplay_C_SetFriendCoordinate::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFriendCoordinate, CallFunc_IsCharacterType_ReturnValue) == 0x000060, "Member 'BP_FLIB_Gameplay_C_SetFriendCoordinate::CallFunc_IsCharacterType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFriendCoordinate, CallFunc_Less_IntInt_ReturnValue) == 0x000061, "Member 'BP_FLIB_Gameplay_C_SetFriendCoordinate::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFriendCoordinate, CallFunc_Add_IntInt_ReturnValue) == 0x000064, "Member 'BP_FLIB_Gameplay_C_SetFriendCoordinate::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFriendCoordinate, Temp_bool_Variable) == 0x000068, "Member 'BP_FLIB_Gameplay_C_SetFriendCoordinate::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFriendCoordinate, Temp_byte_Variable) == 0x000069, "Member 'BP_FLIB_Gameplay_C_SetFriendCoordinate::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFriendCoordinate, K2Node_Select_Default) == 0x000070, "Member 'BP_FLIB_Gameplay_C_SetFriendCoordinate::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFriendCoordinate, Temp_byte_Variable2) == 0x000078, "Member 'BP_FLIB_Gameplay_C_SetFriendCoordinate::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFriendCoordinate, Temp_bool_Variable2) == 0x000079, "Member 'BP_FLIB_Gameplay_C_SetFriendCoordinate::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFriendCoordinate, K2Node_Select2_Default) == 0x00007A, "Member 'BP_FLIB_Gameplay_C_SetFriendCoordinate::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetFriendCoordinate, CallFunc_GetPartyMembers_ReturnValue) == 0x000080, "Member 'BP_FLIB_Gameplay_C_SetFriendCoordinate::CallFunc_GetPartyMembers_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.IncreaseSeedCorrectMiryoku
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Gameplay_C_IncreaseSeedCorrectMiryoku final
{
public:
	EJackCharacter                                Character;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InIncrease;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackGameCharacter*                     CallFunc_GetGameCharacter_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_IncreaseSeedCorrectMiryoku_ReturnValue;   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_IncreaseSeedCorrectMiryoku) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_IncreaseSeedCorrectMiryoku");
static_assert(sizeof(BP_FLIB_Gameplay_C_IncreaseSeedCorrectMiryoku) == 0x000020, "Wrong size on BP_FLIB_Gameplay_C_IncreaseSeedCorrectMiryoku");
static_assert(offsetof(BP_FLIB_Gameplay_C_IncreaseSeedCorrectMiryoku, Character) == 0x000000, "Member 'BP_FLIB_Gameplay_C_IncreaseSeedCorrectMiryoku::Character' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IncreaseSeedCorrectMiryoku, InIncrease) == 0x000004, "Member 'BP_FLIB_Gameplay_C_IncreaseSeedCorrectMiryoku::InIncrease' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IncreaseSeedCorrectMiryoku, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_IncreaseSeedCorrectMiryoku::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IncreaseSeedCorrectMiryoku, CallFunc_GetGameCharacter_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_IncreaseSeedCorrectMiryoku::CallFunc_GetGameCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IncreaseSeedCorrectMiryoku, CallFunc_IncreaseSeedCorrectMiryoku_ReturnValue) == 0x000018, "Member 'BP_FLIB_Gameplay_C_IncreaseSeedCorrectMiryoku::CallFunc_IncreaseSeedCorrectMiryoku_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.GetCharaTypeFromBagType
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Gameplay_C_GetCharaTypeFromBagType final
{
public:
	EJackItem_Bag                                 InBagType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacter                                CharaType;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackItem_Bag                                 Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacter                                CallFunc_GetJackPlayerCharacterType_Type;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacter                                Temp_byte_Variable2;                               // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacter                                Temp_byte_Variable3;                               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacter                                Temp_byte_Variable4;                               // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacter                                Temp_byte_Variable5;                               // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacter                                Temp_byte_Variable6;                               // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacter                                Temp_byte_Variable7;                               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacter                                Temp_byte_Variable8;                               // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacter                                Temp_byte_Variable9;                               // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacter                                Temp_byte_Variable10;                              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacter                                Temp_byte_Variable11;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacter                                K2Node_Select_Default;                             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_GetCharaTypeFromBagType) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_GetCharaTypeFromBagType");
static_assert(sizeof(BP_FLIB_Gameplay_C_GetCharaTypeFromBagType) == 0x000020, "Wrong size on BP_FLIB_Gameplay_C_GetCharaTypeFromBagType");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetCharaTypeFromBagType, InBagType) == 0x000000, "Member 'BP_FLIB_Gameplay_C_GetCharaTypeFromBagType::InBagType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetCharaTypeFromBagType, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_GetCharaTypeFromBagType::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetCharaTypeFromBagType, CharaType) == 0x000010, "Member 'BP_FLIB_Gameplay_C_GetCharaTypeFromBagType::CharaType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetCharaTypeFromBagType, Temp_byte_Variable) == 0x000011, "Member 'BP_FLIB_Gameplay_C_GetCharaTypeFromBagType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetCharaTypeFromBagType, CallFunc_GetJackPlayerCharacterType_Type) == 0x000012, "Member 'BP_FLIB_Gameplay_C_GetCharaTypeFromBagType::CallFunc_GetJackPlayerCharacterType_Type' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetCharaTypeFromBagType, Temp_byte_Variable2) == 0x000013, "Member 'BP_FLIB_Gameplay_C_GetCharaTypeFromBagType::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetCharaTypeFromBagType, Temp_byte_Variable3) == 0x000014, "Member 'BP_FLIB_Gameplay_C_GetCharaTypeFromBagType::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetCharaTypeFromBagType, Temp_byte_Variable4) == 0x000015, "Member 'BP_FLIB_Gameplay_C_GetCharaTypeFromBagType::Temp_byte_Variable4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetCharaTypeFromBagType, Temp_byte_Variable5) == 0x000016, "Member 'BP_FLIB_Gameplay_C_GetCharaTypeFromBagType::Temp_byte_Variable5' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetCharaTypeFromBagType, Temp_byte_Variable6) == 0x000017, "Member 'BP_FLIB_Gameplay_C_GetCharaTypeFromBagType::Temp_byte_Variable6' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetCharaTypeFromBagType, Temp_byte_Variable7) == 0x000018, "Member 'BP_FLIB_Gameplay_C_GetCharaTypeFromBagType::Temp_byte_Variable7' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetCharaTypeFromBagType, Temp_byte_Variable8) == 0x000019, "Member 'BP_FLIB_Gameplay_C_GetCharaTypeFromBagType::Temp_byte_Variable8' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetCharaTypeFromBagType, Temp_byte_Variable9) == 0x00001A, "Member 'BP_FLIB_Gameplay_C_GetCharaTypeFromBagType::Temp_byte_Variable9' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetCharaTypeFromBagType, Temp_byte_Variable10) == 0x00001B, "Member 'BP_FLIB_Gameplay_C_GetCharaTypeFromBagType::Temp_byte_Variable10' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetCharaTypeFromBagType, Temp_byte_Variable11) == 0x00001C, "Member 'BP_FLIB_Gameplay_C_GetCharaTypeFromBagType::Temp_byte_Variable11' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetCharaTypeFromBagType, K2Node_Select_Default) == 0x00001D, "Member 'BP_FLIB_Gameplay_C_GetCharaTypeFromBagType::K2Node_Select_Default' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.GetCharaDisplayNameFromCharaType
// 0x0038 (0x0038 - 0x0000)
struct BP_FLIB_Gameplay_C_GetCharaDisplayNameFromCharaType final
{
public:
	EJackCharacter                                CharaType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class UJackGameCharacter*                     CallFunc_GetGameCharacter_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_GetCharaDisplayNameFromCharaType) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_GetCharaDisplayNameFromCharaType");
static_assert(sizeof(BP_FLIB_Gameplay_C_GetCharaDisplayNameFromCharaType) == 0x000038, "Wrong size on BP_FLIB_Gameplay_C_GetCharaDisplayNameFromCharaType");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetCharaDisplayNameFromCharaType, CharaType) == 0x000000, "Member 'BP_FLIB_Gameplay_C_GetCharaDisplayNameFromCharaType::CharaType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetCharaDisplayNameFromCharaType, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_GetCharaDisplayNameFromCharaType::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetCharaDisplayNameFromCharaType, DisplayName) == 0x000010, "Member 'BP_FLIB_Gameplay_C_GetCharaDisplayNameFromCharaType::DisplayName' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetCharaDisplayNameFromCharaType, CallFunc_GetGameCharacter_ReturnValue) == 0x000020, "Member 'BP_FLIB_Gameplay_C_GetCharaDisplayNameFromCharaType::CallFunc_GetGameCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetCharaDisplayNameFromCharaType, CallFunc_GetDisplayName_ReturnValue) == 0x000028, "Member 'BP_FLIB_Gameplay_C_GetCharaDisplayNameFromCharaType::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.SetPlayerWeaponHiddenForCamp
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_Gameplay_C_SetPlayerWeaponHiddenForCamp final
{
public:
	bool                                          NewHidden;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackEquipmentControlComponent*         CallFunc_GetJackEquipmentControlComponent_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_SetPlayerWeaponHiddenForCamp) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_SetPlayerWeaponHiddenForCamp");
static_assert(sizeof(BP_FLIB_Gameplay_C_SetPlayerWeaponHiddenForCamp) == 0x000028, "Wrong size on BP_FLIB_Gameplay_C_SetPlayerWeaponHiddenForCamp");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetPlayerWeaponHiddenForCamp, NewHidden) == 0x000000, "Member 'BP_FLIB_Gameplay_C_SetPlayerWeaponHiddenForCamp::NewHidden' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetPlayerWeaponHiddenForCamp, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_SetPlayerWeaponHiddenForCamp::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetPlayerWeaponHiddenForCamp, CallFunc_GetJackPlayerCharacter_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_SetPlayerWeaponHiddenForCamp::CallFunc_GetJackPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetPlayerWeaponHiddenForCamp, CallFunc_GetJackEquipmentControlComponent_ReturnValue) == 0x000018, "Member 'BP_FLIB_Gameplay_C_SetPlayerWeaponHiddenForCamp::CallFunc_GetJackEquipmentControlComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetPlayerWeaponHiddenForCamp, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_FLIB_Gameplay_C_SetPlayerWeaponHiddenForCamp::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetPlayerWeaponHiddenForCamp, CallFunc_IsValid_ReturnValue2) == 0x000021, "Member 'BP_FLIB_Gameplay_C_SetPlayerWeaponHiddenForCamp::CallFunc_IsValid_ReturnValue2' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.SetCutsceneHidden
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Gameplay_C_SetCutsceneHidden final
{
public:
	bool                                          NewHidden;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NPCVisible;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_SetCutsceneHidden) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_SetCutsceneHidden");
static_assert(sizeof(BP_FLIB_Gameplay_C_SetCutsceneHidden) == 0x000018, "Wrong size on BP_FLIB_Gameplay_C_SetCutsceneHidden");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCutsceneHidden, NewHidden) == 0x000000, "Member 'BP_FLIB_Gameplay_C_SetCutsceneHidden::NewHidden' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCutsceneHidden, NPCVisible) == 0x000001, "Member 'BP_FLIB_Gameplay_C_SetCutsceneHidden::NPCVisible' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCutsceneHidden, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_SetCutsceneHidden::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCutsceneHidden, CallFunc_GetJackPlayerCharacter_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_SetCutsceneHidden::CallFunc_GetJackPlayerCharacter_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.CutsceneAfterHiddenOffForEventBattle
// 0x01E0 (0x01E0 - 0x0000)
struct BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle final
{
public:
	class FName                                   EventBattleID;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0020(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackDataTableCutSceneInfo             CallFunc_GetDataTableRowFromName_OutRow;           // 0x0048(0x0190)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle");
static_assert(sizeof(BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle) == 0x0001E0, "Wrong size on BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle");
static_assert(offsetof(BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle, EventBattleID) == 0x000000, "Member 'BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle::EventBattleID' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000020, "Member 'BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle, CallFunc_GetDataTableRowFromName_OutRow) == 0x000048, "Member 'BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0001D8, "Member 'BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle, CallFunc_EqualEqual_NameName_ReturnValue) == 0x0001D9, "Member 'BP_FLIB_Gameplay_C_CutsceneAfterHiddenOffForEventBattle::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.StartEventPlayerSettingIECustom
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom final
{
public:
	bool                                          EventWrapper;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanPossessPlayerControl_ReturnValue;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EJackGamePlayerConditionControlPurpose        Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackGamePlayerConditionControlPurpose        Temp_byte_Variable2;                               // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EJackGamePlayerConditionControlPurpose        K2Node_Select_Default;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom");
static_assert(sizeof(BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom) == 0x000018, "Wrong size on BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom, EventWrapper) == 0x000000, "Member 'BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom::EventWrapper' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom, CallFunc_CanPossessPlayerControl_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom::CallFunc_CanPossessPlayerControl_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom, Temp_byte_Variable) == 0x000011, "Member 'BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom, Temp_byte_Variable2) == 0x000012, "Member 'BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom, Temp_bool_Variable) == 0x000013, "Member 'BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom, K2Node_Select_Default) == 0x000014, "Member 'BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom::K2Node_Select_Default' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.CheckStartEventPlayerSettingPossess
// 0x0040 (0x0040 - 0x0000)
struct BP_FLIB_Gameplay_C_CheckStartEventPlayerSettingPossess final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetGameFlagBool_ReturnValue;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetGameFlagString_ReturnValue;            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue2;               // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_CheckStartEventPlayerSettingPossess) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_CheckStartEventPlayerSettingPossess");
static_assert(sizeof(BP_FLIB_Gameplay_C_CheckStartEventPlayerSettingPossess) == 0x000040, "Wrong size on BP_FLIB_Gameplay_C_CheckStartEventPlayerSettingPossess");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckStartEventPlayerSettingPossess, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_CheckStartEventPlayerSettingPossess::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckStartEventPlayerSettingPossess, CallFunc_GetGameFlagBool_ReturnValue) == 0x000008, "Member 'BP_FLIB_Gameplay_C_CheckStartEventPlayerSettingPossess::CallFunc_GetGameFlagBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckStartEventPlayerSettingPossess, CallFunc_GetGameFlagString_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_CheckStartEventPlayerSettingPossess::CallFunc_GetGameFlagString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckStartEventPlayerSettingPossess, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'BP_FLIB_Gameplay_C_CheckStartEventPlayerSettingPossess::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CheckStartEventPlayerSettingPossess, CallFunc_Concat_StrStr_ReturnValue2) == 0x000030, "Member 'BP_FLIB_Gameplay_C_CheckStartEventPlayerSettingPossess::CallFunc_Concat_StrStr_ReturnValue2' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.CallIFStartCutScene
// 0x0060 (0x0060 - 0x0000)
struct BP_FLIB_Gameplay_C_CallIFStartCutScene final
{
public:
	class FName                                   CSID;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         TempActors;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<class AActor*>                         CallFunc_GetAllActorsWithInterface_OutActors;      // 0x0020(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBP_IF_CutScene_C>     K2Node_DynamicCast_AsBP_IF_Cut_Scene;              // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_CallIFStartCutScene) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_CallIFStartCutScene");
static_assert(sizeof(BP_FLIB_Gameplay_C_CallIFStartCutScene) == 0x000060, "Wrong size on BP_FLIB_Gameplay_C_CallIFStartCutScene");
static_assert(offsetof(BP_FLIB_Gameplay_C_CallIFStartCutScene, CSID) == 0x000000, "Member 'BP_FLIB_Gameplay_C_CallIFStartCutScene::CSID' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CallIFStartCutScene, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_CallIFStartCutScene::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CallIFStartCutScene, TempActors) == 0x000010, "Member 'BP_FLIB_Gameplay_C_CallIFStartCutScene::TempActors' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CallIFStartCutScene, CallFunc_GetAllActorsWithInterface_OutActors) == 0x000020, "Member 'BP_FLIB_Gameplay_C_CallIFStartCutScene::CallFunc_GetAllActorsWithInterface_OutActors' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CallIFStartCutScene, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_FLIB_Gameplay_C_CallIFStartCutScene::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CallIFStartCutScene, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'BP_FLIB_Gameplay_C_CallIFStartCutScene::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CallIFStartCutScene, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_FLIB_Gameplay_C_CallIFStartCutScene::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CallIFStartCutScene, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_FLIB_Gameplay_C_CallIFStartCutScene::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CallIFStartCutScene, K2Node_DynamicCast_AsBP_IF_Cut_Scene) == 0x000048, "Member 'BP_FLIB_Gameplay_C_CallIFStartCutScene::K2Node_DynamicCast_AsBP_IF_Cut_Scene' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CallIFStartCutScene, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'BP_FLIB_Gameplay_C_CallIFStartCutScene::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CallIFStartCutScene, CallFunc_Less_IntInt_ReturnValue) == 0x000059, "Member 'BP_FLIB_Gameplay_C_CallIFStartCutScene::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CallIFStartCutScene, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'BP_FLIB_Gameplay_C_CallIFStartCutScene::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.CallIFEndCutScene
// 0x0060 (0x0060 - 0x0000)
struct BP_FLIB_Gameplay_C_CallIFEndCutScene final
{
public:
	class FName                                   CSID;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         TempActors;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<class AActor*>                         CallFunc_GetAllActorsWithInterface_OutActors;      // 0x0020(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBP_IF_CutScene_C>     K2Node_DynamicCast_AsBP_IF_Cut_Scene;              // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_CallIFEndCutScene) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_CallIFEndCutScene");
static_assert(sizeof(BP_FLIB_Gameplay_C_CallIFEndCutScene) == 0x000060, "Wrong size on BP_FLIB_Gameplay_C_CallIFEndCutScene");
static_assert(offsetof(BP_FLIB_Gameplay_C_CallIFEndCutScene, CSID) == 0x000000, "Member 'BP_FLIB_Gameplay_C_CallIFEndCutScene::CSID' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CallIFEndCutScene, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_CallIFEndCutScene::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CallIFEndCutScene, TempActors) == 0x000010, "Member 'BP_FLIB_Gameplay_C_CallIFEndCutScene::TempActors' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CallIFEndCutScene, CallFunc_GetAllActorsWithInterface_OutActors) == 0x000020, "Member 'BP_FLIB_Gameplay_C_CallIFEndCutScene::CallFunc_GetAllActorsWithInterface_OutActors' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CallIFEndCutScene, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_FLIB_Gameplay_C_CallIFEndCutScene::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CallIFEndCutScene, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'BP_FLIB_Gameplay_C_CallIFEndCutScene::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CallIFEndCutScene, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_FLIB_Gameplay_C_CallIFEndCutScene::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CallIFEndCutScene, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_FLIB_Gameplay_C_CallIFEndCutScene::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CallIFEndCutScene, K2Node_DynamicCast_AsBP_IF_Cut_Scene) == 0x000048, "Member 'BP_FLIB_Gameplay_C_CallIFEndCutScene::K2Node_DynamicCast_AsBP_IF_Cut_Scene' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CallIFEndCutScene, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'BP_FLIB_Gameplay_C_CallIFEndCutScene::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CallIFEndCutScene, CallFunc_Less_IntInt_ReturnValue) == 0x000059, "Member 'BP_FLIB_Gameplay_C_CallIFEndCutScene::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_CallIFEndCutScene, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'BP_FLIB_Gameplay_C_CallIFEndCutScene::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.AllActorChangeSystemFlag
// 0x0060 (0x0060 - 0x0000)
struct BP_FLIB_Gameplay_C_AllActorChangeSystemFlag final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         TempActors;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<class AActor*>                         CallFunc_GetAllActorsWithInterface_OutActors;      // 0x0018(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBP_IF_ChangeFlag_C>   K2Node_DynamicCast_AsBP_IF_Change_Flag;            // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_AllActorChangeSystemFlag) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_AllActorChangeSystemFlag");
static_assert(sizeof(BP_FLIB_Gameplay_C_AllActorChangeSystemFlag) == 0x000060, "Wrong size on BP_FLIB_Gameplay_C_AllActorChangeSystemFlag");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllActorChangeSystemFlag, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_AllActorChangeSystemFlag::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllActorChangeSystemFlag, TempActors) == 0x000008, "Member 'BP_FLIB_Gameplay_C_AllActorChangeSystemFlag::TempActors' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllActorChangeSystemFlag, CallFunc_GetAllActorsWithInterface_OutActors) == 0x000018, "Member 'BP_FLIB_Gameplay_C_AllActorChangeSystemFlag::CallFunc_GetAllActorsWithInterface_OutActors' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllActorChangeSystemFlag, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BP_FLIB_Gameplay_C_AllActorChangeSystemFlag::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllActorChangeSystemFlag, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'BP_FLIB_Gameplay_C_AllActorChangeSystemFlag::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllActorChangeSystemFlag, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_FLIB_Gameplay_C_AllActorChangeSystemFlag::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllActorChangeSystemFlag, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'BP_FLIB_Gameplay_C_AllActorChangeSystemFlag::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllActorChangeSystemFlag, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_FLIB_Gameplay_C_AllActorChangeSystemFlag::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllActorChangeSystemFlag, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'BP_FLIB_Gameplay_C_AllActorChangeSystemFlag::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllActorChangeSystemFlag, K2Node_DynamicCast_AsBP_IF_Change_Flag) == 0x000048, "Member 'BP_FLIB_Gameplay_C_AllActorChangeSystemFlag::K2Node_DynamicCast_AsBP_IF_Change_Flag' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_AllActorChangeSystemFlag, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'BP_FLIB_Gameplay_C_AllActorChangeSystemFlag::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.SetVisibleLightByTag
// 0x0058 (0x0058 - 0x0000)
struct BP_FLIB_Gameplay_C_SetVisibleLightByTag final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Visible;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetActorsByTag_bSuccess;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetActorsByTag_ReturnValue;               // 0x0020(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ALight*                                 K2Node_DynamicCast_AsLight;                        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_SetVisibleLightByTag) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_SetVisibleLightByTag");
static_assert(sizeof(BP_FLIB_Gameplay_C_SetVisibleLightByTag) == 0x000058, "Wrong size on BP_FLIB_Gameplay_C_SetVisibleLightByTag");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetVisibleLightByTag, Tag) == 0x000000, "Member 'BP_FLIB_Gameplay_C_SetVisibleLightByTag::Tag' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetVisibleLightByTag, Visible) == 0x000008, "Member 'BP_FLIB_Gameplay_C_SetVisibleLightByTag::Visible' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetVisibleLightByTag, __WorldContext) == 0x000010, "Member 'BP_FLIB_Gameplay_C_SetVisibleLightByTag::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetVisibleLightByTag, CallFunc_GetActorsByTag_bSuccess) == 0x000018, "Member 'BP_FLIB_Gameplay_C_SetVisibleLightByTag::CallFunc_GetActorsByTag_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetVisibleLightByTag, CallFunc_GetActorsByTag_ReturnValue) == 0x000020, "Member 'BP_FLIB_Gameplay_C_SetVisibleLightByTag::CallFunc_GetActorsByTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetVisibleLightByTag, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_FLIB_Gameplay_C_SetVisibleLightByTag::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetVisibleLightByTag, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'BP_FLIB_Gameplay_C_SetVisibleLightByTag::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetVisibleLightByTag, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_FLIB_Gameplay_C_SetVisibleLightByTag::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetVisibleLightByTag, K2Node_DynamicCast_AsLight) == 0x000040, "Member 'BP_FLIB_Gameplay_C_SetVisibleLightByTag::K2Node_DynamicCast_AsLight' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetVisibleLightByTag, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_FLIB_Gameplay_C_SetVisibleLightByTag::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetVisibleLightByTag, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'BP_FLIB_Gameplay_C_SetVisibleLightByTag::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetVisibleLightByTag, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'BP_FLIB_Gameplay_C_SetVisibleLightByTag::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetVisibleLightByTag, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'BP_FLIB_Gameplay_C_SetVisibleLightByTag::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.TalkResurrectionFriend
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_Gameplay_C_TalkResurrectionFriend final
{
public:
	class FName                                   TextID;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacter                                Character;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackTextManager*                       CallFunc_GetTextManager_ReturnValue;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetTalkerIDFromTextID_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_TalkResurrectionFriend) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_TalkResurrectionFriend");
static_assert(sizeof(BP_FLIB_Gameplay_C_TalkResurrectionFriend) == 0x000030, "Wrong size on BP_FLIB_Gameplay_C_TalkResurrectionFriend");
static_assert(offsetof(BP_FLIB_Gameplay_C_TalkResurrectionFriend, TextID) == 0x000000, "Member 'BP_FLIB_Gameplay_C_TalkResurrectionFriend::TextID' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_TalkResurrectionFriend, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_TalkResurrectionFriend::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_TalkResurrectionFriend, Character) == 0x000010, "Member 'BP_FLIB_Gameplay_C_TalkResurrectionFriend::Character' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_TalkResurrectionFriend, CallFunc_GetTextManager_ReturnValue) == 0x000018, "Member 'BP_FLIB_Gameplay_C_TalkResurrectionFriend::CallFunc_GetTextManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_TalkResurrectionFriend, CallFunc_GetTalkerIDFromTextID_ReturnValue) == 0x000020, "Member 'BP_FLIB_Gameplay_C_TalkResurrectionFriend::CallFunc_GetTalkerIDFromTextID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_TalkResurrectionFriend, K2Node_SwitchName_CmpSuccess) == 0x000028, "Member 'BP_FLIB_Gameplay_C_TalkResurrectionFriend::K2Node_SwitchName_CmpSuccess' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.SetCutsceneTextureSetting
// 0x0068 (0x0068 - 0x0000)
struct BP_FLIB_Gameplay_C_SetCutsceneTextureSetting final
{
public:
	class FName                                   HighQualityTextureTag;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LoadWaitTextureTag;                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         AddActor;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         TempActor;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<class AActor*>                         CallFunc_GetAllActorsWithTag_OutActors;            // 0x0038(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AJackCutSceneController*                CallFunc_GetCutSceneController_ReturnValue;        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetAllActorsWithTag_OutActors2;           // 0x0058(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(BP_FLIB_Gameplay_C_SetCutsceneTextureSetting) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_SetCutsceneTextureSetting");
static_assert(sizeof(BP_FLIB_Gameplay_C_SetCutsceneTextureSetting) == 0x000068, "Wrong size on BP_FLIB_Gameplay_C_SetCutsceneTextureSetting");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCutsceneTextureSetting, HighQualityTextureTag) == 0x000000, "Member 'BP_FLIB_Gameplay_C_SetCutsceneTextureSetting::HighQualityTextureTag' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCutsceneTextureSetting, LoadWaitTextureTag) == 0x000008, "Member 'BP_FLIB_Gameplay_C_SetCutsceneTextureSetting::LoadWaitTextureTag' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCutsceneTextureSetting, AddActor) == 0x000010, "Member 'BP_FLIB_Gameplay_C_SetCutsceneTextureSetting::AddActor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCutsceneTextureSetting, __WorldContext) == 0x000020, "Member 'BP_FLIB_Gameplay_C_SetCutsceneTextureSetting::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCutsceneTextureSetting, TempActor) == 0x000028, "Member 'BP_FLIB_Gameplay_C_SetCutsceneTextureSetting::TempActor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCutsceneTextureSetting, CallFunc_GetAllActorsWithTag_OutActors) == 0x000038, "Member 'BP_FLIB_Gameplay_C_SetCutsceneTextureSetting::CallFunc_GetAllActorsWithTag_OutActors' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCutsceneTextureSetting, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BP_FLIB_Gameplay_C_SetCutsceneTextureSetting::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCutsceneTextureSetting, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00004C, "Member 'BP_FLIB_Gameplay_C_SetCutsceneTextureSetting::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCutsceneTextureSetting, CallFunc_GetCutSceneController_ReturnValue) == 0x000050, "Member 'BP_FLIB_Gameplay_C_SetCutsceneTextureSetting::CallFunc_GetCutSceneController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SetCutsceneTextureSetting, CallFunc_GetAllActorsWithTag_OutActors2) == 0x000058, "Member 'BP_FLIB_Gameplay_C_SetCutsceneTextureSetting::CallFunc_GetAllActorsWithTag_OutActors2' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.StartEventPlayerSettingIECustom_FromMapJump
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom_FromMapJump final
{
public:
	bool                                          EventWrapper;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom_FromMapJump) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom_FromMapJump");
static_assert(sizeof(BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom_FromMapJump) == 0x000020, "Wrong size on BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom_FromMapJump");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom_FromMapJump, EventWrapper) == 0x000000, "Member 'BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom_FromMapJump::EventWrapper' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom_FromMapJump, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom_FromMapJump::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom_FromMapJump, CallFunc_GetUMGManager_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom_FromMapJump::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom_FromMapJump, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_FLIB_Gameplay_C_StartEventPlayerSettingIECustom_FromMapJump::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.ClearOddEffect
// 0x0048 (0x0048 - 0x0000)
struct BP_FLIB_Gameplay_C_ClearOddEffect final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackGamePlayer*                        CallFunc_GetJackGamePlayer_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackOddEffectManager*                  CallFunc_GetOddEffectManager_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UJackFriendGameCharacter*>       CallFunc_GetPartyMembers_ReturnValue;              // 0x0018(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackFriendGameCharacter*               CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_ClearOddEffect) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_ClearOddEffect");
static_assert(sizeof(BP_FLIB_Gameplay_C_ClearOddEffect) == 0x000048, "Wrong size on BP_FLIB_Gameplay_C_ClearOddEffect");
static_assert(offsetof(BP_FLIB_Gameplay_C_ClearOddEffect, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_ClearOddEffect::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_ClearOddEffect, CallFunc_GetJackGamePlayer_ReturnValue) == 0x000008, "Member 'BP_FLIB_Gameplay_C_ClearOddEffect::CallFunc_GetJackGamePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_ClearOddEffect, CallFunc_GetOddEffectManager_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_ClearOddEffect::CallFunc_GetOddEffectManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_ClearOddEffect, CallFunc_GetPartyMembers_ReturnValue) == 0x000018, "Member 'BP_FLIB_Gameplay_C_ClearOddEffect::CallFunc_GetPartyMembers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_ClearOddEffect, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BP_FLIB_Gameplay_C_ClearOddEffect::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_ClearOddEffect, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'BP_FLIB_Gameplay_C_ClearOddEffect::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_ClearOddEffect, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_FLIB_Gameplay_C_ClearOddEffect::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_ClearOddEffect, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'BP_FLIB_Gameplay_C_ClearOddEffect::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_ClearOddEffect, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'BP_FLIB_Gameplay_C_ClearOddEffect::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_ClearOddEffect, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'BP_FLIB_Gameplay_C_ClearOddEffect::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.GetEquippedItemCount
// 0x0078 (0x0078 - 0x0000)
struct BP_FLIB_Gameplay_C_GetEquippedItemCount final
{
public:
	EJackCharacter                                CharaType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackLDT_ItemTable                     ItemID;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempCount;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FJackGameCharacterEquippedItem> TmpEquippedItems;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	class UJackGameCharacter*                     CallFunc_GetGameCharacter_ReturnValue;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FJackGameCharacterEquippedItem> CallFunc_GetEquippedItems_ReturnValue;             // 0x0040(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FJackGameCharacterEquippedItem         CallFunc_Array_Get_Item;                           // 0x0058(0x0010)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_GetEquippedItemCount) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_GetEquippedItemCount");
static_assert(sizeof(BP_FLIB_Gameplay_C_GetEquippedItemCount) == 0x000078, "Wrong size on BP_FLIB_Gameplay_C_GetEquippedItemCount");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetEquippedItemCount, CharaType) == 0x000000, "Member 'BP_FLIB_Gameplay_C_GetEquippedItemCount::CharaType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetEquippedItemCount, ItemID) == 0x000008, "Member 'BP_FLIB_Gameplay_C_GetEquippedItemCount::ItemID' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetEquippedItemCount, __WorldContext) == 0x000018, "Member 'BP_FLIB_Gameplay_C_GetEquippedItemCount::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetEquippedItemCount, Count) == 0x000020, "Member 'BP_FLIB_Gameplay_C_GetEquippedItemCount::Count' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetEquippedItemCount, TempCount) == 0x000024, "Member 'BP_FLIB_Gameplay_C_GetEquippedItemCount::TempCount' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetEquippedItemCount, TmpEquippedItems) == 0x000028, "Member 'BP_FLIB_Gameplay_C_GetEquippedItemCount::TmpEquippedItems' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetEquippedItemCount, CallFunc_GetGameCharacter_ReturnValue) == 0x000038, "Member 'BP_FLIB_Gameplay_C_GetEquippedItemCount::CallFunc_GetGameCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetEquippedItemCount, CallFunc_GetEquippedItems_ReturnValue) == 0x000040, "Member 'BP_FLIB_Gameplay_C_GetEquippedItemCount::CallFunc_GetEquippedItems_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetEquippedItemCount, Temp_int_Array_Index_Variable) == 0x000050, "Member 'BP_FLIB_Gameplay_C_GetEquippedItemCount::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetEquippedItemCount, Temp_int_Loop_Counter_Variable) == 0x000054, "Member 'BP_FLIB_Gameplay_C_GetEquippedItemCount::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetEquippedItemCount, CallFunc_Array_Get_Item) == 0x000058, "Member 'BP_FLIB_Gameplay_C_GetEquippedItemCount::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetEquippedItemCount, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'BP_FLIB_Gameplay_C_GetEquippedItemCount::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetEquippedItemCount, CallFunc_Less_IntInt_ReturnValue) == 0x00006C, "Member 'BP_FLIB_Gameplay_C_GetEquippedItemCount::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetEquippedItemCount, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00006D, "Member 'BP_FLIB_Gameplay_C_GetEquippedItemCount::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetEquippedItemCount, CallFunc_Add_IntInt_ReturnValue) == 0x000070, "Member 'BP_FLIB_Gameplay_C_GetEquippedItemCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetEquippedItemCount, CallFunc_Add_IntInt_ReturnValue2) == 0x000074, "Member 'BP_FLIB_Gameplay_C_GetEquippedItemCount::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.ResetCharacterPhysics
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_Gameplay_C_ResetCharacterPhysics final
{
public:
	class AJackCharacter*                         TargetChara;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackAnimInstance*                      K2Node_DynamicCast_AsJack_Anim_Instance;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_ResetCharacterPhysics) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_ResetCharacterPhysics");
static_assert(sizeof(BP_FLIB_Gameplay_C_ResetCharacterPhysics) == 0x000028, "Wrong size on BP_FLIB_Gameplay_C_ResetCharacterPhysics");
static_assert(offsetof(BP_FLIB_Gameplay_C_ResetCharacterPhysics, TargetChara) == 0x000000, "Member 'BP_FLIB_Gameplay_C_ResetCharacterPhysics::TargetChara' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_ResetCharacterPhysics, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_ResetCharacterPhysics::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_ResetCharacterPhysics, CallFunc_GetAnimInstance_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_ResetCharacterPhysics::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_ResetCharacterPhysics, K2Node_DynamicCast_AsJack_Anim_Instance) == 0x000018, "Member 'BP_FLIB_Gameplay_C_ResetCharacterPhysics::K2Node_DynamicCast_AsJack_Anim_Instance' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_ResetCharacterPhysics, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_FLIB_Gameplay_C_ResetCharacterPhysics::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.SafeDestroyActor
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Gameplay_C_SafeDestroyActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_SafeDestroyActor) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_SafeDestroyActor");
static_assert(sizeof(BP_FLIB_Gameplay_C_SafeDestroyActor) == 0x000018, "Wrong size on BP_FLIB_Gameplay_C_SafeDestroyActor");
static_assert(offsetof(BP_FLIB_Gameplay_C_SafeDestroyActor, InActor) == 0x000000, "Member 'BP_FLIB_Gameplay_C_SafeDestroyActor::InActor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SafeDestroyActor, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_SafeDestroyActor::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SafeDestroyActor, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_SafeDestroyActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.SafeDestroyActors
// 0x0038 (0x0038 - 0x0000)
struct BP_FLIB_Gameplay_C_SafeDestroyActors final
{
public:
	TArray<class AActor*>                         InActors;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_SafeDestroyActors) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_SafeDestroyActors");
static_assert(sizeof(BP_FLIB_Gameplay_C_SafeDestroyActors) == 0x000038, "Wrong size on BP_FLIB_Gameplay_C_SafeDestroyActors");
static_assert(offsetof(BP_FLIB_Gameplay_C_SafeDestroyActors, InActors) == 0x000000, "Member 'BP_FLIB_Gameplay_C_SafeDestroyActors::InActors' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SafeDestroyActors, __WorldContext) == 0x000010, "Member 'BP_FLIB_Gameplay_C_SafeDestroyActors::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SafeDestroyActors, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'BP_FLIB_Gameplay_C_SafeDestroyActors::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SafeDestroyActors, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BP_FLIB_Gameplay_C_SafeDestroyActors::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SafeDestroyActors, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'BP_FLIB_Gameplay_C_SafeDestroyActors::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SafeDestroyActors, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_FLIB_Gameplay_C_SafeDestroyActors::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SafeDestroyActors, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_FLIB_Gameplay_C_SafeDestroyActors::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_SafeDestroyActors, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'BP_FLIB_Gameplay_C_SafeDestroyActors::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.Set Visible By Tag
// 0x0068 (0x0068 - 0x0000)
struct BP_FLIB_Gameplay_C_Set_Visible_By_Tag final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Visible;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Collision_Enable;                                  // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetActorsByTag_bSuccess;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetActorsByTag_ReturnValue;               // 0x0020(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_DishSetUp_C*                        K2Node_DynamicCast_AsBP_Dish_Set_Up;               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ALight*                                 K2Node_DynamicCast_AsLight;                        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_Set_Visible_By_Tag) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_Set_Visible_By_Tag");
static_assert(sizeof(BP_FLIB_Gameplay_C_Set_Visible_By_Tag) == 0x000068, "Wrong size on BP_FLIB_Gameplay_C_Set_Visible_By_Tag");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Visible_By_Tag, Tag) == 0x000000, "Member 'BP_FLIB_Gameplay_C_Set_Visible_By_Tag::Tag' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Visible_By_Tag, Visible) == 0x000008, "Member 'BP_FLIB_Gameplay_C_Set_Visible_By_Tag::Visible' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Visible_By_Tag, Collision_Enable) == 0x000009, "Member 'BP_FLIB_Gameplay_C_Set_Visible_By_Tag::Collision_Enable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Visible_By_Tag, __WorldContext) == 0x000010, "Member 'BP_FLIB_Gameplay_C_Set_Visible_By_Tag::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Visible_By_Tag, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_FLIB_Gameplay_C_Set_Visible_By_Tag::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Visible_By_Tag, CallFunc_GetActorsByTag_bSuccess) == 0x00001C, "Member 'BP_FLIB_Gameplay_C_Set_Visible_By_Tag::CallFunc_GetActorsByTag_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Visible_By_Tag, CallFunc_GetActorsByTag_ReturnValue) == 0x000020, "Member 'BP_FLIB_Gameplay_C_Set_Visible_By_Tag::CallFunc_GetActorsByTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Visible_By_Tag, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_FLIB_Gameplay_C_Set_Visible_By_Tag::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Visible_By_Tag, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'BP_FLIB_Gameplay_C_Set_Visible_By_Tag::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Visible_By_Tag, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'BP_FLIB_Gameplay_C_Set_Visible_By_Tag::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Visible_By_Tag, CallFunc_Not_PreBool_ReturnValue) == 0x000039, "Member 'BP_FLIB_Gameplay_C_Set_Visible_By_Tag::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Visible_By_Tag, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'BP_FLIB_Gameplay_C_Set_Visible_By_Tag::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Visible_By_Tag, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_FLIB_Gameplay_C_Set_Visible_By_Tag::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Visible_By_Tag, K2Node_DynamicCast_AsBP_Dish_Set_Up) == 0x000048, "Member 'BP_FLIB_Gameplay_C_Set_Visible_By_Tag::K2Node_DynamicCast_AsBP_Dish_Set_Up' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Visible_By_Tag, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_FLIB_Gameplay_C_Set_Visible_By_Tag::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Visible_By_Tag, K2Node_DynamicCast_AsLight) == 0x000058, "Member 'BP_FLIB_Gameplay_C_Set_Visible_By_Tag::K2Node_DynamicCast_AsLight' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_Set_Visible_By_Tag, K2Node_DynamicCast_bSuccess2) == 0x000060, "Member 'BP_FLIB_Gameplay_C_Set_Visible_By_Tag::K2Node_DynamicCast_bSuccess2' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.GetJackPlayerCharacterType
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Gameplay_C_GetJackPlayerCharacterType final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacter                                Type;                                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacter                                CallFunc_GetControlledCharacterType_ReturnValue;   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_GetJackPlayerCharacterType) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_GetJackPlayerCharacterType");
static_assert(sizeof(BP_FLIB_Gameplay_C_GetJackPlayerCharacterType) == 0x000010, "Wrong size on BP_FLIB_Gameplay_C_GetJackPlayerCharacterType");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetJackPlayerCharacterType, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_GetJackPlayerCharacterType::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetJackPlayerCharacterType, Type) == 0x000008, "Member 'BP_FLIB_Gameplay_C_GetJackPlayerCharacterType::Type' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_GetJackPlayerCharacterType, CallFunc_GetControlledCharacterType_ReturnValue) == 0x000009, "Member 'BP_FLIB_Gameplay_C_GetJackPlayerCharacterType::CallFunc_GetControlledCharacterType_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.IsEqualJackPlayerCharacterType
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Gameplay_C_IsEqualJackPlayerCharacterType final
{
public:
	EJackCharacter                                Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EJackCharacter                                CallFunc_GetJackPlayerCharacterType_Type;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_IsEqualJackPlayerCharacterType) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_IsEqualJackPlayerCharacterType");
static_assert(sizeof(BP_FLIB_Gameplay_C_IsEqualJackPlayerCharacterType) == 0x000018, "Wrong size on BP_FLIB_Gameplay_C_IsEqualJackPlayerCharacterType");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsEqualJackPlayerCharacterType, Type) == 0x000000, "Member 'BP_FLIB_Gameplay_C_IsEqualJackPlayerCharacterType::Type' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsEqualJackPlayerCharacterType, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_IsEqualJackPlayerCharacterType::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsEqualJackPlayerCharacterType, Ret) == 0x000010, "Member 'BP_FLIB_Gameplay_C_IsEqualJackPlayerCharacterType::Ret' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsEqualJackPlayerCharacterType, CallFunc_GetJackPlayerCharacterType_Type) == 0x000011, "Member 'BP_FLIB_Gameplay_C_IsEqualJackPlayerCharacterType::CallFunc_GetJackPlayerCharacterType_Type' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsEqualJackPlayerCharacterType, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000012, "Member 'BP_FLIB_Gameplay_C_IsEqualJackPlayerCharacterType::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.StartNpcTalkPlayerSetting
// 0x0008 (0x0008 - 0x0000)
struct BP_FLIB_Gameplay_C_StartNpcTalkPlayerSetting final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_StartNpcTalkPlayerSetting) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_StartNpcTalkPlayerSetting");
static_assert(sizeof(BP_FLIB_Gameplay_C_StartNpcTalkPlayerSetting) == 0x000008, "Wrong size on BP_FLIB_Gameplay_C_StartNpcTalkPlayerSetting");
static_assert(offsetof(BP_FLIB_Gameplay_C_StartNpcTalkPlayerSetting, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_StartNpcTalkPlayerSetting::__WorldContext' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.EndNpcTalkPlayerSetting
// 0x0008 (0x0008 - 0x0000)
struct BP_FLIB_Gameplay_C_EndNpcTalkPlayerSetting final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_EndNpcTalkPlayerSetting) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_EndNpcTalkPlayerSetting");
static_assert(sizeof(BP_FLIB_Gameplay_C_EndNpcTalkPlayerSetting) == 0x000008, "Wrong size on BP_FLIB_Gameplay_C_EndNpcTalkPlayerSetting");
static_assert(offsetof(BP_FLIB_Gameplay_C_EndNpcTalkPlayerSetting, __WorldContext) == 0x000000, "Member 'BP_FLIB_Gameplay_C_EndNpcTalkPlayerSetting::__WorldContext' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.IsAcquiredJumons
// 0x00B8 (0x00B8 - 0x0000)
struct BP_FLIB_Gameplay_C_IsAcquiredJumons final
{
public:
	EJackCharacter                                Character;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Jumons;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          AndCheck;                                          // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Acquired;                                          // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TmpNames;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	bool                                          ChaHave;                                           // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Break;                                             // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Ret;                                               // 0x0042(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackGameCharacter*                     CallFunc_GetGameCharacter_ReturnValue;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetAcquiredJumons_ReturnValue;            // 0x0058(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue2;                // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable2;                   // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue2;                 // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable2;                    // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item2;                          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Gameplay_C_IsAcquiredJumons) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_IsAcquiredJumons");
static_assert(sizeof(BP_FLIB_Gameplay_C_IsAcquiredJumons) == 0x0000B8, "Wrong size on BP_FLIB_Gameplay_C_IsAcquiredJumons");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, Character) == 0x000000, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::Character' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, Jumons) == 0x000008, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::Jumons' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, AndCheck) == 0x000018, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::AndCheck' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, __WorldContext) == 0x000020, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, Acquired) == 0x000028, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::Acquired' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, TmpNames) == 0x000030, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::TmpNames' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, ChaHave) == 0x000040, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::ChaHave' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, Break) == 0x000041, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::Break' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, Ret) == 0x000042, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::Ret' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, CallFunc_GetGameCharacter_ReturnValue) == 0x000048, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::CallFunc_GetGameCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, CallFunc_GetAcquiredJumons_ReturnValue) == 0x000058, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::CallFunc_GetAcquiredJumons_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, Temp_bool_True_if_break_was_hit_Variable) == 0x00006C, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, Temp_int_Array_Index_Variable) == 0x000070, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, CallFunc_Array_Get_Item) == 0x000078, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, CallFunc_Not_PreBool_ReturnValue) == 0x000080, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, Temp_int_Loop_Counter_Variable) == 0x000084, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, CallFunc_Less_IntInt_ReturnValue) == 0x000088, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, CallFunc_Add_IntInt_ReturnValue) == 0x00008C, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, CallFunc_BooleanAND_ReturnValue) == 0x000090, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, CallFunc_Array_Length_ReturnValue2) == 0x000094, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::CallFunc_Array_Length_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, Temp_int_Loop_Counter_Variable2) == 0x000098, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::Temp_int_Loop_Counter_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, CallFunc_Less_IntInt_ReturnValue2) == 0x00009C, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::CallFunc_Less_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, CallFunc_Add_IntInt_ReturnValue2) == 0x0000A0, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, Temp_int_Array_Index_Variable2) == 0x0000A4, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::Temp_int_Array_Index_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, CallFunc_Array_Get_Item2) == 0x0000A8, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_IsAcquiredJumons, CallFunc_EqualEqual_NameName_ReturnValue) == 0x0000B0, "Member 'BP_FLIB_Gameplay_C_IsAcquiredJumons::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Gameplay.BP_FLIB_Gameplay_C.OpenTitleTensei
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Gameplay_C_OpenTitleTensei final
{
public:
	bool                                          Tensei2D;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackMusicManager*                      CallFunc_GetMusicManager_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Gameplay_C_OpenTitleTensei) == 0x000008, "Wrong alignment on BP_FLIB_Gameplay_C_OpenTitleTensei");
static_assert(sizeof(BP_FLIB_Gameplay_C_OpenTitleTensei) == 0x000018, "Wrong size on BP_FLIB_Gameplay_C_OpenTitleTensei");
static_assert(offsetof(BP_FLIB_Gameplay_C_OpenTitleTensei, Tensei2D) == 0x000000, "Member 'BP_FLIB_Gameplay_C_OpenTitleTensei::Tensei2D' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_OpenTitleTensei, __WorldContext) == 0x000008, "Member 'BP_FLIB_Gameplay_C_OpenTitleTensei::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Gameplay_C_OpenTitleTensei, CallFunc_GetMusicManager_ReturnValue) == 0x000010, "Member 'BP_FLIB_Gameplay_C_OpenTitleTensei::CallFunc_GetMusicManager_ReturnValue' has a wrong offset!");

}

