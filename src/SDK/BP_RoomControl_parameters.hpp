#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RoomControl

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_RoomControl.BP_RoomControl_C.BndEvt__BrushComponent_K2Node_ComponentBoundEvent_271_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_271_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    bpp__OverlappedComponent__pf;                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 bpp__OtherActor__pf;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    bpp__OtherComp__pf;                                // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__OtherBodyIndex__pf;                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bFromSweep__pf;                               // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             bpp__SweepResult__pf__const;                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_271_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_271_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_271_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_271_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_271_ComponentBeginOverlapSignature__DelegateSignature, bpp__OverlappedComponent__pf) == 0x000000, "Member 'BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_271_ComponentBeginOverlapSignature__DelegateSignature::bpp__OverlappedComponent__pf' has a wrong offset!");
static_assert(offsetof(BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_271_ComponentBeginOverlapSignature__DelegateSignature, bpp__OtherActor__pf) == 0x000008, "Member 'BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_271_ComponentBeginOverlapSignature__DelegateSignature::bpp__OtherActor__pf' has a wrong offset!");
static_assert(offsetof(BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_271_ComponentBeginOverlapSignature__DelegateSignature, bpp__OtherComp__pf) == 0x000010, "Member 'BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_271_ComponentBeginOverlapSignature__DelegateSignature::bpp__OtherComp__pf' has a wrong offset!");
static_assert(offsetof(BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_271_ComponentBeginOverlapSignature__DelegateSignature, bpp__OtherBodyIndex__pf) == 0x000018, "Member 'BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_271_ComponentBeginOverlapSignature__DelegateSignature::bpp__OtherBodyIndex__pf' has a wrong offset!");
static_assert(offsetof(BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_271_ComponentBeginOverlapSignature__DelegateSignature, bpp__bFromSweep__pf) == 0x00001C, "Member 'BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_271_ComponentBeginOverlapSignature__DelegateSignature::bpp__bFromSweep__pf' has a wrong offset!");
static_assert(offsetof(BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_271_ComponentBeginOverlapSignature__DelegateSignature, bpp__SweepResult__pf__const) == 0x000020, "Member 'BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_271_ComponentBeginOverlapSignature__DelegateSignature::bpp__SweepResult__pf__const' has a wrong offset!");

// Function BP_RoomControl.BP_RoomControl_C.BndEvt__BrushComponent_K2Node_ComponentBoundEvent_273_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_273_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    bpp__OverlappedComponent__pf;                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 bpp__OtherActor__pf;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    bpp__OtherComp__pf;                                // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__OtherBodyIndex__pf;                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_273_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_273_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_273_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_273_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_273_ComponentEndOverlapSignature__DelegateSignature, bpp__OverlappedComponent__pf) == 0x000000, "Member 'BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_273_ComponentEndOverlapSignature__DelegateSignature::bpp__OverlappedComponent__pf' has a wrong offset!");
static_assert(offsetof(BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_273_ComponentEndOverlapSignature__DelegateSignature, bpp__OtherActor__pf) == 0x000008, "Member 'BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_273_ComponentEndOverlapSignature__DelegateSignature::bpp__OtherActor__pf' has a wrong offset!");
static_assert(offsetof(BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_273_ComponentEndOverlapSignature__DelegateSignature, bpp__OtherComp__pf) == 0x000010, "Member 'BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_273_ComponentEndOverlapSignature__DelegateSignature::bpp__OtherComp__pf' has a wrong offset!");
static_assert(offsetof(BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_273_ComponentEndOverlapSignature__DelegateSignature, bpp__OtherBodyIndex__pf) == 0x000018, "Member 'BP_RoomControl_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_273_ComponentEndOverlapSignature__DelegateSignature::bpp__OtherBodyIndex__pf' has a wrong offset!");

// Function BP_RoomControl.BP_RoomControl_C.ChangeIndoorCamera
// 0x0001 (0x0001 - 0x0000)
struct BP_RoomControl_C_ChangeIndoorCamera final
{
public:
	bool                                          bpp__Enable__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_RoomControl_C_ChangeIndoorCamera) == 0x000001, "Wrong alignment on BP_RoomControl_C_ChangeIndoorCamera");
static_assert(sizeof(BP_RoomControl_C_ChangeIndoorCamera) == 0x000001, "Wrong size on BP_RoomControl_C_ChangeIndoorCamera");
static_assert(offsetof(BP_RoomControl_C_ChangeIndoorCamera, bpp__Enable__pf) == 0x000000, "Member 'BP_RoomControl_C_ChangeIndoorCamera::bpp__Enable__pf' has a wrong offset!");

// Function BP_RoomControl.BP_RoomControl_C.Enable Post
// 0x0001 (0x0001 - 0x0000)
struct BP_RoomControl_C_Enable_Post final
{
public:
	bool                                          bpp__Enable__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_RoomControl_C_Enable_Post) == 0x000001, "Wrong alignment on BP_RoomControl_C_Enable_Post");
static_assert(sizeof(BP_RoomControl_C_Enable_Post) == 0x000001, "Wrong size on BP_RoomControl_C_Enable_Post");
static_assert(offsetof(BP_RoomControl_C_Enable_Post, bpp__Enable__pf) == 0x000000, "Member 'BP_RoomControl_C_Enable_Post::bpp__Enable__pf' has a wrong offset!");

// Function BP_RoomControl.BP_RoomControl_C.ExecuteUbergraph_BP_RoomControl_0
// 0x0004 (0x0004 - 0x0000)
struct BP_RoomControl_C_ExecuteUbergraph_BP_RoomControl_0 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_RoomControl_C_ExecuteUbergraph_BP_RoomControl_0) == 0x000004, "Wrong alignment on BP_RoomControl_C_ExecuteUbergraph_BP_RoomControl_0");
static_assert(sizeof(BP_RoomControl_C_ExecuteUbergraph_BP_RoomControl_0) == 0x000004, "Wrong size on BP_RoomControl_C_ExecuteUbergraph_BP_RoomControl_0");
static_assert(offsetof(BP_RoomControl_C_ExecuteUbergraph_BP_RoomControl_0, bpp__EntryPoint__pf) == 0x000000, "Member 'BP_RoomControl_C_ExecuteUbergraph_BP_RoomControl_0::bpp__EntryPoint__pf' has a wrong offset!");

// Function BP_RoomControl.BP_RoomControl_C.ExecuteUbergraph_BP_RoomControl_10
// 0x0004 (0x0004 - 0x0000)
struct BP_RoomControl_C_ExecuteUbergraph_BP_RoomControl_10 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_RoomControl_C_ExecuteUbergraph_BP_RoomControl_10) == 0x000004, "Wrong alignment on BP_RoomControl_C_ExecuteUbergraph_BP_RoomControl_10");
static_assert(sizeof(BP_RoomControl_C_ExecuteUbergraph_BP_RoomControl_10) == 0x000004, "Wrong size on BP_RoomControl_C_ExecuteUbergraph_BP_RoomControl_10");
static_assert(offsetof(BP_RoomControl_C_ExecuteUbergraph_BP_RoomControl_10, bpp__EntryPoint__pf) == 0x000000, "Member 'BP_RoomControl_C_ExecuteUbergraph_BP_RoomControl_10::bpp__EntryPoint__pf' has a wrong offset!");

// Function BP_RoomControl.BP_RoomControl_C.ExecuteUbergraph_BP_RoomControl_6
// 0x0004 (0x0004 - 0x0000)
struct BP_RoomControl_C_ExecuteUbergraph_BP_RoomControl_6 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_RoomControl_C_ExecuteUbergraph_BP_RoomControl_6) == 0x000004, "Wrong alignment on BP_RoomControl_C_ExecuteUbergraph_BP_RoomControl_6");
static_assert(sizeof(BP_RoomControl_C_ExecuteUbergraph_BP_RoomControl_6) == 0x000004, "Wrong size on BP_RoomControl_C_ExecuteUbergraph_BP_RoomControl_6");
static_assert(offsetof(BP_RoomControl_C_ExecuteUbergraph_BP_RoomControl_6, bpp__EntryPoint__pf) == 0x000000, "Member 'BP_RoomControl_C_ExecuteUbergraph_BP_RoomControl_6::bpp__EntryPoint__pf' has a wrong offset!");

// Function BP_RoomControl.BP_RoomControl_C.GetRoomFlag
// 0x0001 (0x0001 - 0x0000)
struct BP_RoomControl_C_GetRoomFlag final
{
public:
	bool                                          bpp__NowInRoom__pf;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_RoomControl_C_GetRoomFlag) == 0x000001, "Wrong alignment on BP_RoomControl_C_GetRoomFlag");
static_assert(sizeof(BP_RoomControl_C_GetRoomFlag) == 0x000001, "Wrong size on BP_RoomControl_C_GetRoomFlag");
static_assert(offsetof(BP_RoomControl_C_GetRoomFlag, bpp__NowInRoom__pf) == 0x000000, "Member 'BP_RoomControl_C_GetRoomFlag::bpp__NowInRoom__pf' has a wrong offset!");

// Function BP_RoomControl.BP_RoomControl_C.GuestHidden
// 0x0001 (0x0001 - 0x0000)
struct BP_RoomControl_C_GuestHidden final
{
public:
	bool                                          bpp__NewHidden__pf;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_RoomControl_C_GuestHidden) == 0x000001, "Wrong alignment on BP_RoomControl_C_GuestHidden");
static_assert(sizeof(BP_RoomControl_C_GuestHidden) == 0x000001, "Wrong size on BP_RoomControl_C_GuestHidden");
static_assert(offsetof(BP_RoomControl_C_GuestHidden, bpp__NewHidden__pf) == 0x000000, "Member 'BP_RoomControl_C_GuestHidden::bpp__NewHidden__pf' has a wrong offset!");

// Function BP_RoomControl.BP_RoomControl_C.IsTimeStopperEnable
// 0x0001 (0x0001 - 0x0000)
struct BP_RoomControl_C_IsTimeStopperEnable final
{
public:
	bool                                          bpp__Enabled__pf;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_RoomControl_C_IsTimeStopperEnable) == 0x000001, "Wrong alignment on BP_RoomControl_C_IsTimeStopperEnable");
static_assert(sizeof(BP_RoomControl_C_IsTimeStopperEnable) == 0x000001, "Wrong size on BP_RoomControl_C_IsTimeStopperEnable");
static_assert(offsetof(BP_RoomControl_C_IsTimeStopperEnable, bpp__Enabled__pf) == 0x000000, "Member 'BP_RoomControl_C_IsTimeStopperEnable::bpp__Enabled__pf' has a wrong offset!");

// Function BP_RoomControl.BP_RoomControl_C.Room Player In
// 0x0008 (0x0008 - 0x0000)
struct BP_RoomControl_C_Room_Player_In final
{
public:
	class AActor*                                 bpp__Player__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_RoomControl_C_Room_Player_In) == 0x000008, "Wrong alignment on BP_RoomControl_C_Room_Player_In");
static_assert(sizeof(BP_RoomControl_C_Room_Player_In) == 0x000008, "Wrong size on BP_RoomControl_C_Room_Player_In");
static_assert(offsetof(BP_RoomControl_C_Room_Player_In, bpp__Player__pf) == 0x000000, "Member 'BP_RoomControl_C_Room_Player_In::bpp__Player__pf' has a wrong offset!");

// Function BP_RoomControl.BP_RoomControl_C.Room Player Out
// 0x0008 (0x0008 - 0x0000)
struct BP_RoomControl_C_Room_Player_Out final
{
public:
	class AActor*                                 bpp__Player__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_RoomControl_C_Room_Player_Out) == 0x000008, "Wrong alignment on BP_RoomControl_C_Room_Player_Out");
static_assert(sizeof(BP_RoomControl_C_Room_Player_Out) == 0x000008, "Wrong size on BP_RoomControl_C_Room_Player_Out");
static_assert(offsetof(BP_RoomControl_C_Room_Player_Out, bpp__Player__pf) == 0x000000, "Member 'BP_RoomControl_C_Room_Player_Out::bpp__Player__pf' has a wrong offset!");

// Function BP_RoomControl.BP_RoomControl_C.SetAllDoorAutoCloseEnable
// 0x0001 (0x0001 - 0x0000)
struct BP_RoomControl_C_SetAllDoorAutoCloseEnable final
{
public:
	bool                                          bpp__AutoCloseEnable__pf;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_RoomControl_C_SetAllDoorAutoCloseEnable) == 0x000001, "Wrong alignment on BP_RoomControl_C_SetAllDoorAutoCloseEnable");
static_assert(sizeof(BP_RoomControl_C_SetAllDoorAutoCloseEnable) == 0x000001, "Wrong size on BP_RoomControl_C_SetAllDoorAutoCloseEnable");
static_assert(offsetof(BP_RoomControl_C_SetAllDoorAutoCloseEnable, bpp__AutoCloseEnable__pf) == 0x000000, "Member 'BP_RoomControl_C_SetAllDoorAutoCloseEnable::bpp__AutoCloseEnable__pf' has a wrong offset!");

// Function BP_RoomControl.BP_RoomControl_C.SetEnableIndoorCamera
// 0x0001 (0x0001 - 0x0000)
struct BP_RoomControl_C_SetEnableIndoorCamera final
{
public:
	bool                                          bpp__Enable__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_RoomControl_C_SetEnableIndoorCamera) == 0x000001, "Wrong alignment on BP_RoomControl_C_SetEnableIndoorCamera");
static_assert(sizeof(BP_RoomControl_C_SetEnableIndoorCamera) == 0x000001, "Wrong size on BP_RoomControl_C_SetEnableIndoorCamera");
static_assert(offsetof(BP_RoomControl_C_SetEnableIndoorCamera, bpp__Enable__pf) == 0x000000, "Member 'BP_RoomControl_C_SetEnableIndoorCamera::bpp__Enable__pf' has a wrong offset!");

// Function BP_RoomControl.BP_RoomControl_C.SetEnableIndoorCameraInterpSec
// 0x0004 (0x0004 - 0x0000)
struct BP_RoomControl_C_SetEnableIndoorCameraInterpSec final
{
public:
	float                                         bpp__InterpSec__pf;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_RoomControl_C_SetEnableIndoorCameraInterpSec) == 0x000004, "Wrong alignment on BP_RoomControl_C_SetEnableIndoorCameraInterpSec");
static_assert(sizeof(BP_RoomControl_C_SetEnableIndoorCameraInterpSec) == 0x000004, "Wrong size on BP_RoomControl_C_SetEnableIndoorCameraInterpSec");
static_assert(offsetof(BP_RoomControl_C_SetEnableIndoorCameraInterpSec, bpp__InterpSec__pf) == 0x000000, "Member 'BP_RoomControl_C_SetEnableIndoorCameraInterpSec::bpp__InterpSec__pf' has a wrong offset!");

// Function BP_RoomControl.BP_RoomControl_C.SetEnableRuraArea
// 0x0001 (0x0001 - 0x0000)
struct BP_RoomControl_C_SetEnableRuraArea final
{
public:
	bool                                          bpp__Enable__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_RoomControl_C_SetEnableRuraArea) == 0x000001, "Wrong alignment on BP_RoomControl_C_SetEnableRuraArea");
static_assert(sizeof(BP_RoomControl_C_SetEnableRuraArea) == 0x000001, "Wrong size on BP_RoomControl_C_SetEnableRuraArea");
static_assert(offsetof(BP_RoomControl_C_SetEnableRuraArea, bpp__Enable__pf) == 0x000000, "Member 'BP_RoomControl_C_SetEnableRuraArea::bpp__Enable__pf' has a wrong offset!");

// Function BP_RoomControl.BP_RoomControl_C.SetEnableSafeArea
// 0x0001 (0x0001 - 0x0000)
struct BP_RoomControl_C_SetEnableSafeArea final
{
public:
	bool                                          bpp__Enable__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_RoomControl_C_SetEnableSafeArea) == 0x000001, "Wrong alignment on BP_RoomControl_C_SetEnableSafeArea");
static_assert(sizeof(BP_RoomControl_C_SetEnableSafeArea) == 0x000001, "Wrong size on BP_RoomControl_C_SetEnableSafeArea");
static_assert(offsetof(BP_RoomControl_C_SetEnableSafeArea, bpp__Enable__pf) == 0x000000, "Member 'BP_RoomControl_C_SetEnableSafeArea::bpp__Enable__pf' has a wrong offset!");

// Function BP_RoomControl.BP_RoomControl_C.SetEnableTimeStopper
// 0x0001 (0x0001 - 0x0000)
struct BP_RoomControl_C_SetEnableTimeStopper final
{
public:
	bool                                          bpp__Enable__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_RoomControl_C_SetEnableTimeStopper) == 0x000001, "Wrong alignment on BP_RoomControl_C_SetEnableTimeStopper");
static_assert(sizeof(BP_RoomControl_C_SetEnableTimeStopper) == 0x000001, "Wrong size on BP_RoomControl_C_SetEnableTimeStopper");
static_assert(offsetof(BP_RoomControl_C_SetEnableTimeStopper, bpp__Enable__pf) == 0x000000, "Member 'BP_RoomControl_C_SetEnableTimeStopper::bpp__Enable__pf' has a wrong offset!");

// Function BP_RoomControl.BP_RoomControl_C.SetRoomFlag
// 0x0001 (0x0001 - 0x0000)
struct BP_RoomControl_C_SetRoomFlag final
{
public:
	bool                                          bpp__InRoom__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_RoomControl_C_SetRoomFlag) == 0x000001, "Wrong alignment on BP_RoomControl_C_SetRoomFlag");
static_assert(sizeof(BP_RoomControl_C_SetRoomFlag) == 0x000001, "Wrong size on BP_RoomControl_C_SetRoomFlag");
static_assert(offsetof(BP_RoomControl_C_SetRoomFlag, bpp__InRoom__pf) == 0x000000, "Member 'BP_RoomControl_C_SetRoomFlag::bpp__InRoom__pf' has a wrong offset!");

// Function BP_RoomControl.BP_RoomControl_C.SetWeatherEffectEnable
// 0x0001 (0x0001 - 0x0000)
struct BP_RoomControl_C_SetWeatherEffectEnable final
{
public:
	bool                                          bpp__Enable__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_RoomControl_C_SetWeatherEffectEnable) == 0x000001, "Wrong alignment on BP_RoomControl_C_SetWeatherEffectEnable");
static_assert(sizeof(BP_RoomControl_C_SetWeatherEffectEnable) == 0x000001, "Wrong size on BP_RoomControl_C_SetWeatherEffectEnable");
static_assert(offsetof(BP_RoomControl_C_SetWeatherEffectEnable, bpp__Enable__pf) == 0x000000, "Member 'BP_RoomControl_C_SetWeatherEffectEnable::bpp__Enable__pf' has a wrong offset!");

// Function BP_RoomControl.BP_RoomControl_C.SetWindPause
// 0x0001 (0x0001 - 0x0000)
struct BP_RoomControl_C_SetWindPause final
{
public:
	bool                                          bpp__Pause__pf;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_RoomControl_C_SetWindPause) == 0x000001, "Wrong alignment on BP_RoomControl_C_SetWindPause");
static_assert(sizeof(BP_RoomControl_C_SetWindPause) == 0x000001, "Wrong size on BP_RoomControl_C_SetWindPause");
static_assert(offsetof(BP_RoomControl_C_SetWindPause, bpp__Pause__pf) == 0x000000, "Member 'BP_RoomControl_C_SetWindPause::bpp__Pause__pf' has a wrong offset!");

// Function BP_RoomControl.BP_RoomControl_C.WeatherEffectEnable
// 0x0001 (0x0001 - 0x0000)
struct BP_RoomControl_C_WeatherEffectEnable final
{
public:
	bool                                          bpp__Enable__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_RoomControl_C_WeatherEffectEnable) == 0x000001, "Wrong alignment on BP_RoomControl_C_WeatherEffectEnable");
static_assert(sizeof(BP_RoomControl_C_WeatherEffectEnable) == 0x000001, "Wrong size on BP_RoomControl_C_WeatherEffectEnable");
static_assert(offsetof(BP_RoomControl_C_WeatherEffectEnable, bpp__Enable__pf) == 0x000000, "Member 'BP_RoomControl_C_WeatherEffectEnable::bpp__Enable__pf' has a wrong offset!");

// Function BP_RoomControl.BP_RoomControl_C.WindPasue
// 0x0001 (0x0001 - 0x0000)
struct BP_RoomControl_C_WindPasue final
{
public:
	bool                                          bpp__Pause__pf;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_RoomControl_C_WindPasue) == 0x000001, "Wrong alignment on BP_RoomControl_C_WindPasue");
static_assert(sizeof(BP_RoomControl_C_WindPasue) == 0x000001, "Wrong size on BP_RoomControl_C_WindPasue");
static_assert(offsetof(BP_RoomControl_C_WindPasue, bpp__Pause__pf) == 0x000000, "Member 'BP_RoomControl_C_WindPasue::bpp__Pause__pf' has a wrong offset!");

}

