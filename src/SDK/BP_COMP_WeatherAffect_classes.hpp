#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_COMP_WeatherAffect

#include "Basic.hpp"

#include "JackGame_structs.hpp"
#include "JackGame_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// DynamicClass BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C
// 0x0178 (0x0340 - 0x01C8)
class UBP_COMP_WeatherAffect_C final : public UJackWeatherAffectComponent
{
public:
	EJackWorldWeather                             OldWeather;                                        // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WindPause;                                         // 0x01C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CA[0x6];                                      // 0x01CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AWindDirectionalSource*                 MapWind;                                           // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWindDirectionalSource*                 CurrentWind;                                       // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           BeforeWindLevel;                                   // 0x01E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           OldWindLevel;                                      // 0x01E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2[0x2];                                      // 0x01E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BeforeWindAngle;                                   // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldWindAngle;                                      // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEmitterCameraLensEffectBase*           WeatherCameraLensEffect;                           // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindDirectionChangeTime;                           // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindPowerChangeTime;                               // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           WindDirectionChangeTimerHandle;                    // 0x0200(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTimerHandle                           WindPowerChangeTimerHandle;                        // 0x0208(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class UCurveFloat*                            WindStrengthForMPC;                                // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PauseFlag;                                         // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WindVectorForParticles;                            // 0x021C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WeatherCameraLensEffectOwnerNoSee;                 // 0x0228(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CutSceneMode;                                      // 0x0229(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A[0x6];                                      // 0x022A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SkyBase_C*                          SkyBase;                                           // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABP_TimeChangeFogBase_C*                TimeChangeFog;                                     // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABP_TimeChangeCloud_C*                  TimeChangeCloud;                                   // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultWindPitch;                                  // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 WindPreset_Env;                                    // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 WindPreset_Chara;                                  // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 WindPreset_Effect;                                 // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindRate_Env;                                      // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindRate_Chara;                                    // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindRate_Effect;                                   // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempStrength_Env_;                                 // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EffectWindPowerUpdate;                             // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EffectWindAngleUpdate;                             // 0x0279(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SoundRequestWeatherOrWindChange;                   // 0x027A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27B[0x1];                                      // 0x027B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TempWindPower_Effect_;                             // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempWindAngle_Effect_;                             // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WindChangedFlagForMPC;                             // 0x0284(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreEnv;                                         // 0x0285(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WeatherEffectVisibleFlag;                          // 0x0286(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_287[0x1];                                      // 0x0287(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SysControlLevelName;                               // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   CallWeatherChangeForTimeChangePost;                // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	float                                         WeatherChangeRate;                                 // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x02A4(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AWindDirectionalSource*>         CallFunc_GetAllActorsOfClass_OutActors;            // 0x02A8(0x0010)(ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	class AWindDirectionalSource*                 CallFunc_Array_Get_Item;                           // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x02C0(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackWorldParticleContainer>    K2Node_CustomEvent_Particles;                      // 0x02C8(0x0010)(ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x02D8(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x02DC(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x02E0(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x02E4(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(TArray<struct FJackWorldParticleContainer>& bpp__Particles__pf)> K2Node_CreateDelegate_OutputDelegate;              // 0x02E8(0x0010)(ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	TScriptInterface<class IBP_IF_GameEvent_C>    K2Node_DynamicCast_AsBP_IF_Game_Event;             // 0x02F8(0x0010)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0308(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_309[0x3];                                      // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeWindVector_Effect__WindVector;        // 0x030C(0x000C)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate2;             // 0x0318(0x0010)(ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   CallFunc_GetSysControlLevelName_SysControlLevelName; // 0x0328(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate3;             // 0x0330(0x0010)(ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)

public:
	void JackWorldParticlesChangedDelegate__DelegateSignature(const TArray<struct FJackWorldParticleContainer>& bpp__Particles__pf);
	void AddWeatherStringForWeatherReport(EJackWorldWeather bpp__Weather__pf, const class FString& bpp__WeatherString__pf__const, class FString* bpp__OutWeatherString__pf);
	void CallNpcWeatherEvent(EJackWorldWeather bpp__NewWeather__pf);
	void ChangeWindAngle();
	void ExecuteUbergraph_BP_COMP_WeatherAffect_0(int32 bpp__EntryPoint__pf);
	void ExecuteUbergraph_BP_COMP_WeatherAffect_3(int32 bpp__EntryPoint__pf);
	void ExecuteUbergraph_BP_COMP_WeatherAffect_4(int32 bpp__EntryPoint__pf);
	void GetSysControlLevelName(class FName* bpp__SysControlLevelName__pf);
	void InitializeWeather();
	void InitializeWind();
	void InitReference();
	void MakeTagValueListForWeatherReport(EJackTimeZone bpp__TimeZone__pf, bool bpp__Tomorrow__pf, TArray<struct FJackMessageArgumentData>* bpp__OutTagValueList__pf);
	void MakeWeatherReportMessage(const class FString& bpp__WeatherReportType__pf__const, class FName* bpp__OutTextId__pf, TArray<struct FJackMessageArgumentData>* bpp__OutTagValueList__pf);
	void MakeWindVector_Effect_(struct FVector* bpp__WindVector__pf);
	void ReceiveBeginPlay();
	void ReceiveTick(float bpp__DeltaSeconds__pf);
	void RemoveWeatherEffect();
	void ResetWeatherEffect();
	void SetCsWindPowerOverride(int32 bpp__CsWindPower__pf);
	void SetSky(EJackWorldWeather bpp__NewWeather__pf);
	void SetSkyBase(class ABP_SkyBase_C* bpp__SkyBase__pf);
	void SetTimeChangeCloud(class ABP_TimeChangeCloud_C* bpp__TimeChangeCloud__pf);
	void SetTimeChangeFog(class ABP_TimeChangeFogBase_C* bpp__TimeChangeFog__pf);
	void SetWeatherEffect(EJackWorldWeather bpp__NewWeather__pf);
	void SetWeatherEffectActive(bool bpp__Active__pf);
	void SetWindAngle(float bpp__StartAngle__pf, float bpp__TargetAngle__pf, float bpp__Rate__pf, bool bpp__ForceSet__pf);
	void SetWindAngleToMPC_Env_(float bpp__Angle__pf);
	void SetWindAngle_Effect_(float bpp__TargetAngle__pf);
	void SetWindAngle_Env_(float bpp__TargetAngle__pf, float bpp__InRate__pf, bool bpp__ForceSet__pf);
	void SetWindCS_Mode(bool bpp__CSxMode__pfT, class AWindDirectionalSource* bpp__WindxDirectionalSource__pfT);
	void SetWindDirectionParam_Effect_(class UParticleSystemComponent* bpp__Particle__pf, const struct FVector& bpp__WindVector__pf);
	void SetWindParam_Effect_(TArray<struct FJackWorldParticleContainer>* bpp__Particles__pf, const struct FVector& bpp__WindVector__pf);
	void SetWindPause(bool bpp__Pause__pf);
	void SetWindPauseIgnoreEnv(bool bpp__Pause__pf);
	void SetWindPower(EJackWorldWindLevel bpp__BeforeWindLevel__pf, EJackWorldWindLevel bpp__AfterWindLevel__pf, float bpp__InRate__pf, bool bpp__ForceSet__pf);
	void SetWindPowerAndAngle_Effect_();
	void SetWindPowerCore_Chara_(float bpp__Speed__pf, float bpp__Strength__pf);
	void SetWindPowerCore_Env_(float bpp__Speed__pf, float bpp__Strength__pf);
	void SetWindPower_Chara_(EJackWorldWindLevel bpp__BeforeWindLevel__pf, EJackWorldWindLevel bpp__AfterWindLevel__pf, float bpp__InRate__pf);
	void SetWindPower_Effect_(EJackWorldWindLevel bpp__BeforeWindLevel__pf, EJackWorldWindLevel bpp__AfterWindLevel__pf, float bpp__InRate__pf);
	void SetWindPower_Env_(EJackWorldWindLevel bpp__BeforeWindLevel__pf, EJackWorldWindLevel bpp__AfterWindLevel__pf, float bpp__InRate__pf);
	void SetWindRotation_Chara_(float bpp__Yaw__pf);
	void WeatherAffectInitialize();
	void WindPowerChanged();
	void WindUpdate();
	void WorldParticlesChangedDelegate_Event_1(const TArray<struct FJackWorldParticleContainer>& bpp__Particles__pf__const);
	void CallWeatherChangeForTimeChangePost__DelegateSignature(EJackWorldWeather bpp__NewWeather__pf);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BP_COMP_WeatherAffect_C">();
	}
	static class UBP_COMP_WeatherAffect_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_COMP_WeatherAffect_C>();
	}
};
static_assert(alignof(UBP_COMP_WeatherAffect_C) == 0x000008, "Wrong alignment on UBP_COMP_WeatherAffect_C");
static_assert(sizeof(UBP_COMP_WeatherAffect_C) == 0x000340, "Wrong size on UBP_COMP_WeatherAffect_C");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, OldWeather) == 0x0001C8, "Member 'UBP_COMP_WeatherAffect_C::OldWeather' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, WindPause) == 0x0001C9, "Member 'UBP_COMP_WeatherAffect_C::WindPause' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, MapWind) == 0x0001D0, "Member 'UBP_COMP_WeatherAffect_C::MapWind' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, CurrentWind) == 0x0001D8, "Member 'UBP_COMP_WeatherAffect_C::CurrentWind' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, BeforeWindLevel) == 0x0001E0, "Member 'UBP_COMP_WeatherAffect_C::BeforeWindLevel' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, OldWindLevel) == 0x0001E1, "Member 'UBP_COMP_WeatherAffect_C::OldWindLevel' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, BeforeWindAngle) == 0x0001E4, "Member 'UBP_COMP_WeatherAffect_C::BeforeWindAngle' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, OldWindAngle) == 0x0001E8, "Member 'UBP_COMP_WeatherAffect_C::OldWindAngle' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, WeatherCameraLensEffect) == 0x0001F0, "Member 'UBP_COMP_WeatherAffect_C::WeatherCameraLensEffect' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, WindDirectionChangeTime) == 0x0001F8, "Member 'UBP_COMP_WeatherAffect_C::WindDirectionChangeTime' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, WindPowerChangeTime) == 0x0001FC, "Member 'UBP_COMP_WeatherAffect_C::WindPowerChangeTime' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, WindDirectionChangeTimerHandle) == 0x000200, "Member 'UBP_COMP_WeatherAffect_C::WindDirectionChangeTimerHandle' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, WindPowerChangeTimerHandle) == 0x000208, "Member 'UBP_COMP_WeatherAffect_C::WindPowerChangeTimerHandle' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, WindStrengthForMPC) == 0x000210, "Member 'UBP_COMP_WeatherAffect_C::WindStrengthForMPC' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, PauseFlag) == 0x000218, "Member 'UBP_COMP_WeatherAffect_C::PauseFlag' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, WindVectorForParticles) == 0x00021C, "Member 'UBP_COMP_WeatherAffect_C::WindVectorForParticles' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, WeatherCameraLensEffectOwnerNoSee) == 0x000228, "Member 'UBP_COMP_WeatherAffect_C::WeatherCameraLensEffectOwnerNoSee' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, CutSceneMode) == 0x000229, "Member 'UBP_COMP_WeatherAffect_C::CutSceneMode' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, SkyBase) == 0x000230, "Member 'UBP_COMP_WeatherAffect_C::SkyBase' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, TimeChangeFog) == 0x000238, "Member 'UBP_COMP_WeatherAffect_C::TimeChangeFog' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, TimeChangeCloud) == 0x000240, "Member 'UBP_COMP_WeatherAffect_C::TimeChangeCloud' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, DefaultWindPitch) == 0x000248, "Member 'UBP_COMP_WeatherAffect_C::DefaultWindPitch' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, WindPreset_Env) == 0x000250, "Member 'UBP_COMP_WeatherAffect_C::WindPreset_Env' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, WindPreset_Chara) == 0x000258, "Member 'UBP_COMP_WeatherAffect_C::WindPreset_Chara' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, WindPreset_Effect) == 0x000260, "Member 'UBP_COMP_WeatherAffect_C::WindPreset_Effect' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, WindRate_Env) == 0x000268, "Member 'UBP_COMP_WeatherAffect_C::WindRate_Env' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, WindRate_Chara) == 0x00026C, "Member 'UBP_COMP_WeatherAffect_C::WindRate_Chara' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, WindRate_Effect) == 0x000270, "Member 'UBP_COMP_WeatherAffect_C::WindRate_Effect' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, TempStrength_Env_) == 0x000274, "Member 'UBP_COMP_WeatherAffect_C::TempStrength_Env_' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, EffectWindPowerUpdate) == 0x000278, "Member 'UBP_COMP_WeatherAffect_C::EffectWindPowerUpdate' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, EffectWindAngleUpdate) == 0x000279, "Member 'UBP_COMP_WeatherAffect_C::EffectWindAngleUpdate' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, SoundRequestWeatherOrWindChange) == 0x00027A, "Member 'UBP_COMP_WeatherAffect_C::SoundRequestWeatherOrWindChange' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, TempWindPower_Effect_) == 0x00027C, "Member 'UBP_COMP_WeatherAffect_C::TempWindPower_Effect_' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, TempWindAngle_Effect_) == 0x000280, "Member 'UBP_COMP_WeatherAffect_C::TempWindAngle_Effect_' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, WindChangedFlagForMPC) == 0x000284, "Member 'UBP_COMP_WeatherAffect_C::WindChangedFlagForMPC' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, IgnoreEnv) == 0x000285, "Member 'UBP_COMP_WeatherAffect_C::IgnoreEnv' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, WeatherEffectVisibleFlag) == 0x000286, "Member 'UBP_COMP_WeatherAffect_C::WeatherEffectVisibleFlag' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, SysControlLevelName) == 0x000288, "Member 'UBP_COMP_WeatherAffect_C::SysControlLevelName' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, CallWeatherChangeForTimeChangePost) == 0x000290, "Member 'UBP_COMP_WeatherAffect_C::CallWeatherChangeForTimeChangePost' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, WeatherChangeRate) == 0x0002A0, "Member 'UBP_COMP_WeatherAffect_C::WeatherChangeRate' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, K2Node_Event_DeltaSeconds) == 0x0002A4, "Member 'UBP_COMP_WeatherAffect_C::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, CallFunc_GetAllActorsOfClass_OutActors) == 0x0002A8, "Member 'UBP_COMP_WeatherAffect_C::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, CallFunc_Array_Get_Item) == 0x0002B8, "Member 'UBP_COMP_WeatherAffect_C::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, Temp_bool_Has_Been_Initd_Variable) == 0x0002C0, "Member 'UBP_COMP_WeatherAffect_C::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, K2Node_CustomEvent_Particles) == 0x0002C8, "Member 'UBP_COMP_WeatherAffect_C::K2Node_CustomEvent_Particles' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, Temp_bool_IsClosed_Variable) == 0x0002D8, "Member 'UBP_COMP_WeatherAffect_C::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, CallFunc_BreakRotator_Roll) == 0x0002DC, "Member 'UBP_COMP_WeatherAffect_C::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, CallFunc_BreakRotator_Pitch) == 0x0002E0, "Member 'UBP_COMP_WeatherAffect_C::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, CallFunc_BreakRotator_Yaw) == 0x0002E4, "Member 'UBP_COMP_WeatherAffect_C::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, K2Node_CreateDelegate_OutputDelegate) == 0x0002E8, "Member 'UBP_COMP_WeatherAffect_C::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, K2Node_DynamicCast_AsBP_IF_Game_Event) == 0x0002F8, "Member 'UBP_COMP_WeatherAffect_C::K2Node_DynamicCast_AsBP_IF_Game_Event' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, K2Node_DynamicCast_bSuccess) == 0x000308, "Member 'UBP_COMP_WeatherAffect_C::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, CallFunc_MakeWindVector_Effect__WindVector) == 0x00030C, "Member 'UBP_COMP_WeatherAffect_C::CallFunc_MakeWindVector_Effect__WindVector' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, K2Node_CreateDelegate_OutputDelegate2) == 0x000318, "Member 'UBP_COMP_WeatherAffect_C::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, CallFunc_GetSysControlLevelName_SysControlLevelName) == 0x000328, "Member 'UBP_COMP_WeatherAffect_C::CallFunc_GetSysControlLevelName_SysControlLevelName' has a wrong offset!");
static_assert(offsetof(UBP_COMP_WeatherAffect_C, K2Node_CreateDelegate_OutputDelegate3) == 0x000330, "Member 'UBP_COMP_WeatherAffect_C::K2Node_CreateDelegate_OutputDelegate3' has a wrong offset!");

}

