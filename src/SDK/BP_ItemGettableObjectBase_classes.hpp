#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ItemGettableObjectBase

#include "Basic.hpp"

#include "STRUCT_ItemSet_structs.hpp"
#include "JackGame_structs.hpp"
#include "JackGame_classes.hpp"


namespace SDK
{

// DynamicClass BP_ItemGettableObjectBase.BP_ItemGettableObjectBase_C
// 0x0060 (0x0418 - 0x03B8)
class ABP_ItemGettableObjectBase_C : public AJackItemGettableObjectBase
{
public:
	class USceneComponent*                        Root;                                              // 0x03B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SaveFlag;                                          // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold;                                              // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSTRUCT_ItemSet>                Item;                                              // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   ItemGottenSaveFlag;                                // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AcceptOverflow;                                    // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSTRUCT_ItemSet>                KeepRemainItem;                                    // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         KeepRemainGold;                                    // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepRemainEmpty;                                   // 0x03FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3FD[0x3];                                      // 0x03FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EJackItem_Bag>                         KeepStoreBag;                                      // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         StoreSuccessBit;                                   // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Forsake;                                           // 0x0414(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSimpleText;                                     // 0x0415(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_416[0x2];                                      // 0x0416(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CommonItemSetting(class FName bpp__ID__pf);
	void CorrectRecipeItem();
	void FindCommonItemSetting(class FName bpp__ID__pf, EJackItem_Classification bpp__ItemClassification__pf, bool* bpp__Found__pf, class FName* bpp__ItemID__pf);
	void GetForsakeMessageID(class FName* bpp__FosakeMessageID__pf);
	void GetRemainItem(TArray<struct FSTRUCT_ItemSet>* bpp__OutRemainItem__pf, int32* bpp__OutRemainGold__pf, bool* bpp__Empty__pf);
	void InitItemSetting();
	void InitSaveFlag();
	void IsItemGotten(bool* bpp__ItemGotten__pf);
	void RecipeToGold(const struct FSTRUCT_ItemSet& bpp__ItemSet__pf, struct FSTRUCT_ItemSet* bpp__CorrectItemSet__pf, int32* bpp__AdditionalGold__pf);
	void StoreItemSequence(bool* bpp__Empty__pf);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BP_ItemGettableObjectBase_C">();
	}
	static class ABP_ItemGettableObjectBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ItemGettableObjectBase_C>();
	}
};
static_assert(alignof(ABP_ItemGettableObjectBase_C) == 0x000008, "Wrong alignment on ABP_ItemGettableObjectBase_C");
static_assert(sizeof(ABP_ItemGettableObjectBase_C) == 0x000418, "Wrong size on ABP_ItemGettableObjectBase_C");
static_assert(offsetof(ABP_ItemGettableObjectBase_C, Root) == 0x0003B8, "Member 'ABP_ItemGettableObjectBase_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_ItemGettableObjectBase_C, SaveFlag) == 0x0003C0, "Member 'ABP_ItemGettableObjectBase_C::SaveFlag' has a wrong offset!");
static_assert(offsetof(ABP_ItemGettableObjectBase_C, Gold) == 0x0003C4, "Member 'ABP_ItemGettableObjectBase_C::Gold' has a wrong offset!");
static_assert(offsetof(ABP_ItemGettableObjectBase_C, Item) == 0x0003C8, "Member 'ABP_ItemGettableObjectBase_C::Item' has a wrong offset!");
static_assert(offsetof(ABP_ItemGettableObjectBase_C, ItemGottenSaveFlag) == 0x0003D8, "Member 'ABP_ItemGettableObjectBase_C::ItemGottenSaveFlag' has a wrong offset!");
static_assert(offsetof(ABP_ItemGettableObjectBase_C, AcceptOverflow) == 0x0003E0, "Member 'ABP_ItemGettableObjectBase_C::AcceptOverflow' has a wrong offset!");
static_assert(offsetof(ABP_ItemGettableObjectBase_C, KeepRemainItem) == 0x0003E8, "Member 'ABP_ItemGettableObjectBase_C::KeepRemainItem' has a wrong offset!");
static_assert(offsetof(ABP_ItemGettableObjectBase_C, KeepRemainGold) == 0x0003F8, "Member 'ABP_ItemGettableObjectBase_C::KeepRemainGold' has a wrong offset!");
static_assert(offsetof(ABP_ItemGettableObjectBase_C, KeepRemainEmpty) == 0x0003FC, "Member 'ABP_ItemGettableObjectBase_C::KeepRemainEmpty' has a wrong offset!");
static_assert(offsetof(ABP_ItemGettableObjectBase_C, KeepStoreBag) == 0x000400, "Member 'ABP_ItemGettableObjectBase_C::KeepStoreBag' has a wrong offset!");
static_assert(offsetof(ABP_ItemGettableObjectBase_C, StoreSuccessBit) == 0x000410, "Member 'ABP_ItemGettableObjectBase_C::StoreSuccessBit' has a wrong offset!");
static_assert(offsetof(ABP_ItemGettableObjectBase_C, Forsake) == 0x000414, "Member 'ABP_ItemGettableObjectBase_C::Forsake' has a wrong offset!");
static_assert(offsetof(ABP_ItemGettableObjectBase_C, UseSimpleText) == 0x000415, "Member 'ABP_ItemGettableObjectBase_C::UseSimpleText' has a wrong offset!");

}

