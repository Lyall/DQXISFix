#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FLIB_Debug

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "STRUCT_DT_DebugNpcSetting_structs.hpp"
#include "JackGame_structs.hpp"
#include "ENUM_DebugStringColor_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_FLIB_Debug.BP_FLIB_Debug_C.Get Time String
// 0x0098 (0x0098 - 0x0000)
struct BP_FLIB_Debug_C_Get_Time_String final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 TimeString;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CompString;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class UJackWorldTime*                         CallFunc_GetWorldTime_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNowHour_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNowMinute_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue2;               // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue2;            // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue3;               // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Debug_C_Get_Time_String) == 0x000008, "Wrong alignment on BP_FLIB_Debug_C_Get_Time_String");
static_assert(sizeof(BP_FLIB_Debug_C_Get_Time_String) == 0x000098, "Wrong size on BP_FLIB_Debug_C_Get_Time_String");
static_assert(offsetof(BP_FLIB_Debug_C_Get_Time_String, __WorldContext) == 0x000000, "Member 'BP_FLIB_Debug_C_Get_Time_String::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Get_Time_String, TimeString) == 0x000008, "Member 'BP_FLIB_Debug_C_Get_Time_String::TimeString' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Get_Time_String, CompString) == 0x000018, "Member 'BP_FLIB_Debug_C_Get_Time_String::CompString' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Get_Time_String, CallFunc_GetWorldTime_ReturnValue) == 0x000028, "Member 'BP_FLIB_Debug_C_Get_Time_String::CallFunc_GetWorldTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Get_Time_String, CallFunc_GetNowHour_ReturnValue) == 0x000030, "Member 'BP_FLIB_Debug_C_Get_Time_String::CallFunc_GetNowHour_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Get_Time_String, CallFunc_GetNowMinute_ReturnValue) == 0x000034, "Member 'BP_FLIB_Debug_C_Get_Time_String::CallFunc_GetNowMinute_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Get_Time_String, CallFunc_Conv_IntToString_ReturnValue) == 0x000038, "Member 'BP_FLIB_Debug_C_Get_Time_String::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Get_Time_String, CallFunc_Greater_IntInt_ReturnValue) == 0x000048, "Member 'BP_FLIB_Debug_C_Get_Time_String::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Get_Time_String, CallFunc_Concat_StrStr_ReturnValue) == 0x000050, "Member 'BP_FLIB_Debug_C_Get_Time_String::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Get_Time_String, CallFunc_Concat_StrStr_ReturnValue2) == 0x000060, "Member 'BP_FLIB_Debug_C_Get_Time_String::CallFunc_Concat_StrStr_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Get_Time_String, CallFunc_Less_IntInt_ReturnValue) == 0x000070, "Member 'BP_FLIB_Debug_C_Get_Time_String::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Get_Time_String, CallFunc_Conv_IntToString_ReturnValue2) == 0x000078, "Member 'BP_FLIB_Debug_C_Get_Time_String::CallFunc_Conv_IntToString_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Get_Time_String, CallFunc_Concat_StrStr_ReturnValue3) == 0x000088, "Member 'BP_FLIB_Debug_C_Get_Time_String::CallFunc_Concat_StrStr_ReturnValue3' has a wrong offset!");

// Function BP_FLIB_Debug.BP_FLIB_Debug_C.Debug Warp
// 0x00C0 (0x00C0 - 0x0000)
struct BP_FLIB_Debug_C_Debug_Warp final
{
public:
	struct FVector                                WarpLocation;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DispString;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue;       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0030(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Debug_C_Debug_Warp) == 0x000008, "Wrong alignment on BP_FLIB_Debug_C_Debug_Warp");
static_assert(sizeof(BP_FLIB_Debug_C_Debug_Warp) == 0x0000C0, "Wrong size on BP_FLIB_Debug_C_Debug_Warp");
static_assert(offsetof(BP_FLIB_Debug_C_Debug_Warp, WarpLocation) == 0x000000, "Member 'BP_FLIB_Debug_C_Debug_Warp::WarpLocation' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Debug_Warp, DispString) == 0x000010, "Member 'BP_FLIB_Debug_C_Debug_Warp::DispString' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Debug_Warp, __WorldContext) == 0x000020, "Member 'BP_FLIB_Debug_C_Debug_Warp::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Debug_Warp, CallFunc_GetJackPlayerCharacter_ReturnValue) == 0x000028, "Member 'BP_FLIB_Debug_C_Debug_Warp::CallFunc_GetJackPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Debug_Warp, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000030, "Member 'BP_FLIB_Debug_C_Debug_Warp::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Debug_Warp, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0000B8, "Member 'BP_FLIB_Debug_C_Debug_Warp::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Debug.BP_FLIB_Debug_C.Debug Warp Actor
// 0x00C8 (0x00C8 - 0x0000)
struct BP_FLIB_Debug_C_Debug_Warp_Actor final
{
public:
	class AActor*                                 WarpActor;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 DispString;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0020(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue;       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0038(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Debug_C_Debug_Warp_Actor) == 0x000008, "Wrong alignment on BP_FLIB_Debug_C_Debug_Warp_Actor");
static_assert(sizeof(BP_FLIB_Debug_C_Debug_Warp_Actor) == 0x0000C8, "Wrong size on BP_FLIB_Debug_C_Debug_Warp_Actor");
static_assert(offsetof(BP_FLIB_Debug_C_Debug_Warp_Actor, WarpActor) == 0x000000, "Member 'BP_FLIB_Debug_C_Debug_Warp_Actor::WarpActor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Debug_Warp_Actor, DispString) == 0x000008, "Member 'BP_FLIB_Debug_C_Debug_Warp_Actor::DispString' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Debug_Warp_Actor, __WorldContext) == 0x000018, "Member 'BP_FLIB_Debug_C_Debug_Warp_Actor::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Debug_Warp_Actor, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'BP_FLIB_Debug_C_Debug_Warp_Actor::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Debug_Warp_Actor, CallFunc_GetJackPlayerCharacter_ReturnValue) == 0x000030, "Member 'BP_FLIB_Debug_C_Debug_Warp_Actor::CallFunc_GetJackPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Debug_Warp_Actor, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000038, "Member 'BP_FLIB_Debug_C_Debug_Warp_Actor::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Debug_Warp_Actor, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0000C0, "Member 'BP_FLIB_Debug_C_Debug_Warp_Actor::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Debug.BP_FLIB_Debug_C.Debug Print String
// 0x0040 (0x0040 - 0x0000)
struct BP_FLIB_Debug_C_Debug_Print_String final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	ENUM_DebugStringColor                         Color;                                             // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug_Print_Flag;                                  // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorParam;                                        // 0x0024(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsExistsGameFlag_ReturnValue;             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPIE_ReturnValue;                        // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetGameFlagBool_ReturnValue;              // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Debug_C_Debug_Print_String) == 0x000008, "Wrong alignment on BP_FLIB_Debug_C_Debug_Print_String");
static_assert(sizeof(BP_FLIB_Debug_C_Debug_Print_String) == 0x000040, "Wrong size on BP_FLIB_Debug_C_Debug_Print_String");
static_assert(offsetof(BP_FLIB_Debug_C_Debug_Print_String, Message) == 0x000000, "Member 'BP_FLIB_Debug_C_Debug_Print_String::Message' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Debug_Print_String, Color) == 0x000010, "Member 'BP_FLIB_Debug_C_Debug_Print_String::Color' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Debug_Print_String, __WorldContext) == 0x000018, "Member 'BP_FLIB_Debug_C_Debug_Print_String::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Debug_Print_String, Debug_Print_Flag) == 0x000020, "Member 'BP_FLIB_Debug_C_Debug_Print_String::Debug_Print_Flag' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Debug_Print_String, ColorParam) == 0x000024, "Member 'BP_FLIB_Debug_C_Debug_Print_String::ColorParam' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Debug_Print_String, CallFunc_IsExistsGameFlag_ReturnValue) == 0x000034, "Member 'BP_FLIB_Debug_C_Debug_Print_String::CallFunc_IsExistsGameFlag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Debug_Print_String, CallFunc_IsPIE_ReturnValue) == 0x000035, "Member 'BP_FLIB_Debug_C_Debug_Print_String::CallFunc_IsPIE_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Debug_Print_String, CallFunc_GetGameFlagBool_ReturnValue) == 0x000036, "Member 'BP_FLIB_Debug_C_Debug_Print_String::CallFunc_GetGameFlagBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Debug_Print_String, K2Node_SwitchEnum_CmpSuccess) == 0x000037, "Member 'BP_FLIB_Debug_C_Debug_Print_String::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_Debug_Print_String, CallFunc_BooleanAND_ReturnValue) == 0x000038, "Member 'BP_FLIB_Debug_C_Debug_Print_String::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Debug.BP_FLIB_Debug_C.DebugScenarioFlagOn
// 0x0120 (0x0120 - 0x0000)
struct BP_FLIB_Debug_C_DebugScenarioFlagOn final
{
public:
	struct FJackLDT_GameFlagDataScenario          FlagName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_LeftS;                              // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_RightS;                             // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Split_ReturnValue;                        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0060(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackLDT_GameFlagDataScenario          K2Node_MakeStruct_JackLDT_GameFlagDataScenario;    // 0x0088(0x0010)(NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackDataTableGameFlagScenario         CallFunc_GetDataTableRowFromName_OutRow;           // 0x00A0(0x0040)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue2;           // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_LeftS2;                             // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_RightS2;                            // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Split_ReturnValue2;                       // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x011B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Debug_C_DebugScenarioFlagOn) == 0x000008, "Wrong alignment on BP_FLIB_Debug_C_DebugScenarioFlagOn");
static_assert(sizeof(BP_FLIB_Debug_C_DebugScenarioFlagOn) == 0x000120, "Wrong size on BP_FLIB_Debug_C_DebugScenarioFlagOn");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, FlagName) == 0x000000, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::FlagName' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, __WorldContext) == 0x000010, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, Temp_bool_True_if_break_was_hit_Variable) == 0x000018, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, CallFunc_Conv_NameToString_ReturnValue) == 0x000020, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, CallFunc_Split_LeftS) == 0x000030, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::CallFunc_Split_LeftS' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, CallFunc_Split_RightS) == 0x000040, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::CallFunc_Split_RightS' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, CallFunc_Split_ReturnValue) == 0x000050, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::CallFunc_Split_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, CallFunc_Not_PreBool_ReturnValue) == 0x000051, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, Temp_int_Array_Index_Variable) == 0x000054, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, Temp_int_Loop_Counter_Variable) == 0x000058, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000060, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, CallFunc_Array_Get_Item) == 0x000078, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, CallFunc_Less_IntInt_ReturnValue) == 0x000080, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, K2Node_MakeStruct_JackLDT_GameFlagDataScenario) == 0x000088, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::K2Node_MakeStruct_JackLDT_GameFlagDataScenario' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, CallFunc_BooleanAND_ReturnValue) == 0x000098, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, CallFunc_GetDataTableRowFromName_OutRow) == 0x0000A0, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000E0, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, CallFunc_Conv_NameToString_ReturnValue2) == 0x0000E8, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::CallFunc_Conv_NameToString_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, CallFunc_Split_LeftS2) == 0x0000F8, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::CallFunc_Split_LeftS2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, CallFunc_Split_RightS2) == 0x000108, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::CallFunc_Split_RightS2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, CallFunc_Split_ReturnValue2) == 0x000118, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::CallFunc_Split_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000119, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00011A, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugScenarioFlagOn, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00011B, "Member 'BP_FLIB_Debug_C_DebugScenarioFlagOn::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Debug.BP_FLIB_Debug_C.DebugCutSceneFlagOn
// 0x0120 (0x0120 - 0x0000)
struct BP_FLIB_Debug_C_DebugCutSceneFlagOn final
{
public:
	struct FJackLDT_GameFlagDataCutScene          FlagName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_LeftS;                              // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_RightS;                             // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Split_ReturnValue;                        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0060(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackLDT_GameFlagDataCutScene          K2Node_MakeStruct_JackLDT_GameFlagDataCutScene;    // 0x0088(0x0010)(NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackDataTableGameFlagCutScene         CallFunc_GetDataTableRowFromName_OutRow;           // 0x00A0(0x0040)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue2;           // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_LeftS2;                             // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_RightS2;                            // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Split_ReturnValue2;                       // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x011B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Debug_C_DebugCutSceneFlagOn) == 0x000008, "Wrong alignment on BP_FLIB_Debug_C_DebugCutSceneFlagOn");
static_assert(sizeof(BP_FLIB_Debug_C_DebugCutSceneFlagOn) == 0x000120, "Wrong size on BP_FLIB_Debug_C_DebugCutSceneFlagOn");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, FlagName) == 0x000000, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::FlagName' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, __WorldContext) == 0x000010, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, Temp_bool_True_if_break_was_hit_Variable) == 0x000018, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, CallFunc_Conv_NameToString_ReturnValue) == 0x000020, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, CallFunc_Split_LeftS) == 0x000030, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::CallFunc_Split_LeftS' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, CallFunc_Split_RightS) == 0x000040, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::CallFunc_Split_RightS' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, CallFunc_Split_ReturnValue) == 0x000050, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::CallFunc_Split_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, CallFunc_Not_PreBool_ReturnValue) == 0x000051, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, Temp_int_Array_Index_Variable) == 0x000054, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, Temp_int_Loop_Counter_Variable) == 0x000058, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000060, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, CallFunc_Array_Get_Item) == 0x000078, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, CallFunc_Less_IntInt_ReturnValue) == 0x000080, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, K2Node_MakeStruct_JackLDT_GameFlagDataCutScene) == 0x000088, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::K2Node_MakeStruct_JackLDT_GameFlagDataCutScene' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, CallFunc_BooleanAND_ReturnValue) == 0x000098, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, CallFunc_GetDataTableRowFromName_OutRow) == 0x0000A0, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000E0, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, CallFunc_Conv_NameToString_ReturnValue2) == 0x0000E8, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::CallFunc_Conv_NameToString_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, CallFunc_Split_LeftS2) == 0x0000F8, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::CallFunc_Split_LeftS2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, CallFunc_Split_RightS2) == 0x000108, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::CallFunc_Split_RightS2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, CallFunc_Split_ReturnValue2) == 0x000118, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::CallFunc_Split_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000119, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00011A, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCutSceneFlagOn, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00011B, "Member 'BP_FLIB_Debug_C_DebugCutSceneFlagOn::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Debug.BP_FLIB_Debug_C.DebugConvertViewportPosition
// 0x0038 (0x0038 - 0x0000)
struct BP_FLIB_Debug_C_DebugConvertViewportPosition final
{
public:
	float                                         Position;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CalcPositionX;                                     // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CalcPositionY;                                     // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AJackPlayerController*                  CallFunc_GetJackPlayerController_ReturnValue;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetViewportSize_SizeX;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetViewportSize_SizeY;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue2;           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Debug_C_DebugConvertViewportPosition) == 0x000008, "Wrong alignment on BP_FLIB_Debug_C_DebugConvertViewportPosition");
static_assert(sizeof(BP_FLIB_Debug_C_DebugConvertViewportPosition) == 0x000038, "Wrong size on BP_FLIB_Debug_C_DebugConvertViewportPosition");
static_assert(offsetof(BP_FLIB_Debug_C_DebugConvertViewportPosition, Position) == 0x000000, "Member 'BP_FLIB_Debug_C_DebugConvertViewportPosition::Position' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugConvertViewportPosition, __WorldContext) == 0x000008, "Member 'BP_FLIB_Debug_C_DebugConvertViewportPosition::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugConvertViewportPosition, CalcPositionX) == 0x000010, "Member 'BP_FLIB_Debug_C_DebugConvertViewportPosition::CalcPositionX' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugConvertViewportPosition, CalcPositionY) == 0x000014, "Member 'BP_FLIB_Debug_C_DebugConvertViewportPosition::CalcPositionY' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugConvertViewportPosition, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_FLIB_Debug_C_DebugConvertViewportPosition::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugConvertViewportPosition, CallFunc_GetJackPlayerController_ReturnValue) == 0x000020, "Member 'BP_FLIB_Debug_C_DebugConvertViewportPosition::CallFunc_GetJackPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugConvertViewportPosition, CallFunc_GetViewportSize_SizeX) == 0x000028, "Member 'BP_FLIB_Debug_C_DebugConvertViewportPosition::CallFunc_GetViewportSize_SizeX' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugConvertViewportPosition, CallFunc_GetViewportSize_SizeY) == 0x00002C, "Member 'BP_FLIB_Debug_C_DebugConvertViewportPosition::CallFunc_GetViewportSize_SizeY' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugConvertViewportPosition, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000030, "Member 'BP_FLIB_Debug_C_DebugConvertViewportPosition::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugConvertViewportPosition, CallFunc_Multiply_IntFloat_ReturnValue2) == 0x000034, "Member 'BP_FLIB_Debug_C_DebugConvertViewportPosition::CallFunc_Multiply_IntFloat_ReturnValue2' has a wrong offset!");

// Function BP_FLIB_Debug.BP_FLIB_Debug_C.DebugSetCoordinateToClass
// 0x00B0 (0x00B0 - 0x0000)
struct BP_FLIB_Debug_C_DebugSetCoordinateToClass final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable2;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable2;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0020(0x0010)(ZeroConstructor, ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_DT_DebugNpcSetting             CallFunc_GetDataTableRowFromName_OutRow;           // 0x0040(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_Conv_SoftClassReferenceToClass_ReturnValue; // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsJack_Scheduled_NPC;      // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AJackScheduledNPC*>              CallFunc_GetAllActorsOfClass_OutActors;            // 0x0088(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue2;                // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AJackScheduledNPC*                      CallFunc_Array_Get_Item2;                          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue2;                 // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Debug_C_DebugSetCoordinateToClass) == 0x000008, "Wrong alignment on BP_FLIB_Debug_C_DebugSetCoordinateToClass");
static_assert(sizeof(BP_FLIB_Debug_C_DebugSetCoordinateToClass) == 0x0000B0, "Wrong size on BP_FLIB_Debug_C_DebugSetCoordinateToClass");
static_assert(offsetof(BP_FLIB_Debug_C_DebugSetCoordinateToClass, __WorldContext) == 0x000000, "Member 'BP_FLIB_Debug_C_DebugSetCoordinateToClass::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugSetCoordinateToClass, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_FLIB_Debug_C_DebugSetCoordinateToClass::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugSetCoordinateToClass, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_FLIB_Debug_C_DebugSetCoordinateToClass::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugSetCoordinateToClass, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_FLIB_Debug_C_DebugSetCoordinateToClass::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugSetCoordinateToClass, Temp_int_Array_Index_Variable2) == 0x000014, "Member 'BP_FLIB_Debug_C_DebugSetCoordinateToClass::Temp_int_Array_Index_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugSetCoordinateToClass, Temp_int_Loop_Counter_Variable2) == 0x000018, "Member 'BP_FLIB_Debug_C_DebugSetCoordinateToClass::Temp_int_Loop_Counter_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugSetCoordinateToClass, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000020, "Member 'BP_FLIB_Debug_C_DebugSetCoordinateToClass::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugSetCoordinateToClass, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_FLIB_Debug_C_DebugSetCoordinateToClass::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugSetCoordinateToClass, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_FLIB_Debug_C_DebugSetCoordinateToClass::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugSetCoordinateToClass, CallFunc_GetDataTableRowFromName_OutRow) == 0x000040, "Member 'BP_FLIB_Debug_C_DebugSetCoordinateToClass::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugSetCoordinateToClass, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000068, "Member 'BP_FLIB_Debug_C_DebugSetCoordinateToClass::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugSetCoordinateToClass, CallFunc_Less_IntInt_ReturnValue) == 0x000069, "Member 'BP_FLIB_Debug_C_DebugSetCoordinateToClass::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugSetCoordinateToClass, CallFunc_Add_IntInt_ReturnValue2) == 0x00006C, "Member 'BP_FLIB_Debug_C_DebugSetCoordinateToClass::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugSetCoordinateToClass, CallFunc_Conv_SoftClassReferenceToClass_ReturnValue) == 0x000070, "Member 'BP_FLIB_Debug_C_DebugSetCoordinateToClass::CallFunc_Conv_SoftClassReferenceToClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugSetCoordinateToClass, K2Node_ClassDynamicCast_AsJack_Scheduled_NPC) == 0x000078, "Member 'BP_FLIB_Debug_C_DebugSetCoordinateToClass::K2Node_ClassDynamicCast_AsJack_Scheduled_NPC' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugSetCoordinateToClass, K2Node_ClassDynamicCast_bSuccess) == 0x000080, "Member 'BP_FLIB_Debug_C_DebugSetCoordinateToClass::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugSetCoordinateToClass, CallFunc_GetAllActorsOfClass_OutActors) == 0x000088, "Member 'BP_FLIB_Debug_C_DebugSetCoordinateToClass::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugSetCoordinateToClass, CallFunc_Array_Length_ReturnValue2) == 0x000098, "Member 'BP_FLIB_Debug_C_DebugSetCoordinateToClass::CallFunc_Array_Length_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugSetCoordinateToClass, CallFunc_Array_Get_Item2) == 0x0000A0, "Member 'BP_FLIB_Debug_C_DebugSetCoordinateToClass::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugSetCoordinateToClass, CallFunc_Less_IntInt_ReturnValue2) == 0x0000A8, "Member 'BP_FLIB_Debug_C_DebugSetCoordinateToClass::CallFunc_Less_IntInt_ReturnValue2' has a wrong offset!");

// Function BP_FLIB_Debug.BP_FLIB_Debug_C.DebugFullReload
// 0x0038 (0x0038 - 0x0000)
struct BP_FLIB_Debug_C_DebugFullReload final
{
public:
	struct FJackLDT_MapStart                      MapStart;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Debug_C_DebugFullReload) == 0x000008, "Wrong alignment on BP_FLIB_Debug_C_DebugFullReload");
static_assert(sizeof(BP_FLIB_Debug_C_DebugFullReload) == 0x000038, "Wrong size on BP_FLIB_Debug_C_DebugFullReload");
static_assert(offsetof(BP_FLIB_Debug_C_DebugFullReload, MapStart) == 0x000000, "Member 'BP_FLIB_Debug_C_DebugFullReload::MapStart' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugFullReload, __WorldContext) == 0x000010, "Member 'BP_FLIB_Debug_C_DebugFullReload::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugFullReload, CallFunc_Conv_NameToString_ReturnValue) == 0x000018, "Member 'BP_FLIB_Debug_C_DebugFullReload::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugFullReload, CallFunc_Concat_StrStr_ReturnValue) == 0x000028, "Member 'BP_FLIB_Debug_C_DebugFullReload::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Debug.BP_FLIB_Debug_C.SetBpWarning
// 0x0080 (0x0080 - 0x0000)
struct BP_FLIB_Debug_C_SetBpWarning final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetPersistentLevelName_ReturnValue;       // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetGameFlagString_ReturnValue;            // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue2;               // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue3;               // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue4;               // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Debug_C_SetBpWarning) == 0x000008, "Wrong alignment on BP_FLIB_Debug_C_SetBpWarning");
static_assert(sizeof(BP_FLIB_Debug_C_SetBpWarning) == 0x000080, "Wrong size on BP_FLIB_Debug_C_SetBpWarning");
static_assert(offsetof(BP_FLIB_Debug_C_SetBpWarning, String) == 0x000000, "Member 'BP_FLIB_Debug_C_SetBpWarning::String' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_SetBpWarning, __WorldContext) == 0x000010, "Member 'BP_FLIB_Debug_C_SetBpWarning::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_SetBpWarning, CallFunc_MakeLiteralName_ReturnValue) == 0x000018, "Member 'BP_FLIB_Debug_C_SetBpWarning::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_SetBpWarning, CallFunc_GetPersistentLevelName_ReturnValue) == 0x000020, "Member 'BP_FLIB_Debug_C_SetBpWarning::CallFunc_GetPersistentLevelName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_SetBpWarning, CallFunc_GetGameFlagString_ReturnValue) == 0x000030, "Member 'BP_FLIB_Debug_C_SetBpWarning::CallFunc_GetGameFlagString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_SetBpWarning, CallFunc_Concat_StrStr_ReturnValue) == 0x000040, "Member 'BP_FLIB_Debug_C_SetBpWarning::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_SetBpWarning, CallFunc_Concat_StrStr_ReturnValue2) == 0x000050, "Member 'BP_FLIB_Debug_C_SetBpWarning::CallFunc_Concat_StrStr_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_SetBpWarning, CallFunc_Concat_StrStr_ReturnValue3) == 0x000060, "Member 'BP_FLIB_Debug_C_SetBpWarning::CallFunc_Concat_StrStr_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_SetBpWarning, CallFunc_Concat_StrStr_ReturnValue4) == 0x000070, "Member 'BP_FLIB_Debug_C_SetBpWarning::CallFunc_Concat_StrStr_ReturnValue4' has a wrong offset!");

// Function BP_FLIB_Debug.BP_FLIB_Debug_C.DebugFriendAllJoin
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_Debug_C_DebugFriendAllJoin final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EJackCharacter>                        K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCharacter                                CallFunc_Array_Get_Item;                           // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Debug_C_DebugFriendAllJoin) == 0x000008, "Wrong alignment on BP_FLIB_Debug_C_DebugFriendAllJoin");
static_assert(sizeof(BP_FLIB_Debug_C_DebugFriendAllJoin) == 0x000030, "Wrong size on BP_FLIB_Debug_C_DebugFriendAllJoin");
static_assert(offsetof(BP_FLIB_Debug_C_DebugFriendAllJoin, __WorldContext) == 0x000000, "Member 'BP_FLIB_Debug_C_DebugFriendAllJoin::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugFriendAllJoin, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_FLIB_Debug_C_DebugFriendAllJoin::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugFriendAllJoin, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_FLIB_Debug_C_DebugFriendAllJoin::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugFriendAllJoin, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_FLIB_Debug_C_DebugFriendAllJoin::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugFriendAllJoin, K2Node_MakeArray_Array) == 0x000018, "Member 'BP_FLIB_Debug_C_DebugFriendAllJoin::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugFriendAllJoin, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_FLIB_Debug_C_DebugFriendAllJoin::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugFriendAllJoin, CallFunc_Array_Get_Item) == 0x00002C, "Member 'BP_FLIB_Debug_C_DebugFriendAllJoin::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugFriendAllJoin, CallFunc_Less_IntInt_ReturnValue) == 0x00002D, "Member 'BP_FLIB_Debug_C_DebugFriendAllJoin::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Debug.BP_FLIB_Debug_C.DebugCampSetNo
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Debug_C_DebugCampSetNo final
{
public:
	int32                                         No;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EventName;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RemoteEvent_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_Debug_C_DebugCampSetNo) == 0x000008, "Wrong alignment on BP_FLIB_Debug_C_DebugCampSetNo");
static_assert(sizeof(BP_FLIB_Debug_C_DebugCampSetNo) == 0x000020, "Wrong size on BP_FLIB_Debug_C_DebugCampSetNo");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCampSetNo, No) == 0x000000, "Member 'BP_FLIB_Debug_C_DebugCampSetNo::No' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCampSetNo, __WorldContext) == 0x000008, "Member 'BP_FLIB_Debug_C_DebugCampSetNo::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCampSetNo, EventName) == 0x000010, "Member 'BP_FLIB_Debug_C_DebugCampSetNo::EventName' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCampSetNo, K2Node_SwitchInteger_CmpSuccess) == 0x000018, "Member 'BP_FLIB_Debug_C_DebugCampSetNo::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_DebugCampSetNo, CallFunc_RemoteEvent_ReturnValue) == 0x000019, "Member 'BP_FLIB_Debug_C_DebugCampSetNo::CallFunc_RemoteEvent_ReturnValue' has a wrong offset!");

// Function BP_FLIB_Debug.BP_FLIB_Debug_C.GetDebugFontSize
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_Debug_C_GetDebugFontSize final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DebugFontSize;                                     // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CharSizeHalfWidthX;                                // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CharSizeFullWidthX;                                // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CharSizeY;                                         // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScreenDebugMessageFontSize_CharSizeHalfWidthX; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScreenDebugMessageFontSize_CharSizeFullWidthX; // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScreenDebugMessageFontSize_CharSizeY;  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Debug_C_GetDebugFontSize) == 0x000008, "Wrong alignment on BP_FLIB_Debug_C_GetDebugFontSize");
static_assert(sizeof(BP_FLIB_Debug_C_GetDebugFontSize) == 0x000028, "Wrong size on BP_FLIB_Debug_C_GetDebugFontSize");
static_assert(offsetof(BP_FLIB_Debug_C_GetDebugFontSize, __WorldContext) == 0x000000, "Member 'BP_FLIB_Debug_C_GetDebugFontSize::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_GetDebugFontSize, DebugFontSize) == 0x000008, "Member 'BP_FLIB_Debug_C_GetDebugFontSize::DebugFontSize' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_GetDebugFontSize, CharSizeHalfWidthX) == 0x00000C, "Member 'BP_FLIB_Debug_C_GetDebugFontSize::CharSizeHalfWidthX' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_GetDebugFontSize, CharSizeFullWidthX) == 0x000010, "Member 'BP_FLIB_Debug_C_GetDebugFontSize::CharSizeFullWidthX' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_GetDebugFontSize, CharSizeY) == 0x000014, "Member 'BP_FLIB_Debug_C_GetDebugFontSize::CharSizeY' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_GetDebugFontSize, CallFunc_GetScreenDebugMessageFontSize_CharSizeHalfWidthX) == 0x000018, "Member 'BP_FLIB_Debug_C_GetDebugFontSize::CallFunc_GetScreenDebugMessageFontSize_CharSizeHalfWidthX' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_GetDebugFontSize, CallFunc_GetScreenDebugMessageFontSize_CharSizeFullWidthX) == 0x00001C, "Member 'BP_FLIB_Debug_C_GetDebugFontSize::CallFunc_GetScreenDebugMessageFontSize_CharSizeFullWidthX' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_GetDebugFontSize, CallFunc_GetScreenDebugMessageFontSize_CharSizeY) == 0x000020, "Member 'BP_FLIB_Debug_C_GetDebugFontSize::CallFunc_GetScreenDebugMessageFontSize_CharSizeY' has a wrong offset!");

// Function BP_FLIB_Debug.BP_FLIB_Debug_C.CollisionChecker
// 0x0278 (0x0278 - 0x0000)
struct BP_FLIB_Debug_C_CollisionChecker final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          ChangeVisible;                                     // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OutputStaticMeshActorList;                         // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         IllegalCollisionLog;                               // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<class FString>                         CustomNoCollisionLog;                              // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor)
	TMap<class AActor*, class FString>            IllegalCollisionActor;                             // 0x0040(0x0050)(Parm, OutParm, ZeroConstructor)
	TMap<class AActor*, class FString>            WarningCollisionActor;                             // 0x0090(0x0050)(Parm, OutParm, ZeroConstructor)
	TArray<class FName>                           IgnoreCollisionPresetBlockingVolume;               // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<class FName>                           IgnoreCollisionPreset;                             // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TMap<class AActor*, class FString>            TempCustomNoCollisionActor;                        // 0x0100(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TMap<class AActor*, class FString>            TempIllegalCollisionActor;                         // 0x0150(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<class FString>                         TempCustomNoCollisionLog;                          // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<class FString>                         TempIllegalCollisionLog;                           // 0x01B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         K2Node_MakeArray_Array;                            // 0x01D0(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<class AActor*>                         CallFunc_GetLevelActorsByName_ReturnValue;         // 0x01E0(0x0010)(ZeroConstructor, ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACameraBlockingVolume*                  K2Node_DynamicCast_AsCamera_Blocking_Volume;       // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABlockingVolume*                        K2Node_DynamicCast_AsBlocking_Volume;              // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             CallFunc_GetCollisionEnabled_ReturnValue;          // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             CallFunc_GetCollisionEnabled_ReturnValue2;         // 0x021A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21B[0x5];                                      // 0x021B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetCollisionProfileName_ReturnValue;      // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCollisionProfileName_ReturnValue2;     // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AStaticMeshActor*                       K2Node_DynamicCast_AsStatic_Mesh_Actor;            // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             CallFunc_GetCollisionEnabled_ReturnValue3;         // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetCollisionProfileName_ReturnValue3;     // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_251[0x3];                                      // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           K2Node_MakeArray_Array2;                           // 0x0258(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<class FName>                           K2Node_MakeArray_Array3;                           // 0x0268(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(BP_FLIB_Debug_C_CollisionChecker) == 0x000008, "Wrong alignment on BP_FLIB_Debug_C_CollisionChecker");
static_assert(sizeof(BP_FLIB_Debug_C_CollisionChecker) == 0x000278, "Wrong size on BP_FLIB_Debug_C_CollisionChecker");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, LevelName) == 0x000000, "Member 'BP_FLIB_Debug_C_CollisionChecker::LevelName' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, ChangeVisible) == 0x000010, "Member 'BP_FLIB_Debug_C_CollisionChecker::ChangeVisible' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, OutputStaticMeshActorList) == 0x000011, "Member 'BP_FLIB_Debug_C_CollisionChecker::OutputStaticMeshActorList' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, __WorldContext) == 0x000018, "Member 'BP_FLIB_Debug_C_CollisionChecker::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, IllegalCollisionLog) == 0x000020, "Member 'BP_FLIB_Debug_C_CollisionChecker::IllegalCollisionLog' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, CustomNoCollisionLog) == 0x000030, "Member 'BP_FLIB_Debug_C_CollisionChecker::CustomNoCollisionLog' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, IllegalCollisionActor) == 0x000040, "Member 'BP_FLIB_Debug_C_CollisionChecker::IllegalCollisionActor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, WarningCollisionActor) == 0x000090, "Member 'BP_FLIB_Debug_C_CollisionChecker::WarningCollisionActor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, IgnoreCollisionPresetBlockingVolume) == 0x0000E0, "Member 'BP_FLIB_Debug_C_CollisionChecker::IgnoreCollisionPresetBlockingVolume' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, IgnoreCollisionPreset) == 0x0000F0, "Member 'BP_FLIB_Debug_C_CollisionChecker::IgnoreCollisionPreset' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, TempCustomNoCollisionActor) == 0x000100, "Member 'BP_FLIB_Debug_C_CollisionChecker::TempCustomNoCollisionActor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, TempIllegalCollisionActor) == 0x000150, "Member 'BP_FLIB_Debug_C_CollisionChecker::TempIllegalCollisionActor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, TempCustomNoCollisionLog) == 0x0001A0, "Member 'BP_FLIB_Debug_C_CollisionChecker::TempCustomNoCollisionLog' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, TempIllegalCollisionLog) == 0x0001B0, "Member 'BP_FLIB_Debug_C_CollisionChecker::TempIllegalCollisionLog' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, Temp_int_Array_Index_Variable) == 0x0001C0, "Member 'BP_FLIB_Debug_C_CollisionChecker::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, CallFunc_Conv_StringToName_ReturnValue) == 0x0001C8, "Member 'BP_FLIB_Debug_C_CollisionChecker::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, K2Node_MakeArray_Array) == 0x0001D0, "Member 'BP_FLIB_Debug_C_CollisionChecker::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, CallFunc_GetLevelActorsByName_ReturnValue) == 0x0001E0, "Member 'BP_FLIB_Debug_C_CollisionChecker::CallFunc_GetLevelActorsByName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, CallFunc_Array_Get_Item) == 0x0001F0, "Member 'BP_FLIB_Debug_C_CollisionChecker::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, CallFunc_Array_Length_ReturnValue) == 0x0001F8, "Member 'BP_FLIB_Debug_C_CollisionChecker::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, K2Node_DynamicCast_AsCamera_Blocking_Volume) == 0x000200, "Member 'BP_FLIB_Debug_C_CollisionChecker::K2Node_DynamicCast_AsCamera_Blocking_Volume' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, K2Node_DynamicCast_bSuccess) == 0x000208, "Member 'BP_FLIB_Debug_C_CollisionChecker::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, K2Node_DynamicCast_AsBlocking_Volume) == 0x000210, "Member 'BP_FLIB_Debug_C_CollisionChecker::K2Node_DynamicCast_AsBlocking_Volume' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, K2Node_DynamicCast_bSuccess2) == 0x000218, "Member 'BP_FLIB_Debug_C_CollisionChecker::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, CallFunc_GetCollisionEnabled_ReturnValue) == 0x000219, "Member 'BP_FLIB_Debug_C_CollisionChecker::CallFunc_GetCollisionEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, CallFunc_GetCollisionEnabled_ReturnValue2) == 0x00021A, "Member 'BP_FLIB_Debug_C_CollisionChecker::CallFunc_GetCollisionEnabled_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, CallFunc_GetCollisionProfileName_ReturnValue) == 0x000220, "Member 'BP_FLIB_Debug_C_CollisionChecker::CallFunc_GetCollisionProfileName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, CallFunc_GetCollisionProfileName_ReturnValue2) == 0x000228, "Member 'BP_FLIB_Debug_C_CollisionChecker::CallFunc_GetCollisionProfileName_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, K2Node_DynamicCast_AsStatic_Mesh_Actor) == 0x000230, "Member 'BP_FLIB_Debug_C_CollisionChecker::K2Node_DynamicCast_AsStatic_Mesh_Actor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, K2Node_DynamicCast_bSuccess3) == 0x000238, "Member 'BP_FLIB_Debug_C_CollisionChecker::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, Temp_int_Loop_Counter_Variable) == 0x00023C, "Member 'BP_FLIB_Debug_C_CollisionChecker::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, CallFunc_GetCollisionEnabled_ReturnValue3) == 0x000240, "Member 'BP_FLIB_Debug_C_CollisionChecker::CallFunc_GetCollisionEnabled_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, CallFunc_GetCollisionProfileName_ReturnValue3) == 0x000248, "Member 'BP_FLIB_Debug_C_CollisionChecker::CallFunc_GetCollisionProfileName_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, CallFunc_Less_IntInt_ReturnValue) == 0x000250, "Member 'BP_FLIB_Debug_C_CollisionChecker::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, CallFunc_Add_IntInt_ReturnValue) == 0x000254, "Member 'BP_FLIB_Debug_C_CollisionChecker::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, K2Node_MakeArray_Array2) == 0x000258, "Member 'BP_FLIB_Debug_C_CollisionChecker::K2Node_MakeArray_Array2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionChecker, K2Node_MakeArray_Array3) == 0x000268, "Member 'BP_FLIB_Debug_C_CollisionChecker::K2Node_MakeArray_Array3' has a wrong offset!");

// Function BP_FLIB_Debug.BP_FLIB_Debug_C.MakeIllegalCollisionLog
// 0x0138 (0x0138 - 0x0000)
struct BP_FLIB_Debug_C_MakeIllegalCollisionLog final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CollisionPreset;                                   // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 LogString;                                         // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 MeshName;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AStaticMeshActor*                       K2Node_DynamicCast_AsStatic_Mesh_Actor;            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACameraBlockingVolume*                  K2Node_DynamicCast_AsCamera_Blocking_Volume;       // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABlockingVolume*                        K2Node_DynamicCast_AsBlocking_Volume;              // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue2;              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue2;               // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue3;               // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue4;               // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue5;               // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue6;               // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue7;               // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue8;               // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Debug_C_MakeIllegalCollisionLog) == 0x000008, "Wrong alignment on BP_FLIB_Debug_C_MakeIllegalCollisionLog");
static_assert(sizeof(BP_FLIB_Debug_C_MakeIllegalCollisionLog) == 0x000138, "Wrong size on BP_FLIB_Debug_C_MakeIllegalCollisionLog");
static_assert(offsetof(BP_FLIB_Debug_C_MakeIllegalCollisionLog, LevelName) == 0x000000, "Member 'BP_FLIB_Debug_C_MakeIllegalCollisionLog::LevelName' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_MakeIllegalCollisionLog, Actor) == 0x000010, "Member 'BP_FLIB_Debug_C_MakeIllegalCollisionLog::Actor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_MakeIllegalCollisionLog, CollisionPreset) == 0x000018, "Member 'BP_FLIB_Debug_C_MakeIllegalCollisionLog::CollisionPreset' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_MakeIllegalCollisionLog, __WorldContext) == 0x000020, "Member 'BP_FLIB_Debug_C_MakeIllegalCollisionLog::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_MakeIllegalCollisionLog, LogString) == 0x000028, "Member 'BP_FLIB_Debug_C_MakeIllegalCollisionLog::LogString' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_MakeIllegalCollisionLog, MeshName) == 0x000038, "Member 'BP_FLIB_Debug_C_MakeIllegalCollisionLog::MeshName' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_MakeIllegalCollisionLog, CallFunc_Conv_NameToString_ReturnValue) == 0x000048, "Member 'BP_FLIB_Debug_C_MakeIllegalCollisionLog::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_MakeIllegalCollisionLog, CallFunc_GetObjectName_ReturnValue) == 0x000058, "Member 'BP_FLIB_Debug_C_MakeIllegalCollisionLog::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_MakeIllegalCollisionLog, CallFunc_GetDisplayName_ReturnValue) == 0x000068, "Member 'BP_FLIB_Debug_C_MakeIllegalCollisionLog::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_MakeIllegalCollisionLog, K2Node_DynamicCast_AsStatic_Mesh_Actor) == 0x000078, "Member 'BP_FLIB_Debug_C_MakeIllegalCollisionLog::K2Node_DynamicCast_AsStatic_Mesh_Actor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_MakeIllegalCollisionLog, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'BP_FLIB_Debug_C_MakeIllegalCollisionLog::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_MakeIllegalCollisionLog, K2Node_DynamicCast_AsCamera_Blocking_Volume) == 0x000088, "Member 'BP_FLIB_Debug_C_MakeIllegalCollisionLog::K2Node_DynamicCast_AsCamera_Blocking_Volume' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_MakeIllegalCollisionLog, K2Node_DynamicCast_bSuccess2) == 0x000090, "Member 'BP_FLIB_Debug_C_MakeIllegalCollisionLog::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_MakeIllegalCollisionLog, K2Node_DynamicCast_AsBlocking_Volume) == 0x000098, "Member 'BP_FLIB_Debug_C_MakeIllegalCollisionLog::K2Node_DynamicCast_AsBlocking_Volume' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_MakeIllegalCollisionLog, K2Node_DynamicCast_bSuccess3) == 0x0000A0, "Member 'BP_FLIB_Debug_C_MakeIllegalCollisionLog::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_MakeIllegalCollisionLog, CallFunc_Concat_StrStr_ReturnValue) == 0x0000A8, "Member 'BP_FLIB_Debug_C_MakeIllegalCollisionLog::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_MakeIllegalCollisionLog, CallFunc_GetDisplayName_ReturnValue2) == 0x0000B8, "Member 'BP_FLIB_Debug_C_MakeIllegalCollisionLog::CallFunc_GetDisplayName_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_MakeIllegalCollisionLog, CallFunc_Concat_StrStr_ReturnValue2) == 0x0000C8, "Member 'BP_FLIB_Debug_C_MakeIllegalCollisionLog::CallFunc_Concat_StrStr_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_MakeIllegalCollisionLog, CallFunc_Concat_StrStr_ReturnValue3) == 0x0000D8, "Member 'BP_FLIB_Debug_C_MakeIllegalCollisionLog::CallFunc_Concat_StrStr_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_MakeIllegalCollisionLog, CallFunc_Concat_StrStr_ReturnValue4) == 0x0000E8, "Member 'BP_FLIB_Debug_C_MakeIllegalCollisionLog::CallFunc_Concat_StrStr_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_MakeIllegalCollisionLog, CallFunc_Concat_StrStr_ReturnValue5) == 0x0000F8, "Member 'BP_FLIB_Debug_C_MakeIllegalCollisionLog::CallFunc_Concat_StrStr_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_MakeIllegalCollisionLog, CallFunc_Concat_StrStr_ReturnValue6) == 0x000108, "Member 'BP_FLIB_Debug_C_MakeIllegalCollisionLog::CallFunc_Concat_StrStr_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_MakeIllegalCollisionLog, CallFunc_Concat_StrStr_ReturnValue7) == 0x000118, "Member 'BP_FLIB_Debug_C_MakeIllegalCollisionLog::CallFunc_Concat_StrStr_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_MakeIllegalCollisionLog, CallFunc_Concat_StrStr_ReturnValue8) == 0x000128, "Member 'BP_FLIB_Debug_C_MakeIllegalCollisionLog::CallFunc_Concat_StrStr_ReturnValue8' has a wrong offset!");

// Function BP_FLIB_Debug.BP_FLIB_Debug_C.CollisionCheckCore
// 0x0150 (0x0150 - 0x0000)
struct BP_FLIB_Debug_C_CollisionCheckCore final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CollisionProfileName;                              // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             CollisionEnabled;                                  // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           IgnoreCollisionPreset;                             // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	TMap<class AActor*, class FString>            RefIllegalColision;                                // 0x0038(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	TMap<class AActor*, class FString>            RefCustomNoColision;                               // 0x0088(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	TArray<class FString>                         RefIllegalCollisionLog;                            // 0x00D8(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	TArray<class FString>                         RefCustomNoCollisionLog;                           // 0x00E8(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          OutputActorList;                                   // 0x00F8(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0100(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_MakeIllegalCollisionLog_LogString;        // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_MakeIllegalCollisionLog_LogString2;       // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue2;                   // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x013A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13B[0x5];                                      // 0x013B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Debug_C_CollisionCheckCore) == 0x000008, "Wrong alignment on BP_FLIB_Debug_C_CollisionCheckCore");
static_assert(sizeof(BP_FLIB_Debug_C_CollisionCheckCore) == 0x000150, "Wrong size on BP_FLIB_Debug_C_CollisionCheckCore");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionCheckCore, LevelName) == 0x000000, "Member 'BP_FLIB_Debug_C_CollisionCheckCore::LevelName' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionCheckCore, Actor) == 0x000010, "Member 'BP_FLIB_Debug_C_CollisionCheckCore::Actor' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionCheckCore, CollisionProfileName) == 0x000018, "Member 'BP_FLIB_Debug_C_CollisionCheckCore::CollisionProfileName' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionCheckCore, CollisionEnabled) == 0x000020, "Member 'BP_FLIB_Debug_C_CollisionCheckCore::CollisionEnabled' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionCheckCore, IgnoreCollisionPreset) == 0x000028, "Member 'BP_FLIB_Debug_C_CollisionCheckCore::IgnoreCollisionPreset' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionCheckCore, RefIllegalColision) == 0x000038, "Member 'BP_FLIB_Debug_C_CollisionCheckCore::RefIllegalColision' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionCheckCore, RefCustomNoColision) == 0x000088, "Member 'BP_FLIB_Debug_C_CollisionCheckCore::RefCustomNoColision' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionCheckCore, RefIllegalCollisionLog) == 0x0000D8, "Member 'BP_FLIB_Debug_C_CollisionCheckCore::RefIllegalCollisionLog' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionCheckCore, RefCustomNoCollisionLog) == 0x0000E8, "Member 'BP_FLIB_Debug_C_CollisionCheckCore::RefCustomNoCollisionLog' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionCheckCore, OutputActorList) == 0x0000F8, "Member 'BP_FLIB_Debug_C_CollisionCheckCore::OutputActorList' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionCheckCore, __WorldContext) == 0x000100, "Member 'BP_FLIB_Debug_C_CollisionCheckCore::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionCheckCore, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000108, "Member 'BP_FLIB_Debug_C_CollisionCheckCore::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionCheckCore, CallFunc_MakeIllegalCollisionLog_LogString) == 0x000110, "Member 'BP_FLIB_Debug_C_CollisionCheckCore::CallFunc_MakeIllegalCollisionLog_LogString' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionCheckCore, CallFunc_MakeIllegalCollisionLog_LogString2) == 0x000120, "Member 'BP_FLIB_Debug_C_CollisionCheckCore::CallFunc_MakeIllegalCollisionLog_LogString2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionCheckCore, CallFunc_Array_Add_ReturnValue) == 0x000130, "Member 'BP_FLIB_Debug_C_CollisionCheckCore::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionCheckCore, CallFunc_Array_Add_ReturnValue2) == 0x000134, "Member 'BP_FLIB_Debug_C_CollisionCheckCore::CallFunc_Array_Add_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionCheckCore, CallFunc_Array_Contains_ReturnValue) == 0x000138, "Member 'BP_FLIB_Debug_C_CollisionCheckCore::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionCheckCore, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000139, "Member 'BP_FLIB_Debug_C_CollisionCheckCore::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionCheckCore, CallFunc_BooleanAND_ReturnValue) == 0x00013A, "Member 'BP_FLIB_Debug_C_CollisionCheckCore::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Debug_C_CollisionCheckCore, CallFunc_Conv_NameToString_ReturnValue) == 0x000140, "Member 'BP_FLIB_Debug_C_CollisionCheckCore::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");

}

