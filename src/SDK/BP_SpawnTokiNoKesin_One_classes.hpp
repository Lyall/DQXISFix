#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SpawnTokiNoKesin_One

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// DynamicClass BP_SpawnTokiNoKesin_One.BP_SpawnTokiNoKesin_One_C
// 0x0098 (0x0430 - 0x0398)
class ABP_SpawnTokiNoKesin_One_C final : public AActor
{
public:
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnSecMax;                                       // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnSecMin;                                       // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReSpawnSecMax;                                     // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReSpawnSecMin;                                     // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 SpawnClass;                                        // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnPlayerLength;                                 // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetPosition;                                    // 0x03BC(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnTimer;                                        // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnClassLifeSecMin;                              // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnClassLifeSecMax;                              // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnClassScaleMin;                                // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnClassScaleMax;                                // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpawnClassIsWallMove;                              // 0x03DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpawnClassDebugOffBlink;                           // 0x03DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3DE[0x2];                                      // 0x03DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 MoveTargetActor;                                   // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSpawnActorRegist;                                // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         SpawnActorArray;                                   // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	int32                                         MaxSpawnActorNum;                                  // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMoveMotionBlendRate;                            // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveAnimationRate;                                 // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReSpawnTimer;                                      // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         CanDestroySpawnActorArray;                         // 0x0410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	bool                                          CallFunc_IsSScenario_SScenario;                    // 0x0420(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_421[0x3];                                      // 0x0421(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0424(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallFunc_CanSpawnActor_CanSpawn;                   // 0x0428(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallFunc_IsPointOnGround_OnGround;                 // 0x0429(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42A[0x6];                                      // 0x042A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ArrangeSpawnArray();
	void CanSpawnActor(bool* bpp__CanSpawn__pf);
	void GetReuseOrSpawnActor(const struct FTransform& bpp__Transform__pf, class ABP_TokiNoKesin_One_C** bpp__NewParam__pf);
	void IsPointOnGround(const struct FVector& bpp__Location__pf, float bpp__CheckLength__pf, bool* bpp__OnGround__pf);
	void ReceiveBeginPlay();
	void ReceiveTick(float bpp__DeltaSeconds__pf);
	void SetRespawnTimer();
	void SetTimer();
	void SpawnActor();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BP_SpawnTokiNoKesin_One_C">();
	}
	static class ABP_SpawnTokiNoKesin_One_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SpawnTokiNoKesin_One_C>();
	}
};
static_assert(alignof(ABP_SpawnTokiNoKesin_One_C) == 0x000008, "Wrong alignment on ABP_SpawnTokiNoKesin_One_C");
static_assert(sizeof(ABP_SpawnTokiNoKesin_One_C) == 0x000430, "Wrong size on ABP_SpawnTokiNoKesin_One_C");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, DefaultSceneRoot) == 0x000398, "Member 'ABP_SpawnTokiNoKesin_One_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, SpawnSecMax) == 0x0003A0, "Member 'ABP_SpawnTokiNoKesin_One_C::SpawnSecMax' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, SpawnSecMin) == 0x0003A4, "Member 'ABP_SpawnTokiNoKesin_One_C::SpawnSecMin' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, ReSpawnSecMax) == 0x0003A8, "Member 'ABP_SpawnTokiNoKesin_One_C::ReSpawnSecMax' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, ReSpawnSecMin) == 0x0003AC, "Member 'ABP_SpawnTokiNoKesin_One_C::ReSpawnSecMin' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, SpawnClass) == 0x0003B0, "Member 'ABP_SpawnTokiNoKesin_One_C::SpawnClass' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, SpawnPlayerLength) == 0x0003B8, "Member 'ABP_SpawnTokiNoKesin_One_C::SpawnPlayerLength' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, TargetPosition) == 0x0003BC, "Member 'ABP_SpawnTokiNoKesin_One_C::TargetPosition' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, SpawnTimer) == 0x0003C8, "Member 'ABP_SpawnTokiNoKesin_One_C::SpawnTimer' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, SpawnClassLifeSecMin) == 0x0003CC, "Member 'ABP_SpawnTokiNoKesin_One_C::SpawnClassLifeSecMin' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, SpawnClassLifeSecMax) == 0x0003D0, "Member 'ABP_SpawnTokiNoKesin_One_C::SpawnClassLifeSecMax' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, SpawnClassScaleMin) == 0x0003D4, "Member 'ABP_SpawnTokiNoKesin_One_C::SpawnClassScaleMin' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, SpawnClassScaleMax) == 0x0003D8, "Member 'ABP_SpawnTokiNoKesin_One_C::SpawnClassScaleMax' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, SpawnClassIsWallMove) == 0x0003DC, "Member 'ABP_SpawnTokiNoKesin_One_C::SpawnClassIsWallMove' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, SpawnClassDebugOffBlink) == 0x0003DD, "Member 'ABP_SpawnTokiNoKesin_One_C::SpawnClassDebugOffBlink' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, MoveTargetActor) == 0x0003E0, "Member 'ABP_SpawnTokiNoKesin_One_C::MoveTargetActor' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, IsSpawnActorRegist) == 0x0003E8, "Member 'ABP_SpawnTokiNoKesin_One_C::IsSpawnActorRegist' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, SpawnActorArray) == 0x0003F0, "Member 'ABP_SpawnTokiNoKesin_One_C::SpawnActorArray' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, MaxSpawnActorNum) == 0x000400, "Member 'ABP_SpawnTokiNoKesin_One_C::MaxSpawnActorNum' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, MaxMoveMotionBlendRate) == 0x000404, "Member 'ABP_SpawnTokiNoKesin_One_C::MaxMoveMotionBlendRate' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, MoveAnimationRate) == 0x000408, "Member 'ABP_SpawnTokiNoKesin_One_C::MoveAnimationRate' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, ReSpawnTimer) == 0x00040C, "Member 'ABP_SpawnTokiNoKesin_One_C::ReSpawnTimer' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, CanDestroySpawnActorArray) == 0x000410, "Member 'ABP_SpawnTokiNoKesin_One_C::CanDestroySpawnActorArray' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, CallFunc_IsSScenario_SScenario) == 0x000420, "Member 'ABP_SpawnTokiNoKesin_One_C::CallFunc_IsSScenario_SScenario' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, K2Node_Event_DeltaSeconds) == 0x000424, "Member 'ABP_SpawnTokiNoKesin_One_C::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, CallFunc_CanSpawnActor_CanSpawn) == 0x000428, "Member 'ABP_SpawnTokiNoKesin_One_C::CallFunc_CanSpawnActor_CanSpawn' has a wrong offset!");
static_assert(offsetof(ABP_SpawnTokiNoKesin_One_C, CallFunc_IsPointOnGround_OnGround) == 0x000429, "Member 'ABP_SpawnTokiNoKesin_One_C::CallFunc_IsPointOnGround_OnGround' has a wrong offset!");

}

