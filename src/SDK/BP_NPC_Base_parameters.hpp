#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPC_Base

#include "Basic.hpp"

#include "ENUM_Schedule_Pattern_structs.hpp"
#include "JackGame_structs.hpp"
#include "ENUM_CoordinateMeshSlot_structs.hpp"
#include "ENUM_CharacterBodyType_structs.hpp"


namespace SDK::Params
{

// Function BP_NPC_Base.BP_NPC_Base_C.AddScheduleFixedLocationInfo
// 0x0002 (0x0002 - 0x0000)
struct BP_NPC_Base_C_AddScheduleFixedLocationInfo final
{
public:
	bool                                          bpp__ForceFixedLocation__pf;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__Ptn__pf;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Base_C_AddScheduleFixedLocationInfo) == 0x000001, "Wrong alignment on BP_NPC_Base_C_AddScheduleFixedLocationInfo");
static_assert(sizeof(BP_NPC_Base_C_AddScheduleFixedLocationInfo) == 0x000002, "Wrong size on BP_NPC_Base_C_AddScheduleFixedLocationInfo");
static_assert(offsetof(BP_NPC_Base_C_AddScheduleFixedLocationInfo, bpp__ForceFixedLocation__pf) == 0x000000, "Member 'BP_NPC_Base_C_AddScheduleFixedLocationInfo::bpp__ForceFixedLocation__pf' has a wrong offset!");
static_assert(offsetof(BP_NPC_Base_C_AddScheduleFixedLocationInfo, bpp__Ptn__pf) == 0x000001, "Member 'BP_NPC_Base_C_AddScheduleFixedLocationInfo::bpp__Ptn__pf' has a wrong offset!");

// Function BP_NPC_Base.BP_NPC_Base_C.ChangeCutSceneFlag
// 0x0010 (0x0010 - 0x0000)
struct BP_NPC_Base_C_ChangeCutSceneFlag final
{
public:
	struct FJackLDT_GameFlagDataCutScene          bpp__CutSceneFlag__pf;                             // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Base_C_ChangeCutSceneFlag) == 0x000008, "Wrong alignment on BP_NPC_Base_C_ChangeCutSceneFlag");
static_assert(sizeof(BP_NPC_Base_C_ChangeCutSceneFlag) == 0x000010, "Wrong size on BP_NPC_Base_C_ChangeCutSceneFlag");
static_assert(offsetof(BP_NPC_Base_C_ChangeCutSceneFlag, bpp__CutSceneFlag__pf) == 0x000000, "Member 'BP_NPC_Base_C_ChangeCutSceneFlag::bpp__CutSceneFlag__pf' has a wrong offset!");

// Function BP_NPC_Base.BP_NPC_Base_C.ChangeScenarioFlag
// 0x0010 (0x0010 - 0x0000)
struct BP_NPC_Base_C_ChangeScenarioFlag final
{
public:
	struct FJackLDT_GameFlagDataScenario          bpp__ScenarioFlag__pf;                             // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Base_C_ChangeScenarioFlag) == 0x000008, "Wrong alignment on BP_NPC_Base_C_ChangeScenarioFlag");
static_assert(sizeof(BP_NPC_Base_C_ChangeScenarioFlag) == 0x000010, "Wrong size on BP_NPC_Base_C_ChangeScenarioFlag");
static_assert(offsetof(BP_NPC_Base_C_ChangeScenarioFlag, bpp__ScenarioFlag__pf) == 0x000000, "Member 'BP_NPC_Base_C_ChangeScenarioFlag::bpp__ScenarioFlag__pf' has a wrong offset!");

// Function BP_NPC_Base.BP_NPC_Base_C.ExecuteUbergraph_BP_NPC_Base_1
// 0x0004 (0x0004 - 0x0000)
struct BP_NPC_Base_C_ExecuteUbergraph_BP_NPC_Base_1 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Base_C_ExecuteUbergraph_BP_NPC_Base_1) == 0x000004, "Wrong alignment on BP_NPC_Base_C_ExecuteUbergraph_BP_NPC_Base_1");
static_assert(sizeof(BP_NPC_Base_C_ExecuteUbergraph_BP_NPC_Base_1) == 0x000004, "Wrong size on BP_NPC_Base_C_ExecuteUbergraph_BP_NPC_Base_1");
static_assert(offsetof(BP_NPC_Base_C_ExecuteUbergraph_BP_NPC_Base_1, bpp__EntryPoint__pf) == 0x000000, "Member 'BP_NPC_Base_C_ExecuteUbergraph_BP_NPC_Base_1::bpp__EntryPoint__pf' has a wrong offset!");

// Function BP_NPC_Base.BP_NPC_Base_C.GetCharacterBodyType
// 0x0001 (0x0001 - 0x0000)
struct BP_NPC_Base_C_GetCharacterBodyType final
{
public:
	ENUM_CharacterBodyType                        bpp__Result__pf;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Base_C_GetCharacterBodyType) == 0x000001, "Wrong alignment on BP_NPC_Base_C_GetCharacterBodyType");
static_assert(sizeof(BP_NPC_Base_C_GetCharacterBodyType) == 0x000001, "Wrong size on BP_NPC_Base_C_GetCharacterBodyType");
static_assert(offsetof(BP_NPC_Base_C_GetCharacterBodyType, bpp__Result__pf) == 0x000000, "Member 'BP_NPC_Base_C_GetCharacterBodyType::bpp__Result__pf' has a wrong offset!");

// Function BP_NPC_Base.BP_NPC_Base_C.GetMeshByCoordinateSlotType
// 0x0010 (0x0010 - 0x0000)
struct BP_NPC_Base_C_GetMeshByCoordinateSlotType final
{
public:
	ENUM_CoordinateMeshSlot                       bpp__SlotType__pf;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 bpp__SkeletalMeshComponent__pf;                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Base_C_GetMeshByCoordinateSlotType) == 0x000008, "Wrong alignment on BP_NPC_Base_C_GetMeshByCoordinateSlotType");
static_assert(sizeof(BP_NPC_Base_C_GetMeshByCoordinateSlotType) == 0x000010, "Wrong size on BP_NPC_Base_C_GetMeshByCoordinateSlotType");
static_assert(offsetof(BP_NPC_Base_C_GetMeshByCoordinateSlotType, bpp__SlotType__pf) == 0x000000, "Member 'BP_NPC_Base_C_GetMeshByCoordinateSlotType::bpp__SlotType__pf' has a wrong offset!");
static_assert(offsetof(BP_NPC_Base_C_GetMeshByCoordinateSlotType, bpp__SkeletalMeshComponent__pf) == 0x000008, "Member 'BP_NPC_Base_C_GetMeshByCoordinateSlotType::bpp__SkeletalMeshComponent__pf' has a wrong offset!");

// Function BP_NPC_Base.BP_NPC_Base_C.IsUpdateSchedule
// 0x0001 (0x0001 - 0x0000)
struct BP_NPC_Base_C_IsUpdateSchedule final
{
public:
	bool                                          bpp__Result__pf;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Base_C_IsUpdateSchedule) == 0x000001, "Wrong alignment on BP_NPC_Base_C_IsUpdateSchedule");
static_assert(sizeof(BP_NPC_Base_C_IsUpdateSchedule) == 0x000001, "Wrong size on BP_NPC_Base_C_IsUpdateSchedule");
static_assert(offsetof(BP_NPC_Base_C_IsUpdateSchedule, bpp__Result__pf) == 0x000000, "Member 'BP_NPC_Base_C_IsUpdateSchedule::bpp__Result__pf' has a wrong offset!");

// Function BP_NPC_Base.BP_NPC_Base_C.SetDefaultSchedulePtn
// 0x0001 (0x0001 - 0x0000)
struct BP_NPC_Base_C_SetDefaultSchedulePtn final
{
public:
	bool                                          bpp__ForceSet__pf;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Base_C_SetDefaultSchedulePtn) == 0x000001, "Wrong alignment on BP_NPC_Base_C_SetDefaultSchedulePtn");
static_assert(sizeof(BP_NPC_Base_C_SetDefaultSchedulePtn) == 0x000001, "Wrong size on BP_NPC_Base_C_SetDefaultSchedulePtn");
static_assert(offsetof(BP_NPC_Base_C_SetDefaultSchedulePtn, bpp__ForceSet__pf) == 0x000000, "Member 'BP_NPC_Base_C_SetDefaultSchedulePtn::bpp__ForceSet__pf' has a wrong offset!");

// Function BP_NPC_Base.BP_NPC_Base_C.SetImportanceUpdateComponent
// 0x0001 (0x0001 - 0x0000)
struct BP_NPC_Base_C_SetImportanceUpdateComponent final
{
public:
	EJackNPCImportance                            bpp__Importance__pf;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Base_C_SetImportanceUpdateComponent) == 0x000001, "Wrong alignment on BP_NPC_Base_C_SetImportanceUpdateComponent");
static_assert(sizeof(BP_NPC_Base_C_SetImportanceUpdateComponent) == 0x000001, "Wrong size on BP_NPC_Base_C_SetImportanceUpdateComponent");
static_assert(offsetof(BP_NPC_Base_C_SetImportanceUpdateComponent, bpp__Importance__pf) == 0x000000, "Member 'BP_NPC_Base_C_SetImportanceUpdateComponent::bpp__Importance__pf' has a wrong offset!");

// Function BP_NPC_Base.BP_NPC_Base_C.SetNotUpdateSchedulePtnFlag
// 0x0001 (0x0001 - 0x0000)
struct BP_NPC_Base_C_SetNotUpdateSchedulePtnFlag final
{
public:
	bool                                          bpp__NotUpdateSchedule__pf;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Base_C_SetNotUpdateSchedulePtnFlag) == 0x000001, "Wrong alignment on BP_NPC_Base_C_SetNotUpdateSchedulePtnFlag");
static_assert(sizeof(BP_NPC_Base_C_SetNotUpdateSchedulePtnFlag) == 0x000001, "Wrong size on BP_NPC_Base_C_SetNotUpdateSchedulePtnFlag");
static_assert(offsetof(BP_NPC_Base_C_SetNotUpdateSchedulePtnFlag, bpp__NotUpdateSchedule__pf) == 0x000000, "Member 'BP_NPC_Base_C_SetNotUpdateSchedulePtnFlag::bpp__NotUpdateSchedule__pf' has a wrong offset!");

// Function BP_NPC_Base.BP_NPC_Base_C.SetNpcSchedulePtnFromScenarioFlag
// 0x0018 (0x0018 - 0x0000)
struct BP_NPC_Base_C_SetNpcSchedulePtnFromScenarioFlag final
{
public:
	struct FJackLDT_GameFlagDataScenario          bpp__ScenarioFlag__pf;                             // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bpp__bResult__pf;                                  // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__Ptn__pf;                                      // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_NPC_Base_C_SetNpcSchedulePtnFromScenarioFlag) == 0x000008, "Wrong alignment on BP_NPC_Base_C_SetNpcSchedulePtnFromScenarioFlag");
static_assert(sizeof(BP_NPC_Base_C_SetNpcSchedulePtnFromScenarioFlag) == 0x000018, "Wrong size on BP_NPC_Base_C_SetNpcSchedulePtnFromScenarioFlag");
static_assert(offsetof(BP_NPC_Base_C_SetNpcSchedulePtnFromScenarioFlag, bpp__ScenarioFlag__pf) == 0x000000, "Member 'BP_NPC_Base_C_SetNpcSchedulePtnFromScenarioFlag::bpp__ScenarioFlag__pf' has a wrong offset!");
static_assert(offsetof(BP_NPC_Base_C_SetNpcSchedulePtnFromScenarioFlag, bpp__bResult__pf) == 0x000010, "Member 'BP_NPC_Base_C_SetNpcSchedulePtnFromScenarioFlag::bpp__bResult__pf' has a wrong offset!");
static_assert(offsetof(BP_NPC_Base_C_SetNpcSchedulePtnFromScenarioFlag, bpp__Ptn__pf) == 0x000011, "Member 'BP_NPC_Base_C_SetNpcSchedulePtnFromScenarioFlag::bpp__Ptn__pf' has a wrong offset!");

// Function BP_NPC_Base.BP_NPC_Base_C.Set ScheduledCollisionEnable
// 0x0001 (0x0001 - 0x0000)
struct BP_NPC_Base_C_Set_ScheduledCollisionEnable final
{
public:
	bool                                          bpp__Enable__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Base_C_Set_ScheduledCollisionEnable) == 0x000001, "Wrong alignment on BP_NPC_Base_C_Set_ScheduledCollisionEnable");
static_assert(sizeof(BP_NPC_Base_C_Set_ScheduledCollisionEnable) == 0x000001, "Wrong size on BP_NPC_Base_C_Set_ScheduledCollisionEnable");
static_assert(offsetof(BP_NPC_Base_C_Set_ScheduledCollisionEnable, bpp__Enable__pf) == 0x000000, "Member 'BP_NPC_Base_C_Set_ScheduledCollisionEnable::bpp__Enable__pf' has a wrong offset!");

// Function BP_NPC_Base.BP_NPC_Base_C.UpdateScheduledCollision
// 0x0001 (0x0001 - 0x0000)
struct BP_NPC_Base_C_UpdateScheduledCollision final
{
public:
	ENUM_Schedule_Pattern                         bpp__Pnt__pf;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Base_C_UpdateScheduledCollision) == 0x000001, "Wrong alignment on BP_NPC_Base_C_UpdateScheduledCollision");
static_assert(sizeof(BP_NPC_Base_C_UpdateScheduledCollision) == 0x000001, "Wrong size on BP_NPC_Base_C_UpdateScheduledCollision");
static_assert(offsetof(BP_NPC_Base_C_UpdateScheduledCollision, bpp__Pnt__pf) == 0x000000, "Member 'BP_NPC_Base_C_UpdateScheduledCollision::bpp__Pnt__pf' has a wrong offset!");

// Function BP_NPC_Base.BP_NPC_Base_C.UpdateSchedulePtnFromQuest
// 0x0002 (0x0002 - 0x0000)
struct BP_NPC_Base_C_UpdateSchedulePtnFromQuest final
{
public:
	bool                                          bpp__Result__pf;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__Ptn__pf;                                      // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Base_C_UpdateSchedulePtnFromQuest) == 0x000001, "Wrong alignment on BP_NPC_Base_C_UpdateSchedulePtnFromQuest");
static_assert(sizeof(BP_NPC_Base_C_UpdateSchedulePtnFromQuest) == 0x000002, "Wrong size on BP_NPC_Base_C_UpdateSchedulePtnFromQuest");
static_assert(offsetof(BP_NPC_Base_C_UpdateSchedulePtnFromQuest, bpp__Result__pf) == 0x000000, "Member 'BP_NPC_Base_C_UpdateSchedulePtnFromQuest::bpp__Result__pf' has a wrong offset!");
static_assert(offsetof(BP_NPC_Base_C_UpdateSchedulePtnFromQuest, bpp__Ptn__pf) == 0x000001, "Member 'BP_NPC_Base_C_UpdateSchedulePtnFromQuest::bpp__Ptn__pf' has a wrong offset!");

// Function BP_NPC_Base.BP_NPC_Base_C.UpdateSchedulePtnIntegrate
// 0x0003 (0x0003 - 0x0000)
struct BP_NPC_Base_C_UpdateSchedulePtnIntegrate final
{
public:
	bool                                          bpp__ForceFixedLocation__pf;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__EntryPtn__pf;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__DoNotStack__pf;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Base_C_UpdateSchedulePtnIntegrate) == 0x000001, "Wrong alignment on BP_NPC_Base_C_UpdateSchedulePtnIntegrate");
static_assert(sizeof(BP_NPC_Base_C_UpdateSchedulePtnIntegrate) == 0x000003, "Wrong size on BP_NPC_Base_C_UpdateSchedulePtnIntegrate");
static_assert(offsetof(BP_NPC_Base_C_UpdateSchedulePtnIntegrate, bpp__ForceFixedLocation__pf) == 0x000000, "Member 'BP_NPC_Base_C_UpdateSchedulePtnIntegrate::bpp__ForceFixedLocation__pf' has a wrong offset!");
static_assert(offsetof(BP_NPC_Base_C_UpdateSchedulePtnIntegrate, bpp__EntryPtn__pf) == 0x000001, "Member 'BP_NPC_Base_C_UpdateSchedulePtnIntegrate::bpp__EntryPtn__pf' has a wrong offset!");
static_assert(offsetof(BP_NPC_Base_C_UpdateSchedulePtnIntegrate, bpp__DoNotStack__pf) == 0x000002, "Member 'BP_NPC_Base_C_UpdateSchedulePtnIntegrate::bpp__DoNotStack__pf' has a wrong offset!");

// Function BP_NPC_Base.BP_NPC_Base_C.Update Status By Weather Fine
// 0x0004 (0x0004 - 0x0000)
struct BP_NPC_Base_C_Update_Status_By_Weather_Fine final
{
public:
	int32                                         bpp__OptionalxPtn__pfT;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_Base_C_Update_Status_By_Weather_Fine) == 0x000004, "Wrong alignment on BP_NPC_Base_C_Update_Status_By_Weather_Fine");
static_assert(sizeof(BP_NPC_Base_C_Update_Status_By_Weather_Fine) == 0x000004, "Wrong size on BP_NPC_Base_C_Update_Status_By_Weather_Fine");
static_assert(offsetof(BP_NPC_Base_C_Update_Status_By_Weather_Fine, bpp__OptionalxPtn__pfT) == 0x000000, "Member 'BP_NPC_Base_C_Update_Status_By_Weather_Fine::bpp__OptionalxPtn__pfT' has a wrong offset!");

}

