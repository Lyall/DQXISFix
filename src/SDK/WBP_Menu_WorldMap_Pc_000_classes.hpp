#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Menu_WorldMap_Pc_000

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "JackGame_structs.hpp"
#include "JackGame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Menu_WorldMap_Pc_000.WBP_Menu_WorldMap_Pc_000_C
// 0x0050 (0x03C0 - 0x0370)
class UWBP_Menu_WorldMap_Pc_000_C final : public UJackUMGWidgetBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(Transient, DuplicateTransient)
	class UWidgetAnimation*                       Shine_Loop;                                        // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Effect_PCMaker_01;                                 // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Effect_PCMaker_02;                                 // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 PCMarkerPanel;                                     // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         MarkerAngle;                                       // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            PCMarker_01_AnimeOffsetTop;                        // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PCMarker_01_AnimeTime;                             // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStopsAnimation;                                   // 0x03AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWillStopAnimation;                                // 0x03AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3AE[0x2];                                      // 0x03AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EJackWorldMapState>                    TranslucentStates;                                 // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

public:
	void ExecuteUbergraph_WBP_Menu_WorldMap_Pc_000(int32 EntryPoint);
	void Construct();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void SetMarkerAngle(float Angle);
	void SyncStartAnimation();
	void UpdateAnimation(float DeltaTime);
	void SyncStopAnimation();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Menu_WorldMap_Pc_000_C">();
	}
	static class UWBP_Menu_WorldMap_Pc_000_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Menu_WorldMap_Pc_000_C>();
	}
};
static_assert(alignof(UWBP_Menu_WorldMap_Pc_000_C) == 0x000008, "Wrong alignment on UWBP_Menu_WorldMap_Pc_000_C");
static_assert(sizeof(UWBP_Menu_WorldMap_Pc_000_C) == 0x0003C0, "Wrong size on UWBP_Menu_WorldMap_Pc_000_C");
static_assert(offsetof(UWBP_Menu_WorldMap_Pc_000_C, UberGraphFrame) == 0x000370, "Member 'UWBP_Menu_WorldMap_Pc_000_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_WorldMap_Pc_000_C, Shine_Loop) == 0x000378, "Member 'UWBP_Menu_WorldMap_Pc_000_C::Shine_Loop' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_WorldMap_Pc_000_C, Effect_PCMaker_01) == 0x000380, "Member 'UWBP_Menu_WorldMap_Pc_000_C::Effect_PCMaker_01' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_WorldMap_Pc_000_C, Effect_PCMaker_02) == 0x000388, "Member 'UWBP_Menu_WorldMap_Pc_000_C::Effect_PCMaker_02' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_WorldMap_Pc_000_C, PCMarkerPanel) == 0x000390, "Member 'UWBP_Menu_WorldMap_Pc_000_C::PCMarkerPanel' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_WorldMap_Pc_000_C, MarkerAngle) == 0x000398, "Member 'UWBP_Menu_WorldMap_Pc_000_C::MarkerAngle' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_WorldMap_Pc_000_C, PCMarker_01_AnimeOffsetTop) == 0x0003A0, "Member 'UWBP_Menu_WorldMap_Pc_000_C::PCMarker_01_AnimeOffsetTop' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_WorldMap_Pc_000_C, PCMarker_01_AnimeTime) == 0x0003A8, "Member 'UWBP_Menu_WorldMap_Pc_000_C::PCMarker_01_AnimeTime' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_WorldMap_Pc_000_C, bStopsAnimation) == 0x0003AC, "Member 'UWBP_Menu_WorldMap_Pc_000_C::bStopsAnimation' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_WorldMap_Pc_000_C, bWillStopAnimation) == 0x0003AD, "Member 'UWBP_Menu_WorldMap_Pc_000_C::bWillStopAnimation' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_WorldMap_Pc_000_C, TranslucentStates) == 0x0003B0, "Member 'UWBP_Menu_WorldMap_Pc_000_C::TranslucentStates' has a wrong offset!");

}

