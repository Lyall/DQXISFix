#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_XYMoveBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "JackGame_structs.hpp"


namespace SDK
{

// DynamicClass BP_XYMoveBase.BP_XYMoveBase_C
// 0x04C8 (0x0860 - 0x0398)
class ABP_XYMoveBase_C : public AActor
{
public:
	class UBoxComponent*                          PlaceLeftBlockingVolume;                           // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          PlaceLeftTrigger;                                  // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        PlaceLeftArrow;                                    // 0x03A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        PlaceLeftArrowOut;                                 // 0x03B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        PlaceLeftHinge;                                    // 0x03B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        PlaceLeftEnd;                                      // 0x03C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          PlaceRightBlockingVolume;                          // 0x03C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          PlaceRightTrigger;                                 // 0x03D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        PlaceRightArrowOut;                                // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        PlaceRightArrow;                                   // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        PlaceRightHinge;                                   // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        PlaceRightEnd;                                     // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       Spline;                                            // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextRenderComponent*                   TextRender;                                        // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AJackPlayableCharacter*                 InteractedActor;                                   // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           PlayAnimMontage;                                   // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReservedLocation;                                  // 0x0418(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReservedRotation;                                  // 0x0424(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UArrowComponent*                        BeginArrow;                                        // 0x0430(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlaceRightNaviOffset;                              // 0x0438(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlaceRightOffsetHeight;                            // 0x0444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlaceLeftNaviOffset;                               // 0x0448(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlaceLeftOffsetHeight;                             // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FallOnArrivedLowerPoint;                           // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_459[0x7];                                      // 0x0459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PlaceRightInAnimName;                              // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           PlaceRightInAnim;                                  // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           PlaceRightInAnimRider;                             // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlaceLeftInAnimName;                               // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           PlaceLeftInAnim;                                   // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           PlaceLeftInAnimRider;                              // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlaceLeftOutAnimName;                              // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           PlaceLeftOutAnim;                                  // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           PlaceLeftOutAnimRider;                             // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlaceRightOutAnimName;                             // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           PlaceRightOutAnim;                                 // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           PlaceRightOutAnimRider;                            // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPlayableMovement                         PlayableMovementType;                              // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C1[0x7];                                      // 0x04C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 PlayableMovementModeClass;                         // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlaceLeft;                                       // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D1[0x3];                                      // 0x04D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NaviOffset;                                        // 0x04D4(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PathLineOffsetX;                                   // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PathLineOffsetZ;                                   // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           WaitAnimMontageName;                               // 0x04E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                   WaitAnimMontage;                                   // 0x04F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           TurnAnimMontageName;                               // 0x0508(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                   TurnAnimMontage;                                   // 0x0518(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         StartInterpolationMontageSec;                      // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndInterpolationMontageSec;                        // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MontageInterpolationRate;                          // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreFootIK;                                      // 0x0534(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_535[0x3];                                      // 0x0535(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 RailCamera;                                        // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInteract;                                        // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CameraFree;                                        // 0x0541(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_542[0x2];                                      // 0x0542(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTurnSec;                                      // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTurnSec;                                        // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnableNormalOverlap;                             // 0x054C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Temp_bool_Variable;                                // 0x054D(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54E[0x2];                                      // 0x054E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackPlayableMovementComponent*         K2Node_DynamicCast_AsJack_Playable_Movement_Component; // 0x0550(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0558(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_559[0x7];                                      // 0x0559(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0560(0x0010)(ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	class UJackPlayableSplineMovementMode*        K2Node_DynamicCast_AsJack_Playable_Spline_Movement_Mode; // 0x0570(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0578(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_579[0x7];                                      // 0x0579(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* PlayerActor, class AActor* ControlActor)> K2Node_CreateDelegate_OutputDelegate2;             // 0x0580(0x0010)(ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	class UJackPlayableMovementComponent*         K2Node_DynamicCast_AsJack_Playable_Movement_Component2; // 0x0590(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0598(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_599[0x7];                                      // 0x0599(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* PlayerActor, class AActor* ControlActor)> K2Node_CreateDelegate_OutputDelegate3;             // 0x05A0(0x0010)(ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate4;             // 0x05B0(0x0010)(ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 K2Node_CustomEvent_PlayerActor2;                   // 0x05C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 K2Node_CustomEvent_ControlActor2;                  // 0x05C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 K2Node_CustomEvent_PlayerActor;                    // 0x05D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 K2Node_CustomEvent_ControlActor;                   // 0x05D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 K2Node_CustomEvent_Other_Actor2;                   // 0x05E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 K2Node_CustomEvent_Other_Actor;                    // 0x05E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AJackPlayableCharacter*                 K2Node_DynamicCast_AsJack_Playable_Character;      // 0x05F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess4;                      // 0x05F8(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F9[0x7];                                      // 0x05F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AJackPlayableCharacter*                 K2Node_DynamicCast_AsJack_Playable_Character2;     // 0x0600(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess5;                      // 0x0608(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_609[0x7];                                      // 0x0609(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_Interact_Actor;                 // 0x0610(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 K2Node_CustomEvent_InteractActor;                  // 0x0618(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent2;   // 0x0620(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor2;            // 0x0628(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp2;             // 0x0630(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex2;        // 0x0638(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep2;            // 0x063C(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63D[0x3];                                      // 0x063D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult2;           // 0x0640(0x0088)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x06C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x06D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x06D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x06E0(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x06E4(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E5[0x3];                                      // 0x06E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x06E8(0x0088)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UAnimMontage*                           CallFunc_GetPlaceLeftInAnim_Montage;               // 0x0770(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           CallFunc_GetPlaceRightInAnim_Montage;              // 0x0778(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           CallFunc_GetPlaceLeftOutAnim_Montage;              // 0x0780(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           CallFunc_GetPlaceRightOutAnim_Montage;             // 0x0788(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           CallFunc_GetPlaceLeftOutAnim_Montage2;             // 0x0790(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           CallFunc_GetPlaceRightOutAnim_Montage2;            // 0x0798(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJackPlayableSplineMovementMode*        CallFunc_SnapToClosetPoint_JackPlayableSplineMovementMode; // 0x07A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AJackPlayerCharacter*                   K2Node_DynamicCast_AsJack_Player_Character;        // 0x07A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess6;                      // 0x07B0(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B1[0x7];                                      // 0x07B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AJackPlayerCharacter*                   K2Node_DynamicCast_AsJack_Player_Character2;       // 0x07B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess7;                      // 0x07C0(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C1[0x7];                                      // 0x07C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AJackVehicleMonster*                    K2Node_DynamicCast_AsJack_Vehicle_Monster;         // 0x07C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess8;                      // 0x07D0(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D1[0x3];                                      // 0x07D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x07D4(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x07D8(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x07DC(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJackPlayableMovementComponent*         K2Node_DynamicCast_AsJack_Playable_Movement_Component3; // 0x07E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess9;                      // 0x07E8(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7E9[0x3];                                      // 0x07E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll2;                       // 0x07EC(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakRotator_Pitch2;                      // 0x07F0(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakRotator_Yaw2;                        // 0x07F4(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 Temp_byte_Variable;                                // 0x07F8(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7F9[0x7];                                      // 0x07F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   CallFunc_GetAnimMontageArratsHasNames_ReturnValue; // 0x0800(0x0010)(ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	class UAnimMontage*                           CallFunc_GetPlaceLeftInAnim_Montage2;              // 0x0810(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                   CallFunc_GetAnimMontageArratsHasNames_ReturnValue2; // 0x0818(0x0010)(ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	class UAnimMontage*                           CallFunc_GetPlaceRightInAnim_Montage2;             // 0x0828(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJackPlayableMovementComponent*         K2Node_DynamicCast_AsJack_Playable_Movement_Component4; // 0x0830(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess10;                     // 0x0838(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_839[0x7];                                      // 0x0839(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackPlayableSplineMovementMode*        K2Node_DynamicCast_AsJack_Playable_Spline_Movement_Mode2; // 0x0840(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess11;                     // 0x0848(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_849[0x7];                                      // 0x0849(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackPlayableRopeWalkMovementMode*      K2Node_DynamicCast_AsJack_Playable_Rope_Walk_Movement_Mode; // 0x0850(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess12;                     // 0x0858(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 Temp_byte_Variable2;                               // 0x0859(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 K2Node_Select_Default;                             // 0x085A(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85B[0x5];                                      // 0x085B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayableSplineMovementModeDelegate__DelegateSignature();
	void BndEvt__PlaceLeftTrigger_K2Node_ComponentBoundEvent_282_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* bpp__OverlappedComponent__pf, class AActor* bpp__OtherActor__pf, class UPrimitiveComponent* bpp__OtherComp__pf, int32 bpp__OtherBodyIndex__pf, bool bpp__bFromSweep__pf, const struct FHitResult& bpp__SweepResult__pf__const);
	void BndEvt__PlaceRightTrigger_K2Node_ComponentBoundEvent_291_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* bpp__OverlappedComponent__pf, class AActor* bpp__OtherActor__pf, class UPrimitiveComponent* bpp__OtherComp__pf, int32 bpp__OtherBodyIndex__pf, bool bpp__bFromSweep__pf, const struct FHitResult& bpp__SweepResult__pf__const);
	void CustomEvent_0(class AActor* bpp__PlayerActor__pf, class AActor* bpp__ControlActor__pf);
	void CustomEvent_1(class AActor* bpp__PlayerActor__pf, class AActor* bpp__ControlActor__pf);
	void ExecuteUbergraph_BP_XYMoveBase_1(int32 bpp__EntryPoint__pf);
	void ExecuteUbergraph_BP_XYMoveBase_2(int32 bpp__EntryPoint__pf);
	void GetPlaceLeftInAnim(class UAnimMontage** bpp__Montage__pf);
	void GetPlaceLeftOutAnim(class UAnimMontage** bpp__Montage__pf);
	void GetPlaceRightInAnim(class UAnimMontage** bpp__Montage__pf);
	void GetPlaceRightOutAnim(class UAnimMontage** bpp__Montage__pf);
	void OnArriveBeginPoint_Event_0();
	void OnArrivedPoint(class USceneComponent* bpp__Arrow__pf, class UAnimMontage* bpp__AnimMontage__pf);
	void OnArriveEndPoint_Event_0();
	void OnArriveLeftPoint();
	void OnArriveRightPoint();
	void OnBeginInteract(class AActor* bpp__Actor__pf, class UArrowComponent* bpp__Arrow__pf, class USceneComponent* bpp__RopeEnd__pf, float bpp__OffsetHeight__pf);
	void OnPlayEndAnim(class AActor* bpp__InteractActor__pf);
	void OnPlayStartAnim(class AActor* bpp__InteractxActor__pfT);
	void OverlapLeft(class AActor* bpp__OtherxActor__pfT);
	void OverlapRight(class AActor* bpp__OtherxActor__pfT);
	void PlayRiderAnim(class UAnimMontage* bpp__AnimMontage__pf);
	void ResetCriffMoveCamera();
	void SetCapsuleControl(bool bpp__IsForceOverlap__pf, class ACharacter* bpp__Charcter__pf);
	void SetCriffMoveCamera();
	void SnapToClosetPoint(class UJackPlayableSplineMovementMode** bpp__JackPlayableSplineMovementMode__pf);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BP_XYMoveBase_C">();
	}
	static class ABP_XYMoveBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_XYMoveBase_C>();
	}
};
static_assert(alignof(ABP_XYMoveBase_C) == 0x000008, "Wrong alignment on ABP_XYMoveBase_C");
static_assert(sizeof(ABP_XYMoveBase_C) == 0x000860, "Wrong size on ABP_XYMoveBase_C");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceLeftBlockingVolume) == 0x000398, "Member 'ABP_XYMoveBase_C::PlaceLeftBlockingVolume' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceLeftTrigger) == 0x0003A0, "Member 'ABP_XYMoveBase_C::PlaceLeftTrigger' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceLeftArrow) == 0x0003A8, "Member 'ABP_XYMoveBase_C::PlaceLeftArrow' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceLeftArrowOut) == 0x0003B0, "Member 'ABP_XYMoveBase_C::PlaceLeftArrowOut' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceLeftHinge) == 0x0003B8, "Member 'ABP_XYMoveBase_C::PlaceLeftHinge' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceLeftEnd) == 0x0003C0, "Member 'ABP_XYMoveBase_C::PlaceLeftEnd' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceRightBlockingVolume) == 0x0003C8, "Member 'ABP_XYMoveBase_C::PlaceRightBlockingVolume' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceRightTrigger) == 0x0003D0, "Member 'ABP_XYMoveBase_C::PlaceRightTrigger' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceRightArrowOut) == 0x0003D8, "Member 'ABP_XYMoveBase_C::PlaceRightArrowOut' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceRightArrow) == 0x0003E0, "Member 'ABP_XYMoveBase_C::PlaceRightArrow' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceRightHinge) == 0x0003E8, "Member 'ABP_XYMoveBase_C::PlaceRightHinge' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceRightEnd) == 0x0003F0, "Member 'ABP_XYMoveBase_C::PlaceRightEnd' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, Spline) == 0x0003F8, "Member 'ABP_XYMoveBase_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, TextRender) == 0x000400, "Member 'ABP_XYMoveBase_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, InteractedActor) == 0x000408, "Member 'ABP_XYMoveBase_C::InteractedActor' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlayAnimMontage) == 0x000410, "Member 'ABP_XYMoveBase_C::PlayAnimMontage' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, ReservedLocation) == 0x000418, "Member 'ABP_XYMoveBase_C::ReservedLocation' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, ReservedRotation) == 0x000424, "Member 'ABP_XYMoveBase_C::ReservedRotation' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, BeginArrow) == 0x000430, "Member 'ABP_XYMoveBase_C::BeginArrow' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceRightNaviOffset) == 0x000438, "Member 'ABP_XYMoveBase_C::PlaceRightNaviOffset' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceRightOffsetHeight) == 0x000444, "Member 'ABP_XYMoveBase_C::PlaceRightOffsetHeight' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceLeftNaviOffset) == 0x000448, "Member 'ABP_XYMoveBase_C::PlaceLeftNaviOffset' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceLeftOffsetHeight) == 0x000454, "Member 'ABP_XYMoveBase_C::PlaceLeftOffsetHeight' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, FallOnArrivedLowerPoint) == 0x000458, "Member 'ABP_XYMoveBase_C::FallOnArrivedLowerPoint' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceRightInAnimName) == 0x000460, "Member 'ABP_XYMoveBase_C::PlaceRightInAnimName' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceRightInAnim) == 0x000468, "Member 'ABP_XYMoveBase_C::PlaceRightInAnim' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceRightInAnimRider) == 0x000470, "Member 'ABP_XYMoveBase_C::PlaceRightInAnimRider' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceLeftInAnimName) == 0x000478, "Member 'ABP_XYMoveBase_C::PlaceLeftInAnimName' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceLeftInAnim) == 0x000480, "Member 'ABP_XYMoveBase_C::PlaceLeftInAnim' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceLeftInAnimRider) == 0x000488, "Member 'ABP_XYMoveBase_C::PlaceLeftInAnimRider' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceLeftOutAnimName) == 0x000490, "Member 'ABP_XYMoveBase_C::PlaceLeftOutAnimName' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceLeftOutAnim) == 0x000498, "Member 'ABP_XYMoveBase_C::PlaceLeftOutAnim' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceLeftOutAnimRider) == 0x0004A0, "Member 'ABP_XYMoveBase_C::PlaceLeftOutAnimRider' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceRightOutAnimName) == 0x0004A8, "Member 'ABP_XYMoveBase_C::PlaceRightOutAnimName' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceRightOutAnim) == 0x0004B0, "Member 'ABP_XYMoveBase_C::PlaceRightOutAnim' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlaceRightOutAnimRider) == 0x0004B8, "Member 'ABP_XYMoveBase_C::PlaceRightOutAnimRider' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlayableMovementType) == 0x0004C0, "Member 'ABP_XYMoveBase_C::PlayableMovementType' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PlayableMovementModeClass) == 0x0004C8, "Member 'ABP_XYMoveBase_C::PlayableMovementModeClass' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, IsPlaceLeft) == 0x0004D0, "Member 'ABP_XYMoveBase_C::IsPlaceLeft' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, NaviOffset) == 0x0004D4, "Member 'ABP_XYMoveBase_C::NaviOffset' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PathLineOffsetX) == 0x0004E0, "Member 'ABP_XYMoveBase_C::PathLineOffsetX' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, PathLineOffsetZ) == 0x0004E4, "Member 'ABP_XYMoveBase_C::PathLineOffsetZ' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, WaitAnimMontageName) == 0x0004E8, "Member 'ABP_XYMoveBase_C::WaitAnimMontageName' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, WaitAnimMontage) == 0x0004F8, "Member 'ABP_XYMoveBase_C::WaitAnimMontage' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, TurnAnimMontageName) == 0x000508, "Member 'ABP_XYMoveBase_C::TurnAnimMontageName' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, TurnAnimMontage) == 0x000518, "Member 'ABP_XYMoveBase_C::TurnAnimMontage' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, StartInterpolationMontageSec) == 0x000528, "Member 'ABP_XYMoveBase_C::StartInterpolationMontageSec' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, EndInterpolationMontageSec) == 0x00052C, "Member 'ABP_XYMoveBase_C::EndInterpolationMontageSec' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, MontageInterpolationRate) == 0x000530, "Member 'ABP_XYMoveBase_C::MontageInterpolationRate' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, IgnoreFootIK) == 0x000534, "Member 'ABP_XYMoveBase_C::IgnoreFootIK' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, RailCamera) == 0x000538, "Member 'ABP_XYMoveBase_C::RailCamera' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, IsInteract) == 0x000540, "Member 'ABP_XYMoveBase_C::IsInteract' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, CameraFree) == 0x000541, "Member 'ABP_XYMoveBase_C::CameraFree' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, StartTurnSec) == 0x000544, "Member 'ABP_XYMoveBase_C::StartTurnSec' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, EndTurnSec) == 0x000548, "Member 'ABP_XYMoveBase_C::EndTurnSec' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, IsEnableNormalOverlap) == 0x00054C, "Member 'ABP_XYMoveBase_C::IsEnableNormalOverlap' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, Temp_bool_Variable) == 0x00054D, "Member 'ABP_XYMoveBase_C::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_DynamicCast_AsJack_Playable_Movement_Component) == 0x000550, "Member 'ABP_XYMoveBase_C::K2Node_DynamicCast_AsJack_Playable_Movement_Component' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_DynamicCast_bSuccess) == 0x000558, "Member 'ABP_XYMoveBase_C::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_CreateDelegate_OutputDelegate) == 0x000560, "Member 'ABP_XYMoveBase_C::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_DynamicCast_AsJack_Playable_Spline_Movement_Mode) == 0x000570, "Member 'ABP_XYMoveBase_C::K2Node_DynamicCast_AsJack_Playable_Spline_Movement_Mode' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_DynamicCast_bSuccess2) == 0x000578, "Member 'ABP_XYMoveBase_C::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_CreateDelegate_OutputDelegate2) == 0x000580, "Member 'ABP_XYMoveBase_C::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_DynamicCast_AsJack_Playable_Movement_Component2) == 0x000590, "Member 'ABP_XYMoveBase_C::K2Node_DynamicCast_AsJack_Playable_Movement_Component2' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_DynamicCast_bSuccess3) == 0x000598, "Member 'ABP_XYMoveBase_C::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_CreateDelegate_OutputDelegate3) == 0x0005A0, "Member 'ABP_XYMoveBase_C::K2Node_CreateDelegate_OutputDelegate3' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_CreateDelegate_OutputDelegate4) == 0x0005B0, "Member 'ABP_XYMoveBase_C::K2Node_CreateDelegate_OutputDelegate4' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_CustomEvent_PlayerActor2) == 0x0005C0, "Member 'ABP_XYMoveBase_C::K2Node_CustomEvent_PlayerActor2' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_CustomEvent_ControlActor2) == 0x0005C8, "Member 'ABP_XYMoveBase_C::K2Node_CustomEvent_ControlActor2' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_CustomEvent_PlayerActor) == 0x0005D0, "Member 'ABP_XYMoveBase_C::K2Node_CustomEvent_PlayerActor' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_CustomEvent_ControlActor) == 0x0005D8, "Member 'ABP_XYMoveBase_C::K2Node_CustomEvent_ControlActor' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_CustomEvent_Other_Actor2) == 0x0005E0, "Member 'ABP_XYMoveBase_C::K2Node_CustomEvent_Other_Actor2' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_CustomEvent_Other_Actor) == 0x0005E8, "Member 'ABP_XYMoveBase_C::K2Node_CustomEvent_Other_Actor' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_DynamicCast_AsJack_Playable_Character) == 0x0005F0, "Member 'ABP_XYMoveBase_C::K2Node_DynamicCast_AsJack_Playable_Character' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_DynamicCast_bSuccess4) == 0x0005F8, "Member 'ABP_XYMoveBase_C::K2Node_DynamicCast_bSuccess4' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_DynamicCast_AsJack_Playable_Character2) == 0x000600, "Member 'ABP_XYMoveBase_C::K2Node_DynamicCast_AsJack_Playable_Character2' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_DynamicCast_bSuccess5) == 0x000608, "Member 'ABP_XYMoveBase_C::K2Node_DynamicCast_bSuccess5' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_CustomEvent_Interact_Actor) == 0x000610, "Member 'ABP_XYMoveBase_C::K2Node_CustomEvent_Interact_Actor' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_CustomEvent_InteractActor) == 0x000618, "Member 'ABP_XYMoveBase_C::K2Node_CustomEvent_InteractActor' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_ComponentBoundEvent_OverlappedComponent2) == 0x000620, "Member 'ABP_XYMoveBase_C::K2Node_ComponentBoundEvent_OverlappedComponent2' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_ComponentBoundEvent_OtherActor2) == 0x000628, "Member 'ABP_XYMoveBase_C::K2Node_ComponentBoundEvent_OtherActor2' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_ComponentBoundEvent_OtherComp2) == 0x000630, "Member 'ABP_XYMoveBase_C::K2Node_ComponentBoundEvent_OtherComp2' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_ComponentBoundEvent_OtherBodyIndex2) == 0x000638, "Member 'ABP_XYMoveBase_C::K2Node_ComponentBoundEvent_OtherBodyIndex2' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_ComponentBoundEvent_bFromSweep2) == 0x00063C, "Member 'ABP_XYMoveBase_C::K2Node_ComponentBoundEvent_bFromSweep2' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_ComponentBoundEvent_SweepResult2) == 0x000640, "Member 'ABP_XYMoveBase_C::K2Node_ComponentBoundEvent_SweepResult2' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x0006C8, "Member 'ABP_XYMoveBase_C::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_ComponentBoundEvent_OtherActor) == 0x0006D0, "Member 'ABP_XYMoveBase_C::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_ComponentBoundEvent_OtherComp) == 0x0006D8, "Member 'ABP_XYMoveBase_C::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0006E0, "Member 'ABP_XYMoveBase_C::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_ComponentBoundEvent_bFromSweep) == 0x0006E4, "Member 'ABP_XYMoveBase_C::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_ComponentBoundEvent_SweepResult) == 0x0006E8, "Member 'ABP_XYMoveBase_C::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, CallFunc_GetPlaceLeftInAnim_Montage) == 0x000770, "Member 'ABP_XYMoveBase_C::CallFunc_GetPlaceLeftInAnim_Montage' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, CallFunc_GetPlaceRightInAnim_Montage) == 0x000778, "Member 'ABP_XYMoveBase_C::CallFunc_GetPlaceRightInAnim_Montage' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, CallFunc_GetPlaceLeftOutAnim_Montage) == 0x000780, "Member 'ABP_XYMoveBase_C::CallFunc_GetPlaceLeftOutAnim_Montage' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, CallFunc_GetPlaceRightOutAnim_Montage) == 0x000788, "Member 'ABP_XYMoveBase_C::CallFunc_GetPlaceRightOutAnim_Montage' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, CallFunc_GetPlaceLeftOutAnim_Montage2) == 0x000790, "Member 'ABP_XYMoveBase_C::CallFunc_GetPlaceLeftOutAnim_Montage2' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, CallFunc_GetPlaceRightOutAnim_Montage2) == 0x000798, "Member 'ABP_XYMoveBase_C::CallFunc_GetPlaceRightOutAnim_Montage2' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, CallFunc_SnapToClosetPoint_JackPlayableSplineMovementMode) == 0x0007A0, "Member 'ABP_XYMoveBase_C::CallFunc_SnapToClosetPoint_JackPlayableSplineMovementMode' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_DynamicCast_AsJack_Player_Character) == 0x0007A8, "Member 'ABP_XYMoveBase_C::K2Node_DynamicCast_AsJack_Player_Character' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_DynamicCast_bSuccess6) == 0x0007B0, "Member 'ABP_XYMoveBase_C::K2Node_DynamicCast_bSuccess6' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_DynamicCast_AsJack_Player_Character2) == 0x0007B8, "Member 'ABP_XYMoveBase_C::K2Node_DynamicCast_AsJack_Player_Character2' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_DynamicCast_bSuccess7) == 0x0007C0, "Member 'ABP_XYMoveBase_C::K2Node_DynamicCast_bSuccess7' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_DynamicCast_AsJack_Vehicle_Monster) == 0x0007C8, "Member 'ABP_XYMoveBase_C::K2Node_DynamicCast_AsJack_Vehicle_Monster' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_DynamicCast_bSuccess8) == 0x0007D0, "Member 'ABP_XYMoveBase_C::K2Node_DynamicCast_bSuccess8' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, CallFunc_BreakRotator_Roll) == 0x0007D4, "Member 'ABP_XYMoveBase_C::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, CallFunc_BreakRotator_Pitch) == 0x0007D8, "Member 'ABP_XYMoveBase_C::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, CallFunc_BreakRotator_Yaw) == 0x0007DC, "Member 'ABP_XYMoveBase_C::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_DynamicCast_AsJack_Playable_Movement_Component3) == 0x0007E0, "Member 'ABP_XYMoveBase_C::K2Node_DynamicCast_AsJack_Playable_Movement_Component3' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_DynamicCast_bSuccess9) == 0x0007E8, "Member 'ABP_XYMoveBase_C::K2Node_DynamicCast_bSuccess9' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, CallFunc_BreakRotator_Roll2) == 0x0007EC, "Member 'ABP_XYMoveBase_C::CallFunc_BreakRotator_Roll2' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, CallFunc_BreakRotator_Pitch2) == 0x0007F0, "Member 'ABP_XYMoveBase_C::CallFunc_BreakRotator_Pitch2' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, CallFunc_BreakRotator_Yaw2) == 0x0007F4, "Member 'ABP_XYMoveBase_C::CallFunc_BreakRotator_Yaw2' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, Temp_byte_Variable) == 0x0007F8, "Member 'ABP_XYMoveBase_C::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, CallFunc_GetAnimMontageArratsHasNames_ReturnValue) == 0x000800, "Member 'ABP_XYMoveBase_C::CallFunc_GetAnimMontageArratsHasNames_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, CallFunc_GetPlaceLeftInAnim_Montage2) == 0x000810, "Member 'ABP_XYMoveBase_C::CallFunc_GetPlaceLeftInAnim_Montage2' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, CallFunc_GetAnimMontageArratsHasNames_ReturnValue2) == 0x000818, "Member 'ABP_XYMoveBase_C::CallFunc_GetAnimMontageArratsHasNames_ReturnValue2' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, CallFunc_GetPlaceRightInAnim_Montage2) == 0x000828, "Member 'ABP_XYMoveBase_C::CallFunc_GetPlaceRightInAnim_Montage2' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_DynamicCast_AsJack_Playable_Movement_Component4) == 0x000830, "Member 'ABP_XYMoveBase_C::K2Node_DynamicCast_AsJack_Playable_Movement_Component4' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_DynamicCast_bSuccess10) == 0x000838, "Member 'ABP_XYMoveBase_C::K2Node_DynamicCast_bSuccess10' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_DynamicCast_AsJack_Playable_Spline_Movement_Mode2) == 0x000840, "Member 'ABP_XYMoveBase_C::K2Node_DynamicCast_AsJack_Playable_Spline_Movement_Mode2' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_DynamicCast_bSuccess11) == 0x000848, "Member 'ABP_XYMoveBase_C::K2Node_DynamicCast_bSuccess11' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_DynamicCast_AsJack_Playable_Rope_Walk_Movement_Mode) == 0x000850, "Member 'ABP_XYMoveBase_C::K2Node_DynamicCast_AsJack_Playable_Rope_Walk_Movement_Mode' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_DynamicCast_bSuccess12) == 0x000858, "Member 'ABP_XYMoveBase_C::K2Node_DynamicCast_bSuccess12' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, Temp_byte_Variable2) == 0x000859, "Member 'ABP_XYMoveBase_C::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(ABP_XYMoveBase_C, K2Node_Select_Default) == 0x00085A, "Member 'ABP_XYMoveBase_C::K2Node_Select_Default' has a wrong offset!");

}

