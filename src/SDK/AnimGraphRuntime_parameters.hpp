#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimGraphRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function AnimGraphRuntime.KismetAnimationLibrary.K2_LookAt
// 0x0090 (0x0090 - 0x0000)
struct KismetAnimationLibrary_K2_LookAt final
{
public:
	struct FTransform                             CurrentTransform;                                  // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                TargetPosition;                                    // 0x0030(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LookAtVector;                                      // 0x003C(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseUpVector;                                      // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                UpVector;                                          // 0x004C(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampConeInDegree;                                 // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0060(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KismetAnimationLibrary_K2_LookAt) == 0x000010, "Wrong alignment on KismetAnimationLibrary_K2_LookAt");
static_assert(sizeof(KismetAnimationLibrary_K2_LookAt) == 0x000090, "Wrong size on KismetAnimationLibrary_K2_LookAt");
static_assert(offsetof(KismetAnimationLibrary_K2_LookAt, CurrentTransform) == 0x000000, "Member 'KismetAnimationLibrary_K2_LookAt::CurrentTransform' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_LookAt, TargetPosition) == 0x000030, "Member 'KismetAnimationLibrary_K2_LookAt::TargetPosition' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_LookAt, LookAtVector) == 0x00003C, "Member 'KismetAnimationLibrary_K2_LookAt::LookAtVector' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_LookAt, bUseUpVector) == 0x000048, "Member 'KismetAnimationLibrary_K2_LookAt::bUseUpVector' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_LookAt, UpVector) == 0x00004C, "Member 'KismetAnimationLibrary_K2_LookAt::UpVector' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_LookAt, ClampConeInDegree) == 0x000058, "Member 'KismetAnimationLibrary_K2_LookAt::ClampConeInDegree' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_LookAt, ReturnValue) == 0x000060, "Member 'KismetAnimationLibrary_K2_LookAt::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.KismetAnimationLibrary.K2_TwoBoneIK
// 0x0060 (0x0060 - 0x0000)
struct KismetAnimationLibrary_K2_TwoBoneIK final
{
public:
	struct FVector                                RootPos;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                JointPos;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPos;                                            // 0x0018(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                JointTarget;                                       // 0x0024(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Effector;                                          // 0x0030(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutJointPos;                                       // 0x003C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutEndPos;                                         // 0x0048(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowStretching;                                  // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartStretchRatio;                                 // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStretchScale;                                   // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KismetAnimationLibrary_K2_TwoBoneIK) == 0x000004, "Wrong alignment on KismetAnimationLibrary_K2_TwoBoneIK");
static_assert(sizeof(KismetAnimationLibrary_K2_TwoBoneIK) == 0x000060, "Wrong size on KismetAnimationLibrary_K2_TwoBoneIK");
static_assert(offsetof(KismetAnimationLibrary_K2_TwoBoneIK, RootPos) == 0x000000, "Member 'KismetAnimationLibrary_K2_TwoBoneIK::RootPos' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_TwoBoneIK, JointPos) == 0x00000C, "Member 'KismetAnimationLibrary_K2_TwoBoneIK::JointPos' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_TwoBoneIK, EndPos) == 0x000018, "Member 'KismetAnimationLibrary_K2_TwoBoneIK::EndPos' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_TwoBoneIK, JointTarget) == 0x000024, "Member 'KismetAnimationLibrary_K2_TwoBoneIK::JointTarget' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_TwoBoneIK, Effector) == 0x000030, "Member 'KismetAnimationLibrary_K2_TwoBoneIK::Effector' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_TwoBoneIK, OutJointPos) == 0x00003C, "Member 'KismetAnimationLibrary_K2_TwoBoneIK::OutJointPos' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_TwoBoneIK, OutEndPos) == 0x000048, "Member 'KismetAnimationLibrary_K2_TwoBoneIK::OutEndPos' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_TwoBoneIK, bAllowStretching) == 0x000054, "Member 'KismetAnimationLibrary_K2_TwoBoneIK::bAllowStretching' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_TwoBoneIK, StartStretchRatio) == 0x000058, "Member 'KismetAnimationLibrary_K2_TwoBoneIK::StartStretchRatio' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_TwoBoneIK, MaxStretchScale) == 0x00005C, "Member 'KismetAnimationLibrary_K2_TwoBoneIK::MaxStretchScale' has a wrong offset!");

// Function AnimGraphRuntime.PlayMontageCallbackProxy.CreateProxyObjectForPlayMontage
// 0x0028 (0x0028 - 0x0000)
struct PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage final
{
public:
	class USkeletalMeshComponent*                 InSkeletalMeshComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MontageToPlay;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingPosition;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartingSection;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayMontageCallbackProxy*              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage) == 0x000008, "Wrong alignment on PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage");
static_assert(sizeof(PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage) == 0x000028, "Wrong size on PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage");
static_assert(offsetof(PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage, InSkeletalMeshComponent) == 0x000000, "Member 'PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage::InSkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage, MontageToPlay) == 0x000008, "Member 'PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage::MontageToPlay' has a wrong offset!");
static_assert(offsetof(PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage, PlayRate) == 0x000010, "Member 'PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage, StartingPosition) == 0x000014, "Member 'PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage::StartingPosition' has a wrong offset!");
static_assert(offsetof(PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage, StartingSection) == 0x000018, "Member 'PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage::StartingSection' has a wrong offset!");
static_assert(offsetof(PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage, ReturnValue) == 0x000020, "Member 'PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.PlayMontageCallbackProxy.OnMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct PlayMontageCallbackProxy_OnMontageBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMontageCallbackProxy_OnMontageBlendingOut) == 0x000008, "Wrong alignment on PlayMontageCallbackProxy_OnMontageBlendingOut");
static_assert(sizeof(PlayMontageCallbackProxy_OnMontageBlendingOut) == 0x000010, "Wrong size on PlayMontageCallbackProxy_OnMontageBlendingOut");
static_assert(offsetof(PlayMontageCallbackProxy_OnMontageBlendingOut, Montage) == 0x000000, "Member 'PlayMontageCallbackProxy_OnMontageBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(PlayMontageCallbackProxy_OnMontageBlendingOut, bInterrupted) == 0x000008, "Member 'PlayMontageCallbackProxy_OnMontageBlendingOut::bInterrupted' has a wrong offset!");

// Function AnimGraphRuntime.PlayMontageCallbackProxy.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct PlayMontageCallbackProxy_OnMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMontageCallbackProxy_OnMontageEnded) == 0x000008, "Wrong alignment on PlayMontageCallbackProxy_OnMontageEnded");
static_assert(sizeof(PlayMontageCallbackProxy_OnMontageEnded) == 0x000010, "Wrong size on PlayMontageCallbackProxy_OnMontageEnded");
static_assert(offsetof(PlayMontageCallbackProxy_OnMontageEnded, Montage) == 0x000000, "Member 'PlayMontageCallbackProxy_OnMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(PlayMontageCallbackProxy_OnMontageEnded, bInterrupted) == 0x000008, "Member 'PlayMontageCallbackProxy_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function AnimGraphRuntime.PlayMontageCallbackProxy.OnNotifyBeginReceived
// 0x0028 (0x0028 - 0x0000)
struct PlayMontageCallbackProxy_OnNotifyBeginReceived final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBranchingPointNotifyPayload           BranchingPointNotifyPayload;                       // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMontageCallbackProxy_OnNotifyBeginReceived) == 0x000008, "Wrong alignment on PlayMontageCallbackProxy_OnNotifyBeginReceived");
static_assert(sizeof(PlayMontageCallbackProxy_OnNotifyBeginReceived) == 0x000028, "Wrong size on PlayMontageCallbackProxy_OnNotifyBeginReceived");
static_assert(offsetof(PlayMontageCallbackProxy_OnNotifyBeginReceived, NotifyName) == 0x000000, "Member 'PlayMontageCallbackProxy_OnNotifyBeginReceived::NotifyName' has a wrong offset!");
static_assert(offsetof(PlayMontageCallbackProxy_OnNotifyBeginReceived, BranchingPointNotifyPayload) == 0x000008, "Member 'PlayMontageCallbackProxy_OnNotifyBeginReceived::BranchingPointNotifyPayload' has a wrong offset!");

// Function AnimGraphRuntime.PlayMontageCallbackProxy.OnNotifyEndReceived
// 0x0028 (0x0028 - 0x0000)
struct PlayMontageCallbackProxy_OnNotifyEndReceived final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBranchingPointNotifyPayload           BranchingPointNotifyPayload;                       // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMontageCallbackProxy_OnNotifyEndReceived) == 0x000008, "Wrong alignment on PlayMontageCallbackProxy_OnNotifyEndReceived");
static_assert(sizeof(PlayMontageCallbackProxy_OnNotifyEndReceived) == 0x000028, "Wrong size on PlayMontageCallbackProxy_OnNotifyEndReceived");
static_assert(offsetof(PlayMontageCallbackProxy_OnNotifyEndReceived, NotifyName) == 0x000000, "Member 'PlayMontageCallbackProxy_OnNotifyEndReceived::NotifyName' has a wrong offset!");
static_assert(offsetof(PlayMontageCallbackProxy_OnNotifyEndReceived, BranchingPointNotifyPayload) == 0x000008, "Member 'PlayMontageCallbackProxy_OnNotifyEndReceived::BranchingPointNotifyPayload' has a wrong offset!");

}

