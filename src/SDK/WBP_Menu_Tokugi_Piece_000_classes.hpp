#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Menu_Tokugi_Piece_000

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "JackGame_structs.hpp"
#include "JackGame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Menu_Tokugi_Piece_000.WBP_Menu_Tokugi_Piece_000_C
// 0x0038 (0x0318 - 0x02E0)
class UWBP_Menu_Tokugi_Piece_000_C final : public UJackUMGTokugiPiece
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(Transient, DuplicateTransient)
	class UImage*                                 FrontSide;                                         // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           IconParts;                                         // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           IconRoot;                                          // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FVector2D                              Position;                                          // 0x0300(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              BgScroll;                                          // 0x030C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_Menu_Tokugi_Piece_000(int32 EntryPoint);
	void AnimOpen();
	void AnimMaster();
	void AnimStateOpen();
	void AnimProvMaster();
	void AnimCancelProvMaster();
	void AnimClose(EJackTokugiPanelAnimCategory AnimCategory);
	void AnimCloseFromProvMaster();
	void AnimMasterFromProvMaster();
	void AnimCloseFromMaster();
	void AnimCancelMaster();
	void AnimStateProvMaster();
	void AnimProvMasterFromClose();
	void AnimStateClose();
	void AnimResetCancelMaster();
	void AnimRollClose();
	void SetBackGroundScroll(const struct FVector2D& BgScroll_0);
	void SetDisplayScale(float DisplayScale);
	void SetPosAndScale(const struct FVector2D& Position_0, float Scale_0, const struct FVector2D& BgScroll_0);
	void SetData(class UJackUMGTokugiPanelData* Data);
	void UpdateDisplay();
	void SetPosition(const struct FVector2D& Pos);
	void Construct();
	void SendTokugiPanelMessage(class FName Message);
	void SetMenuMode();
	void PlayAnimData(const struct FJackUMGTokugiPanelAnimData& AnimData);
	void SetCharacterItemData(class UJackUMGItemData* ItemData);
	void SetPanelData(class UJackUMGTokugiPanelData* PanelData);
	void PlayAnimationNameArg(class FName Arg);
	void PlayAnimationIntArg(int32 Arg);
	void OnEndAnim(class UUserWidget* Sender);
	void SetEndAnimEventListener(TScriptInterface<class IBP_IF_TokugiPanel_Item_C> Listener);
	void PlayDefaultAnimation();
	void OnTokugiPanelWindowDestruct();
	void SetResetMode();
	void SetBattleResultMode(EJackCharacter CharacterType);
	void OnTokugiPanelWindowCancel();
	void SetCancelEventListener(TScriptInterface<class IBP_IF_TokugiPanel_Item_C> CancelEventListener);
	void SetDisplayData(const struct FVector2D& Position_0, float Scale_0, const struct FVector2D& BgScroll_0);
	void SetDrawPos(const struct FVector2D& Position_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Menu_Tokugi_Piece_000_C">();
	}
	static class UWBP_Menu_Tokugi_Piece_000_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Menu_Tokugi_Piece_000_C>();
	}
};
static_assert(alignof(UWBP_Menu_Tokugi_Piece_000_C) == 0x000008, "Wrong alignment on UWBP_Menu_Tokugi_Piece_000_C");
static_assert(sizeof(UWBP_Menu_Tokugi_Piece_000_C) == 0x000318, "Wrong size on UWBP_Menu_Tokugi_Piece_000_C");
static_assert(offsetof(UWBP_Menu_Tokugi_Piece_000_C, UberGraphFrame) == 0x0002E0, "Member 'UWBP_Menu_Tokugi_Piece_000_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Tokugi_Piece_000_C, FrontSide) == 0x0002E8, "Member 'UWBP_Menu_Tokugi_Piece_000_C::FrontSide' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Tokugi_Piece_000_C, IconParts) == 0x0002F0, "Member 'UWBP_Menu_Tokugi_Piece_000_C::IconParts' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Tokugi_Piece_000_C, IconRoot) == 0x0002F8, "Member 'UWBP_Menu_Tokugi_Piece_000_C::IconRoot' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Tokugi_Piece_000_C, Position) == 0x000300, "Member 'UWBP_Menu_Tokugi_Piece_000_C::Position' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Tokugi_Piece_000_C, Scale) == 0x000308, "Member 'UWBP_Menu_Tokugi_Piece_000_C::Scale' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Tokugi_Piece_000_C, BgScroll) == 0x00030C, "Member 'UWBP_Menu_Tokugi_Piece_000_C::BgScroll' has a wrong offset!");

}

