#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Debug_CharacterCaptureInfo

#include "Basic.hpp"

#include "WBP_Debug_CharacterCaptureInfo_classes.hpp"
#include "WBP_Debug_CharacterCaptureInfo_parameters.hpp"


namespace SDK
{

// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.ExecuteUbergraph_WBP_Debug_CharacterCaptureInfo
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Debug_CharacterCaptureInfo_C::ExecuteUbergraph_WBP_Debug_CharacterCaptureInfo(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "ExecuteUbergraph_WBP_Debug_CharacterCaptureInfo");

	Params::WBP_Debug_CharacterCaptureInfo_C_ExecuteUbergraph_WBP_Debug_CharacterCaptureInfo Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetPointLightList
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FJackZukanMotionPointLightParameter>PointLightList                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UWBP_Debug_CharacterCaptureInfo_C::SetPointLightList(const TArray<struct FJackZukanMotionPointLightParameter>& PointLightList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetPointLightList");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetPointLightList Parms{};

	Parms.PointLightList = std::move(PointLightList);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWBP_Debug_CharacterCaptureInfo_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetDirectionalLightList
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FJackZukanMotionDirectionalLightParameter>DirectionalLightList                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UWBP_Debug_CharacterCaptureInfo_C::SetDirectionalLightList(const TArray<struct FJackZukanMotionDirectionalLightParameter>& DirectionalLightList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetDirectionalLightList");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetDirectionalLightList Parms{};

	Parms.DirectionalLightList = std::move(DirectionalLightList);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetModelInfos
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ModelPosition                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ModelBasePosition                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ModelMotionOffset                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         ModelRotation                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FRotator                         ModelBaseRotation                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FRotator                         ModelInputRotation                                     (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    bEnableLookAt                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          LookAt                                                 (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bInBattle                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWBP_Debug_CharacterCaptureInfo_C::SetModelInfos(const struct FVector& ModelPosition, const struct FVector& ModelBasePosition, const struct FVector& ModelMotionOffset, const struct FRotator& ModelRotation, const struct FRotator& ModelBaseRotation, const struct FRotator& ModelInputRotation, bool bEnableLookAt, const struct FVector& LookAt, bool bInBattle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetModelInfos");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetModelInfos Parms{};

	Parms.ModelPosition = std::move(ModelPosition);
	Parms.ModelBasePosition = std::move(ModelBasePosition);
	Parms.ModelMotionOffset = std::move(ModelMotionOffset);
	Parms.ModelRotation = std::move(ModelRotation);
	Parms.ModelBaseRotation = std::move(ModelBaseRotation);
	Parms.ModelInputRotation = std::move(ModelInputRotation);
	Parms.bEnableLookAt = bEnableLookAt;
	Parms.LookAt = std::move(LookAt);
	Parms.bInBattle = bInBattle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetModelMotionOffset
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ModelMotionOffset                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Debug_CharacterCaptureInfo_C::SetModelMotionOffset(const struct FVector& ModelMotionOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetModelMotionOffset");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetModelMotionOffset Parms{};

	Parms.ModelMotionOffset = std::move(ModelMotionOffset);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetModelBasePosition
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ModelBasePosition                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Debug_CharacterCaptureInfo_C::SetModelBasePosition(const struct FVector& ModelBasePosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetModelBasePosition");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetModelBasePosition Parms{};

	Parms.ModelBasePosition = std::move(ModelBasePosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetCameraInfos
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CameraZoomPer                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CameraFOV                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CameraDistance                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CameraPitch                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        CameraPosition                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        CameraBasePosition                                     (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        CameraSlide                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        CameraSlidePercent                                     (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Debug_CharacterCaptureInfo_C::SetCameraInfos(float CameraZoomPer, float CameraFOV, float CameraDistance, float CameraPitch, const struct FVector2D& CameraPosition, const struct FVector2D& CameraBasePosition, const struct FVector2D& CameraSlide, const struct FVector2D& CameraSlidePercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetCameraInfos");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetCameraInfos Parms{};

	Parms.CameraZoomPer = CameraZoomPer;
	Parms.CameraFOV = CameraFOV;
	Parms.CameraDistance = CameraDistance;
	Parms.CameraPitch = CameraPitch;
	Parms.CameraPosition = std::move(CameraPosition);
	Parms.CameraBasePosition = std::move(CameraBasePosition);
	Parms.CameraSlide = std::move(CameraSlide);
	Parms.CameraSlidePercent = std::move(CameraSlidePercent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetCameraFov
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CameraFOV                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Debug_CharacterCaptureInfo_C::SetCameraFov(float CameraFOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetCameraFov");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetCameraFov Parms{};

	Parms.CameraFOV = CameraFOV;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetCameraZoomPer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CameraZoomPer                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Debug_CharacterCaptureInfo_C::SetCameraZoomPer(float CameraZoomPer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetCameraZoomPer");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetCameraZoomPer Parms{};

	Parms.CameraZoomPer = CameraZoomPer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetIsPlayerCharacter
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsPlayerCharacter                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWBP_Debug_CharacterCaptureInfo_C::SetIsPlayerCharacter(bool bIsPlayerCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetIsPlayerCharacter");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetIsPlayerCharacter Parms{};

	Parms.bIsPlayerCharacter = bIsPlayerCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetModelInputRotation
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         ModelInputRotation                                     (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UWBP_Debug_CharacterCaptureInfo_C::SetModelInputRotation(const struct FRotator& ModelInputRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetModelInputRotation");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetModelInputRotation Parms{};

	Parms.ModelInputRotation = std::move(ModelInputRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetModelBaseRotation
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         ModelBaseRotation                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UWBP_Debug_CharacterCaptureInfo_C::SetModelBaseRotation(const struct FRotator& ModelBaseRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetModelBaseRotation");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetModelBaseRotation Parms{};

	Parms.ModelBaseRotation = std::move(ModelBaseRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetModelRotation
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         ModelRotation                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UWBP_Debug_CharacterCaptureInfo_C::SetModelRotation(const struct FRotator& ModelRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetModelRotation");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetModelRotation Parms{};

	Parms.ModelRotation = std::move(ModelRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetCameraSlidePercent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        CameraSlidePercent                                     (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Debug_CharacterCaptureInfo_C::SetCameraSlidePercent(const struct FVector2D& CameraSlidePercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetCameraSlidePercent");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetCameraSlidePercent Parms{};

	Parms.CameraSlidePercent = std::move(CameraSlidePercent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetCameraSlide
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        CameraSlide                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Debug_CharacterCaptureInfo_C::SetCameraSlide(const struct FVector2D& CameraSlide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetCameraSlide");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetCameraSlide Parms{};

	Parms.CameraSlide = std::move(CameraSlide);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetCameraBasePosition
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        CameraBasePosition                                     (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Debug_CharacterCaptureInfo_C::SetCameraBasePosition(const struct FVector2D& CameraBasePosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetCameraBasePosition");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetCameraBasePosition Parms{};

	Parms.CameraBasePosition = std::move(CameraBasePosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetPlayingPlayerAnim
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           AnimName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UWBP_Debug_CharacterCaptureInfo_C::SetPlayingPlayerAnim(bool bEnable, const class FString& AnimName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetPlayingPlayerAnim");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetPlayingPlayerAnim Parms{};

	Parms.bEnable = bEnable;
	Parms.AnimName = std::move(AnimName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetRepeatTime
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   PlayTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AnimDuration                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RepeatInterval                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Debug_CharacterCaptureInfo_C::SetRepeatTime(bool bEnable, float PlayTime, float AnimDuration, float RepeatInterval)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetRepeatTime");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetRepeatTime Parms{};

	Parms.bEnable = bEnable;
	Parms.PlayTime = PlayTime;
	Parms.AnimDuration = AnimDuration;
	Parms.RepeatInterval = RepeatInterval;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetRepeat
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bRepeat                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWBP_Debug_CharacterCaptureInfo_C::SetRepeat(bool bRepeat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetRepeat");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetRepeat Parms{};

	Parms.bRepeat = bRepeat;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetLoop
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bLoop                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWBP_Debug_CharacterCaptureInfo_C::SetLoop(bool bLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetLoop");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetLoop Parms{};

	Parms.bLoop = bLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetPlayingMonsterAnim
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   AnimIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AnimKey                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Debug_CharacterCaptureInfo_C::SetPlayingMonsterAnim(int32 AnimIndex, class FName AnimKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetPlayingMonsterAnim");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetPlayingMonsterAnim Parms{};

	Parms.AnimIndex = AnimIndex;
	Parms.AnimKey = AnimKey;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetInBattle
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInBattle                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWBP_Debug_CharacterCaptureInfo_C::SetInBattle(bool bInBattle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetInBattle");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetInBattle Parms{};

	Parms.bInBattle = bInBattle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetModelPosition
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ModelPosition                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Debug_CharacterCaptureInfo_C::SetModelPosition(const struct FVector& ModelPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetModelPosition");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetModelPosition Parms{};

	Parms.ModelPosition = std::move(ModelPosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetLookAt
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnableLookAt                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          LookAt                                                 (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Debug_CharacterCaptureInfo_C::SetLookAt(bool bEnableLookAt, const struct FVector& LookAt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetLookAt");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetLookAt Parms{};

	Parms.bEnableLookAt = bEnableLookAt;
	Parms.LookAt = std::move(LookAt);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetCameraPitch
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Pitch                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Debug_CharacterCaptureInfo_C::SetCameraPitch(float Pitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetCameraPitch");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetCameraPitch Parms{};

	Parms.Pitch = Pitch;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetCameraPosition
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        CameraPosition                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Debug_CharacterCaptureInfo_C::SetCameraPosition(const struct FVector2D& CameraPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetCameraPosition");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetCameraPosition Parms{};

	Parms.CameraPosition = std::move(CameraPosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetId
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Debug_CharacterCaptureInfo_C::SetId(class FName ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetId");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetId Parms{};

	Parms.ID = ID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.SetCameraDistance
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Debug_CharacterCaptureInfo_C::SetCameraDistance(float Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "SetCameraDistance");

	Params::WBP_Debug_CharacterCaptureInfo_C_SetCameraDistance Parms{};

	Parms.Distance = Distance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.DirectionalLightToString
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FJackZukanMotionDirectionalLightParameterDirectionalLightParam                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// class FString                           RetrunValue                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UWBP_Debug_CharacterCaptureInfo_C::DirectionalLightToString(struct FJackZukanMotionDirectionalLightParameter& DirectionalLightParam, class FString* RetrunValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "DirectionalLightToString");

	Params::WBP_Debug_CharacterCaptureInfo_C_DirectionalLightToString Parms{};

	Parms.DirectionalLightParam = std::move(DirectionalLightParam);

	UObject::ProcessEvent(Func, &Parms);

	DirectionalLightParam = std::move(Parms.DirectionalLightParam);

	if (RetrunValue != nullptr)
		*RetrunValue = std::move(Parms.RetrunValue);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.PointLightToString
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FJackZukanMotionPointLightParameterPointLightParam                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           RetrunValue                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UWBP_Debug_CharacterCaptureInfo_C::PointLightToString(struct FJackZukanMotionPointLightParameter& PointLightParam, bool* bEnable, class FString* RetrunValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "PointLightToString");

	Params::WBP_Debug_CharacterCaptureInfo_C_PointLightToString Parms{};

	Parms.PointLightParam = std::move(PointLightParam);

	UObject::ProcessEvent(Func, &Parms);

	PointLightParam = std::move(Parms.PointLightParam);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;

	if (RetrunValue != nullptr)
		*RetrunValue = std::move(Parms.RetrunValue);
}


// Function WBP_Debug_CharacterCaptureInfo.WBP_Debug_CharacterCaptureInfo_C.RotatorToString
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         Rotator                                                (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// int32                                   Decimal                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UWBP_Debug_CharacterCaptureInfo_C::RotatorToString(const struct FRotator& Rotator, int32 Decimal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Debug_CharacterCaptureInfo_C", "RotatorToString");

	Params::WBP_Debug_CharacterCaptureInfo_C_RotatorToString Parms{};

	Parms.Rotator = std::move(Rotator);
	Parms.Decimal = Decimal;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

