#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MobMonster_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "JackGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MobMonster_Base.BP_MobMonster_Base_C
// 0x0040 (0x03D8 - 0x0398)
class ABP_MobMonster_Base_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0398(0x0008)(Transient, DuplicateTransient)
	class UCapsuleComponent*                      CameraBlock;                                       // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule;                                           // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FJackLDT_MonsterPhysicalProperty       MonsterScaleID;                                    // 0x03B8(0x0010)(Edit, BlueprintVisible, NoDestructor)
	class UAnimSequence*                          Anim;                                              // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMonsterVariantForm;                               // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_MobMonster_Base(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void HiddenInGameForMobMonster(bool Hidden);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MobMonster_Base_C">();
	}
	static class ABP_MobMonster_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MobMonster_Base_C>();
	}
};
static_assert(alignof(ABP_MobMonster_Base_C) == 0x000008, "Wrong alignment on ABP_MobMonster_Base_C");
static_assert(sizeof(ABP_MobMonster_Base_C) == 0x0003D8, "Wrong size on ABP_MobMonster_Base_C");
static_assert(offsetof(ABP_MobMonster_Base_C, UberGraphFrame) == 0x000398, "Member 'ABP_MobMonster_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MobMonster_Base_C, CameraBlock) == 0x0003A0, "Member 'ABP_MobMonster_Base_C::CameraBlock' has a wrong offset!");
static_assert(offsetof(ABP_MobMonster_Base_C, SkeletalMesh) == 0x0003A8, "Member 'ABP_MobMonster_Base_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_MobMonster_Base_C, Capsule) == 0x0003B0, "Member 'ABP_MobMonster_Base_C::Capsule' has a wrong offset!");
static_assert(offsetof(ABP_MobMonster_Base_C, MonsterScaleID) == 0x0003B8, "Member 'ABP_MobMonster_Base_C::MonsterScaleID' has a wrong offset!");
static_assert(offsetof(ABP_MobMonster_Base_C, Anim) == 0x0003C8, "Member 'ABP_MobMonster_Base_C::Anim' has a wrong offset!");
static_assert(offsetof(ABP_MobMonster_Base_C, bMonsterVariantForm) == 0x0003D0, "Member 'ABP_MobMonster_Base_C::bMonsterVariantForm' has a wrong offset!");

}

