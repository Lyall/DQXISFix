#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Menu_Tokugi_Piece_Question_000

#include "Basic.hpp"

#include "JackGame_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_Menu_Tokugi_Piece_Question_000.WBP_Menu_Tokugi_Piece_Question_000_C.ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000
// 0x0148 (0x0148 - 0x0000)
struct WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_CustomEvent_Pos;                            // 0x0010(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_DisplayScale;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_CustomEvent_Position;                       // 0x001C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Scale;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_CustomEvent_BgScroll2;                      // 0x0028(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGTokugiPanelData*                K2Node_CustomEvent_Data;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_CustomEvent_DirList;                        // 0x0038(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_CanOpen_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_GetCrackDirList_ReturnValue;              // 0x0050(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0064(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x006C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0074(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x007C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_CustomEvent_BgScroll;                       // 0x0084(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWidgetTransform                       K2Node_MakeStruct_WidgetTransform;                 // 0x008C(0x001C)(NoDestructor)
	class UWidgetAnimation*                       K2Node_Event_Animation;                            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FJackUMGTokugiPanelAnimData            K2Node_CustomEvent_AnimData2;                      // 0x00B0(0x0040)()
	struct FJackUMGTokugiPanelAnimData            K2Node_CustomEvent_AnimData;                       // 0x00F0(0x0040)()
	bool                                          K2Node_SwitchEnum2_CmpSuccess;                     // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue2;         // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_133[0x5];                                      // 0x0133(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_GetCrackDirList_ReturnValue2;             // 0x0138(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000) == 0x000008, "Wrong alignment on WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000");
static_assert(sizeof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000) == 0x000148, "Wrong size on WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, EntryPoint) == 0x000000, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000008, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, K2Node_CustomEvent_Pos) == 0x000010, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::K2Node_CustomEvent_Pos' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, K2Node_CustomEvent_DisplayScale) == 0x000018, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::K2Node_CustomEvent_DisplayScale' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, K2Node_CustomEvent_Position) == 0x00001C, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::K2Node_CustomEvent_Position' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, K2Node_CustomEvent_Scale) == 0x000024, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::K2Node_CustomEvent_Scale' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, K2Node_CustomEvent_BgScroll2) == 0x000028, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::K2Node_CustomEvent_BgScroll2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, K2Node_CustomEvent_Data) == 0x000030, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::K2Node_CustomEvent_Data' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, K2Node_CustomEvent_DirList) == 0x000038, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::K2Node_CustomEvent_DirList' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, CallFunc_CanOpen_ReturnValue) == 0x000048, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::CallFunc_CanOpen_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, CallFunc_GetCrackDirList_ReturnValue) == 0x000050, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::CallFunc_GetCrackDirList_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, K2Node_SwitchEnum_CmpSuccess) == 0x000060, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000064, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x00006C, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000074, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, CallFunc_MakeVector2D_ReturnValue) == 0x00007C, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, K2Node_CustomEvent_BgScroll) == 0x000084, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::K2Node_CustomEvent_BgScroll' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, K2Node_MakeStruct_WidgetTransform) == 0x00008C, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::K2Node_MakeStruct_WidgetTransform' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, K2Node_Event_Animation) == 0x0000A8, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::K2Node_Event_Animation' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, K2Node_CustomEvent_AnimData2) == 0x0000B0, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::K2Node_CustomEvent_AnimData2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, K2Node_CustomEvent_AnimData) == 0x0000F0, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::K2Node_CustomEvent_AnimData' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, K2Node_SwitchEnum2_CmpSuccess) == 0x000130, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::K2Node_SwitchEnum2_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000131, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, CallFunc_EqualEqual_ByteByte_ReturnValue2) == 0x000132, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::CallFunc_EqualEqual_ByteByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000, CallFunc_GetCrackDirList_ReturnValue2) == 0x000138, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000::CallFunc_GetCrackDirList_ReturnValue2' has a wrong offset!");

// Function WBP_Menu_Tokugi_Piece_Question_000.WBP_Menu_Tokugi_Piece_Question_000_C.AnimCrack
// 0x0040 (0x0040 - 0x0000)
struct WBP_Menu_Tokugi_Piece_Question_000_C_AnimCrack final
{
public:
	struct FJackUMGTokugiPanelAnimData            AnimData_0;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_Menu_Tokugi_Piece_Question_000_C_AnimCrack) == 0x000008, "Wrong alignment on WBP_Menu_Tokugi_Piece_Question_000_C_AnimCrack");
static_assert(sizeof(WBP_Menu_Tokugi_Piece_Question_000_C_AnimCrack) == 0x000040, "Wrong size on WBP_Menu_Tokugi_Piece_Question_000_C_AnimCrack");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_AnimCrack, AnimData_0) == 0x000000, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_AnimCrack::AnimData_0' has a wrong offset!");

// Function WBP_Menu_Tokugi_Piece_Question_000.WBP_Menu_Tokugi_Piece_Question_000_C.PlayAnimData
// 0x0040 (0x0040 - 0x0000)
struct WBP_Menu_Tokugi_Piece_Question_000_C_PlayAnimData final
{
public:
	struct FJackUMGTokugiPanelAnimData            AnimData_0;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_Menu_Tokugi_Piece_Question_000_C_PlayAnimData) == 0x000008, "Wrong alignment on WBP_Menu_Tokugi_Piece_Question_000_C_PlayAnimData");
static_assert(sizeof(WBP_Menu_Tokugi_Piece_Question_000_C_PlayAnimData) == 0x000040, "Wrong size on WBP_Menu_Tokugi_Piece_Question_000_C_PlayAnimData");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_PlayAnimData, AnimData_0) == 0x000000, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_PlayAnimData::AnimData_0' has a wrong offset!");

// Function WBP_Menu_Tokugi_Piece_Question_000.WBP_Menu_Tokugi_Piece_Question_000_C.OnAnimationFinished
// 0x0008 (0x0008 - 0x0000)
struct WBP_Menu_Tokugi_Piece_Question_000_C_OnAnimationFinished final
{
public:
	const class UWidgetAnimation*                 Animation;                                         // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Menu_Tokugi_Piece_Question_000_C_OnAnimationFinished) == 0x000008, "Wrong alignment on WBP_Menu_Tokugi_Piece_Question_000_C_OnAnimationFinished");
static_assert(sizeof(WBP_Menu_Tokugi_Piece_Question_000_C_OnAnimationFinished) == 0x000008, "Wrong size on WBP_Menu_Tokugi_Piece_Question_000_C_OnAnimationFinished");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_OnAnimationFinished, Animation) == 0x000000, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_OnAnimationFinished::Animation' has a wrong offset!");

// Function WBP_Menu_Tokugi_Piece_Question_000.WBP_Menu_Tokugi_Piece_Question_000_C.SetBackGroundScroll
// 0x0008 (0x0008 - 0x0000)
struct WBP_Menu_Tokugi_Piece_Question_000_C_SetBackGroundScroll final
{
public:
	struct FVector2D                              BgScroll_0;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Menu_Tokugi_Piece_Question_000_C_SetBackGroundScroll) == 0x000004, "Wrong alignment on WBP_Menu_Tokugi_Piece_Question_000_C_SetBackGroundScroll");
static_assert(sizeof(WBP_Menu_Tokugi_Piece_Question_000_C_SetBackGroundScroll) == 0x000008, "Wrong size on WBP_Menu_Tokugi_Piece_Question_000_C_SetBackGroundScroll");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_SetBackGroundScroll, BgScroll_0) == 0x000000, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_SetBackGroundScroll::BgScroll_0' has a wrong offset!");

// Function WBP_Menu_Tokugi_Piece_Question_000.WBP_Menu_Tokugi_Piece_Question_000_C.Open
// 0x0010 (0x0010 - 0x0000)
struct WBP_Menu_Tokugi_Piece_Question_000_C_Open final
{
public:
	TArray<int32>                                 DirList;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
};
static_assert(alignof(WBP_Menu_Tokugi_Piece_Question_000_C_Open) == 0x000008, "Wrong alignment on WBP_Menu_Tokugi_Piece_Question_000_C_Open");
static_assert(sizeof(WBP_Menu_Tokugi_Piece_Question_000_C_Open) == 0x000010, "Wrong size on WBP_Menu_Tokugi_Piece_Question_000_C_Open");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_Open, DirList) == 0x000000, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_Open::DirList' has a wrong offset!");

// Function WBP_Menu_Tokugi_Piece_Question_000.WBP_Menu_Tokugi_Piece_Question_000_C.SetPieceData
// 0x0008 (0x0008 - 0x0000)
struct WBP_Menu_Tokugi_Piece_Question_000_C_SetPieceData final
{
public:
	class UJackUMGTokugiPanelData*                Data;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Menu_Tokugi_Piece_Question_000_C_SetPieceData) == 0x000008, "Wrong alignment on WBP_Menu_Tokugi_Piece_Question_000_C_SetPieceData");
static_assert(sizeof(WBP_Menu_Tokugi_Piece_Question_000_C_SetPieceData) == 0x000008, "Wrong size on WBP_Menu_Tokugi_Piece_Question_000_C_SetPieceData");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_SetPieceData, Data) == 0x000000, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_SetPieceData::Data' has a wrong offset!");

// Function WBP_Menu_Tokugi_Piece_Question_000.WBP_Menu_Tokugi_Piece_Question_000_C.SetPosAndScale
// 0x0014 (0x0014 - 0x0000)
struct WBP_Menu_Tokugi_Piece_Question_000_C_SetPosAndScale final
{
public:
	struct FVector2D                              Position_0;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale_0;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              BgScroll_0;                                        // 0x000C(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Menu_Tokugi_Piece_Question_000_C_SetPosAndScale) == 0x000004, "Wrong alignment on WBP_Menu_Tokugi_Piece_Question_000_C_SetPosAndScale");
static_assert(sizeof(WBP_Menu_Tokugi_Piece_Question_000_C_SetPosAndScale) == 0x000014, "Wrong size on WBP_Menu_Tokugi_Piece_Question_000_C_SetPosAndScale");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_SetPosAndScale, Position_0) == 0x000000, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_SetPosAndScale::Position_0' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_SetPosAndScale, Scale_0) == 0x000008, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_SetPosAndScale::Scale_0' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_SetPosAndScale, BgScroll_0) == 0x00000C, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_SetPosAndScale::BgScroll_0' has a wrong offset!");

// Function WBP_Menu_Tokugi_Piece_Question_000.WBP_Menu_Tokugi_Piece_Question_000_C.SetDisplayScale
// 0x0004 (0x0004 - 0x0000)
struct WBP_Menu_Tokugi_Piece_Question_000_C_SetDisplayScale final
{
public:
	float                                         DisplayScale;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Menu_Tokugi_Piece_Question_000_C_SetDisplayScale) == 0x000004, "Wrong alignment on WBP_Menu_Tokugi_Piece_Question_000_C_SetDisplayScale");
static_assert(sizeof(WBP_Menu_Tokugi_Piece_Question_000_C_SetDisplayScale) == 0x000004, "Wrong size on WBP_Menu_Tokugi_Piece_Question_000_C_SetDisplayScale");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_SetDisplayScale, DisplayScale) == 0x000000, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_SetDisplayScale::DisplayScale' has a wrong offset!");

// Function WBP_Menu_Tokugi_Piece_Question_000.WBP_Menu_Tokugi_Piece_Question_000_C.SetPosition
// 0x0008 (0x0008 - 0x0000)
struct WBP_Menu_Tokugi_Piece_Question_000_C_SetPosition final
{
public:
	struct FVector2D                              Pos;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Menu_Tokugi_Piece_Question_000_C_SetPosition) == 0x000004, "Wrong alignment on WBP_Menu_Tokugi_Piece_Question_000_C_SetPosition");
static_assert(sizeof(WBP_Menu_Tokugi_Piece_Question_000_C_SetPosition) == 0x000008, "Wrong size on WBP_Menu_Tokugi_Piece_Question_000_C_SetPosition");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_SetPosition, Pos) == 0x000000, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_SetPosition::Pos' has a wrong offset!");

// Function WBP_Menu_Tokugi_Piece_Question_000.WBP_Menu_Tokugi_Piece_Question_000_C.AnimToCloseOrCrack
// 0x0018 (0x0018 - 0x0000)
struct WBP_Menu_Tokugi_Piece_Question_000_C_AnimToCloseOrCrack final
{
public:
	EJackTokugiQuestionAnim                       AnimTypeToDark;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackTokugiQuestionAnim                       AnimTypeToBright;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReverse;                                          // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanOpen_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_GetCrackDirList_ReturnValue;              // 0x0008(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(WBP_Menu_Tokugi_Piece_Question_000_C_AnimToCloseOrCrack) == 0x000008, "Wrong alignment on WBP_Menu_Tokugi_Piece_Question_000_C_AnimToCloseOrCrack");
static_assert(sizeof(WBP_Menu_Tokugi_Piece_Question_000_C_AnimToCloseOrCrack) == 0x000018, "Wrong size on WBP_Menu_Tokugi_Piece_Question_000_C_AnimToCloseOrCrack");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_AnimToCloseOrCrack, AnimTypeToDark) == 0x000000, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_AnimToCloseOrCrack::AnimTypeToDark' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_AnimToCloseOrCrack, AnimTypeToBright) == 0x000001, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_AnimToCloseOrCrack::AnimTypeToBright' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_AnimToCloseOrCrack, bReverse) == 0x000002, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_AnimToCloseOrCrack::bReverse' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_AnimToCloseOrCrack, CallFunc_CanOpen_ReturnValue) == 0x000003, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_AnimToCloseOrCrack::CallFunc_CanOpen_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_Tokugi_Piece_Question_000_C_AnimToCloseOrCrack, CallFunc_GetCrackDirList_ReturnValue) == 0x000008, "Member 'WBP_Menu_Tokugi_Piece_Question_000_C_AnimToCloseOrCrack::CallFunc_GetCrackDirList_ReturnValue' has a wrong offset!");

}

