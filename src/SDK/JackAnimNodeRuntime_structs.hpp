#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JackAnimNodeRuntime

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum JackAnimNodeRuntime.EJackConvertedAxis
// NumValues: 0x0007
enum class EJackConvertedAxis : uint8
{
	PLUS_X                                   = 0,
	PLUS_Y                                   = 1,
	PLUS_Z                                   = 2,
	MINUS_X                                  = 3,
	MINUS_Y                                  = 4,
	MINUS_Z                                  = 5,
	EJackConvertedAxis_MAX                   = 6,
};

// Enum JackAnimNodeRuntime.EJackFacePoseEvaluator
// NumValues: 0x0003
enum class EJackFacePoseEvaluator : uint8
{
	Upper                                    = 0,
	Lower                                    = 1,
	MAX                                      = 2,
};

// Enum JackAnimNodeRuntime.EJackLookAtBasePose
// NumValues: 0x0005
enum class EJackLookAtBasePose : uint8
{
	Default                                  = 0,
	ReferencePose                            = 1,
	ReferencePoseWithKeepLocation            = 2,
	FowardVectorOffset                       = 3,
	EJackLookAtBasePose_MAX                  = 4,
};

// Enum JackAnimNodeRuntime.EJackOverrideUseConvertVelocityToExternalForce
// NumValues: 0x0004
enum class EJackOverrideUseConvertVelocityToExternalForce : uint8
{
	NotOverride                              = 0,
	ForceFalse                               = 1,
	ForceTrue                                = 2,
	EJackOverrideUseConvertVelocityToExternalForce_MAX = 3,
};

// Enum JackAnimNodeRuntime.EJackWindEffectDecayRate
// NumValues: 0x0004
enum class EJackWindEffectDecayRate : uint8
{
	NoDecay                                  = 0,
	Linear                                   = 1,
	Square                                   = 2,
	EJackWindEffectDecayRate_MAX             = 3,
};

// Enum JackAnimNodeRuntime.EJackAnimDynamicsSphericalLimitType
// NumValues: 0x0003
enum class EJackAnimDynamicsSphericalLimitType : uint8
{
	Inner                                    = 0,
	Outer                                    = 1,
	EJackAnimDynamicsSphericalLimitType_MAX  = 2,
};

// Enum JackAnimNodeRuntime.FJackAnimDynamicsEvaluateStatus
// NumValues: 0x0004
enum class EFJackAnimDynamicsEvaluateStatus : uint8
{
	Never                                    = 0,
	Pending                                  = 1,
	Ran                                      = 2,
	FJackAnimDynamicsEvaluateStatus_MAX      = 3,
};

// Enum JackAnimNodeRuntime.EJackAnimPhysSimSpaceType
// NumValues: 0x0006
enum class EJackAnimPhysSimSpaceType : uint8
{
	Component                                = 0,
	Actor                                    = 1,
	World                                    = 2,
	RootRelative                             = 3,
	BoneRelative                             = 4,
	EJackAnimPhysSimSpaceType_MAX            = 5,
};

// Enum JackAnimNodeRuntime.EJackAnimPhysLinearConstraintType
// NumValues: 0x0003
enum class EJackAnimPhysLinearConstraintType : uint8
{
	Free                                     = 0,
	Limited                                  = 1,
	EJackAnimPhysLinearConstraintType_MAX    = 2,
};

// Enum JackAnimNodeRuntime.EJackAnimPhysAngularConstraintType
// NumValues: 0x0003
enum class EJackAnimPhysAngularConstraintType : uint8
{
	Angular                                  = 0,
	Cone                                     = 1,
	EJackAnimPhysAngularConstraintType_MAX   = 2,
};

// Enum JackAnimNodeRuntime.EJackAnimExpressionType
// NumValues: 0x0007
enum class EJackAnimExpressionType : uint8
{
	MaxOrMinRot                              = 0,
	AverageRot                               = 1,
	TransSyncRot                             = 2,
	Lerp2BonesAndClamp                       = 3,
	RotCancel                                = 4,
	ModifyBone                               = 5,
	EJackAnimExpressionType_MAX              = 6,
};

// Enum JackAnimNodeRuntime.EJackGetTransformMode
// NumValues: 0x0003
enum class EJackGetTransformMode : uint8
{
	Default                                  = 0,
	Delta                                    = 1,
	EJackGetTransformMode_MAX                = 2,
};

// Enum JackAnimNodeRuntime.EJackDynamicBonePartsSlot
// NumValues: 0x0008
enum class EJackDynamicBonePartsSlot : uint8
{
	UPPER_BODY                               = 0,
	LOWER_BODY                               = 1,
	BODY_EXTRA                               = 2,
	HAIR                                     = 3,
	HAIR_EXTRA                               = 4,
	MANTLE                                   = 5,
	OTHER                                    = 6,
	MAX                                      = 7,
};

// Enum JackAnimNodeRuntime.EJackBoneAxis
// NumValues: 0x0004
enum class EJackBoneAxis : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	EJackBoneAxis_MAX                        = 3,
};

// Enum JackAnimNodeRuntime.EJackNeedsToEvalDynamicsWeightCurve
// NumValues: 0x0004
enum class EJackNeedsToEvalDynamicsWeightCurve : uint8
{
	NotReflected                             = 0,
	NotNeedToEvalCurve                       = 1,
	NeedToEvalCurve                          = 2,
	EJackNeedsToEvalDynamicsWeightCurve_MAX  = 3,
};

// Enum JackAnimNodeRuntime.EJackMantleDynamicBoneState
// NumValues: 0x000D
enum class EJackMantleDynamicBoneState : uint8
{
	Default                                  = 0,
	Sim_CapeMantle                           = 1,
	Sim_MantleC                              = 2,
	Sim_MantleC_N013                         = 3,
	Sim_MantleB                              = 4,
	Sim_CapeMantle_N002                      = 5,
	Sim_MantleC_N002                         = 6,
	Sim_MantleC_N014                         = 7,
	Sim_MantleC_P004                         = 8,
	Sim_MantleC_P008                         = 9,
	Sim_MantleC_P007                         = 10,
	Sim_MantleC_P002                         = 11,
	EJackMantleDynamicBoneState_MAX          = 12,
};

// Enum JackAnimNodeRuntime.EJackHairDynamicBoneState
// NumValues: 0x0025
enum class EJackHairDynamicBoneState : uint8
{
	Default                                  = 0,
	Pose_P008Hair                            = 1,
	Pose_P004Hair                            = 2,
	Pose_N101Hair                            = 3,
	Pose_N001Hair                            = 4,
	Pose_P003Hair                            = 5,
	Sim_P004ShortHair                        = 6,
	Sim_ShortHairUpMidLow                    = 7,
	Sim_C_RearHairH                          = 8,
	Sim_C_RearHairA                          = 9,
	Sim_PlayerHair                           = 10,
	Sim_LR_RearHairA                         = 11,
	Pose_LR_RearHairD1                       = 12,
	Pose_C_RearHairB1                        = 13,
	Pose_LR_SideHairI1                       = 14,
	Pose_C_RearHairG1                        = 15,
	Pose_LR_SideHairJ1                       = 16,
	Pose_RearHairILL                         = 17,
	Pose_RearHairKPP                         = 18,
	Pose_SideHairF1                          = 19,
	Pose_C_RearHairL1                        = 20,
	Pose_LR_SideHairK1                       = 21,
	Pose_R_FrontHairE1                       = 22,
	Pose_ChestHairA1                         = 23,
	Pose_NeckHoodA1                          = 24,
	Pose_HeadVeilB1                          = 25,
	Pose_C_RearHairN1                        = 26,
	Pose_C_RearHairQ1                        = 27,
	Sim_BeardD1                              = 28,
	Pose_HeadVeilC1                          = 29,
	Pose_RearHairP1                          = 30,
	Sim_C_BeardB                             = 31,
	Sim_N104Hair                             = 32,
	Sim_C_HairTailA1                         = 33,
	Sim_C_HairTailB1                         = 34,
	Pose_LR_SideHairL1                       = 35,
	EJackHairDynamicBoneState_MAX            = 36,
};

// Enum JackAnimNodeRuntime.EJackLowerDynamicBoneState
// NumValues: 0x0034
enum class EJackLowerDynamicBoneState : uint8
{
	Default                                  = 0,
	RtEx_Skirt_Length1                       = 1,
	RtEx_Skirt_Length2                       = 2,
	RtEx_Skirt_Length3                       = 3,
	RtEx_Skirt_Length4                       = 4,
	RtEx_SBSkirt                             = 5,
	RtEx_FtSkirt_Length2                     = 6,
	RtEx_FtSkirt_Length3                     = 7,
	RtEx_FtSkirt_Length3_N008                = 8,
	RtEx_FtSkirt_Length3_N010                = 9,
	RtEx_FtSkirt_Length3_N013                = 10,
	RtEx_HipsArmor                           = 11,
	RtEx_HipsArmor_N001                      = 12,
	RtEx_HipsArmor_N004                      = 13,
	RtEx_SouthSkirtK1                        = 14,
	RtEx_P004Skirt                           = 15,
	RtEx_HrSkirtA                            = 16,
	Sim_KtAcce                               = 17,
	RtEx_HipsSideArmor                       = 18,
	RtEx_P001Skirt                           = 19,
	Sim_LR_LoinclothA1                       = 20,
	Sim_TailSkirtA1                          = 21,
	Sim_LR_NpcPantsI3                        = 22,
	RtEx_FBSkirtA1                           = 23,
	RtEx_NmSkirtB1                           = 24,
	RtEx_NmSkirtA1                           = 25,
	RtEx_SlideSkirt                          = 26,
	RtEx_FBSkirtB1                           = 27,
	RtEx_SouthSkirtQ1                        = 28,
	RtEx_NorthSkirtS1                        = 29,
	Sim_DancerSkirt                          = 30,
	RtEx_P002_Skirt                          = 31,
	RtEx_N008_SamaCoat                       = 32,
	RtEx_FtSkirt_Length2_N013                = 33,
	RtEx_SouthSkirtK1Long_P001               = 34,
	RtEx_HipsArmor_P001                      = 35,
	RtEx_SouthSkirtK1Short_P001              = 36,
	RtEx_HipsArmor_P004                      = 37,
	RtEx_SouthSkirtK1Short_P008              = 38,
	RtEx_HipsArmor_P008                      = 39,
	RtEx_FBSkirtA1_P006                      = 40,
	RtEx_RCSkirt_Length3                     = 41,
	RtEx_RCSkirt_Length4                     = 42,
	RtEx_SouthSkirtK1Long_P006               = 43,
	RtEx_NmSkirtD1                           = 44,
	RtEx_P002_DelayLegPants                  = 45,
	RtEx_BunnySkirt_P006                     = 46,
	RtEx_SwimSkirt_P006                      = 47,
	RtEx_PrinSkirt_P006                      = 48,
	RtEx_HipsArmor_P002                      = 49,
	RtEx_Bt_NimaSkirt                        = 50,
	EJackLowerDynamicBoneState_MAX           = 51,
};

// Enum JackAnimNodeRuntime.EJackUpperDynamicBoneState
// NumValues: 0x000A
enum class EJackUpperDynamicBoneState : uint8
{
	Default                                  = 0,
	Sim_CollarA                              = 1,
	Sim_RearHood                             = 2,
	RtEx_LR_ShoulderClothA1                  = 3,
	Sim_NPC_ParadeFar                        = 4,
	Sim_P001_ParadeFeather                   = 5,
	Sim_P005_ParadeFeatherBlack              = 6,
	Sim_CollarA_N008                         = 7,
	Sim_CollarE_P007                         = 8,
	EJackUpperDynamicBoneState_MAX           = 9,
};

// ScriptStruct JackAnimNodeRuntime.JackLookAtClamp
// 0x0020 (0x0020 - 0x0000)
struct FJackLookAtClamp final
{
public:
	float                                         YawLeft;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawRight;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchUp;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchDown;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawLeftRate;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawRightRate;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchUpRate;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchDownRate;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackLookAtClamp) == 0x000004, "Wrong alignment on FJackLookAtClamp");
static_assert(sizeof(FJackLookAtClamp) == 0x000020, "Wrong size on FJackLookAtClamp");
static_assert(offsetof(FJackLookAtClamp, YawLeft) == 0x000000, "Member 'FJackLookAtClamp::YawLeft' has a wrong offset!");
static_assert(offsetof(FJackLookAtClamp, YawRight) == 0x000004, "Member 'FJackLookAtClamp::YawRight' has a wrong offset!");
static_assert(offsetof(FJackLookAtClamp, PitchUp) == 0x000008, "Member 'FJackLookAtClamp::PitchUp' has a wrong offset!");
static_assert(offsetof(FJackLookAtClamp, PitchDown) == 0x00000C, "Member 'FJackLookAtClamp::PitchDown' has a wrong offset!");
static_assert(offsetof(FJackLookAtClamp, YawLeftRate) == 0x000010, "Member 'FJackLookAtClamp::YawLeftRate' has a wrong offset!");
static_assert(offsetof(FJackLookAtClamp, YawRightRate) == 0x000014, "Member 'FJackLookAtClamp::YawRightRate' has a wrong offset!");
static_assert(offsetof(FJackLookAtClamp, PitchUpRate) == 0x000018, "Member 'FJackLookAtClamp::PitchUpRate' has a wrong offset!");
static_assert(offsetof(FJackLookAtClamp, PitchDownRate) == 0x00001C, "Member 'FJackLookAtClamp::PitchDownRate' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.AnimNode_JackLookAt
// 0x0100 (0x0170 - 0x0070)
struct alignas(0x10) FAnimNode_JackLookAt final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         BoneToModify;                                      // 0x0070(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         LookAtBone;                                        // 0x0088(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LookAtLocation;                                    // 0x00A0(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxisOption                                   LookAtAxis;                                        // 0x00AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackLookAtClamp                       LookAtClamp;                                       // 0x00B0(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               LookAtOffset;                                      // 0x00D0(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RollControlRateByYawControl;                       // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackLookAtBasePose                           LookAtBasePose;                                    // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInterpolationBlend                           InterpolationType;                                 // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x2];                                       // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpolationTime;                                 // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpolationTriggerThreashold;                    // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDebug;                                      // 0x00EC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED[0x63];                                      // 0x00ED(0x0063)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         CalcLookAtBone;                                    // 0x0150(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	EAxisOption                                   CalcLookAtBoneAxis;                                // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_JackLookAt) == 0x000010, "Wrong alignment on FAnimNode_JackLookAt");
static_assert(sizeof(FAnimNode_JackLookAt) == 0x000170, "Wrong size on FAnimNode_JackLookAt");
static_assert(offsetof(FAnimNode_JackLookAt, BoneToModify) == 0x000070, "Member 'FAnimNode_JackLookAt::BoneToModify' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackLookAt, LookAtBone) == 0x000088, "Member 'FAnimNode_JackLookAt::LookAtBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackLookAt, LookAtLocation) == 0x0000A0, "Member 'FAnimNode_JackLookAt::LookAtLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackLookAt, LookAtAxis) == 0x0000AC, "Member 'FAnimNode_JackLookAt::LookAtAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackLookAt, LookAtClamp) == 0x0000B0, "Member 'FAnimNode_JackLookAt::LookAtClamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackLookAt, LookAtOffset) == 0x0000D0, "Member 'FAnimNode_JackLookAt::LookAtOffset' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackLookAt, RollControlRateByYawControl) == 0x0000DC, "Member 'FAnimNode_JackLookAt::RollControlRateByYawControl' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackLookAt, LookAtBasePose) == 0x0000E0, "Member 'FAnimNode_JackLookAt::LookAtBasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackLookAt, InterpolationType) == 0x0000E1, "Member 'FAnimNode_JackLookAt::InterpolationType' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackLookAt, InterpolationTime) == 0x0000E4, "Member 'FAnimNode_JackLookAt::InterpolationTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackLookAt, InterpolationTriggerThreashold) == 0x0000E8, "Member 'FAnimNode_JackLookAt::InterpolationTriggerThreashold' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackLookAt, bEnableDebug) == 0x0000EC, "Member 'FAnimNode_JackLookAt::bEnableDebug' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackLookAt, CalcLookAtBone) == 0x000150, "Member 'FAnimNode_JackLookAt::CalcLookAtBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackLookAt, CalcLookAtBoneAxis) == 0x000168, "Member 'FAnimNode_JackLookAt::CalcLookAtBoneAxis' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackAnimDynamicsConstraintSetup
// 0x005C (0x005C - 0x0000)
struct FJackAnimDynamicsConstraintSetup final
{
public:
	EJackAnimPhysLinearConstraintType             LinearXLimitType;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackAnimPhysLinearConstraintType             LinearYLimitType;                                  // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackAnimPhysLinearConstraintType             LinearZLimitType;                                  // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LinearAxesMin;                                     // 0x0004(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinearAxesMax;                                     // 0x0010(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackAnimPhysAngularConstraintType            AngularConstraintType;                             // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimPhysTwistAxis                            TwistAxis;                                         // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConeAngle;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularXAngle;                                     // 0x0024(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularYAngle;                                     // 0x0028(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularZAngle;                                     // 0x002C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularLimitsMin;                                  // 0x0030(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularLimitsMax;                                  // 0x003C(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimPhysTwistAxis                            AngularTargetAxis;                                 // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AngularTarget;                                     // 0x004C(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLinearFullyLocked;                                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAnimDynamicsConstraintSetup) == 0x000004, "Wrong alignment on FJackAnimDynamicsConstraintSetup");
static_assert(sizeof(FJackAnimDynamicsConstraintSetup) == 0x00005C, "Wrong size on FJackAnimDynamicsConstraintSetup");
static_assert(offsetof(FJackAnimDynamicsConstraintSetup, LinearXLimitType) == 0x000000, "Member 'FJackAnimDynamicsConstraintSetup::LinearXLimitType' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsConstraintSetup, LinearYLimitType) == 0x000001, "Member 'FJackAnimDynamicsConstraintSetup::LinearYLimitType' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsConstraintSetup, LinearZLimitType) == 0x000002, "Member 'FJackAnimDynamicsConstraintSetup::LinearZLimitType' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsConstraintSetup, LinearAxesMin) == 0x000004, "Member 'FJackAnimDynamicsConstraintSetup::LinearAxesMin' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsConstraintSetup, LinearAxesMax) == 0x000010, "Member 'FJackAnimDynamicsConstraintSetup::LinearAxesMax' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsConstraintSetup, AngularConstraintType) == 0x00001C, "Member 'FJackAnimDynamicsConstraintSetup::AngularConstraintType' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsConstraintSetup, TwistAxis) == 0x00001D, "Member 'FJackAnimDynamicsConstraintSetup::TwistAxis' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsConstraintSetup, ConeAngle) == 0x000020, "Member 'FJackAnimDynamicsConstraintSetup::ConeAngle' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsConstraintSetup, AngularXAngle) == 0x000024, "Member 'FJackAnimDynamicsConstraintSetup::AngularXAngle' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsConstraintSetup, AngularYAngle) == 0x000028, "Member 'FJackAnimDynamicsConstraintSetup::AngularYAngle' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsConstraintSetup, AngularZAngle) == 0x00002C, "Member 'FJackAnimDynamicsConstraintSetup::AngularZAngle' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsConstraintSetup, AngularLimitsMin) == 0x000030, "Member 'FJackAnimDynamicsConstraintSetup::AngularLimitsMin' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsConstraintSetup, AngularLimitsMax) == 0x00003C, "Member 'FJackAnimDynamicsConstraintSetup::AngularLimitsMax' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsConstraintSetup, AngularTargetAxis) == 0x000048, "Member 'FJackAnimDynamicsConstraintSetup::AngularTargetAxis' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsConstraintSetup, AngularTarget) == 0x00004C, "Member 'FJackAnimDynamicsConstraintSetup::AngularTarget' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsConstraintSetup, bLinearFullyLocked) == 0x000058, "Member 'FJackAnimDynamicsConstraintSetup::bLinearFullyLocked' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackAnimDynamicsPlanarLimit
// 0x0060 (0x0060 - 0x0000)
struct FJackAnimDynamicsPlanarLimit final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DrivingBoneName;                                   // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             PlaneTransform;                                    // 0x0020(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseFinitePlane;                                   // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              PlaneExtend;                                       // 0x0054(0x0008)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipDrivingBoneValidation;                        // 0x005C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAnimDynamicsPlanarLimit) == 0x000010, "Wrong alignment on FJackAnimDynamicsPlanarLimit");
static_assert(sizeof(FJackAnimDynamicsPlanarLimit) == 0x000060, "Wrong size on FJackAnimDynamicsPlanarLimit");
static_assert(offsetof(FJackAnimDynamicsPlanarLimit, DrivingBoneName) == 0x000018, "Member 'FJackAnimDynamicsPlanarLimit::DrivingBoneName' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsPlanarLimit, PlaneTransform) == 0x000020, "Member 'FJackAnimDynamicsPlanarLimit::PlaneTransform' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsPlanarLimit, bUseFinitePlane) == 0x000050, "Member 'FJackAnimDynamicsPlanarLimit::bUseFinitePlane' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsPlanarLimit, PlaneExtend) == 0x000054, "Member 'FJackAnimDynamicsPlanarLimit::PlaneExtend' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsPlanarLimit, bSkipDrivingBoneValidation) == 0x00005C, "Member 'FJackAnimDynamicsPlanarLimit::bSkipDrivingBoneValidation' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackAnimDynamicsSphericalLimit
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FJackAnimDynamicsSphericalLimit final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DrivingBoneName;                                   // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SphereLocalOffset;                                 // 0x0020(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitRadius;                                       // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackAnimDynamicsSphericalLimitType           LimitType;                                         // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipDrivingBoneValidation;                        // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAnimDynamicsSphericalLimit) == 0x000008, "Wrong alignment on FJackAnimDynamicsSphericalLimit");
static_assert(sizeof(FJackAnimDynamicsSphericalLimit) == 0x000038, "Wrong size on FJackAnimDynamicsSphericalLimit");
static_assert(offsetof(FJackAnimDynamicsSphericalLimit, DrivingBoneName) == 0x000018, "Member 'FJackAnimDynamicsSphericalLimit::DrivingBoneName' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsSphericalLimit, SphereLocalOffset) == 0x000020, "Member 'FJackAnimDynamicsSphericalLimit::SphereLocalOffset' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsSphericalLimit, LimitRadius) == 0x00002C, "Member 'FJackAnimDynamicsSphericalLimit::LimitRadius' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsSphericalLimit, LimitType) == 0x000030, "Member 'FJackAnimDynamicsSphericalLimit::LimitType' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsSphericalLimit, bSkipDrivingBoneValidation) == 0x000031, "Member 'FJackAnimDynamicsSphericalLimit::bSkipDrivingBoneValidation' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackAnimDynamicsProperties
// 0x02C8 (0x02C8 - 0x0000)
struct FJackAnimDynamicsProperties final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USkeletalMesh>           MasterPose;                                        // 0x0008(0x0018)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class USkeletalMesh>>   ExcludeMasterPose;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	EJackAnimPhysSimSpaceType                     SimulationSpace;                                   // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         RelativeSpaceBone;                                 // 0x0038(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bChain;                                            // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         BoundBone;                                         // 0x0058(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         ChainEnd;                                          // 0x0070(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtents;                                        // 0x0088(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalJointOffset;                                  // 0x0094(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0xC];                                       // 0x00A4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableWind;                                       // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindScale;                                         // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWindEffectDecayRate                      WindEffectDecayRate;                               // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverseWindEffectDecay;                           // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x2];                                       // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindEffectMaxClamp;                                // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindEffectThreshold;                               // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseVehicleFakeForce;                              // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseKeepBoneLength;                                // 0x00C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideLinearDamping;                            // 0x00C6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C7[0x1];                                       // 0x00C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LinearDampingOverride;                             // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideAngularDamping;                           // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AngularDampingOverride;                            // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideAngularBias;                              // 0x00D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AngularBiasOverride;                               // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0xC];                                       // 0x00DC(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackAnimDynamicsConstraintSetup       ConstraintSetup;                                   // 0x00E8(0x005C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUsePlanarLimit;                                   // 0x0144(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackAnimDynamicsPlanarLimit>   PlanarLimits;                                      // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseSphericalLimits;                               // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackAnimDynamicsSphericalLimit> SphericalLimits;                                   // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EAnimPhysCollisionType                        CollisionType;                                     // 0x0170(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SphereCollisionRadius;                             // 0x0174(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ExternalForce;                                     // 0x0178(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseBoneSpaceGravityMode;                          // 0x0184(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_185[0x3];                                      // 0x0185(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BoneSpaceGravityDirection;                         // 0x0188(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseConvertVelocityToExternalForce;                // 0x0194(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_195[0x3];                                      // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VelocityMulRatio;                                  // 0x0198(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MinClampVelocity;                                  // 0x019C(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MaxClampVelocity;                                  // 0x01A8(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackAnimPhysSimSpaceType                     ExternalForceSpace;                                // 0x01B4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B5[0x3];                                      // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         ExternalForceRelativeBone;                         // 0x01B8(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0[0x8];                                      // 0x01D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ModifyGroupName;                                   // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0[0xE8];                                     // 0x01E0(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAnimDynamicsProperties) == 0x000008, "Wrong alignment on FJackAnimDynamicsProperties");
static_assert(sizeof(FJackAnimDynamicsProperties) == 0x0002C8, "Wrong size on FJackAnimDynamicsProperties");
static_assert(offsetof(FJackAnimDynamicsProperties, MasterPose) == 0x000008, "Member 'FJackAnimDynamicsProperties::MasterPose' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, ExcludeMasterPose) == 0x000020, "Member 'FJackAnimDynamicsProperties::ExcludeMasterPose' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, SimulationSpace) == 0x000030, "Member 'FJackAnimDynamicsProperties::SimulationSpace' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, RelativeSpaceBone) == 0x000038, "Member 'FJackAnimDynamicsProperties::RelativeSpaceBone' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, bChain) == 0x000050, "Member 'FJackAnimDynamicsProperties::bChain' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, BoundBone) == 0x000058, "Member 'FJackAnimDynamicsProperties::BoundBone' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, ChainEnd) == 0x000070, "Member 'FJackAnimDynamicsProperties::ChainEnd' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, BoxExtents) == 0x000088, "Member 'FJackAnimDynamicsProperties::BoxExtents' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, LocalJointOffset) == 0x000094, "Member 'FJackAnimDynamicsProperties::LocalJointOffset' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, GravityScale) == 0x0000A0, "Member 'FJackAnimDynamicsProperties::GravityScale' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, bEnableWind) == 0x0000B0, "Member 'FJackAnimDynamicsProperties::bEnableWind' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, WindScale) == 0x0000B4, "Member 'FJackAnimDynamicsProperties::WindScale' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, WindEffectDecayRate) == 0x0000B8, "Member 'FJackAnimDynamicsProperties::WindEffectDecayRate' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, bReverseWindEffectDecay) == 0x0000B9, "Member 'FJackAnimDynamicsProperties::bReverseWindEffectDecay' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, WindEffectMaxClamp) == 0x0000BC, "Member 'FJackAnimDynamicsProperties::WindEffectMaxClamp' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, WindEffectThreshold) == 0x0000C0, "Member 'FJackAnimDynamicsProperties::WindEffectThreshold' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, bUseVehicleFakeForce) == 0x0000C4, "Member 'FJackAnimDynamicsProperties::bUseVehicleFakeForce' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, bUseKeepBoneLength) == 0x0000C5, "Member 'FJackAnimDynamicsProperties::bUseKeepBoneLength' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, bOverrideLinearDamping) == 0x0000C6, "Member 'FJackAnimDynamicsProperties::bOverrideLinearDamping' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, LinearDampingOverride) == 0x0000C8, "Member 'FJackAnimDynamicsProperties::LinearDampingOverride' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, bOverrideAngularDamping) == 0x0000CC, "Member 'FJackAnimDynamicsProperties::bOverrideAngularDamping' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, AngularDampingOverride) == 0x0000D0, "Member 'FJackAnimDynamicsProperties::AngularDampingOverride' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, bOverrideAngularBias) == 0x0000D4, "Member 'FJackAnimDynamicsProperties::bOverrideAngularBias' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, AngularBiasOverride) == 0x0000D8, "Member 'FJackAnimDynamicsProperties::AngularBiasOverride' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, ConstraintSetup) == 0x0000E8, "Member 'FJackAnimDynamicsProperties::ConstraintSetup' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, bUsePlanarLimit) == 0x000144, "Member 'FJackAnimDynamicsProperties::bUsePlanarLimit' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, PlanarLimits) == 0x000148, "Member 'FJackAnimDynamicsProperties::PlanarLimits' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, bUseSphericalLimits) == 0x000158, "Member 'FJackAnimDynamicsProperties::bUseSphericalLimits' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, SphericalLimits) == 0x000160, "Member 'FJackAnimDynamicsProperties::SphericalLimits' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, CollisionType) == 0x000170, "Member 'FJackAnimDynamicsProperties::CollisionType' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, SphereCollisionRadius) == 0x000174, "Member 'FJackAnimDynamicsProperties::SphereCollisionRadius' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, ExternalForce) == 0x000178, "Member 'FJackAnimDynamicsProperties::ExternalForce' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, bUseBoneSpaceGravityMode) == 0x000184, "Member 'FJackAnimDynamicsProperties::bUseBoneSpaceGravityMode' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, BoneSpaceGravityDirection) == 0x000188, "Member 'FJackAnimDynamicsProperties::BoneSpaceGravityDirection' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, bUseConvertVelocityToExternalForce) == 0x000194, "Member 'FJackAnimDynamicsProperties::bUseConvertVelocityToExternalForce' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, VelocityMulRatio) == 0x000198, "Member 'FJackAnimDynamicsProperties::VelocityMulRatio' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, MinClampVelocity) == 0x00019C, "Member 'FJackAnimDynamicsProperties::MinClampVelocity' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, MaxClampVelocity) == 0x0001A8, "Member 'FJackAnimDynamicsProperties::MaxClampVelocity' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, ExternalForceSpace) == 0x0001B4, "Member 'FJackAnimDynamicsProperties::ExternalForceSpace' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, ExternalForceRelativeBone) == 0x0001B8, "Member 'FJackAnimDynamicsProperties::ExternalForceRelativeBone' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsProperties, ModifyGroupName) == 0x0001D8, "Member 'FJackAnimDynamicsProperties::ModifyGroupName' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackAnimExp_DynamicBoneControlWeight
// 0x0008 (0x0008 - 0x0000)
struct FJackAnimExp_DynamicBoneControlWeight final
{
public:
	float                                         ExpressionDynamicControlWeight;                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimDynamicsDynamicControlWeight;                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackAnimExp_DynamicBoneControlWeight) == 0x000004, "Wrong alignment on FJackAnimExp_DynamicBoneControlWeight");
static_assert(sizeof(FJackAnimExp_DynamicBoneControlWeight) == 0x000008, "Wrong size on FJackAnimExp_DynamicBoneControlWeight");
static_assert(offsetof(FJackAnimExp_DynamicBoneControlWeight, ExpressionDynamicControlWeight) == 0x000000, "Member 'FJackAnimExp_DynamicBoneControlWeight::ExpressionDynamicControlWeight' has a wrong offset!");
static_assert(offsetof(FJackAnimExp_DynamicBoneControlWeight, AnimDynamicsDynamicControlWeight) == 0x000004, "Member 'FJackAnimExp_DynamicBoneControlWeight::AnimDynamicsDynamicControlWeight' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackAnimExp_DynamicBoneCacheState
// 0x00B8 (0x00B8 - 0x0000)
struct alignas(0x08) FJackAnimExp_DynamicBoneCacheState final
{
public:
	EJackUpperDynamicBoneState                    UpperState;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackLowerDynamicBoneState                    LowerState;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackHairDynamicBoneState                     HairState;                                         // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMantleDynamicBoneState                   MantleState;                                       // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJackAnimExp_DynamicBoneControlWeight  UpperDynamicBoneControlWeight;                     // 0x0004(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackAnimExp_DynamicBoneControlWeight  LowerDynamicBoneControlWeight;                     // 0x000C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackAnimExp_DynamicBoneControlWeight  BodyExDynamicBoneControlWeight;                    // 0x0014(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackAnimExp_DynamicBoneControlWeight  HairDynamicBoneControlWeight;                      // 0x001C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackAnimExp_DynamicBoneControlWeight  HairExDynamicBoneControlWeight;                    // 0x0024(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackAnimExp_DynamicBoneControlWeight  MantleDynamicBoneControlWeight;                    // 0x002C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackAnimExp_DynamicBoneControlWeight  OtherDynamicBoneControlWeight;                     // 0x0034(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x70];                                      // 0x003C(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsSkipDynamics;                                   // 0x00AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0xB];                                       // 0x00AD(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAnimExp_DynamicBoneCacheState) == 0x000008, "Wrong alignment on FJackAnimExp_DynamicBoneCacheState");
static_assert(sizeof(FJackAnimExp_DynamicBoneCacheState) == 0x0000B8, "Wrong size on FJackAnimExp_DynamicBoneCacheState");
static_assert(offsetof(FJackAnimExp_DynamicBoneCacheState, UpperState) == 0x000000, "Member 'FJackAnimExp_DynamicBoneCacheState::UpperState' has a wrong offset!");
static_assert(offsetof(FJackAnimExp_DynamicBoneCacheState, LowerState) == 0x000001, "Member 'FJackAnimExp_DynamicBoneCacheState::LowerState' has a wrong offset!");
static_assert(offsetof(FJackAnimExp_DynamicBoneCacheState, HairState) == 0x000002, "Member 'FJackAnimExp_DynamicBoneCacheState::HairState' has a wrong offset!");
static_assert(offsetof(FJackAnimExp_DynamicBoneCacheState, MantleState) == 0x000003, "Member 'FJackAnimExp_DynamicBoneCacheState::MantleState' has a wrong offset!");
static_assert(offsetof(FJackAnimExp_DynamicBoneCacheState, UpperDynamicBoneControlWeight) == 0x000004, "Member 'FJackAnimExp_DynamicBoneCacheState::UpperDynamicBoneControlWeight' has a wrong offset!");
static_assert(offsetof(FJackAnimExp_DynamicBoneCacheState, LowerDynamicBoneControlWeight) == 0x00000C, "Member 'FJackAnimExp_DynamicBoneCacheState::LowerDynamicBoneControlWeight' has a wrong offset!");
static_assert(offsetof(FJackAnimExp_DynamicBoneCacheState, BodyExDynamicBoneControlWeight) == 0x000014, "Member 'FJackAnimExp_DynamicBoneCacheState::BodyExDynamicBoneControlWeight' has a wrong offset!");
static_assert(offsetof(FJackAnimExp_DynamicBoneCacheState, HairDynamicBoneControlWeight) == 0x00001C, "Member 'FJackAnimExp_DynamicBoneCacheState::HairDynamicBoneControlWeight' has a wrong offset!");
static_assert(offsetof(FJackAnimExp_DynamicBoneCacheState, HairExDynamicBoneControlWeight) == 0x000024, "Member 'FJackAnimExp_DynamicBoneCacheState::HairExDynamicBoneControlWeight' has a wrong offset!");
static_assert(offsetof(FJackAnimExp_DynamicBoneCacheState, MantleDynamicBoneControlWeight) == 0x00002C, "Member 'FJackAnimExp_DynamicBoneCacheState::MantleDynamicBoneControlWeight' has a wrong offset!");
static_assert(offsetof(FJackAnimExp_DynamicBoneCacheState, OtherDynamicBoneControlWeight) == 0x000034, "Member 'FJackAnimExp_DynamicBoneCacheState::OtherDynamicBoneControlWeight' has a wrong offset!");
static_assert(offsetof(FJackAnimExp_DynamicBoneCacheState, bIsSkipDynamics) == 0x0000AC, "Member 'FJackAnimExp_DynamicBoneCacheState::bIsSkipDynamics' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.AnimNode_JackAnimDynamics
// 0x02D8 (0x0348 - 0x0070)
struct FAnimNode_JackAnimDynamics final : public FAnimNode_SkeletalControlBase
{
public:
	class UDataTable*                             AnimDynamicsTable;                                 // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDynamicsTableMap;                              // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DynamicsTableName;                                 // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJackAnimDynamicsProperties>    AnimDynamicsProps;                                 // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x10];                                      // 0x0098(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	EJackDynamicBonePartsSlot                     DynamicBoneSlot;                                   // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUpperDynamicBoneState                    UpperDynamicBoneState;                             // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackLowerDynamicBoneState                    LowerDynamicBoneState;                             // 0x00AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackHairDynamicBoneState                     HairDynamicBoneState;                              // 0x00AB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMantleDynamicBoneState                   MantleDynamicBoneState;                            // 0x00AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ModeChangeRate;                                    // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSkipDynamicsFlag;                           // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecInitPropsAtInitialization;                    // 0x00B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B6[0x12];                                      // 0x00B6(0x0012)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackAnimExp_DynamicBoneCacheState     DynamicBoneCache;                                  // 0x00C8(0x00B8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_180[0x1C8];                                    // 0x0180(0x01C8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_JackAnimDynamics) == 0x000008, "Wrong alignment on FAnimNode_JackAnimDynamics");
static_assert(sizeof(FAnimNode_JackAnimDynamics) == 0x000348, "Wrong size on FAnimNode_JackAnimDynamics");
static_assert(offsetof(FAnimNode_JackAnimDynamics, AnimDynamicsTable) == 0x000070, "Member 'FAnimNode_JackAnimDynamics::AnimDynamicsTable' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimDynamics, bUseDynamicsTableMap) == 0x000078, "Member 'FAnimNode_JackAnimDynamics::bUseDynamicsTableMap' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimDynamics, DynamicsTableName) == 0x000080, "Member 'FAnimNode_JackAnimDynamics::DynamicsTableName' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimDynamics, AnimDynamicsProps) == 0x000088, "Member 'FAnimNode_JackAnimDynamics::AnimDynamicsProps' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimDynamics, DynamicBoneSlot) == 0x0000A8, "Member 'FAnimNode_JackAnimDynamics::DynamicBoneSlot' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimDynamics, UpperDynamicBoneState) == 0x0000A9, "Member 'FAnimNode_JackAnimDynamics::UpperDynamicBoneState' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimDynamics, LowerDynamicBoneState) == 0x0000AA, "Member 'FAnimNode_JackAnimDynamics::LowerDynamicBoneState' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimDynamics, HairDynamicBoneState) == 0x0000AB, "Member 'FAnimNode_JackAnimDynamics::HairDynamicBoneState' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimDynamics, MantleDynamicBoneState) == 0x0000AC, "Member 'FAnimNode_JackAnimDynamics::MantleDynamicBoneState' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimDynamics, ModeChangeRate) == 0x0000B0, "Member 'FAnimNode_JackAnimDynamics::ModeChangeRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimDynamics, bIgnoreSkipDynamicsFlag) == 0x0000B4, "Member 'FAnimNode_JackAnimDynamics::bIgnoreSkipDynamicsFlag' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimDynamics, bExecInitPropsAtInitialization) == 0x0000B5, "Member 'FAnimNode_JackAnimDynamics::bExecInitPropsAtInitialization' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimDynamics, DynamicBoneCache) == 0x0000C8, "Member 'FAnimNode_JackAnimDynamics::DynamicBoneCache' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.AnimNode_JackFacePoseEvaluator
// 0x0008 (0x0038 - 0x0030)
struct FAnimNode_JackFacePoseEvaluator final : public FAnimNode_Base
{
public:
	EJackFacePoseEvaluator                        Category;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOutputAdditiveOnly;                               // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_JackFacePoseEvaluator) == 0x000008, "Wrong alignment on FAnimNode_JackFacePoseEvaluator");
static_assert(sizeof(FAnimNode_JackFacePoseEvaluator) == 0x000038, "Wrong size on FAnimNode_JackFacePoseEvaluator");
static_assert(offsetof(FAnimNode_JackFacePoseEvaluator, Category) == 0x000030, "Member 'FAnimNode_JackFacePoseEvaluator::Category' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackFacePoseEvaluator, bOutputAdditiveOnly) == 0x000031, "Member 'FAnimNode_JackFacePoseEvaluator::bOutputAdditiveOnly' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackAnimExp_BaseProperties
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FJackAnimExp_BaseProperties final
{
public:
	class FName                                   TargetBone;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneA;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneB;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RelatedBoneName;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MulRatio;                                          // 0x0020(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAnimExp_BaseProperties) == 0x000008, "Wrong alignment on FJackAnimExp_BaseProperties");
static_assert(sizeof(FJackAnimExp_BaseProperties) == 0x000030, "Wrong size on FJackAnimExp_BaseProperties");
static_assert(offsetof(FJackAnimExp_BaseProperties, TargetBone) == 0x000000, "Member 'FJackAnimExp_BaseProperties::TargetBone' has a wrong offset!");
static_assert(offsetof(FJackAnimExp_BaseProperties, BoneA) == 0x000008, "Member 'FJackAnimExp_BaseProperties::BoneA' has a wrong offset!");
static_assert(offsetof(FJackAnimExp_BaseProperties, BoneB) == 0x000010, "Member 'FJackAnimExp_BaseProperties::BoneB' has a wrong offset!");
static_assert(offsetof(FJackAnimExp_BaseProperties, RelatedBoneName) == 0x000018, "Member 'FJackAnimExp_BaseProperties::RelatedBoneName' has a wrong offset!");
static_assert(offsetof(FJackAnimExp_BaseProperties, MulRatio) == 0x000020, "Member 'FJackAnimExp_BaseProperties::MulRatio' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackAnimExpNodeProps_CollideSkirtMode
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FJackAnimExpNodeProps_CollideSkirtMode final
{
public:
	class FName                                   UpLegBone;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LegBone;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MarginRate;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpValue;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   EasingFunc;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAnimExpNodeProps_CollideSkirtMode) == 0x000008, "Wrong alignment on FJackAnimExpNodeProps_CollideSkirtMode");
static_assert(sizeof(FJackAnimExpNodeProps_CollideSkirtMode) == 0x000020, "Wrong size on FJackAnimExpNodeProps_CollideSkirtMode");
static_assert(offsetof(FJackAnimExpNodeProps_CollideSkirtMode, UpLegBone) == 0x000000, "Member 'FJackAnimExpNodeProps_CollideSkirtMode::UpLegBone' has a wrong offset!");
static_assert(offsetof(FJackAnimExpNodeProps_CollideSkirtMode, LegBone) == 0x000008, "Member 'FJackAnimExpNodeProps_CollideSkirtMode::LegBone' has a wrong offset!");
static_assert(offsetof(FJackAnimExpNodeProps_CollideSkirtMode, MarginRate) == 0x000010, "Member 'FJackAnimExpNodeProps_CollideSkirtMode::MarginRate' has a wrong offset!");
static_assert(offsetof(FJackAnimExpNodeProps_CollideSkirtMode, ExpValue) == 0x000014, "Member 'FJackAnimExpNodeProps_CollideSkirtMode::ExpValue' has a wrong offset!");
static_assert(offsetof(FJackAnimExpNodeProps_CollideSkirtMode, EasingFunc) == 0x000018, "Member 'FJackAnimExpNodeProps_CollideSkirtMode::EasingFunc' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackAnimExpNodeProps_FixRefPoseClamp
// 0x0003 (0x0003 - 0x0000)
struct FJackAnimExpNodeProps_FixRefPoseClamp final
{
public:
	bool                                          bFixX;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixY;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixZ;                                             // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackAnimExpNodeProps_FixRefPoseClamp) == 0x000001, "Wrong alignment on FJackAnimExpNodeProps_FixRefPoseClamp");
static_assert(sizeof(FJackAnimExpNodeProps_FixRefPoseClamp) == 0x000003, "Wrong size on FJackAnimExpNodeProps_FixRefPoseClamp");
static_assert(offsetof(FJackAnimExpNodeProps_FixRefPoseClamp, bFixX) == 0x000000, "Member 'FJackAnimExpNodeProps_FixRefPoseClamp::bFixX' has a wrong offset!");
static_assert(offsetof(FJackAnimExpNodeProps_FixRefPoseClamp, bFixY) == 0x000001, "Member 'FJackAnimExpNodeProps_FixRefPoseClamp::bFixY' has a wrong offset!");
static_assert(offsetof(FJackAnimExpNodeProps_FixRefPoseClamp, bFixZ) == 0x000002, "Member 'FJackAnimExpNodeProps_FixRefPoseClamp::bFixZ' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackDataTableAnimExp_AverageRot
// 0x0080 (0x0088 - 0x0008)
struct FJackDataTableAnimExp_AverageRot final : public FTableRowBase
{
public:
	struct FJackAnimExp_BaseProperties            BaseProperties;                                    // 0x0008(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCopyBoneARot;                                     // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCollideSkirtMode;                              // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackAnimExpNodeProps_CollideSkirtMode CollideSkirtModeProps;                             // 0x0040(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bClampRot;                                         // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixRefPoseClamp;                                  // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJackAnimExpNodeProps_FixRefPoseClamp  FixAxis;                                           // 0x0062(0x0003)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ClampValueMin;                                     // 0x0068(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ClampValueMax;                                     // 0x0074(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             CalcSpace;                                         // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableAnimExp_AverageRot) == 0x000008, "Wrong alignment on FJackDataTableAnimExp_AverageRot");
static_assert(sizeof(FJackDataTableAnimExp_AverageRot) == 0x000088, "Wrong size on FJackDataTableAnimExp_AverageRot");
static_assert(offsetof(FJackDataTableAnimExp_AverageRot, BaseProperties) == 0x000008, "Member 'FJackDataTableAnimExp_AverageRot::BaseProperties' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_AverageRot, bCopyBoneARot) == 0x000038, "Member 'FJackDataTableAnimExp_AverageRot::bCopyBoneARot' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_AverageRot, bUseCollideSkirtMode) == 0x000039, "Member 'FJackDataTableAnimExp_AverageRot::bUseCollideSkirtMode' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_AverageRot, CollideSkirtModeProps) == 0x000040, "Member 'FJackDataTableAnimExp_AverageRot::CollideSkirtModeProps' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_AverageRot, bClampRot) == 0x000060, "Member 'FJackDataTableAnimExp_AverageRot::bClampRot' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_AverageRot, bFixRefPoseClamp) == 0x000061, "Member 'FJackDataTableAnimExp_AverageRot::bFixRefPoseClamp' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_AverageRot, FixAxis) == 0x000062, "Member 'FJackDataTableAnimExp_AverageRot::FixAxis' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_AverageRot, ClampValueMin) == 0x000068, "Member 'FJackDataTableAnimExp_AverageRot::ClampValueMin' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_AverageRot, ClampValueMax) == 0x000074, "Member 'FJackDataTableAnimExp_AverageRot::ClampValueMax' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_AverageRot, CalcSpace) == 0x000080, "Member 'FJackDataTableAnimExp_AverageRot::CalcSpace' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackAnimExpNodeProps_AverageRot
// 0x0088 (0x0088 - 0x0000)
struct FJackAnimExpNodeProps_AverageRot final
{
public:
	struct FJackDataTableAnimExp_AverageRot       AverageRot_Props;                                  // 0x0000(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackAnimExpNodeProps_AverageRot) == 0x000008, "Wrong alignment on FJackAnimExpNodeProps_AverageRot");
static_assert(sizeof(FJackAnimExpNodeProps_AverageRot) == 0x000088, "Wrong size on FJackAnimExpNodeProps_AverageRot");
static_assert(offsetof(FJackAnimExpNodeProps_AverageRot, AverageRot_Props) == 0x000000, "Member 'FJackAnimExpNodeProps_AverageRot::AverageRot_Props' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackBlendSpaceFilterBones
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackBlendSpaceFilterBones final
{
public:
	class FName                                   StartBone;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndBone;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackBlendSpaceFilterBones) == 0x000008, "Wrong alignment on FJackBlendSpaceFilterBones");
static_assert(sizeof(FJackBlendSpaceFilterBones) == 0x000010, "Wrong size on FJackBlendSpaceFilterBones");
static_assert(offsetof(FJackBlendSpaceFilterBones, StartBone) == 0x000000, "Member 'FJackBlendSpaceFilterBones::StartBone' has a wrong offset!");
static_assert(offsetof(FJackBlendSpaceFilterBones, EndBone) == 0x000008, "Member 'FJackBlendSpaceFilterBones::EndBone' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.AnimNode_JackBlendSpaceEvaluator
// 0x0318 (0x0370 - 0x0058)
struct alignas(0x10) FAnimNode_JackBlendSpaceEvaluator final : public FAnimNode_AssetPlayerBase
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0058(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackBlendSpaceFilterBones>     TargetBonesList;                                   // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bMeshSpaceRotationBlend;                           // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECurveBlendOption                             CurveBlendOption;                                  // 0x0089(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackDynamicBonePartsSlot                     DynamicBoneSlot;                                   // 0x008A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUpperDynamicBoneState                    UpperDynamicBoneState;                             // 0x008B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackLowerDynamicBoneState                    LowerDynamicBoneState;                             // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackHairDynamicBoneState                     HairDynamicBoneState;                              // 0x008D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMantleDynamicBoneState                   MantleDynamicBoneState;                            // 0x008E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8F[0x1];                                       // 0x008F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BaseBoneName;                                      // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndBoneName;                                       // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseAngleBoneName;                                 // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackConvertedAxis                            BaseBoneVirtualFrontAxis;                          // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackConvertedAxis                            BS_X_Axis;                                         // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackConvertedAxis                            BS_Y_Axis;                                         // 0x00AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackConvertedAxis                            BS_Z_Axis;                                         // 0x00AB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpaceBase*                        LowerBlendSpace;                                   // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpaceBase*                        UpperBlendSpace;                                   // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJackAnimExp_DynamicBoneCacheState     DynamicBoneCache;                                  // 0x00C0(0x00B8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSkipDynamicsFlag;                           // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecInitPropsAtInitialization;                    // 0x0179(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A[0x7E];                                     // 0x017A(0x007E)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartPosition;                                     // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlendFilter                           BlendFilter;                                       // 0x0200(0x0090)(Protected, NativeAccessSpecifierProtected)
	TArray<struct FBlendSampleData>               BlendSampleDataCache;                              // 0x0290(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UBlendSpaceBase*                        PreviousBlendSpace;                                // 0x02A0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A8[0xC8];                                     // 0x02A8(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_JackBlendSpaceEvaluator) == 0x000010, "Wrong alignment on FAnimNode_JackBlendSpaceEvaluator");
static_assert(sizeof(FAnimNode_JackBlendSpaceEvaluator) == 0x000370, "Wrong size on FAnimNode_JackBlendSpaceEvaluator");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, BasePose) == 0x000058, "Member 'FAnimNode_JackBlendSpaceEvaluator::BasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, TargetBonesList) == 0x000078, "Member 'FAnimNode_JackBlendSpaceEvaluator::TargetBonesList' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, bMeshSpaceRotationBlend) == 0x000088, "Member 'FAnimNode_JackBlendSpaceEvaluator::bMeshSpaceRotationBlend' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, CurveBlendOption) == 0x000089, "Member 'FAnimNode_JackBlendSpaceEvaluator::CurveBlendOption' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, DynamicBoneSlot) == 0x00008A, "Member 'FAnimNode_JackBlendSpaceEvaluator::DynamicBoneSlot' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, UpperDynamicBoneState) == 0x00008B, "Member 'FAnimNode_JackBlendSpaceEvaluator::UpperDynamicBoneState' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, LowerDynamicBoneState) == 0x00008C, "Member 'FAnimNode_JackBlendSpaceEvaluator::LowerDynamicBoneState' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, HairDynamicBoneState) == 0x00008D, "Member 'FAnimNode_JackBlendSpaceEvaluator::HairDynamicBoneState' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, MantleDynamicBoneState) == 0x00008E, "Member 'FAnimNode_JackBlendSpaceEvaluator::MantleDynamicBoneState' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, BaseBoneName) == 0x000090, "Member 'FAnimNode_JackBlendSpaceEvaluator::BaseBoneName' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, EndBoneName) == 0x000098, "Member 'FAnimNode_JackBlendSpaceEvaluator::EndBoneName' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, BaseAngleBoneName) == 0x0000A0, "Member 'FAnimNode_JackBlendSpaceEvaluator::BaseAngleBoneName' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, BaseBoneVirtualFrontAxis) == 0x0000A8, "Member 'FAnimNode_JackBlendSpaceEvaluator::BaseBoneVirtualFrontAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, BS_X_Axis) == 0x0000A9, "Member 'FAnimNode_JackBlendSpaceEvaluator::BS_X_Axis' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, BS_Y_Axis) == 0x0000AA, "Member 'FAnimNode_JackBlendSpaceEvaluator::BS_Y_Axis' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, BS_Z_Axis) == 0x0000AB, "Member 'FAnimNode_JackBlendSpaceEvaluator::BS_Z_Axis' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, LowerBlendSpace) == 0x0000B0, "Member 'FAnimNode_JackBlendSpaceEvaluator::LowerBlendSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, UpperBlendSpace) == 0x0000B8, "Member 'FAnimNode_JackBlendSpaceEvaluator::UpperBlendSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, DynamicBoneCache) == 0x0000C0, "Member 'FAnimNode_JackBlendSpaceEvaluator::DynamicBoneCache' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, bIgnoreSkipDynamicsFlag) == 0x000178, "Member 'FAnimNode_JackBlendSpaceEvaluator::bIgnoreSkipDynamicsFlag' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, bExecInitPropsAtInitialization) == 0x000179, "Member 'FAnimNode_JackBlendSpaceEvaluator::bExecInitPropsAtInitialization' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, StartPosition) == 0x0001F8, "Member 'FAnimNode_JackBlendSpaceEvaluator::StartPosition' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, BlendFilter) == 0x000200, "Member 'FAnimNode_JackBlendSpaceEvaluator::BlendFilter' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, BlendSampleDataCache) == 0x000290, "Member 'FAnimNode_JackBlendSpaceEvaluator::BlendSampleDataCache' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackBlendSpaceEvaluator, PreviousBlendSpace) == 0x0002A0, "Member 'FAnimNode_JackBlendSpaceEvaluator::PreviousBlendSpace' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackDataTableAnimExp_RotCancel
// 0x0028 (0x0030 - 0x0008)
struct FJackDataTableAnimExp_RotCancel final : public FTableRowBase
{
public:
	class FName                                   TargetBone;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RelatedBoneName;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SynchroCancelBoneName;                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Ratio;                                             // 0x0020(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             CalcSpace;                                         // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableAnimExp_RotCancel) == 0x000008, "Wrong alignment on FJackDataTableAnimExp_RotCancel");
static_assert(sizeof(FJackDataTableAnimExp_RotCancel) == 0x000030, "Wrong size on FJackDataTableAnimExp_RotCancel");
static_assert(offsetof(FJackDataTableAnimExp_RotCancel, TargetBone) == 0x000008, "Member 'FJackDataTableAnimExp_RotCancel::TargetBone' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_RotCancel, RelatedBoneName) == 0x000010, "Member 'FJackDataTableAnimExp_RotCancel::RelatedBoneName' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_RotCancel, SynchroCancelBoneName) == 0x000018, "Member 'FJackDataTableAnimExp_RotCancel::SynchroCancelBoneName' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_RotCancel, Ratio) == 0x000020, "Member 'FJackDataTableAnimExp_RotCancel::Ratio' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_RotCancel, CalcSpace) == 0x00002C, "Member 'FJackDataTableAnimExp_RotCancel::CalcSpace' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackAnimExpNodeProps_RotCancel
// 0x0030 (0x0030 - 0x0000)
struct FJackAnimExpNodeProps_RotCancel final
{
public:
	struct FJackDataTableAnimExp_RotCancel        RotCancel_Props;                                   // 0x0000(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackAnimExpNodeProps_RotCancel) == 0x000008, "Wrong alignment on FJackAnimExpNodeProps_RotCancel");
static_assert(sizeof(FJackAnimExpNodeProps_RotCancel) == 0x000030, "Wrong size on FJackAnimExpNodeProps_RotCancel");
static_assert(offsetof(FJackAnimExpNodeProps_RotCancel, RotCancel_Props) == 0x000000, "Member 'FJackAnimExpNodeProps_RotCancel::RotCancel_Props' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackDataTableAnimExp_MaxOrMinRot
// 0x0038 (0x0040 - 0x0008)
struct FJackDataTableAnimExp_MaxOrMinRot final : public FTableRowBase
{
public:
	struct FJackAnimExp_BaseProperties            BaseProperties;                                    // 0x0008(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bPositiveRangeClamp;                               // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBoneAxis                                 ClampTargetAxis;                                   // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExceptionClamp;                                   // 0x003A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             CalcSpace;                                         // 0x003B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableAnimExp_MaxOrMinRot) == 0x000008, "Wrong alignment on FJackDataTableAnimExp_MaxOrMinRot");
static_assert(sizeof(FJackDataTableAnimExp_MaxOrMinRot) == 0x000040, "Wrong size on FJackDataTableAnimExp_MaxOrMinRot");
static_assert(offsetof(FJackDataTableAnimExp_MaxOrMinRot, BaseProperties) == 0x000008, "Member 'FJackDataTableAnimExp_MaxOrMinRot::BaseProperties' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_MaxOrMinRot, bPositiveRangeClamp) == 0x000038, "Member 'FJackDataTableAnimExp_MaxOrMinRot::bPositiveRangeClamp' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_MaxOrMinRot, ClampTargetAxis) == 0x000039, "Member 'FJackDataTableAnimExp_MaxOrMinRot::ClampTargetAxis' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_MaxOrMinRot, bExceptionClamp) == 0x00003A, "Member 'FJackDataTableAnimExp_MaxOrMinRot::bExceptionClamp' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_MaxOrMinRot, CalcSpace) == 0x00003B, "Member 'FJackDataTableAnimExp_MaxOrMinRot::CalcSpace' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackAnimExpNodeProps_MaxOrMinRot
// 0x0040 (0x0040 - 0x0000)
struct FJackAnimExpNodeProps_MaxOrMinRot final
{
public:
	struct FJackDataTableAnimExp_MaxOrMinRot      MaxOrMinRot_Props;                                 // 0x0000(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackAnimExpNodeProps_MaxOrMinRot) == 0x000008, "Wrong alignment on FJackAnimExpNodeProps_MaxOrMinRot");
static_assert(sizeof(FJackAnimExpNodeProps_MaxOrMinRot) == 0x000040, "Wrong size on FJackAnimExpNodeProps_MaxOrMinRot");
static_assert(offsetof(FJackAnimExpNodeProps_MaxOrMinRot, MaxOrMinRot_Props) == 0x000000, "Member 'FJackAnimExpNodeProps_MaxOrMinRot::MaxOrMinRot_Props' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackDataTableAnimExp_TransSyncRot
// 0x0068 (0x0070 - 0x0008)
struct FJackDataTableAnimExp_TransSyncRot final : public FTableRowBase
{
public:
	struct FJackAnimExp_BaseProperties            BaseProperties;                                    // 0x0008(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseTransSync2BoneRotDelta;                        // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBoneAxis                                 RotAxis;                                           // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OffsetLocation;                                    // 0x003C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ClampSinMinMax;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SyncBoneName;                                      // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RefPoseParentBoneName;                             // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseLength;                                        // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LerpRatio;                                         // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             CalcSpace;                                         // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableAnimExp_TransSyncRot) == 0x000008, "Wrong alignment on FJackDataTableAnimExp_TransSyncRot");
static_assert(sizeof(FJackDataTableAnimExp_TransSyncRot) == 0x000070, "Wrong size on FJackDataTableAnimExp_TransSyncRot");
static_assert(offsetof(FJackDataTableAnimExp_TransSyncRot, BaseProperties) == 0x000008, "Member 'FJackDataTableAnimExp_TransSyncRot::BaseProperties' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_TransSyncRot, bUseTransSync2BoneRotDelta) == 0x000038, "Member 'FJackDataTableAnimExp_TransSyncRot::bUseTransSync2BoneRotDelta' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_TransSyncRot, RotAxis) == 0x000039, "Member 'FJackDataTableAnimExp_TransSyncRot::RotAxis' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_TransSyncRot, OffsetLocation) == 0x00003C, "Member 'FJackDataTableAnimExp_TransSyncRot::OffsetLocation' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_TransSyncRot, ClampSinMinMax) == 0x000048, "Member 'FJackDataTableAnimExp_TransSyncRot::ClampSinMinMax' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_TransSyncRot, SyncBoneName) == 0x000050, "Member 'FJackDataTableAnimExp_TransSyncRot::SyncBoneName' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_TransSyncRot, RefPoseParentBoneName) == 0x000058, "Member 'FJackDataTableAnimExp_TransSyncRot::RefPoseParentBoneName' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_TransSyncRot, BaseLength) == 0x000060, "Member 'FJackDataTableAnimExp_TransSyncRot::BaseLength' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_TransSyncRot, LerpRatio) == 0x000068, "Member 'FJackDataTableAnimExp_TransSyncRot::LerpRatio' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_TransSyncRot, CalcSpace) == 0x00006C, "Member 'FJackDataTableAnimExp_TransSyncRot::CalcSpace' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackAnimExpNodeProps_TransSyncRot
// 0x0070 (0x0070 - 0x0000)
struct FJackAnimExpNodeProps_TransSyncRot final
{
public:
	struct FJackDataTableAnimExp_TransSyncRot     TransSyncRot_Props;                                // 0x0000(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackAnimExpNodeProps_TransSyncRot) == 0x000008, "Wrong alignment on FJackAnimExpNodeProps_TransSyncRot");
static_assert(sizeof(FJackAnimExpNodeProps_TransSyncRot) == 0x000070, "Wrong size on FJackAnimExpNodeProps_TransSyncRot");
static_assert(offsetof(FJackAnimExpNodeProps_TransSyncRot, TransSyncRot_Props) == 0x000000, "Member 'FJackAnimExpNodeProps_TransSyncRot::TransSyncRot_Props' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackDataTableAnimExp_Lerp2BonesAndClamp
// 0x0050 (0x0058 - 0x0008)
struct FJackDataTableAnimExp_Lerp2BonesAndClamp final : public FTableRowBase
{
public:
	struct FJackAnimExp_BaseProperties            BaseProperties;                                    // 0x0008(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                MinRot;                                            // 0x0038(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MaxRot;                                            // 0x0044(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LerpAlpha;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             CalcSpace;                                         // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableAnimExp_Lerp2BonesAndClamp) == 0x000008, "Wrong alignment on FJackDataTableAnimExp_Lerp2BonesAndClamp");
static_assert(sizeof(FJackDataTableAnimExp_Lerp2BonesAndClamp) == 0x000058, "Wrong size on FJackDataTableAnimExp_Lerp2BonesAndClamp");
static_assert(offsetof(FJackDataTableAnimExp_Lerp2BonesAndClamp, BaseProperties) == 0x000008, "Member 'FJackDataTableAnimExp_Lerp2BonesAndClamp::BaseProperties' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_Lerp2BonesAndClamp, MinRot) == 0x000038, "Member 'FJackDataTableAnimExp_Lerp2BonesAndClamp::MinRot' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_Lerp2BonesAndClamp, MaxRot) == 0x000044, "Member 'FJackDataTableAnimExp_Lerp2BonesAndClamp::MaxRot' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_Lerp2BonesAndClamp, LerpAlpha) == 0x000050, "Member 'FJackDataTableAnimExp_Lerp2BonesAndClamp::LerpAlpha' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_Lerp2BonesAndClamp, CalcSpace) == 0x000054, "Member 'FJackDataTableAnimExp_Lerp2BonesAndClamp::CalcSpace' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackAnimExpNodeProps_Lerp2BonesAndClamp
// 0x0058 (0x0058 - 0x0000)
struct FJackAnimExpNodeProps_Lerp2BonesAndClamp final
{
public:
	struct FJackDataTableAnimExp_Lerp2BonesAndClamp Lerp2BonesAndClamp_Props;                          // 0x0000(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackAnimExpNodeProps_Lerp2BonesAndClamp) == 0x000008, "Wrong alignment on FJackAnimExpNodeProps_Lerp2BonesAndClamp");
static_assert(sizeof(FJackAnimExpNodeProps_Lerp2BonesAndClamp) == 0x000058, "Wrong size on FJackAnimExpNodeProps_Lerp2BonesAndClamp");
static_assert(offsetof(FJackAnimExpNodeProps_Lerp2BonesAndClamp, Lerp2BonesAndClamp_Props) == 0x000000, "Member 'FJackAnimExpNodeProps_Lerp2BonesAndClamp::Lerp2BonesAndClamp_Props' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackDataTableAnimExp_ModifyBone
// 0x0038 (0x0040 - 0x0008)
struct FJackDataTableAnimExp_ModifyBone final : public FTableRowBase
{
public:
	class FName                                   TargetBone;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Translation;                                       // 0x0010(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0028(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneModificationMode                         TranslationMode;                                   // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneModificationMode                         RotationMode;                                      // 0x0035(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneModificationMode                         ScaleMode;                                         // 0x0036(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             TranslationSpace;                                  // 0x0037(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             RotationSpace;                                     // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             ScaleSpace;                                        // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableAnimExp_ModifyBone) == 0x000008, "Wrong alignment on FJackDataTableAnimExp_ModifyBone");
static_assert(sizeof(FJackDataTableAnimExp_ModifyBone) == 0x000040, "Wrong size on FJackDataTableAnimExp_ModifyBone");
static_assert(offsetof(FJackDataTableAnimExp_ModifyBone, TargetBone) == 0x000008, "Member 'FJackDataTableAnimExp_ModifyBone::TargetBone' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_ModifyBone, Translation) == 0x000010, "Member 'FJackDataTableAnimExp_ModifyBone::Translation' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_ModifyBone, Rotation) == 0x00001C, "Member 'FJackDataTableAnimExp_ModifyBone::Rotation' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_ModifyBone, Scale) == 0x000028, "Member 'FJackDataTableAnimExp_ModifyBone::Scale' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_ModifyBone, TranslationMode) == 0x000034, "Member 'FJackDataTableAnimExp_ModifyBone::TranslationMode' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_ModifyBone, RotationMode) == 0x000035, "Member 'FJackDataTableAnimExp_ModifyBone::RotationMode' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_ModifyBone, ScaleMode) == 0x000036, "Member 'FJackDataTableAnimExp_ModifyBone::ScaleMode' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_ModifyBone, TranslationSpace) == 0x000037, "Member 'FJackDataTableAnimExp_ModifyBone::TranslationSpace' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_ModifyBone, RotationSpace) == 0x000038, "Member 'FJackDataTableAnimExp_ModifyBone::RotationSpace' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_ModifyBone, ScaleSpace) == 0x000039, "Member 'FJackDataTableAnimExp_ModifyBone::ScaleSpace' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackAnimExpNodeProps_ModifyBone
// 0x0040 (0x0040 - 0x0000)
struct FJackAnimExpNodeProps_ModifyBone final
{
public:
	struct FJackDataTableAnimExp_ModifyBone       ModifyBone_Props;                                  // 0x0000(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackAnimExpNodeProps_ModifyBone) == 0x000008, "Wrong alignment on FJackAnimExpNodeProps_ModifyBone");
static_assert(sizeof(FJackAnimExpNodeProps_ModifyBone) == 0x000040, "Wrong size on FJackAnimExpNodeProps_ModifyBone");
static_assert(offsetof(FJackAnimExpNodeProps_ModifyBone, ModifyBone_Props) == 0x000000, "Member 'FJackAnimExpNodeProps_ModifyBone::ModifyBone_Props' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.AnimNode_JackAnimExpression
// 0x0250 (0x02C0 - 0x0070)
struct FAnimNode_JackAnimExpression final : public FAnimNode_SkeletalControlBase
{
public:
	bool                                          bDebugDynamicBone;                                 // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ModeChangeRate;                                    // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackDynamicBonePartsSlot                     DynamicBoneSlot;                                   // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUpperDynamicBoneState                    UpperDynamicBoneState;                             // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackLowerDynamicBoneState                    LowerDynamicBoneState;                             // 0x007A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackHairDynamicBoneState                     HairDynamicBoneState;                              // 0x007B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMantleDynamicBoneState                   MantleDynamicBoneState;                            // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMaxOrMinRot;                                   // 0x007D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7E[0x2];                                       // 0x007E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackAnimExpNodeProps_MaxOrMinRot> MaxOrMinRotSettings;                               // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UDataTable*                             MaxOrMinRotDataTable;                              // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAverageRot;                                    // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackAnimExpNodeProps_AverageRot> AverageRotSettings;                                // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UDataTable*                             AverageRotDataTable;                               // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTransSyncRot;                                  // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackAnimExpNodeProps_TransSyncRot> TransSyncRotSettings;                              // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UDataTable*                             TransSyncRotDataTable;                             // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLerp2BonesAndClamp;                            // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackAnimExpNodeProps_Lerp2BonesAndClamp> Lerp2BonesAndClampSettings;                        // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UDataTable*                             Lerp2BonesAndClampDataTable;                       // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRotCancel;                                     // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackAnimExpNodeProps_RotCancel> RotCancelSettings;                                 // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UDataTable*                             RotCancelDataTable;                                // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseModifyBone;                                    // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackAnimExpNodeProps_ModifyBone> ModifyBoneSettings;                                // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UDataTable*                             ModifyBoneDataTable;                               // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJackAnimExp_DynamicBoneCacheState     DynamicBoneCache;                                  // 0x0138(0x00B8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSkipDynamicsFlag;                           // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecInitPropsAtInitialization;                    // 0x01F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F2[0xCE];                                     // 0x01F2(0x00CE)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_JackAnimExpression) == 0x000008, "Wrong alignment on FAnimNode_JackAnimExpression");
static_assert(sizeof(FAnimNode_JackAnimExpression) == 0x0002C0, "Wrong size on FAnimNode_JackAnimExpression");
static_assert(offsetof(FAnimNode_JackAnimExpression, bDebugDynamicBone) == 0x000070, "Member 'FAnimNode_JackAnimExpression::bDebugDynamicBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, ModeChangeRate) == 0x000074, "Member 'FAnimNode_JackAnimExpression::ModeChangeRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, DynamicBoneSlot) == 0x000078, "Member 'FAnimNode_JackAnimExpression::DynamicBoneSlot' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, UpperDynamicBoneState) == 0x000079, "Member 'FAnimNode_JackAnimExpression::UpperDynamicBoneState' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, LowerDynamicBoneState) == 0x00007A, "Member 'FAnimNode_JackAnimExpression::LowerDynamicBoneState' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, HairDynamicBoneState) == 0x00007B, "Member 'FAnimNode_JackAnimExpression::HairDynamicBoneState' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, MantleDynamicBoneState) == 0x00007C, "Member 'FAnimNode_JackAnimExpression::MantleDynamicBoneState' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, bUseMaxOrMinRot) == 0x00007D, "Member 'FAnimNode_JackAnimExpression::bUseMaxOrMinRot' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, MaxOrMinRotSettings) == 0x000080, "Member 'FAnimNode_JackAnimExpression::MaxOrMinRotSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, MaxOrMinRotDataTable) == 0x000090, "Member 'FAnimNode_JackAnimExpression::MaxOrMinRotDataTable' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, bUseAverageRot) == 0x000098, "Member 'FAnimNode_JackAnimExpression::bUseAverageRot' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, AverageRotSettings) == 0x0000A0, "Member 'FAnimNode_JackAnimExpression::AverageRotSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, AverageRotDataTable) == 0x0000B0, "Member 'FAnimNode_JackAnimExpression::AverageRotDataTable' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, bUseTransSyncRot) == 0x0000B8, "Member 'FAnimNode_JackAnimExpression::bUseTransSyncRot' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, TransSyncRotSettings) == 0x0000C0, "Member 'FAnimNode_JackAnimExpression::TransSyncRotSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, TransSyncRotDataTable) == 0x0000D0, "Member 'FAnimNode_JackAnimExpression::TransSyncRotDataTable' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, bUseLerp2BonesAndClamp) == 0x0000D8, "Member 'FAnimNode_JackAnimExpression::bUseLerp2BonesAndClamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, Lerp2BonesAndClampSettings) == 0x0000E0, "Member 'FAnimNode_JackAnimExpression::Lerp2BonesAndClampSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, Lerp2BonesAndClampDataTable) == 0x0000F0, "Member 'FAnimNode_JackAnimExpression::Lerp2BonesAndClampDataTable' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, bUseRotCancel) == 0x0000F8, "Member 'FAnimNode_JackAnimExpression::bUseRotCancel' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, RotCancelSettings) == 0x000100, "Member 'FAnimNode_JackAnimExpression::RotCancelSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, RotCancelDataTable) == 0x000110, "Member 'FAnimNode_JackAnimExpression::RotCancelDataTable' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, bUseModifyBone) == 0x000118, "Member 'FAnimNode_JackAnimExpression::bUseModifyBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, ModifyBoneSettings) == 0x000120, "Member 'FAnimNode_JackAnimExpression::ModifyBoneSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, ModifyBoneDataTable) == 0x000130, "Member 'FAnimNode_JackAnimExpression::ModifyBoneDataTable' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, DynamicBoneCache) == 0x000138, "Member 'FAnimNode_JackAnimExpression::DynamicBoneCache' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, bIgnoreSkipDynamicsFlag) == 0x0001F0, "Member 'FAnimNode_JackAnimExpression::bIgnoreSkipDynamicsFlag' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackAnimExpression, bExecInitPropsAtInitialization) == 0x0001F1, "Member 'FAnimNode_JackAnimExpression::bExecInitPropsAtInitialization' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackDataTableAnimExp_WindRandomizePreset
// 0x0028 (0x0030 - 0x0008)
struct FJackDataTableAnimExp_WindRandomizePreset final : public FTableRowBase
{
public:
	float                                         BaseWindSpeed;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindDirectionRandomConeHalfAngleRange;             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRandomizeMulRatio;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRandomizeMulRatio;                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRandomEffectInterval;                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRandomEffectInterval;                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableAnimExp_WindRandomizePreset) == 0x000008, "Wrong alignment on FJackDataTableAnimExp_WindRandomizePreset");
static_assert(sizeof(FJackDataTableAnimExp_WindRandomizePreset) == 0x000030, "Wrong size on FJackDataTableAnimExp_WindRandomizePreset");
static_assert(offsetof(FJackDataTableAnimExp_WindRandomizePreset, BaseWindSpeed) == 0x000008, "Member 'FJackDataTableAnimExp_WindRandomizePreset::BaseWindSpeed' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_WindRandomizePreset, WindDirectionRandomConeHalfAngleRange) == 0x00000C, "Member 'FJackDataTableAnimExp_WindRandomizePreset::WindDirectionRandomConeHalfAngleRange' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_WindRandomizePreset, MinRandomizeMulRatio) == 0x000010, "Member 'FJackDataTableAnimExp_WindRandomizePreset::MinRandomizeMulRatio' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_WindRandomizePreset, MaxRandomizeMulRatio) == 0x000014, "Member 'FJackDataTableAnimExp_WindRandomizePreset::MaxRandomizeMulRatio' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_WindRandomizePreset, MinRandomEffectInterval) == 0x000018, "Member 'FJackDataTableAnimExp_WindRandomizePreset::MinRandomEffectInterval' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_WindRandomizePreset, MaxRandomEffectInterval) == 0x00001C, "Member 'FJackDataTableAnimExp_WindRandomizePreset::MaxRandomEffectInterval' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.AnimNode_JackFootPlacementIK
// 0x00A0 (0x0110 - 0x0070)
struct FAnimNode_JackFootPlacementIK final : public FAnimNode_SkeletalControlBase
{
public:
	bool                                          bActive;                                           // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         IKBone;                                            // 0x0078(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                EffectorLocation;                                  // 0x0090(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                JointTargetLocation;                               // 0x009C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             JointTargetLocationSpace;                          // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   JointTargetSpaceBoneName;                          // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAllowStretching : 1;                              // 0x00B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              StretchLimits;                                     // 0x00BC(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitZOffset;                                        // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowUnderZ;                                      // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0xB];                                       // 0x00CD(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EffectorSocketName;                                // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x00E0(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               MinRotation;                                       // 0x00EC(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               MaxRotation;                                       // 0x00F8(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EBoneModificationMode                         RotationMode;                                      // 0x0104(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             RotationSpace;                                     // 0x0105(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_106[0xA];                                      // 0x0106(0x000A)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_JackFootPlacementIK) == 0x000008, "Wrong alignment on FAnimNode_JackFootPlacementIK");
static_assert(sizeof(FAnimNode_JackFootPlacementIK) == 0x000110, "Wrong size on FAnimNode_JackFootPlacementIK");
static_assert(offsetof(FAnimNode_JackFootPlacementIK, bActive) == 0x000070, "Member 'FAnimNode_JackFootPlacementIK::bActive' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackFootPlacementIK, IKBone) == 0x000078, "Member 'FAnimNode_JackFootPlacementIK::IKBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackFootPlacementIK, EffectorLocation) == 0x000090, "Member 'FAnimNode_JackFootPlacementIK::EffectorLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackFootPlacementIK, JointTargetLocation) == 0x00009C, "Member 'FAnimNode_JackFootPlacementIK::JointTargetLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackFootPlacementIK, JointTargetLocationSpace) == 0x0000A8, "Member 'FAnimNode_JackFootPlacementIK::JointTargetLocationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackFootPlacementIK, JointTargetSpaceBoneName) == 0x0000B0, "Member 'FAnimNode_JackFootPlacementIK::JointTargetSpaceBoneName' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackFootPlacementIK, StretchLimits) == 0x0000BC, "Member 'FAnimNode_JackFootPlacementIK::StretchLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackFootPlacementIK, HitZOffset) == 0x0000C4, "Member 'FAnimNode_JackFootPlacementIK::HitZOffset' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackFootPlacementIK, BlendTime) == 0x0000C8, "Member 'FAnimNode_JackFootPlacementIK::BlendTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackFootPlacementIK, bAllowUnderZ) == 0x0000CC, "Member 'FAnimNode_JackFootPlacementIK::bAllowUnderZ' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackFootPlacementIK, EffectorSocketName) == 0x0000D8, "Member 'FAnimNode_JackFootPlacementIK::EffectorSocketName' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackFootPlacementIK, Rotation) == 0x0000E0, "Member 'FAnimNode_JackFootPlacementIK::Rotation' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackFootPlacementIK, MinRotation) == 0x0000EC, "Member 'FAnimNode_JackFootPlacementIK::MinRotation' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackFootPlacementIK, MaxRotation) == 0x0000F8, "Member 'FAnimNode_JackFootPlacementIK::MaxRotation' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackFootPlacementIK, RotationMode) == 0x000104, "Member 'FAnimNode_JackFootPlacementIK::RotationMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackFootPlacementIK, RotationSpace) == 0x000105, "Member 'FAnimNode_JackFootPlacementIK::RotationSpace' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackAnimExp_SortedAnimExpParams
// 0x0210 (0x0210 - 0x0000)
struct alignas(0x08) FJackAnimExp_SortedAnimExpParams final
{
public:
	uint8                                         Pad_0[0x210];                                      // 0x0000(0x0210)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAnimExp_SortedAnimExpParams) == 0x000008, "Wrong alignment on FJackAnimExp_SortedAnimExpParams");
static_assert(sizeof(FJackAnimExp_SortedAnimExpParams) == 0x000210, "Wrong size on FJackAnimExp_SortedAnimExpParams");

// ScriptStruct JackAnimNodeRuntime.JackAnimExp_DynamicsExpressionTables
// 0x0010 (0x0010 - 0x0000)
struct FJackAnimExp_DynamicsExpressionTables final
{
public:
	class FName                                   StateName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             DynamicsTable;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackAnimExp_DynamicsExpressionTables) == 0x000008, "Wrong alignment on FJackAnimExp_DynamicsExpressionTables");
static_assert(sizeof(FJackAnimExp_DynamicsExpressionTables) == 0x000010, "Wrong size on FJackAnimExp_DynamicsExpressionTables");
static_assert(offsetof(FJackAnimExp_DynamicsExpressionTables, StateName) == 0x000000, "Member 'FJackAnimExp_DynamicsExpressionTables::StateName' has a wrong offset!");
static_assert(offsetof(FJackAnimExp_DynamicsExpressionTables, DynamicsTable) == 0x000008, "Member 'FJackAnimExp_DynamicsExpressionTables::DynamicsTable' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackAnimExp_HasAnyDynamicsProps
// 0x0007 (0x0007 - 0x0000)
struct FJackAnimExp_HasAnyDynamicsProps final
{
public:
	uint8                                         Pad_0[0x7];                                        // 0x0000(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAnimExp_HasAnyDynamicsProps) == 0x000001, "Wrong alignment on FJackAnimExp_HasAnyDynamicsProps");
static_assert(sizeof(FJackAnimExp_HasAnyDynamicsProps) == 0x000007, "Wrong size on FJackAnimExp_HasAnyDynamicsProps");

// ScriptStruct JackAnimNodeRuntime.JackEvaluateFacePose_Params
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackEvaluateFacePose_Params final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackEvaluateFacePose_Params) == 0x000008, "Wrong alignment on FJackEvaluateFacePose_Params");
static_assert(sizeof(FJackEvaluateFacePose_Params) == 0x000010, "Wrong size on FJackEvaluateFacePose_Params");

// ScriptStruct JackAnimNodeRuntime.JackGetInterruptFootIK_Params
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FJackGetInterruptFootIK_Params final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackGetInterruptFootIK_Params) == 0x000008, "Wrong alignment on FJackGetInterruptFootIK_Params");
static_assert(sizeof(FJackGetInterruptFootIK_Params) == 0x000030, "Wrong size on FJackGetInterruptFootIK_Params");

// ScriptStruct JackAnimNodeRuntime.AnimNode_JackLayeredBoneBlend
// 0x00A0 (0x00D0 - 0x0030)
struct FAnimNode_JackLayeredBoneBlend final : public FAnimNode_Base
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FPoseLink>                      BlendPoses;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FInputBlendPose>                LayerSetup;                                        // 0x0058(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FInputBlendPose>                SubLayerSetup;                                     // 0x0068(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseSubLayerSetup;                                 // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 BlendWeights;                                      // 0x0088(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bMeshSpaceRotationBlend;                           // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECurveBlendOption                             CurveBlendOption;                                  // 0x0099(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlendRootMotionBasedOnRootBone;                   // 0x009A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasRelevantPoses;                                 // 0x009B(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPerBoneBlendWeight>            PerBoneBlendWeights;                               // 0x00A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x20];                                      // 0x00B0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_JackLayeredBoneBlend) == 0x000008, "Wrong alignment on FAnimNode_JackLayeredBoneBlend");
static_assert(sizeof(FAnimNode_JackLayeredBoneBlend) == 0x0000D0, "Wrong size on FAnimNode_JackLayeredBoneBlend");
static_assert(offsetof(FAnimNode_JackLayeredBoneBlend, BasePose) == 0x000030, "Member 'FAnimNode_JackLayeredBoneBlend::BasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackLayeredBoneBlend, BlendPoses) == 0x000048, "Member 'FAnimNode_JackLayeredBoneBlend::BlendPoses' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackLayeredBoneBlend, LayerSetup) == 0x000058, "Member 'FAnimNode_JackLayeredBoneBlend::LayerSetup' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackLayeredBoneBlend, SubLayerSetup) == 0x000068, "Member 'FAnimNode_JackLayeredBoneBlend::SubLayerSetup' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackLayeredBoneBlend, bUseSubLayerSetup) == 0x000078, "Member 'FAnimNode_JackLayeredBoneBlend::bUseSubLayerSetup' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackLayeredBoneBlend, BlendTime) == 0x00007C, "Member 'FAnimNode_JackLayeredBoneBlend::BlendTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackLayeredBoneBlend, BlendWeights) == 0x000088, "Member 'FAnimNode_JackLayeredBoneBlend::BlendWeights' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackLayeredBoneBlend, bMeshSpaceRotationBlend) == 0x000098, "Member 'FAnimNode_JackLayeredBoneBlend::bMeshSpaceRotationBlend' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackLayeredBoneBlend, CurveBlendOption) == 0x000099, "Member 'FAnimNode_JackLayeredBoneBlend::CurveBlendOption' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackLayeredBoneBlend, bBlendRootMotionBasedOnRootBone) == 0x00009A, "Member 'FAnimNode_JackLayeredBoneBlend::bBlendRootMotionBasedOnRootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackLayeredBoneBlend, bHasRelevantPoses) == 0x00009B, "Member 'FAnimNode_JackLayeredBoneBlend::bHasRelevantPoses' has a wrong offset!");
static_assert(offsetof(FAnimNode_JackLayeredBoneBlend, PerBoneBlendWeights) == 0x0000A0, "Member 'FAnimNode_JackLayeredBoneBlend::PerBoneBlendWeights' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackDataTableAnimDynamicsTableProperties
// 0x02E8 (0x02F0 - 0x0008)
struct FJackDataTableAnimDynamicsTableProperties final : public FTableRowBase
{
public:
	class FName                                   BoundBoneName;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChainEndName;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RelativeBoneName;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExternalForceRelativeBoneName;                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJackAnimDynamicsProperties            AnimDynamicsSettings;                              // 0x0028(0x02C8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableAnimDynamicsTableProperties) == 0x000008, "Wrong alignment on FJackDataTableAnimDynamicsTableProperties");
static_assert(sizeof(FJackDataTableAnimDynamicsTableProperties) == 0x0002F0, "Wrong size on FJackDataTableAnimDynamicsTableProperties");
static_assert(offsetof(FJackDataTableAnimDynamicsTableProperties, BoundBoneName) == 0x000008, "Member 'FJackDataTableAnimDynamicsTableProperties::BoundBoneName' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimDynamicsTableProperties, ChainEndName) == 0x000010, "Member 'FJackDataTableAnimDynamicsTableProperties::ChainEndName' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimDynamicsTableProperties, RelativeBoneName) == 0x000018, "Member 'FJackDataTableAnimDynamicsTableProperties::RelativeBoneName' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimDynamicsTableProperties, ExternalForceRelativeBoneName) == 0x000020, "Member 'FJackDataTableAnimDynamicsTableProperties::ExternalForceRelativeBoneName' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimDynamicsTableProperties, AnimDynamicsSettings) == 0x000028, "Member 'FJackDataTableAnimDynamicsTableProperties::AnimDynamicsSettings' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackAnimDynamicsVirtualPlaneCollision
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FJackAnimDynamicsVirtualPlaneCollision final
{
public:
	float                                         SideLength;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RelatedBoundBoneName;                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAnimDynamicsVirtualPlaneCollision) == 0x000008, "Wrong alignment on FJackAnimDynamicsVirtualPlaneCollision");
static_assert(sizeof(FJackAnimDynamicsVirtualPlaneCollision) == 0x000028, "Wrong size on FJackAnimDynamicsVirtualPlaneCollision");
static_assert(offsetof(FJackAnimDynamicsVirtualPlaneCollision, SideLength) == 0x000000, "Member 'FJackAnimDynamicsVirtualPlaneCollision::SideLength' has a wrong offset!");
static_assert(offsetof(FJackAnimDynamicsVirtualPlaneCollision, RelatedBoundBoneName) == 0x000008, "Member 'FJackAnimDynamicsVirtualPlaneCollision::RelatedBoundBoneName' has a wrong offset!");

// ScriptStruct JackAnimNodeRuntime.JackAnimExp_Utility
// 0x0001 (0x0001 - 0x0000)
struct FJackAnimExp_Utility final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAnimExp_Utility) == 0x000001, "Wrong alignment on FJackAnimExp_Utility");
static_assert(sizeof(FJackAnimExp_Utility) == 0x000001, "Wrong size on FJackAnimExp_Utility");

// ScriptStruct JackAnimNodeRuntime.JackDataTableAnimExp_DynamicBoneStateDef
// 0x0040 (0x0048 - 0x0008)
struct FJackDataTableAnimExp_DynamicBoneStateDef final : public FTableRowBase
{
public:
	class FName                                   IncludeBoneName;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExcludeBoneName;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           MasterPose;                                        // 0x0018(0x0018)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class USkeletalMesh>>   ExcludeMasterPose;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	EJackUpperDynamicBoneState                    UpperState;                                        // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackLowerDynamicBoneState                    LowerState;                                        // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackHairDynamicBoneState                     HairState;                                         // 0x0042(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMantleDynamicBoneState                   MantleState;                                       // 0x0043(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableAnimExp_DynamicBoneStateDef) == 0x000008, "Wrong alignment on FJackDataTableAnimExp_DynamicBoneStateDef");
static_assert(sizeof(FJackDataTableAnimExp_DynamicBoneStateDef) == 0x000048, "Wrong size on FJackDataTableAnimExp_DynamicBoneStateDef");
static_assert(offsetof(FJackDataTableAnimExp_DynamicBoneStateDef, IncludeBoneName) == 0x000008, "Member 'FJackDataTableAnimExp_DynamicBoneStateDef::IncludeBoneName' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_DynamicBoneStateDef, ExcludeBoneName) == 0x000010, "Member 'FJackDataTableAnimExp_DynamicBoneStateDef::ExcludeBoneName' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_DynamicBoneStateDef, MasterPose) == 0x000018, "Member 'FJackDataTableAnimExp_DynamicBoneStateDef::MasterPose' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_DynamicBoneStateDef, ExcludeMasterPose) == 0x000030, "Member 'FJackDataTableAnimExp_DynamicBoneStateDef::ExcludeMasterPose' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_DynamicBoneStateDef, UpperState) == 0x000040, "Member 'FJackDataTableAnimExp_DynamicBoneStateDef::UpperState' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_DynamicBoneStateDef, LowerState) == 0x000041, "Member 'FJackDataTableAnimExp_DynamicBoneStateDef::LowerState' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_DynamicBoneStateDef, HairState) == 0x000042, "Member 'FJackDataTableAnimExp_DynamicBoneStateDef::HairState' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimExp_DynamicBoneStateDef, MantleState) == 0x000043, "Member 'FJackDataTableAnimExp_DynamicBoneStateDef::MantleState' has a wrong offset!");

}

