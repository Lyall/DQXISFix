#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BCAI_Monster

#include "Basic.hpp"

#include "BP_BCAI_Monster_classes.hpp"
#include "BP_BCAI_Monster_parameters.hpp"


namespace SDK
{

// Function BP_BCAI_Monster.BP_BCAI_Monster_C.ExecuteUbergraph_BP_BCAI_Monster
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BCAI_Monster_C::ExecuteUbergraph_BP_BCAI_Monster(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BCAI_Monster_C", "ExecuteUbergraph_BP_BCAI_Monster");

	Params::BP_BCAI_Monster_C_ExecuteUbergraph_BP_BCAI_Monster Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BCAI_Monster.BP_BCAI_Monster_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_BCAI_Monster_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BCAI_Monster_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BCAI_Monster.BP_BCAI_Monster_C.ExecTurnCommandCore
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void ABP_BCAI_Monster_C::ExecTurnCommandCore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BCAI_Monster_C", "ExecTurnCommandCore");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BCAI_Monster.BP_BCAI_Monster_C.InitializeMonsterBattleAI
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InMonsterBattleAIID                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BCAI_Monster_C::InitializeMonsterBattleAI(class FName InMonsterBattleAIID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BCAI_Monster_C", "InitializeMonsterBattleAI");

	Params::BP_BCAI_Monster_C_InitializeMonsterBattleAI Parms{};

	Parms.InMonsterBattleAIID = InMonsterBattleAIID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BCAI_Monster.BP_BCAI_Monster_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_BCAI_Monster_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BCAI_Monster_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BCAI_Monster.BP_BCAI_Monster_C.ExecTurnCommand
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FJackBattleCommandAI_ExecTurnCommandResultReturnValue                                            (Parm, OutParm, ReturnParm)

struct FJackBattleCommandAI_ExecTurnCommandResult ABP_BCAI_Monster_C::ExecTurnCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BCAI_Monster_C", "ExecTurnCommand");

	Params::BP_BCAI_Monster_C_ExecTurnCommand Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BCAI_Monster.BP_BCAI_Monster_C.BuildCandidateActionSlots
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FJackMonsterBattleAI_ActionSlot>Result                                                 (Parm, OutParm, ZeroConstructor)
// TArray<int32>                           CandidateSlotIDs_0                                     (Parm, OutParm, ZeroConstructor)

void ABP_BCAI_Monster_C::BuildCandidateActionSlots(TArray<struct FJackMonsterBattleAI_ActionSlot>* Result, TArray<int32>* CandidateSlotIDs_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BCAI_Monster_C", "BuildCandidateActionSlots");

	Params::BP_BCAI_Monster_C_BuildCandidateActionSlots Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);

	if (CandidateSlotIDs_0 != nullptr)
		*CandidateSlotIDs_0 = std::move(Parms.CandidateSlotIDs_0);
}


// Function BP_BCAI_Monster.BP_BCAI_Monster_C.CalcCandidateSlotIDs
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FJackMonsterBattleAI_ActionSlot>ActionSlots                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<int32>                           CandidateSlotIDs_0                                     (Parm, OutParm, ZeroConstructor)

void ABP_BCAI_Monster_C::CalcCandidateSlotIDs(TArray<struct FJackMonsterBattleAI_ActionSlot>& ActionSlots, TArray<int32>* CandidateSlotIDs_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BCAI_Monster_C", "CalcCandidateSlotIDs");

	Params::BP_BCAI_Monster_C_CalcCandidateSlotIDs Parms{};

	Parms.ActionSlots = std::move(ActionSlots);

	UObject::ProcessEvent(Func, &Parms);

	ActionSlots = std::move(Parms.ActionSlots);

	if (CandidateSlotIDs_0 != nullptr)
		*CandidateSlotIDs_0 = std::move(Parms.CandidateSlotIDs_0);
}


// Function BP_BCAI_Monster.BP_BCAI_Monster_C.BuildDefaultActionSlots
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BCAI_Monster_C::BuildDefaultActionSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BCAI_Monster_C", "BuildDefaultActionSlots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BCAI_Monster.BP_BCAI_Monster_C.CalcCanditateTargetGameCharacter
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FJackActionData                  InActionData                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// TArray<class UJackGameCharacter*>       OutCanditateGameCharacters                             (Parm, OutParm, ZeroConstructor)

void ABP_BCAI_Monster_C::CalcCanditateTargetGameCharacter(const struct FJackActionData& InActionData, TArray<class UJackGameCharacter*>* OutCanditateGameCharacters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BCAI_Monster_C", "CalcCanditateTargetGameCharacter");

	Params::BP_BCAI_Monster_C_CalcCanditateTargetGameCharacter Parms{};

	Parms.InActionData = std::move(InActionData);

	UObject::ProcessEvent(Func, &Parms);

	if (OutCanditateGameCharacters != nullptr)
		*OutCanditateGameCharacters = std::move(Parms.OutCanditateGameCharacters);
}


// Function BP_BCAI_Monster.BP_BCAI_Monster_C.CalcExceptionActionSlotsTurnCommand
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FJackActionData                  OutExecActionData                                      (Parm, OutParm, NoDestructor)
// class UJackGameCharacter*               OutExecTargetGameCharacter                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BCAI_Monster_C::CalcExceptionActionSlotsTurnCommand(struct FJackActionData* OutExecActionData, class UJackGameCharacter** OutExecTargetGameCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BCAI_Monster_C", "CalcExceptionActionSlotsTurnCommand");

	Params::BP_BCAI_Monster_C_CalcExceptionActionSlotsTurnCommand Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutExecActionData != nullptr)
		*OutExecActionData = std::move(Parms.OutExecActionData);

	if (OutExecTargetGameCharacter != nullptr)
		*OutExecTargetGameCharacter = Parms.OutExecTargetGameCharacter;
}


// Function BP_BCAI_Monster.BP_BCAI_Monster_C.CalcTargetGameCharacterWithSecondCheck
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FJackActionData                  InActionData                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// class UJackGameCharacter*               OutResult                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BCAI_Monster_C::CalcTargetGameCharacterWithSecondCheck(const struct FJackActionData& InActionData, class UJackGameCharacter** OutResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BCAI_Monster_C", "CalcTargetGameCharacterWithSecondCheck");

	Params::BP_BCAI_Monster_C_CalcTargetGameCharacterWithSecondCheck Parms{};

	Parms.InActionData = std::move(InActionData);

	UObject::ProcessEvent(Func, &Parms);

	if (OutResult != nullptr)
		*OutResult = Parms.OutResult;
}


// Function BP_BCAI_Monster.BP_BCAI_Monster_C.GetActionPatternType
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EJackBattleActionPatternType            ActionPatternType_0                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BCAI_Monster_C::GetActionPatternType(EJackBattleActionPatternType* ActionPatternType_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BCAI_Monster_C", "GetActionPatternType");

	Params::BP_BCAI_Monster_C_GetActionPatternType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ActionPatternType_0 != nullptr)
		*ActionPatternType_0 = Parms.ActionPatternType_0;
}


// Function BP_BCAI_Monster.BP_BCAI_Monster_C.IsReviveAction
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FJackActionData                  ActionData                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// bool                                    bReviveAction                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BCAI_Monster_C::IsReviveAction(struct FJackActionData& ActionData, bool* bReviveAction) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BCAI_Monster_C", "IsReviveAction");

	Params::BP_BCAI_Monster_C_IsReviveAction Parms{};

	Parms.ActionData = std::move(ActionData);

	UObject::ProcessEvent(Func, &Parms);

	ActionData = std::move(Parms.ActionData);

	if (bReviveAction != nullptr)
		*bReviveAction = Parms.bReviveAction;
}

}

