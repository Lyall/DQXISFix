#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FLIB_SaveData

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "JackGame_structs.hpp"
#include "ENUM_AchievementPafupafu_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FLIB_SaveData.BP_FLIB_SaveData_C
// 0x0000 (0x0038 - 0x0038)
class UBP_FLIB_SaveData_C final : public UBlueprintFunctionLibrary
{
public:
	static void SaveRestartPoint(const struct FJackLDT_Restart& RestartPointTag, class UObject* __WorldContext, bool* Result);
	static void GetInvalidString(class UObject* __WorldContext, class FName* InvalidName);
	static void ResetRestartPoint(const struct FJackLDT_Restart& NewParam, class UObject* __WorldContext);
	static void CalcSaveRestartPointFlagName(EJackRestartProcessType In_RestartProcess, class UObject* __WorldContext, class FName* OutFullName);
	static void GetRestartSrcNameByEnum(EJackRestartProcessType InRestartProcess, class UObject* __WorldContext, class FName* OutName);
	static void GetSaveRestartPointFlag(EJackRestartProcessType In_Type, class UObject* __WorldContext, class FString* OutName, bool* IsInvalid);
	static void IsInvalidRestartPointName(const class FString& InFlagName, class UObject* __WorldContext, bool* OutResult);
	static void SaveRestartPointFromMapID(class FName RestartID, class UObject* __WorldContext, bool* Result);
	static void DecreaseGold(int32 LostGold, class UObject* __WorldContext);
	static void IsCurrentMapShipLocation(class UObject* __WorldContext, bool* bResult);
	static void IsShipLocationFromMapID(class FName MapId, class UObject* __WorldContext, bool* bResult);
	static void SetShipLocation(class FName MapStart, class FName MapId, class UObject* __WorldContext);
	static void SetShipLocationCore(class FName MapId, class UObject* __WorldContext);
	static void SetShipLocationAtCurrentMap(class UObject* __WorldContext);
	static void AcquireAchievementDirect(const struct FJackLDT_Achievement& Achievement, class UObject* __WorldContext);
	static void GetAchievementStringParameter(const struct FJackLDT_Achievement& Achievement, class UObject* __WorldContext, class FString* Value);
	static void GetAchievementNumericalParameter(const struct FJackLDT_Achievement& Achievement, class UObject* __WorldContext, int32* Value);
	static void AllIslandVisitAchievementCheck(class FName NowMapID, class UObject* __WorldContext);
	static void SetAchievementCompletePafupafu(ENUM_AchievementPafupafu Type, class UObject* __WorldContext);
	static void GetAchievementCompletePafupafuCount(class UObject* __WorldContext, int32* Count, bool* AllComplete);
	static void IsTenkuumajouVisible(class UObject* __WorldContext, bool* Visible);
	static void IsInotinotaijuVisible(class UObject* __WorldContext, bool* Visible);
	static void IsRedStarVisible(class UObject* __WorldContext, bool* Visible);
	static void IsBlackSunVisible(class UObject* __WorldContext, bool* Visible);
	static void ForceAutoSaveAfterCS(class UObject* __WorldContext);
	static void ForceAutoSave(class UObject* __WorldContext);
	static void NotAutoSaveAfterCS(class UObject* __WorldContext);
	static void InitTalkFlag(class FName BookID, class UObject* __WorldContext);
	static void SetShipLost_AtMetubou(bool Lost, class UObject* __WorldContext);
	static void AcquireAchievementDirectName(class FName AchievementName, class UObject* __WorldContext);
	static void GetJoouNoAiTexts(class UObject* __WorldContext, TArray<class FName>* Texts);
	static void GetJoouNoAiProgressText(class UObject* __WorldContext, TArray<class FName>* Text);
	static void CheckBlackDragonAchievement(class UObject* __WorldContext);
	static void OpenRura(const struct FJackLDT_Rura& RuraPointID, bool RuraCheck, class UObject* __WorldContext, bool* NowOpen, class FName* SelectNameID);
	static void ClearRestartPoint(EJackRestartProcessType RestartProcess, class UObject* __WorldContext);
	static void GetWhaleMapStart(class UObject* __WorldContext, struct FJackLDT_MapStart* MapStart);
	static void SetLookAtOffVolumeEnable(class UObject* __WorldContext);
	static void AddFollowingSilviaGuest(TArray<EJackCharacter>& InIDs, class UObject* __WorldContext);
	static void GetSilviaFollowingCharacterIDToFlagName(EJackCharacter InID, class UObject* __WorldContext, class FName* FlagName);
	static void JoinSilviaPartyCharacter(EJackCharacter InID, bool ForceJoin, int32 LeaveIndex, class UObject* __WorldContext, bool* Success, EJackCharacter* LeaveID);
	static void IsValidSilviaFollowingCharacter(EJackCharacter InID, class UObject* __WorldContext, bool* Valid);
	static void IsSaikyouBossAppearance(class UObject* __WorldContext, bool* Visible);
	static void SetSaikyouBossTurnCount(class UObject* __WorldContext, bool* CountUpdate);
	static void IsPerfectSilvia(class UObject* __WorldContext, bool* Perfect);
	static void IsSaikyouBossManyTurnCount(bool LastBattle, class UObject* __WorldContext, bool* ManyTurn);
	static void CalcSilviaRemoveIndex(int32 InIndex, TArray<int32>& JoinIDs, class UObject* __WorldContext, int32* Index_0);
	static void CheckS030MartinaWeapon(class UObject* __WorldContext, bool* Upper);
	static void IsJapanese(class UObject* __WorldContext, bool* Japanese);
	static void IsVoiceJapanese(class UObject* __WorldContext, bool* VoiceJapanese);
	static void IsVoiceMute(class UObject* __WorldContext, bool* VoiveMute);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FLIB_SaveData_C">();
	}
	static class UBP_FLIB_SaveData_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_FLIB_SaveData_C>();
	}
};
static_assert(alignof(UBP_FLIB_SaveData_C) == 0x000008, "Wrong alignment on UBP_FLIB_SaveData_C");
static_assert(sizeof(UBP_FLIB_SaveData_C) == 0x000038, "Wrong size on UBP_FLIB_SaveData_C");

}

