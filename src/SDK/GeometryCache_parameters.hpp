#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GeometryCache

#include "Basic.hpp"

#include "GeometryCache_structs.hpp"


namespace SDK::Params
{

// Function GeometryCache.GeometryCacheActor.GetGeometryCacheComponent
// 0x0008 (0x0008 - 0x0000)
struct GeometryCacheActor_GetGeometryCacheComponent final
{
public:
	class UGeometryCacheComponent*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCacheActor_GetGeometryCacheComponent) == 0x000008, "Wrong alignment on GeometryCacheActor_GetGeometryCacheComponent");
static_assert(sizeof(GeometryCacheActor_GetGeometryCacheComponent) == 0x000008, "Wrong size on GeometryCacheActor_GetGeometryCacheComponent");
static_assert(offsetof(GeometryCacheActor_GetGeometryCacheComponent, ReturnValue) == 0x000000, "Member 'GeometryCacheActor_GetGeometryCacheComponent::ReturnValue' has a wrong offset!");

// Function GeometryCache.GeometryCacheComponent.SetGeometryCache
// 0x0010 (0x0010 - 0x0000)
struct GeometryCacheComponent_SetGeometryCache final
{
public:
	class UGeometryCache*                         NewGeomCache;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryCacheComponent_SetGeometryCache) == 0x000008, "Wrong alignment on GeometryCacheComponent_SetGeometryCache");
static_assert(sizeof(GeometryCacheComponent_SetGeometryCache) == 0x000010, "Wrong size on GeometryCacheComponent_SetGeometryCache");
static_assert(offsetof(GeometryCacheComponent_SetGeometryCache, NewGeomCache) == 0x000000, "Member 'GeometryCacheComponent_SetGeometryCache::NewGeomCache' has a wrong offset!");
static_assert(offsetof(GeometryCacheComponent_SetGeometryCache, ReturnValue) == 0x000008, "Member 'GeometryCacheComponent_SetGeometryCache::ReturnValue' has a wrong offset!");

// Function GeometryCache.GeometryCacheComponent.SetLooping
// 0x0001 (0x0001 - 0x0000)
struct GeometryCacheComponent_SetLooping final
{
public:
	bool                                          bNewLooping;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCacheComponent_SetLooping) == 0x000001, "Wrong alignment on GeometryCacheComponent_SetLooping");
static_assert(sizeof(GeometryCacheComponent_SetLooping) == 0x000001, "Wrong size on GeometryCacheComponent_SetLooping");
static_assert(offsetof(GeometryCacheComponent_SetLooping, bNewLooping) == 0x000000, "Member 'GeometryCacheComponent_SetLooping::bNewLooping' has a wrong offset!");

// Function GeometryCache.GeometryCacheComponent.SetPlaybackSpeed
// 0x0004 (0x0004 - 0x0000)
struct GeometryCacheComponent_SetPlaybackSpeed final
{
public:
	float                                         NewPlaybackSpeed;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCacheComponent_SetPlaybackSpeed) == 0x000004, "Wrong alignment on GeometryCacheComponent_SetPlaybackSpeed");
static_assert(sizeof(GeometryCacheComponent_SetPlaybackSpeed) == 0x000004, "Wrong size on GeometryCacheComponent_SetPlaybackSpeed");
static_assert(offsetof(GeometryCacheComponent_SetPlaybackSpeed, NewPlaybackSpeed) == 0x000000, "Member 'GeometryCacheComponent_SetPlaybackSpeed::NewPlaybackSpeed' has a wrong offset!");

// Function GeometryCache.GeometryCacheComponent.SetStartTimeOffset
// 0x0004 (0x0004 - 0x0000)
struct GeometryCacheComponent_SetStartTimeOffset final
{
public:
	float                                         NewStartTimeOffset;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCacheComponent_SetStartTimeOffset) == 0x000004, "Wrong alignment on GeometryCacheComponent_SetStartTimeOffset");
static_assert(sizeof(GeometryCacheComponent_SetStartTimeOffset) == 0x000004, "Wrong size on GeometryCacheComponent_SetStartTimeOffset");
static_assert(offsetof(GeometryCacheComponent_SetStartTimeOffset, NewStartTimeOffset) == 0x000000, "Member 'GeometryCacheComponent_SetStartTimeOffset::NewStartTimeOffset' has a wrong offset!");

// Function GeometryCache.GeometryCacheComponent.GetPlaybackSpeed
// 0x0004 (0x0004 - 0x0000)
struct GeometryCacheComponent_GetPlaybackSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCacheComponent_GetPlaybackSpeed) == 0x000004, "Wrong alignment on GeometryCacheComponent_GetPlaybackSpeed");
static_assert(sizeof(GeometryCacheComponent_GetPlaybackSpeed) == 0x000004, "Wrong size on GeometryCacheComponent_GetPlaybackSpeed");
static_assert(offsetof(GeometryCacheComponent_GetPlaybackSpeed, ReturnValue) == 0x000000, "Member 'GeometryCacheComponent_GetPlaybackSpeed::ReturnValue' has a wrong offset!");

// Function GeometryCache.GeometryCacheComponent.GetStartTimeOffset
// 0x0004 (0x0004 - 0x0000)
struct GeometryCacheComponent_GetStartTimeOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCacheComponent_GetStartTimeOffset) == 0x000004, "Wrong alignment on GeometryCacheComponent_GetStartTimeOffset");
static_assert(sizeof(GeometryCacheComponent_GetStartTimeOffset) == 0x000004, "Wrong size on GeometryCacheComponent_GetStartTimeOffset");
static_assert(offsetof(GeometryCacheComponent_GetStartTimeOffset, ReturnValue) == 0x000000, "Member 'GeometryCacheComponent_GetStartTimeOffset::ReturnValue' has a wrong offset!");

// Function GeometryCache.GeometryCacheComponent.IsLooping
// 0x0001 (0x0001 - 0x0000)
struct GeometryCacheComponent_IsLooping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCacheComponent_IsLooping) == 0x000001, "Wrong alignment on GeometryCacheComponent_IsLooping");
static_assert(sizeof(GeometryCacheComponent_IsLooping) == 0x000001, "Wrong size on GeometryCacheComponent_IsLooping");
static_assert(offsetof(GeometryCacheComponent_IsLooping, ReturnValue) == 0x000000, "Member 'GeometryCacheComponent_IsLooping::ReturnValue' has a wrong offset!");

// Function GeometryCache.GeometryCacheComponent.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct GeometryCacheComponent_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCacheComponent_IsPlaying) == 0x000001, "Wrong alignment on GeometryCacheComponent_IsPlaying");
static_assert(sizeof(GeometryCacheComponent_IsPlaying) == 0x000001, "Wrong size on GeometryCacheComponent_IsPlaying");
static_assert(offsetof(GeometryCacheComponent_IsPlaying, ReturnValue) == 0x000000, "Member 'GeometryCacheComponent_IsPlaying::ReturnValue' has a wrong offset!");

// Function GeometryCache.GeometryCacheComponent.IsPlayingReversed
// 0x0001 (0x0001 - 0x0000)
struct GeometryCacheComponent_IsPlayingReversed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCacheComponent_IsPlayingReversed) == 0x000001, "Wrong alignment on GeometryCacheComponent_IsPlayingReversed");
static_assert(sizeof(GeometryCacheComponent_IsPlayingReversed) == 0x000001, "Wrong size on GeometryCacheComponent_IsPlayingReversed");
static_assert(offsetof(GeometryCacheComponent_IsPlayingReversed, ReturnValue) == 0x000000, "Member 'GeometryCacheComponent_IsPlayingReversed::ReturnValue' has a wrong offset!");

// Function GeometryCache.GeometryCacheTrack_FlipbookAnimation.AddMeshSample
// 0x0058 (0x0058 - 0x0000)
struct GeometryCacheTrack_FlipbookAnimation_AddMeshSample final
{
public:
	struct FGeometryCacheMeshData                 MeshData;                                          // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         SampleTime;                                        // 0x0050(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryCacheTrack_FlipbookAnimation_AddMeshSample) == 0x000008, "Wrong alignment on GeometryCacheTrack_FlipbookAnimation_AddMeshSample");
static_assert(sizeof(GeometryCacheTrack_FlipbookAnimation_AddMeshSample) == 0x000058, "Wrong size on GeometryCacheTrack_FlipbookAnimation_AddMeshSample");
static_assert(offsetof(GeometryCacheTrack_FlipbookAnimation_AddMeshSample, MeshData) == 0x000000, "Member 'GeometryCacheTrack_FlipbookAnimation_AddMeshSample::MeshData' has a wrong offset!");
static_assert(offsetof(GeometryCacheTrack_FlipbookAnimation_AddMeshSample, SampleTime) == 0x000050, "Member 'GeometryCacheTrack_FlipbookAnimation_AddMeshSample::SampleTime' has a wrong offset!");

// Function GeometryCache.GeometryCacheTrack_TransformAnimation.SetMesh
// 0x0050 (0x0050 - 0x0000)
struct GeometryCacheTrack_TransformAnimation_SetMesh final
{
public:
	struct FGeometryCacheMeshData                 NewMeshData;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCacheTrack_TransformAnimation_SetMesh) == 0x000008, "Wrong alignment on GeometryCacheTrack_TransformAnimation_SetMesh");
static_assert(sizeof(GeometryCacheTrack_TransformAnimation_SetMesh) == 0x000050, "Wrong size on GeometryCacheTrack_TransformAnimation_SetMesh");
static_assert(offsetof(GeometryCacheTrack_TransformAnimation_SetMesh, NewMeshData) == 0x000000, "Member 'GeometryCacheTrack_TransformAnimation_SetMesh::NewMeshData' has a wrong offset!");

// Function GeometryCache.GeometryCacheTrack_TransformGroupAnimation.SetMesh
// 0x0050 (0x0050 - 0x0000)
struct GeometryCacheTrack_TransformGroupAnimation_SetMesh final
{
public:
	struct FGeometryCacheMeshData                 NewMeshData;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCacheTrack_TransformGroupAnimation_SetMesh) == 0x000008, "Wrong alignment on GeometryCacheTrack_TransformGroupAnimation_SetMesh");
static_assert(sizeof(GeometryCacheTrack_TransformGroupAnimation_SetMesh) == 0x000050, "Wrong size on GeometryCacheTrack_TransformGroupAnimation_SetMesh");
static_assert(offsetof(GeometryCacheTrack_TransformGroupAnimation_SetMesh, NewMeshData) == 0x000000, "Member 'GeometryCacheTrack_TransformGroupAnimation_SetMesh::NewMeshData' has a wrong offset!");

}

