#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_IF_GameEvent

#include "Basic.hpp"

#include "JackGame_structs.hpp"


namespace SDK::Params
{

// Function BP_IF_GameEvent.BP_IF_GameEvent_C.Game-EndCamp
// 0x0001 (0x0001 - 0x0000)
struct BP_IF_GameEvent_C_GameMinusEndCamp final
{
public:
	bool                                          bpp__IsMapJump__pf;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_IF_GameEvent_C_GameMinusEndCamp) == 0x000001, "Wrong alignment on BP_IF_GameEvent_C_GameMinusEndCamp");
static_assert(sizeof(BP_IF_GameEvent_C_GameMinusEndCamp) == 0x000001, "Wrong size on BP_IF_GameEvent_C_GameMinusEndCamp");
static_assert(offsetof(BP_IF_GameEvent_C_GameMinusEndCamp, bpp__IsMapJump__pf) == 0x000000, "Member 'BP_IF_GameEvent_C_GameMinusEndCamp::bpp__IsMapJump__pf' has a wrong offset!");

// Function BP_IF_GameEvent.BP_IF_GameEvent_C.Game-EndEnvSoundForCamp
// 0x0008 (0x0008 - 0x0000)
struct BP_IF_GameEvent_C_GameMinusEndEnvSoundForCamp final
{
public:
	float                                         bpp__FadeTime__pf;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__IsNight__pf;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_IF_GameEvent_C_GameMinusEndEnvSoundForCamp) == 0x000004, "Wrong alignment on BP_IF_GameEvent_C_GameMinusEndEnvSoundForCamp");
static_assert(sizeof(BP_IF_GameEvent_C_GameMinusEndEnvSoundForCamp) == 0x000008, "Wrong size on BP_IF_GameEvent_C_GameMinusEndEnvSoundForCamp");
static_assert(offsetof(BP_IF_GameEvent_C_GameMinusEndEnvSoundForCamp, bpp__FadeTime__pf) == 0x000000, "Member 'BP_IF_GameEvent_C_GameMinusEndEnvSoundForCamp::bpp__FadeTime__pf' has a wrong offset!");
static_assert(offsetof(BP_IF_GameEvent_C_GameMinusEndEnvSoundForCamp, bpp__IsNight__pf) == 0x000004, "Member 'BP_IF_GameEvent_C_GameMinusEndEnvSoundForCamp::bpp__IsNight__pf' has a wrong offset!");

// Function BP_IF_GameEvent.BP_IF_GameEvent_C.Game-MapJumpFadeInStart
// 0x0010 (0x0010 - 0x0000)
struct BP_IF_GameEvent_C_GameMinusMapJumpFadeInStart final
{
public:
	class FName                                   bpp__MapID__pf;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BGMID__pf;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_IF_GameEvent_C_GameMinusMapJumpFadeInStart) == 0x000004, "Wrong alignment on BP_IF_GameEvent_C_GameMinusMapJumpFadeInStart");
static_assert(sizeof(BP_IF_GameEvent_C_GameMinusMapJumpFadeInStart) == 0x000010, "Wrong size on BP_IF_GameEvent_C_GameMinusMapJumpFadeInStart");
static_assert(offsetof(BP_IF_GameEvent_C_GameMinusMapJumpFadeInStart, bpp__MapID__pf) == 0x000000, "Member 'BP_IF_GameEvent_C_GameMinusMapJumpFadeInStart::bpp__MapID__pf' has a wrong offset!");
static_assert(offsetof(BP_IF_GameEvent_C_GameMinusMapJumpFadeInStart, bpp__BGMID__pf) == 0x000008, "Member 'BP_IF_GameEvent_C_GameMinusMapJumpFadeInStart::bpp__BGMID__pf' has a wrong offset!");

// Function BP_IF_GameEvent.BP_IF_GameEvent_C.Game-StartEnvSoundForCamp
// 0x0008 (0x0008 - 0x0000)
struct BP_IF_GameEvent_C_GameMinusStartEnvSoundForCamp final
{
public:
	float                                         bpp__FadeTime__pf;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__IsNight__pf;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_IF_GameEvent_C_GameMinusStartEnvSoundForCamp) == 0x000004, "Wrong alignment on BP_IF_GameEvent_C_GameMinusStartEnvSoundForCamp");
static_assert(sizeof(BP_IF_GameEvent_C_GameMinusStartEnvSoundForCamp) == 0x000008, "Wrong size on BP_IF_GameEvent_C_GameMinusStartEnvSoundForCamp");
static_assert(offsetof(BP_IF_GameEvent_C_GameMinusStartEnvSoundForCamp, bpp__FadeTime__pf) == 0x000000, "Member 'BP_IF_GameEvent_C_GameMinusStartEnvSoundForCamp::bpp__FadeTime__pf' has a wrong offset!");
static_assert(offsetof(BP_IF_GameEvent_C_GameMinusStartEnvSoundForCamp, bpp__IsNight__pf) == 0x000004, "Member 'BP_IF_GameEvent_C_GameMinusStartEnvSoundForCamp::bpp__IsNight__pf' has a wrong offset!");

// Function BP_IF_GameEvent.BP_IF_GameEvent_C.Game - CasinoNpcScheduleEnd
// 0x0008 (0x0008 - 0x0000)
struct BP_IF_GameEvent_C_Game_Minus_CasinoNpcScheduleEnd final
{
public:
	class AJackScheduledNPC*                      bpp__TargetNpc__pf;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_IF_GameEvent_C_Game_Minus_CasinoNpcScheduleEnd) == 0x000008, "Wrong alignment on BP_IF_GameEvent_C_Game_Minus_CasinoNpcScheduleEnd");
static_assert(sizeof(BP_IF_GameEvent_C_Game_Minus_CasinoNpcScheduleEnd) == 0x000008, "Wrong size on BP_IF_GameEvent_C_Game_Minus_CasinoNpcScheduleEnd");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_CasinoNpcScheduleEnd, bpp__TargetNpc__pf) == 0x000000, "Member 'BP_IF_GameEvent_C_Game_Minus_CasinoNpcScheduleEnd::bpp__TargetNpc__pf' has a wrong offset!");

// Function BP_IF_GameEvent.BP_IF_GameEvent_C.Game - ChangeEnvSoundFromCS
// 0x0010 (0x0010 - 0x0000)
struct BP_IF_GameEvent_C_Game_Minus_ChangeEnvSoundFromCS final
{
public:
	bool                                          bpp__IsNight__pf;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__CSxID__pfT;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_IF_GameEvent_C_Game_Minus_ChangeEnvSoundFromCS) == 0x000004, "Wrong alignment on BP_IF_GameEvent_C_Game_Minus_ChangeEnvSoundFromCS");
static_assert(sizeof(BP_IF_GameEvent_C_Game_Minus_ChangeEnvSoundFromCS) == 0x000010, "Wrong size on BP_IF_GameEvent_C_Game_Minus_ChangeEnvSoundFromCS");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_ChangeEnvSoundFromCS, bpp__IsNight__pf) == 0x000000, "Member 'BP_IF_GameEvent_C_Game_Minus_ChangeEnvSoundFromCS::bpp__IsNight__pf' has a wrong offset!");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_ChangeEnvSoundFromCS, bpp__CSxID__pfT) == 0x000008, "Member 'BP_IF_GameEvent_C_Game_Minus_ChangeEnvSoundFromCS::bpp__CSxID__pfT' has a wrong offset!");

// Function BP_IF_GameEvent.BP_IF_GameEvent_C.Game - ChangeTImeZone
// 0x0001 (0x0001 - 0x0000)
struct BP_IF_GameEvent_C_Game_Minus_ChangeTImeZone final
{
public:
	bool                                          bpp__IsNight__pf;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_IF_GameEvent_C_Game_Minus_ChangeTImeZone) == 0x000001, "Wrong alignment on BP_IF_GameEvent_C_Game_Minus_ChangeTImeZone");
static_assert(sizeof(BP_IF_GameEvent_C_Game_Minus_ChangeTImeZone) == 0x000001, "Wrong size on BP_IF_GameEvent_C_Game_Minus_ChangeTImeZone");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_ChangeTImeZone, bpp__IsNight__pf) == 0x000000, "Member 'BP_IF_GameEvent_C_Game_Minus_ChangeTImeZone::bpp__IsNight__pf' has a wrong offset!");

// Function BP_IF_GameEvent.BP_IF_GameEvent_C.Game - ChangeTimeZoneToField
// 0x0008 (0x0008 - 0x0000)
struct BP_IF_GameEvent_C_Game_Minus_ChangeTimeZoneToField final
{
public:
	bool                                          bpp__DefaultFadeTime__pf;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         bpp__FadeTime__pf;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_IF_GameEvent_C_Game_Minus_ChangeTimeZoneToField) == 0x000004, "Wrong alignment on BP_IF_GameEvent_C_Game_Minus_ChangeTimeZoneToField");
static_assert(sizeof(BP_IF_GameEvent_C_Game_Minus_ChangeTimeZoneToField) == 0x000008, "Wrong size on BP_IF_GameEvent_C_Game_Minus_ChangeTimeZoneToField");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_ChangeTimeZoneToField, bpp__DefaultFadeTime__pf) == 0x000000, "Member 'BP_IF_GameEvent_C_Game_Minus_ChangeTimeZoneToField::bpp__DefaultFadeTime__pf' has a wrong offset!");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_ChangeTimeZoneToField, bpp__FadeTime__pf) == 0x000004, "Member 'BP_IF_GameEvent_C_Game_Minus_ChangeTimeZoneToField::bpp__FadeTime__pf' has a wrong offset!");

// Function BP_IF_GameEvent.BP_IF_GameEvent_C.Game - CSBeginFadeAfter
// 0x0001 (0x0001 - 0x0000)
struct BP_IF_GameEvent_C_Game_Minus_CSBeginFadeAfter final
{
public:
	bool                                          bpp__BGMChange__pf;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_IF_GameEvent_C_Game_Minus_CSBeginFadeAfter) == 0x000001, "Wrong alignment on BP_IF_GameEvent_C_Game_Minus_CSBeginFadeAfter");
static_assert(sizeof(BP_IF_GameEvent_C_Game_Minus_CSBeginFadeAfter) == 0x000001, "Wrong size on BP_IF_GameEvent_C_Game_Minus_CSBeginFadeAfter");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_CSBeginFadeAfter, bpp__BGMChange__pf) == 0x000000, "Member 'BP_IF_GameEvent_C_Game_Minus_CSBeginFadeAfter::bpp__BGMChange__pf' has a wrong offset!");

// Function BP_IF_GameEvent.BP_IF_GameEvent_C.Game - CSBeginFadeBefore
// 0x0010 (0x0010 - 0x0000)
struct BP_IF_GameEvent_C_Game_Minus_CSBeginFadeBefore final
{
public:
	class FName                                   bpp__CSID__pf;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__IsMemories__pf;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_IF_GameEvent_C_Game_Minus_CSBeginFadeBefore) == 0x000004, "Wrong alignment on BP_IF_GameEvent_C_Game_Minus_CSBeginFadeBefore");
static_assert(sizeof(BP_IF_GameEvent_C_Game_Minus_CSBeginFadeBefore) == 0x000010, "Wrong size on BP_IF_GameEvent_C_Game_Minus_CSBeginFadeBefore");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_CSBeginFadeBefore, bpp__CSID__pf) == 0x000000, "Member 'BP_IF_GameEvent_C_Game_Minus_CSBeginFadeBefore::bpp__CSID__pf' has a wrong offset!");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_CSBeginFadeBefore, bpp__IsMemories__pf) == 0x000008, "Member 'BP_IF_GameEvent_C_Game_Minus_CSBeginFadeBefore::bpp__IsMemories__pf' has a wrong offset!");

// Function BP_IF_GameEvent.BP_IF_GameEvent_C.Game - CSEndFadeBefore
// 0x0002 (0x0002 - 0x0000)
struct BP_IF_GameEvent_C_Game_Minus_CSEndFadeBefore final
{
public:
	bool                                          bpp__IsMemories__pf;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__EnvSound__pf;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_IF_GameEvent_C_Game_Minus_CSEndFadeBefore) == 0x000001, "Wrong alignment on BP_IF_GameEvent_C_Game_Minus_CSEndFadeBefore");
static_assert(sizeof(BP_IF_GameEvent_C_Game_Minus_CSEndFadeBefore) == 0x000002, "Wrong size on BP_IF_GameEvent_C_Game_Minus_CSEndFadeBefore");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_CSEndFadeBefore, bpp__IsMemories__pf) == 0x000000, "Member 'BP_IF_GameEvent_C_Game_Minus_CSEndFadeBefore::bpp__IsMemories__pf' has a wrong offset!");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_CSEndFadeBefore, bpp__EnvSound__pf) == 0x000001, "Member 'BP_IF_GameEvent_C_Game_Minus_CSEndFadeBefore::bpp__EnvSound__pf' has a wrong offset!");

// Function BP_IF_GameEvent.BP_IF_GameEvent_C.Game - CSMapJump
// 0x0010 (0x0010 - 0x0000)
struct BP_IF_GameEvent_C_Game_Minus_CSMapJump final
{
public:
	class FName                                   bpp__InMapID__pf;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__InBGMID__pf;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_IF_GameEvent_C_Game_Minus_CSMapJump) == 0x000004, "Wrong alignment on BP_IF_GameEvent_C_Game_Minus_CSMapJump");
static_assert(sizeof(BP_IF_GameEvent_C_Game_Minus_CSMapJump) == 0x000010, "Wrong size on BP_IF_GameEvent_C_Game_Minus_CSMapJump");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_CSMapJump, bpp__InMapID__pf) == 0x000000, "Member 'BP_IF_GameEvent_C_Game_Minus_CSMapJump::bpp__InMapID__pf' has a wrong offset!");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_CSMapJump, bpp__InBGMID__pf) == 0x000008, "Member 'BP_IF_GameEvent_C_Game_Minus_CSMapJump::bpp__InBGMID__pf' has a wrong offset!");

// Function BP_IF_GameEvent.BP_IF_GameEvent_C.Game - CutSceneSkip
// 0x0004 (0x0004 - 0x0000)
struct BP_IF_GameEvent_C_Game_Minus_CutSceneSkip final
{
public:
	float                                         bpp__fadeoutTime__pf;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_IF_GameEvent_C_Game_Minus_CutSceneSkip) == 0x000004, "Wrong alignment on BP_IF_GameEvent_C_Game_Minus_CutSceneSkip");
static_assert(sizeof(BP_IF_GameEvent_C_Game_Minus_CutSceneSkip) == 0x000004, "Wrong size on BP_IF_GameEvent_C_Game_Minus_CutSceneSkip");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_CutSceneSkip, bpp__fadeoutTime__pf) == 0x000000, "Member 'BP_IF_GameEvent_C_Game_Minus_CutSceneSkip::bpp__fadeoutTime__pf' has a wrong offset!");

// Function BP_IF_GameEvent.BP_IF_GameEvent_C.Game - D90_RoomEnv_Update
// 0x0008 (0x0008 - 0x0000)
struct BP_IF_GameEvent_C_Game_Minus_D90_RoomEnv_Update final
{
public:
	class FName                                   bpp__ChangeMapID__pf;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_IF_GameEvent_C_Game_Minus_D90_RoomEnv_Update) == 0x000004, "Wrong alignment on BP_IF_GameEvent_C_Game_Minus_D90_RoomEnv_Update");
static_assert(sizeof(BP_IF_GameEvent_C_Game_Minus_D90_RoomEnv_Update) == 0x000008, "Wrong size on BP_IF_GameEvent_C_Game_Minus_D90_RoomEnv_Update");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_D90_RoomEnv_Update, bpp__ChangeMapID__pf) == 0x000000, "Member 'BP_IF_GameEvent_C_Game_Minus_D90_RoomEnv_Update::bpp__ChangeMapID__pf' has a wrong offset!");

// Function BP_IF_GameEvent.BP_IF_GameEvent_C.Game - D90GetLocationFrom
// 0x0008 (0x0008 - 0x0000)
struct BP_IF_GameEvent_C_Game_Minus_D90GetLocationFrom final
{
public:
	class FName                                   bpp__LocationName__pf;                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_IF_GameEvent_C_Game_Minus_D90GetLocationFrom) == 0x000004, "Wrong alignment on BP_IF_GameEvent_C_Game_Minus_D90GetLocationFrom");
static_assert(sizeof(BP_IF_GameEvent_C_Game_Minus_D90GetLocationFrom) == 0x000008, "Wrong size on BP_IF_GameEvent_C_Game_Minus_D90GetLocationFrom");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_D90GetLocationFrom, bpp__LocationName__pf) == 0x000000, "Member 'BP_IF_GameEvent_C_Game_Minus_D90GetLocationFrom::bpp__LocationName__pf' has a wrong offset!");

// Function BP_IF_GameEvent.BP_IF_GameEvent_C.Game - FinishMapChange
// 0x0008 (0x0008 - 0x0000)
struct BP_IF_GameEvent_C_Game_Minus_FinishMapChange final
{
public:
	class FName                                   bpp__MapxID__pfT;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_IF_GameEvent_C_Game_Minus_FinishMapChange) == 0x000004, "Wrong alignment on BP_IF_GameEvent_C_Game_Minus_FinishMapChange");
static_assert(sizeof(BP_IF_GameEvent_C_Game_Minus_FinishMapChange) == 0x000008, "Wrong size on BP_IF_GameEvent_C_Game_Minus_FinishMapChange");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_FinishMapChange, bpp__MapxID__pfT) == 0x000000, "Member 'BP_IF_GameEvent_C_Game_Minus_FinishMapChange::bpp__MapxID__pfT' has a wrong offset!");

// Function BP_IF_GameEvent.BP_IF_GameEvent_C.Game - MapChangeFinished
// 0x0010 (0x0010 - 0x0000)
struct BP_IF_GameEvent_C_Game_Minus_MapChangeFinished final
{
public:
	class FName                                   bpp__MapxID__pfT;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BGMxID__pfT;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_IF_GameEvent_C_Game_Minus_MapChangeFinished) == 0x000004, "Wrong alignment on BP_IF_GameEvent_C_Game_Minus_MapChangeFinished");
static_assert(sizeof(BP_IF_GameEvent_C_Game_Minus_MapChangeFinished) == 0x000010, "Wrong size on BP_IF_GameEvent_C_Game_Minus_MapChangeFinished");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_MapChangeFinished, bpp__MapxID__pfT) == 0x000000, "Member 'BP_IF_GameEvent_C_Game_Minus_MapChangeFinished::bpp__MapxID__pfT' has a wrong offset!");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_MapChangeFinished, bpp__BGMxID__pfT) == 0x000008, "Member 'BP_IF_GameEvent_C_Game_Minus_MapChangeFinished::bpp__BGMxID__pfT' has a wrong offset!");

// Function BP_IF_GameEvent.BP_IF_GameEvent_C.Game - PlayJingle
// 0x0001 (0x0001 - 0x0000)
struct BP_IF_GameEvent_C_Game_Minus_PlayJingle final
{
public:
	uint8                                         bpp__JinglexType__pfT;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_IF_GameEvent_C_Game_Minus_PlayJingle) == 0x000001, "Wrong alignment on BP_IF_GameEvent_C_Game_Minus_PlayJingle");
static_assert(sizeof(BP_IF_GameEvent_C_Game_Minus_PlayJingle) == 0x000001, "Wrong size on BP_IF_GameEvent_C_Game_Minus_PlayJingle");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_PlayJingle, bpp__JinglexType__pfT) == 0x000000, "Member 'BP_IF_GameEvent_C_Game_Minus_PlayJingle::bpp__JinglexType__pfT' has a wrong offset!");

// Function BP_IF_GameEvent.BP_IF_GameEvent_C.Game - TravelMap
// 0x0001 (0x0001 - 0x0000)
struct BP_IF_GameEvent_C_Game_Minus_TravelMap final
{
public:
	EJackMapChangeSound                           bpp__PlayMapChangeSound__pf;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_IF_GameEvent_C_Game_Minus_TravelMap) == 0x000001, "Wrong alignment on BP_IF_GameEvent_C_Game_Minus_TravelMap");
static_assert(sizeof(BP_IF_GameEvent_C_Game_Minus_TravelMap) == 0x000001, "Wrong size on BP_IF_GameEvent_C_Game_Minus_TravelMap");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_TravelMap, bpp__PlayMapChangeSound__pf) == 0x000000, "Member 'BP_IF_GameEvent_C_Game_Minus_TravelMap::bpp__PlayMapChangeSound__pf' has a wrong offset!");

// Function BP_IF_GameEvent.BP_IF_GameEvent_C.Game - UpdateWind
// 0x0001 (0x0001 - 0x0000)
struct BP_IF_GameEvent_C_Game_Minus_UpdateWind final
{
public:
	EJackWorldWindLevel                           bpp__WindForce__pf;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_IF_GameEvent_C_Game_Minus_UpdateWind) == 0x000001, "Wrong alignment on BP_IF_GameEvent_C_Game_Minus_UpdateWind");
static_assert(sizeof(BP_IF_GameEvent_C_Game_Minus_UpdateWind) == 0x000001, "Wrong size on BP_IF_GameEvent_C_Game_Minus_UpdateWind");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_UpdateWind, bpp__WindForce__pf) == 0x000000, "Member 'BP_IF_GameEvent_C_Game_Minus_UpdateWind::bpp__WindForce__pf' has a wrong offset!");

// Function BP_IF_GameEvent.BP_IF_GameEvent_C.Game - WeatherChange
// 0x0001 (0x0001 - 0x0000)
struct BP_IF_GameEvent_C_Game_Minus_WeatherChange final
{
public:
	EJackWorldWeather                             bpp__WeatherPtn__pf;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_IF_GameEvent_C_Game_Minus_WeatherChange) == 0x000001, "Wrong alignment on BP_IF_GameEvent_C_Game_Minus_WeatherChange");
static_assert(sizeof(BP_IF_GameEvent_C_Game_Minus_WeatherChange) == 0x000001, "Wrong size on BP_IF_GameEvent_C_Game_Minus_WeatherChange");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_WeatherChange, bpp__WeatherPtn__pf) == 0x000000, "Member 'BP_IF_GameEvent_C_Game_Minus_WeatherChange::bpp__WeatherPtn__pf' has a wrong offset!");

// Function BP_IF_GameEvent.BP_IF_GameEvent_C.Game - WeatherChange_Integration
// 0x0002 (0x0002 - 0x0000)
struct BP_IF_GameEvent_C_Game_Minus_WeatherChange_Integration final
{
public:
	EJackWorldWeather                             bpp__WeatherPtn__pf;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           bpp__WindForce__pf;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_IF_GameEvent_C_Game_Minus_WeatherChange_Integration) == 0x000001, "Wrong alignment on BP_IF_GameEvent_C_Game_Minus_WeatherChange_Integration");
static_assert(sizeof(BP_IF_GameEvent_C_Game_Minus_WeatherChange_Integration) == 0x000002, "Wrong size on BP_IF_GameEvent_C_Game_Minus_WeatherChange_Integration");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_WeatherChange_Integration, bpp__WeatherPtn__pf) == 0x000000, "Member 'BP_IF_GameEvent_C_Game_Minus_WeatherChange_Integration::bpp__WeatherPtn__pf' has a wrong offset!");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_WeatherChange_Integration, bpp__WindForce__pf) == 0x000001, "Member 'BP_IF_GameEvent_C_Game_Minus_WeatherChange_Integration::bpp__WindForce__pf' has a wrong offset!");

// Function BP_IF_GameEvent.BP_IF_GameEvent_C.Game - WeatherEffectAvtive
// 0x0001 (0x0001 - 0x0000)
struct BP_IF_GameEvent_C_Game_Minus_WeatherEffectAvtive final
{
public:
	EJackWorldWeather                             bpp__Weather__pf;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_IF_GameEvent_C_Game_Minus_WeatherEffectAvtive) == 0x000001, "Wrong alignment on BP_IF_GameEvent_C_Game_Minus_WeatherEffectAvtive");
static_assert(sizeof(BP_IF_GameEvent_C_Game_Minus_WeatherEffectAvtive) == 0x000001, "Wrong size on BP_IF_GameEvent_C_Game_Minus_WeatherEffectAvtive");
static_assert(offsetof(BP_IF_GameEvent_C_Game_Minus_WeatherEffectAvtive, bpp__Weather__pf) == 0x000000, "Member 'BP_IF_GameEvent_C_Game_Minus_WeatherEffectAvtive::bpp__Weather__pf' has a wrong offset!");

}

