#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DoorBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "JackGame_structs.hpp"
#include "ENUM_InteractRidingVehicleMessage_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DoorBase.BP_DoorBase_C
// 0x0208 (0x05A0 - 0x0398)
class ABP_DoorBase_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0398(0x0008)(Transient, DuplicateTransient)
	class UChildActorComponent*                   Child_NavModifire;                                 // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       PlayerOverlapSphere;                               // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BlockClosingVolume;                                // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        OutsideArrow;                                      // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        OutsideNPCMove;                                    // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          OutsideTriggerBox;                                 // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        OutsideRoot;                                       // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        InsideArrow;                                       // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        InsideNPCMove;                                     // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          InsideTriggerBox;                                  // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        InsideRoot;                                        // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UJackInteractiveActorComponent*         InteractiveActorComponent;                         // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 DoorMesh;                                          // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Inside_Door_Animation_On_Open;                     // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Inside_Door_Animation_On_Close;                    // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Outside_Door_Animation_On_Open;                    // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Outside_Door_Animation_On_Close;                   // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Closed;                                            // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LockedInside;                                      // 0x0439(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43A[0x6];                                      // 0x043A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackLDT_GameFlagDataGimmick           LockInsideFlagName;                                // 0x0440(0x0010)(Edit, BlueprintVisible, NoDestructor)
	bool                                          LockedOutside;                                     // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Closing;                                           // 0x0451(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is_Opened_Inside;                                  // 0x0452(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is_Opened_Outside;                                 // 0x0453(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_454[0x4];                                      // 0x0454(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AJackCharacter*                         Opened_Character;                                  // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Character_AnimMontage_Name_On_Open_Inside;         // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Character_AnimMontage_Name_On_Open_Outside;        // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Character_AnimMontage_Name_On_Locked_Inside;       // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Character_AnimMontage_Name_On_Locked_Outside;      // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Character_AnimMontage_Name_On_Unlock_Inside;       // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Character_AnimMontage_Name_On_Unlock_Outside;      // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InAction;                                          // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInside;                                           // 0x0491(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsOpenedByPlayerCharacter;                         // 0x0492(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_493[0x5];                                      // 0x0493(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackLDT_GameFlagDataGimmick           LockOutsideFlagName;                               // 0x0498(0x0010)(Edit, BlueprintVisible, NoDestructor)
	bool                                          AutoCloseEvenIfOpenedByPlayer;                     // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EJackItem_Key                                 Key;                                               // 0x04A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4AA[0x6];                                      // 0x04AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OnOpenedByPlayerRemoteEventName;                   // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FJackLDT_TextDataGame                  TextID_OnInteraction;                              // 0x04B8(0x0010)(Edit, BlueprintVisible, NoDestructor)
	struct FJackLDT_TextDataGame                  TextID_OnUnlockByUsedKey;                          // 0x04C8(0x0010)(Edit, BlueprintVisible, NoDestructor)
	struct FJackLDT_TextDataGame                  TextID_OnUnlockFromInside;                         // 0x04D8(0x0010)(Edit, BlueprintVisible, NoDestructor)
	struct FJackLDT_TextDataGame                  TextID_OnDontOpenByHadNoKeys;                      // 0x04E8(0x0010)(Edit, BlueprintVisible, NoDestructor)
	class USoundBase*                             DoorOpenSound;                                     // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DoorOpenSoundDelayTime;                            // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_504[0x4];                                      // 0x0504(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             DoorCloseSound;                                    // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DoorCloseSoundDelayTime;                           // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_514[0x4];                                      // 0x0514(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             DoorLockedSound;                                   // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DoorLockedSoundDelayTime;                          // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_524[0x4];                                      // 0x0524(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             DoorUnlockSound;                                   // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DoorUnlockSoundDelayTime;                          // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoCloseEnable;                                   // 0x0534(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_535[0x3];                                      // 0x0535(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackLDT_TextDataGame                  TextID_OnDontOpenByLockedAnotherSide;              // 0x0538(0x0010)(Edit, BlueprintVisible, NoDestructor)
	struct FJackLDT_TextDataGame                  TextID_OnDontOpenByLockedBothSide;                 // 0x0548(0x0010)(Edit, BlueprintVisible, NoDestructor)
	float                                         CloseAnimationLength;                              // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanClose;                                          // 0x055C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WaitCloseWhileOpening;                             // 0x055D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPlayerMarkerOverlapping;                          // 0x055E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55F[0x1];                                      // 0x055F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackLDT_TextDataGame                  TextID_OnUnlockByUsedKey_Mahou;                    // 0x0560(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FJackLDT_TextDataGame                  TextID_OnUnlockByUsedKey_Saigo;                    // 0x0570(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FJackLDT_TextDataGame                  TextID_OnUnlockByUsedKey_Derukadaru;               // 0x0580(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          VehicleAccessMessage;                              // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotInteractDoor;                                   // 0x0591(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_592[0x2];                                      // 0x0592(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DoorCloseSoundDelayTime_AddFor110;                 // 0x0594(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActualDoorCloseSoundDelayTime;                     // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableAutoCloseForIF;                             // 0x059C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_DoorBase(int32 EntryPoint);
	void ForceOpen(bool Inside);
	void SetDoorAllCloseEnable(bool AutoCloseEnable_0);
	void DoorClose();
	void BndEvt__PlayerOverlapSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__PlayerOverlapSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void MapJumpBeginPlay();
	void TryToCloseDoor();
	void ReceiveBeginPlay();
	void BndEvt__BlockClosingVolume_K2Node_ComponentBoundEvent_203_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__OutsideTriggerBox_K2Node_ComponentBoundEvent_144_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__OutsideTriggerBox_K2Node_ComponentBoundEvent_138_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__InteractiveActorComponent_K2Node_ComponentBoundEvent_108_ComponentInteractSignature__DelegateSignature(class AActor* OtherActor);
	void BndEvt__InsideTriggerBox_K2Node_ComponentBoundEvent_52_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__InsideTriggerBox_K2Node_ComponentBoundEvent_39_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void MapJumpEndPlay();
	void EndNijiiroNoEdaEffect();
	void StartNijiiroNoEdaEffect();
	void GuideTreeEnd();
	void SetBattleAfterNav();
	void SetBattleBeforeNav();
	void UserConstructionScript();
	void Character_Movement_Enabled();
	void UnlockInside();
	void UnlockOutside();
	void Close();
	void SetAutoCloseEnable(bool AutoCloseEnable_0);
	void SetDoorVisible(bool Visible, bool Collision);
	void OpenDoorFinish(bool* Ret);
	void SetPauseWithAllComponents(bool bPause);
	void SetInteractDisable(bool bDisable);
	void CompleteInteraction();
	void SetNPCAfterMoveLocation(const struct FVector& NPCAfterMoveLocation);
	void IsOverlappingAnyTriggerBox(class AActor* Other, bool* bOverlapping);
	void SetInteractEnableIfClosed();
	void GetDoorAnimation(bool Inside, bool Open, class UAnimSequence** Animation, bool* bDegree110);
	void ConvertDoorAnimation(class UAnimSequence* InAnimation, class UAnimSequence** OutAnimation, bool* bDegree110);
	void CheckUnlockFlagAfter(bool* Ret);
	void CheckUnlockFlag();
	float CalcDoorCloseSoundDelayTime(bool bDegree110);
	class UAnimMontage* GetUnlockAnimMontage(class AJackCharacter* Self2);
	void SetNavModifierDoor(bool Door_Close);

	class UAnimMontage* GetCharacterAnimMontageToOpenDoor(class AJackCharacter* Character) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DoorBase_C">();
	}
	static class ABP_DoorBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DoorBase_C>();
	}
};
static_assert(alignof(ABP_DoorBase_C) == 0x000008, "Wrong alignment on ABP_DoorBase_C");
static_assert(sizeof(ABP_DoorBase_C) == 0x0005A0, "Wrong size on ABP_DoorBase_C");
static_assert(offsetof(ABP_DoorBase_C, UberGraphFrame) == 0x000398, "Member 'ABP_DoorBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, Child_NavModifire) == 0x0003A0, "Member 'ABP_DoorBase_C::Child_NavModifire' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, PlayerOverlapSphere) == 0x0003A8, "Member 'ABP_DoorBase_C::PlayerOverlapSphere' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, BlockClosingVolume) == 0x0003B0, "Member 'ABP_DoorBase_C::BlockClosingVolume' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, OutsideArrow) == 0x0003B8, "Member 'ABP_DoorBase_C::OutsideArrow' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, OutsideNPCMove) == 0x0003C0, "Member 'ABP_DoorBase_C::OutsideNPCMove' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, OutsideTriggerBox) == 0x0003C8, "Member 'ABP_DoorBase_C::OutsideTriggerBox' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, OutsideRoot) == 0x0003D0, "Member 'ABP_DoorBase_C::OutsideRoot' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, InsideArrow) == 0x0003D8, "Member 'ABP_DoorBase_C::InsideArrow' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, InsideNPCMove) == 0x0003E0, "Member 'ABP_DoorBase_C::InsideNPCMove' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, InsideTriggerBox) == 0x0003E8, "Member 'ABP_DoorBase_C::InsideTriggerBox' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, InsideRoot) == 0x0003F0, "Member 'ABP_DoorBase_C::InsideRoot' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, Billboard) == 0x0003F8, "Member 'ABP_DoorBase_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, InteractiveActorComponent) == 0x000400, "Member 'ABP_DoorBase_C::InteractiveActorComponent' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, DoorMesh) == 0x000408, "Member 'ABP_DoorBase_C::DoorMesh' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, Scene) == 0x000410, "Member 'ABP_DoorBase_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, Inside_Door_Animation_On_Open) == 0x000418, "Member 'ABP_DoorBase_C::Inside_Door_Animation_On_Open' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, Inside_Door_Animation_On_Close) == 0x000420, "Member 'ABP_DoorBase_C::Inside_Door_Animation_On_Close' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, Outside_Door_Animation_On_Open) == 0x000428, "Member 'ABP_DoorBase_C::Outside_Door_Animation_On_Open' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, Outside_Door_Animation_On_Close) == 0x000430, "Member 'ABP_DoorBase_C::Outside_Door_Animation_On_Close' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, Closed) == 0x000438, "Member 'ABP_DoorBase_C::Closed' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, LockedInside) == 0x000439, "Member 'ABP_DoorBase_C::LockedInside' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, LockInsideFlagName) == 0x000440, "Member 'ABP_DoorBase_C::LockInsideFlagName' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, LockedOutside) == 0x000450, "Member 'ABP_DoorBase_C::LockedOutside' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, Closing) == 0x000451, "Member 'ABP_DoorBase_C::Closing' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, Is_Opened_Inside) == 0x000452, "Member 'ABP_DoorBase_C::Is_Opened_Inside' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, Is_Opened_Outside) == 0x000453, "Member 'ABP_DoorBase_C::Is_Opened_Outside' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, Opened_Character) == 0x000458, "Member 'ABP_DoorBase_C::Opened_Character' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, Character_AnimMontage_Name_On_Open_Inside) == 0x000460, "Member 'ABP_DoorBase_C::Character_AnimMontage_Name_On_Open_Inside' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, Character_AnimMontage_Name_On_Open_Outside) == 0x000468, "Member 'ABP_DoorBase_C::Character_AnimMontage_Name_On_Open_Outside' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, Character_AnimMontage_Name_On_Locked_Inside) == 0x000470, "Member 'ABP_DoorBase_C::Character_AnimMontage_Name_On_Locked_Inside' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, Character_AnimMontage_Name_On_Locked_Outside) == 0x000478, "Member 'ABP_DoorBase_C::Character_AnimMontage_Name_On_Locked_Outside' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, Character_AnimMontage_Name_On_Unlock_Inside) == 0x000480, "Member 'ABP_DoorBase_C::Character_AnimMontage_Name_On_Unlock_Inside' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, Character_AnimMontage_Name_On_Unlock_Outside) == 0x000488, "Member 'ABP_DoorBase_C::Character_AnimMontage_Name_On_Unlock_Outside' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, InAction) == 0x000490, "Member 'ABP_DoorBase_C::InAction' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, bInside) == 0x000491, "Member 'ABP_DoorBase_C::bInside' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, IsOpenedByPlayerCharacter) == 0x000492, "Member 'ABP_DoorBase_C::IsOpenedByPlayerCharacter' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, LockOutsideFlagName) == 0x000498, "Member 'ABP_DoorBase_C::LockOutsideFlagName' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, AutoCloseEvenIfOpenedByPlayer) == 0x0004A8, "Member 'ABP_DoorBase_C::AutoCloseEvenIfOpenedByPlayer' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, Key) == 0x0004A9, "Member 'ABP_DoorBase_C::Key' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, OnOpenedByPlayerRemoteEventName) == 0x0004B0, "Member 'ABP_DoorBase_C::OnOpenedByPlayerRemoteEventName' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, TextID_OnInteraction) == 0x0004B8, "Member 'ABP_DoorBase_C::TextID_OnInteraction' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, TextID_OnUnlockByUsedKey) == 0x0004C8, "Member 'ABP_DoorBase_C::TextID_OnUnlockByUsedKey' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, TextID_OnUnlockFromInside) == 0x0004D8, "Member 'ABP_DoorBase_C::TextID_OnUnlockFromInside' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, TextID_OnDontOpenByHadNoKeys) == 0x0004E8, "Member 'ABP_DoorBase_C::TextID_OnDontOpenByHadNoKeys' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, DoorOpenSound) == 0x0004F8, "Member 'ABP_DoorBase_C::DoorOpenSound' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, DoorOpenSoundDelayTime) == 0x000500, "Member 'ABP_DoorBase_C::DoorOpenSoundDelayTime' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, DoorCloseSound) == 0x000508, "Member 'ABP_DoorBase_C::DoorCloseSound' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, DoorCloseSoundDelayTime) == 0x000510, "Member 'ABP_DoorBase_C::DoorCloseSoundDelayTime' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, DoorLockedSound) == 0x000518, "Member 'ABP_DoorBase_C::DoorLockedSound' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, DoorLockedSoundDelayTime) == 0x000520, "Member 'ABP_DoorBase_C::DoorLockedSoundDelayTime' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, DoorUnlockSound) == 0x000528, "Member 'ABP_DoorBase_C::DoorUnlockSound' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, DoorUnlockSoundDelayTime) == 0x000530, "Member 'ABP_DoorBase_C::DoorUnlockSoundDelayTime' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, AutoCloseEnable) == 0x000534, "Member 'ABP_DoorBase_C::AutoCloseEnable' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, TextID_OnDontOpenByLockedAnotherSide) == 0x000538, "Member 'ABP_DoorBase_C::TextID_OnDontOpenByLockedAnotherSide' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, TextID_OnDontOpenByLockedBothSide) == 0x000548, "Member 'ABP_DoorBase_C::TextID_OnDontOpenByLockedBothSide' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, CloseAnimationLength) == 0x000558, "Member 'ABP_DoorBase_C::CloseAnimationLength' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, CanClose) == 0x00055C, "Member 'ABP_DoorBase_C::CanClose' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, WaitCloseWhileOpening) == 0x00055D, "Member 'ABP_DoorBase_C::WaitCloseWhileOpening' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, bPlayerMarkerOverlapping) == 0x00055E, "Member 'ABP_DoorBase_C::bPlayerMarkerOverlapping' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, TextID_OnUnlockByUsedKey_Mahou) == 0x000560, "Member 'ABP_DoorBase_C::TextID_OnUnlockByUsedKey_Mahou' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, TextID_OnUnlockByUsedKey_Saigo) == 0x000570, "Member 'ABP_DoorBase_C::TextID_OnUnlockByUsedKey_Saigo' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, TextID_OnUnlockByUsedKey_Derukadaru) == 0x000580, "Member 'ABP_DoorBase_C::TextID_OnUnlockByUsedKey_Derukadaru' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, VehicleAccessMessage) == 0x000590, "Member 'ABP_DoorBase_C::VehicleAccessMessage' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, NotInteractDoor) == 0x000591, "Member 'ABP_DoorBase_C::NotInteractDoor' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, DoorCloseSoundDelayTime_AddFor110) == 0x000594, "Member 'ABP_DoorBase_C::DoorCloseSoundDelayTime_AddFor110' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, ActualDoorCloseSoundDelayTime) == 0x000598, "Member 'ABP_DoorBase_C::ActualDoorCloseSoundDelayTime' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, DisableAutoCloseForIF) == 0x00059C, "Member 'ABP_DoorBase_C::DisableAutoCloseForIF' has a wrong offset!");

}

