#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Menu_WorldMap_001_modern

#include "Basic.hpp"

#include "JackGame_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.OpenRuraMenuEvent__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_OpenRuraMenuEvent__DelegateSignature final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_OpenRuraMenuEvent__DelegateSignature) == 0x000001, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_OpenRuraMenuEvent__DelegateSignature");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_OpenRuraMenuEvent__DelegateSignature) == 0x000001, "Wrong size on WBP_Menu_WorldMap_001_modern_C_OpenRuraMenuEvent__DelegateSignature");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_OpenRuraMenuEvent__DelegateSignature, bOpen) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_OpenRuraMenuEvent__DelegateSignature::bOpen' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.ExecuteUbergraph_WBP_Menu_WorldMap_001_modern
// 0x0210 (0x0210 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackMessageArgumentData>       Temp_struct_Variable;                              // 0x0008(0x0010)(ZeroConstructor, ReferenceParm)
	class UJackUMGSerifuWindowController*         CallFunc_DisplaySerifuWindowAtTextID_ReturnValue;  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_Menu_WorldMap_List_010_modern_C*   K2Node_CustomEvent_Sender2;                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bRura;                          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGAccessorSaveData*               CallFunc_GetAccessorSaveData_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_CountRuraList_ReturnValue;                // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocalMapOpened_ReturnValue;             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDisplayingSeaSkyMap_bDisplaying;        // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TestsWorldMapState_ReturnValue;           // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0050(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsSeaOrSkyMap_ReturnValue;                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_Menu_WorldMap_List_002_modern_C*   K2Node_CustomEvent_Sender;                         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorSaveDataInRura*         K2Node_CustomEvent_RuraData;                       // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackWorldMapOpenReason                       CallFunc_GetWorldMapOpenReason_ReturnValue;        // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSeaOrSkyMap_ReturnValue2;               // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TestsWorldMapState_ReturnValue2;          // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TestsWorldMapState_ReturnValue3;          // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGMainMapOverlayWidgetBase*       CallFunc_GetMapTextWidget_ReturnValue;             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_Menu_MapText_Z01_1F_01_modern_C*   K2Node_DynamicCast_AsWBP_Menu_Map_Text_Z01_1F_01_Modern; // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGMainMapOverlayWidgetBase*       CallFunc_GetMapTextWidget_ReturnValue2;            // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_Menu_MapText_Z01_1F_01_modern_C*   K2Node_DynamicCast_AsWBP_Menu_Map_Text_Z01_1F_01_Modern2; // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EJackKeys InKeyType, bool bIsPressed)> K2Node_CreateDelegate_OutputDelegate2;             // 0x00C0(0x0010)(ZeroConstructor, NoDestructor)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x00D0(0x003C)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_EventTag;                       // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue2;               // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackKeys                                     K2Node_CustomEvent_InKeyType;                      // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bIsPressed;                     // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x012A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12B[0x5];                                      // 0x012B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue3;               // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_Menu_WorldMap_000_modern_C*        K2Node_DynamicCast_AsWBP_Menu_World_Map_000_Modern; // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGAccessorSaveData*               CallFunc_GetAccessorSaveData_ReturnValue2;         // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAcquiredRura_ReturnValue;               // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetUIDisableCamera_Disabled;              // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_152[0x2];                                      // 0x0152(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0154(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSeaOrSkyMap_ReturnValue3;               // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15D[0x3];                                      // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue4;               // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Sender, bool bValue, class UObject* Payload)> K2Node_CreateDelegate_OutputDelegate3;             // 0x0168(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UObject* Sender, bool bValue, class UObject* Payload)> K2Node_CreateDelegate_OutputDelegate4;             // 0x0178(0x0010)(ZeroConstructor, NoDestructor)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue5;               // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackWorldMapOpenReason                       CallFunc_GetWorldMapOpenReason_ReturnValue2;       // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TestsWorldMapState_ReturnValue4;          // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue2;         // 0x0192(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0193(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue6;               // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TestsWorldMapState_ReturnValue5;          // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNowLoading_ReturnValue;                 // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldDisplayNowLoading_ReturnValue;      // 0x01A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A3[0x5];                                      // 0x01A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName EventTag)>         K2Node_CreateDelegate_OutputDelegate5;             // 0x01A8(0x0010)(ZeroConstructor, NoDestructor)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue7;               // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGSoundSet*                       CallFunc_GetSoundSet_ReturnValue;                  // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDefaultDeltaTime_ReturnValue;          // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue3;                     // 0x01CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue2;     // 0x01CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1CE[0x2];                                      // 0x01CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGAccessorSaveData*               CallFunc_GetAccessorSaveData_ReturnValue3;         // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackWorldMapOpenReason                       CallFunc_GetWorldMapOpenReason_ReturnValue3;       // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAcquiredRura_ReturnValue2;              // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x01DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSeaOrSkyMap_ReturnValue4;               // 0x01DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGWidgetBase*                     CallFunc_PushMenu_ReturnValue;                     // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_Menu_WorldMap_Button_003_modern_C* K2Node_DynamicCast_AsWBP_Menu_World_Map_Button_003_Modern; // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess4;                      // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F9[0x3];                                      // 0x01F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern) == 0x000210, "Wrong size on WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, EntryPoint) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, Temp_struct_Variable) == 0x000008, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_DisplaySerifuWindowAtTextID_ReturnValue) == 0x000018, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_DisplaySerifuWindowAtTextID_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, K2Node_CustomEvent_Sender2) == 0x000020, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::K2Node_CustomEvent_Sender2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, K2Node_CustomEvent_bRura) == 0x000028, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::K2Node_CustomEvent_bRura' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_GetAccessorSaveData_ReturnValue) == 0x000030, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_GetAccessorSaveData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_CountRuraList_ReturnValue) == 0x000038, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_CountRuraList_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_Greater_IntInt_ReturnValue) == 0x00003C, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_GetUMGManager_ReturnValue) == 0x000040, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_IsLocalMapOpened_ReturnValue) == 0x000048, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_IsLocalMapOpened_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_IsDisplayingSeaSkyMap_bDisplaying) == 0x000049, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_IsDisplayingSeaSkyMap_bDisplaying' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_TestsWorldMapState_ReturnValue) == 0x00004A, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_TestsWorldMapState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_BooleanAND_ReturnValue) == 0x00004B, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, K2Node_CreateDelegate_OutputDelegate) == 0x000050, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_IsSeaOrSkyMap_ReturnValue) == 0x000060, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_IsSeaOrSkyMap_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, K2Node_CustomEvent_Sender) == 0x000068, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::K2Node_CustomEvent_Sender' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, K2Node_CustomEvent_RuraData) == 0x000070, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::K2Node_CustomEvent_RuraData' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_GetWorldMapOpenReason_ReturnValue) == 0x000078, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_GetWorldMapOpenReason_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_IsSeaOrSkyMap_ReturnValue2) == 0x000079, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_IsSeaOrSkyMap_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00007A, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_TestsWorldMapState_ReturnValue2) == 0x00007B, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_TestsWorldMapState_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_TestsWorldMapState_ReturnValue3) == 0x00007C, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_TestsWorldMapState_ReturnValue3' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_GetMapTextWidget_ReturnValue) == 0x000080, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_GetMapTextWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_IsValid_ReturnValue) == 0x000088, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, K2Node_DynamicCast_AsWBP_Menu_Map_Text_Z01_1F_01_Modern) == 0x000090, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::K2Node_DynamicCast_AsWBP_Menu_Map_Text_Z01_1F_01_Modern' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, K2Node_DynamicCast_bSuccess) == 0x000098, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_GetMapTextWidget_ReturnValue2) == 0x0000A0, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_GetMapTextWidget_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_IsValid_ReturnValue2) == 0x0000A8, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, K2Node_DynamicCast_AsWBP_Menu_Map_Text_Z01_1F_01_Modern2) == 0x0000B0, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::K2Node_DynamicCast_AsWBP_Menu_Map_Text_Z01_1F_01_Modern2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, K2Node_DynamicCast_bSuccess2) == 0x0000B8, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, K2Node_CreateDelegate_OutputDelegate2) == 0x0000C0, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, K2Node_Event_MyGeometry) == 0x0000D0, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, K2Node_Event_InDeltaTime) == 0x00010C, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, K2Node_CustomEvent_EventTag) == 0x000110, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::K2Node_CustomEvent_EventTag' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, K2Node_SwitchName_CmpSuccess) == 0x000118, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_GetUMGManager_ReturnValue2) == 0x000120, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_GetUMGManager_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, K2Node_CustomEvent_InKeyType) == 0x000128, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::K2Node_CustomEvent_InKeyType' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, K2Node_CustomEvent_bIsPressed) == 0x000129, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::K2Node_CustomEvent_bIsPressed' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, K2Node_SwitchEnum_CmpSuccess) == 0x00012A, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_GetUMGManager_ReturnValue3) == 0x000130, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_GetUMGManager_ReturnValue3' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, K2Node_DynamicCast_AsWBP_Menu_World_Map_000_Modern) == 0x000138, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::K2Node_DynamicCast_AsWBP_Menu_World_Map_000_Modern' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, K2Node_DynamicCast_bSuccess3) == 0x000140, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_GetAccessorSaveData_ReturnValue2) == 0x000148, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_GetAccessorSaveData_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_IsAcquiredRura_ReturnValue) == 0x000150, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_IsAcquiredRura_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_GetUIDisableCamera_Disabled) == 0x000151, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_GetUIDisableCamera_Disabled' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_MakeVector2D_ReturnValue) == 0x000154, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_IsSeaOrSkyMap_ReturnValue3) == 0x00015C, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_IsSeaOrSkyMap_ReturnValue3' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_GetUMGManager_ReturnValue4) == 0x000160, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_GetUMGManager_ReturnValue4' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, K2Node_CreateDelegate_OutputDelegate3) == 0x000168, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::K2Node_CreateDelegate_OutputDelegate3' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, K2Node_CreateDelegate_OutputDelegate4) == 0x000178, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::K2Node_CreateDelegate_OutputDelegate4' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_GetUMGManager_ReturnValue5) == 0x000188, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_GetUMGManager_ReturnValue5' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_GetWorldMapOpenReason_ReturnValue2) == 0x000190, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_GetWorldMapOpenReason_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_TestsWorldMapState_ReturnValue4) == 0x000191, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_TestsWorldMapState_ReturnValue4' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_EqualEqual_ByteByte_ReturnValue2) == 0x000192, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_EqualEqual_ByteByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000193, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_GetUMGManager_ReturnValue6) == 0x000198, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_GetUMGManager_ReturnValue6' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_TestsWorldMapState_ReturnValue5) == 0x0001A0, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_TestsWorldMapState_ReturnValue5' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_IsNowLoading_ReturnValue) == 0x0001A1, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_IsNowLoading_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_ShouldDisplayNowLoading_ReturnValue) == 0x0001A2, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_ShouldDisplayNowLoading_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, K2Node_CreateDelegate_OutputDelegate5) == 0x0001A8, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::K2Node_CreateDelegate_OutputDelegate5' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_GetUMGManager_ReturnValue7) == 0x0001B8, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_GetUMGManager_ReturnValue7' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_GetSoundSet_ReturnValue) == 0x0001C0, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_GetSoundSet_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_GetDefaultDeltaTime_ReturnValue) == 0x0001C8, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_GetDefaultDeltaTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_IsValid_ReturnValue3) == 0x0001CC, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_IsValid_ReturnValue3' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_EqualEqual_ObjectObject_ReturnValue2) == 0x0001CD, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_EqualEqual_ObjectObject_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_GetAccessorSaveData_ReturnValue3) == 0x0001D0, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_GetAccessorSaveData_ReturnValue3' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_GetWorldMapOpenReason_ReturnValue3) == 0x0001D8, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_GetWorldMapOpenReason_ReturnValue3' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_IsAcquiredRura_ReturnValue2) == 0x0001D9, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_IsAcquiredRura_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0001DA, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_IsSeaOrSkyMap_ReturnValue4) == 0x0001DB, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_IsSeaOrSkyMap_ReturnValue4' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_PushMenu_ReturnValue) == 0x0001E0, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_PushMenu_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_BooleanAND_ReturnValue2) == 0x0001E8, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, K2Node_DynamicCast_AsWBP_Menu_World_Map_Button_003_Modern) == 0x0001F0, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::K2Node_DynamicCast_AsWBP_Menu_World_Map_Button_003_Modern' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, K2Node_DynamicCast_bSuccess4) == 0x0001F8, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::K2Node_DynamicCast_bSuccess4' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_GetTimeRange_MinTime) == 0x0001FC, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_GetTimeRange_MaxTime) == 0x000200, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_Add_FloatFloat_ReturnValue) == 0x000204, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern, CallFunc_Add_FloatFloat_ReturnValue2) == 0x000208, "Member 'WBP_Menu_WorldMap_001_modern_C_ExecuteUbergraph_WBP_Menu_WorldMap_001_modern::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.WidgetKeyEventDelegate
// 0x0002 (0x0002 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_WidgetKeyEventDelegate final
{
public:
	EJackKeys                                     InKeyType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsPressed;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_WidgetKeyEventDelegate) == 0x000001, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_WidgetKeyEventDelegate");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_WidgetKeyEventDelegate) == 0x000002, "Wrong size on WBP_Menu_WorldMap_001_modern_C_WidgetKeyEventDelegate");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_WidgetKeyEventDelegate, InKeyType) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_WidgetKeyEventDelegate::InKeyType' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_WidgetKeyEventDelegate, bIsPressed) == 0x000001, "Member 'WBP_Menu_WorldMap_001_modern_C_WidgetKeyEventDelegate::bIsPressed' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.WidgetBPActionDelegate
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) WBP_Menu_WorldMap_001_modern_C_WidgetBPActionDelegate final
{
public:
	class FName                                   EventTag;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_WidgetBPActionDelegate) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_WidgetBPActionDelegate");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_WidgetBPActionDelegate) == 0x000008, "Wrong size on WBP_Menu_WorldMap_001_modern_C_WidgetBPActionDelegate");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_WidgetBPActionDelegate, EventTag) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_WidgetBPActionDelegate::EventTag' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.Tick
// 0x0040 (0x0040 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x003C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_Tick) == 0x000004, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_Tick");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_Tick) == 0x000040, "Wrong size on WBP_Menu_WorldMap_001_modern_C_Tick");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Tick, InDeltaTime) == 0x00003C, "Member 'WBP_Menu_WorldMap_001_modern_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.SetRuraData
// 0x0010 (0x0010 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_SetRuraData final
{
public:
	class UWBP_Menu_WorldMap_List_002_modern_C*   Sender;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorSaveDataInRura*         RuraData_0;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_SetRuraData) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_SetRuraData");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_SetRuraData) == 0x000010, "Wrong size on WBP_Menu_WorldMap_001_modern_C_SetRuraData");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetRuraData, Sender) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_SetRuraData::Sender' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetRuraData, RuraData_0) == 0x000008, "Member 'WBP_Menu_WorldMap_001_modern_C_SetRuraData::RuraData_0' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.OnSelectWorldMapMenu
// 0x0010 (0x0010 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_OnSelectWorldMapMenu final
{
public:
	class UWBP_Menu_WorldMap_List_010_modern_C*   Sender;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRura;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_OnSelectWorldMapMenu) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_OnSelectWorldMapMenu");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_OnSelectWorldMapMenu) == 0x000010, "Wrong size on WBP_Menu_WorldMap_001_modern_C_OnSelectWorldMapMenu");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_OnSelectWorldMapMenu, Sender) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_OnSelectWorldMapMenu::Sender' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_OnSelectWorldMapMenu, bRura) == 0x000008, "Member 'WBP_Menu_WorldMap_001_modern_C_OnSelectWorldMapMenu::bRura' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.Open
// 0x0080 (0x0080 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_Open final
{
public:
	ESlateVisibility                              FloorSelectorVisibility;                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGSoundSet*                       CallFunc_GetSoundSet_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackWorldMapOpenReason                       CallFunc_GetWorldMapOpenReason_ReturnValue;        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSeaOrSkyMap_ReturnValue;                // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackUMGAnimSet                        K2Node_MakeStruct_JackUMGAnimSet;                  // 0x0020(0x0038)(NoDestructor)
	bool                                          CallFunc_SetAnimSet_ReturnValue;                   // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGWidgetBase*                     CallFunc_AddUMGMenuWidget_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue2;               // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetMapOrigin_ReturnValue;                 // 0x0070(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_Open) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_Open");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_Open) == 0x000080, "Wrong size on WBP_Menu_WorldMap_001_modern_C_Open");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Open, FloorSelectorVisibility) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_Open::FloorSelectorVisibility' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Open, CallFunc_GetUMGManager_ReturnValue) == 0x000008, "Member 'WBP_Menu_WorldMap_001_modern_C_Open::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Open, CallFunc_GetSoundSet_ReturnValue) == 0x000010, "Member 'WBP_Menu_WorldMap_001_modern_C_Open::CallFunc_GetSoundSet_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Open, CallFunc_GetWorldMapOpenReason_ReturnValue) == 0x000018, "Member 'WBP_Menu_WorldMap_001_modern_C_Open::CallFunc_GetWorldMapOpenReason_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Open, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000019, "Member 'WBP_Menu_WorldMap_001_modern_C_Open::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Open, CallFunc_IsSeaOrSkyMap_ReturnValue) == 0x00001A, "Member 'WBP_Menu_WorldMap_001_modern_C_Open::CallFunc_IsSeaOrSkyMap_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Open, K2Node_MakeStruct_JackUMGAnimSet) == 0x000020, "Member 'WBP_Menu_WorldMap_001_modern_C_Open::K2Node_MakeStruct_JackUMGAnimSet' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Open, CallFunc_SetAnimSet_ReturnValue) == 0x000058, "Member 'WBP_Menu_WorldMap_001_modern_C_Open::CallFunc_SetAnimSet_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Open, CallFunc_AddUMGMenuWidget_ReturnValue) == 0x000060, "Member 'WBP_Menu_WorldMap_001_modern_C_Open::CallFunc_AddUMGMenuWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Open, CallFunc_GetUMGManager_ReturnValue2) == 0x000068, "Member 'WBP_Menu_WorldMap_001_modern_C_Open::CallFunc_GetUMGManager_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Open, CallFunc_GetMapOrigin_ReturnValue) == 0x000070, "Member 'WBP_Menu_WorldMap_001_modern_C_Open::CallFunc_GetMapOrigin_ReturnValue' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.Close
// 0x0080 (0x0080 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_Close final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable2;                               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable3;                               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable4;                               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable5;                               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable6;                               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGMainMapOverlayWidgetBase*       CallFunc_SetMapTextWidget_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackWorldMapOpenReason                       CallFunc_GetWorldMapOpenReason_ReturnValue;        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackWorldMapOpenReason                       Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGMainMapOverlayWidgetBase*       CallFunc_GetMapTextWidget_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TestsWorldMapState_ReturnValue;           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetMapID_ReturnValue;                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FJackUMGAnimSet                        K2Node_MakeStruct_JackUMGAnimSet;                  // 0x0040(0x0038)(NoDestructor)
	bool                                          CallFunc_IsSeaOrSkyMap_Result;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetAnimSet_ReturnValue;                   // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_Close) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_Close");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_Close) == 0x000080, "Wrong size on WBP_Menu_WorldMap_001_modern_C_Close");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Close, Temp_bool_Variable) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_Close::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Close, Temp_bool_Variable2) == 0x000001, "Member 'WBP_Menu_WorldMap_001_modern_C_Close::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Close, Temp_bool_Variable3) == 0x000002, "Member 'WBP_Menu_WorldMap_001_modern_C_Close::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Close, Temp_bool_Variable4) == 0x000003, "Member 'WBP_Menu_WorldMap_001_modern_C_Close::Temp_bool_Variable4' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Close, Temp_bool_Variable5) == 0x000004, "Member 'WBP_Menu_WorldMap_001_modern_C_Close::Temp_bool_Variable5' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Close, Temp_bool_Variable6) == 0x000005, "Member 'WBP_Menu_WorldMap_001_modern_C_Close::Temp_bool_Variable6' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Close, CallFunc_SetMapTextWidget_ReturnValue) == 0x000008, "Member 'WBP_Menu_WorldMap_001_modern_C_Close::CallFunc_SetMapTextWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Close, CallFunc_GetWorldMapOpenReason_ReturnValue) == 0x000010, "Member 'WBP_Menu_WorldMap_001_modern_C_Close::CallFunc_GetWorldMapOpenReason_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Close, Temp_byte_Variable) == 0x000011, "Member 'WBP_Menu_WorldMap_001_modern_C_Close::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Close, CallFunc_GetMapTextWidget_ReturnValue) == 0x000018, "Member 'WBP_Menu_WorldMap_001_modern_C_Close::CallFunc_GetMapTextWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Close, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000020, "Member 'WBP_Menu_WorldMap_001_modern_C_Close::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Close, K2Node_Select_Default) == 0x000021, "Member 'WBP_Menu_WorldMap_001_modern_C_Close::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Close, CallFunc_GetUMGManager_ReturnValue) == 0x000028, "Member 'WBP_Menu_WorldMap_001_modern_C_Close::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Close, CallFunc_TestsWorldMapState_ReturnValue) == 0x000030, "Member 'WBP_Menu_WorldMap_001_modern_C_Close::CallFunc_TestsWorldMapState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Close, CallFunc_GetMapID_ReturnValue) == 0x000038, "Member 'WBP_Menu_WorldMap_001_modern_C_Close::CallFunc_GetMapID_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Close, K2Node_MakeStruct_JackUMGAnimSet) == 0x000040, "Member 'WBP_Menu_WorldMap_001_modern_C_Close::K2Node_MakeStruct_JackUMGAnimSet' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Close, CallFunc_IsSeaOrSkyMap_Result) == 0x000078, "Member 'WBP_Menu_WorldMap_001_modern_C_Close::CallFunc_IsSeaOrSkyMap_Result' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Close, CallFunc_SetAnimSet_ReturnValue) == 0x000079, "Member 'WBP_Menu_WorldMap_001_modern_C_Close::CallFunc_SetAnimSet_ReturnValue' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.Update
// 0x0118 (0x0118 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_Update final
{
public:
	struct FGeometry                              Geometry;                                          // 0x0000(0x003C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         DeltaTime;                                         // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackCharacter*                         CallFunc_GetJackPlayerCharacter_ReturnValue;       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0048(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPanelSize_ReturnValue;                 // 0x0054(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPanelPosition_ReturnValue;             // 0x005C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x006C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue;                       // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue2;                      // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x007C(0x000C)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSeaOrSkyMap_ReturnValue;                // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNowLoading_ReturnValue;                 // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSeaOrSkyMap_ReturnValue2;               // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9B[0x1];                                       // 0x009B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetPanelSize_ReturnValue2;                // 0x009C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x00A4(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x00AC(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_TransformToMapView_ReturnValue;           // 0x00B4(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X2;                         // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y2;                         // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X3;                         // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y3;                         // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue2;      // 0x00CC(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X4;                         // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y4;                         // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue2;                      // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00E4(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue2;   // 0x00EC(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X5;                         // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y5;                         // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue3;                      // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue4;                      // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue2;           // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_Update) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_Update");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_Update) == 0x000118, "Wrong size on WBP_Menu_WorldMap_001_modern_C_Update");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, Geometry) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::Geometry' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, DeltaTime) == 0x00003C, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::DeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_GetJackPlayerCharacter_ReturnValue) == 0x000040, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_GetJackPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000048, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_GetPanelSize_ReturnValue) == 0x000054, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_GetPanelSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_GetPanelPosition_ReturnValue) == 0x00005C, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_GetPanelPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_BreakVector2D_X) == 0x000064, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_BreakVector2D_Y) == 0x000068, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x00006C, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_Square_ReturnValue) == 0x000074, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_Square_ReturnValue2) == 0x000078, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_Square_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00007C, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_BreakRotator_Roll) == 0x000088, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_BreakRotator_Pitch) == 0x00008C, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_BreakRotator_Yaw) == 0x000090, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_Add_FloatFloat_ReturnValue) == 0x000094, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_IsSeaOrSkyMap_ReturnValue) == 0x000098, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_IsSeaOrSkyMap_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_IsNowLoading_ReturnValue) == 0x000099, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_IsNowLoading_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_IsSeaOrSkyMap_ReturnValue2) == 0x00009A, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_IsSeaOrSkyMap_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_GetPanelSize_ReturnValue2) == 0x00009C, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_GetPanelSize_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x0000A4, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x0000AC, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_TransformToMapView_ReturnValue) == 0x0000B4, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_TransformToMapView_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_BreakVector2D_X2) == 0x0000BC, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_BreakVector2D_X2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_BreakVector2D_Y2) == 0x0000C0, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_BreakVector2D_Y2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_BreakVector2D_X3) == 0x0000C4, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_BreakVector2D_X3' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_BreakVector2D_Y3) == 0x0000C8, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_BreakVector2D_Y3' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_Multiply_Vector2DFloat_ReturnValue2) == 0x0000CC, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_Multiply_Vector2DFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_BreakVector2D_X4) == 0x0000D4, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_BreakVector2D_X4' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_BreakVector2D_Y4) == 0x0000D8, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_BreakVector2D_Y4' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_FClamp_ReturnValue) == 0x0000DC, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_FClamp_ReturnValue2) == 0x0000E0, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_FClamp_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_MakeVector2D_ReturnValue) == 0x0000E4, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_Subtract_Vector2DVector2D_ReturnValue2) == 0x0000EC, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_Subtract_Vector2DVector2D_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_BreakVector2D_X5) == 0x0000F4, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_BreakVector2D_X5' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_BreakVector2D_Y5) == 0x0000F8, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_BreakVector2D_Y5' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_Square_ReturnValue3) == 0x0000FC, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_Square_ReturnValue3' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_Square_ReturnValue4) == 0x000100, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_Square_ReturnValue4' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000104, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_Divide_FloatFloat_ReturnValue2) == 0x000108, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_Divide_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_Add_FloatFloat_ReturnValue2) == 0x00010C, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_Update, CallFunc_Less_FloatFloat_ReturnValue) == 0x000110, "Member 'WBP_Menu_WorldMap_001_modern_C_Update::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.OpenWorldMapMenu
// 0x0030 (0x0030 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_OpenWorldMapMenu final
{
public:
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGWidgetBase*                     CallFunc_PushMenu_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UWBP_Menu_WorldMap_List_010_modern_C* Sender, bool bSelectRura)> K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	class UWBP_Menu_WorldMap_List_010_modern_C*   K2Node_DynamicCast_AsWBP_Menu_World_Map_List_010_Modern; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_OpenWorldMapMenu) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_OpenWorldMapMenu");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_OpenWorldMapMenu) == 0x000030, "Wrong size on WBP_Menu_WorldMap_001_modern_C_OpenWorldMapMenu");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_OpenWorldMapMenu, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_OpenWorldMapMenu::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_OpenWorldMapMenu, CallFunc_PushMenu_ReturnValue) == 0x000008, "Member 'WBP_Menu_WorldMap_001_modern_C_OpenWorldMapMenu::CallFunc_PushMenu_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_OpenWorldMapMenu, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'WBP_Menu_WorldMap_001_modern_C_OpenWorldMapMenu::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_OpenWorldMapMenu, K2Node_DynamicCast_AsWBP_Menu_World_Map_List_010_Modern) == 0x000020, "Member 'WBP_Menu_WorldMap_001_modern_C_OpenWorldMapMenu::K2Node_DynamicCast_AsWBP_Menu_World_Map_List_010_Modern' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_OpenWorldMapMenu, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'WBP_Menu_WorldMap_001_modern_C_OpenWorldMapMenu::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.OpenBoukenGuide
// 0x0008 (0x0008 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_OpenBoukenGuide final
{
public:
	class UJackUMGWidgetBase*                     CallFunc_PushMenu_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_OpenBoukenGuide) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_OpenBoukenGuide");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_OpenBoukenGuide) == 0x000008, "Wrong size on WBP_Menu_WorldMap_001_modern_C_OpenBoukenGuide");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_OpenBoukenGuide, CallFunc_PushMenu_ReturnValue) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_OpenBoukenGuide::CallFunc_PushMenu_ReturnValue' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.SetupRuraMode
// 0x0060 (0x0060 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_SetupRuraMode final
{
public:
	bool                                          bDiractRuraMenuMode;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJackUMGItemData*>               TempRuraData;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	EJackWorldMapOpenReason                       CallFunc_GetWorldMapOpenReason_ReturnValue;        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSeaOrSkyMap_ReturnValue;                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue2;         // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TestsWorldMapState_ReturnValue;           // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UJackUMGWidgetBase*                     CallFunc_PushMenu_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue2;                   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_Menu_WorldMap_List_002_modern_C*   K2Node_DynamicCast_AsWBP_Menu_World_Map_List_002_Modern; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0040(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UWBP_Menu_WorldMap_List_002_modern_C* Sender, class UJackUMGAccessorSaveDataInRura* RuraData)> K2Node_CreateDelegate_OutputDelegate2;             // 0x0050(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_SetupRuraMode) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_SetupRuraMode");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_SetupRuraMode) == 0x000060, "Wrong size on WBP_Menu_WorldMap_001_modern_C_SetupRuraMode");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupRuraMode, bDiractRuraMenuMode) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupRuraMode::bDiractRuraMenuMode' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupRuraMode, TempRuraData) == 0x000008, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupRuraMode::TempRuraData' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupRuraMode, CallFunc_GetWorldMapOpenReason_ReturnValue) == 0x000018, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupRuraMode::CallFunc_GetWorldMapOpenReason_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupRuraMode, CallFunc_IsSeaOrSkyMap_ReturnValue) == 0x000019, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupRuraMode::CallFunc_IsSeaOrSkyMap_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupRuraMode, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00001A, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupRuraMode::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupRuraMode, CallFunc_Not_PreBool_ReturnValue) == 0x00001B, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupRuraMode::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupRuraMode, CallFunc_EqualEqual_ByteByte_ReturnValue2) == 0x00001C, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupRuraMode::CallFunc_EqualEqual_ByteByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupRuraMode, CallFunc_TestsWorldMapState_ReturnValue) == 0x00001D, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupRuraMode::CallFunc_TestsWorldMapState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupRuraMode, CallFunc_BooleanOR_ReturnValue) == 0x00001E, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupRuraMode::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupRuraMode, CallFunc_BooleanAND_ReturnValue) == 0x00001F, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupRuraMode::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupRuraMode, CallFunc_PushMenu_ReturnValue) == 0x000020, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupRuraMode::CallFunc_PushMenu_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupRuraMode, CallFunc_BooleanOR_ReturnValue2) == 0x000028, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupRuraMode::CallFunc_BooleanOR_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupRuraMode, CallFunc_Not_PreBool_ReturnValue2) == 0x000029, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupRuraMode::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupRuraMode, K2Node_DynamicCast_AsWBP_Menu_World_Map_List_002_Modern) == 0x000030, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupRuraMode::K2Node_DynamicCast_AsWBP_Menu_World_Map_List_002_Modern' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupRuraMode, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupRuraMode::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupRuraMode, K2Node_CreateDelegate_OutputDelegate) == 0x000040, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupRuraMode::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupRuraMode, K2Node_CreateDelegate_OutputDelegate2) == 0x000050, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupRuraMode::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.SetupByMapID
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) WBP_Menu_WorldMap_001_modern_C_SetupByMapID final
{
public:
	bool                                          bUkisimaVisible;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bMermaidHarpLineVisible;                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetMapID_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_SetupByMapID) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_SetupByMapID");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_SetupByMapID) == 0x000018, "Wrong size on WBP_Menu_WorldMap_001_modern_C_SetupByMapID");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupByMapID, bUkisimaVisible) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupByMapID::bUkisimaVisible' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupByMapID, bMermaidHarpLineVisible) == 0x000001, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupByMapID::bMermaidHarpLineVisible' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupByMapID, CallFunc_GetMapID_ReturnValue) == 0x000008, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupByMapID::CallFunc_GetMapID_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupByMapID, K2Node_SwitchName_CmpSuccess) == 0x000010, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupByMapID::K2Node_SwitchName_CmpSuccess' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.ProcFloorSpinnerKey
// 0x0050 (0x0050 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey final
{
public:
	EJackKeys                                     Key;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlaysSE;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NextFloorLevel;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGSoundSet*                       CallFunc_GetSoundSet_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMapSymbolVisible_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetMapID_ReturnValue;                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_ExistsFloor_OutFloorKeyIndex;             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ExistsFloor_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSeaOrSkyMap_Result;                     // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetFloorLevelCount_ReturnValue;           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey) == 0x000050, "Wrong size on WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey, Key) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey::Key' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey, bPlaysSE) == 0x000001, "Member 'WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey::bPlaysSE' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey, NextFloorLevel) == 0x000004, "Member 'WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey::NextFloorLevel' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey, K2Node_SwitchEnum_CmpSuccess) == 0x000008, "Member 'WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey, CallFunc_GetUMGManager_ReturnValue) == 0x000010, "Member 'WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey, CallFunc_GetSoundSet_ReturnValue) == 0x000018, "Member 'WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey::CallFunc_GetSoundSet_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000020, "Member 'WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey, CallFunc_Subtract_IntInt_ReturnValue) == 0x000024, "Member 'WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey, CallFunc_GetMapSymbolVisible_ReturnValue) == 0x000028, "Member 'WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey::CallFunc_GetMapSymbolVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey, CallFunc_GetMapID_ReturnValue) == 0x000030, "Member 'WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey::CallFunc_GetMapID_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey, CallFunc_ExistsFloor_OutFloorKeyIndex) == 0x000038, "Member 'WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey::CallFunc_ExistsFloor_OutFloorKeyIndex' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey, CallFunc_ExistsFloor_ReturnValue) == 0x00003C, "Member 'WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey::CallFunc_ExistsFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey, CallFunc_IsSeaOrSkyMap_Result) == 0x00003D, "Member 'WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey::CallFunc_IsSeaOrSkyMap_Result' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey, CallFunc_GetFloorLevelCount_ReturnValue) == 0x000040, "Member 'WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey::CallFunc_GetFloorLevelCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey, CallFunc_Greater_IntInt_ReturnValue) == 0x000048, "Member 'WBP_Menu_WorldMap_001_modern_C_ProcFloorSpinnerKey::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.UpdateFloorSpinnerStatus
// 0x0020 (0x0020 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus final
{
public:
	EJackWorldMapOpenReason                       CallFunc_GetWorldMapOpenReason_ReturnValue;        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSeaOrSkyMap_ReturnValue;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetFloorLevelCount_ReturnValue;           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_ExistsFloor_OutFloorKeyIndex;             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ExistsFloor_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_ExistsFloor_OutFloorKeyIndex2;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ExistsFloor_ReturnValue2;                 // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus) == 0x000004, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus) == 0x000020, "Wrong size on WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus, CallFunc_GetWorldMapOpenReason_ReturnValue) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus::CallFunc_GetWorldMapOpenReason_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus, CallFunc_IsSeaOrSkyMap_ReturnValue) == 0x000002, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus::CallFunc_IsSeaOrSkyMap_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus, CallFunc_GetFloorLevelCount_ReturnValue) == 0x000008, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus::CallFunc_GetFloorLevelCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus, CallFunc_ExistsFloor_OutFloorKeyIndex) == 0x00000C, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus::CallFunc_ExistsFloor_OutFloorKeyIndex' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus, CallFunc_ExistsFloor_ReturnValue) == 0x000010, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus::CallFunc_ExistsFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus, CallFunc_Greater_IntInt_ReturnValue) == 0x000011, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus, CallFunc_BooleanAND_ReturnValue) == 0x000012, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus, CallFunc_Add_IntInt_ReturnValue2) == 0x000014, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus, CallFunc_ExistsFloor_OutFloorKeyIndex2) == 0x000018, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus::CallFunc_ExistsFloor_OutFloorKeyIndex2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus, CallFunc_ExistsFloor_ReturnValue2) == 0x00001C, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateFloorSpinnerStatus::CallFunc_ExistsFloor_ReturnValue2' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.RequestWorldMap
// 0x0090 (0x0090 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_RequestWorldMap final
{
public:
	bool                                          bRuraMode_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RequestMVID;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable2;                               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable2;                               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable3;                               // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable4;                               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackSaveData*                          CallFunc_GetSaveData_ReturnValue;                  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select2_Default;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetActiveScenarioFlag_ReturnValue;        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsScenarioFlagBetween_ReturnValue;        // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EJackUMGMapResourceType>               K2Node_MakeArray_Array;                            // 0x0068(0x0010)(ZeroConstructor, ReferenceParm)
	TDelegate<void(int32 RequesterID)>            K2Node_CreateDelegate_OutputDelegate;              // 0x0078(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_RequestFloorInfoForVolumeID_ReturnValue;  // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_RequestWorldMap) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_RequestWorldMap");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_RequestWorldMap) == 0x000090, "Wrong size on WBP_Menu_WorldMap_001_modern_C_RequestWorldMap");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_RequestWorldMap, bRuraMode_0) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_RequestWorldMap::bRuraMode_0' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_RequestWorldMap, RequestMVID) == 0x000008, "Member 'WBP_Menu_WorldMap_001_modern_C_RequestWorldMap::RequestMVID' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_RequestWorldMap, Temp_bool_Variable) == 0x000010, "Member 'WBP_Menu_WorldMap_001_modern_C_RequestWorldMap::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_RequestWorldMap, Temp_name_Variable) == 0x000018, "Member 'WBP_Menu_WorldMap_001_modern_C_RequestWorldMap::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_RequestWorldMap, Temp_name_Variable2) == 0x000020, "Member 'WBP_Menu_WorldMap_001_modern_C_RequestWorldMap::Temp_name_Variable2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_RequestWorldMap, Temp_bool_Variable2) == 0x000028, "Member 'WBP_Menu_WorldMap_001_modern_C_RequestWorldMap::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_RequestWorldMap, K2Node_Select_Default) == 0x000030, "Member 'WBP_Menu_WorldMap_001_modern_C_RequestWorldMap::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_RequestWorldMap, Temp_name_Variable3) == 0x000038, "Member 'WBP_Menu_WorldMap_001_modern_C_RequestWorldMap::Temp_name_Variable3' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_RequestWorldMap, Temp_name_Variable4) == 0x000040, "Member 'WBP_Menu_WorldMap_001_modern_C_RequestWorldMap::Temp_name_Variable4' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_RequestWorldMap, CallFunc_GetSaveData_ReturnValue) == 0x000048, "Member 'WBP_Menu_WorldMap_001_modern_C_RequestWorldMap::CallFunc_GetSaveData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_RequestWorldMap, K2Node_Select2_Default) == 0x000050, "Member 'WBP_Menu_WorldMap_001_modern_C_RequestWorldMap::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_RequestWorldMap, CallFunc_GetActiveScenarioFlag_ReturnValue) == 0x000058, "Member 'WBP_Menu_WorldMap_001_modern_C_RequestWorldMap::CallFunc_GetActiveScenarioFlag_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_RequestWorldMap, CallFunc_IsScenarioFlagBetween_ReturnValue) == 0x000060, "Member 'WBP_Menu_WorldMap_001_modern_C_RequestWorldMap::CallFunc_IsScenarioFlagBetween_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_RequestWorldMap, K2Node_MakeArray_Array) == 0x000068, "Member 'WBP_Menu_WorldMap_001_modern_C_RequestWorldMap::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_RequestWorldMap, K2Node_CreateDelegate_OutputDelegate) == 0x000078, "Member 'WBP_Menu_WorldMap_001_modern_C_RequestWorldMap::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_RequestWorldMap, CallFunc_RequestFloorInfoForVolumeID_ReturnValue) == 0x000088, "Member 'WBP_Menu_WorldMap_001_modern_C_RequestWorldMap::CallFunc_RequestFloorInfoForVolumeID_ReturnValue' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.RequestCurrentMap
// 0x0038 (0x0038 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_RequestCurrentMap final
{
public:
	int32                                         RelativeLevel;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EJackUMGMapResourceType>               K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ZeroConstructor, ReferenceParm)
	TDelegate<void(int32 RequesterID)>            K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_RequestFloorInfo_ReturnValue;             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGMapResourceRequester*           CallFunc_FindResourceRequester_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_RequestCurrentMap) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_RequestCurrentMap");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_RequestCurrentMap) == 0x000038, "Wrong size on WBP_Menu_WorldMap_001_modern_C_RequestCurrentMap");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_RequestCurrentMap, RelativeLevel) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_RequestCurrentMap::RelativeLevel' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_RequestCurrentMap, K2Node_MakeArray_Array) == 0x000008, "Member 'WBP_Menu_WorldMap_001_modern_C_RequestCurrentMap::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_RequestCurrentMap, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'WBP_Menu_WorldMap_001_modern_C_RequestCurrentMap::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_RequestCurrentMap, CallFunc_RequestFloorInfo_ReturnValue) == 0x000028, "Member 'WBP_Menu_WorldMap_001_modern_C_RequestCurrentMap::CallFunc_RequestFloorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_RequestCurrentMap, CallFunc_FindResourceRequester_ReturnValue) == 0x000030, "Member 'WBP_Menu_WorldMap_001_modern_C_RequestCurrentMap::CallFunc_FindResourceRequester_ReturnValue' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.SelectWorldMap
// 0x0009 (0x0009 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_SelectWorldMap final
{
public:
	bool                                          bRuraMode_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bForceSelectWorldMap;                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSkyMap_ReturnValue;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSeaOrSkyMap_ReturnValue;                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSeaMap_ReturnValue;                     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSkyMap_ReturnValue2;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSeaMap_ReturnValue2;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDisplayingSeaSkyMap_bDisplaying;        // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_SelectWorldMap) == 0x000001, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_SelectWorldMap");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_SelectWorldMap) == 0x000009, "Wrong size on WBP_Menu_WorldMap_001_modern_C_SelectWorldMap");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SelectWorldMap, bRuraMode_0) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_SelectWorldMap::bRuraMode_0' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SelectWorldMap, bForceSelectWorldMap) == 0x000001, "Member 'WBP_Menu_WorldMap_001_modern_C_SelectWorldMap::bForceSelectWorldMap' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SelectWorldMap, CallFunc_IsSkyMap_ReturnValue) == 0x000002, "Member 'WBP_Menu_WorldMap_001_modern_C_SelectWorldMap::CallFunc_IsSkyMap_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SelectWorldMap, CallFunc_IsSeaOrSkyMap_ReturnValue) == 0x000003, "Member 'WBP_Menu_WorldMap_001_modern_C_SelectWorldMap::CallFunc_IsSeaOrSkyMap_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SelectWorldMap, CallFunc_IsSeaMap_ReturnValue) == 0x000004, "Member 'WBP_Menu_WorldMap_001_modern_C_SelectWorldMap::CallFunc_IsSeaMap_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SelectWorldMap, CallFunc_IsSkyMap_ReturnValue2) == 0x000005, "Member 'WBP_Menu_WorldMap_001_modern_C_SelectWorldMap::CallFunc_IsSkyMap_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SelectWorldMap, CallFunc_IsSeaMap_ReturnValue2) == 0x000006, "Member 'WBP_Menu_WorldMap_001_modern_C_SelectWorldMap::CallFunc_IsSeaMap_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SelectWorldMap, CallFunc_IsDisplayingSeaSkyMap_bDisplaying) == 0x000007, "Member 'WBP_Menu_WorldMap_001_modern_C_SelectWorldMap::CallFunc_IsDisplayingSeaSkyMap_bDisplaying' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SelectWorldMap, CallFunc_BooleanOR_ReturnValue) == 0x000008, "Member 'WBP_Menu_WorldMap_001_modern_C_SelectWorldMap::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.SelectCurrentMap
// 0x0002 (0x0002 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_SelectCurrentMap final
{
public:
	bool                                          CallFunc_IsSkyMap_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSeaMap_ReturnValue;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_SelectCurrentMap) == 0x000001, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_SelectCurrentMap");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_SelectCurrentMap) == 0x000002, "Wrong size on WBP_Menu_WorldMap_001_modern_C_SelectCurrentMap");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SelectCurrentMap, CallFunc_IsSkyMap_ReturnValue) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_SelectCurrentMap::CallFunc_IsSkyMap_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SelectCurrentMap, CallFunc_IsSeaMap_ReturnValue) == 0x000001, "Member 'WBP_Menu_WorldMap_001_modern_C_SelectCurrentMap::CallFunc_IsSeaMap_ReturnValue' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.CreateMID
// 0x0010 (0x0010 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_CreateMID final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackGameMode*                          CallFunc_GetJackGameMode_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_CreateMID) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_CreateMID");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_CreateMID) == 0x000010, "Wrong size on WBP_Menu_WorldMap_001_modern_C_CreateMID");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_CreateMID, ReturnValue) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_CreateMID::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_CreateMID, CallFunc_GetJackGameMode_ReturnValue) == 0x000008, "Member 'WBP_Menu_WorldMap_001_modern_C_CreateMID::CallFunc_GetJackGameMode_ReturnValue' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.UpdateMapTextVisible
// 0x0028 (0x0028 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible final
{
public:
	class UWBP_Map_Text_001_C*                    MapTextImage;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackMapTextItemControlMethod                 Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable2;                               // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable3;                               // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable4;                               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetMapVolumeID_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetMapID_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue2;         // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible) == 0x000028, "Wrong size on WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible, MapTextImage) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible::MapTextImage' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible, Temp_byte_Variable) == 0x000008, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible, Temp_bool_Variable) == 0x000009, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible, Temp_bool_Variable2) == 0x00000A, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible, Temp_bool_Variable3) == 0x00000B, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible, Temp_bool_Variable4) == 0x00000C, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible::Temp_bool_Variable4' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible, CallFunc_GetMapVolumeID_ReturnValue) == 0x000010, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible::CallFunc_GetMapVolumeID_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible, CallFunc_GetMapID_ReturnValue) == 0x000018, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible::CallFunc_GetMapID_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000020, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible, CallFunc_EqualEqual_NameName_ReturnValue2) == 0x000021, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible::CallFunc_EqualEqual_NameName_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible, K2Node_Select_Default) == 0x000022, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateMapTextVisible::K2Node_Select_Default' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.UpdateBoukenGuideVisible
// 0x0004 (0x0004 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_UpdateBoukenGuideVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetBoukenGuideVisible_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_UpdateBoukenGuideVisible) == 0x000001, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_UpdateBoukenGuideVisible");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_UpdateBoukenGuideVisible) == 0x000004, "Wrong size on WBP_Menu_WorldMap_001_modern_C_UpdateBoukenGuideVisible");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateBoukenGuideVisible, bVisible) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateBoukenGuideVisible::bVisible' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateBoukenGuideVisible, CallFunc_GetBoukenGuideVisible_ReturnValue) == 0x000001, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateBoukenGuideVisible::CallFunc_GetBoukenGuideVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateBoukenGuideVisible, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000002, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateBoukenGuideVisible::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateBoukenGuideVisible, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateBoukenGuideVisible::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.GetMapTextDrawCanvas
// 0x0008 (0x0008 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_GetMapTextDrawCanvas final
{
public:
	class UCanvasPanel*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_GetMapTextDrawCanvas) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_GetMapTextDrawCanvas");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_GetMapTextDrawCanvas) == 0x000008, "Wrong size on WBP_Menu_WorldMap_001_modern_C_GetMapTextDrawCanvas");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_GetMapTextDrawCanvas, ReturnValue) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_GetMapTextDrawCanvas::ReturnValue' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.CreateMapSymbolMID
// 0x0010 (0x0010 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_CreateMapSymbolMID final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackGameMode*                          CallFunc_GetJackGameMode_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_CreateMapSymbolMID) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_CreateMapSymbolMID");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_CreateMapSymbolMID) == 0x000010, "Wrong size on WBP_Menu_WorldMap_001_modern_C_CreateMapSymbolMID");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_CreateMapSymbolMID, ReturnValue) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_CreateMapSymbolMID::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_CreateMapSymbolMID, CallFunc_GetJackGameMode_ReturnValue) == 0x000008, "Member 'WBP_Menu_WorldMap_001_modern_C_CreateMapSymbolMID::CallFunc_GetJackGameMode_ReturnValue' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.MapSymbolVisibleChanged
// 0x0018 (0x0018 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_MapSymbolVisibleChanged final
{
public:
	class UObject*                                Sender;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Visible;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Payload;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_MapSymbolVisibleChanged) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_MapSymbolVisibleChanged");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_MapSymbolVisibleChanged) == 0x000018, "Wrong size on WBP_Menu_WorldMap_001_modern_C_MapSymbolVisibleChanged");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_MapSymbolVisibleChanged, Sender) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_MapSymbolVisibleChanged::Sender' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_MapSymbolVisibleChanged, Visible) == 0x000008, "Member 'WBP_Menu_WorldMap_001_modern_C_MapSymbolVisibleChanged::Visible' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_MapSymbolVisibleChanged, Payload) == 0x000010, "Member 'WBP_Menu_WorldMap_001_modern_C_MapSymbolVisibleChanged::Payload' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.GetRenderTargetName
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) WBP_Menu_WorldMap_001_modern_C_GetRenderTargetName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_GetRenderTargetName) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_GetRenderTargetName");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_GetRenderTargetName) == 0x000008, "Wrong size on WBP_Menu_WorldMap_001_modern_C_GetRenderTargetName");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_GetRenderTargetName, ReturnValue) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_GetRenderTargetName::ReturnValue' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.AsyncLoadFinished
// 0x0048 (0x0048 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_AsyncLoadFinished final
{
public:
	int32                                         RequesterID_0;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGMapResourceRequester*           CallFunc_FindResourceRequester_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0030(0x0018)()
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_AsyncLoadFinished) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_AsyncLoadFinished");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_AsyncLoadFinished) == 0x000048, "Wrong size on WBP_Menu_WorldMap_001_modern_C_AsyncLoadFinished");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_AsyncLoadFinished, RequesterID_0) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_AsyncLoadFinished::RequesterID_0' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_AsyncLoadFinished, Temp_object_Variable) == 0x000008, "Member 'WBP_Menu_WorldMap_001_modern_C_AsyncLoadFinished::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_AsyncLoadFinished, Temp_bool_Variable) == 0x000010, "Member 'WBP_Menu_WorldMap_001_modern_C_AsyncLoadFinished::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_AsyncLoadFinished, CallFunc_FindResourceRequester_ReturnValue) == 0x000018, "Member 'WBP_Menu_WorldMap_001_modern_C_AsyncLoadFinished::CallFunc_FindResourceRequester_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_AsyncLoadFinished, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'WBP_Menu_WorldMap_001_modern_C_AsyncLoadFinished::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_AsyncLoadFinished, K2Node_Select_Default) == 0x000028, "Member 'WBP_Menu_WorldMap_001_modern_C_AsyncLoadFinished::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_AsyncLoadFinished, CallFunc_Conv_StringToText_ReturnValue) == 0x000030, "Member 'WBP_Menu_WorldMap_001_modern_C_AsyncLoadFinished::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.SetupCurrentPlaceMarker
// 0x0068 (0x0068 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker final
{
public:
	bool                                          bFoundValidData;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0008(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_IsSeaOrSkyMap_ReturnValue;                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetMapID_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackDataTableUICurrentPlaceInfo       CallFunc_GetDataTableRowFromName_OutRow;           // 0x0030(0x0010)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetMapVolumeID_ReturnValue;               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FJackDataTableUICurrentPlaceInfo       CallFunc_GetDataTableRowFromName_OutRow2;          // 0x0050(0x0010)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue2;     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue2;              // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker) == 0x000068, "Wrong size on WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker, bFoundValidData) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker::bFoundValidData' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000008, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker, CallFunc_IsSeaOrSkyMap_ReturnValue) == 0x000018, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker::CallFunc_IsSeaOrSkyMap_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker, CallFunc_GetMapID_ReturnValue) == 0x000020, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker::CallFunc_GetMapID_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker, CallFunc_Not_PreBool_ReturnValue) == 0x000028, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker, CallFunc_GetDataTableRowFromName_OutRow) == 0x000030, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000040, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker, CallFunc_BooleanAND_ReturnValue) == 0x000041, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker, CallFunc_Array_Contains_ReturnValue) == 0x000042, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker, CallFunc_GetMapVolumeID_ReturnValue) == 0x000048, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker::CallFunc_GetMapVolumeID_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker, CallFunc_GetDataTableRowFromName_OutRow2) == 0x000050, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker::CallFunc_GetDataTableRowFromName_OutRow2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker, CallFunc_GetDataTableRowFromName_ReturnValue2) == 0x000060, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker::CallFunc_GetDataTableRowFromName_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker, CallFunc_Array_Contains_ReturnValue2) == 0x000061, "Member 'WBP_Menu_WorldMap_001_modern_C_SetupCurrentPlaceMarker::CallFunc_Array_Contains_ReturnValue2' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.UpdateShipHarborMarker
// 0x0060 (0x0060 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker final
{
public:
	bool                                          bFoundValidData;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackSaveData*                          CallFunc_GetSaveData_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackScenarioGroup                            CallFunc_GetActiveScenarioGroup_ReturnValue;       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSeaMap_ReturnValue;                     // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetGameFlagBool_ReturnValue;              // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetGameFlagBool_ReturnValue2;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetGameFlagBool_ReturnValue3;             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue3;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetGameFlagString_ReturnValue;            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetMapID_ReturnValue;                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FJackDataTableUICurrentPlaceInfo       CallFunc_GetDataTableRowFromName_OutRow;           // 0x0040(0x0010)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue2;         // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSeaOrSkyMap_ReturnValue;                // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue3;                 // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetMapSymbolVisible_ReturnValue;          // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDisplayingWorldMap_ReturnValue;         // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSeaMap_ReturnValue2;                    // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue4;                  // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue2;                   // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue5;                  // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker) == 0x000060, "Wrong size on WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, bFoundValidData) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::bFoundValidData' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_GetSaveData_ReturnValue) == 0x000008, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_GetSaveData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_GetActiveScenarioGroup_ReturnValue) == 0x000010, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_GetActiveScenarioGroup_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000011, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000012, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_IsSeaMap_ReturnValue) == 0x000013, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_IsSeaMap_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000014, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_Not_PreBool_ReturnValue) == 0x000015, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_BooleanAND_ReturnValue) == 0x000016, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_GetGameFlagBool_ReturnValue) == 0x000017, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_GetGameFlagBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_GetGameFlagBool_ReturnValue2) == 0x000018, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_GetGameFlagBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_BooleanAND_ReturnValue2) == 0x000019, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_Not_PreBool_ReturnValue2) == 0x00001A, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_GetGameFlagBool_ReturnValue3) == 0x00001B, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_GetGameFlagBool_ReturnValue3' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_BooleanAND_ReturnValue3) == 0x00001C, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_BooleanAND_ReturnValue3' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_BooleanOR_ReturnValue) == 0x00001D, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_GetGameFlagString_ReturnValue) == 0x000020, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_GetGameFlagString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_Conv_StringToName_ReturnValue) == 0x000030, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_GetMapID_ReturnValue) == 0x000038, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_GetMapID_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_GetDataTableRowFromName_OutRow) == 0x000040, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000050, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_EqualEqual_NameName_ReturnValue2) == 0x000051, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_EqualEqual_NameName_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_IsSeaOrSkyMap_ReturnValue) == 0x000052, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_IsSeaOrSkyMap_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_Not_PreBool_ReturnValue3) == 0x000053, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_Not_PreBool_ReturnValue3' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_GetMapSymbolVisible_ReturnValue) == 0x000054, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_GetMapSymbolVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_IsDisplayingWorldMap_ReturnValue) == 0x000055, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_IsDisplayingWorldMap_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_IsSeaMap_ReturnValue2) == 0x000056, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_IsSeaMap_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_BooleanAND_ReturnValue4) == 0x000057, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_BooleanAND_ReturnValue4' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_BooleanOR_ReturnValue2) == 0x000058, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_BooleanOR_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker, CallFunc_BooleanAND_ReturnValue5) == 0x000059, "Member 'WBP_Menu_WorldMap_001_modern_C_UpdateShipHarborMarker::CallFunc_BooleanAND_ReturnValue5' has a wrong offset!");

// Function WBP_Menu_WorldMap_001_modern.WBP_Menu_WorldMap_001_modern_C.GetDesiredMapViewportSize
// 0x0018 (0x0018 - 0x0000)
struct WBP_Menu_WorldMap_001_modern_C_GetDesiredMapViewportSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0010(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Menu_WorldMap_001_modern_C_GetDesiredMapViewportSize) == 0x000004, "Wrong alignment on WBP_Menu_WorldMap_001_modern_C_GetDesiredMapViewportSize");
static_assert(sizeof(WBP_Menu_WorldMap_001_modern_C_GetDesiredMapViewportSize) == 0x000018, "Wrong size on WBP_Menu_WorldMap_001_modern_C_GetDesiredMapViewportSize");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_GetDesiredMapViewportSize, ReturnValue) == 0x000000, "Member 'WBP_Menu_WorldMap_001_modern_C_GetDesiredMapViewportSize::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_GetDesiredMapViewportSize, CallFunc_BreakVector2D_X) == 0x000008, "Member 'WBP_Menu_WorldMap_001_modern_C_GetDesiredMapViewportSize::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_GetDesiredMapViewportSize, CallFunc_BreakVector2D_Y) == 0x00000C, "Member 'WBP_Menu_WorldMap_001_modern_C_GetDesiredMapViewportSize::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_001_modern_C_GetDesiredMapViewportSize, CallFunc_MakeVector2D_ReturnValue) == 0x000010, "Member 'WBP_Menu_WorldMap_001_modern_C_GetDesiredMapViewportSize::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

}

