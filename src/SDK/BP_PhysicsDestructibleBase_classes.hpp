#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PhysicsDestructibleBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "JackGame_classes.hpp"


namespace SDK
{

// DynamicClass BP_PhysicsDestructibleBase.BP_PhysicsDestructibleBase_C
// 0x0238 (0x0700 - 0x04C8)
class ABP_PhysicsDestructibleBase_C final : public AJackDestructibleActor
{
public:
	class UDestructibleComponent*                 Destructible;                                      // 0x04C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x04D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 DestructEffect;                                    // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddImpulseDirLengthFromPlayableActorHit;           // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSpecialPlayerCollide;                            // 0x04E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E5[0x3];                                      // 0x04E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerCollideHitAddVelolictyRate;                  // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddVelocityZ;                                      // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDestructionCount;                           // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F1[0x7];                                      // 0x04F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             DestructSound;                                     // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             HitPlayerSound;                                    // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Hit_Other_Sound;                                   // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CanPlaySoundVelocitySize;                          // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoundVelocityCurveUnitRate;                        // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoHitVelocity;                                     // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDeltaMoveSpeed;                                 // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             K2Node_Event_HitResult;                            // 0x0520(0x0088)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x05A8(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x05A9(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5AA[0x2];                                      // 0x05AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x05AC(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x05B0(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x05B4(0x000C)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x05C0(0x000C)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x05CC(0x000C)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x05D8(0x000C)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E4[0x4];                                      // 0x05E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x05E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x05F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x05F8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0600(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0608(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x060C(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0610(0x000C)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x061C(0x000C)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AJackCharacter*                         K2Node_DynamicCast_AsJack_Character;               // 0x0628(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0630(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallFunc_IsCanPlaySound_Ok;                        // 0x0631(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_632[0x2];                                      // 0x0632(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetSoundVolumeFromVelocity_Volume;        // 0x0634(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetSoundVolumeFromVelocity_Volume2;       // 0x0638(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63C[0x4];                                      // 0x063C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_HitComponent;           // 0x0640(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0648(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0650(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                K2Node_ComponentBoundEvent_NormalImpulse;          // 0x0658(0x000C)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_664[0x4];                                      // 0x0664(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_Hit;                    // 0x0668(0x0088)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AJackPlayableCharacter*                 K2Node_DynamicCast_AsJack_Playable_Character;      // 0x06F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x06F8(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6F9[0x7];                                      // 0x06F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BndEvt__StaticMesh_K2Node_ComponentBoundEvent_73_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* bpp__HitComponent__pf, class AActor* bpp__OtherActor__pf, class UPrimitiveComponent* bpp__OtherComp__pf, const struct FVector& bpp__NormalImpulse__pf, const struct FHitResult& bpp__Hit__pf__const);
	void GetSoundVolumeFromVelocity(float* bpp__Volume__pf);
	struct FVector GetVelocityFromPlayer(float bpp__VelocityRate__pf, class AActor* bpp__InputPin__pf);
	void IsCanPlaySound(const struct FVector& bpp__ImpulsePoint__pf, bool* bpp__Ok__pf);
	void LimitMoveVelocity(const struct FVector& bpp__Velocity__pf, struct FVector* bpp__ClampVelocity__pf);
	void LimitPhysicsVelocity(class UPrimitiveComponent* bpp__Primitive__pf);
	void OnDestruct();
	void OnHitPhysics(class UObject* bpp__OtherActor__pf, const struct FVector& bpp__NormalxImpulse__pfT, struct FHitResult* bpp__Hit__pf);
	void OnTouchCollide(const struct FHitResult& bpp__HitResult__pf);
	void PlaySoundLocationNotNull(class USoundBase* bpp__Sound__pf, float bpp__Volume__pf);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BP_PhysicsDestructibleBase_C">();
	}
	static class ABP_PhysicsDestructibleBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PhysicsDestructibleBase_C>();
	}
};
static_assert(alignof(ABP_PhysicsDestructibleBase_C) == 0x000008, "Wrong alignment on ABP_PhysicsDestructibleBase_C");
static_assert(sizeof(ABP_PhysicsDestructibleBase_C) == 0x000700, "Wrong size on ABP_PhysicsDestructibleBase_C");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, Destructible) == 0x0004C8, "Member 'ABP_PhysicsDestructibleBase_C::Destructible' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, StaticMesh) == 0x0004D0, "Member 'ABP_PhysicsDestructibleBase_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, DestructEffect) == 0x0004D8, "Member 'ABP_PhysicsDestructibleBase_C::DestructEffect' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, AddImpulseDirLengthFromPlayableActorHit) == 0x0004E0, "Member 'ABP_PhysicsDestructibleBase_C::AddImpulseDirLengthFromPlayableActorHit' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, IsSpecialPlayerCollide) == 0x0004E4, "Member 'ABP_PhysicsDestructibleBase_C::IsSpecialPlayerCollide' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, PlayerCollideHitAddVelolictyRate) == 0x0004E8, "Member 'ABP_PhysicsDestructibleBase_C::PlayerCollideHitAddVelolictyRate' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, AddVelocityZ) == 0x0004EC, "Member 'ABP_PhysicsDestructibleBase_C::AddVelocityZ' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, bEnableDestructionCount) == 0x0004F0, "Member 'ABP_PhysicsDestructibleBase_C::bEnableDestructionCount' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, DestructSound) == 0x0004F8, "Member 'ABP_PhysicsDestructibleBase_C::DestructSound' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, HitPlayerSound) == 0x000500, "Member 'ABP_PhysicsDestructibleBase_C::HitPlayerSound' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, Hit_Other_Sound) == 0x000508, "Member 'ABP_PhysicsDestructibleBase_C::Hit_Other_Sound' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, CanPlaySoundVelocitySize) == 0x000510, "Member 'ABP_PhysicsDestructibleBase_C::CanPlaySoundVelocitySize' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, SoundVelocityCurveUnitRate) == 0x000514, "Member 'ABP_PhysicsDestructibleBase_C::SoundVelocityCurveUnitRate' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, NoHitVelocity) == 0x000518, "Member 'ABP_PhysicsDestructibleBase_C::NoHitVelocity' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, MaxDeltaMoveSpeed) == 0x00051C, "Member 'ABP_PhysicsDestructibleBase_C::MaxDeltaMoveSpeed' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, K2Node_Event_HitResult) == 0x000520, "Member 'ABP_PhysicsDestructibleBase_C::K2Node_Event_HitResult' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, CallFunc_BreakHitResult_bBlockingHit) == 0x0005A8, "Member 'ABP_PhysicsDestructibleBase_C::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, CallFunc_BreakHitResult_bInitialOverlap) == 0x0005A9, "Member 'ABP_PhysicsDestructibleBase_C::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, CallFunc_BreakHitResult_Time) == 0x0005AC, "Member 'ABP_PhysicsDestructibleBase_C::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, CallFunc_BreakHitResult_Distance) == 0x0005B0, "Member 'ABP_PhysicsDestructibleBase_C::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, CallFunc_BreakHitResult_Location) == 0x0005B4, "Member 'ABP_PhysicsDestructibleBase_C::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, CallFunc_BreakHitResult_ImpactPoint) == 0x0005C0, "Member 'ABP_PhysicsDestructibleBase_C::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, CallFunc_BreakHitResult_Normal) == 0x0005CC, "Member 'ABP_PhysicsDestructibleBase_C::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, CallFunc_BreakHitResult_ImpactNormal) == 0x0005D8, "Member 'ABP_PhysicsDestructibleBase_C::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, CallFunc_BreakHitResult_PhysMat) == 0x0005E8, "Member 'ABP_PhysicsDestructibleBase_C::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, CallFunc_BreakHitResult_HitActor) == 0x0005F0, "Member 'ABP_PhysicsDestructibleBase_C::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, CallFunc_BreakHitResult_HitComponent) == 0x0005F8, "Member 'ABP_PhysicsDestructibleBase_C::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, CallFunc_BreakHitResult_HitBoneName) == 0x000600, "Member 'ABP_PhysicsDestructibleBase_C::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, CallFunc_BreakHitResult_HitItem) == 0x000608, "Member 'ABP_PhysicsDestructibleBase_C::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, CallFunc_BreakHitResult_FaceIndex) == 0x00060C, "Member 'ABP_PhysicsDestructibleBase_C::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, CallFunc_BreakHitResult_TraceStart) == 0x000610, "Member 'ABP_PhysicsDestructibleBase_C::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, CallFunc_BreakHitResult_TraceEnd) == 0x00061C, "Member 'ABP_PhysicsDestructibleBase_C::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, K2Node_DynamicCast_AsJack_Character) == 0x000628, "Member 'ABP_PhysicsDestructibleBase_C::K2Node_DynamicCast_AsJack_Character' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, K2Node_DynamicCast_bSuccess) == 0x000630, "Member 'ABP_PhysicsDestructibleBase_C::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, CallFunc_IsCanPlaySound_Ok) == 0x000631, "Member 'ABP_PhysicsDestructibleBase_C::CallFunc_IsCanPlaySound_Ok' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, CallFunc_GetSoundVolumeFromVelocity_Volume) == 0x000634, "Member 'ABP_PhysicsDestructibleBase_C::CallFunc_GetSoundVolumeFromVelocity_Volume' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, CallFunc_GetSoundVolumeFromVelocity_Volume2) == 0x000638, "Member 'ABP_PhysicsDestructibleBase_C::CallFunc_GetSoundVolumeFromVelocity_Volume2' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, K2Node_ComponentBoundEvent_HitComponent) == 0x000640, "Member 'ABP_PhysicsDestructibleBase_C::K2Node_ComponentBoundEvent_HitComponent' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, K2Node_ComponentBoundEvent_OtherActor) == 0x000648, "Member 'ABP_PhysicsDestructibleBase_C::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, K2Node_ComponentBoundEvent_OtherComp) == 0x000650, "Member 'ABP_PhysicsDestructibleBase_C::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, K2Node_ComponentBoundEvent_NormalImpulse) == 0x000658, "Member 'ABP_PhysicsDestructibleBase_C::K2Node_ComponentBoundEvent_NormalImpulse' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, K2Node_ComponentBoundEvent_Hit) == 0x000668, "Member 'ABP_PhysicsDestructibleBase_C::K2Node_ComponentBoundEvent_Hit' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, K2Node_DynamicCast_AsJack_Playable_Character) == 0x0006F0, "Member 'ABP_PhysicsDestructibleBase_C::K2Node_DynamicCast_AsJack_Playable_Character' has a wrong offset!");
static_assert(offsetof(ABP_PhysicsDestructibleBase_C, K2Node_DynamicCast_bSuccess2) == 0x0006F8, "Member 'ABP_PhysicsDestructibleBase_C::K2Node_DynamicCast_bSuccess2' has a wrong offset!");

}

