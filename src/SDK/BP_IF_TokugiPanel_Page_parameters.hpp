#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_IF_TokugiPanel_Page

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_IF_TokugiPanel_Page.BP_IF_TokugiPanel_Page_C.GetParts047List
// 0x0010 (0x0010 - 0x0000)
struct BP_IF_TokugiPanel_Page_C_GetParts047List final
{
public:
	TArray<class UWBP_Menu_Parts_047_modern_C*>   Parts047List;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor)
};
static_assert(alignof(BP_IF_TokugiPanel_Page_C_GetParts047List) == 0x000008, "Wrong alignment on BP_IF_TokugiPanel_Page_C_GetParts047List");
static_assert(sizeof(BP_IF_TokugiPanel_Page_C_GetParts047List) == 0x000010, "Wrong size on BP_IF_TokugiPanel_Page_C_GetParts047List");
static_assert(offsetof(BP_IF_TokugiPanel_Page_C_GetParts047List, Parts047List) == 0x000000, "Member 'BP_IF_TokugiPanel_Page_C_GetParts047List::Parts047List' has a wrong offset!");

// Function BP_IF_TokugiPanel_Page.BP_IF_TokugiPanel_Page_C.GetItemListCanvas
// 0x0008 (0x0008 - 0x0000)
struct BP_IF_TokugiPanel_Page_C_GetItemListCanvas final
{
public:
	class UCanvasPanel*                           ItemListCanvas;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IF_TokugiPanel_Page_C_GetItemListCanvas) == 0x000008, "Wrong alignment on BP_IF_TokugiPanel_Page_C_GetItemListCanvas");
static_assert(sizeof(BP_IF_TokugiPanel_Page_C_GetItemListCanvas) == 0x000008, "Wrong size on BP_IF_TokugiPanel_Page_C_GetItemListCanvas");
static_assert(offsetof(BP_IF_TokugiPanel_Page_C_GetItemListCanvas, ItemListCanvas) == 0x000000, "Member 'BP_IF_TokugiPanel_Page_C_GetItemListCanvas::ItemListCanvas' has a wrong offset!");

// Function BP_IF_TokugiPanel_Page.BP_IF_TokugiPanel_Page_C.GetParts008
// 0x0008 (0x0008 - 0x0000)
struct BP_IF_TokugiPanel_Page_C_GetParts008 final
{
public:
	class UWBP_Menu_Parts_008_modern_C*           Parts008;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IF_TokugiPanel_Page_C_GetParts008) == 0x000008, "Wrong alignment on BP_IF_TokugiPanel_Page_C_GetParts008");
static_assert(sizeof(BP_IF_TokugiPanel_Page_C_GetParts008) == 0x000008, "Wrong size on BP_IF_TokugiPanel_Page_C_GetParts008");
static_assert(offsetof(BP_IF_TokugiPanel_Page_C_GetParts008, Parts008) == 0x000000, "Member 'BP_IF_TokugiPanel_Page_C_GetParts008::Parts008' has a wrong offset!");

// Function BP_IF_TokugiPanel_Page.BP_IF_TokugiPanel_Page_C.GetParts059
// 0x0008 (0x0008 - 0x0000)
struct BP_IF_TokugiPanel_Page_C_GetParts059 final
{
public:
	class UWBP_Menu_Parts_059_modern_C*           Parts059;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IF_TokugiPanel_Page_C_GetParts059) == 0x000008, "Wrong alignment on BP_IF_TokugiPanel_Page_C_GetParts059");
static_assert(sizeof(BP_IF_TokugiPanel_Page_C_GetParts059) == 0x000008, "Wrong size on BP_IF_TokugiPanel_Page_C_GetParts059");
static_assert(offsetof(BP_IF_TokugiPanel_Page_C_GetParts059, Parts059) == 0x000000, "Member 'BP_IF_TokugiPanel_Page_C_GetParts059::Parts059' has a wrong offset!");

// Function BP_IF_TokugiPanel_Page.BP_IF_TokugiPanel_Page_C.GetMatomeIconList
// 0x0010 (0x0010 - 0x0000)
struct BP_IF_TokugiPanel_Page_C_GetMatomeIconList final
{
public:
	TArray<class UUserWidget*>                    MatomeIconList;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor)
};
static_assert(alignof(BP_IF_TokugiPanel_Page_C_GetMatomeIconList) == 0x000008, "Wrong alignment on BP_IF_TokugiPanel_Page_C_GetMatomeIconList");
static_assert(sizeof(BP_IF_TokugiPanel_Page_C_GetMatomeIconList) == 0x000010, "Wrong size on BP_IF_TokugiPanel_Page_C_GetMatomeIconList");
static_assert(offsetof(BP_IF_TokugiPanel_Page_C_GetMatomeIconList, MatomeIconList) == 0x000000, "Member 'BP_IF_TokugiPanel_Page_C_GetMatomeIconList::MatomeIconList' has a wrong offset!");

// Function BP_IF_TokugiPanel_Page.BP_IF_TokugiPanel_Page_C.GetParts000_Ok
// 0x0008 (0x0008 - 0x0000)
struct BP_IF_TokugiPanel_Page_C_GetParts000_Ok final
{
public:
	class UWBP_Menu_Parts_000_modern_C*           Parts000_Ok;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IF_TokugiPanel_Page_C_GetParts000_Ok) == 0x000008, "Wrong alignment on BP_IF_TokugiPanel_Page_C_GetParts000_Ok");
static_assert(sizeof(BP_IF_TokugiPanel_Page_C_GetParts000_Ok) == 0x000008, "Wrong size on BP_IF_TokugiPanel_Page_C_GetParts000_Ok");
static_assert(offsetof(BP_IF_TokugiPanel_Page_C_GetParts000_Ok, Parts000_Ok) == 0x000000, "Member 'BP_IF_TokugiPanel_Page_C_GetParts000_Ok::Parts000_Ok' has a wrong offset!");

// Function BP_IF_TokugiPanel_Page.BP_IF_TokugiPanel_Page_C.GetParts019
// 0x0010 (0x0010 - 0x0000)
struct BP_IF_TokugiPanel_Page_C_GetParts019 final
{
public:
	class UWBP_Menu_Parts_019_C*                  Parts019_L;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_Menu_Parts_019_C*                  Parts019_R;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IF_TokugiPanel_Page_C_GetParts019) == 0x000008, "Wrong alignment on BP_IF_TokugiPanel_Page_C_GetParts019");
static_assert(sizeof(BP_IF_TokugiPanel_Page_C_GetParts019) == 0x000010, "Wrong size on BP_IF_TokugiPanel_Page_C_GetParts019");
static_assert(offsetof(BP_IF_TokugiPanel_Page_C_GetParts019, Parts019_L) == 0x000000, "Member 'BP_IF_TokugiPanel_Page_C_GetParts019::Parts019_L' has a wrong offset!");
static_assert(offsetof(BP_IF_TokugiPanel_Page_C_GetParts019, Parts019_R) == 0x000008, "Member 'BP_IF_TokugiPanel_Page_C_GetParts019::Parts019_R' has a wrong offset!");

// Function BP_IF_TokugiPanel_Page.BP_IF_TokugiPanel_Page_C.GetSkillInfo
// 0x0008 (0x0008 - 0x0000)
struct BP_IF_TokugiPanel_Page_C_GetSkillInfo final
{
public:
	class UWBP_Menu_Tokugi_SkillInfoBase_modern_C* SkillInfo;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IF_TokugiPanel_Page_C_GetSkillInfo) == 0x000008, "Wrong alignment on BP_IF_TokugiPanel_Page_C_GetSkillInfo");
static_assert(sizeof(BP_IF_TokugiPanel_Page_C_GetSkillInfo) == 0x000008, "Wrong size on BP_IF_TokugiPanel_Page_C_GetSkillInfo");
static_assert(offsetof(BP_IF_TokugiPanel_Page_C_GetSkillInfo, SkillInfo) == 0x000000, "Member 'BP_IF_TokugiPanel_Page_C_GetSkillInfo::SkillInfo' has a wrong offset!");

// Function BP_IF_TokugiPanel_Page.BP_IF_TokugiPanel_Page_C.SetSkillLineName
// 0x0010 (0x0010 - 0x0000)
struct BP_IF_TokugiPanel_Page_C_SetSkillLineName final
{
public:
	class FString                                 SkillLineName;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IF_TokugiPanel_Page_C_SetSkillLineName) == 0x000008, "Wrong alignment on BP_IF_TokugiPanel_Page_C_SetSkillLineName");
static_assert(sizeof(BP_IF_TokugiPanel_Page_C_SetSkillLineName) == 0x000010, "Wrong size on BP_IF_TokugiPanel_Page_C_SetSkillLineName");
static_assert(offsetof(BP_IF_TokugiPanel_Page_C_SetSkillLineName, SkillLineName) == 0x000000, "Member 'BP_IF_TokugiPanel_Page_C_SetSkillLineName::SkillLineName' has a wrong offset!");

// Function BP_IF_TokugiPanel_Page.BP_IF_TokugiPanel_Page_C.SetSkillPoint
// 0x0004 (0x0004 - 0x0000)
struct BP_IF_TokugiPanel_Page_C_SetSkillPoint final
{
public:
	int32                                         Skillpoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IF_TokugiPanel_Page_C_SetSkillPoint) == 0x000004, "Wrong alignment on BP_IF_TokugiPanel_Page_C_SetSkillPoint");
static_assert(sizeof(BP_IF_TokugiPanel_Page_C_SetSkillPoint) == 0x000004, "Wrong size on BP_IF_TokugiPanel_Page_C_SetSkillPoint");
static_assert(offsetof(BP_IF_TokugiPanel_Page_C_SetSkillPoint, Skillpoint) == 0x000000, "Member 'BP_IF_TokugiPanel_Page_C_SetSkillPoint::Skillpoint' has a wrong offset!");

}

