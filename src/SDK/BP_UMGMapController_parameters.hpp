#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UMGMapController

#include "Basic.hpp"

#include "JackGame_structs.hpp"


namespace SDK::Params
{

// Function BP_UMGMapController.BP_UMGMapController_C.ExecuteUbergraph_BP_UMGMapController
// 0x000C (0x000C - 0x0000)
struct BP_UMGMapController_C_ExecuteUbergraph_BP_UMGMapController final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTime;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bAssetLoadingNow;                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_UMGMapController_C_ExecuteUbergraph_BP_UMGMapController) == 0x000004, "Wrong alignment on BP_UMGMapController_C_ExecuteUbergraph_BP_UMGMapController");
static_assert(sizeof(BP_UMGMapController_C_ExecuteUbergraph_BP_UMGMapController) == 0x00000C, "Wrong size on BP_UMGMapController_C_ExecuteUbergraph_BP_UMGMapController");
static_assert(offsetof(BP_UMGMapController_C_ExecuteUbergraph_BP_UMGMapController, EntryPoint) == 0x000000, "Member 'BP_UMGMapController_C_ExecuteUbergraph_BP_UMGMapController::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_ExecuteUbergraph_BP_UMGMapController, K2Node_Event_DeltaTime) == 0x000004, "Member 'BP_UMGMapController_C_ExecuteUbergraph_BP_UMGMapController::K2Node_Event_DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_ExecuteUbergraph_BP_UMGMapController, K2Node_Event_bAssetLoadingNow) == 0x000008, "Member 'BP_UMGMapController_C_ExecuteUbergraph_BP_UMGMapController::K2Node_Event_bAssetLoadingNow' has a wrong offset!");

// Function BP_UMGMapController.BP_UMGMapController_C.OnUpdate
// 0x0008 (0x0008 - 0x0000)
struct BP_UMGMapController_C_OnUpdate final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAssetLoadingNow;                                  // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_UMGMapController_C_OnUpdate) == 0x000004, "Wrong alignment on BP_UMGMapController_C_OnUpdate");
static_assert(sizeof(BP_UMGMapController_C_OnUpdate) == 0x000008, "Wrong size on BP_UMGMapController_C_OnUpdate");
static_assert(offsetof(BP_UMGMapController_C_OnUpdate, DeltaTime) == 0x000000, "Member 'BP_UMGMapController_C_OnUpdate::DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_OnUpdate, bAssetLoadingNow) == 0x000004, "Member 'BP_UMGMapController_C_OnUpdate::bAssetLoadingNow' has a wrong offset!");

// Function BP_UMGMapController.BP_UMGMapController_C.GetMapSymbolType
// 0x0070 (0x0070 - 0x0000)
struct BP_UMGMapController_C_GetMapSymbolType final
{
public:
	class AActor*                                 NPC;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackMapSymbol                                MapSymbol;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackMapSymbol                                Symbol;                                            // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AJackScheduledNPC*                      K2Node_DynamicCast_AsJack_Scheduled_NPC;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_COMP_FacilityBase_C*>        CallFunc_GetComponentsByClass_ReturnValue;         // 0x0020(0x0010)(ZeroConstructor, ReferenceParm)
	EJackNPCImportance                            CallFunc_GetImportance_ReturnValue;                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_COMP_FacilityBase_C*                CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackMapSymbol                                CallFunc_GetMapSymbolByFacilityComponent_MapSymbol; // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_COMP_Shop_C*                        K2Node_DynamicCast_AsBP_COMP_Shop;                 // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EJackMapSymbol                                CallFunc_GetMapSymbolByShopComponent_MapSymbol;    // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_UMGMapController_C_GetMapSymbolType) == 0x000008, "Wrong alignment on BP_UMGMapController_C_GetMapSymbolType");
static_assert(sizeof(BP_UMGMapController_C_GetMapSymbolType) == 0x000070, "Wrong size on BP_UMGMapController_C_GetMapSymbolType");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolType, NPC) == 0x000000, "Member 'BP_UMGMapController_C_GetMapSymbolType::NPC' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolType, MapSymbol) == 0x000008, "Member 'BP_UMGMapController_C_GetMapSymbolType::MapSymbol' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolType, Symbol) == 0x000009, "Member 'BP_UMGMapController_C_GetMapSymbolType::Symbol' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolType, K2Node_DynamicCast_AsJack_Scheduled_NPC) == 0x000010, "Member 'BP_UMGMapController_C_GetMapSymbolType::K2Node_DynamicCast_AsJack_Scheduled_NPC' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolType, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_UMGMapController_C_GetMapSymbolType::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolType, CallFunc_GetComponentsByClass_ReturnValue) == 0x000020, "Member 'BP_UMGMapController_C_GetMapSymbolType::CallFunc_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolType, CallFunc_GetImportance_ReturnValue) == 0x000030, "Member 'BP_UMGMapController_C_GetMapSymbolType::CallFunc_GetImportance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolType, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_UMGMapController_C_GetMapSymbolType::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolType, K2Node_SwitchEnum_CmpSuccess) == 0x000040, "Member 'BP_UMGMapController_C_GetMapSymbolType::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolType, CallFunc_GetObjectClass_ReturnValue) == 0x000048, "Member 'BP_UMGMapController_C_GetMapSymbolType::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolType, CallFunc_GetMapSymbolByFacilityComponent_MapSymbol) == 0x000050, "Member 'BP_UMGMapController_C_GetMapSymbolType::CallFunc_GetMapSymbolByFacilityComponent_MapSymbol' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolType, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x000051, "Member 'BP_UMGMapController_C_GetMapSymbolType::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolType, K2Node_DynamicCast_AsBP_COMP_Shop) == 0x000058, "Member 'BP_UMGMapController_C_GetMapSymbolType::K2Node_DynamicCast_AsBP_COMP_Shop' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolType, K2Node_DynamicCast_bSuccess2) == 0x000060, "Member 'BP_UMGMapController_C_GetMapSymbolType::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolType, CallFunc_GetMapSymbolByShopComponent_MapSymbol) == 0x000061, "Member 'BP_UMGMapController_C_GetMapSymbolType::CallFunc_GetMapSymbolByShopComponent_MapSymbol' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolType, CallFunc_Array_Length_ReturnValue) == 0x000064, "Member 'BP_UMGMapController_C_GetMapSymbolType::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolType, CallFunc_Greater_IntInt_ReturnValue) == 0x000068, "Member 'BP_UMGMapController_C_GetMapSymbolType::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_UMGMapController.BP_UMGMapController_C.GetMapSymbolByShopComponent
// 0x0110 (0x0110 - 0x0000)
struct BP_UMGMapController_C_GetMapSymbolByShopComponent final
{
public:
	class UBP_COMP_Shop_C*                        ShopComponent;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackMapSymbol                                MapSymbol;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackMapSymbol                                Symbol;                                            // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackDataTableShop                     CallFunc_GetDataTableRowFromName_OutRow;           // 0x0010(0x00F8)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_UMGMapController_C_GetMapSymbolByShopComponent) == 0x000008, "Wrong alignment on BP_UMGMapController_C_GetMapSymbolByShopComponent");
static_assert(sizeof(BP_UMGMapController_C_GetMapSymbolByShopComponent) == 0x000110, "Wrong size on BP_UMGMapController_C_GetMapSymbolByShopComponent");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolByShopComponent, ShopComponent) == 0x000000, "Member 'BP_UMGMapController_C_GetMapSymbolByShopComponent::ShopComponent' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolByShopComponent, MapSymbol) == 0x000008, "Member 'BP_UMGMapController_C_GetMapSymbolByShopComponent::MapSymbol' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolByShopComponent, Symbol) == 0x000009, "Member 'BP_UMGMapController_C_GetMapSymbolByShopComponent::Symbol' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolByShopComponent, CallFunc_GetDataTableRowFromName_OutRow) == 0x000010, "Member 'BP_UMGMapController_C_GetMapSymbolByShopComponent::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolByShopComponent, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000108, "Member 'BP_UMGMapController_C_GetMapSymbolByShopComponent::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolByShopComponent, K2Node_SwitchEnum_CmpSuccess) == 0x000109, "Member 'BP_UMGMapController_C_GetMapSymbolByShopComponent::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_UMGMapController.BP_UMGMapController_C.GetMapSymbolByFacilityComponent
// 0x0050 (0x0050 - 0x0000)
struct BP_UMGMapController_C_GetMapSymbolByFacilityComponent final
{
public:
	class UBP_COMP_FacilityBase_C*                FacilityComponent;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackMapSymbol                                MapSymbol;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackMapSymbol                                Symbol;                                            // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue2;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue2;       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue3;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue3;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue4;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue4;       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_UMGMapController_C_GetMapSymbolByFacilityComponent) == 0x000008, "Wrong alignment on BP_UMGMapController_C_GetMapSymbolByFacilityComponent");
static_assert(sizeof(BP_UMGMapController_C_GetMapSymbolByFacilityComponent) == 0x000050, "Wrong size on BP_UMGMapController_C_GetMapSymbolByFacilityComponent");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolByFacilityComponent, FacilityComponent) == 0x000000, "Member 'BP_UMGMapController_C_GetMapSymbolByFacilityComponent::FacilityComponent' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolByFacilityComponent, MapSymbol) == 0x000008, "Member 'BP_UMGMapController_C_GetMapSymbolByFacilityComponent::MapSymbol' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolByFacilityComponent, Symbol) == 0x000009, "Member 'BP_UMGMapController_C_GetMapSymbolByFacilityComponent::Symbol' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolByFacilityComponent, CallFunc_GetObjectClass_ReturnValue) == 0x000010, "Member 'BP_UMGMapController_C_GetMapSymbolByFacilityComponent::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolByFacilityComponent, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x000018, "Member 'BP_UMGMapController_C_GetMapSymbolByFacilityComponent::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolByFacilityComponent, CallFunc_GetObjectClass_ReturnValue2) == 0x000020, "Member 'BP_UMGMapController_C_GetMapSymbolByFacilityComponent::CallFunc_GetObjectClass_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolByFacilityComponent, CallFunc_EqualEqual_ClassClass_ReturnValue2) == 0x000028, "Member 'BP_UMGMapController_C_GetMapSymbolByFacilityComponent::CallFunc_EqualEqual_ClassClass_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolByFacilityComponent, CallFunc_GetObjectClass_ReturnValue3) == 0x000030, "Member 'BP_UMGMapController_C_GetMapSymbolByFacilityComponent::CallFunc_GetObjectClass_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolByFacilityComponent, CallFunc_EqualEqual_ClassClass_ReturnValue3) == 0x000038, "Member 'BP_UMGMapController_C_GetMapSymbolByFacilityComponent::CallFunc_EqualEqual_ClassClass_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolByFacilityComponent, CallFunc_GetObjectClass_ReturnValue4) == 0x000040, "Member 'BP_UMGMapController_C_GetMapSymbolByFacilityComponent::CallFunc_GetObjectClass_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolByFacilityComponent, CallFunc_EqualEqual_ClassClass_ReturnValue4) == 0x000048, "Member 'BP_UMGMapController_C_GetMapSymbolByFacilityComponent::CallFunc_EqualEqual_ClassClass_ReturnValue4' has a wrong offset!");

// Function BP_UMGMapController.BP_UMGMapController_C.DetermineMapSymbolVisible
// 0x0028 (0x0028 - 0x0000)
struct BP_UMGMapController_C_DetermineMapSymbolVisible final
{
public:
	class UJackMiniMapTargetComponent*            Component;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Visible;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetVisible;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EJackVehicle                                  CallFunc_GetPlayerRidingVehicleType_ReturnValue;   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJackVehicle*                           K2Node_DynamicCast_AsJack_Vehicle;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVehicleSymbol_ReturnValue;              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_UMGMapController_C_DetermineMapSymbolVisible) == 0x000008, "Wrong alignment on BP_UMGMapController_C_DetermineMapSymbolVisible");
static_assert(sizeof(BP_UMGMapController_C_DetermineMapSymbolVisible) == 0x000028, "Wrong size on BP_UMGMapController_C_DetermineMapSymbolVisible");
static_assert(offsetof(BP_UMGMapController_C_DetermineMapSymbolVisible, Component) == 0x000000, "Member 'BP_UMGMapController_C_DetermineMapSymbolVisible::Component' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_DetermineMapSymbolVisible, Visible) == 0x000008, "Member 'BP_UMGMapController_C_DetermineMapSymbolVisible::Visible' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_DetermineMapSymbolVisible, RetVisible) == 0x000009, "Member 'BP_UMGMapController_C_DetermineMapSymbolVisible::RetVisible' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_DetermineMapSymbolVisible, CallFunc_GetPlayerRidingVehicleType_ReturnValue) == 0x00000A, "Member 'BP_UMGMapController_C_DetermineMapSymbolVisible::CallFunc_GetPlayerRidingVehicleType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_DetermineMapSymbolVisible, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000B, "Member 'BP_UMGMapController_C_DetermineMapSymbolVisible::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_DetermineMapSymbolVisible, CallFunc_BooleanAND_ReturnValue) == 0x00000C, "Member 'BP_UMGMapController_C_DetermineMapSymbolVisible::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_DetermineMapSymbolVisible, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BP_UMGMapController_C_DetermineMapSymbolVisible::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_DetermineMapSymbolVisible, K2Node_DynamicCast_AsJack_Vehicle) == 0x000018, "Member 'BP_UMGMapController_C_DetermineMapSymbolVisible::K2Node_DynamicCast_AsJack_Vehicle' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_DetermineMapSymbolVisible, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_UMGMapController_C_DetermineMapSymbolVisible::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_DetermineMapSymbolVisible, CallFunc_IsVehicleSymbol_ReturnValue) == 0x000021, "Member 'BP_UMGMapController_C_DetermineMapSymbolVisible::CallFunc_IsVehicleSymbol_ReturnValue' has a wrong offset!");

// Function BP_UMGMapController.BP_UMGMapController_C.IsMapTextImageItem
// 0x0020 (0x0020 - 0x0000)
struct BP_UMGMapController_C_IsMapTextImageItem final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_UMGMapController_C_IsMapTextImageItem) == 0x000008, "Wrong alignment on BP_UMGMapController_C_IsMapTextImageItem");
static_assert(sizeof(BP_UMGMapController_C_IsMapTextImageItem) == 0x000020, "Wrong size on BP_UMGMapController_C_IsMapTextImageItem");
static_assert(offsetof(BP_UMGMapController_C_IsMapTextImageItem, Widget) == 0x000000, "Member 'BP_UMGMapController_C_IsMapTextImageItem::Widget' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_IsMapTextImageItem, ReturnValue) == 0x000008, "Member 'BP_UMGMapController_C_IsMapTextImageItem::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_IsMapTextImageItem, CallFunc_GetObjectClass_ReturnValue) == 0x000010, "Member 'BP_UMGMapController_C_IsMapTextImageItem::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_IsMapTextImageItem, CallFunc_ClassIsChildOf_ReturnValue) == 0x000018, "Member 'BP_UMGMapController_C_IsMapTextImageItem::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");

// Function BP_UMGMapController.BP_UMGMapController_C.GetMapSymbolTypeListForMapMode
// 0x00B8 (0x00B8 - 0x0000)
struct BP_UMGMapController_C_GetMapSymbolTypeListForMapMode final
{
public:
	EJackWorldMapState                            WorldMapState;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EJackMapSymbol>                        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm)
	TArray<EJackMapSymbol>                        MapSymbolList;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<EJackMapSymbol>                        K2Node_MakeArray_Array;                            // 0x0028(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TestsWorldMapState_ReturnValue;           // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EJackMapSymbol>                        K2Node_MakeArray_Array2;                           // 0x0040(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<EJackMapSymbol>                        K2Node_MakeArray_Array3;                           // 0x0050(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<EJackMapSymbol>                        K2Node_MakeArray_Array4;                           // 0x0060(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<EJackMapSymbol>                        K2Node_MakeArray_Array5;                           // 0x0070(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EJackMapSymbol>                        K2Node_MakeArray_Array6;                           // 0x0088(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<EJackMapSymbol>                        K2Node_MakeArray_Array7;                           // 0x0098(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<EJackMapSymbol>                        K2Node_MakeArray_Array8;                           // 0x00A8(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(BP_UMGMapController_C_GetMapSymbolTypeListForMapMode) == 0x000008, "Wrong alignment on BP_UMGMapController_C_GetMapSymbolTypeListForMapMode");
static_assert(sizeof(BP_UMGMapController_C_GetMapSymbolTypeListForMapMode) == 0x0000B8, "Wrong size on BP_UMGMapController_C_GetMapSymbolTypeListForMapMode");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolTypeListForMapMode, WorldMapState) == 0x000000, "Member 'BP_UMGMapController_C_GetMapSymbolTypeListForMapMode::WorldMapState' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolTypeListForMapMode, ReturnValue) == 0x000008, "Member 'BP_UMGMapController_C_GetMapSymbolTypeListForMapMode::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolTypeListForMapMode, MapSymbolList) == 0x000018, "Member 'BP_UMGMapController_C_GetMapSymbolTypeListForMapMode::MapSymbolList' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolTypeListForMapMode, K2Node_MakeArray_Array) == 0x000028, "Member 'BP_UMGMapController_C_GetMapSymbolTypeListForMapMode::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolTypeListForMapMode, K2Node_SwitchEnum_CmpSuccess) == 0x000038, "Member 'BP_UMGMapController_C_GetMapSymbolTypeListForMapMode::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolTypeListForMapMode, CallFunc_TestsWorldMapState_ReturnValue) == 0x000039, "Member 'BP_UMGMapController_C_GetMapSymbolTypeListForMapMode::CallFunc_TestsWorldMapState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolTypeListForMapMode, K2Node_MakeArray_Array2) == 0x000040, "Member 'BP_UMGMapController_C_GetMapSymbolTypeListForMapMode::K2Node_MakeArray_Array2' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolTypeListForMapMode, K2Node_MakeArray_Array3) == 0x000050, "Member 'BP_UMGMapController_C_GetMapSymbolTypeListForMapMode::K2Node_MakeArray_Array3' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolTypeListForMapMode, K2Node_MakeArray_Array4) == 0x000060, "Member 'BP_UMGMapController_C_GetMapSymbolTypeListForMapMode::K2Node_MakeArray_Array4' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolTypeListForMapMode, K2Node_MakeArray_Array5) == 0x000070, "Member 'BP_UMGMapController_C_GetMapSymbolTypeListForMapMode::K2Node_MakeArray_Array5' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolTypeListForMapMode, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000080, "Member 'BP_UMGMapController_C_GetMapSymbolTypeListForMapMode::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolTypeListForMapMode, K2Node_MakeArray_Array6) == 0x000088, "Member 'BP_UMGMapController_C_GetMapSymbolTypeListForMapMode::K2Node_MakeArray_Array6' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolTypeListForMapMode, K2Node_MakeArray_Array7) == 0x000098, "Member 'BP_UMGMapController_C_GetMapSymbolTypeListForMapMode::K2Node_MakeArray_Array7' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_GetMapSymbolTypeListForMapMode, K2Node_MakeArray_Array8) == 0x0000A8, "Member 'BP_UMGMapController_C_GetMapSymbolTypeListForMapMode::K2Node_MakeArray_Array8' has a wrong offset!");

// Function BP_UMGMapController.BP_UMGMapController_C.IsBoukenGuideVisibilityToggleEnabled
// 0x0003 (0x0003 - 0x0000)
struct BP_UMGMapController_C_IsBoukenGuideVisibilityToggleEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TestsWorldMapStates_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_UMGMapController_C_IsBoukenGuideVisibilityToggleEnabled) == 0x000001, "Wrong alignment on BP_UMGMapController_C_IsBoukenGuideVisibilityToggleEnabled");
static_assert(sizeof(BP_UMGMapController_C_IsBoukenGuideVisibilityToggleEnabled) == 0x000003, "Wrong size on BP_UMGMapController_C_IsBoukenGuideVisibilityToggleEnabled");
static_assert(offsetof(BP_UMGMapController_C_IsBoukenGuideVisibilityToggleEnabled, ReturnValue) == 0x000000, "Member 'BP_UMGMapController_C_IsBoukenGuideVisibilityToggleEnabled::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_IsBoukenGuideVisibilityToggleEnabled, CallFunc_TestsWorldMapStates_ReturnValue) == 0x000001, "Member 'BP_UMGMapController_C_IsBoukenGuideVisibilityToggleEnabled::CallFunc_TestsWorldMapStates_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_IsBoukenGuideVisibilityToggleEnabled, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'BP_UMGMapController_C_IsBoukenGuideVisibilityToggleEnabled::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_UMGMapController.BP_UMGMapController_C.IsMapSymbolVisibilityToggleEnabled
// 0x0003 (0x0003 - 0x0000)
struct BP_UMGMapController_C_IsMapSymbolVisibilityToggleEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TestsWorldMapStates_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_UMGMapController_C_IsMapSymbolVisibilityToggleEnabled) == 0x000001, "Wrong alignment on BP_UMGMapController_C_IsMapSymbolVisibilityToggleEnabled");
static_assert(sizeof(BP_UMGMapController_C_IsMapSymbolVisibilityToggleEnabled) == 0x000003, "Wrong size on BP_UMGMapController_C_IsMapSymbolVisibilityToggleEnabled");
static_assert(offsetof(BP_UMGMapController_C_IsMapSymbolVisibilityToggleEnabled, ReturnValue) == 0x000000, "Member 'BP_UMGMapController_C_IsMapSymbolVisibilityToggleEnabled::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_IsMapSymbolVisibilityToggleEnabled, CallFunc_TestsWorldMapStates_ReturnValue) == 0x000001, "Member 'BP_UMGMapController_C_IsMapSymbolVisibilityToggleEnabled::CallFunc_TestsWorldMapStates_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_IsMapSymbolVisibilityToggleEnabled, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'BP_UMGMapController_C_IsMapSymbolVisibilityToggleEnabled::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_UMGMapController.BP_UMGMapController_C.IsShipAvailable
// 0x0020 (0x0020 - 0x0000)
struct BP_UMGMapController_C_IsShipAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackSaveData*                          CallFunc_GetSaveData_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetGameFlagBool_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EJackScenarioGroup                            CallFunc_GetActiveScenarioGroup_ReturnValue;       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetGameFlagBool_ReturnValue2;             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetGameFlagBool_ReturnValue3;             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue3;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_UMGMapController_C_IsShipAvailable) == 0x000008, "Wrong alignment on BP_UMGMapController_C_IsShipAvailable");
static_assert(sizeof(BP_UMGMapController_C_IsShipAvailable) == 0x000020, "Wrong size on BP_UMGMapController_C_IsShipAvailable");
static_assert(offsetof(BP_UMGMapController_C_IsShipAvailable, ReturnValue) == 0x000000, "Member 'BP_UMGMapController_C_IsShipAvailable::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_IsShipAvailable, CallFunc_GetSaveData_ReturnValue) == 0x000008, "Member 'BP_UMGMapController_C_IsShipAvailable::CallFunc_GetSaveData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_IsShipAvailable, CallFunc_GetGameFlagBool_ReturnValue) == 0x000010, "Member 'BP_UMGMapController_C_IsShipAvailable::CallFunc_GetGameFlagBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_IsShipAvailable, CallFunc_GetActiveScenarioGroup_ReturnValue) == 0x000011, "Member 'BP_UMGMapController_C_IsShipAvailable::CallFunc_GetActiveScenarioGroup_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_IsShipAvailable, CallFunc_GetGameFlagBool_ReturnValue2) == 0x000012, "Member 'BP_UMGMapController_C_IsShipAvailable::CallFunc_GetGameFlagBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_IsShipAvailable, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000013, "Member 'BP_UMGMapController_C_IsShipAvailable::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_IsShipAvailable, CallFunc_Not_PreBool_ReturnValue) == 0x000014, "Member 'BP_UMGMapController_C_IsShipAvailable::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_IsShipAvailable, CallFunc_BooleanAND_ReturnValue) == 0x000015, "Member 'BP_UMGMapController_C_IsShipAvailable::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_IsShipAvailable, CallFunc_GetGameFlagBool_ReturnValue3) == 0x000016, "Member 'BP_UMGMapController_C_IsShipAvailable::CallFunc_GetGameFlagBool_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_IsShipAvailable, CallFunc_BooleanAND_ReturnValue2) == 0x000017, "Member 'BP_UMGMapController_C_IsShipAvailable::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_IsShipAvailable, CallFunc_BooleanAND_ReturnValue3) == 0x000018, "Member 'BP_UMGMapController_C_IsShipAvailable::CallFunc_BooleanAND_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_UMGMapController_C_IsShipAvailable, CallFunc_BooleanOR_ReturnValue) == 0x000019, "Member 'BP_UMGMapController_C_IsShipAvailable::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

}

