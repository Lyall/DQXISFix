#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WhaleSpot

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "JackGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WhaleSpot.BP_WhaleSpot_C
// 0x0080 (0x0418 - 0x0398)
class ABP_WhaleSpot_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0398(0x0008)(Transient, DuplicateTransient)
	class UJackMiniMapTargetComponent*            JackMiniMapTarget;                                 // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_COMP_WorldBroken_C*                 BP_COMP_WorldBroken;                               // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UJackSphereComponent*                   JackSphere;                                        // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FJackLDT_MapStart                      JumpTag;                                           // 0x03C0(0x0010)(Edit, BlueprintVisible, NoDestructor)
	bool                                          bUseFlute;                                         // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D1[0x7];                                      // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackLDT_MapStart                      MapStart;                                          // 0x03D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class ACameraActor*                           Camera2;                                           // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LerpWait;                                          // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraWorkTime;                                    // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 StartPoint;                                        // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 EndPoint;                                          // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableMapJump;                                     // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_409[0x3];                                      // 0x0409(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForSecondCameraDelay;                              // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   UseJumpTag;                                        // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_WhaleSpot(int32 EntryPoint);
	void ChangeCutSceneFlag(const struct FJackLDT_GameFlagDataCutScene& CutSceneFlag);
	void MapJumpBeginPlay();
	void ReceiveBeginPlay();
	void OnUnpossessPlayerControlDelegate_Event_0();
	void CustomEvent_1();
	void CustomEvent_0(class AActor* PlayerActor, class AActor* ControlActor);
	void BndEvt__JackSphere_K2Node_ComponentBoundEvent_135_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__JackSphere_K2Node_ComponentBoundEvent_132_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void MapJumpEndPlay();
	void ChangeSystemFlag();
	void ChangeQuestProgressFlag();
	void ChangeScenarioFlag(const struct FJackLDT_GameFlagDataScenario& ScenarioFlag);
	void UserConstructionScript();
	void SetJumpTag();
	void CheckCutSceneFlag();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WhaleSpot_C">();
	}
	static class ABP_WhaleSpot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WhaleSpot_C>();
	}
};
static_assert(alignof(ABP_WhaleSpot_C) == 0x000008, "Wrong alignment on ABP_WhaleSpot_C");
static_assert(sizeof(ABP_WhaleSpot_C) == 0x000418, "Wrong size on ABP_WhaleSpot_C");
static_assert(offsetof(ABP_WhaleSpot_C, UberGraphFrame) == 0x000398, "Member 'ABP_WhaleSpot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_WhaleSpot_C, JackMiniMapTarget) == 0x0003A0, "Member 'ABP_WhaleSpot_C::JackMiniMapTarget' has a wrong offset!");
static_assert(offsetof(ABP_WhaleSpot_C, BP_COMP_WorldBroken) == 0x0003A8, "Member 'ABP_WhaleSpot_C::BP_COMP_WorldBroken' has a wrong offset!");
static_assert(offsetof(ABP_WhaleSpot_C, JackSphere) == 0x0003B0, "Member 'ABP_WhaleSpot_C::JackSphere' has a wrong offset!");
static_assert(offsetof(ABP_WhaleSpot_C, DefaultSceneRoot) == 0x0003B8, "Member 'ABP_WhaleSpot_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_WhaleSpot_C, JumpTag) == 0x0003C0, "Member 'ABP_WhaleSpot_C::JumpTag' has a wrong offset!");
static_assert(offsetof(ABP_WhaleSpot_C, bUseFlute) == 0x0003D0, "Member 'ABP_WhaleSpot_C::bUseFlute' has a wrong offset!");
static_assert(offsetof(ABP_WhaleSpot_C, MapStart) == 0x0003D8, "Member 'ABP_WhaleSpot_C::MapStart' has a wrong offset!");
static_assert(offsetof(ABP_WhaleSpot_C, Camera2) == 0x0003E8, "Member 'ABP_WhaleSpot_C::Camera2' has a wrong offset!");
static_assert(offsetof(ABP_WhaleSpot_C, LerpWait) == 0x0003F0, "Member 'ABP_WhaleSpot_C::LerpWait' has a wrong offset!");
static_assert(offsetof(ABP_WhaleSpot_C, CameraWorkTime) == 0x0003F4, "Member 'ABP_WhaleSpot_C::CameraWorkTime' has a wrong offset!");
static_assert(offsetof(ABP_WhaleSpot_C, StartPoint) == 0x0003F8, "Member 'ABP_WhaleSpot_C::StartPoint' has a wrong offset!");
static_assert(offsetof(ABP_WhaleSpot_C, EndPoint) == 0x000400, "Member 'ABP_WhaleSpot_C::EndPoint' has a wrong offset!");
static_assert(offsetof(ABP_WhaleSpot_C, EnableMapJump) == 0x000408, "Member 'ABP_WhaleSpot_C::EnableMapJump' has a wrong offset!");
static_assert(offsetof(ABP_WhaleSpot_C, ForSecondCameraDelay) == 0x00040C, "Member 'ABP_WhaleSpot_C::ForSecondCameraDelay' has a wrong offset!");
static_assert(offsetof(ABP_WhaleSpot_C, UseJumpTag) == 0x000410, "Member 'ABP_WhaleSpot_C::UseJumpTag' has a wrong offset!");

}

