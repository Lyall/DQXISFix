#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Serialization

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct Serialization.StructSerializerNumericTestStruct
// 0x0030 (0x0030 - 0x0000)
struct FStructSerializerNumericTestStruct final
{
public:
	int8                                          Int8;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x1];                                        // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int16                                         Int16;                                             // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Int32;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Int64;                                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UInt8;                                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x1];                                       // 0x0011(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        UInt16;                                            // 0x0012(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        UInt32;                                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        UInt64;                                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float;                                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Double;                                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStructSerializerNumericTestStruct) == 0x000008, "Wrong alignment on FStructSerializerNumericTestStruct");
static_assert(sizeof(FStructSerializerNumericTestStruct) == 0x000030, "Wrong size on FStructSerializerNumericTestStruct");
static_assert(offsetof(FStructSerializerNumericTestStruct, Int8) == 0x000000, "Member 'FStructSerializerNumericTestStruct::Int8' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, Int16) == 0x000002, "Member 'FStructSerializerNumericTestStruct::Int16' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, Int32) == 0x000004, "Member 'FStructSerializerNumericTestStruct::Int32' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, Int64) == 0x000008, "Member 'FStructSerializerNumericTestStruct::Int64' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, UInt8) == 0x000010, "Member 'FStructSerializerNumericTestStruct::UInt8' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, UInt16) == 0x000012, "Member 'FStructSerializerNumericTestStruct::UInt16' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, UInt32) == 0x000014, "Member 'FStructSerializerNumericTestStruct::UInt32' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, UInt64) == 0x000018, "Member 'FStructSerializerNumericTestStruct::UInt64' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, Float) == 0x000020, "Member 'FStructSerializerNumericTestStruct::Float' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, Double) == 0x000028, "Member 'FStructSerializerNumericTestStruct::Double' has a wrong offset!");

// ScriptStruct Serialization.StructSerializerBooleanTestStruct
// 0x0008 (0x0008 - 0x0000)
struct FStructSerializerBooleanTestStruct final
{
public:
	bool                                          BoolFalse;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BoolTrue;                                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Bitfield;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStructSerializerBooleanTestStruct) == 0x000004, "Wrong alignment on FStructSerializerBooleanTestStruct");
static_assert(sizeof(FStructSerializerBooleanTestStruct) == 0x000008, "Wrong size on FStructSerializerBooleanTestStruct");
static_assert(offsetof(FStructSerializerBooleanTestStruct, BoolFalse) == 0x000000, "Member 'FStructSerializerBooleanTestStruct::BoolFalse' has a wrong offset!");
static_assert(offsetof(FStructSerializerBooleanTestStruct, BoolTrue) == 0x000001, "Member 'FStructSerializerBooleanTestStruct::BoolTrue' has a wrong offset!");
static_assert(offsetof(FStructSerializerBooleanTestStruct, Bitfield) == 0x000004, "Member 'FStructSerializerBooleanTestStruct::Bitfield' has a wrong offset!");

// ScriptStruct Serialization.StructSerializerMapTestStruct
// 0x00F0 (0x00F0 - 0x0000)
struct FStructSerializerMapTestStruct final
{
public:
	TMap<int32, class FString>                    IntToStr;                                          // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            StrToStr;                                          // 0x0050(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FVector>           StrToVec;                                          // 0x00A0(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStructSerializerMapTestStruct) == 0x000008, "Wrong alignment on FStructSerializerMapTestStruct");
static_assert(sizeof(FStructSerializerMapTestStruct) == 0x0000F0, "Wrong size on FStructSerializerMapTestStruct");
static_assert(offsetof(FStructSerializerMapTestStruct, IntToStr) == 0x000000, "Member 'FStructSerializerMapTestStruct::IntToStr' has a wrong offset!");
static_assert(offsetof(FStructSerializerMapTestStruct, StrToStr) == 0x000050, "Member 'FStructSerializerMapTestStruct::StrToStr' has a wrong offset!");
static_assert(offsetof(FStructSerializerMapTestStruct, StrToVec) == 0x0000A0, "Member 'FStructSerializerMapTestStruct::StrToVec' has a wrong offset!");

// ScriptStruct Serialization.StructSerializerObjectTestStruct
// 0x0010 (0x0010 - 0x0000)
struct FStructSerializerObjectTestStruct final
{
public:
	TSubclassOf<class UObject>                    Class;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ObjectPtr;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStructSerializerObjectTestStruct) == 0x000008, "Wrong alignment on FStructSerializerObjectTestStruct");
static_assert(sizeof(FStructSerializerObjectTestStruct) == 0x000010, "Wrong size on FStructSerializerObjectTestStruct");
static_assert(offsetof(FStructSerializerObjectTestStruct, Class) == 0x000000, "Member 'FStructSerializerObjectTestStruct::Class' has a wrong offset!");
static_assert(offsetof(FStructSerializerObjectTestStruct, ObjectPtr) == 0x000008, "Member 'FStructSerializerObjectTestStruct::ObjectPtr' has a wrong offset!");

// ScriptStruct Serialization.StructSerializerBuiltinTestStruct
// 0x0060 (0x0060 - 0x0000)
struct FStructSerializerBuiltinTestStruct final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0028(0x000C)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0038(0x0018)(NativeAccessSpecifierPublic)
	struct FVector                                Vector;                                            // 0x0050(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStructSerializerBuiltinTestStruct) == 0x000008, "Wrong alignment on FStructSerializerBuiltinTestStruct");
static_assert(sizeof(FStructSerializerBuiltinTestStruct) == 0x000060, "Wrong size on FStructSerializerBuiltinTestStruct");
static_assert(offsetof(FStructSerializerBuiltinTestStruct, Guid) == 0x000000, "Member 'FStructSerializerBuiltinTestStruct::Guid' has a wrong offset!");
static_assert(offsetof(FStructSerializerBuiltinTestStruct, Name) == 0x000010, "Member 'FStructSerializerBuiltinTestStruct::Name' has a wrong offset!");
static_assert(offsetof(FStructSerializerBuiltinTestStruct, String) == 0x000018, "Member 'FStructSerializerBuiltinTestStruct::String' has a wrong offset!");
static_assert(offsetof(FStructSerializerBuiltinTestStruct, Rotator) == 0x000028, "Member 'FStructSerializerBuiltinTestStruct::Rotator' has a wrong offset!");
static_assert(offsetof(FStructSerializerBuiltinTestStruct, Text) == 0x000038, "Member 'FStructSerializerBuiltinTestStruct::Text' has a wrong offset!");
static_assert(offsetof(FStructSerializerBuiltinTestStruct, Vector) == 0x000050, "Member 'FStructSerializerBuiltinTestStruct::Vector' has a wrong offset!");

// ScriptStruct Serialization.StructSerializerArrayTestStruct
// 0x0040 (0x0040 - 0x0000)
struct FStructSerializerArrayTestStruct final
{
public:
	TArray<int32>                                 Int32Array;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         StaticSingleElement;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StaticInt32Array[0x3];                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaticFloatArray[0x3];                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        VectorArray;                                       // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStructSerializerArrayTestStruct) == 0x000008, "Wrong alignment on FStructSerializerArrayTestStruct");
static_assert(sizeof(FStructSerializerArrayTestStruct) == 0x000040, "Wrong size on FStructSerializerArrayTestStruct");
static_assert(offsetof(FStructSerializerArrayTestStruct, Int32Array) == 0x000000, "Member 'FStructSerializerArrayTestStruct::Int32Array' has a wrong offset!");
static_assert(offsetof(FStructSerializerArrayTestStruct, StaticSingleElement) == 0x000010, "Member 'FStructSerializerArrayTestStruct::StaticSingleElement' has a wrong offset!");
static_assert(offsetof(FStructSerializerArrayTestStruct, StaticInt32Array) == 0x000014, "Member 'FStructSerializerArrayTestStruct::StaticInt32Array' has a wrong offset!");
static_assert(offsetof(FStructSerializerArrayTestStruct, StaticFloatArray) == 0x000020, "Member 'FStructSerializerArrayTestStruct::StaticFloatArray' has a wrong offset!");
static_assert(offsetof(FStructSerializerArrayTestStruct, VectorArray) == 0x000030, "Member 'FStructSerializerArrayTestStruct::VectorArray' has a wrong offset!");

// ScriptStruct Serialization.StructSerializerTestStruct
// 0x01D8 (0x01D8 - 0x0000)
struct FStructSerializerTestStruct final
{
public:
	struct FStructSerializerNumericTestStruct     Numerics;                                          // 0x0000(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FStructSerializerBooleanTestStruct     Booleans;                                          // 0x0030(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FStructSerializerObjectTestStruct      Objects;                                           // 0x0038(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FStructSerializerBuiltinTestStruct     Builtins;                                          // 0x0048(0x0060)(NativeAccessSpecifierPublic)
	struct FStructSerializerArrayTestStruct       Arrays;                                            // 0x00A8(0x0040)(NativeAccessSpecifierPublic)
	struct FStructSerializerMapTestStruct         Maps;                                              // 0x00E8(0x00F0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FStructSerializerTestStruct) == 0x000008, "Wrong alignment on FStructSerializerTestStruct");
static_assert(sizeof(FStructSerializerTestStruct) == 0x0001D8, "Wrong size on FStructSerializerTestStruct");
static_assert(offsetof(FStructSerializerTestStruct, Numerics) == 0x000000, "Member 'FStructSerializerTestStruct::Numerics' has a wrong offset!");
static_assert(offsetof(FStructSerializerTestStruct, Booleans) == 0x000030, "Member 'FStructSerializerTestStruct::Booleans' has a wrong offset!");
static_assert(offsetof(FStructSerializerTestStruct, Objects) == 0x000038, "Member 'FStructSerializerTestStruct::Objects' has a wrong offset!");
static_assert(offsetof(FStructSerializerTestStruct, Builtins) == 0x000048, "Member 'FStructSerializerTestStruct::Builtins' has a wrong offset!");
static_assert(offsetof(FStructSerializerTestStruct, Arrays) == 0x0000A8, "Member 'FStructSerializerTestStruct::Arrays' has a wrong offset!");
static_assert(offsetof(FStructSerializerTestStruct, Maps) == 0x0000E8, "Member 'FStructSerializerTestStruct::Maps' has a wrong offset!");

}

