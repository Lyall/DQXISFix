#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ItemGettableObjectBase

#include "Basic.hpp"

#include "STRUCT_ItemSet_structs.hpp"
#include "JackGame_structs.hpp"


namespace SDK::Params
{

// Function BP_ItemGettableObjectBase.BP_ItemGettableObjectBase_C.CommonItemSetting
// 0x0008 (0x0008 - 0x0000)
struct BP_ItemGettableObjectBase_C_CommonItemSetting final
{
public:
	class FName                                   bpp__ID__pf;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_ItemGettableObjectBase_C_CommonItemSetting) == 0x000004, "Wrong alignment on BP_ItemGettableObjectBase_C_CommonItemSetting");
static_assert(sizeof(BP_ItemGettableObjectBase_C_CommonItemSetting) == 0x000008, "Wrong size on BP_ItemGettableObjectBase_C_CommonItemSetting");
static_assert(offsetof(BP_ItemGettableObjectBase_C_CommonItemSetting, bpp__ID__pf) == 0x000000, "Member 'BP_ItemGettableObjectBase_C_CommonItemSetting::bpp__ID__pf' has a wrong offset!");

// Function BP_ItemGettableObjectBase.BP_ItemGettableObjectBase_C.FindCommonItemSetting
// 0x0018 (0x0018 - 0x0000)
struct BP_ItemGettableObjectBase_C_FindCommonItemSetting final
{
public:
	class FName                                   bpp__ID__pf;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackItem_Classification                      bpp__ItemClassification__pf;                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Found__pf;                                    // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__ItemID__pf;                                   // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_ItemGettableObjectBase_C_FindCommonItemSetting) == 0x000004, "Wrong alignment on BP_ItemGettableObjectBase_C_FindCommonItemSetting");
static_assert(sizeof(BP_ItemGettableObjectBase_C_FindCommonItemSetting) == 0x000018, "Wrong size on BP_ItemGettableObjectBase_C_FindCommonItemSetting");
static_assert(offsetof(BP_ItemGettableObjectBase_C_FindCommonItemSetting, bpp__ID__pf) == 0x000000, "Member 'BP_ItemGettableObjectBase_C_FindCommonItemSetting::bpp__ID__pf' has a wrong offset!");
static_assert(offsetof(BP_ItemGettableObjectBase_C_FindCommonItemSetting, bpp__ItemClassification__pf) == 0x000008, "Member 'BP_ItemGettableObjectBase_C_FindCommonItemSetting::bpp__ItemClassification__pf' has a wrong offset!");
static_assert(offsetof(BP_ItemGettableObjectBase_C_FindCommonItemSetting, bpp__Found__pf) == 0x000009, "Member 'BP_ItemGettableObjectBase_C_FindCommonItemSetting::bpp__Found__pf' has a wrong offset!");
static_assert(offsetof(BP_ItemGettableObjectBase_C_FindCommonItemSetting, bpp__ItemID__pf) == 0x000010, "Member 'BP_ItemGettableObjectBase_C_FindCommonItemSetting::bpp__ItemID__pf' has a wrong offset!");

// Function BP_ItemGettableObjectBase.BP_ItemGettableObjectBase_C.GetForsakeMessageID
// 0x0008 (0x0008 - 0x0000)
struct BP_ItemGettableObjectBase_C_GetForsakeMessageID final
{
public:
	class FName                                   bpp__FosakeMessageID__pf;                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_ItemGettableObjectBase_C_GetForsakeMessageID) == 0x000004, "Wrong alignment on BP_ItemGettableObjectBase_C_GetForsakeMessageID");
static_assert(sizeof(BP_ItemGettableObjectBase_C_GetForsakeMessageID) == 0x000008, "Wrong size on BP_ItemGettableObjectBase_C_GetForsakeMessageID");
static_assert(offsetof(BP_ItemGettableObjectBase_C_GetForsakeMessageID, bpp__FosakeMessageID__pf) == 0x000000, "Member 'BP_ItemGettableObjectBase_C_GetForsakeMessageID::bpp__FosakeMessageID__pf' has a wrong offset!");

// Function BP_ItemGettableObjectBase.BP_ItemGettableObjectBase_C.GetRemainItem
// 0x0018 (0x0018 - 0x0000)
struct BP_ItemGettableObjectBase_C_GetRemainItem final
{
public:
	TArray<struct FSTRUCT_ItemSet>                bpp__OutRemainItem__pf;                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         bpp__OutRemainGold__pf;                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Empty__pf;                                    // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_ItemGettableObjectBase_C_GetRemainItem) == 0x000008, "Wrong alignment on BP_ItemGettableObjectBase_C_GetRemainItem");
static_assert(sizeof(BP_ItemGettableObjectBase_C_GetRemainItem) == 0x000018, "Wrong size on BP_ItemGettableObjectBase_C_GetRemainItem");
static_assert(offsetof(BP_ItemGettableObjectBase_C_GetRemainItem, bpp__OutRemainItem__pf) == 0x000000, "Member 'BP_ItemGettableObjectBase_C_GetRemainItem::bpp__OutRemainItem__pf' has a wrong offset!");
static_assert(offsetof(BP_ItemGettableObjectBase_C_GetRemainItem, bpp__OutRemainGold__pf) == 0x000010, "Member 'BP_ItemGettableObjectBase_C_GetRemainItem::bpp__OutRemainGold__pf' has a wrong offset!");
static_assert(offsetof(BP_ItemGettableObjectBase_C_GetRemainItem, bpp__Empty__pf) == 0x000014, "Member 'BP_ItemGettableObjectBase_C_GetRemainItem::bpp__Empty__pf' has a wrong offset!");

// Function BP_ItemGettableObjectBase.BP_ItemGettableObjectBase_C.IsItemGotten
// 0x0001 (0x0001 - 0x0000)
struct BP_ItemGettableObjectBase_C_IsItemGotten final
{
public:
	bool                                          bpp__ItemGotten__pf;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_ItemGettableObjectBase_C_IsItemGotten) == 0x000001, "Wrong alignment on BP_ItemGettableObjectBase_C_IsItemGotten");
static_assert(sizeof(BP_ItemGettableObjectBase_C_IsItemGotten) == 0x000001, "Wrong size on BP_ItemGettableObjectBase_C_IsItemGotten");
static_assert(offsetof(BP_ItemGettableObjectBase_C_IsItemGotten, bpp__ItemGotten__pf) == 0x000000, "Member 'BP_ItemGettableObjectBase_C_IsItemGotten::bpp__ItemGotten__pf' has a wrong offset!");

// Function BP_ItemGettableObjectBase.BP_ItemGettableObjectBase_C.RecipeToGold
// 0x0028 (0x0028 - 0x0000)
struct BP_ItemGettableObjectBase_C_RecipeToGold final
{
public:
	struct FSTRUCT_ItemSet                        bpp__ItemSet__pf;                                  // 0x0000(0x0010)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_ItemSet                        bpp__CorrectItemSet__pf;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__AdditionalGold__pf;                           // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_ItemGettableObjectBase_C_RecipeToGold) == 0x000008, "Wrong alignment on BP_ItemGettableObjectBase_C_RecipeToGold");
static_assert(sizeof(BP_ItemGettableObjectBase_C_RecipeToGold) == 0x000028, "Wrong size on BP_ItemGettableObjectBase_C_RecipeToGold");
static_assert(offsetof(BP_ItemGettableObjectBase_C_RecipeToGold, bpp__ItemSet__pf) == 0x000000, "Member 'BP_ItemGettableObjectBase_C_RecipeToGold::bpp__ItemSet__pf' has a wrong offset!");
static_assert(offsetof(BP_ItemGettableObjectBase_C_RecipeToGold, bpp__CorrectItemSet__pf) == 0x000010, "Member 'BP_ItemGettableObjectBase_C_RecipeToGold::bpp__CorrectItemSet__pf' has a wrong offset!");
static_assert(offsetof(BP_ItemGettableObjectBase_C_RecipeToGold, bpp__AdditionalGold__pf) == 0x000020, "Member 'BP_ItemGettableObjectBase_C_RecipeToGold::bpp__AdditionalGold__pf' has a wrong offset!");

// Function BP_ItemGettableObjectBase.BP_ItemGettableObjectBase_C.StoreItemSequence
// 0x0001 (0x0001 - 0x0000)
struct BP_ItemGettableObjectBase_C_StoreItemSequence final
{
public:
	bool                                          bpp__Empty__pf;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_ItemGettableObjectBase_C_StoreItemSequence) == 0x000001, "Wrong alignment on BP_ItemGettableObjectBase_C_StoreItemSequence");
static_assert(sizeof(BP_ItemGettableObjectBase_C_StoreItemSequence) == 0x000001, "Wrong size on BP_ItemGettableObjectBase_C_StoreItemSequence");
static_assert(offsetof(BP_ItemGettableObjectBase_C_StoreItemSequence, bpp__Empty__pf) == 0x000000, "Member 'BP_ItemGettableObjectBase_C_StoreItemSequence::bpp__Empty__pf' has a wrong offset!");

}

