#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JackGame

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "JackAnimNodeRuntime_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// Enum JackGame.EJackActionEffectCategory
// NumValues: 0x0005
enum class EJackActionEffectCategory : uint8
{
	Muzzle                                   = 0,
	Default                                  = 1,
	Hit                                      = 2,
	Damage                                   = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackActionEffectSpawnTargetType
// NumValues: 0x0008
enum class EJackActionEffectSpawnTargetType : uint8
{
	None                                     = 0,
	World                                    = 1,
	Movement                                 = 2,
	CasterActor                              = 3,
	TargetActor                              = 4,
	HitActor                                 = 5,
	Camera                                   = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackActionEffectAxis
// NumValues: 0x0007
enum class EJackActionEffectAxis : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	X_Neg                                    = 3,
	Y_Neg                                    = 4,
	Z_Neg                                    = 5,
	EJackActionEffectAxis_MAX                = 6,
};

// Enum JackGame.EJackActionEffectEvent
// NumValues: 0x0007
enum class EJackActionEffectEvent : uint8
{
	None                                     = 0,
	SpawnHitEffects                          = 1,
	NotifyActionHit                          = 2,
	DeactivateDefaultEffects                 = 3,
	CallBlueprintEvent                       = 4,
	Destroy                                  = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackActionEffectDeactivateDefaultEffectTiming
// NumValues: 0x0006
enum class EJackActionEffectDeactivateDefaultEffectTiming : uint8
{
	None                                     = 0,
	MovementAttachProgressComplete           = 1,
	MovementComplete                         = 2,
	SpawnHitEffect                           = 3,
	Event                                    = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackActionEffectNotifyActionHitTiming
// NumValues: 0x0006
enum class EJackActionEffectNotifyActionHitTiming : uint8
{
	None                                     = 0,
	MovementAttachProgressComplete           = 1,
	MovementComplete                         = 2,
	SpawnHitEffect                           = 3,
	Event                                    = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackActionEffectSpawnHitEffectTiming
// NumValues: 0x0006
enum class EJackActionEffectSpawnHitEffectTiming : uint8
{
	None                                     = 0,
	MovementAttachProgressComplete           = 1,
	MovementComplete                         = 2,
	PhysicsCollisionHit                      = 3,
	Event                                    = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackEquippedWeaponStyle
// NumValues: 0x0011
enum class EJackEquippedWeaponStyle : uint8
{
	NOT                                      = 0,
	SWD                                      = 1,
	DGR                                      = 2,
	AXE                                      = 3,
	STK                                      = 4,
	BOO                                      = 5,
	TSW                                      = 6,
	SPR                                      = 7,
	ROD                                      = 8,
	CLW                                      = 9,
	WHP                                      = 10,
	DSW                                      = 11,
	DDG                                      = 12,
	DAX                                      = 13,
	DST                                      = 14,
	DBO                                      = 15,
	MAX                                      = 16,
};

// Enum JackGame.EJackCharacterCoordinateParts
// NumValues: 0x000A
enum class EJackCharacterCoordinateParts : uint8
{
	UpperBody                                = 0,
	LowerBody                                = 1,
	Face                                     = 2,
	Hair                                     = 3,
	Beard                                    = 4,
	Accessory                                = 5,
	Cloth1                                   = 6,
	Cloth2                                   = 7,
	Cloth3                                   = 8,
	MAX                                      = 9,
};

// Enum JackGame.EJackCharacterHiddenPurpose
// NumValues: 0x001F
enum class EJackCharacterHiddenPurpose : uint8
{
	LVD                                      = 0,
	CutScene                                 = 1,
	Battle                                   = 2,
	AnimNotify                               = 3,
	DestructibleActor                        = 4,
	BPRenkei                                 = 5,
	Engine                                   = 6,
	NPCSystem                                = 7,
	CharacterStatus                          = 8,
	ActionSystem                             = 9,
	BattleSystem                             = 10,
	BattleMonsterAppearance                  = 11,
	BattleRenkei                             = 12,
	BattleCamera                             = 13,
	BattleActionCamera                       = 14,
	BattlePause                              = 15,
	BattleAISM                               = 16,
	OutBattleField                           = 17,
	MonsterGenerator                         = 18,
	AnimSM                                   = 19,
	Camera                                   = 20,
	FPSCamera                                = 21,
	VehicleRide                              = 22,
	GuestNpc                                 = 23,
	SnowMan                                  = 24,
	DeactivateWeaponEffects                  = 25,
	CategoryHidden                           = 26,
	LoadReduction                            = 27,
	PhotoMode                                = 28,
	Rura                                     = 29,
	MAX                                      = 30,
};

// Enum JackGame.EJackCharacterIgnoreCollisionPurpose
// NumValues: 0x000B
enum class EJackCharacterIgnoreCollisionPurpose : uint8
{
	LVD                                      = 0,
	CutScene                                 = 1,
	Battle                                   = 2,
	Gimmick                                  = 3,
	AnimNotify                               = 4,
	BattleActionAttach                       = 5,
	Engine                                   = 6,
	AnimSM                                   = 7,
	HiddenControl                            = 8,
	PlayerPenetration                        = 9,
	MAX                                      = 10,
};

// Enum JackGame.EJackCharacterControlChannel
// NumValues: 0x0012
enum class EJackCharacterControlChannel : uint8
{
	Global                                   = 0,
	Blueprint                                = 1,
	Character                                = 2,
	Controller                               = 3,
	AnimNotify                               = 4,
	Renkei                                   = 5,
	Action                                   = 6,
	BattleManager                            = 7,
	BattleComponent                          = 8,
	BattleAI                                 = 9,
	BattleResult                             = 10,
	CutScene                                 = 11,
	AnimSM                                   = 12,
	AnimBP                                   = 13,
	PartyTalk                                = 14,
	Triple                                   = 15,
	Debug                                    = 16,
	MAX                                      = 17,
};

// Enum JackGame.EJackCharacterCoordinateLoader
// NumValues: 0x0005
enum class EJackCharacterCoordinateLoader : uint8
{
	SyncLoadAndFixup                         = 0,
	AsyncLoadAndFixup                        = 1,
	AsyncLoadOnly                            = 2,
	NoControl                                = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackCharacterCoordinateLayer
// NumValues: 0x0006
enum class EJackCharacterCoordinateLayer : uint8
{
	Base                                     = 0,
	Equipments                               = 1,
	Dressup                                  = 2,
	ExtraEquipments                          = 3,
	CutScene                                 = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackCharacterLookAtPurpose
// NumValues: 0x0004
enum class EJackCharacterLookAtPurpose : uint8
{
	Gimmick                                  = 0,
	AnimationState                           = 1,
	Renkei                                   = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackCharacterCoordinateLODInfo
// NumValues: 0x0003
enum class EJackCharacterCoordinateLODInfo : uint8
{
	Default                                  = 0,
	CutScene                                 = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackCharacterPausePurpose
// NumValues: 0x000F
enum class EJackCharacterPausePurpose : uint8
{
	LVD                                      = 0,
	Battle                                   = 1,
	CutScene                                 = 2,
	Engine                                   = 3,
	CategoryHidden                           = 4,
	LoadReduction                            = 5,
	LoadReductionHidden                      = 6,
	MonsterReduction                         = 7,
	TickInterval                             = 8,
	BattleInitialize                         = 9,
	BattleCharacterManager                   = 10,
	BattleActionCamera                       = 11,
	BattleRenkei                             = 12,
	BattleNigeru                             = 13,
	MAX                                      = 14,
};

// Enum JackGame.EJackCharacterCollisionResponse
// NumValues: 0x0003
enum class EJackCharacterCollisionResponse : uint8
{
	Instance                                 = 0,
	DefaultObject                            = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackActionExecStateType
// NumValues: 0x0011
enum class EJackActionExecStateType : uint8
{
	None                                     = 0,
	ActionStart                              = 1,
	ActionAssistMove                         = 2,
	ActionAssistJump                         = 3,
	ActionCast                               = 4,
	ActionShot                               = 5,
	ActionBackJump                           = 6,
	ActionBackMove                           = 7,
	ActionWait                               = 8,
	ActionBP                                 = 9,
	ActionEnd                                = 10,
	ActionSpecial                            = 11,
	ActionSpecial2                           = 12,
	ActionSpecial3                           = 13,
	ActionBP2                                = 14,
	ActionBP3                                = 15,
	MAX                                      = 16,
};

// Enum JackGame.EJackItem_Bag
// NumValues: 0x000E
enum class EJackItem_Bag : uint8
{
	Bag_P001                                 = 0,
	Bag_P002                                 = 1,
	Bag_P003                                 = 2,
	Bag_P004                                 = 3,
	Bag_P005                                 = 4,
	Bag_P006                                 = 5,
	Bag_P007                                 = 6,
	Bag_P008                                 = 7,
	Bag_Common                               = 8,
	Bag_Equipment                            = 9,
	Bag_Daizinamono                          = 10,
	Bag_RecipeBook                           = 11,
	Bag_Exchange                             = 12,
	MAX                                      = 13,
};

// Enum JackGame.EJackActionRequestType
// NumValues: 0x0004
enum class EJackActionRequestType : uint8
{
	None                                     = 0,
	Turn                                     = 1,
	Other                                    = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackActionPlayType
// NumValues: 0x0004
enum class EJackActionPlayType : uint8
{
	Default                                  = 0,
	FieldMode                                = 1,
	PreviewMode                              = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackActionConsumeResultType
// NumValues: 0x0004
enum class EJackActionConsumeResultType : uint8
{
	None                                     = 0,
	Consume                                  = 1,
	NotConsume                               = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackActionResultType
// NumValues: 0x0007
enum class EJackActionResultType : uint8
{
	None                                     = 0,
	Success                                  = 1,
	NotMP                                    = 2,
	Fuuin                                    = 3,
	NotConsume                               = 4,
	Fail                                     = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackDataTableReferType
// NumValues: 0x000A
enum class EJackDataTableReferType : uint8
{
	DTR_None                                 = 0,
	DTR_Action                               = 1,
	DTR_Item                                 = 2,
	DTR_MeosiSlotItem                        = 3,
	DTR_MeosiSlotMonster                     = 4,
	DTR_Monster                              = 5,
	DTR_NPC                                  = 6,
	DTR_OddEffect                            = 7,
	DTR_Renkei                               = 8,
	MAX                                      = 9,
};

// Enum JackGame.EJackActionTextType
// NumValues: 0x0030
enum class EJackActionTextType : uint8
{
	None                                     = 0,
	ActionName                               = 1,
	Description1                             = 2,
	Description3                             = 3,
	Description4                             = 4,
	Description5                             = 5,
	PreKoudou1                               = 6,
	PreKoudou2                               = 7,
	PreKoudou3                               = 8,
	Koudou                                   = 9,
	ActionYuukou                             = 10,
	ActionYuukouSosei                        = 11,
	ActionOddEffectSet                       = 12,
	ActionOddEffectClear                     = 13,
	ActionMukou                              = 14,
	ActionMukouMahotora                      = 15,
	ActionMukouHP                            = 16,
	ActionMukouLife                          = 17,
	ActionOddClearMukou                      = 18,
	ActionConsumeMukou                       = 19,
	ActionSibou                              = 20,
	ActionCritical                           = 21,
	ActionShotCritical                       = 22,
	TurnStart                                = 23,
	OddEffectYuukou                          = 24,
	SindoNemuri                              = 25,
	SindoKonran                              = 26,
	OddEffectYuukouOverlap                   = 27,
	OddEffectMukou                           = 28,
	OddEffectMukouMAX                        = 29,
	OddEffectMukouSindo                      = 30,
	OddEffectMukouSindoKeep                  = 31,
	OddEffectMukouOverlap                    = 32,
	OddEffectMukouStatus                     = 33,
	OddEffectSlideLimit                      = 34,
	OddEffectClear                           = 35,
	OddEffectClearMukou                      = 36,
	OddEffectInvoke1                         = 37,
	OddEffectInvoke1Mukou                    = 38,
	OddEffectInvoke2                         = 39,
	OddEffectInvoke2Mukou                    = 40,
	OddEffectSibou                           = 41,
	OddEffectYuukouReverse                   = 42,
	BattleStart                              = 43,
	RoundStart                               = 44,
	Koudou2                                  = 45,
	Description2                             = 46,
	MAX                                      = 47,
};

// Enum JackGame.EJackMessageScriptEventType
// NumValues: 0x000B
enum class EJackMessageScriptEventType : uint8
{
	Motion                                   = 0,
	FacialUpper                              = 1,
	FacialLower                              = 2,
	Voice                                    = 3,
	NoLipSync                                = 4,
	ExclamationIcon                          = 5,
	QuestionIcon                             = 6,
	TurnPc                                   = 7,
	TurnCamera                               = 8,
	RestoreTurn                              = 9,
	MAX                                      = 10,
};

// Enum JackGame.EJackTextDelegateType
// NumValues: 0x000C
enum class EJackTextDelegateType : uint8
{
	PrintLineDidEnd                          = 0,
	PrintPageDidEnd                          = 1,
	PrintLastPageDidEnd                      = 2,
	PrintTextDidEnd                          = 3,
	StartPage                                = 4,
	StartSerifuPage                          = 5,
	StartSerifuPageEventFinish               = 6,
	EnterPage                                = 7,
	ItemSelectionDidChange                   = 8,
	ItemSelectionDidDecide                   = 9,
	WindowClosed                             = 10,
	EJackTextDelegateType_MAX                = 11,
};

// Enum JackGame.EJackBattleFukidasiTalkConditionType
// NumValues: 0x0033
enum class EJackBattleFukidasiTalkConditionType : uint8
{
	None                                     = 0,
	SakusenGangan                            = 1,
	SakusenBattiri                           = 2,
	SakusenIroiro                            = 3,
	SakusenMP                                = 4,
	SakusenInoti                             = 5,
	SakusenMeirei                            = 6,
	PlayerAdvantage                          = 7,
	MonsterAdvantage                         = 8,
	Critical                                 = 9,
	HPDamage                                 = 10,
	HPDamageNextFuki                         = 11,
	HPPerUnder                               = 12,
	MPPerUnder                               = 13,
	HPPerOver                                = 14,
	MPPerOver                                = 15,
	HPOver                                   = 16,
	MPOver                                   = 17,
	HPUnder                                  = 18,
	MPUnder                                  = 19,
	OddEffectSet                             = 20,
	OddEffectStatusSet                       = 21,
	OddEffect                                = 22,
	OddEffectStatus                          = 23,
	InvokeOddEffect                          = 24,
	TurnStartOddEffect                       = 25,
	EventBattle                              = 26,
	BattleChara                              = 27,
	DeadMonster                              = 28,
	DeadPlayer                               = 29,
	NigeruFaild                              = 30,
	Nusumu                                   = 31,
	Action                                   = 32,
	ActionNextFuki                           = 33,
	GuardSuccess                             = 34,
	ResFuki                                  = 35,
	AppearMetal                              = 36,
	KilledMetal                              = 37,
	ManyDead                                 = 38,
	LevelUp                                  = 39,
	NormalDrop                               = 40,
	RareDrop                                 = 41,
	EnemyVeryStrong                          = 42,
	NoInput                                  = 43,
	MonsterEncount                           = 44,
	RoundCount                               = 45,
	DeadAction                               = 46,
	CharacterRoundCount                      = 47,
	CharacterRoundOver                       = 48,
	SPFlag                                   = 49,
	MAX                                      = 50,
};

// Enum JackGame.EJackBattleFukidasiTalkCondChara
// NumValues: 0x0004
enum class EJackBattleFukidasiTalkCondChara : uint8
{
	None                                     = 0,
	CondChara                                = 1,
	NoCondChara                              = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackBattleFukidasiTalkTarget
// NumValues: 0x0021
enum class EJackBattleFukidasiTalkTarget : uint8
{
	None                                     = 0,
	Party                                    = 1,
	Friend                                   = 2,
	Enemys                                   = 3,
	Boss                                     = 4,
	CharacterID                              = 5,
	OtherCharacter                           = 6,
	MonsterBig                               = 7,
	MonsterSmall                             = 8,
	MonsterMetal                             = 9,
	MonsterDance                             = 10,
	MonsterHorror                            = 11,
	MonsterInsect                            = 12,
	MonsterCat                               = 13,
	MonsterBird                              = 14,
	MonsterMagic                             = 15,
	MonsterWarrior                           = 16,
	MonsterMimic                             = 17,
	MonsterUru1                              = 18,
	MonsterUru2                              = 19,
	MonsterUru                               = 20,
	MonsterNiz                               = 21,
	MonsterHome                              = 22,
	MonsterKira                              = 23,
	MonsterYaruki                            = 24,
	MonsterTyui                              = 25,
	MonsterReisei                            = 26,
	MonsterAseri                             = 27,
	MonsterIkari                             = 28,
	MonsterKansya                            = 29,
	MonsterYorokobi                          = 30,
	MonsterKonran                            = 31,
	MAX                                      = 32,
};

// Enum JackGame.EJackBattleCameraCategory
// NumValues: 0x0006
enum class EJackBattleCameraCategory : uint8
{
	UnknownCamera                            = 0,
	BattleStartMenuCamera                    = 1,
	AutoCommandCamera                        = 2,
	ActionCamera                             = 3,
	MonsterAppearCamera                      = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackBattleFieldEffectStatus
// NumValues: 0x0006
enum class EJackBattleFieldEffectStatus : uint8
{
	None                                     = 0,
	AkaiKiri                                 = 1,
	Fubuki                                   = 2,
	TokiWoUbau                               = 3,
	YamiHomerosu2                            = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackBattleResult
// NumValues: 0x0005
enum class EJackBattleResult : uint8
{
	None                                     = 0,
	Win                                      = 1,
	Lose                                     = 2,
	Escape                                   = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackFadeColor
// NumValues: 0x0004
enum class EJackFadeColor : uint8
{
	Black                                    = 0,
	White                                    = 1,
	Red                                      = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackBattleFoliageDitherBattleFieldType
// NumValues: 0x0004
enum class EJackBattleFoliageDitherBattleFieldType : uint8
{
	Default                                  = 0,
	AutoCommandCamera                        = 1,
	OtherCamera                              = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackBattleFoliageDitherRangeType
// NumValues: 0x0004
enum class EJackBattleFoliageDitherRangeType : uint8
{
	Default                                  = 0,
	MonsterAppear                            = 1,
	ActionCamera                             = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMight
// NumValues: 0x0004
enum class EJackMight : uint8
{
	Unknown                                  = 0,
	Player                                   = 1,
	Monster                                  = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackBattleAdditionalResourceType
// NumValues: 0x0003
enum class EJackBattleAdditionalResourceType : uint8
{
	None                                     = 0,
	KiokusousituP002Voice                    = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackBattlePreemptiveAttack
// NumValues: 0x0004
enum class EJackBattlePreemptiveAttack : uint8
{
	None                                     = 0,
	Player                                   = 1,
	Monster                                  = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackBattleEncount
// NumValues: 0x0004
enum class EJackBattleEncount : uint8
{
	Symbol                                   = 0,
	Random                                   = 1,
	Event                                    = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackHitStopPresetType
// NumValues: 0x0018
enum class EJackHitStopPresetType : uint8
{
	None                                     = 0,
	N_SS                                     = 1,
	N_S                                      = 2,
	N_M                                      = 3,
	N_L                                      = 4,
	N_LL                                     = 5,
	SS_SS                                    = 6,
	SS_S                                     = 7,
	SS_M                                     = 8,
	SS_L                                     = 9,
	SS_LL                                    = 10,
	S_S                                      = 11,
	S_M                                      = 12,
	S_L                                      = 13,
	S_LL                                     = 14,
	M_M                                      = 15,
	M_L                                      = 16,
	M_LL                                     = 17,
	L_L                                      = 18,
	L_LL                                     = 19,
	LL_LL                                    = 20,
	UN1                                      = 21,
	UN2                                      = 22,
	MAX                                      = 23,
};

// Enum JackGame.EJackInteractor
// NumValues: 0x0012
enum class EJackInteractor : uint8
{
	Unknown                                  = 0,
	Hero                                     = 1,
	Hero_Fish                                = 2,
	NPC                                      = 3,
	Uma                                      = 4,
	Eggurobo                                 = 5,
	Sukaruraida                              = 6,
	Doragonraida                             = 7,
	Biraida                                  = 8,
	Dexyurahanraido                          = 9,
	Herukattya                               = 10,
	UrufuDoragon                             = 11,
	MeidenDooru                              = 12,
	KiRaaPansar                              = 13,
	SuraimuNaito                             = 14,
	Gorem                                    = 15,
	Gondora                                  = 16,
	MAX                                      = 17,
};

// Enum JackGame.EJackGamePlayerCondition
// NumValues: 0x001B
enum class EJackGamePlayerCondition : uint8
{
	InputDisable                             = 0,
	MoveInputDisable                         = 1,
	LookInputDisabled                        = 2,
	JumpDisabled                             = 3,
	AutoRunDisabled                          = 4,
	DisplayMainMenuDisabled                  = 5,
	DisplayMiniMapDisabled                   = 6,
	DisplayWorldMapDisabled                  = 7,
	DisplayFukidasiDisabled                  = 8,
	DisplaySyouLocationTitleDisabled         = 9,
	MovementDisabled                         = 10,
	FieldActionDisabled                      = 11,
	MoveActionDisabled                       = 12,
	BenriButtonActionDisabled                = 13,
	DisplayActionGuideDisabled               = 14,
	RuraDisabled                             = 15,
	RiremitoDisabled                         = 16,
	SymbolEncountDisabled                    = 17,
	MountAndUnmountVehicleDisabled           = 18,
	DisplayNorimonoGaugeDisabled             = 19,
	LazyMessageDisabled                      = 20,
	RunningDisabledWhileLoading              = 21,
	RunningDisabled                          = 22,
	VehicleRunningDisabled                   = 23,
	HideControlGuideUI                       = 24,
	PhotoModeDisable                         = 25,
	MAX                                      = 26,
};

// Enum JackGame.EJackPlayerControlPossessor
// NumValues: 0x001B
enum class EJackPlayerControlPossessor : uint8
{
	None                                     = 0,
	Battle                                   = 1,
	FieldAttack                              = 2,
	FieldAttackEncount                       = 3,
	ActionGuideHelpTrigger                   = 4,
	PlayerTriggerVolume                      = 5,
	NakamaKaiwa                              = 6,
	PhotoMode                                = 7,
	ActionGuideHelp                          = 8,
	Syougou                                  = 9,
	Tyuuyakirikae                            = 10,
	FirstPersonViewCamera                    = 11,
	MenuHUD                                  = 12,
	BenriButtonAction                        = 13,
	RandomEncount                            = 14,
	FieldAction                              = 15,
	VehicleSplash                            = 16,
	MiniGame                                 = 17,
	Event                                    = 18,
	DontGo                                   = 19,
	SymbolEncount                            = 20,
	LazyMessage                              = 21,
	MapJump                                  = 22,
	Rura                                     = 23,
	VehicleSpawn                             = 24,
	ReturnToAutoSaveVolume                   = 25,
	MAX                                      = 26,
};

// Enum JackGame.EJackGamePlayerConditionControlPurpose
// NumValues: 0x001C
enum class EJackGamePlayerConditionControlPurpose : uint8
{
	Level                                    = 0,
	Battle                                   = 1,
	BattleCameraMode                         = 2,
	Gimmick                                  = 3,
	Gimmick3Steps                            = 4,
	MiniGame                                 = 5,
	SyougouKakutoku                          = 6,
	TyuuyaKirikae                            = 7,
	NakamaKaiwa                              = 8,
	FieldAttack                              = 9,
	BPControl                                = 10,
	CharacterJump                            = 11,
	VehicleJump                              = 12,
	DebugCamera                              = 13,
	FirstParsonCamera                        = 14,
	HUD                                      = 15,
	Event                                    = 16,
	VehicleMount                             = 17,
	VehicleSplash                            = 18,
	InRuraRiremito                           = 19,
	PlayingME                                = 20,
	NPCTalk                                  = 21,
	ReturnToAutoSave                         = 22,
	BattleSubSequence                        = 23,
	System                                   = 24,
	VehicleSpawn                             = 25,
	LevelVisibleVolume                       = 26,
	MAX                                      = 27,
};

// Enum JackGame.EJackSenaHairStyle
// NumValues: 0x0003
enum class EJackSenaHairStyle : uint8
{
	Long                                     = 0,
	Short                                    = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackWhaleCharacterForm
// NumValues: 0x0003
enum class EJackWhaleCharacterForm : uint8
{
	Normal                                   = 0,
	Enhanced                                 = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackHeroCharacterForm
// NumValues: 0x0003
enum class EJackHeroCharacterForm : uint8
{
	Human                                    = 0,
	Fish                                     = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackPlayerControlCharacter
// NumValues: 0x0004
enum class EJackPlayerControlCharacter : uint8
{
	Hero                                     = 0,
	Ship                                     = 1,
	Whale                                    = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackVehicleModelId
// NumValues: 0x0031
enum class EJackVehicleModelId : uint8
{
	None                                     = 0,
	V001_E001                                = 1,
	V001_E002                                = 2,
	V001_E003                                = 3,
	V001_E004                                = 4,
	V001_E005                                = 5,
	V001_E006                                = 6,
	V011_E001                                = 7,
	V011_E002                                = 8,
	V012_E001                                = 9,
	V101_E001                                = 10,
	V101_E002                                = 11,
	V101_E003                                = 12,
	V102_E001                                = 13,
	V102_E002                                = 14,
	V102_E003                                = 15,
	V102_E004                                = 16,
	V103_E001                                = 17,
	V103_E002                                = 18,
	V103_E003                                = 19,
	V103_E004                                = 20,
	V104_E001                                = 21,
	V104_E002                                = 22,
	V104_E003                                = 23,
	V105_E001                                = 24,
	V105_E002                                = 25,
	V105_E003                                = 26,
	V106_E001                                = 27,
	V106_E002                                = 28,
	V106_E003                                = 29,
	V201_E001                                = 30,
	V201_E002                                = 31,
	V201_E003                                = 32,
	V201_E004                                = 33,
	V202_E001                                = 34,
	V202_E002                                = 35,
	V202_E003                                = 36,
	V202_E004                                = 37,
	V203_E001                                = 38,
	V203_E002                                = 39,
	V203_E003                                = 40,
	V204_E001                                = 41,
	V204_E002                                = 42,
	V204_E003                                = 43,
	V205_E001                                = 44,
	V205_E002                                = 45,
	V205_E003                                = 46,
	V205_E004                                = 47,
	MAX                                      = 48,
};

// Enum JackGame.EJackVehicle
// NumValues: 0x0013
enum class EJackVehicle : uint8
{
	None                                     = 0,
	Uma                                      = 1,
	Eggurobo                                 = 2,
	Sukaruraida                              = 3,
	Doragonraida                             = 4,
	Biraida                                  = 5,
	Dexyurahanraido                          = 6,
	Herukattya                               = 7,
	UrufuDoragon                             = 8,
	MeidenDooru                              = 9,
	KiRaaPansar                              = 10,
	SuraimuNaito                             = 11,
	Gorem                                    = 12,
	Gondora                                  = 13,
	Ship                                     = 14,
	Whale                                    = 15,
	Sakana                                   = 16,
	Player                                   = 17,
	MAX                                      = 18,
};

// Enum JackGame.EJackBGMVolumeResult
// NumValues: 0x0007
enum class EJackBGMVolumeResult : uint8
{
	None                                     = 0,
	FirstInVolume                            = 1,
	ChangeInVolume                           = 2,
	LastOutVolume                            = 3,
	InOverlapVolume                          = 4,
	OutOverlapVolume                         = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackMusicEvent
// NumValues: 0x0005
enum class EJackMusicEvent : uint8
{
	BGMChanged                               = 0,
	MEPlayStart                              = 1,
	MEPlayFinished                           = 2,
	Destroy                                  = 3,
	EJackMusicEvent_MAX                      = 4,
};

// Enum JackGame.EJackLanguage
// NumValues: 0x000A
enum class EJackLanguage : uint8
{
	Japanese                                 = 0,
	TraditionalChinese                       = 1,
	SimplifiedChinese                        = 2,
	Korean                                   = 3,
	EnglishGB                                = 4,
	French                                   = 5,
	Italian                                  = 6,
	German                                   = 7,
	Spanish                                  = 8,
	MAX                                      = 9,
};

// Enum JackGame.EJackSEADCategory
// NumValues: 0x001A
enum class EJackSEADCategory : uint8
{
	Music                                    = 0,
	ME                                       = 1,
	SE_System                                = 2,
	SE_PC_Move                               = 3,
	SE_Monster_Move                          = 4,
	SE_Weather                               = 5,
	SE_FieldSound                            = 6,
	SE_Battle                                = 7,
	SE_CS                                    = 8,
	SE_Door                                  = 9,
	SE_IndoorSound                           = 10,
	SE_NPC_Move                              = 11,
	SE_Minigame                              = 12,
	SE_PC_Footstep                           = 13,
	SE_NPC_Footstep                          = 14,
	SE_MON_Footstep                          = 15,
	SE_Vehicle_Footstep                      = 16,
	SE_Vehicle_Move                          = 17,
	SE_OneOffEvent                           = 18,
	SE_IE                                    = 19,
	SE_Torch                                 = 20,
	SE_B020_Monster                          = 21,
	Voice                                    = 22,
	Voice_P001                               = 23,
	Voice_NakamaBTL                          = 24,
	MAX                                      = 25,
};

// Enum JackGame.EJackNPCActionTypeInBPControl
// NumValues: 0x0004
enum class EJackNPCActionTypeInBPControl : uint8
{
	NoAction                                 = 0,
	Turn                                     = 1,
	Animation                                = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackCharacter
// NumValues: 0x0036
enum class EJackCharacter : uint8
{
	P001                                     = 0,
	P002                                     = 1,
	P003                                     = 2,
	P004                                     = 3,
	P005                                     = 4,
	P006                                     = 5,
	P007                                     = 6,
	P008                                     = 7,
	GN00001                                  = 8,
	GN00002                                  = 9,
	GN00003                                  = 10,
	GN00004                                  = 11,
	GN00005                                  = 12,
	GN00006                                  = 13,
	GN00007                                  = 14,
	GN00008                                  = 15,
	GN00009                                  = 16,
	GN00010                                  = 17,
	GN00011                                  = 18,
	GN00012                                  = 19,
	GN00013                                  = 20,
	GN00014                                  = 21,
	GN00015                                  = 22,
	GN00016                                  = 23,
	GN00017                                  = 24,
	GN00018                                  = 25,
	GN00019                                  = 26,
	GN00020                                  = 27,
	GN00021                                  = 28,
	GN00022                                  = 29,
	GN00023                                  = 30,
	GN00024                                  = 31,
	GN00025                                  = 32,
	GN00026                                  = 33,
	GN00027                                  = 34,
	GN00028                                  = 35,
	GN00029                                  = 36,
	GN00030                                  = 37,
	GN00031                                  = 38,
	GN00032                                  = 39,
	GN00033                                  = 40,
	GN00034                                  = 41,
	GN00035                                  = 42,
	GN00036                                  = 43,
	GN00037                                  = 44,
	GN00038                                  = 45,
	GN00039                                  = 46,
	GN00040                                  = 47,
	GN00041                                  = 48,
	GN00042                                  = 49,
	GN00043                                  = 50,
	Unknown                                  = 51,
	Anyone                                   = 52,
	MAX                                      = 53,
};

// Enum JackGame.EJackPlayableMovement
// NumValues: 0x000E
enum class EJackPlayableMovement : uint8
{
	None                                     = 0,
	Default                                  = 1,
	Field                                    = 2,
	NavMesh                                  = 3,
	Osihiki                                  = 4,
	RopeClimb                                = 5,
	SuriSuri                                 = 6,
	Tunawatari                               = 7,
	GakeNobori                               = 8,
	Ladder                                   = 9,
	V104Gake                                 = 10,
	Battle                                   = 11,
	UmaRace                                  = 12,
	MAX                                      = 13,
};

// Enum JackGame.EJackPlayableMovementDefault
// NumValues: 0x0008
enum class EJackPlayableMovementDefault : uint8
{
	None                                     = 0,
	Idle                                     = 1,
	Shiver                                   = 2,
	Heat                                     = 3,
	Dance                                    = 4,
	WindBreak                                = 5,
	ThrustWay                                = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackPipipiType
// NumValues: 0x0009
enum class EJackPipipiType : uint8
{
	None                                     = 0,
	Middle                                   = 1,
	Lowest                                   = 2,
	Lower                                    = 3,
	Higher                                   = 4,
	Highest                                  = 5,
	Default                                  = 6,
	Unknown                                  = 7,
	MAX                                      = 8,
};

// Enum JackGame.EJackPlayableMovementAnimMontage
// NumValues: 0x0003
enum class EJackPlayableMovementAnimMontage : uint8
{
	Wait                                     = 0,
	Turn                                     = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackLadderMovementState
// NumValues: 0x0004
enum class EJackLadderMovementState : uint8
{
	Idle                                     = 0,
	Up                                       = 1,
	Down                                     = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackVehicleShipAnim
// NumValues: 0x0003
enum class EJackVehicleShipAnim : uint8
{
	SHIP_SINK                                = 0,
	SHIP_LEAP                                = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackUnmountNaviCheckOffPurpose
// NumValues: 0x0002
enum class EJackUnmountNaviCheckOffPurpose : uint8
{
	Volume                                   = 0,
	MAX                                      = 1,
};

// Enum JackGame.EJackMonsterFieldDamageReaction
// NumValues: 0x0005
enum class EJackMonsterFieldDamageReaction : uint8
{
	None                                     = 0,
	BlowAway                                 = 1,
	SwordDamage                              = 2,
	GolemPunch                               = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackVehcileMonsterSplashScoketType
// NumValues: 0x0004
enum class EJackVehcileMonsterSplashScoketType : uint8
{
	Free                                     = 0,
	SnapToTarget                             = 1,
	SnapLocationProjectXY                    = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackKeys
// NumValues: 0x0022
enum class EJackKeys : uint8
{
	DPad_Up                                  = 0,
	DPad_Down                                = 1,
	DPad_Left                                = 2,
	DPad_Right                               = 3,
	FaceButton_Top                           = 4,
	FaceButton_Bottom                        = 5,
	FaceButton_Left                          = 6,
	FaceButton_Right                         = 7,
	L1                                       = 8,
	L2                                       = 9,
	L3                                       = 10,
	R1                                       = 11,
	R2                                       = 12,
	R3                                       = 13,
	Start                                    = 14,
	Select                                   = 15,
	Keyboard_Up                              = 16,
	Keyboard_Down                            = 17,
	Keyboard_Left                            = 18,
	Keyboard_Right                           = 19,
	Keyboard_Enter                           = 20,
	Keyboard_BackSpace                       = 21,
	PhysicalButtonMax                        = 22,
	Up                                       = 23,
	Down                                     = 24,
	Left                                     = 25,
	Right                                    = 26,
	Convenience                              = 27,
	Cancel                                   = 28,
	Enter                                    = 29,
	Any                                      = 30,
	None                                     = 31,
	Invalid                                  = 32,
	MAX                                      = 33,
};

// Enum JackGame.EJackActionGuide
// NumValues: 0x0003
enum class EJackActionGuide : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackActionCursor
// NumValues: 0x0007
enum class EJackActionCursor : uint8
{
	Arrow                                    = 0,
	ExclamationMark                          = 1,
	NPCNormal                                = 2,
	FieldAttackSword                         = 3,
	FieldAttackBowgun                        = 4,
	None                                     = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackEquipmentRegion
// NumValues: 0x0008
enum class EJackEquipmentRegion : uint8
{
	Unknown                                  = 0,
	Handedness                               = 1,
	Hand                                     = 2,
	Head                                     = 3,
	Body                                     = 4,
	Accessory1                               = 5,
	Accessory2                               = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackPassiveTokugiType
// NumValues: 0x0025
enum class EJackPassiveTokugiType : uint8
{
	Unknown                                  = 0,
	Tikara_Plus                              = 1,
	Minomamori_Plus                          = 2,
	Subayasa_Plus                            = 3,
	Kiyousa_Plus                             = 4,
	Miryoku_Plus                             = 5,
	KougekiMaryoku_Plus                      = 6,
	KaifukuMaryoku_Plus                      = 7,
	MaxHP_Plus                               = 8,
	MaxMP_Plus                               = 9,
	Kougekiryoku_Plus                        = 10,
	Syubiryoku_Plus                          = 11,
	HPKyuuSyuuRate_Plus                      = 12,
	MPKyuuSyuuRate_Plus                      = 13,
	TateGuardRate_Plus                       = 14,
	BukiGuardRate_Plus                       = 15,
	MikawasiRate_Plus                        = 16,
	CriticalRate_Plus                        = 17,
	ZoneOnRate_Plus                          = 18,
	MeityuuRate_Plus                         = 19,
	ZoneEffect_Up                            = 20,
	OddEffectSuccessRate_Up                  = 21,
	NusumuRate_Up                            = 22,
	SenrituVolume_Up                         = 23,
	SenrituEffect_Up                         = 24,
	HonooAndTutiResist_Up                    = 25,
	KooriAndKazeResist_Up                    = 26,
	HikariAndKaminariResist_Up               = 27,
	BattleWinMPRecover                       = 28,
	GuardCounter                             = 29,
	NioudatiNoKokoroe                        = 30,
	NitouNoKokoroe                           = 31,
	NitouNoGokui                             = 32,
	KabauNoKokoroe                           = 33,
	KabauNoGokui                             = 34,
	YamabikoNoKokoroe                        = 35,
	MAX                                      = 36,
};

// Enum JackGame.EJackGambit
// NumValues: 0x0008
enum class EJackGambit : uint8
{
	Battiriganbare                           = 0,
	Ganganikouze                             = 1,
	Iroiroyarouze                            = 2,
	Inotidaizini                             = 3,
	MPTukauna                                = 4,
	Meireisasero                             = 5,
	Renkeisiyouze                            = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackGender
// NumValues: 0x0004
enum class EJackGender : uint8
{
	Unknown                                  = 0,
	Male                                     = 1,
	Female                                   = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackJob
// NumValues: 0x000A
enum class EJackJob : uint8
{
	Unknown                                  = 0,
	Yuusya                                   = 1,
	Sensi                                    = 2,
	Mahoutukai                               = 3,
	Souryo                                   = 4,
	Tabigeinin                               = 5,
	Butouka                                  = 6,
	Kenja                                    = 7,
	Paradexin                                = 8,
	MAX                                      = 9,
};

// Enum JackGame.EJackPosition
// NumValues: 0x0004
enum class EJackPosition : uint8
{
	Vanguard                                 = 0,
	Unknown                                  = 1,
	Rearguard                                = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMapChangeSound
// NumValues: 0x0019
enum class EJackMapChangeSound : uint8
{
	SE_No_Sound                              = 0,
	SE_Default                               = 1,
	SE_Door_001                              = 2,
	SE_Door_002                              = 3,
	SE_Door_003                              = 4,
	SE_Door_004                              = 5,
	SE_Door_005                              = 6,
	SE_Door_006                              = 7,
	SE_Door_007                              = 8,
	SE_Door_008                              = 9,
	SE_Door_009                              = 10,
	SE_Door_010                              = 11,
	SE_Door_011                              = 12,
	SE_Door_012                              = 13,
	SE_Door_013                              = 14,
	SE_Door_014                              = 15,
	SE_Door_015                              = 16,
	SE_CS_Door_001                           = 17,
	SE_CS_Door_002                           = 18,
	SE_CS_Door_003                           = 19,
	SE_CS_Door_004                           = 20,
	SE_CS_Door_005                           = 21,
	SE_CS_Door_006                           = 22,
	SE_CS_Door_007                           = 23,
	MAX                                      = 24,
};

// Enum JackGame.EJackFadeTime
// NumValues: 0x0014
enum class EJackFadeTime : uint8
{
	Default                                  = 0,
	MapChange                                = 1,
	CutsceneInOut                            = 2,
	CutsceneInIn                             = 3,
	CutsceneOutOut                           = 4,
	CutsceneOutIn                            = 5,
	BattleCutSceneOut                        = 6,
	CutsceneSkip                             = 7,
	InnSleepOut                              = 8,
	InnSleepIn                               = 9,
	Gimmick                                  = 10,
	UI                                       = 11,
	Event                                    = 12,
	EventBattle                              = 13,
	ObjectVisibility                         = 14,
	RuraRiremito                             = 15,
	KujiraFune                               = 16,
	VehicleMount                             = 17,
	PartyTalk                                = 18,
	MAX                                      = 19,
};

// Enum JackGame.EJackBGMControl
// NumValues: 0x0008
enum class EJackBGMControl : uint8
{
	Keep                                     = 0,
	Rewind                                   = 1,
	Stop                                     = 2,
	Pause                                    = 3,
	Nothing                                  = 4,
	EventBattle                              = 5,
	Continue                                 = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackItem_Classification
// NumValues: 0x0020
enum class EJackItem_Classification : uint8
{
	Unknown                                  = 0,
	Sword                                    = 1,
	Dagger                                   = 2,
	Ax                                       = 3,
	Stick                                    = 4,
	Boomerang                                = 5,
	DoubleSword                              = 6,
	Spear                                    = 7,
	Staff                                    = 8,
	Claw                                     = 9,
	Whip                                     = 10,
	Shield                                   = 11,
	LargeShield                              = 12,
	Clothes                                  = 13,
	Armor                                    = 14,
	Robe                                     = 15,
	Hat                                      = 16,
	Helmet                                   = 17,
	FaceAccessory                            = 18,
	NeckAccessory                            = 19,
	FingerAccessory                          = 20,
	HandAccessory                            = 21,
	ArmAccessory                             = 22,
	ShoesAccessory                           = 23,
	FootAccessory                            = 24,
	EtcAccessory                             = 25,
	UsableItem                               = 26,
	Daizinamono                              = 27,
	Material                                 = 28,
	RecipeBook                               = 29,
	Exchange                                 = 30,
	MAX                                      = 31,
};

// Enum JackGame.EJackItemGetIcon
// NumValues: 0x0006
enum class EJackItemGetIcon : uint8
{
	Item                                     = 0,
	Gold                                     = 1,
	CasinoCoin                               = 2,
	TiisanaMedal                             = 3,
	Houzyu                                   = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackGameFlagCategory
// NumValues: 0x0010
enum class EJackGameFlagCategory : uint8
{
	None                                     = 0,
	All                                      = 1,
	Global                                   = 2,
	GameProgress                             = 3,
	System                                   = 4,
	Scenario                                 = 5,
	Quest                                    = 6,
	CutScene                                 = 7,
	Gimmick                                  = 8,
	MiniGame                                 = 9,
	Guide                                    = 10,
	Temporary                                = 11,
	TalkCounter                              = 12,
	MapVisit                                 = 13,
	BoukenGuide                              = 14,
	MAX                                      = 15,
};

// Enum JackGame.EJackPhotoModeEvent
// NumValues: 0x0009
enum class EJackPhotoModeEvent : uint8
{
	HideHudStart                             = 0,
	HideHudEnd                               = 1,
	PhotoModeStart_FadeStart                 = 2,
	PhotoModeStart_FadeBlackOut              = 3,
	PhotoModeStart_FadeEnd                   = 4,
	PhotoModeEnd_FadeStart                   = 5,
	PhotoModeEnd_FadeBlackOut                = 6,
	PhotoModeEnd_FadeEnd                     = 7,
	MAX                                      = 8,
};

// Enum JackGame.EJackPhotoModeEmote
// NumValues: 0x0005
enum class EJackPhotoModeEmote : uint8
{
	Hoimi                                    = 0,
	Mera                                     = 1,
	Hyado                                    = 2,
	Parupunte                                = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackPhotoModeErrorCode
// NumValues: 0x0005
enum class EJackPhotoModeErrorCode : uint8
{
	None                                     = 0,
	Unkown                                   = 1,
	NoSupport                                = 2,
	DiskFull                                 = 3,
	EJackPhotoModeErrorCode_MAX              = 4,
};

// Enum JackGame.EJackPhotoModeCommand
// NumValues: 0x000B
enum class EJackPhotoModeCommand : uint8
{
	None                                     = 0,
	Rearrange                                = 1,
	LookAt                                   = 2,
	Setting                                  = 3,
	EmoteUp                                  = 4,
	EmoteLeft                                = 5,
	EmoteRight                               = 6,
	EmoteDown                                = 7,
	EmoteCancel                              = 8,
	TakePhoto                                = 9,
	MAX                                      = 10,
};

// Enum JackGame.EJackSibari
// NumValues: 0x000B
enum class EJackSibari : uint8
{
	NoEscape                                 = 0,
	NoShopping                               = 1,
	NoEquip                                  = 2,
	EveryoneShyCurse                         = 3,
	ShyCurse                                 = 4,
	WipeGameOver                             = 5,
	AllEnemyStrong                           = 6,
	DowngradeEnemyExp0                       = 7,
	NPCTellsLie                              = 8,
	AloneBattle                              = 9,
	MAX                                      = 10,
};

// Enum JackGame.EJackScenarioTimeZone
// NumValues: 0x0008
enum class EJackScenarioTimeZone : uint8
{
	None                                     = 0,
	Morning                                  = 1,
	Daytime                                  = 2,
	Evening                                  = 3,
	Night                                    = 4,
	Midnight                                 = 5,
	EarlyMorning                             = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackTimeZone
// NumValues: 0x0005
enum class EJackTimeZone : uint8
{
	Morning                                  = 0,
	Daytime                                  = 1,
	Evening                                  = 2,
	Night                                    = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackWorldTimePausePurpose
// NumValues: 0x000E
enum class EJackWorldTimePausePurpose : uint8
{
	Talk                                     = 0,
	Battle                                   = 1,
	Camp                                     = 2,
	Window                                   = 3,
	Cutscene                                 = 4,
	Scenario                                 = 5,
	FastForward                              = 6,
	PartyTalk                                = 7,
	FPSCamera                                = 8,
	Gimmick                                  = 9,
	BenriAction                              = 10,
	MapJump                                  = 11,
	PhotoMode                                = 12,
	MAX                                      = 13,
};

// Enum JackGame.EJackUMGTextColorSet
// NumValues: 0x002C
enum class EJackUMGTextColorSet : uint8
{
	Tuujou                                   = 0,
	Mukou                                    = 1,
	StateEqual                               = 2,
	StateUp                                  = 3,
	StateDown                                = 4,
	Kaifuku                                  = 5,
	Active                                   = 6,
	Standby                                  = 7,
	HP50Percent                              = 8,
	HP25Percent                              = 9,
	Sibou                                    = 10,
	Tyuumoku                                 = 11,
	PaperTitleKoi                            = 12,
	PaperTitleUsui                           = 13,
	PaperTitleSmall                          = 14,
	PaperNormal                              = 15,
	Fukidasi                                 = 16,
	RarityS                                  = 17,
	RarityA                                  = 18,
	RarityB                                  = 19,
	RarityC                                  = 20,
	RarityD                                  = 21,
	RarityE                                  = 22,
	RarityF                                  = 23,
	BatoruRenkei                             = 24,
	RenrekiCompRate                          = 25,
	SmallLocationTitle                       = 26,
	LocationTitle                            = 27,
	MapLocationTitle                         = 28,
	MapTextColor                             = 29,
	MapLayer                                 = 30,
	MapLocationContact                       = 31,
	CasinoExchange                           = 32,
	NoEquipment                              = 33,
	SkillHissatu                             = 34,
	ZoneState                                = 35,
	ScenarioFukidasi                         = 36,
	VoiceDramaNormal                         = 37,
	VoiceDramaGray                           = 38,
	VoiceDramaLogYellow                      = 39,
	VoiceDramaLogBlue                        = 40,
	VoiceDramaFastForward                    = 41,
	VoiceDramaPafupafu                       = 42,
	MAX                                      = 43,
};

// Enum JackGame.EJackUMGAnimMove
// NumValues: 0x0003
enum class EJackUMGAnimMove : uint8
{
	OffsetPosition                           = 0,
	ToPosition                               = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackUMGSnapType
// NumValues: 0x0009
enum class EJackUMGSnapType : uint8
{
	None                                     = 0,
	RightSide                                = 1,
	UnderSide                                = 2,
	UnderLeftSide                            = 3,
	UnderRightSide                           = 4,
	UpperSide                                = 5,
	Overrap                                  = 6,
	UnderRightAlign                          = 7,
	MAX                                      = 8,
};

// Enum JackGame.EJackUMGPresetAnim
// NumValues: 0x000D
enum class EJackUMGPresetAnim : uint8
{
	MainOpen                                 = 0,
	MainClose                                = 1,
	PageOpen                                 = 2,
	PageClose                                = 3,
	PageShow                                 = 4,
	PageHide                                 = 5,
	FadeIn                                   = 6,
	FadeOut                                  = 7,
	AddOpen                                  = 8,
	TypeMax                                  = 9,
	Default                                  = 10,
	None                                     = 11,
	EJackUMGPresetAnim_MAX                   = 12,
};

// Enum JackGame.EJackSlotResultType
// NumValues: 0x002C
enum class EJackSlotResultType : uint8
{
	None                                     = 0,
	Slime_3                                  = 1,
	Slime_4                                  = 2,
	Slime_5                                  = 3,
	SlimeKight_3                             = 4,
	SlimeKight_4                             = 5,
	SlimeKight_5                             = 6,
	SlimeTower_3                             = 7,
	SlimeTower_4                             = 8,
	SlimeTower_5                             = 9,
	KightSlime_3                             = 10,
	KightSlime_4                             = 11,
	KightSlime_5                             = 12,
	Bar_3                                    = 13,
	Bar_4                                    = 14,
	Bar_5                                    = 15,
	Seven_3                                  = 16,
	Seven_4                                  = 17,
	Seven_5                                  = 18,
	Free_3                                   = 19,
	Free_4                                   = 20,
	Free_5                                   = 21,
	Fever_3                                  = 22,
	Fever_4                                  = 23,
	Fever_5                                  = 24,
	Bounus_3                                 = 25,
	Bounus_4                                 = 26,
	Bounus_5                                 = 27,
	Wild_3                                   = 28,
	Wild_4                                   = 29,
	Wild_5                                   = 30,
	Slime_2                                  = 31,
	SlimeKight_2                             = 32,
	SlimeTower_2                             = 33,
	KightSlime_2                             = 34,
	Bar_2                                    = 35,
	Seven_2                                  = 36,
	Free_2                                   = 37,
	Fever_2                                  = 38,
	Bounus_2                                 = 39,
	Wild_2                                   = 40,
	Bounus_Lose                              = 41,
	Bounus_Win                               = 42,
	MAX                                      = 43,
};

// Enum JackGame.EJackMiniGameSlotHand
// NumValues: 0x0013
enum class EJackMiniGameSlotHand : uint8
{
	Slime                                    = 0,
	SlimeKight                               = 1,
	SlimeTower                               = 2,
	KingSlime                                = 3,
	BAR                                      = 4,
	Seven                                    = 5,
	AngelSlime                               = 6,
	DanseJewelry                             = 7,
	DeviateSlime                             = 8,
	TreasureBox                              = 9,
	MetalSlime                               = 10,
	MetalRaider                              = 11,
	MetalBrothers                            = 12,
	MetalKing                                = 13,
	TripleBER                                = 14,
	MetalSeven                               = 15,
	MetalTreasureBox                         = 16,
	None                                     = 17,
	MAX                                      = 18,
};

// Enum JackGame.EJackSlotSetNumberType
// NumValues: 0x0005
enum class EJackSlotSetNumberType : uint8
{
	Five                                     = 0,
	Four                                     = 1,
	Three                                    = 2,
	None                                     = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackSlotHitLineType
// NumValues: 0x0004
enum class EJackSlotHitLineType : uint8
{
	CenterLine                               = 0,
	UpperLine                                = 1,
	LowerLine                                = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMiniGameTableCoinType
// NumValues: 0x0004
enum class EJackMiniGameTableCoinType : uint8
{
	OneCoin                                  = 0,
	TenCoin                                  = 1,
	HundredCoin                              = 2,
	Max                                      = 3,
};

// Enum JackGame.EJackSlotGameState
// NumValues: 0x0018
enum class EJackSlotGameState : uint8
{
	Init                                     = 0,
	Bet                                      = 1,
	BetMain                                  = 2,
	Game                                     = 3,
	ReelStart                                = 4,
	QueenSlime                               = 5,
	ReelChangeAngelSlime                     = 6,
	ReelEnd                                  = 7,
	ResultFreeSpin                           = 8,
	ResultMetalChange                        = 9,
	ResultTreasureBox                        = 10,
	ResultDividend                           = 11,
	ResultCoinUpdate                         = 12,
	ResultLose                               = 13,
	ResultSelect                             = 14,
	MetalChangeEnd                           = 15,
	FreeSpinEnd                              = 16,
	RevertAngelSlime                         = 17,
	Retry                                    = 18,
	FadeOut                                  = 19,
	End                                      = 20,
	FreeSpinStartMessage                     = 21,
	JackPotStart                             = 22,
	MAX                                      = 23,
};

// Enum JackGame.EJackBGMDiscVersion
// NumValues: 0x0003
enum class EJackBGMDiscVersion : uint8
{
	GoldDisc                                 = 0,
	OrchestraDisc                            = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackAudioVolume
// NumValues: 0x000C
enum class EJackAudioVolume : uint8
{
	Volume_Mute                              = 0,
	Volume_1                                 = 1,
	Volume_2                                 = 2,
	Volume_3                                 = 3,
	Volume_4                                 = 4,
	Volume_5                                 = 5,
	Volume_6                                 = 6,
	Volume_7                                 = 7,
	Volume_8                                 = 8,
	Volume_9                                 = 9,
	Volume_10                                = 10,
	MAX                                      = 11,
};

// Enum JackGame.EJackMiniGameRouletteMenuSequenceEnum
// NumValues: 0x0016
enum class EJackMiniGameRouletteMenuSequenceEnum : uint8
{
	Init                                     = 0,
	ResultSelect                             = 1,
	ResultStart                              = 2,
	ResultDemo                               = 3,
	ResultTreasureCoin                       = 4,
	ResultDemoWin                            = 5,
	ResultDemoLose                           = 6,
	ResultDemoJackPot                        = 7,
	ResultDemoJackPotMessage                 = 8,
	ResultDemoCoinGetMessage                 = 9,
	ResultDemoCoinMove                       = 10,
	ResultDemoCoinGet                        = 11,
	ResultDemoCoinUp                         = 12,
	ResultDemoRetryMessage                   = 13,
	Tutorial                                 = 14,
	StartMessage                             = 15,
	GameBet                                  = 16,
	ToGame                                   = 17,
	EndQuestion                              = 18,
	Finished                                 = 19,
	BetStart                                 = 20,
	MAX                                      = 21,
};

// Enum JackGame.EJackOmakeMessageState
// NumValues: 0x000C
enum class EJackOmakeMessageState : uint8
{
	None                                     = 0,
	Open                                     = 1,
	Close                                    = 2,
	Message                                  = 3,
	MessageScrollCheck                       = 4,
	MessageScroll                            = 5,
	KeyWait                                  = 6,
	EndKeyWait                               = 7,
	SelectWindowOpen                         = 8,
	SelectWindowUpdate                       = 9,
	SelectWindowClose                        = 10,
	Max                                      = 11,
};

// Enum JackGame.EJackWorldWindLevel
// NumValues: 0x0005
enum class EJackWorldWindLevel : uint8
{
	Calm                                     = 0,
	Weak                                     = 1,
	Middle                                   = 2,
	Strong                                   = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackWorldWeather
// NumValues: 0x000C
enum class EJackWorldWeather : uint8
{
	ClearAndSunny                            = 0,
	Sunny                                    = 1,
	Cloudy                                   = 2,
	LightRain                                = 3,
	Rain                                     = 4,
	HeavyRain                                = 5,
	Thunderstorm                             = 6,
	Snow                                     = 7,
	Snowstorm                                = 8,
	Fog                                      = 9,
	HeavyFog                                 = 10,
	MAX                                      = 11,
};

// Enum JackGame.EJackUIPlatformType
// NumValues: 0x000B
enum class EJackUIPlatformType : uint8
{
	Unknow                                   = 0,
	Other                                    = 1,
	Windows                                  = 2,
	PS4                                      = 3,
	Switch                                   = 4,
	XboxOne                                  = 5,
	Steam                                    = 6,
	MSStore                                  = 7,
	EpicStore                                = 8,
	Stadia                                   = 9,
	MAX                                      = 10,
};

// Enum JackGame.EJackUIStickMode
// NumValues: 0x0003
enum class EJackUIStickMode : uint8
{
	AnalogStickMode                          = 0,
	DirectionKeyMode                         = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackPopupBalloon
// NumValues: 0x0011
enum class EJackPopupBalloon : uint8
{
	Default                                  = 0,
	DamagePlayer                             = 1,
	DamageMonster                            = 2,
	CriticalDamagePlayer                     = 3,
	CriticalDamageMonster                    = 4,
	RecoverHP                                = 5,
	RecoverMP                                = 6,
	Miss                                     = 7,
	DamageMP                                 = 8,
	DamageHPMiss                             = 9,
	DamageMPMiss                             = 10,
	RecoverHPMiss                            = 11,
	RecoverMPMiss                            = 12,
	KaziDamage                               = 13,
	KaziRecover                              = 14,
	KaziMiss                                 = 15,
	MAX                                      = 16,
};

// Enum JackGame.EJackUMGWindowCursorMoveMode
// NumValues: 0x0005
enum class EJackUMGWindowCursorMoveMode : uint8
{
	EffectiveDirection                       = 0,
	ZeroAngle                                = 1,
	MoveDisable                              = 2,
	InputDisable                             = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackUMGMenuBGMode
// NumValues: 0x0006
enum class EJackUMGMenuBGMode : uint8
{
	None                                     = 0,
	Hide                                     = 1,
	ShowDouguBG                              = 2,
	ShowShopBuyBG                            = 3,
	ShowShopSellBG                           = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackUMGItemActionCommand
// NumValues: 0x000E
enum class EJackUMGItemActionCommand : uint8
{
	None                                     = 0,
	Use                                      = 1,
	Equipment                                = 2,
	Pass                                     = 3,
	Remove                                   = 4,
	Buy                                      = 5,
	Sell                                     = 6,
	DouguSeiri                               = 7,
	EquipmentWithRegion                      = 8,
	EquipmentDetach                          = 9,
	Add                                      = 10,
	Swap                                     = 11,
	Store                                    = 12,
	MAX                                      = 13,
};

// Enum JackGame.EJackUMGItemFind
// NumValues: 0x0004
enum class EJackUMGItemFind : uint8
{
	All                                      = 0,
	Equipped                                 = 1,
	NoEquipment                              = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackActionIconType
// NumValues: 0x0007
enum class EJackActionIconType : uint8
{
	None                                     = 0,
	Bouken                                   = 1,
	Jakutai                                  = 2,
	Kaifuku                                  = 3,
	Kougeki                                  = 4,
	Sien                                     = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackItem_DiscardType
// NumValues: 0x0006
enum class EJackItem_DiscardType : uint8
{
	Unknown                                  = 0,
	NG                                       = 1,
	OK                                       = 2,
	NeedConfirmation1                        = 3,
	NeedConfirmation2                        = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackUMGItemPlacedAcquisition
// NumValues: 0x000F
enum class EJackUMGItemPlacedAcquisition : uint8
{
	BukiShop                                 = 0,
	BouguShop                                = 1,
	BukiBouguShop                            = 2,
	DouguShop                                = 3,
	YorozuShop                               = 4,
	GyousyouninShop                          = 5,
	Casino                                   = 6,
	Medal                                    = 7,
	UmaRace                                  = 8,
	Kira                                     = 9,
	GmmickDrop                               = 10,
	MonsterDrop                              = 11,
	Other                                    = 12,
	None                                     = 13,
	MAX                                      = 14,
};

// Enum JackGame.EJackUMGItemClassification
// NumValues: 0x000C
enum class EJackUMGItemClassification : uint8
{
	ItemNone                                 = 0,
	ItemUnknow                               = 1,
	ItemWeapon                               = 2,
	ItemShield                               = 3,
	ItemArmor                                = 4,
	ItemAccessory                            = 5,
	ItemUsable                               = 6,
	ItemDaizinamono                          = 7,
	ItemMaterial                             = 8,
	ItemRecipe                               = 9,
	Exchange                                 = 10,
	MAX                                      = 11,
};

// Enum JackGame.EJackUMGItemClassRefineType
// NumValues: 0x0015
enum class EJackUMGItemClassRefineType : uint8
{
	Unknown                                  = 0,
	Sword                                    = 1,
	Dagger                                   = 2,
	Ax                                       = 3,
	Stick                                    = 4,
	Boomerang                                = 5,
	DoubleSword                              = 6,
	Spear                                    = 7,
	Staff                                    = 8,
	Claw                                     = 9,
	Whip                                     = 10,
	Shield                                   = 11,
	Armor                                    = 12,
	Helmet                                   = 13,
	Accessory                                = 14,
	Usable                                   = 15,
	Daizinamono                              = 16,
	Material                                 = 17,
	RecipeBook                               = 18,
	Exchange                                 = 19,
	MAX                                      = 20,
};

// Enum JackGame.EJackItem_ParameterType
// NumValues: 0x0013
enum class EJackItem_ParameterType : uint8
{
	Unknown                                  = 0,
	Kougekiryoku                             = 1,
	Syubiryoku                               = 2,
	MPKyuuSyuuRate                           = 3,
	TateGuardRate                            = 4,
	MikawasiRate                             = 5,
	CriticalRate                             = 6,
	ZoneOnRate                               = 7,
	Kiyousa                                  = 8,
	Subayasa                                 = 9,
	KougekiMaryoku                           = 10,
	KaifukuMaryoku                           = 11,
	MaxHP                                    = 12,
	MaxMP                                    = 13,
	Miryoku                                  = 14,
	BukiGuardRate                            = 15,
	Tikara                                   = 16,
	Minomamori                               = 17,
	MAX                                      = 18,
};

// Enum JackGame.EJackUMGItemOsyareType
// NumValues: 0x0004
enum class EJackUMGItemOsyareType : uint8
{
	None                                     = 0,
	Type1                                    = 1,
	Type2                                    = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackUMGGetItemParam
// NumValues: 0x0010
enum class EJackUMGGetItemParam : uint8
{
	None                                     = 0,
	IsCanConsume                             = 1,
	IsLeaveAtSort                            = 2,
	bStoreCommonBag                          = 3,
	SellType                                 = 4,
	DiscardType                              = 5,
	IsEquippedPossible                       = 6,
	IsEquipmentPossibleP001                  = 7,
	IsEquipmentPossibleP002                  = 8,
	IsEquipmentPossibleP003                  = 9,
	IsEquipmentPossibleP004                  = 10,
	IsEquipmentPossibleP005                  = 11,
	IsEquipmentPossibleP006                  = 12,
	IsEquipmentPossibleP007                  = 13,
	IsEquipmentPossibleP008                  = 14,
	MAX                                      = 15,
};

// Enum JackGame.EJackUIScenarioNumber
// NumValues: 0x0005
enum class EJackUIScenarioNumber : uint8
{
	AScenario                                = 0,
	BScenario                                = 1,
	CScenario                                = 2,
	SScenario                                = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackUMGShopResult
// NumValues: 0x0009
enum class EJackUMGShopResult : uint8
{
	BagSuccessful                            = 0,
	BagOverflow                              = 1,
	BagCommonOverflow                        = 2,
	BagCommonFull                            = 3,
	CommonSuccessful                         = 4,
	CommonOverflow                           = 5,
	CommonFull                               = 6,
	NoResult                                 = 7,
	MAX                                      = 8,
};

// Enum JackGame.EJackShop
// NumValues: 0x0008
enum class EJackShop : uint8
{
	Unknown                                  = 0,
	Buki_Shop                                = 1,
	Bougu_Shop                               = 2,
	BukiBougu_Shop                           = 3,
	Dougu_Shop                               = 4,
	Yorozu_Shop                              = 5,
	Gyousyounin_Shop                         = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackUMGMemberList
// NumValues: 0x0005
enum class EJackUMGMemberList : uint8
{
	All                                      = 0,
	Active                                   = 1,
	Standby                                  = 2,
	Single                                   = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackUMGItemSortType
// NumValues: 0x0009
enum class EJackUMGItemSortType : uint8
{
	None                                     = 0,
	GetOrder                                 = 1,
	Classification                           = 2,
	Yomi                                     = 3,
	Tuyosa                                   = 4,
	Narabekae                                = 5,
	Equipment                                = 6,
	Pictorial                                = 7,
	MAX                                      = 8,
};

// Enum JackGame.EJackUMGBattleMenuCommand
// NumValues: 0x0010
enum class EJackUMGBattleMenuCommand : uint8
{
	Kougeki                                  = 0,
	Tokugi                                   = 1,
	Jumon                                    = 2,
	Dougu                                    = 3,
	Bougyo                                   = 4,
	Joutai                                   = 5,
	Irekae                                   = 6,
	Sakusen                                  = 7,
	Nigeru                                   = 8,
	Renkei                                   = 9,
	Owari                                    = 10,
	ToAI                                     = 11,
	Soubi                                    = 12,
	Tatakau                                  = 13,
	Sakusengae                               = 14,
	MAX                                      = 15,
};

// Enum JackGame.EJackUMGUIActionFlow
// NumValues: 0x000F
enum class EJackUMGUIActionFlow : uint8
{
	None                                     = 0,
	Direct                                   = 1,
	Self                                     = 2,
	AllMember                                = 3,
	AllEnemy                                 = 4,
	NearMember                               = 5,
	NearEnemy                                = 6,
	HPList                                   = 7,
	MPList                                   = 8,
	BuffList                                 = 9,
	Tane                                     = 10,
	MonsterList                              = 11,
	GroupList                                = 12,
	CustomFlow                               = 13,
	MAX                                      = 14,
};

// Enum JackGame.EJackCursorSaveTarget
// NumValues: 0x0009
enum class EJackCursorSaveTarget : uint8
{
	Command                                  = 0,
	Player                                   = 1,
	Monster                                  = 2,
	Dougu                                    = 3,
	Jumon                                    = 4,
	Tokugi                                   = 5,
	Renkei                                   = 6,
	Group                                    = 7,
	MAX                                      = 8,
};

// Enum JackGame.EJackRenkeiMember
// NumValues: 0x0008
enum class EJackRenkeiMember : uint8
{
	A                                        = 0,
	B                                        = 1,
	C                                        = 2,
	D                                        = 3,
	MAX_COUNT                                = 4,
	SELECT                                   = 5,
	NONE                                     = 6,
	EJackRenkeiMember_MAX                    = 7,
};

// Enum JackGame.EJackRenkeiCategory
// NumValues: 0x0003
enum class EJackRenkeiCategory : uint8
{
	Program                                  = 0,
	Matinee                                  = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackRenkeiSpectacleShowStatus
// NumValues: 0x0006
enum class EJackRenkeiSpectacleShowStatus : uint8
{
	Available                                = 0,
	AlreadyUsed                              = 1,
	EventBattle                              = 2,
	BattleFieldNarrow                        = 3,
	Error                                    = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackTokugiNotAvailableReason
// NumValues: 0x0007
enum class EJackTokugiNotAvailableReason : uint8
{
	None                                     = 0,
	NotWeapon                                = 1,
	MismatchWeaponStyle                      = 2,
	NoMustEquipment                          = 3,
	NotAvailableSeijaNoUta                   = 4,
	NotAvailablePaladinGuard                 = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackFusigiKaziMaterialUseInfo
// NumValues: 0x0007
enum class EJackFusigiKaziMaterialUseInfo : uint8
{
	NotEnough                                = 0,
	UseBag                                   = 1,
	UseChara                                 = 2,
	UseEquip                                 = 3,
	TypeMAX                                  = 4,
	Invalid                                  = 5,
	EJackFusigiKaziMaterialUseInfo_MAX       = 6,
};

// Enum JackGame.EJackFusigiKaziUMGParts
// NumValues: 0x0019
enum class EJackFusigiKaziUMGParts : uint8
{
	Entrance_StartCommand                    = 0,
	Entrance_SelectCategory                  = 1,
	Entrance_SelectParts                     = 2,
	Entrance_NeedMaterial                    = 3,
	Entrance_NeedInfo                        = 4,
	Entrance_SelectMaterial                  = 5,
	Entrance_SelectPlus                      = 6,
	Entrance_SelectMaterialPlus              = 7,
	Retry_SelectPlayer                       = 8,
	Retry_SelectItemList                     = 9,
	Entrance_PlayerStatus                    = 10,
	Entrance_RetryBall                       = 11,
	Entrance_Setumei1                        = 12,
	Entrance_Setumei2                        = 13,
	Entrance_Difficulty                      = 14,
	Entrance_Kuwasiku                        = 15,
	Game_Base                                = 16,
	Game_SelectCommand                       = 17,
	Game_SelectSkill                         = 18,
	Game_MessageSpecial                      = 19,
	Game_MessageAction                       = 20,
	Game_ResultParts                         = 21,
	TypeMAX                                  = 22,
	Invalid                                  = 23,
	EJackFusigiKaziUMGParts_MAX              = 24,
};

// Enum JackGame.EJackFusigiKaziDifficultyType
// NumValues: 0x0008
enum class EJackFusigiKaziDifficultyType : uint8
{
	Easy                                     = 0,
	LittleEasy                               = 1,
	Normal                                   = 2,
	LittleHard                               = 3,
	Hard                                     = 4,
	TypeMAX                                  = 5,
	Invalid                                  = 6,
	EJackFusigiKaziDifficultyType_MAX        = 7,
};

// Enum JackGame.EJackFusigiKaziCreateCategory
// NumValues: 0x0006
enum class EJackFusigiKaziCreateCategory : uint8
{
	Weapon                                   = 0,
	Armor                                    = 1,
	Accessory                                = 2,
	TypeMAX                                  = 3,
	Invalid                                  = 4,
	EJackFusigiKaziCreateCategory_MAX        = 5,
};

// Enum JackGame.EJackFusigiKaziCreateFrame
// NumValues: 0x000F
enum class EJackFusigiKaziCreateFrame : uint8
{
	A                                        = 0,
	B                                        = 1,
	C                                        = 2,
	D                                        = 3,
	E                                        = 4,
	F                                        = 5,
	G                                        = 6,
	H                                        = 7,
	I                                        = 8,
	J                                        = 9,
	K                                        = 10,
	L                                        = 11,
	TypeMAX                                  = 12,
	Invalid                                  = 13,
	EJackFusigiKaziCreateFrame_MAX           = 14,
};

// Enum JackGame.EJackFusigiKaziParts
// NumValues: 0x001D
enum class EJackFusigiKaziParts : uint8
{
	W_Sword                                  = 0,
	W_Rapier                                 = 1,
	W_Staff                                  = 2,
	A_Hand                                   = 3,
	W_DoubleSword                            = 4,
	P_Robe                                   = 5,
	W_Dagger                                 = 6,
	W_Stick                                  = 7,
	A_Bracelet                               = 8,
	W_Spear                                  = 9,
	W_Ax                                     = 10,
	W_Claw                                   = 11,
	P_Shield                                 = 12,
	P_Clothes                                = 13,
	P_Helmet                                 = 14,
	P_Hat                                    = 15,
	A_Etc                                    = 16,
	W_Whip                                   = 17,
	W_Boomerang                              = 18,
	P_LargeShield                            = 19,
	P_Armor                                  = 20,
	A_Glasses                                = 21,
	A_Earrings                               = 22,
	A_Finger                                 = 23,
	A_Shoes                                  = 24,
	A_Neck                                   = 25,
	TypeMAX                                  = 26,
	Invalid                                  = 27,
	EJackFusigiKaziParts_MAX                 = 28,
};

// Enum JackGame.EJackFusigiKaziKanagata
// NumValues: 0x000A
enum class EJackFusigiKaziKanagata : uint8
{
	Kata_1x3                                 = 0,
	Kata_2x4                                 = 1,
	Kata_1x2                                 = 2,
	Kata_1x4                                 = 3,
	Kata_2x2                                 = 4,
	Kata_2x3                                 = 5,
	Kata_2x1                                 = 6,
	TypeMAX                                  = 7,
	Invalid                                  = 8,
	EJackFusigiKaziKanagata_MAX              = 9,
};

// Enum JackGame.EJackFusigiKaziMetalMaterial
// NumValues: 0x0006
enum class EJackFusigiKaziMetalMaterial : uint8
{
	Iron                                     = 0,
	Cloth                                    = 1,
	Wood                                     = 2,
	TypeMAX                                  = 3,
	Invalid                                  = 4,
	EJackFusigiKaziMetalMaterial_MAX         = 5,
};

// Enum JackGame.EJackFusigiKaziEffect
// NumValues: 0x0013
enum class EJackFusigiKaziEffect : uint8
{
	Smoke_000                                = 0,
	Half                                     = 1,
	Hit_002                                  = 2,
	Hit_000                                  = 3,
	Hit_003                                  = 4,
	Snipe                                    = 5,
	PowerUp                                  = 6,
	PowerDown                                = 7,
	TemperBack_000                           = 8,
	Smoke_001                                = 9,
	HissatuCharge                            = 10,
	Hot                                      = 11,
	Rise                                     = 12,
	Hit_001                                  = 13,
	Square_000                               = 14,
	Fire                                     = 15,
	TypeMAX                                  = 16,
	Invalid                                  = 17,
	EJackFusigiKaziEffect_MAX                = 18,
};

// Enum JackGame.EJackFusigiKaziGameStat
// NumValues: 0x000D
enum class EJackFusigiKaziGameStat : uint8
{
	TurnInit                                 = 0,
	WaitInit                                 = 1,
	CleanBeforeTurn                          = 2,
	MainCommand                              = 3,
	SubCommand                               = 4,
	SelectCursor                             = 5,
	SceneKuwasiku                            = 6,
	WaitAction                               = 7,
	NextTurn                                 = 8,
	DecideEnd                                = 9,
	TypeMAX                                  = 10,
	Invalid                                  = 11,
	EJackFusigiKaziGameStat_MAX              = 12,
};

// Enum JackGame.EJackFusigiKaziGameResult
// NumValues: 0x0008
enum class EJackFusigiKaziGameResult : uint8
{
	Sippai                                   = 0,
	Seikou_0                                 = 1,
	Seikou_1                                 = 2,
	Seikou_2                                 = 3,
	Daiseikou                                = 4,
	TypeMAX                                  = 5,
	Invalid                                  = 6,
	EJackFusigiKaziGameResult_MAX            = 7,
};

// Enum JackGame.EJackFusigiKaziKuwasikuQuality
// NumValues: 0x000A
enum class EJackFusigiKaziKuwasikuQuality : uint8
{
	FAILED_0                                 = 0,
	FAILED_1                                 = 1,
	FAILED_RETRY                             = 2,
	SUCCESS_NORMAL                           = 3,
	SUCCESS_PLUS_1                           = 4,
	SUCCESS_PLUS_2                           = 5,
	SUCCESS_PLUS_3                           = 6,
	TypeMAX                                  = 7,
	Invalid                                  = 8,
	EJackFusigiKaziKuwasikuQuality_MAX       = 9,
};

// Enum JackGame.EJackFusigiKaziGameTokugi
// NumValues: 0x0019
enum class EJackFusigiKaziGameTokugi : uint8
{
	Tataku                                   = 0,
	JougeUti                                 = 1,
	YonrenUti                                = 2,
	SPYonrenUti                              = 3,
	NanameUti                                = 4,
	TekagenUti                               = 5,
	NibaiUti                                 = 6,
	SanbaiUti                                = 7,
	NeraiUti                                 = 8,
	KaryokuAge                               = 9,
	NeppuOrosi                               = 10,
	Hiyasikomi                               = 11,
	MidareUti                                = 12,
	Hepaitosu                                = 13,
	KaisinUp_001                             = 14,
	KaisinUp_002                             = 15,
	KaisinUp_003                             = 16,
	Hissatu_Little                           = 17,
	Tokugi                                   = 18,
	Kuwasiku                                 = 19,
	Siageru                                  = 20,
	Hissatu                                  = 21,
	TypeMAX                                  = 22,
	Invalid                                  = 23,
	EJackFusigiKaziGameTokugi_MAX            = 24,
};

// Enum JackGame.EJackFusigiKaziPossibleType
// NumValues: 0x0008
enum class EJackFusigiKaziPossibleType : uint8
{
	OK                                       = 0,
	NG_PlusMax                               = 1,
	NG_NoHaveMaterial                        = 2,
	NG_NoHaveRetryMaterial                   = 3,
	NG_NotExistRecipe                        = 4,
	TypeMAX                                  = 5,
	Invalid                                  = 6,
	EJackFusigiKaziPossibleType_MAX          = 7,
};

// Enum JackGame.EJackFusigiKaziMaterialSpecial
// NumValues: 0x0008
enum class EJackFusigiKaziMaterialSpecial : uint8
{
	None                                     = 0,
	UpDownPower                              = 1,
	ChangeCP                                 = 2,
	RecoverHP                                = 3,
	KaisinUp                                 = 4,
	TypeMAX                                  = 5,
	Invalid                                  = 6,
	EJackFusigiKaziMaterialSpecial_MAX       = 7,
};

// Enum JackGame.EJackUIFaceIcon
// NumValues: 0x0014
enum class EJackUIFaceIcon : uint8
{
	HudAlive                                 = 0,
	HudDead                                  = 1,
	HudZone                                  = 2,
	HudZoneStart                             = 3,
	HudZoneStop                              = 4,
	MenuBust                                 = 5,
	MenuEye                                  = 6,
	MenuFace                                 = 7,
	FaceZoneOff                              = 8,
	FaceZoneKakuteiIn                        = 9,
	FaceZoneKakuteiWait                      = 10,
	FaceZoneIn                               = 11,
	FaceZoneWait                             = 12,
	FaceZoneLimitIn                          = 13,
	FaceZoneLimitWait                        = 14,
	FaceZoneOut                              = 15,
	FaceZoneAllSet                           = 16,
	HudAliveReset                            = 17,
	HudAliveZone                             = 18,
	MAX                                      = 19,
};

// Enum JackGame.EJackUMGJumonBasyo
// NumValues: 0x0004
enum class EJackUMGJumonBasyo : uint8
{
	All                                      = 0,
	Field                                    = 1,
	Battle                                   = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackUMGMembarZenin
// NumValues: 0x0004
enum class EJackUMGMembarZenin : uint8
{
	None                                     = 0,
	Top                                      = 1,
	Bottom                                   = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackUMGOsusumeSoubi
// NumValues: 0x0004
enum class EJackUMGOsusumeSoubi : uint8
{
	KougekiRyoku                             = 0,
	SyubiRyoku                               = 1,
	KougekiMaryoku                           = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackPartyTalkState
// NumValues: 0x0005
enum class EJackPartyTalkState : uint8
{
	Possible                                 = 0,
	Impossible                               = 1,
	NonParty                                 = 2,
	AllDead                                  = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackBattleCameraMode
// NumValues: 0x0003
enum class EJackBattleCameraMode : uint8
{
	Free                                     = 0,
	Simple                                   = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackBattleSpeedMode
// NumValues: 0x0004
enum class EJackBattleSpeedMode : uint8
{
	Normal                                   = 0,
	Fast                                     = 1,
	VeryFast                                 = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackUMGBoukennoSyoAction
// NumValues: 0x0005
enum class EJackUMGBoukennoSyoAction : uint8
{
	Start                                    = 0,
	Make                                     = 1,
	Delete                                   = 2,
	StartTaiken                              = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackUMGBoukennoSyoSubAction
// NumValues: 0x0005
enum class EJackUMGBoukennoSyoSubAction : uint8
{
	None                                     = 0,
	Sibai                                    = 1,
	Arasuzi                                  = 2,
	SibariArasuzi                            = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackCameraSpeed
// NumValues: 0x000B
enum class EJackCameraSpeed : uint8
{
	VerySlow                                 = 0,
	VerySlow2                                = 1,
	Slow                                     = 2,
	Slow2                                    = 3,
	Normal                                   = 4,
	Normal2                                  = 5,
	LittleFast                               = 6,
	LittleFast2                              = 7,
	Fast                                     = 8,
	Fast2                                    = 9,
	MAX                                      = 10,
};

// Enum JackGame.EJackVoice
// NumValues: 0x0004
enum class EJackVoice : uint8
{
	EnglishGB                                = 0,
	Japanese                                 = 1,
	None                                     = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackDisplayGamma
// NumValues: 0x0065
enum class EJackDisplayGamma : uint8
{
	Level_1                                  = 0,
	Level_2                                  = 1,
	Level_3                                  = 2,
	Level_4                                  = 3,
	Level_5                                  = 4,
	Level_6                                  = 5,
	Level_7                                  = 6,
	Level_8                                  = 7,
	Level_9                                  = 8,
	Level_10                                 = 9,
	Level_11                                 = 10,
	Level_12                                 = 11,
	Level_13                                 = 12,
	Level_14                                 = 13,
	Level_15                                 = 14,
	Level_16                                 = 15,
	Level_17                                 = 16,
	Level_18                                 = 17,
	Level_19                                 = 18,
	Level_20                                 = 19,
	Level_21                                 = 20,
	Level_22                                 = 21,
	Level_23                                 = 22,
	Level_24                                 = 23,
	Level_25                                 = 24,
	Level_26                                 = 25,
	Level_27                                 = 26,
	Level_28                                 = 27,
	Level_29                                 = 28,
	Level_30                                 = 29,
	Level_31                                 = 30,
	Level_32                                 = 31,
	Level_33                                 = 32,
	Level_34                                 = 33,
	Level_35                                 = 34,
	Level_36                                 = 35,
	Level_37                                 = 36,
	Level_38                                 = 37,
	Level_39                                 = 38,
	Level_40                                 = 39,
	Level_41                                 = 40,
	Level_42                                 = 41,
	Level_43                                 = 42,
	Level_44                                 = 43,
	Level_45                                 = 44,
	Level_46                                 = 45,
	Level_47                                 = 46,
	Level_48                                 = 47,
	Level_49                                 = 48,
	Level_50                                 = 49,
	Level_51                                 = 50,
	Level_52                                 = 51,
	Level_53                                 = 52,
	Level_54                                 = 53,
	Level_55                                 = 54,
	Level_56                                 = 55,
	Level_57                                 = 56,
	Level_58                                 = 57,
	Level_59                                 = 58,
	Level_60                                 = 59,
	Level_61                                 = 60,
	Level_62                                 = 61,
	Level_63                                 = 62,
	Level_64                                 = 63,
	Level_65                                 = 64,
	Level_66                                 = 65,
	Level_67                                 = 66,
	Level_68                                 = 67,
	Level_69                                 = 68,
	Level_70                                 = 69,
	Level_71                                 = 70,
	Level_72                                 = 71,
	Level_73                                 = 72,
	Level_74                                 = 73,
	Level_75                                 = 74,
	Level_76                                 = 75,
	Level_77                                 = 76,
	Level_78                                 = 77,
	Level_79                                 = 78,
	Level_80                                 = 79,
	Level_81                                 = 80,
	Level_82                                 = 81,
	Level_83                                 = 82,
	Level_84                                 = 83,
	Level_85                                 = 84,
	Level_86                                 = 85,
	Level_87                                 = 86,
	Level_88                                 = 87,
	Level_89                                 = 88,
	Level_90                                 = 89,
	Level_91                                 = 90,
	Level_92                                 = 91,
	Level_93                                 = 92,
	Level_94                                 = 93,
	Level_95                                 = 94,
	Level_96                                 = 95,
	Level_97                                 = 96,
	Level_98                                 = 97,
	Level_99                                 = 98,
	Level_100                                = 99,
	MAX                                      = 100,
};

// Enum JackGame.EJackUMGRestartMenuType
// NumValues: 0x0005
enum class EJackUMGRestartMenuType : uint8
{
	Oinori                                   = 0,
	LastVisited                              = 1,
	AutoSave                                 = 2,
	Cancel                                   = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackPlayGoMenuType
// NumValues: 0x0007
enum class EJackPlayGoMenuType : uint8
{
	None                                     = 0,
	GoToTitle                                = 1,
	FromBoukennosyo                          = 2,
	FromFukkatunojumon                       = 3,
	DontGo                                   = 4,
	VoiceDrama                               = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackPlayGoMenuResult
// NumValues: 0x0004
enum class EJackPlayGoMenuResult : uint8
{
	None                                     = 0,
	Close                                    = 1,
	CompleteInstall                          = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackRenkeiSettei
// NumValues: 0x0003
enum class EJackRenkeiSettei : uint8
{
	JidouRenkei                              = 0,
	RenkeiSinai                              = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackKeyboardType
// NumValues: 0x0007
enum class EJackKeyboardType : uint8
{
	Japanese                                 = 0,
	English                                  = 1,
	French                                   = 2,
	Italian                                  = 3,
	German                                   = 4,
	Spanish                                  = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackUMGSibariMode
// NumValues: 0x0005
enum class EJackUMGSibariMode : uint8
{
	None                                     = 0,
	Settei                                   = 1,
	Kakunin                                  = 2,
	Tassei                                   = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackUMGGraphicOption
// NumValues: 0x000D
enum class EJackUMGGraphicOption : uint8
{
	All                                      = 0,
	AntiAliasing                             = 1,
	PostProcessing                           = 2,
	Shadow                                   = 3,
	Texture                                  = 4,
	VisualEffect                             = 5,
	Foliage                                  = 6,
	FrameRate                                = 7,
	VSync                                    = 8,
	Window                                   = 9,
	ScreenPercent                            = 10,
	ScreenRes                                = 11,
	EJackUMGGraphicOption_MAX                = 12,
};

// Enum JackGame.EJackSaveLoadResult
// NumValues: 0x000B
enum class EJackSaveLoadResult : uint8
{
	SUCCESS                                  = 0,
	BUSY                                     = 1,
	NO_FILE                                  = 2,
	NO_SPACE                                 = 3,
	READ_ONLY                                = 4,
	EXIST_FILE                               = 5,
	INVALID_USER                             = 6,
	BROKEN                                   = 7,
	NO_SYSTEM                                = 8,
	UNKNOWN_ERROR                            = 9,
	MAX                                      = 10,
};

// Enum JackGame.EJackScenarioPlaythrough
// NumValues: 0x0003
enum class EJackScenarioPlaythrough : uint8
{
	First                                    = 0,
	Second                                   = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackFukkatunojumon
// NumValues: 0x0009
enum class EJackFukkatunojumon : uint8
{
	None                                     = 0,
	DQ11_Normal                              = 1,
	DQ1_2_Normal                             = 2,
	DQ1_2_Fame                               = 3,
	Special_Triple                           = 4,
	Special_2ndLapEnding                     = 5,
	Special_StoreOpen                        = 6,
	Special_NewGamePlus                      = 7,
	MAX                                      = 8,
};

// Enum JackGame.EJackFukkatunojumonSpell
// NumValues: 0x0006
enum class EJackFukkatunojumonSpell : uint8
{
	None                                     = 0,
	DQ11                                     = 1,
	DQ1                                      = 2,
	DQ2                                      = 3,
	Special                                  = 4,
	EJackFukkatunojumonSpell_MAX             = 5,
};

// Enum JackGame.EJackFukkatunojumonPlatform
// NumValues: 0x0006
enum class EJackFukkatunojumonPlatform : uint8
{
	None                                     = 0,
	PS4                                      = 1,
	NT3DS                                    = 2,
	NTSWITCH                                 = 3,
	MARBLE                                   = 4,
	EJackFukkatunojumonPlatform_MAX          = 5,
};

// Enum JackGame.EJackYadoyaMorningCallTimezone
// NumValues: 0x0007
enum class EJackYadoyaMorningCallTimezone : uint8
{
	None                                     = 0,
	Morning                                  = 1,
	Noon                                     = 2,
	Evening                                  = 3,
	Night                                    = 4,
	StayToMorning                            = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackCampMenuResult
// NumValues: 0x0006
enum class EJackCampMenuResult : uint8
{
	None                                     = 0,
	Break                                    = 1,
	Blacksmith                               = 2,
	Church                                   = 3,
	CampQuit                                 = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackKyoukaiEffectEventType
// NumValues: 0x0005
enum class EJackKyoukaiEffectEventType : uint8
{
	ExecuteRevive                            = 0,
	ExecuteTreat                             = 1,
	ExecuteDispel                            = 2,
	ExecuteSave                              = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackChurchFukkatunojumon
// NumValues: 0x0005
enum class EJackChurchFukkatunojumon : uint8
{
	Unknown                                  = 0,
	Open                                     = 1,
	Close                                    = 2,
	FlagCheck                                = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackChurch
// NumValues: 0x0006
enum class EJackChurch : uint8
{
	Unknown                                  = 0,
	Church                                   = 1,
	Bible                                    = 2,
	ChapterSave                              = 3,
	ChapterSaveYotti                         = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackKyoukaiEventType
// NumValues: 0x0004
enum class EJackKyoukaiEventType : uint8
{
	None                                     = 0,
	ToTitle                                  = 1,
	SibariReset                              = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackKyoukaiSavedFlag
// NumValues: 0x0004
enum class EJackKyoukaiSavedFlag : uint8
{
	None                                     = 0,
	UnSave                                   = 1,
	Saved                                    = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMedal_Shop
// NumValues: 0x0003
enum class EJackMedal_Shop : uint8
{
	BranchOffice                             = 0,
	GirlsHighSchool                          = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackUMGShopType
// NumValues: 0x000A
enum class EJackUMGShopType : uint8
{
	Shop                                     = 0,
	Yadoya                                   = 1,
	Kyoukai                                  = 2,
	Ginkou                                   = 3,
	CasinoCoin                               = 4,
	CasinoKeihin                             = 5,
	MedalStamp                               = 6,
	MedalKeihin                              = 7,
	UtinaosiNoHouju                          = 8,
	MAX                                      = 9,
};

// Enum JackGame.EJackYadoyaEventType
// NumValues: 0x0004
enum class EJackYadoyaEventType : uint8
{
	Stay                                     = 0,
	Break                                    = 1,
	Quit                                     = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackUMGYaodyaState
// NumValues: 0x0005
enum class EJackUMGYaodyaState : uint8
{
	Enable                                   = 0,
	Disable                                  = 1,
	DisableStay                              = 2,
	DisableBreak                             = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackUMGItemContainerType
// NumValues: 0x0006
enum class EJackUMGItemContainerType : uint8
{
	Value                                    = 0,
	Text                                     = 1,
	Image                                    = 2,
	Object                                   = 3,
	Visibility                               = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackUMGWidgetConnectTarget
// NumValues: 0x0005
enum class EJackUMGWidgetConnectTarget : uint8
{
	Viewport                                 = 0,
	CanvasPanel                              = 1,
	RootPanel                                = 2,
	Menu                                     = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackUMGMenuLoadResult
// NumValues: 0x0005
enum class EJackUMGMenuLoadResult : uint8
{
	NoLoad                                   = 0,
	Error                                    = 1,
	Complate                                 = 2,
	Loading                                  = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackUMGMenuId
// NumValues: 0x0038
enum class EJackUMGMenuId : uint8
{
	NoOpen                                   = 0,
	CloseMenu                                = 1,
	TitleMenu                                = 2,
	BoukenNoSyoMenu                          = 3,
	MainMenu                                 = 4,
	BattleMenu                               = 5,
	ShopMenu                                 = 6,
	KyoukaiMenu                              = 7,
	GinkouMenu                               = 8,
	YadoyaMenu                               = 9,
	CampStartMenu                            = 10,
	CampMenu                                 = 11,
	BattleRoundMenu                          = 12,
	BattleSakusenMenu                        = 13,
	SakusenYoyakuMenu                        = 14,
	CSSkipDialog                             = 15,
	KaziMenu                                 = 16,
	SyougouDialog                            = 17,
	UmaRaceMenu                              = 18,
	WorldMap                                 = 19,
	LocalMap                                 = 20,
	MedalStampTyou                           = 21,
	MedalKeihinKoukanMenu                    = 22,
	CasinoCoinKoukanMenu                     = 23,
	CasinoKeihinKoukanMenu                   = 24,
	TabinoOmoideMenu                         = 25,
	TokugiPanel                              = 26,
	TutorialWindow                           = 27,
	SyuurenjyouMenu                          = 28,
	PlayGoMenu                               = 29,
	ArasuziMenu                              = 30,
	NerusenPicture                           = 31,
	RestartMenu                              = 32,
	KimeraMenu                               = 33,
	MeosiMenu                                = 34,
	QuestClearWindow                         = 35,
	HoujuKoukanMenu                          = 36,
	SibariTasseiMenu                         = 37,
	ShortCutMenu                             = 38,
	PhotoModeMenu                            = 39,
	VoiceDrama                               = 40,
	VoiceDramaList                           = 41,
	PrivacyPolicy                            = 42,
	SystemSetteiMenu                         = 43,
	SuspendGameMenu                          = 44,
	ChangeProfileMenu                        = 45,
	PairingControllerMenu                    = 46,
	DisplayProfile                           = 47,
	InitControllerMenu                       = 48,
	KeyConfigMenu                            = 49,
	SelectKetteiKeyMenu                      = 50,
	SubMenuSettei                            = 51,
	JukeboxMenu                              = 52,
	MenuDebugMenu                            = 53,
	AllMenu                                  = 54,
	MAX                                      = 55,
};

// Enum JackGame.EJackUMGVoiceDramaMode
// NumValues: 0x0005
enum class EJackUMGVoiceDramaMode : uint8
{
	VoiceDramaSelect                         = 0,
	VoiceDramaMain                           = 1,
	VoiceDramaStaff                          = 2,
	VoiceDramaPafuPafu                       = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackUMGCutSceneSkipEvent
// NumValues: 0x0004
enum class EJackUMGCutSceneSkipEvent : uint8
{
	None                                     = 0,
	CutSceneSkip                             = 1,
	SwitchAutoFeed                           = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackRuraPurpose
// NumValues: 0x0007
enum class EJackRuraPurpose : uint8
{
	Invalid                                  = 0,
	Rura                                     = 1,
	KazenoBousi                              = 2,
	ChimeraWing                              = 3,
	Riremito                                 = 4,
	OmoideNoSuzu                             = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackCursorSaveScene
// NumValues: 0x0004
enum class EJackCursorSaveScene : uint8
{
	Field                                    = 0,
	Battle                                   = 1,
	Other                                    = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackSpeed
// NumValues: 0x000A
enum class EJackSpeed : uint8
{
	None                                     = 0,
	SpecialSlow                              = 1,
	Slowest                                  = 2,
	Slower                                   = 3,
	Slow                                     = 4,
	Normal                                   = 5,
	Fast                                     = 6,
	Faster                                   = 7,
	Fastest                                  = 8,
	MAX                                      = 9,
};

// Enum JackGame.EJackUMGSyougouColor
// NumValues: 0x0004
enum class EJackUMGSyougouColor : uint8
{
	Legend                                   = 0,
	Platinum                                 = 1,
	Gold                                     = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackUMGPresetColor
// NumValues: 0x0003
enum class EJackUMGPresetColor : uint8
{
	NormalColor                              = 0,
	DisableColor                             = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackUMGCutSceneSkipDialog
// NumValues: 0x0006
enum class EJackUMGCutSceneSkipDialog : uint8
{
	Hide                                     = 0,
	Show                                     = 1,
	AlwaysShow                               = 2,
	Close                                    = 3,
	Title                                    = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackUMGNorimonoGauge
// NumValues: 0x000F
enum class EJackUMGNorimonoGauge : uint8
{
	Horse3                                   = 0,
	Horse4                                   = 1,
	Norimono_1                               = 2,
	Norimono_2                               = 3,
	Norimono_3                               = 4,
	Norimono_4                               = 5,
	Norimono_5                               = 6,
	Norimono_6                               = 7,
	Norimono_7                               = 8,
	Norimono_8                               = 9,
	Norimono_00                              = 10,
	Norimono_01                              = 11,
	Norimono_02                              = 12,
	Norimono_03                              = 13,
	MAX                                      = 14,
};

// Enum JackGame.EJackWorldMapOpenReason
// NumValues: 0x0007
enum class EJackWorldMapOpenReason : uint8
{
	None                                     = 0,
	OpenMapButton                            = 1,
	WorldMapMenu                             = 2,
	UseDaijinamono                           = 3,
	JumonRura                                = 4,
	MapRura                                  = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackUMGNorimonoGaugeAction
// NumValues: 0x0006
enum class EJackUMGNorimonoGaugeAction : uint8
{
	Oriru_On                                 = 0,
	Oriru_Off                                = 1,
	SpecialOn                                = 2,
	SpecialOff                               = 3,
	None                                     = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackUMGHudRegion
// NumValues: 0x0006
enum class EJackUMGHudRegion : uint8
{
	Default                                  = 0,
	FullScreen                               = 1,
	Menu                                     = 2,
	HudStatus                                = 3,
	LocationTitle                            = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackUMGMenuLayout
// NumValues: 0x000C
enum class EJackUMGMenuLayout : uint8
{
	Default                                  = 0,
	LeftTop                                  = 1,
	RightTop                                 = 2,
	CenterTop                                = 3,
	LeftBottom                               = 4,
	RightBottom                              = 5,
	CenterBottom                             = 6,
	CenterCenter                             = 7,
	LeftCenter                               = 8,
	RightCenter                              = 9,
	Zero                                     = 10,
	MAX                                      = 11,
};

// Enum JackGame.EJackUMGHudAnimationAction
// NumValues: 0x000C
enum class EJackUMGHudAnimationAction : uint8
{
	Open                                     = 0,
	Close                                    = 1,
	AnimWait                                 = 2,
	AnimActiveStart                          = 3,
	AnimActiveWait                           = 4,
	AnimActiveEnd                            = 5,
	AnimDead                                 = 6,
	AnimNoActiveWait                         = 7,
	AnimActiveEndOnce                        = 8,
	CloseNoAnimation                         = 9,
	SuperMode                                = 10,
	MAX                                      = 11,
};

// Enum JackGame.EJackUMGSaveingIndicator
// NumValues: 0x0005
enum class EJackUMGSaveingIndicator : uint8
{
	ManualSave                               = 0,
	AutoSave                                 = 1,
	FailedSave                               = 2,
	FailedSaveVoiceDrama                     = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackUMGHorizontalMode
// NumValues: 0x0008
enum class EJackUMGHorizontalMode : uint8
{
	None                                     = 0,
	DisplayGamma                             = 1,
	VolumeBGM                                = 2,
	VolumeSE                                 = 3,
	VolumeVoice                              = 4,
	ScreenPercentage                         = 5,
	ShadowQuality                            = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackUMGHudInitQueued
// NumValues: 0x0005
enum class EJackUMGHudInitQueued : uint8
{
	Queued                                   = 0,
	NotQueued                                = 1,
	TokiWoUbau                               = 2,
	QueuedActive                             = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackUMGHudPlateAnim
// NumValues: 0x0009
enum class EJackUMGHudPlateAnim : uint8
{
	Start                                    = 0,
	END                                      = 1,
	Wait                                     = 2,
	StartActive                              = 3,
	EndActive                                = 4,
	WaitActive                               = 5,
	Dead                                     = 6,
	EndActiveOnce                            = 7,
	MAX                                      = 8,
};

// Enum JackGame.EJackUMGHudStatusMode
// NumValues: 0x0005
enum class EJackUMGHudStatusMode : uint8
{
	Name                                     = 0,
	Hp                                       = 1,
	Mp                                       = 2,
	Level                                    = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackUMGNamePlatform
// NumValues: 0x0005
enum class EJackUMGNamePlatform : uint8
{
	PFSwitch                                 = 0,
	PFPs4                                    = 1,
	PFWindows                                = 2,
	PFOther                                  = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackVoiceDramaMode
// NumValues: 0x0008
enum class EJackVoiceDramaMode : uint8
{
	Init                                     = 0,
	Voice                                    = 1,
	Subtitle                                 = 2,
	Log                                      = 3,
	FastForward                              = 4,
	FastBackward                             = 5,
	StaffRoll                                = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackVoiceDramaPausePurpose
// NumValues: 0x0006
enum class EJackVoiceDramaPausePurpose : uint8
{
	Window                                   = 0,
	Wait                                     = 1,
	LogMode                                  = 2,
	MenuEnd                                  = 3,
	Pafupafu                                 = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackVoiceDramaEvent
// NumValues: 0x000B
enum class EJackVoiceDramaEvent : uint8
{
	PageEnd                                  = 0,
	LogPageUpdate                            = 1,
	FastForwardStart                         = 2,
	FastForwardEnd                           = 3,
	FastBackwardStart                        = 4,
	FastBackwardEnd                          = 5,
	TagStart                                 = 6,
	TagAllEnd                                = 7,
	CaptionFadeOut                           = 8,
	CancelButtonChange                       = 9,
	MAX                                      = 10,
};

// Enum JackGame.EJackVoiceDramaTagEvent
// NumValues: 0x0019
enum class EJackVoiceDramaTagEvent : uint8
{
	Wait                                     = 0,
	WaitTag                                  = 1,
	BG                                       = 2,
	BGHide                                   = 3,
	BGWait                                   = 4,
	Image                                    = 5,
	ImageHide                                = 6,
	ImageWait                                = 7,
	FadeOut                                  = 8,
	FadeIn                                   = 9,
	FadeWait                                 = 10,
	BGMPlay                                  = 11,
	BGMStop                                  = 12,
	BGMWait                                  = 13,
	EnvPlay                                  = 14,
	EnvStop                                  = 15,
	EnvWait                                  = 16,
	VoicePlay                                = 17,
	VoiceWait                                = 18,
	SEPlay                                   = 19,
	SEWait                                   = 20,
	MEPlay                                   = 21,
	Pafupafu                                 = 22,
	StaffRoll                                = 23,
	MAX                                      = 24,
};

// Enum JackGame.EJackVoiceDramaHDPafuPafuJoyConPower
// NumValues: 0x0005
enum class EJackVoiceDramaHDPafuPafuJoyConPower : uint8
{
	Mild                                     = 0,
	Strength                                 = 1,
	MostStrongth                             = 2,
	NumValues                                = 3,
	EJackVoiceDramaHDPafuPafuJoyConPower_MAX = 4,
};

// Enum JackGame.EJackVoiceDramaHDPafuPafuLeftRight
// NumValues: 0x0004
enum class EJackVoiceDramaHDPafuPafuLeftRight : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	None                                     = 2,
	EJackVoiceDramaHDPafuPafuLeftRight_MAX   = 3,
};

// Enum JackGame.EJackVoiceDramaHDPafuPafuVoiceTag
// NumValues: 0x0005
enum class EJackVoiceDramaHDPafuPafuVoiceTag : uint8
{
	Start                                    = 0,
	PafuPafu                                 = 1,
	Knockout                                 = 2,
	Wait                                     = 3,
	EJackVoiceDramaHDPafuPafuVoiceTag_MAX    = 4,
};

// Enum JackGame.EJackVoiceDramaHDPafuPafuWhatRound
// NumValues: 0x0006
enum class EJackVoiceDramaHDPafuPafuWhatRound : uint8
{
	Round1                                   = 0,
	Round2                                   = 1,
	Round3                                   = 2,
	Round4                                   = 3,
	NumValues                                = 4,
	EJackVoiceDramaHDPafuPafuWhatRound_MAX   = 5,
};

// Enum JackGame.EJackVoiceDramaHDPafuPafuVoiceTagTutorial
// NumValues: 0x0004
enum class EJackVoiceDramaHDPafuPafuVoiceTagTutorial : uint8
{
	Start                                    = 0,
	Knockout                                 = 1,
	Wait                                     = 2,
	EJackVoiceDramaHDPafuPafuVoiceTagTutorial_MAX = 3,
};

// Enum JackGame.EJackFukubikiPayout
// NumValues: 0x0007
enum class EJackFukubikiPayout : uint8
{
	ThreeSunMarks                            = 0,
	ThreeStarMarks                           = 1,
	ThreeMoonMarks                           = 2,
	ThreeWaterMarks                          = 3,
	ThreeHeartMarks                          = 4,
	Losing                                   = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackMessageOutputMode
// NumValues: 0x0004
enum class EJackMessageOutputMode : uint8
{
	Default                                  = 0,
	FadeInLine                               = 1,
	FadeInPage                               = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackUMGTextJustify
// NumValues: 0x0006
enum class EJackUMGTextJustify : uint8
{
	Left                                     = 0,
	Center                                   = 1,
	Right                                    = 2,
	FromCenter                               = 3,
	FromRight                                = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackSerifuWindowType
// NumValues: 0x0006
enum class EJackSerifuWindowType : uint8
{
	SefiruWindow                             = 0,
	SimpleText                               = 1,
	TenNoKoe                                 = 2,
	MovieMessage                             = 3,
	TokugiPanel                              = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackEvaluateType
// NumValues: 0x0006
enum class EJackEvaluateType : uint8
{
	Equal                                    = 0,
	Big                                      = 1,
	Little                                   = 2,
	Up                                       = 3,
	Under                                    = 4,
	EJackEvaluateType_MAX                    = 5,
};

// Enum JackGame.EJackActionMotionCompleteType
// NumValues: 0x0004
enum class EJackActionMotionCompleteType : uint8
{
	Playing                                  = 0,
	ArrivalLoopSection                       = 1,
	PlayComplete                             = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackRandomCalcType
// NumValues: 0x0006
enum class EJackRandomCalcType : uint8
{
	None                                     = 0,
	Plus                                     = 1,
	Minus                                    = 2,
	PlusMinus                                = 3,
	Rate                                     = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackActionEffectDirectionType
// NumValues: 0x0005
enum class EJackActionEffectDirectionType : uint8
{
	None                                     = 0,
	KeepStart                                = 1,
	Velocity                                 = 2,
	Attach                                   = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackAttachTargetType
// NumValues: 0x0004
enum class EJackAttachTargetType : uint8
{
	None                                     = 0,
	World                                    = 1,
	Actor                                    = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackActionComparison
// NumValues: 0x0008
enum class EJackActionComparison : uint8
{
	None                                     = 0,
	Equals                                   = 1,
	NotEquals                                = 2,
	GreaterThan                              = 3,
	GreaterThanEquals                        = 4,
	LessThan                                 = 5,
	LessThanEquals                           = 6,
	EJackActionComparison_MAX                = 7,
};

// Enum JackGame.EJackActionModuleCreateType
// NumValues: 0x0009
enum class EJackActionModuleCreateType : uint8
{
	None                                     = 0,
	Damage                                   = 1,
	OddEffect                                = 2,
	Revive                                   = 3,
	Kyuusyuu                                 = 4,
	NakamaYobi                               = 5,
	Nusumu                                   = 6,
	Other                                    = 7,
	MAX                                      = 8,
};

// Enum JackGame.EJackActionCalcOddEffectFlag
// NumValues: 0x0004
enum class EJackActionCalcOddEffectFlag : uint8
{
	CalcScore                                = 0,
	CriticalEnable                           = 1,
	CriticalDisable                          = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackActionCalcDamageFlag
// NumValues: 0x0012
enum class EJackActionCalcDamageFlag : uint8
{
	CalcScore                                = 0,
	CalcMantan                               = 1,
	CriticalEnable                           = 2,
	CriticalDisable                          = 3,
	MissDisable                              = 4,
	MikawasiDisable                          = 5,
	TateGuardDisable                         = 6,
	BukiGuardDisable                         = 7,
	KanzenGuardDisable                       = 8,
	KnockBackDisable                         = 9,
	UkenagasiDisable                         = 10,
	CounterDisable                           = 11,
	KabauEnable                              = 12,
	KabawareEnable                           = 13,
	JumonHansyaEnable                        = 14,
	DamageHosyou                             = 15,
	MatchAttackEnable                        = 16,
	MAX                                      = 17,
};

// Enum JackGame.EJackCalcActionFlag
// NumValues: 0x0002
enum class EJackCalcActionFlag : uint8
{
	NotUseMP                                 = 0,
	MAX                                      = 1,
};

// Enum JackGame.EJackActionWaitType
// NumValues: 0x0005
enum class EJackActionWaitType : uint8
{
	Motion                                   = 0,
	TimeFromShot                             = 1,
	TimeFromHit                              = 2,
	ActionExecEnd                            = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackActionCategory
// NumValues: 0x000A
enum class EJackActionCategory : uint8
{
	None                                     = 0,
	Kougeki                                  = 1,
	Tokugi                                   = 2,
	Jumon                                    = 3,
	Item                                     = 4,
	Renkei                                   = 5,
	Special                                  = 6,
	Nigeru                                   = 7,
	Nusumu                                   = 8,
	MAX                                      = 9,
};

// Enum JackGame.EJackAirBubble
// NumValues: 0x0004
enum class EJackAirBubble : uint8
{
	Small                                    = 0,
	Large                                    = 1,
	Side                                     = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackAirBubbleActivity
// NumValues: 0x0004
enum class EJackAirBubbleActivity : uint8
{
	Neutral                                  = 0,
	Active                                   = 1,
	Deactive                                 = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackAirBubbleControlPurpose
// NumValues: 0x0003
enum class EJackAirBubbleControlPurpose : uint8
{
	CutScene                                 = 0,
	Internal                                 = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackIgnoreAnimNotifyPurpose
// NumValues: 0x000B
enum class EJackIgnoreAnimNotifyPurpose : uint8
{
	WaterSurface                             = 0,
	LoadReduction                            = 1,
	UmaRace                                  = 2,
	CharacterCapture                         = 3,
	BattleActionCamera                       = 4,
	DitherHide                               = 5,
	CategoryHidden                           = 6,
	BattleManager                            = 7,
	FollowingCharacter                       = 8,
	PhotoMode                                = 9,
	MAX                                      = 10,
};

// Enum JackGame.EJackWaiterDisablePurpose
// NumValues: 0x0005
enum class EJackWaiterDisablePurpose : uint8
{
	DamageField                              = 0,
	Dash                                     = 1,
	PhotoMode                                = 2,
	HasProps                                 = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackNumberOfAttacks
// NumValues: 0x0004
enum class EJackNumberOfAttacks : uint8
{
	Once                                     = 0,
	OnceInLoop                               = 1,
	Every                                    = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackCSArmType
// NumValues: 0x0003
enum class EJackCSArmType : uint8
{
	Right                                    = 0,
	Left                                     = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackBattleActionCameraGroundCheck
// NumValues: 0x0004
enum class EJackBattleActionCameraGroundCheck : uint8
{
	None                                     = 0,
	StartFieldCheck                          = 1,
	PeriodicFrameCheck                       = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackBattleActionCameraLengthAdjustCategory
// NumValues: 0x0009
enum class EJackBattleActionCameraLengthAdjustCategory : uint8
{
	None                                     = 0,
	Attacker                                 = 1,
	Defender                                 = 2,
	Larger                                   = 3,
	Smaller                                  = 4,
	AttackerMightLarger                      = 5,
	DefenderMightLarger                      = 6,
	AllMightLarger                           = 7,
	MAX                                      = 8,
};

// Enum JackGame.EJackBattleActionCameraTimingCategory
// NumValues: 0x0006
enum class EJackBattleActionCameraTimingCategory : uint8
{
	None                                     = 0,
	CameraStart                              = 1,
	ActionShot                               = 2,
	ActionHit                                = 3,
	ActionHitComponent                       = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackBattleActionCameraHiddenCharacterCategory
// NumValues: 0x0008
enum class EJackBattleActionCameraHiddenCharacterCategory : uint8
{
	None                                     = 0,
	Player                                   = 1,
	Monster                                  = 2,
	NotAttackerCharacters                    = 3,
	NotDefenderCharacters                    = 4,
	NotRenkeiAttackerA                       = 5,
	NotRenkeiAttackerB                       = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackBattleActionCameraEyeLocationCategory
// NumValues: 0x0005
enum class EJackBattleActionCameraEyeLocationCategory : uint8
{
	Character                                = 0,
	FieldCenter                              = 1,
	Characker_RotationRelative               = 2,
	Characker_RotationRelative_ZeroPitch     = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackBattleActionCameraLoopCategory
// NumValues: 0x0004
enum class EJackBattleActionCameraLoopCategory : uint8
{
	Wait                                     = 0,
	End                                      = 1,
	Loop                                     = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackBattleActionCameraPlayConditions
// NumValues: 0x0003
enum class EJackBattleActionCameraPlayConditions : uint8
{
	Time                                     = 0,
	ActionShot                               = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackBattleActionCameraAtCategory
// NumValues: 0x000A
enum class EJackBattleActionCameraAtCategory : uint8
{
	TriggerCharacter                         = 0,
	TriggerCharacterPartner                  = 1,
	TargetCharacter                          = 2,
	TriggerMightCenter                       = 3,
	EnemyMightCenter                         = 4,
	CharactersCenter                         = 5,
	BattleFieldCenter                        = 6,
	TargetCharactersCenter                   = 7,
	TargetCharactersCenter2                  = 8,
	MAX                                      = 9,
};

// Enum JackGame.EJackBattleActionCameraAttackerCategory
// NumValues: 0x0005
enum class EJackBattleActionCameraAttackerCategory : uint8
{
	Player                                   = 0,
	Friend                                   = 1,
	Monster                                  = 2,
	Max                                      = 3,
	None                                     = 4,
};

// Enum JackGame.EJackBattleCommandAILayerType
// NumValues: 0x0004
enum class EJackBattleCommandAILayerType : uint8
{
	Main                                     = 0,
	Sub                                      = 1,
	Konran                                   = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackBattleLockOnNotify
// NumValues: 0x0002
enum class EJackBattleLockOnNotify : uint8
{
	None                                     = 0,
	MAX                                      = 1,
};

// Enum JackGame.EJackMonsterAlignmentSequenceEnum
// NumValues: 0x0004
enum class EJackMonsterAlignmentSequenceEnum : uint8
{
	MonsterAlignmentSequence_OneLine_Third   = 0,
	MonsterAlignmentSequence_OneLine_Event   = 1,
	MonsterAlignmentSequence_OneLine_Event2  = 2,
	MonsterAlignmentSequence_MAX             = 3,
};

// Enum JackGame.EJackBattleNigeruSequenceEventType
// NumValues: 0x0006
enum class EJackBattleNigeruSequenceEventType : uint8
{
	None                                     = 0,
	PlayNigeruMessage                        = 1,
	PlayPostEffect                           = 2,
	PlayMawarikomaretaMessage                = 3,
	End                                      = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackBattleResultZenmetuEventType
// NumValues: 0x0005
enum class EJackBattleResultZenmetuEventType : uint8
{
	None                                     = 0,
	PlayZenmetuMessage                       = 1,
	StopZenmetuMessage                       = 2,
	End                                      = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackBattleFukidasiPlaySec
// NumValues: 0x0007
enum class EJackBattleFukidasiPlaySec : uint8
{
	None                                     = 0,
	Init                                     = 1,
	Start                                    = 2,
	Loop                                     = 3,
	OutAnimWait                              = 4,
	End                                      = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackBattleFukidasiTextVoiceType
// NumValues: 0x000B
enum class EJackBattleFukidasiTextVoiceType : uint8
{
	None                                     = 0,
	Yaruki                                   = 1,
	Tyuuikanki                               = 2,
	Reisei                                   = 3,
	Aseri                                    = 4,
	Ikari                                    = 5,
	Kansya                                   = 6,
	Yorokobi                                 = 7,
	Konran                                   = 8,
	VoiceID                                  = 9,
	MAX                                      = 10,
};

// Enum JackGame.EJackBattleFukidasiTalkValueParamCalcType
// NumValues: 0x0004
enum class EJackBattleFukidasiTalkValueParamCalcType : uint8
{
	Equal                                    = 0,
	High                                     = 1,
	Low                                      = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackBattleFukidasiTalkConditionPeriod
// NumValues: 0x0008
enum class EJackBattleFukidasiTalkConditionPeriod : uint8
{
	None                                     = 0,
	TurnEnd                                  = 1,
	RoundEnd                                 = 2,
	BattleEnd                                = 3,
	NextFukidasi                             = 4,
	NextFukiTurnEnd                          = 5,
	OneFrame                                 = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackBattleFukidasiCalcType
// NumValues: 0x0004
enum class EJackBattleFukidasiCalcType : uint8
{
	None                                     = 0,
	And                                      = 1,
	Or                                       = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackBattleFukidasiSndCalcType
// NumValues: 0x0005
enum class EJackBattleFukidasiSndCalcType : uint8
{
	None                                     = 0,
	Uniform                                  = 1,
	Multi                                    = 2,
	Sub                                      = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackBattleFukidasiTalkTurn
// NumValues: 0x0005
enum class EJackBattleFukidasiTalkTurn : uint8
{
	None                                     = 0,
	ActiveTurn                               = 1,
	NonActiveTurn                            = 2,
	MonsterTurn                              = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackBattleFukidasiUIType
// NumValues: 0x0004
enum class EJackBattleFukidasiUIType : uint8
{
	None                                     = 0,
	Left                                     = 1,
	Right                                    = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackBattleFukidasiTalkTimming
// NumValues: 0x0013
enum class EJackBattleFukidasiTalkTimming : uint8
{
	None                                     = 0,
	Init                                     = 1,
	BattleStart                              = 2,
	TurnStart                                = 3,
	TurnOddEffect                            = 4,
	CommandInputStart                        = 5,
	CommandInput                             = 6,
	ActionStart                              = 7,
	ActionFinalHit                           = 8,
	ActionEnd                                = 9,
	IntActionStart                           = 10,
	IntActionEnd                             = 11,
	Sakusen                                  = 12,
	NigeruFaild                              = 13,
	ResultLevelUp                            = 14,
	ResultItem                               = 15,
	BattleEnd                                = 16,
	AnimNotify                               = 17,
	MAX                                      = 18,
};

// Enum JackGame.EJackBattleFukidasiTextEnableType
// NumValues: 0x0004
enum class EJackBattleFukidasiTextEnableType : uint8
{
	None                                     = 0,
	Approach                                 = 1,
	Auto                                     = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackBattleInterruptActionTiming
// NumValues: 0x0006
enum class EJackBattleInterruptActionTiming : uint8
{
	None                                     = 0,
	BattleStart                              = 1,
	RoundStart                               = 2,
	TurnEnd                                  = 3,
	RoundEnd                                 = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackPrgCameraIDFlag
// NumValues: 0x000B
enum class EJackPrgCameraIDFlag : uint8
{
	CasterOnly                               = 0,
	TargetOnly                               = 1,
	TargetOnly2                              = 2,
	BackOnly                                 = 3,
	GreenRect                                = 4,
	Shrink                                   = 5,
	Forward                                  = 6,
	NoLow                                    = 7,
	NoAnim                                   = 8,
	Relocation                               = 9,
	MAX                                      = 10,
};

// Enum JackGame.EJackPrgCameraAvailType
// NumValues: 0x0007
enum class EJackPrgCameraAvailType : uint8
{
	None                                     = 0,
	NG                                       = 1,
	PushOut                                  = 2,
	ScoreBad                                 = 3,
	ScoreGood                                = 4,
	Priority                                 = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackPrgCameraScoreType
// NumValues: 0x0008
enum class EJackPrgCameraScoreType : uint8
{
	None                                     = 0,
	Overlap                                  = 1,
	MarginH                                  = 2,
	MarginW                                  = 3,
	MarginAll                                = 4,
	TurnPCDist                               = 5,
	PreCamera                                = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackPrgCameraCalcType
// NumValues: 0x0006
enum class EJackPrgCameraCalcType : uint8
{
	None                                     = 0,
	Front                                    = 1,
	Diagonal                                 = 2,
	Bird                                     = 3,
	Socket                                   = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackBattleActionCameraBehavior
// NumValues: 0x0006
enum class EJackBattleActionCameraBehavior : uint8
{
	None                                     = 0,
	AllAction                                = 1,
	AllTokugi                                = 2,
	MeireiAction                             = 3,
	MeireiTokugi                             = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackBattleHazukasiiNoroiCharacterType
// NumValues: 0x000B
enum class EJackBattleHazukasiiNoroiCharacterType : uint8
{
	None                                     = 0,
	P001                                     = 1,
	P002                                     = 2,
	P002B                                    = 3,
	P003                                     = 4,
	P004                                     = 5,
	P005                                     = 6,
	P006                                     = 7,
	P007                                     = 8,
	P008                                     = 9,
	MAX                                      = 10,
};

// Enum JackGame.EJackBattleActionSelectType
// NumValues: 0x0005
enum class EJackBattleActionSelectType : uint8
{
	None                                     = 0,
	ListTop                                  = 1,
	Top60                                    = 2,
	ListBottom                               = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackBattleActionTargetType
// NumValues: 0x0005
enum class EJackBattleActionTargetType : uint8
{
	Normal                                   = 0,
	Hate                                     = 1,
	HPLow                                    = 2,
	Random                                   = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackBattleMoreActionType
// NumValues: 0x0007
enum class EJackBattleMoreActionType : uint8
{
	Once                                     = 0,
	Twice                                    = 1,
	ThreeTimes                               = 2,
	Random                                   = 3,
	OnceTwiceRepeat                          = 4,
	TwiceOnceRepeat                          = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackBattleActionPatternType
// NumValues: 0x000A
enum class EJackBattleActionPatternType : uint8
{
	None                                     = 0,
	Heiti                                    = 1,
	Gake                                     = 2,
	Saka                                     = 3,
	Kaidan                                   = 4,
	KaitenA                                  = 5,
	KaitenB                                  = 6,
	KaitenC                                  = 7,
	Manual                                   = 8,
	MAX                                      = 9,
};

// Enum JackGame.EJackBattleIgnoreFastModePurpose
// NumValues: 0x0004
enum class EJackBattleIgnoreFastModePurpose : uint8
{
	MonsterAppear                            = 0,
	MatineeRenkei                            = 1,
	BattleResult                             = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackBattleWeaponMontageKey
// NumValues: 0x000A
enum class EJackBattleWeaponMontageKey : uint8
{
	None                                     = 0,
	Init                                     = 1,
	Idle                                     = 2,
	IdleSheathe                              = 3,
	BougyoStart                              = 4,
	BougyoIdle                               = 5,
	BougyoEnd                                = 6,
	Unsheathe                                = 7,
	Sheathe                                  = 8,
	MAX                                      = 9,
};

// Enum JackGame.EJackBattleWeaponStateMachine
// NumValues: 0x0004
enum class EJackBattleWeaponStateMachine : uint8
{
	None                                     = 0,
	Default                                  = 1,
	Action                                   = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackBattleWeaponNotify
// NumValues: 0x0008
enum class EJackBattleWeaponNotify : uint8
{
	None                                     = 0,
	Start                                    = 1,
	Unsheathe                                = 2,
	Sheathe                                  = 3,
	Idle                                     = 4,
	BougyoStart                              = 5,
	BougyoIdle                               = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackCharacterMeshCollisionControlPurpose
// NumValues: 0x0002
enum class EJackCharacterMeshCollisionControlPurpose : uint8
{
	BattleProjectile                         = 0,
	MAX                                      = 1,
};

// Enum JackGame.EJackCharacterMeshControlChannel
// NumValues: 0x0002
enum class EJackCharacterMeshControlChannel : uint8
{
	Projectile                               = 0,
	MAX                                      = 1,
};

// Enum JackGame.EJackCustomMomevent
// NumValues: 0x0005
enum class EJackCustomMomevent : uint8
{
	Blueprint                                = 0,
	Free                                     = 1,
	SimpleAutoNavigation                     = 2,
	Disabled                                 = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackTokiNoKesinMotionState
// NumValues: 0x0004
enum class EJackTokiNoKesinMotionState : uint8
{
	Stand                                    = 0,
	Sit                                      = 1,
	Move                                     = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackCutSceneFadeLayer
// NumValues: 0x0003
enum class EJackCutSceneFadeLayer : uint8
{
	Normal                                   = 0,
	High                                     = 1,
	EJackCutSceneFadeLayer_MAX               = 2,
};

// Enum JackGame.EJackFacialReferencedAnimSequence
// NumValues: 0x0005
enum class EJackFacialReferencedAnimSequence : uint8
{
	Default                                  = 0,
	Additional                               = 1,
	CutScene                                 = 2,
	CutSceneAdditional                       = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackFacialAnimCategory
// NumValues: 0x0003
enum class EJackFacialAnimCategory : uint8
{
	Upper                                    = 0,
	Lower                                    = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackMaterialParameterControlMethod
// NumValues: 0x0004
enum class EJackMaterialParameterControlMethod : uint8
{
	NoCopy                                   = 0,
	CopyMaterialInstanceParameters           = 1,
	CopyParameterOverrides                   = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMonsterFollowerReactionMode
// NumValues: 0x0004
enum class EJackMonsterFollowerReactionMode : uint8
{
	None                                     = 0,
	Follow                                   = 1,
	Synchronize                              = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMonsterFollowerFormation
// NumValues: 0x0003
enum class EJackMonsterFollowerFormation : uint8
{
	Default                                  = 0,
	Line                                     = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackMonsterApproachAction
// NumValues: 0x0003
enum class EJackMonsterApproachAction : uint8
{
	None                                     = 0,
	FindAndFieldAction                       = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackMonsterReaction
// NumValues: 0x0008
enum class EJackMonsterReaction : uint8
{
	None                                     = 0,
	FindAndEscape                            = 1,
	FeelDangerAndEscape                      = 2,
	FindAndMeeting                           = 3,
	FindAndChase                             = 4,
	BehaviorLikeLeader                       = 5,
	BehaviorLikeFollower                     = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackMonsterDepopBehavior
// NumValues: 0x0004
enum class EJackMonsterDepopBehavior : uint8
{
	Default                                  = 0,
	ReturnToHome                             = 1,
	GoToSpecifyPoint                         = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMonsterPatrolMovingMethod
// NumValues: 0x0005
enum class EJackMonsterPatrolMovingMethod : uint8
{
	Walk                                     = 0,
	Run                                      = 1,
	SmoothWalk                               = 2,
	SmoothRun                                = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackMonsterPatrolMode
// NumValues: 0x0006
enum class EJackMonsterPatrolMode : uint8
{
	None                                     = 0,
	OneShot                                  = 1,
	OneShotAndDepop                          = 2,
	LoopReverse                              = 3,
	LoopRound                                = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackMonsterPopCondition
// NumValues: 0x000C
enum class EJackMonsterPopCondition : uint8
{
	Default                                  = 0,
	Sleep                                    = 1,
	GateKeeper                               = 2,
	LieInWait                                = 3,
	LieInWait_Sense                          = 4,
	TakeOff                                  = 5,
	TakeOff_Sense                            = 6,
	Mimic                                    = 7,
	Mimic_Sense                              = 8,
	Await                                    = 9,
	Await_Sense                              = 10,
	MAX                                      = 11,
};

// Enum JackGame.EJackMonsterActiveScenario
// NumValues: 0x0006
enum class EJackMonsterActiveScenario : uint8
{
	Always                                   = 0,
	Scenario_A                               = 1,
	Scenario_B                               = 2,
	Scenario_C                               = 3,
	Scenario_S                               = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackMonsterActiveWeather
// NumValues: 0x0006
enum class EJackMonsterActiveWeather : uint8
{
	None                                     = 0,
	Fine                                     = 1,
	Rain                                     = 2,
	Snow                                     = 3,
	All                                      = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackZukanMotionEquippedShieldFlag
// NumValues: 0x0004
enum class EJackZukanMotionEquippedShieldFlag : uint8
{
	Ignore                                   = 0,
	On                                       = 1,
	Off                                      = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackStaffRollEventType
// NumValues: 0x000B
enum class EJackStaffRollEventType : uint8
{
	None                                     = 0,
	Initialize                               = 1,
	ClearFontCache                           = 2,
	Fade                                     = 3,
	Background                               = 4,
	CenterText                               = 5,
	ScrollStart                              = 6,
	ScrollText                               = 7,
	FadeStart                                = 8,
	FadeText                                 = 9,
	MAX                                      = 10,
};

// Enum JackGame.EJackDebugMenuCategory
// NumValues: 0x002A
enum class EJackDebugMenuCategory : uint8
{
	Game                                     = 0,
	Scenario                                 = 1,
	Battle                                   = 2,
	Monster                                  = 3,
	Player                                   = 4,
	Camera                                   = 5,
	Item                                     = 6,
	NPC                                      = 7,
	Character                                = 8,
	GameCharacter                            = 9,
	Field                                    = 10,
	CutScene                                 = 11,
	UI                                       = 12,
	Sound                                    = 13,
	MiniGame                                 = 14,
	Level                                    = 15,
	Macro                                    = 16,
	FlagDebugger                             = 17,
	DisplayInfo                              = 18,
	ItemPresent                              = 19,
	RecipeBook                               = 20,
	Medal                                    = 21,
	Coin                                     = 22,
	TextMacroReplace                         = 23,
	Sibari                                   = 24,
	Fukkatunojumon                           = 25,
	SQEXNGWord                               = 26,
	SaveLoad                                 = 27,
	Save                                     = 28,
	Load                                     = 29,
	Profile                                  = 30,
	Debug                                    = 31,
	TestMaps                                 = 32,
	System                                   = 33,
	TextureStreaming                         = 34,
	Engine                                   = 35,
	Stat                                     = 36,
	Show                                     = 37,
	Cheat                                    = 38,
	ShowDebug                                = 39,
	Misc                                     = 40,
	MAX                                      = 41,
};

// Enum JackGame.EJackDisperisonLayer
// NumValues: 0x0005
enum class EJackDisperisonLayer : uint8
{
	Blueprint01                              = 0,
	Blueprint02                              = 1,
	Blueprint03                              = 2,
	Ohter                                    = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackHideCompoHiddenPurpose
// NumValues: 0x000D
enum class EJackHideCompoHiddenPurpose : uint8
{
	CompoOff                                 = 0,
	Gimmick                                  = 1,
	BattleSystem                             = 2,
	EquipmentSystem                          = 3,
	WeaponSystem                             = 4,
	CharacterSystem                          = 5,
	Action                                   = 6,
	AnimNotify                               = 7,
	AnimSM                                   = 8,
	Renkei                                   = 9,
	Result                                   = 10,
	VehicleRideV204                          = 11,
	MAX                                      = 12,
};

// Enum JackGame.EJackEquipmentHiddenPurpose
// NumValues: 0x0009
enum class EJackEquipmentHiddenPurpose : uint8
{
	NPC                                      = 0,
	Battle                                   = 1,
	Renkei                                   = 2,
	CutScene                                 = 3,
	Vehicle                                  = 4,
	Camp                                     = 5,
	Character                                = 6,
	AnimSM                                   = 7,
	MAX                                      = 8,
};

// Enum JackGame.EJackEyeLookAtControlPurpose
// NumValues: 0x0002
enum class EJackEyeLookAtControlPurpose : uint8
{
	CutScene                                 = 0,
	MAX                                      = 1,
};

// Enum JackGame.EJackFacialControlLayer
// NumValues: 0x000A
enum class EJackFacialControlLayer : uint8
{
	Default                                  = 0,
	AnimNotifyState                          = 1,
	TakeOverToIE                             = 2,
	AnimNotify                               = 3,
	IE                                       = 4,
	Renkei                                   = 5,
	Battle                                   = 6,
	CutScene                                 = 7,
	CutSceneCaption                          = 8,
	MAX                                      = 9,
};

// Enum JackGame.EJackRandomLipSyncMode
// NumValues: 0x0004
enum class EJackRandomLipSyncMode : uint8
{
	UseCurve                                 = 0,
	Enabled                                  = 1,
	Disabled                                 = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackRandomBlinkMode
// NumValues: 0x0004
enum class EJackRandomBlinkMode : uint8
{
	UseCurve                                 = 0,
	Enabled                                  = 1,
	Disabled                                 = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackLowerFacialState
// NumValues: 0x0009
enum class EJackLowerFacialState : uint8
{
	State000                                 = 0,
	State001                                 = 1,
	State002                                 = 2,
	State003                                 = 3,
	State004                                 = 4,
	State005                                 = 5,
	State006                                 = 6,
	State007                                 = 7,
	MAX                                      = 8,
};

// Enum JackGame.EJackUpperFacialState
// NumValues: 0x0009
enum class EJackUpperFacialState : uint8
{
	State000                                 = 0,
	State001                                 = 1,
	State002                                 = 2,
	State003                                 = 3,
	State004                                 = 4,
	State005                                 = 5,
	State006                                 = 6,
	State007                                 = 7,
	MAX                                      = 8,
};

// Enum JackGame.EJackFacialAnimTransitionMode
// NumValues: 0x0004
enum class EJackFacialAnimTransitionMode : uint8
{
	NegativeToPositive                       = 0,
	PositiveToPositive                       = 1,
	PositiveToNegative                       = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackVowel
// NumValues: 0x000C
enum class EJackVowel : uint8
{
	A                                        = 0,
	I                                        = 1,
	U                                        = 2,
	E                                        = 3,
	O                                        = 4,
	N                                        = 5,
	NA                                       = 6,
	XUA                                      = 7,
	NU                                       = 8,
	SH                                       = 9,
	BMP                                      = 10,
	MAX                                      = 11,
};

// Enum JackGame.EJackEyeControl
// NumValues: 0x0003
enum class EJackEyeControl : uint8
{
	Bone                                     = 0,
	Texture                                  = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackFriendAnimation
// NumValues: 0x000A
enum class EJackFriendAnimation : uint8
{
	PostFullBodySlot                         = 0,
	PostBasePose                             = 1,
	PostFootIK                               = 2,
	PostArmIK                                = 3,
	PostLookAt                               = 4,
	PostFacial                               = 5,
	PostHair                                 = 6,
	PostDynamics                             = 7,
	FullAnimation                            = 8,
	MAX                                      = 9,
};

// Enum JackGame.EJackFukkatunojumonCategory
// NumValues: 0x0021
enum class EJackFukkatunojumonCategory : uint8
{
	None                                     = 0,
	Scenario                                 = 1,
	CutScene                                 = 2,
	GameProgress                             = 3,
	System                                   = 4,
	Guide                                    = 5,
	Gimmick                                  = 6,
	Quest                                    = 7,
	MapVisit                                 = 8,
	Minigame                                 = 9,
	Daijinamono                              = 10,
	MapStart                                 = 11,
	PlayerName                               = 12,
	Level                                    = 13,
	Exp                                      = 14,
	Motimono                                 = 15,
	Equip                                    = 16,
	SkillPanel                               = 17,
	Action                                   = 18,
	FriendJoin                               = 19,
	GuestNPCJoin                             = 20,
	Coordinate                               = 21,
	ScenarioProgress                         = 22,
	Gold                                     = 23,
	Medal                                    = 24,
	Coin                                     = 25,
	BagCommon                                = 26,
	BagEquip                                 = 27,
	RecipeBook                               = 28,
	MonsterZukan                             = 29,
	ItemZukan                                = 30,
	Achievement                              = 31,
	MAX                                      = 32,
};

// Enum JackGame.EJackFukkatunojumonSpecial
// NumValues: 0x0006
enum class EJackFukkatunojumonSpecial : uint8
{
	None                                     = 0,
	Triple                                   = 1,
	SecondLapEnding                          = 2,
	StoreOpen                                = 3,
	NewGamePlus                              = 4,
	EJackFukkatunojumonSpecial_MAX           = 5,
};

// Enum JackGame.EJackFusigiKaziGlowPattern
// NumValues: 0x0006
enum class EJackFusigiKaziGlowPattern : uint8
{
	Normal                                   = 0,
	ChargeUp                                 = 1,
	ChargeDown                               = 2,
	TypeMAX                                  = 3,
	Invalid                                  = 4,
	EJackFusigiKaziGlowPattern_MAX           = 5,
};

// Enum JackGame.EJackFusigiKaziMetalType
// NumValues: 0x000C
enum class EJackFusigiKaziMetalType : uint8
{
	Default                                  = 0,
	Complete                                 = 1,
	OverForge                                = 2,
	Forge                                    = 3,
	Power_2_0                                = 4,
	Power_0_5_1                              = 5,
	Power_0_5_2                              = 6,
	FireUp                                   = 7,
	FireDown                                 = 8,
	TypeMAX                                  = 9,
	Invalid                                  = 10,
	EJackFusigiKaziMetalType_MAX             = 11,
};

// Enum JackGame.EJackFusigiKaziGameActionCategory
// NumValues: 0x0008
enum class EJackFusigiKaziGameActionCategory : uint8
{
	Tataku                                   = 0,
	Tokugi                                   = 1,
	Kuwasiku                                 = 2,
	Siageru                                  = 3,
	Hissatu                                  = 4,
	TypeMAX                                  = 5,
	Invalid                                  = 6,
	EJackFusigiKaziGameActionCategory_MAX    = 7,
};

// Enum JackGame.EJackUIKeyBindType
// NumValues: 0x0005
enum class EJackUIKeyBindType : uint8
{
	Unbind                                   = 0,
	DefaultMenuBind                          = 1,
	SakusenYoyakuMenuBind                    = 2,
	PhotoModeBind                            = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackInteractiveActorComponentControlPurpose
// NumValues: 0x0002
enum class EJackInteractiveActorComponentControlPurpose : uint8
{
	Monster                                  = 0,
	MAX                                      = 1,
};

// Enum JackGame.EJackUIDisplayLocation
// NumValues: 0x0007
enum class EJackUIDisplayLocation : uint8
{
	Default                                  = 0,
	Fukidasi                                 = 1,
	NamePlate                                = 2,
	EmotionIcon                              = 3,
	FusigiKaziEffect                         = 4,
	FusigiKaziTable                          = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackDlcDataUpdatePhase
// NumValues: 0x0009
enum class EJackDlcDataUpdatePhase : uint8
{
	None                                     = 0,
	Start                                    = 1,
	Mount                                    = 2,
	PackageCache                             = 3,
	Load                                     = 4,
	LoadtWait                                = 5,
	FlagUpdate                               = 6,
	End                                      = 7,
	MAX                                      = 8,
};

// Enum JackGame.EJackLazyMessageQueueId
// NumValues: 0x0005
enum class EJackLazyMessageQueueId : uint8
{
	Quest                                    = 0,
	Tokugi                                   = 1,
	Tutorial                                 = 2,
	PartyConditionOff                        = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackLookAtControlBone
// NumValues: 0x0005
enum class EJackLookAtControlBone : uint8
{
	Spine1                                   = 0,
	Spine2                                   = 1,
	Neck                                     = 2,
	Head                                     = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackMatineeFacialReferanceState
// NumValues: 0x0004
enum class EJackMatineeFacialReferanceState : uint8
{
	ReferenceRuntimeCurve                    = 0,
	ReferenceAnimationCurve                  = 1,
	ReferenceBoneSRT                         = 2,
	EJackMatineeFacialReferanceState_MAX     = 3,
};

// Enum JackGame.EJackMedal_Event
// NumValues: 0x000B
enum class EJackMedal_Event : uint8
{
	MedalStamp                               = 0,
	MedalStampAndUnlockFourPage              = 1,
	DontHaveMedal                            = 2,
	BranchOffice_FirstContact                = 3,
	BranchOffice_FirstContact2               = 4,
	BranchOffice_Completed                   = 5,
	GirlsHighSchool_FirstContact             = 6,
	GirlsHighSchool_FirstContact2            = 7,
	GirlsHighSchool_Completed                = 8,
	GirlsHighSchool_Exchange                 = 9,
	MAX                                      = 10,
};

// Enum JackGame.EJackMeosiSlotBarChanceAnimState
// NumValues: 0x0005
enum class EJackMeosiSlotBarChanceAnimState : uint8
{
	Idle                                     = 0,
	In                                       = 1,
	Wait                                     = 2,
	Out                                      = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackMeosiSlotTimeZone
// NumValues: 0x0004
enum class EJackMeosiSlotTimeZone : uint8
{
	Time_Daytime                             = 0,
	Time_Twilight                            = 1,
	Time_Night                               = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMeosiSlotDebugDraw
// NumValues: 0x0006
enum class EJackMeosiSlotDebugDraw : uint8
{
	NONE                                     = 0,
	HANDS                                    = 1,
	STATE                                    = 2,
	LOGS                                     = 3,
	OTHERS                                   = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackMeosiSlotBonusMonsterSetting
// NumValues: 0x0010
enum class EJackMeosiSlotBonusMonsterSetting : uint8
{
	Setting1_BB                              = 0,
	Setting1_SB                              = 1,
	Setting2_BB                              = 2,
	Setting2_SB                              = 3,
	Setting3_BB                              = 4,
	Setting3_SB                              = 5,
	Setting4_BB                              = 6,
	Setting4_SB                              = 7,
	Setting5_BB                              = 8,
	Setting5_SB                              = 9,
	Setting6_BB                              = 10,
	Setting6_SB                              = 11,
	Setting7_BB                              = 12,
	Setting7_SB                              = 13,
	Setting_UraMode                          = 14,
	MAX                                      = 15,
};

// Enum JackGame.EJackMeosiSlotMachineCondition
// NumValues: 0x0006
enum class EJackMeosiSlotMachineCondition : uint8
{
	Level1                                   = 0,
	Level2                                   = 1,
	Level3                                   = 2,
	Level4                                   = 3,
	Level5                                   = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackMeosiSlotBonusMonsterLevel
// NumValues: 0x0006
enum class EJackMeosiSlotBonusMonsterLevel : uint8
{
	Level1                                   = 0,
	Level2                                   = 1,
	Level3                                   = 2,
	Level4                                   = 3,
	Level5                                   = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackMeosiSlotBGM
// NumValues: 0x0021
enum class EJackMeosiSlotBGM : uint8
{
	Morning                                  = 0,
	Evening                                  = 1,
	Night                                    = 2,
	NormalBonusConfirm                       = 3,
	BounusGame                               = 4,
	Result                                   = 5,
	VolcanoStage                             = 6,
	CastleStage                              = 7,
	WinDecide                                = 8,
	ShimohuriChance                          = 9,
	MediumBossBattle                         = 10,
	BossBattle01                             = 11,
	BossBattle02                             = 12,
	BossBattle03                             = 13,
	Nasubinara                               = 14,
	Stock1                                   = 15,
	Stock2                                   = 16,
	Stock3                                   = 17,
	Stock4                                   = 18,
	Stock5                                   = 19,
	Stock6                                   = 20,
	Stock7                                   = 21,
	Stock8                                   = 22,
	Stock9                                   = 23,
	Stock10                                  = 24,
	Stock11                                  = 25,
	Stock12                                  = 26,
	Stock13                                  = 27,
	Stock14                                  = 28,
	Stock15                                  = 29,
	Union                                    = 30,
	SpecialTraning                           = 31,
	EJackMeosiSlotBGM_MAX                    = 32,
};

// Enum JackGame.EJackMeosiSlotMachineGroup
// NumValues: 0x0015
enum class EJackMeosiSlotMachineGroup : uint8
{
	ONE                                      = 0,
	TWO                                      = 1,
	THREE                                    = 2,
	FOUR                                     = 3,
	FIVE                                     = 4,
	SIX                                      = 5,
	SEVEN                                    = 6,
	EIGHT                                    = 7,
	NINE                                     = 8,
	TEN                                      = 9,
	ELEVEN                                   = 10,
	TWELVE                                   = 11,
	THIRTEEN                                 = 12,
	FOURTEEN                                 = 13,
	FIFTEEN                                  = 14,
	SIXTEEN                                  = 15,
	SEVENTEEN                                = 16,
	EIGHTEEN                                 = 17,
	NINETEEN                                 = 18,
	TWENTY                                   = 19,
	MAX                                      = 20,
};

// Enum JackGame.EJackMeosiSlotDrakeeColor
// NumValues: 0x0004
enum class EJackMeosiSlotDrakeeColor : uint8
{
	BLACK                                    = 0,
	GREEN                                    = 1,
	RED                                      = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMeosiSlotDrakeeEffect
// NumValues: 0x000F
enum class EJackMeosiSlotDrakeeEffect : uint8
{
	NOTHING                                  = 0,
	SINGLE                                   = 1,
	GUST                                     = 2,
	CALM                                     = 3,
	DOUBLE_A                                 = 4,
	DOUBLE_B                                 = 5,
	DOUBLE_C                                 = 6,
	TRIPPLE                                  = 7,
	SQUARE                                   = 8,
	DOGLEG                                   = 9,
	V_SHAPED                                 = 10,
	BACK_SLASH                               = 11,
	MINUS                                    = 12,
	FLOCK                                    = 13,
	MAX                                      = 14,
};

// Enum JackGame.EJackMeosiSlotSoundEffect
// NumValues: 0x0005
enum class EJackMeosiSlotSoundEffect : uint8
{
	DEFAULT                                  = 0,
	SPECIAL                                  = 1,
	SILENT                                   = 2,
	BONUS                                    = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackMeosiSlotBattleBackPattern
// NumValues: 0x000E
enum class EJackMeosiSlotBattleBackPattern : uint8
{
	PAT_INVALID                              = 0,
	PAT_RRRR                                 = 1,
	PAT_CCRR                                 = 2,
	PAT_CRRR                                 = 3,
	PAT_CBRR                                 = 4,
	PAT_CCBB                                 = 5,
	PAT_CRBB                                 = 6,
	PAT_CBBB                                 = 7,
	PAT_RRBB                                 = 8,
	PAT_RBRR                                 = 9,
	PAT_RBBB                                 = 10,
	PAT_BBBB                                 = 11,
	PAT_BRBB                                 = 12,
	MAX                                      = 13,
};

// Enum JackGame.EJackMeosiSlotBattleBack
// NumValues: 0x0005
enum class EJackMeosiSlotBattleBack : uint8
{
	PARTY_BLUE                               = 0,
	ENEMY_RED                                = 1,
	GO_BACK                                  = 2,
	CENTER                                   = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackMeosiSlotBarBackColor
// NumValues: 0x0005
enum class EJackMeosiSlotBarBackColor : uint8
{
	BLUE                                     = 0,
	RED                                      = 1,
	GOLD                                     = 2,
	MEAT                                     = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackMeosiSlotCutinColor
// NumValues: 0x0005
enum class EJackMeosiSlotCutinColor : uint8
{
	WHITE                                    = 0,
	BLUE                                     = 1,
	RED                                      = 2,
	RAINBOW                                  = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackMeosiSlotFireLampColor
// NumValues: 0x000B
enum class EJackMeosiSlotFireLampColor : uint8
{
	ORANGE                                   = 0,
	BLUE                                     = 1,
	RED                                      = 2,
	YELLOW                                   = 3,
	GREEN                                    = 4,
	LIGHT_BLUE                               = 5,
	PURPLE                                   = 6,
	RAINBOW                                  = 7,
	WHITE                                    = 8,
	NONE                                     = 9,
	MAX                                      = 10,
};

// Enum JackGame.EJackMeosiSlotBattleResult
// NumValues: 0x0005
enum class EJackMeosiSlotBattleResult : uint8
{
	NONE                                     = 0,
	WIN                                      = 1,
	LOSE                                     = 2,
	DRAW                                     = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackMeosiSlotBattleSequence
// NumValues: 0x0003
enum class EJackMeosiSlotBattleSequence : uint8
{
	DEFAULT                                  = 0,
	EFFECT_APPEARANCE_ENEMY                  = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackMeosiSlotAttackEffect
// NumValues: 0x0009
enum class EJackMeosiSlotAttackEffect : uint8
{
	NONE                                     = 0,
	MISS                                     = 1,
	SLASH                                    = 2,
	SLASH_CRITICAL                           = 3,
	STRIKE                                   = 4,
	STRIKE_CRITICAL                          = 5,
	MAGIC_WEAK                               = 6,
	MAGIC_STRONG                             = 7,
	MAX                                      = 8,
};

// Enum JackGame.EJackMeosiSlotAttackClass
// NumValues: 0x0003
enum class EJackMeosiSlotAttackClass : uint8
{
	PHYSICAL                                 = 0,
	MAGICAL                                  = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackMeosiSlotBattleReaction
// NumValues: 0x0004
enum class EJackMeosiSlotBattleReaction : uint8
{
	NONE                                     = 0,
	AVOID                                    = 1,
	DAMAGE                                   = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMeosiSlotBattleAction
// NumValues: 0x0004
enum class EJackMeosiSlotBattleAction : uint8
{
	NONE                                     = 0,
	ATTACK                                   = 1,
	ESCAPE                                   = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMeosiSlotBattleActor
// NumValues: 0x0003
enum class EJackMeosiSlotBattleActor : uint8
{
	PARTY                                    = 0,
	ENEMY                                    = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackMeosiSlotMonsterBehavior
// NumValues: 0x0005
enum class EJackMeosiSlotMonsterBehavior : uint8
{
	ATTACK_MISS                              = 0,
	ATTACK_WEAK                              = 1,
	ATTACK_STRONG                            = 2,
	ATTACK_MOST_STRONG                       = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackMeosiSlotMonsterBehaviorPattern
// NumValues: 0x0004
enum class EJackMeosiSlotMonsterBehaviorPattern : uint8
{
	FLAT                                     = 0,
	SLOPE                                    = 1,
	CLIFF                                    = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMeosiSlotMonsterSize
// NumValues: 0x0004
enum class EJackMeosiSlotMonsterSize : uint8
{
	S                                        = 0,
	M                                        = 1,
	L                                        = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMeosiSlotMonsterRank
// NumValues: 0x000A
enum class EJackMeosiSlotMonsterRank : uint8
{
	F                                        = 0,
	E                                        = 1,
	D                                        = 2,
	C                                        = 3,
	B                                        = 4,
	A                                        = 5,
	S                                        = 6,
	SS                                       = 7,
	SSS                                      = 8,
	MAX                                      = 9,
};

// Enum JackGame.EJackMeosiSlotMonsterID
// NumValues: 0x0026
enum class EJackMeosiSlotMonsterID : uint8
{
	IdSlime                                  = 0,
	IdDrackey                                = 1,
	IdMomonjya                               = 2,
	IdMocoky                                 = 3,
	IdTombrelo                               = 4,
	IdKarakuriEgg                            = 5,
	IdChimera                                = 6,
	IdRottenCadaver                          = 7,
	IdBeeRider                               = 8,
	IdGolem                                  = 9,
	IdWanderArmor                            = 10,
	IdTorol                                  = 11,
	IdWyburnDog                              = 12,
	IdKillerPanther                          = 13,
	IdDemonPriest                            = 14,
	IdKillerMachine                          = 15,
	IdDragonPhD                              = 16,
	IdUncleHorn                              = 17,
	IdGigantes                               = 18,
	IdGreatDragon                            = 19,
	IdKillerMajinga                          = 20,
	IdDemonClub                              = 21,
	IdPurgatoryPegasus                       = 22,
	IdMimic                                  = 23,
	IdLiquidMetalSlime                       = 24,
	IdGoldenSlime                            = 25,
	IdGoldMan                                = 26,
	IdDragon                                 = 27,
	IdSkyDragon                              = 28,
	IdDragonGaia                             = 29,
	IdBonusbi                                = 30,
	IdUnionSlime                             = 31,
	IdPeachSlime                             = 32,
	IdMetalSlime                             = 33,
	IdKingSlime                              = 34,
	IdQueenSlime                             = 35,
	IdMetalKing                              = 36,
	MAX                                      = 37,
};

// Enum JackGame.EJackMeosiSlotOrb
// NumValues: 0x0007
enum class EJackMeosiSlotOrb : uint8
{
	BLUE                                     = 0,
	GREEN                                    = 1,
	RED                                      = 2,
	SILVER                                   = 3,
	YELLOW                                   = 4,
	PURPLE                                   = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackMeosiSlotFlavorItemRank
// NumValues: 0x0006
enum class EJackMeosiSlotFlavorItemRank : uint8
{
	ONE                                      = 0,
	TWO                                      = 1,
	THREE                                    = 2,
	FOUR                                     = 3,
	FIVE                                     = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackMeosiSlotItemKind
// NumValues: 0x0005
enum class EJackMeosiSlotItemKind : uint8
{
	NONE                                     = 0,
	PLANT                                    = 1,
	ORE                                      = 2,
	HIDE                                     = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackMeosiSlotBalloon
// NumValues: 0x0007
enum class EJackMeosiSlotBalloon : uint8
{
	WHITE                                    = 0,
	BLUE                                     = 1,
	YELLOW                                   = 2,
	GREEN                                    = 3,
	RED                                      = 4,
	RAINBOW                                  = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackMeosiSlotTreasureBox
// NumValues: 0x0006
enum class EJackMeosiSlotTreasureBox : uint8
{
	POT                                      = 0,
	WOOD                                     = 1,
	RED                                      = 2,
	BLACK                                    = 3,
	GOLD                                     = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackMeosiSlotItemSpec
// NumValues: 0x0032
enum class EJackMeosiSlotItemSpec : uint8
{
	None                                     = 0,
	GreenOrb                                 = 1,
	SilverOrb                                = 2,
	RedOrb                                   = 3,
	YellowOrb                                = 4,
	BlueOrb                                  = 5,
	PurpleOrb                                = 6,
	Feed                                     = 7,
	RuraStone                                = 8,
	FecesOfHorses                            = 9,
	FecesOfCattle                            = 10,
	BeastSkin                                = 11,
	CopperOre                                = 12,
	HempYarn                                 = 13,
	WeightStone                              = 14,
	BushyFur                                 = 15,
	SoftBranches                             = 16,
	IronOre                                  = 17,
	CottonGrass                              = 18,
	Goald                                    = 19,
	DragonSkin                               = 20,
	GoldBullion                              = 21,
	MagicTree                                = 22,
	Platibum                                 = 23,
	ShiningGrass                             = 24,
	MythicalSkin                             = 25,
	HeavyMetal                               = 26,
	DragonTreeBranch                         = 27,
	MonsterSkin                              = 28,
	BeautifulBranch                          = 29,
	SilkeGrass                               = 30,
	E456Confirm                              = 31,
	E56Confirm                               = 32,
	E6Confirm                                = 33,
	EvenConfirm                              = 34,
	OddConfirm                               = 35,
	Miss                                     = 36,
	Relpaly                                  = 37,
	Plum                                     = 38,
	Watermelon                               = 39,
	Cherry                                   = 40,
	Chance                                   = 41,
	Bonus                                    = 42,
	Union                                    = 43,
	VeryHot                                  = 44,
	ChanceHint                               = 45,
	SpTraining                               = 46,
	SpeedSeed                                = 47,
	MiracleSeed                              = 48,
	MAX                                      = 49,
};

// Enum JackGame.EJackMeosiSlotItem
// NumValues: 0x000B
enum class EJackMeosiSlotItem : uint8
{
	NONE                                     = 0,
	ORB                                      = 1,
	FEED                                     = 2,
	MIMIC                                    = 3,
	FLAVOR                                   = 4,
	KEY                                      = 5,
	HINTHAND                                 = 6,
	HINTSETTING                              = 7,
	HINTEFFECT                               = 8,
	TRAINING                                 = 9,
	MAX                                      = 10,
};

// Enum JackGame.EJackMeosiSlotEvent
// NumValues: 0x000F
enum class EJackMeosiSlotEvent : uint8
{
	NONE                                     = 0,
	BATTLE_DEFAULT                           = 1,
	BATTLE_MID_BOSS                          = 2,
	BATTLE_BOSS                              = 3,
	RECRUIT                                  = 4,
	TREASURE_BOX_DISCOVERY                   = 5,
	CHANCE_CUTIN_STEP_UP                     = 6,
	SHIMOFURI_CHANCE                         = 7,
	UNION_CHALLENGE                          = 8,
	SPECIAL_TRAINING                         = 9,
	BAR_CHANCE                               = 10,
	CHANCE_SLIME                             = 11,
	TREASURE_BOX_RETRY                       = 12,
	DRAKEE                                   = 13,
	MAX                                      = 14,
};

// Enum JackGame.EJackMeosiSlotKeySeType
// NumValues: 0x0008
enum class EJackMeosiSlotKeySeType : uint8
{
	KeySe_None                               = 0,
	KeySe_Lever_SP                           = 1,
	KeySe_All_SP                             = 2,
	KeySe_Lever_Delay                        = 3,
	KeySe_All_Delay                          = 4,
	KeySe_Lever_Delay_SP                     = 5,
	KeySe_All_Delay_SP                       = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackMeosiSlotEffectKeyType
// NumValues: 0x0006
enum class EJackMeosiSlotEffectKeyType : uint8
{
	KeyType_None                             = 0,
	KeyType_Lever                            = 1,
	KeyType_FirstStop                        = 2,
	KeyType_SecondStop                       = 3,
	KeyType_ThirdStop                        = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackMeosiSlotEffect
// NumValues: 0x000B
enum class EJackMeosiSlotEffect : uint8
{
	NONE                                     = 0,
	REEL_LIGHT_OFF                           = 1,
	FIRE_LAMP                                = 2,
	DOOR_EMISSION                            = 3,
	PSEUDO_CONTINUATION                      = 4,
	CHANCE_CUTIN_DEF                         = 5,
	FLASH                                    = 6,
	DRAKEE                                   = 7,
	FRAME_LAMP                               = 8,
	FRAME_FIRE_LAMP                          = 9,
	MAX                                      = 10,
};

// Enum JackGame.EJackMeosiSlotDirectImpact
// NumValues: 0x0007
enum class EJackMeosiSlotDirectImpact : uint8
{
	FromBattle                               = 0,
	FromNormal                               = 1,
	FromTBox                                 = 2,
	FromYakumono                             = 3,
	ToChallenge                              = 4,
	ToMAX                                    = 5,
	EJackMeosiSlotDirectImpact_MAX           = 6,
};

// Enum JackGame.EJackMeosiSlotContEvent
// NumValues: 0x0005
enum class EJackMeosiSlotContEvent : uint8
{
	ContToBonus                              = 0,
	ContToChallenge                          = 1,
	ContToNormal                             = 2,
	ContToMAX                                = 3,
	EJackMeosiSlotContEvent_MAX              = 4,
};

// Enum JackGame.EJackMeosiSlotScenarioBranch
// NumValues: 0x000D
enum class EJackMeosiSlotScenarioBranch : uint8
{
	NORMAL                                   = 0,
	STOCKED_NORMAL                           = 1,
	TRAINING                                 = 2,
	NO_USE_1                                 = 3,
	STOCKED_BATTLE                           = 4,
	BATTLE                                   = 5,
	STOCKED_BONUS_GAME                       = 6,
	BONUS_GAME                               = 7,
	NO_USE_4                                 = 8,
	NO_USE_5                                 = 9,
	FAKE_TRAINING                            = 10,
	CEILING                                  = 11,
	MAX                                      = 12,
};

// Enum JackGame.EJackMeosiSlotScenarioTBoxItem
// NumValues: 0x000D
enum class EJackMeosiSlotScenarioTBoxItem : uint8
{
	ItemNone                                 = 0,
	ItemFeed                                 = 1,
	ItemOrb                                  = 2,
	ItemHintHand                             = 3,
	ItemHintSetting                          = 4,
	ItemBonusStone                           = 5,
	ItemOther                                = 6,
	ItemHintEffect                           = 7,
	ItemSpTraining                           = 8,
	ItemLottery                              = 9,
	ItemMimic                                = 10,
	ItemMAX                                  = 11,
	EJackMeosiSlotScenarioTBoxItem_MAX       = 12,
};

// Enum JackGame.EJackMeosiSlotSpTrainingButton
// NumValues: 0x0005
enum class EJackMeosiSlotSpTrainingButton : uint8
{
	SptButton_None                           = 0,
	SptButton_Normal                         = 1,
	SptButton_Big                            = 2,
	SptButton_Slime                          = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackMeosiSlotSpTrainingAct
// NumValues: 0x0009
enum class EJackMeosiSlotSpTrainingAct : uint8
{
	SptAct_None                              = 0,
	SptAct_Fake                              = 1,
	SptAct_Speed                             = 2,
	SptAct_Miracle                           = 3,
	SptAct_Dash                              = 4,
	SptAct_BlueDoor                          = 5,
	SptAct_RedDoor                           = 6,
	SptAct_Cont                              = 7,
	MAX                                      = 8,
};

// Enum JackGame.EJackMeosiSlotSpTrainingAuraColor
// NumValues: 0x0007
enum class EJackMeosiSlotSpTrainingAuraColor : uint8
{
	SptAura_None                             = 0,
	SptAura_White                            = 1,
	SptAura_Blue                             = 2,
	SptAura_Green                            = 3,
	SptAura_Red                              = 4,
	SptAura_Rainbow                          = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackMeosiSlotSpTrainingGameState
// NumValues: 0x0006
enum class EJackMeosiSlotSpTrainingGameState : uint8
{
	SptGameSt_None                           = 0,
	SptGameSt_Normal                         = 1,
	SptGameSt_Cont                           = 2,
	SptGameSt_PreLast                        = 3,
	SptGameSt_End                            = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackMeosiSlotUnionGameResult
// NumValues: 0x0005
enum class EJackMeosiSlotUnionGameResult : uint8
{
	Result_Cont                              = 0,
	Result_End                               = 1,
	Result_Succeed                           = 2,
	Result_Failure                           = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackMeosiSlotUnionSlime
// NumValues: 0x0005
enum class EJackMeosiSlotUnionSlime : uint8
{
	Slime_1                                  = 0,
	Slime_2                                  = 1,
	Slime_3                                  = 2,
	None                                     = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackMeosiSlotUnionScenarioBranch
// NumValues: 0x0015
enum class EJackMeosiSlotUnionScenarioBranch : uint8
{
	Branch_1                                 = 0,
	Branch_2                                 = 1,
	Branch_3                                 = 2,
	Branch_4                                 = 3,
	Branch_5                                 = 4,
	Branch_6                                 = 5,
	Branch_7                                 = 6,
	Branch_8                                 = 7,
	Branch_9                                 = 8,
	Branch_10                                = 9,
	Branch_11                                = 10,
	Branch_12                                = 11,
	Branch_13                                = 12,
	Branch_14                                = 13,
	Branch_15                                = 14,
	Branch_16                                = 15,
	Branch_17                                = 16,
	Branch_18                                = 17,
	Branch_19                                = 18,
	Branch_20                                = 19,
	MAX                                      = 20,
};

// Enum JackGame.EJackMeosiSlotUnionScenarioID
// NumValues: 0x000C
enum class EJackMeosiSlotUnionScenarioID : uint8
{
	Special                                  = 0,
	Succ2G_1                                 = 1,
	Succ2G_2                                 = 2,
	Succ2G_3                                 = 3,
	Cont3G_1                                 = 4,
	Cont3G_2                                 = 5,
	Cont3G_3                                 = 6,
	Cont3G_4                                 = 7,
	Cont3G_5                                 = 8,
	Cont3G_6                                 = 9,
	Cont3G_7                                 = 10,
	MAX                                      = 11,
};

// Enum JackGame.EJackMeosiSlotScenarioHazureKind
// NumValues: 0x0004
enum class EJackMeosiSlotScenarioHazureKind : uint8
{
	Kind_Moving                              = 0,
	Kind_Fake                                = 1,
	Kind_EmptyTBox                           = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMeosiSlotScenarioTBoxOpenTiming
// NumValues: 0x0007
enum class EJackMeosiSlotScenarioTBoxOpenTiming : uint8
{
	Timing_Default                           = 0,
	Timing_SecondStop                        = 1,
	Timing_ThirdStop                         = 2,
	Timing_NextDefault                       = 3,
	Timing_NextSecondStop                    = 4,
	Timing_NextThirdStop                     = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackMeosiSlotScenarioTBoxKind
// NumValues: 0x000C
enum class EJackMeosiSlotScenarioTBoxKind : uint8
{
	Kind_None                                = 0,
	Kind_HintHand                            = 1,
	Kind_HintSetting                         = 2,
	Kind_Orb                                 = 3,
	Kind_Orb_Low                             = 4,
	Kind_Orb_High                            = 5,
	Kind_Feed                                = 6,
	Kind_Feed_Low                            = 7,
	Kind_Feed_High                           = 8,
	Kind_Lottery                             = 9,
	Kind_Mimic                               = 10,
	MAX                                      = 11,
};

// Enum JackGame.EJackMeosiSlotScenarioMamonoKind
// NumValues: 0x0007
enum class EJackMeosiSlotScenarioMamonoKind : uint8
{
	Kind_None                                = 0,
	Kind_Default                             = 1,
	Kind_Default_1                           = 2,
	Kind_Default_2                           = 3,
	Kind_Default_3                           = 4,
	Kind_StepUp                              = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackMeosiSlotScenarioSubAct
// NumValues: 0x0016
enum class EJackMeosiSlotScenarioSubAct : uint8
{
	SubAct_None                              = 0,
	SubAct_Random_01                         = 1,
	SubAct_Random_02                         = 2,
	SubAct_Random_03                         = 3,
	SubAct_Random_04                         = 4,
	SubAct_Drakee_01                         = 5,
	SubAct_Drakee_02                         = 6,
	SubAct_CutIn                             = 7,
	SubAct_CutInStepUp                       = 8,
	SubAct_Yakumono                          = 9,
	SubAct_TurnOffReel                       = 10,
	SubAct_FireLamp                          = 11,
	SubAct_FrameLamp_00                      = 12,
	SubAct_FrameLamp_01                      = 13,
	SubAct_FrameLamp_02                      = 14,
	SubAct_FrameLamp_03                      = 15,
	SubAct_FrameFire_00                      = 16,
	SubAct_FrameFire_01                      = 17,
	SubAct_FrameFire_02                      = 18,
	SubAct_FrameFire_03                      = 19,
	SubAct_FrameFire_04                      = 20,
	MAX                                      = 21,
};

// Enum JackGame.EJackMeosiSlotScenarioActNo
// NumValues: 0x00FD
enum class EJackMeosiSlotScenarioActNo : uint8
{
	ActNo_None                               = 0,
	ActNo_End                                = 1,
	ActNo_Mamono_01                          = 2,
	ActNo_Mamono_02                          = 3,
	ActNo_Mamono_03                          = 4,
	ActNo_Mamono_04                          = 5,
	ActNo_Mamono_05                          = 6,
	ActNo_Mamono_06                          = 7,
	ActNo_Mamono_07                          = 8,
	ActNo_Mamono_08                          = 9,
	ActNo_Mamono_09                          = 10,
	ActNo_Mamono_10                          = 11,
	ActNo_Mamono_11                          = 12,
	ActNo_Mamono_12                          = 13,
	ActNo_Mamono_13                          = 14,
	ActNo_Mamono_14                          = 15,
	ActNo_Mamono_15                          = 16,
	ActNo_Mamono_16                          = 17,
	ActNo_Mamono_17                          = 18,
	ActNo_Mamono_18                          = 19,
	ActNo_Mamono_19                          = 20,
	ActNo_Mamono_20                          = 21,
	ActNo_Mamono_21                          = 22,
	ActNo_Mamono_22                          = 23,
	ActNo_Mamono_23                          = 24,
	ActNo_Mamono_24                          = 25,
	ActNo_Mamono_25                          = 26,
	ActNo_Mamono_26                          = 27,
	ActNo_Mamono_27                          = 28,
	ActNo_Mamono_28                          = 29,
	ActNo_Mamono_29                          = 30,
	ActNo_Mamono_30                          = 31,
	ActNo_Mamono_31                          = 32,
	ActNo_Mamono_32                          = 33,
	ActNo_Mamono_33                          = 34,
	ActNo_Mamono_34                          = 35,
	ActNo_Mamono_35                          = 36,
	ActNo_Mamono_36                          = 37,
	ActNo_Mamono_37                          = 38,
	ActNo_Mamono_38                          = 39,
	ActNo_Mamono_39                          = 40,
	ActNo_Mamono_40                          = 41,
	ActNo_Mamono_41                          = 42,
	ActNo_Mamono_42                          = 43,
	ActNo_Mamono_43                          = 44,
	ActNo_Mamono_44                          = 45,
	ActNo_Mamono_45                          = 46,
	ActNo_Mamono_46                          = 47,
	ActNo_Mamono_47                          = 48,
	ActNo_Mamono_48                          = 49,
	ActNo_Mamono_49                          = 50,
	ActNo_Mamono_50                          = 51,
	ActNo_TBox_01                            = 52,
	ActNo_TBox_02                            = 53,
	ActNo_TBox_03                            = 54,
	ActNo_TBox_04                            = 55,
	ActNo_TBox_05                            = 56,
	ActNo_TBox_06                            = 57,
	ActNo_TBox_07                            = 58,
	ActNo_TBox_08                            = 59,
	ActNo_TBox_09                            = 60,
	ActNo_TBox_10                            = 61,
	ActNo_TBox_11                            = 62,
	ActNo_TBox_12                            = 63,
	ActNo_TBox_13                            = 64,
	ActNo_TBox_14                            = 65,
	ActNo_TBox_15                            = 66,
	ActNo_TBox_16                            = 67,
	ActNo_TBox_17                            = 68,
	ActNo_TBox_18                            = 69,
	ActNo_TBox_19                            = 70,
	ActNo_TBox_20                            = 71,
	ActNo_TBox_21                            = 72,
	ActNo_TBox_22                            = 73,
	ActNo_TBox_23                            = 74,
	ActNo_TBox_24                            = 75,
	ActNo_TBox_25                            = 76,
	ActNo_TBox_26                            = 77,
	ActNo_TBox_27                            = 78,
	ActNo_TBox_28                            = 79,
	ActNo_TBox_29                            = 80,
	ActNo_TBox_30                            = 81,
	ActNo_TBox_31                            = 82,
	ActNo_TBox_32                            = 83,
	ActNo_TBox_33                            = 84,
	ActNo_TBox_34                            = 85,
	ActNo_TBox_35                            = 86,
	ActNo_TBox_36                            = 87,
	ActNo_TBox_37                            = 88,
	ActNo_TBox_38                            = 89,
	ActNo_TBox_39                            = 90,
	ActNo_TBox_40                            = 91,
	ActNo_TBox_41                            = 92,
	ActNo_TBox_42                            = 93,
	ActNo_TBox_43                            = 94,
	ActNo_TBox_44                            = 95,
	ActNo_TBox_45                            = 96,
	ActNo_TBox_46                            = 97,
	ActNo_TBox_47                            = 98,
	ActNo_TBox_48                            = 99,
	ActNo_TBox_49                            = 100,
	ActNo_TBox_50                            = 101,
	ActNo_Hazure_01                          = 102,
	ActNo_Hazure_02                          = 103,
	ActNo_Hazure_03                          = 104,
	ActNo_Hazure_04                          = 105,
	ActNo_Hazure_05                          = 106,
	ActNo_Hazure_06                          = 107,
	ActNo_Hazure_07                          = 108,
	ActNo_Hazure_08                          = 109,
	ActNo_Hazure_09                          = 110,
	ActNo_Hazure_10                          = 111,
	ActNo_Hazure_11                          = 112,
	ActNo_Hazure_12                          = 113,
	ActNo_Hazure_13                          = 114,
	ActNo_Hazure_14                          = 115,
	ActNo_Hazure_15                          = 116,
	ActNo_Hazure_16                          = 117,
	ActNo_Hazure_17                          = 118,
	ActNo_Hazure_18                          = 119,
	ActNo_Hazure_19                          = 120,
	ActNo_Hazure_20                          = 121,
	ActNo_Hazure_21                          = 122,
	ActNo_Hazure_22                          = 123,
	ActNo_Hazure_23                          = 124,
	ActNo_Hazure_24                          = 125,
	ActNo_Hazure_25                          = 126,
	ActNo_Hazure_26                          = 127,
	ActNo_Hazure_27                          = 128,
	ActNo_Hazure_28                          = 129,
	ActNo_Hazure_29                          = 130,
	ActNo_Hazure_30                          = 131,
	ActNo_Hazure_31                          = 132,
	ActNo_Hazure_32                          = 133,
	ActNo_Hazure_33                          = 134,
	ActNo_Hazure_34                          = 135,
	ActNo_Hazure_35                          = 136,
	ActNo_Hazure_36                          = 137,
	ActNo_Hazure_37                          = 138,
	ActNo_Hazure_38                          = 139,
	ActNo_Hazure_39                          = 140,
	ActNo_Hazure_40                          = 141,
	ActNo_Hazure_41                          = 142,
	ActNo_Hazure_42                          = 143,
	ActNo_Hazure_43                          = 144,
	ActNo_Hazure_44                          = 145,
	ActNo_Hazure_45                          = 146,
	ActNo_Hazure_46                          = 147,
	ActNo_Hazure_47                          = 148,
	ActNo_Hazure_48                          = 149,
	ActNo_Hazure_49                          = 150,
	ActNo_Hazure_50                          = 151,
	ActNo_Random_01                          = 152,
	ActNo_Random_02                          = 153,
	ActNo_Random_03                          = 154,
	ActNo_Random_04                          = 155,
	ActNo_Random_05                          = 156,
	ActNo_Random_06                          = 157,
	ActNo_Random_07                          = 158,
	ActNo_Random_08                          = 159,
	ActNo_Random_09                          = 160,
	ActNo_Random_10                          = 161,
	ActNo_Random_11                          = 162,
	ActNo_Random_12                          = 163,
	ActNo_Random_13                          = 164,
	ActNo_Random_14                          = 165,
	ActNo_Random_15                          = 166,
	ActNo_Random_16                          = 167,
	ActNo_Random_17                          = 168,
	ActNo_Random_18                          = 169,
	ActNo_Random_19                          = 170,
	ActNo_Random_20                          = 171,
	ActNo_Random_21                          = 172,
	ActNo_Random_22                          = 173,
	ActNo_Random_23                          = 174,
	ActNo_Random_24                          = 175,
	ActNo_Random_25                          = 176,
	ActNo_Random_26                          = 177,
	ActNo_Random_27                          = 178,
	ActNo_Random_28                          = 179,
	ActNo_Random_29                          = 180,
	ActNo_Random_30                          = 181,
	ActNo_Random_31                          = 182,
	ActNo_Random_32                          = 183,
	ActNo_Random_33                          = 184,
	ActNo_Random_34                          = 185,
	ActNo_Random_35                          = 186,
	ActNo_Random_36                          = 187,
	ActNo_Random_37                          = 188,
	ActNo_Random_38                          = 189,
	ActNo_Random_39                          = 190,
	ActNo_Random_40                          = 191,
	ActNo_Random_41                          = 192,
	ActNo_Random_42                          = 193,
	ActNo_Random_43                          = 194,
	ActNo_Random_44                          = 195,
	ActNo_Random_45                          = 196,
	ActNo_Random_46                          = 197,
	ActNo_Random_47                          = 198,
	ActNo_Random_48                          = 199,
	ActNo_Random_49                          = 200,
	ActNo_Random_50                          = 201,
	ActNo_Slime_01                           = 202,
	ActNo_Slime_02                           = 203,
	ActNo_Slime_03                           = 204,
	ActNo_Slime_04                           = 205,
	ActNo_Slime_05                           = 206,
	ActNo_Slime_06                           = 207,
	ActNo_Slime_07                           = 208,
	ActNo_Slime_08                           = 209,
	ActNo_Slime_09                           = 210,
	ActNo_Slime_10                           = 211,
	ActNo_Slime_11                           = 212,
	ActNo_Slime_12                           = 213,
	ActNo_Slime_13                           = 214,
	ActNo_Slime_14                           = 215,
	ActNo_Slime_15                           = 216,
	ActNo_Slime_16                           = 217,
	ActNo_Slime_17                           = 218,
	ActNo_Slime_18                           = 219,
	ActNo_Slime_19                           = 220,
	ActNo_Slime_20                           = 221,
	ActNo_Slime_21                           = 222,
	ActNo_Slime_22                           = 223,
	ActNo_Slime_23                           = 224,
	ActNo_Slime_24                           = 225,
	ActNo_Slime_25                           = 226,
	ActNo_Slime_26                           = 227,
	ActNo_Slime_27                           = 228,
	ActNo_Slime_28                           = 229,
	ActNo_Slime_29                           = 230,
	ActNo_Slime_30                           = 231,
	ActNo_Slime_31                           = 232,
	ActNo_Slime_32                           = 233,
	ActNo_Slime_33                           = 234,
	ActNo_Slime_34                           = 235,
	ActNo_Slime_35                           = 236,
	ActNo_Slime_36                           = 237,
	ActNo_Slime_37                           = 238,
	ActNo_Slime_38                           = 239,
	ActNo_Slime_39                           = 240,
	ActNo_Slime_40                           = 241,
	ActNo_Slime_41                           = 242,
	ActNo_Slime_42                           = 243,
	ActNo_Slime_43                           = 244,
	ActNo_Slime_44                           = 245,
	ActNo_Slime_45                           = 246,
	ActNo_Slime_46                           = 247,
	ActNo_Slime_47                           = 248,
	ActNo_Slime_48                           = 249,
	ActNo_Slime_49                           = 250,
	ActNo_Slime_50                           = 251,
	MAX                                      = 252,
};

// Enum JackGame.EJackMeosiSlotParadiseModeType
// NumValues: 0x0004
enum class EJackMeosiSlotParadiseModeType : uint8
{
	Type_A                                   = 0,
	Type_B                                   = 1,
	Type_C                                   = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMeosiSlotScenarioSPTraining
// NumValues: 0x0003
enum class EJackMeosiSlotScenarioSPTraining : uint8
{
	Training_False                           = 0,
	Training_True                            = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackMeosiSlotScenarioHint
// NumValues: 0x000D
enum class EJackMeosiSlotScenarioHint : uint8
{
	Hint_None                                = 0,
	Hint_Hazure                              = 1,
	Hint_Chance                              = 2,
	Hint_Hot                                 = 3,
	Hint_Expansion                           = 4,
	Hint_Training                            = 5,
	Hint_Bonus                               = 6,
	Hint_Stock                               = 7,
	Hint_Reach                               = 8,
	Hint_Reach_Chance                        = 9,
	Hint_Reach_Hot                           = 10,
	Hint_Reach_Stock                         = 11,
	MAX                                      = 12,
};

// Enum JackGame.EJackMeosiSlotScenarioStage
// NumValues: 0x0008
enum class EJackMeosiSlotScenarioStage : uint8
{
	Stage_None                               = 0,
	Stage_Daytime                            = 1,
	Stage_Twilight                           = 2,
	Stage_Night                              = 3,
	Stage_Union                              = 4,
	Stage_SP_Traning                         = 5,
	Stage_BonusFixing                        = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackMeosiSlotScenarioActType
// NumValues: 0x000D
enum class EJackMeosiSlotScenarioActType : uint8
{
	Act_None                                 = 0,
	Act_Mamono                               = 1,
	Act_TBox                                 = 2,
	Act_Hazure                               = 3,
	Act_Random                               = 4,
	Act_Slime                                = 5,
	Act_ChanceZone_1                         = 6,
	Act_ChanceZone_2                         = 7,
	Act_BonusGame                            = 8,
	Act_BossBattle                           = 9,
	Act_Shimofuri                            = 10,
	Act_LongFreeze                           = 11,
	MAX                                      = 12,
};

// Enum JackGame.EJackMeosiSlotScenarioLotteryResult
// NumValues: 0x0004
enum class EJackMeosiSlotScenarioLotteryResult : uint8
{
	Lottery_None                             = 0,
	Lottery_Succeed                          = 1,
	Lottery_ErrPat                           = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMeosiSlotScenarioState
// NumValues: 0x000C
enum class EJackMeosiSlotScenarioState : uint8
{
	State_None                               = 0,
	State_Normal                             = 1,
	State_ZakoBattle                         = 2,
	State_SpTBox                             = 3,
	State_UnionChallenge                     = 4,
	State_SpTraining                         = 5,
	State_BonusFixing                        = 6,
	State_BossBattle                         = 7,
	State_Shimofuri                          = 8,
	State_LongFreeze                         = 9,
	State_Recruit                            = 10,
	MAX                                      = 11,
};

// Enum JackGame.EJackMeosiSlotHsHand
// NumValues: 0x0022
enum class EJackMeosiSlotHsHand : uint8
{
	MISS_WEAK                                = 0,
	MISS_STRONG                              = 1,
	REPLAY_WEAK                              = 2,
	REPLAY_STRONG                            = 3,
	PLUM_WEAK                                = 4,
	PLUM_STRONG                              = 5,
	WATERMELON_WEAK                          = 6,
	WATERMELON_STRONG                        = 7,
	WATERMELON_CENTER                        = 8,
	CHERRY_WEAK                              = 9,
	CHERRY_STRONG                            = 10,
	CHERRY_TRIPLE                            = 11,
	CHERRY_CENTER                            = 12,
	BELL_WEAK                                = 13,
	BELL_STRONG                              = 14,
	CHANCE_CHALLEGE                          = 15,
	CHANCE_DIRECT_WEAK                       = 16,
	CHANCE_DIRECT_STRONG                     = 17,
	CHANCE_WEAK                              = 18,
	CHANCE_STRONG                            = 19,
	CHANCE_SPOT_WEAK                         = 20,
	CHANCE_SPOT_STRONG                       = 21,
	REACH_WEAK                               = 22,
	REACH_STRONG                             = 23,
	BIG_BONUS                                = 24,
	SPECIAL_BONUS                            = 25,
	LONG_FREEZE                              = 26,
	BREAK_REPLAY                             = 27,
	BAR_WEAK                                 = 28,
	BAR_STRONG                               = 29,
	TYPE_MAX                                 = 30,
	GAMES_PARADISE                           = 31,
	PARADISE_MODE                            = 32,
	EJackMeosiSlotHsHand_MAX                 = 33,
};

// Enum JackGame.EJackMeosiSlotHand
// NumValues: 0x0014
enum class EJackMeosiSlotHand : uint8
{
	MISS                                     = 0,
	REPLAY                                   = 1,
	PLUM_WEAK                                = 2,
	PLUM_STRONG                              = 3,
	WATERMELON_WEAK                          = 4,
	WATERMELON_STRONG                        = 5,
	CHERRY_WEAK                              = 6,
	CHERRY_STRONG                            = 7,
	CHERRY_TRIPLE                            = 8,
	CHERRY_CENTER                            = 9,
	BEL                                      = 10,
	CHANCE_WEAK                              = 11,
	CHANCE_STRONG                            = 12,
	CHANCE_MOST_STRONG                       = 13,
	CHANCE_SPOT_WEAK                         = 14,
	CHANCE_SPOT_STRONG                       = 15,
	REACH                                    = 16,
	BIG_BONUS                                = 17,
	SPECIAL_BONUS                            = 18,
	MAX                                      = 19,
};

// Enum JackGame.EJackMeosiSlotReelPattern
// NumValues: 0x0052
enum class EJackMeosiSlotReelPattern : uint8
{
	Exclusion                                = 0,
	NoHand_W                                 = 1,
	NoHand_S                                 = 2,
	Chance_W                                 = 3,
	Chance_S                                 = 4,
	Reach_W                                  = 5,
	Reach_S                                  = 6,
	BreakReplay                              = 7,
	Replay_W                                 = 8,
	Replay_S                                 = 9,
	Plum_W                                   = 10,
	Plum_S                                   = 11,
	Wmelon_W                                 = 12,
	Wmelon_S                                 = 13,
	Wmelon_C                                 = 14,
	SingleCherry                             = 15,
	DoubleCherry                             = 16,
	TripleCherry                             = 17,
	CenterCherry                             = 18,
	Bell_W                                   = 19,
	Bell_S                                   = 20,
	Meat_W                                   = 21,
	Meat_S                                   = 22,
	Bonus                                    = 23,
	SpecialBonus                             = 24,
	Bar_W                                    = 25,
	Bar_S                                    = 26,
	Exclusion_P                              = 27,
	NoHand_W_P                               = 28,
	NoHand_S_P                               = 29,
	Chance_W_P                               = 30,
	Chance_S_P                               = 31,
	Reach_W_P                                = 32,
	Reach_S_P                                = 33,
	BreakReplay_P                            = 34,
	Replay_W_P                               = 35,
	Replay_S_P                               = 36,
	Plum_W_P                                 = 37,
	Plum_S_P                                 = 38,
	Wmelon_W_P                               = 39,
	Wmelon_S_P                               = 40,
	Wmelon_C_P                               = 41,
	SingleCherry_P                           = 42,
	DoubleCherry_P                           = 43,
	TripleCherry_P                           = 44,
	CenterCherry_P                           = 45,
	Bell_W_P                                 = 46,
	Bell_S_P                                 = 47,
	Meat_W_P                                 = 48,
	Meat_S_P                                 = 49,
	Bonus_P                                  = 50,
	SpecialBonus_P                           = 51,
	Bar_W_P                                  = 52,
	Bar_S_P                                  = 53,
	Exclusion_TP                             = 54,
	NoHand_W_TP                              = 55,
	NoHand_S_TP                              = 56,
	Chance_W_TP                              = 57,
	Chance_S_TP                              = 58,
	Reach_W_TP                               = 59,
	Reach_S_TP                               = 60,
	BreakReplay_TP                           = 61,
	Replay_W_TP                              = 62,
	Replay_S_TP                              = 63,
	Plum_W_TP                                = 64,
	Plum_S_TP                                = 65,
	Wmelon_W_TP                              = 66,
	Wmelon_S_TP                              = 67,
	Wmelon_C_TP                              = 68,
	SingleCherry_TP                          = 69,
	DoubleCherry_TP                          = 70,
	TripleCherry_TP                          = 71,
	CenterCherry_TP                          = 72,
	Bell_W_TP                                = 73,
	Bell_S_TP                                = 74,
	Meat_W_TP                                = 75,
	Meat_S_TP                                = 76,
	Bonus_TP                                 = 77,
	SpecialBonus_TP                          = 78,
	Bar_W_TP                                 = 79,
	Bar_S_TP                                 = 80,
	MAX                                      = 81,
};

// Enum JackGame.EJackMeosiSlotReelBrightness
// NumValues: 0x0006
enum class EJackMeosiSlotReelBrightness : uint8
{
	Dark                                     = 0,
	Dim                                      = 1,
	Mid                                      = 2,
	Lightlight                               = 3,
	Bright                                   = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackMeosiSlotReelLamp
// NumValues: 0x0009
enum class EJackMeosiSlotReelLamp : uint8
{
	Neutral                                  = 0,
	Normal                                   = 1,
	LongFreeze                               = 2,
	Bell                                     = 3,
	Shimofuri                                = 4,
	Putoff                                   = 5,
	Puton                                    = 6,
	BreakReplay                              = 7,
	MAX                                      = 8,
};

// Enum JackGame.EJackMeosiSlotPicture
// NumValues: 0x000A
enum class EJackMeosiSlotPicture : uint8
{
	BEL                                      = 0,
	REPLAY                                   = 1,
	BAR                                      = 2,
	CHERRRY                                  = 3,
	WATERMELON                               = 4,
	PLUM                                     = 5,
	BLANK                                    = 6,
	CHANCE                                   = 7,
	SEVEN                                    = 8,
	MAX                                      = 9,
};

// Enum JackGame.EJackMeosiSlotReelStopTimes
// NumValues: 0x0004
enum class EJackMeosiSlotReelStopTimes : uint8
{
	FIRST                                    = 0,
	SECOND                                   = 1,
	THIRD                                    = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMeosiSlotReel
// NumValues: 0x0004
enum class EJackMeosiSlotReel : uint8
{
	LEFT                                     = 0,
	CENTER                                   = 1,
	RIGHT                                    = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMeosiSlotInternalProbabilityStatus
// NumValues: 0x0004
enum class EJackMeosiSlotInternalProbabilityStatus : uint8
{
	DEFAULT                                  = 0,
	HIGH                                     = 1,
	HEAVEN                                   = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMeosiSlotStageMode
// NumValues: 0x0009
enum class EJackMeosiSlotStageMode : uint8
{
	NORMAL                                   = 0,
	CHANCE_ZONE_1                            = 1,
	CHANCE_ZONE_2                            = 2,
	BONUS_FIXING                             = 3,
	BONUS_GAME                               = 4,
	SP_BONUS_GAME                            = 5,
	BOSS_BATTLE                              = 6,
	BONUS_CONTINUE                           = 7,
	MAX                                      = 8,
};

// Enum JackGame.EJackMeosiSlotStageState
// NumValues: 0x000D
enum class EJackMeosiSlotStageState : uint8
{
	NORMAL_NORMAL                            = 0,
	NORMAL_BONUS                             = 1,
	NORMAL_BONUS_SUCCESS                     = 2,
	NORMAL_BONUS_DIRECT                      = 3,
	CHANCE_ZONE_NORMAL                       = 4,
	CHANCE_ZONE_INTRODUCTION                 = 5,
	CHANCE_ZONE_BATTLE                       = 6,
	CHANCE_ZONE_COMEBACK                     = 7,
	CHANCE_ZONE_WIN                          = 8,
	NORMAL_BATTLE_RESULT                     = 9,
	NORMAL_RESULT_COMEBACK                   = 10,
	STATE_INVALID                            = 11,
	MAX                                      = 12,
};

// Enum JackGame.EJackMeosiSlotStage
// NumValues: 0x0005
enum class EJackMeosiSlotStage : uint8
{
	DEFAULT                                  = 0,
	CHANCE_ZONE_1                            = 1,
	CHANCE_ZONE_2                            = 2,
	SPECIAL_TRAINING                         = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackMeosiSlotSettingValue
// NumValues: 0x0008
enum class EJackMeosiSlotSettingValue : uint8
{
	ONE                                      = 0,
	TWO                                      = 1,
	THREE                                    = 2,
	FOUR                                     = 3,
	FIVE                                     = 4,
	SIX                                      = 5,
	SEVEN                                    = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackMiniGameKind
// NumValues: 0x0006
enum class EJackMiniGameKind : uint8
{
	None                                     = 0,
	Slot                                     = 1,
	Roulette                                 = 2,
	Poker                                    = 3,
	MeosiSlot                                = 4,
	Max                                      = 5,
};

// Enum JackGame.EJackMiniGameDebugValueRange
// NumValues: 0x0004
enum class EJackMiniGameDebugValueRange : uint8
{
	None                                     = 0,
	Lower                                    = 1,
	Upper                                    = 2,
	Max                                      = 3,
};

// Enum JackGame.EJackMiniGameJackPotNPCState
// NumValues: 0x0004
enum class EJackMiniGameJackPotNPCState : uint8
{
	Initialize                               = 0,
	JackPotLottey                            = 1,
	JackPotNoLottey                          = 2,
	Max                                      = 3,
};

// Enum JackGame.EJackMiniGameJackPotMachine
// NumValues: 0x0003
enum class EJackMiniGameJackPotMachine : uint8
{
	Roulette                                 = 0,
	Slot                                     = 1,
	Max                                      = 2,
};

// Enum JackGame.EJackMiniGameJackPotState
// NumValues: 0x0004
enum class EJackMiniGameJackPotState : uint8
{
	Normal                                   = 0,
	EasyHit                                  = 1,
	VeryEasyHit                              = 2,
	Max                                      = 3,
};

// Enum JackGame.EJackMiniGameJackPotLevel
// NumValues: 0x0006
enum class EJackMiniGameJackPotLevel : uint8
{
	Level1                                   = 0,
	Level2                                   = 1,
	Level3                                   = 2,
	Level4                                   = 3,
	Level5                                   = 4,
	Max                                      = 5,
};

// Enum JackGame.EJackMiniGameJackPot
// NumValues: 0x0003
enum class EJackMiniGameJackPot : uint8
{
	Grotta                                   = 0,
	Soltico                                  = 1,
	Max                                      = 2,
};

// Enum JackGame.EJackMiniGameMeosiSlotPoint
// NumValues: 0x0004
enum class EJackMiniGameMeosiSlotPoint : uint8
{
	Grotta                                   = 0,
	Grotta_Second                            = 1,
	Soltico                                  = 2,
	Max                                      = 3,
};

// Enum JackGame.EJackMiniGamePoker
// NumValues: 0x0015
enum class EJackMiniGamePoker : uint8
{
	POKER_GAME_RESULT_NONE                   = 0,
	POKER_GAME_RESULT_HIGH_CARD              = 1,
	POKER_GAME_RESULT_ONE_PAIR               = 2,
	POKER_GAME_RESULT_TWO_PAIR               = 3,
	POKER_GAME_RESULT_THREE_CARD             = 4,
	POKER_GAME_RESULT_STRAIGHT               = 5,
	POKER_GAME_RESULT_FLUSH                  = 6,
	POKER_GAME_RESULT_FULL_HOUSE             = 7,
	POKER_GAME_RESULT_FOUR_CARD              = 8,
	POKER_GAME_RESULT_STRAIGHT_FLUSH         = 9,
	POKER_GAME_RESULT_FIVE_CARD              = 10,
	POKER_GAME_RESULT_ROYAL_FLUSH            = 11,
	POKER_GAME_RESULT_ROYAL_FLUSH_SPADE      = 12,
	POKER_GAME_RESULT_DOUBLEUP_LOSE          = 13,
	POKER_GAME_RESULT_DOUBLEUP_EVEN          = 14,
	POKER_GAME_RESULT_DOUBLEUP_WIN           = 15,
	POKER_GAME_RESULT_DOUBLEUP_TREASURECARD  = 16,
	POKER_GAME_RESULT_UNABLE_BET             = 17,
	POKER_GAME_RESULT_ENUM_MAX               = 18,
	POKER_GAME_RESULT_FORCE_FOUR             = 254,
	POKER_GAME_RESULT_MAX                    = 255,
};

// Enum JackGame.EJackPokerSign
// NumValues: 0x0003
enum class EJackPokerSign : uint8
{
	POSITIVE                                 = 0,
	NEGATIVE                                 = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackPokerTreasureBox
// NumValues: 0x0005
enum class EJackPokerTreasureBox : uint8
{
	NONE                                     = 0,
	RED                                      = 1,
	BLACK                                    = 2,
	GOLD                                     = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackPokerCardNumber
// NumValues: 0x000F
enum class EJackPokerCardNumber : uint8
{
	TWO                                      = 0,
	THREE                                    = 1,
	FOUR                                     = 2,
	FIVE                                     = 3,
	SIX                                      = 4,
	SEVEN                                    = 5,
	EIGHT                                    = 6,
	NINE                                     = 7,
	TEN                                      = 8,
	JACK                                     = 9,
	QUEEN                                    = 10,
	KING                                     = 11,
	ACE                                      = 12,
	JOKER                                    = 13,
	MAX                                      = 14,
};

// Enum JackGame.EJackPokerDoubleUpResult
// NumValues: 0x0004
enum class EJackPokerDoubleUpResult : uint8
{
	WIN                                      = 0,
	DRAW                                     = 1,
	LOSE                                     = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackPokerHand
// NumValues: 0x000C
enum class EJackPokerHand : uint8
{
	ROYAL_STRAIGHT_FLUSH_SPADE               = 0,
	ROYAL_STRAIGHT_FLUSH                     = 1,
	FIVE_CARD                                = 2,
	STRAIGHT_FLUSH                           = 3,
	FOUR_CARD                                = 4,
	FULL_HOUSE                               = 5,
	FLUSH                                    = 6,
	STRAIGHT                                 = 7,
	THREE_CARD                               = 8,
	TWO_PAIR                                 = 9,
	NONE                                     = 10,
	MAX                                      = 11,
};

// Enum JackGame.EJackPokerBetUnit
// NumValues: 0x0004
enum class EJackPokerBetUnit : uint8
{
	ONE                                      = 0,
	TEN                                      = 1,
	HUNDRED                                  = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackPokerWidgetID
// NumValues: 0x0003
enum class EJackPokerWidgetID : uint8
{
	PokerResultBase                          = 0,
	PokerResult                              = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackMiniGameRouletteGameState
// NumValues: 0x0007
enum class EJackMiniGameRouletteGameState : uint8
{
	Init                                     = 0,
	Game                                     = 1,
	EndDemo                                  = 2,
	JackPotDemo                              = 3,
	Finished                                 = 4,
	End                                      = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackMiniGameTask
// NumValues: 0x0007
enum class EJackMiniGameTask : uint8
{
	Init                                     = 0,
	Wait                                     = 1,
	StartWait                                = 2,
	Begin                                    = 3,
	Update                                   = 4,
	End                                      = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackModeType
// NumValues: 0x0003
enum class EJackModeType : uint8
{
	Mode2D                                   = 0,
	Mode3D                                   = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackMonsterMovingPathMethod
// NumValues: 0x0004
enum class EJackMonsterMovingPathMethod : uint8
{
	Default                                  = 0,
	CourseCurve                              = 1,
	SplinePath                               = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMonsterMovingMode
// NumValues: 0x0005
enum class EJackMonsterMovingMode : uint8
{
	Default                                  = 0,
	Run                                      = 1,
	BackWalk                                 = 2,
	FieldRun                                 = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackDebugCommandForMonster
// NumValues: 0x0015
enum class EJackDebugCommandForMonster : uint8
{
	Encount                                  = 0,
	Attack                                   = 1,
	Appeal                                   = 2,
	Avoid                                    = 3,
	Damage                                   = 4,
	Sleep                                    = 5,
	Paralysis                                = 6,
	Korobi                                   = 7,
	Laugh                                    = 8,
	MontagePlay                              = 9,
	Dead                                     = 10,
	RecoverToIdle                            = 11,
	LieInWait                                = 12,
	Raid                                     = 13,
	Advent                                   = 14,
	Retreat                                  = 15,
	Rove                                     = 16,
	Deactive                                 = 17,
	SpecialMove                              = 18,
	ToIdle                                   = 19,
	MAX                                      = 20,
};

// Enum JackGame.EJackMonsterAttitudeControlSetting
// NumValues: 0x0004
enum class EJackMonsterAttitudeControlSetting : uint8
{
	Always                                   = 0,
	FieldOnly                                = 1,
	BattleOnly                               = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackPopDistanceEvaluation
// NumValues: 0x0005
enum class EJackPopDistanceEvaluation : uint8
{
	None                                     = 0,
	Pop                                      = 1,
	Active                                   = 2,
	Visible                                  = 3,
	EJackPopDistanceEvaluation_MAX           = 4,
};

// Enum JackGame.EJackMusicBGMVolumeType
// NumValues: 0x0005
enum class EJackMusicBGMVolumeType : uint8
{
	JP3DGoldVolume                           = 0,
	JP3DOrcheVolume                          = 1,
	NE3DGoldVolume                           = 2,
	NE3DOrcheVolume                          = 3,
	EJackMusicBGMVolumeType_MAX              = 4,
};

// Enum JackGame.EJackMusicContextState
// NumValues: 0x0009
enum class EJackMusicContextState : uint8
{
	Initial                                  = 0,
	LoadingAsset                             = 1,
	ReadyToStart                             = 2,
	Pregap                                   = 3,
	Playing                                  = 4,
	StopFadeOut                              = 5,
	Postgap                                  = 6,
	Stopped                                  = 7,
	EJackMusicContextState_MAX               = 8,
};

// Enum JackGame.EJackOddEffectFacialFlag
// NumValues: 0x0002
enum class EJackOddEffectFacialFlag : uint8
{
	InvalidLookAt                            = 0,
	MAX                                      = 1,
};

// Enum JackGame.EJackOddEffectMotionFlag
// NumValues: 0x0005
enum class EJackOddEffectMotionFlag : uint8
{
	InvalidWeaponDisplay                     = 0,
	InvalidLookAt                            = 1,
	InvalidOddEffectFacial                   = 2,
	EndSectionSkipEnable                     = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackOddEffectConditionType
// NumValues: 0x0004
enum class EJackOddEffectConditionType : uint8
{
	None                                     = 0,
	Good                                     = 1,
	Bad                                      = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackOddEffectVoiceCategory
// NumValues: 0x0004
enum class EJackOddEffectVoiceCategory : uint8
{
	None                                     = 0,
	Set                                      = 1,
	Clear                                    = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackOddEffectEffectCategory
// NumValues: 0x0005
enum class EJackOddEffectEffectCategory : uint8
{
	None                                     = 0,
	Set                                      = 1,
	Invoke                                   = 2,
	Clear                                    = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackOddEffectTextType
// NumValues: 0x0009
enum class EJackOddEffectTextType : uint8
{
	None                                     = 0,
	OddEffectName                            = 1,
	OddEffectSetumei                         = 2,
	SetSuccess                               = 3,
	SetFail                                  = 4,
	SetFail_Overlap                          = 5,
	Clear                                    = 6,
	Invoke                                   = 7,
	MAX                                      = 8,
};

// Enum JackGame.EJackOddEffectApply
// NumValues: 0x0006
enum class EJackOddEffectApply : uint8
{
	None                                     = 0,
	ParamAdd                                 = 1,
	ParamSet                                 = 2,
	ParamSetPer                              = 3,
	Dot                                      = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackOddEffectInvokeTiming
// NumValues: 0x0007
enum class EJackOddEffectInvokeTiming : uint8
{
	None                                     = 0,
	BattleStart                              = 1,
	Kougeki                                  = 2,
	KougekiMetal                             = 3,
	KougekiHikou                             = 4,
	Damage                                   = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackOddEffectSlideRank
// NumValues: 0x0006
enum class EJackOddEffectSlideRank : uint8
{
	Minus2                                   = 0,
	Minus1                                   = 1,
	Zero                                     = 2,
	Plus1                                    = 3,
	Plus2                                    = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackOddEffectOverwriteResultType
// NumValues: 0x0008
enum class EJackOddEffectOverwriteResultType : uint8
{
	None                                     = 0,
	Invalid                                  = 1,
	New                                      = 2,
	Overwrite                                = 3,
	DepthUp                                  = 4,
	DepthUpInvalid                           = 5,
	Limit                                    = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackOddEffectCalcParameterType
// NumValues: 0x0004
enum class EJackOddEffectCalcParameterType : uint8
{
	InvokeParameter_01                       = 0,
	InvokeParameter_02                       = 1,
	ReferenceParam                           = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackOddEffectCalcType
// NumValues: 0x0006
enum class EJackOddEffectCalcType : uint8
{
	None                                     = 0,
	Add                                      = 1,
	Overwrite                                = 2,
	ForceOverwrite                           = 3,
	Slide                                    = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackOddEffectOverwriteType
// NumValues: 0x0006
enum class EJackOddEffectOverwriteType : uint8
{
	None                                     = 0,
	NotOverwrite                             = 1,
	Overwrite                                = 2,
	ForceOverwrite                           = 3,
	Depth                                    = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackOddEffectClearReasonType
// NumValues: 0x0004
enum class EJackOddEffectClearReasonType : uint8
{
	None                                     = 0,
	SetOddEffect                             = 1,
	BattleEnd                                = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackOddEffectReasonType
// NumValues: 0x0010
enum class EJackOddEffectReasonType : uint8
{
	None                                     = 0,
	Debug                                    = 1,
	Action                                   = 2,
	ActionTemp                               = 3,
	BattleStart                              = 4,
	BattleSystem                             = 5,
	WeaponR                                  = 6,
	WeaponL                                  = 7,
	Equipment                                = 8,
	Blueprint                                = 9,
	Share                                    = 10,
	Slide                                    = 11,
	Damage                                   = 12,
	Passive                                  = 13,
	PassiveTokugi                            = 14,
	MAX                                      = 15,
};

// Enum JackGame.EJackOddEffectCategoryType
// NumValues: 0x0072
enum class EJackOddEffectCategoryType : uint8
{
	None                                     = 0,
	Sibou                                    = 1,
	Nemuri                                   = 2,
	Genwaku                                  = 3,
	Mahi                                     = 4,
	Doku                                     = 5,
	Konran                                   = 6,
	Miryou                                   = 7,
	Noroi                                    = 8,
	Fuuin                                    = 9,
	Yasumi                                   = 10,
	HazukasiiNoroi                           = 11,
	KougekiryokuHenka                        = 12,
	SyubiryokuHenka                          = 13,
	SubayasaHenka                            = 14,
	KiyousaHenka                             = 15,
	KougekiJumonHenka                        = 16,
	KaifukuJumonHenka                        = 17,
	JumonTaiseiHenka                         = 18,
	TateGuardHasseiHenka                     = 19,
	BukiGuardHasseiHenka                     = 20,
	MikawasiHenka                            = 21,
	MitoresaseHenka                          = 22,
	BreathHenka                              = 23,
	KaisinHenka                              = 24,
	BousouHenka                              = 25,
	OddEffectTaiseiHenka                     = 26,
	HonooTaiseiHenka                         = 27,
	KooriTaiseiHenka                         = 28,
	KazeTaiseiHenka                          = 29,
	KaminariTaiseiHenka                      = 30,
	TutiTaiseiHenka                          = 31,
	YamiTaiseiHenka                          = 32,
	HikariTaiseiHenka                        = 33,
	KyuusyuuTaiseiHenka                      = 34,
	ElementalTaiseiHenka                     = 35,
	Zone                                     = 36,
	OddEffectMukou                           = 37,
	IkinokoriSeijo                           = 38,
	IkinokoriMegami                          = 39,
	AutoZaoriku                              = 40,
	AutoZaorikuBunny                         = 41,
	AutoHPKaifuku                            = 42,
	AutoMPKaifuku                            = 43,
	Senritu                                  = 44,
	JumonHansya                              = 45,
	JumonMukou                               = 46,
	Asutoron                                 = 47,
	DamageKanzenGuard                        = 48,
	ButuriKanzenGuard                        = 49,
	KaisinKanzenGuard                        = 50,
	DamageKeigen                             = 51,
	KougekiHPKaifuku                         = 52,
	KougekiMPKaifuku                         = 53,
	KougekiMPKyuusyuu                        = 54,
	RaceTokkouMPKyuusyuu                     = 55,
	MPSyouhiZero                             = 56,
	MPSyouhiZouka                            = 57,
	Counter                                  = 58,
	GuardCounter                             = 59,
	ImmediatelyCounter                       = 60,
	Nioudati                                 = 61,
	Kabau                                    = 62,
	Kabawareru                               = 63,
	KabauCounter                             = 64,
	Ukenagasi                                = 65,
	AcrobatStar                              = 66,
	CharaKyoukaRenkei                        = 67,
	GenteiTokugi                             = 68,
	AttackJousyou                            = 69,
	Fuzai                                    = 70,
	KaifukuKoukaGyakuten                     = 71,
	Zibaria                                  = 72,
	ActionLearn                              = 73,
	Yamabiko                                 = 74,
	NusumuUp                                 = 75,
	JoutaihenkaUp                            = 76,
	DokuTaiseiHenka                          = 77,
	NemuriTaiseiHenka                        = 78,
	KonranTaiseiHenka                        = 79,
	MahiTaiseiHenka                          = 80,
	SokusiTaiseiHenka                        = 81,
	MiryouTaiseiHenka                        = 82,
	GenwakuTaiseiHenka                       = 83,
	NoroiTaiseiHenka                         = 84,
	MitoreruTaiseiHenka                      = 85,
	FuuinJumonTaiseiHenka                    = 86,
	FuuinTokugiTaiseiHenka                   = 87,
	YasumiObieTaiseiHenka                    = 88,
	YasumiKorobiTaiseiHenka                  = 89,
	YasumiPafupafuTaiseiHenka                = 90,
	YasumiWaraiTaiseiHenka                   = 91,
	YasumiOdoriTaiseiHenka                   = 92,
	KougekiryokuDownTaiseiHenka              = 93,
	SyubiryokuDownTaiseiHenka                = 94,
	SubayasaDownTaiseiHenka                  = 95,
	KougekiJumonDownTaiseiHenka              = 96,
	KaifukuJumonDownTaiseiHenka              = 97,
	JumonSyubiDownTaiseiHenka                = 98,
	ZokuseiDownTaiseiHenka                   = 99,
	TaiseiDownTaiseiHenka                    = 100,
	BadTaiseiHenka                           = 101,
	PreemptiveAttackUp                       = 102,
	HateHenka                                = 103,
	DropUp                                   = 104,
	GoldUp                                   = 105,
	ExpUp                                    = 106,
	DropConfirm                              = 107,
	TuikaDamage                              = 108,
	FixCritical                              = 109,
	Bougyo                                   = 110,
	Bunsin                                   = 111,
	BiriBiriBarrier                          = 112,
	MAX                                      = 113,
};

// Enum JackGame.EJackClosePairingType
// NumValues: 0x0003
enum class EJackClosePairingType : uint8
{
	RemoveUserType                           = 0,
	RemoveControllerType                     = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackPairingPhase
// NumValues: 0x0007
enum class EJackPairingPhase : uint8
{
	None                                     = 0,
	WaitPairingEvent                         = 1,
	RemoveController                         = 2,
	ChangedUser                              = 3,
	RestartGameFade                          = 4,
	RemovedXUser                             = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackPhotoModeEmoteAnim
// NumValues: 0x0010
enum class EJackPhotoModeEmoteAnim : uint8
{
	Emote_Wave                               = 0,
	Emote_Greeting                           = 1,
	Emote_Clap                               = 2,
	Emote_Dance                              = 3,
	Emote_LevelUp                            = 4,
	Emote_Provoke                            = 5,
	Emote_Joy                                = 6,
	Emote_Angry                              = 7,
	Emote_Cry                                = 8,
	Emote_Point                              = 9,
	Emote_Panic                              = 10,
	Emote_Pose                               = 11,
	Emote_Default                            = 12,
	Emote_ExceptDefault                      = 13,
	Emote_All                                = 14,
	MAX                                      = 15,
};

// Enum JackGame.EJackPlayerAnimInstanceStateMachineState
// NumValues: 0x0004
enum class EJackPlayerAnimInstanceStateMachineState : uint8
{
	Unknown                                  = 0,
	ShootBowgun                              = 1,
	EndShootBowgun                           = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackPlayerAnimBaseStateMachineMode
// NumValues: 0x0004
enum class EJackPlayerAnimBaseStateMachineMode : uint8
{
	Default                                  = 0,
	Battle                                   = 1,
	Bowgun                                   = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackCameraLightControlPurpose
// NumValues: 0x0004
enum class EJackCameraLightControlPurpose : uint8
{
	MiniGame                                 = 0,
	CutScene                                 = 1,
	Debug                                    = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackPropHiddenPurpose
// NumValues: 0x000A
enum class EJackPropHiddenPurpose : uint8
{
	Engine                                   = 0,
	Owner                                    = 1,
	AnimNotify                               = 2,
	Matinee                                  = 3,
	Battle                                   = 4,
	Blueprint                                = 5,
	FieldAction                              = 6,
	PhotoMode                                = 7,
	AnimNotifyState                          = 8,
	MAX                                      = 9,
};

// Enum JackGame.EJackRenkeiEndCamera
// NumValues: 0x0004
enum class EJackRenkeiEndCamera : uint8
{
	None                                     = 0,
	AutoFree                                 = 1,
	Auto                                     = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackRigidBodyControlPurpose
// NumValues: 0x0003
enum class EJackRigidBodyControlPurpose : uint8
{
	CutScene                                 = 0,
	LOD                                      = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackMiniGameRouletteBallState
// NumValues: 0x0007
enum class EJackMiniGameRouletteBallState : uint8
{
	Init                                     = 0,
	UpdateAnimation                          = 1,
	Finished                                 = 2,
	PocketInUpdate                           = 3,
	EndDemo                                  = 4,
	End                                      = 5,
	Max                                      = 6,
};

// Enum JackGame.EJackMiniGameRouletteAgingType
// NumValues: 0x0008
enum class EJackMiniGameRouletteAgingType : uint8
{
	None                                     = 0,
	Random                                   = 1,
	Random10                                 = 2,
	OneX36                                   = 3,
	OneX36_10                                = 4,
	Random_Num                               = 5,
	OneX36_Num                               = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackMiniGameRouletteTreasureCoin
// NumValues: 0x0005
enum class EJackMiniGameRouletteTreasureCoin : uint8
{
	Type01                                   = 0,
	Type02                                   = 1,
	Type03                                   = 2,
	Type04                                   = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackMiniGameRouletteEffect
// NumValues: 0x0005
enum class EJackMiniGameRouletteEffect : uint8
{
	None                                     = 0,
	JackPot                                  = 1,
	NearJackPot                              = 2,
	Other                                    = 3,
	Max                                      = 4,
};

// Enum JackGame.EJackSlotLottey
// NumValues: 0x0004
enum class EJackSlotLottey : uint8
{
	None                                     = 0,
	Enable                                   = 1,
	Disable                                  = 2,
	EJackSlotLottey_MAX                      = 3,
};

// Enum JackGame.EJackSoftBodyControlPurpose
// NumValues: 0x0004
enum class EJackSoftBodyControlPurpose : uint8
{
	CutScene                                 = 0,
	LOD                                      = 1,
	AnimationCurve                           = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackStoreResult
// NumValues: 0x0006
enum class EJackStoreResult : uint8
{
	None                                     = 0,
	OK                                       = 1,
	Cancel                                   = 2,
	Purchased                                = 3,
	Error                                    = 4,
	EJackStoreResult_MAX                     = 5,
};

// Enum JackGame.EJackNetworkCheckResult
// NumValues: 0x0007
enum class EJackNetworkCheckResult : uint8
{
	None                                     = 0,
	Checking                                 = 1,
	Login                                    = 2,
	Logout                                   = 3,
	NotFound                                 = 4,
	Failures                                 = 5,
	EJackNetworkCheckResult_MAX              = 6,
};

// Enum JackGame.EJackDLCIndex
// NumValues: 0x0017
enum class EJackDLCIndex : uint8
{
	VoiceDrama                               = 0,
	MultiVoice                               = 1,
	PresentItem_00                           = 2,
	PresentItem_01                           = 3,
	PresentItem_02                           = 4,
	PresentItem_03                           = 5,
	PresentItem_04                           = 6,
	PresentItem_05                           = 7,
	PresentItem_06                           = 8,
	PresentItem_07                           = 9,
	PresentItem_08                           = 10,
	PresentItem_09                           = 11,
	PresentItem_10                           = 12,
	PresentItem_11                           = 13,
	PresentItem_12                           = 14,
	PresentItem_13                           = 15,
	PresentItem_14                           = 16,
	PresentItem_15                           = 17,
	PresentItem_16                           = 18,
	PresentItem_17                           = 19,
	PresentItem_18                           = 20,
	PresentItem_19                           = 21,
	MAX                                      = 22,
};

// Enum JackGame.EJackDebugSettingInfoType
// NumValues: 0x000D
enum class EJackDebugSettingInfoType : uint8
{
	Debug_Enable                             = 0,
	Debug_LongerStringFlag                   = 1,
	Debug_Gender                             = 2,
	Debug_PlrNounFlag                        = 3,
	Debug_ProNounFlag                        = 4,
	Debug_VowelFlag                          = 5,
	Debug_LastIsSFlag                        = 6,
	Debug_SingleFlag                         = 7,
	Debug_SoloFlag                           = 8,
	Debug_ListFlag                           = 9,
	Debug_Patchim                            = 10,
	Debug_Num                                = 11,
	Debug_MAX                                = 12,
};

// Enum JackGame.EJackErrorType
// NumValues: 0x000C
enum class EJackErrorType : uint8
{
	Error_None                               = 0,
	Error_MacroDef                           = 1,
	Error_MacroEnd                           = 2,
	Error_MacroArgEnd                        = 3,
	Error_MacroArgNum                        = 4,
	Error_TagName                            = 5,
	Error_TagEnd                             = 6,
	Error_HangStart                          = 7,
	Error_HangEnd                            = 8,
	Error_HangTying                          = 9,
	Error_Num                                = 10,
	Error_MAX                                = 11,
};

// Enum JackGame.EJackSymbolType
// NumValues: 0x0004
enum class EJackSymbolType : uint8
{
	Symbol_None                              = 0,
	Symbol_Start                             = 1,
	Symbol_End                               = 2,
	Symbol_MAX                               = 3,
};

// Enum JackGame.EJackKeyWordType
// NumValues: 0x0005
enum class EJackKeyWordType : uint8
{
	KeyWord_None                             = 0,
	KeyWord_Str                              = 1,
	KeyWord_Tag                              = 2,
	KeyWord_Macro                            = 3,
	KeyWord_MAX                              = 4,
};

// Enum JackGame.EJackTimeDilationMode
// NumValues: 0x0004
enum class EJackTimeDilationMode : uint8
{
	Multiply                                 = 0,
	Minimum                                  = 1,
	Maximum                                  = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackCameraSetteiKeyActionType
// NumValues: 0x0008
enum class EJackCameraSetteiKeyActionType : uint8
{
	None                                     = 0,
	Neutral                                  = 1,
	Up                                       = 2,
	Right                                    = 3,
	Down                                     = 4,
	Left                                     = 5,
	NotDisp                                  = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackTenseiOperationType
// NumValues: 0x0007
enum class EJackTenseiOperationType : uint8
{
	None                                     = 0,
	FriendJoin                               = 1,
	Action                                   = 2,
	Item                                     = 3,
	RecipeBook                               = 4,
	UmaRace                                  = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackPatchimType
// NumValues: 0x0004
enum class EJackPatchimType : uint8
{
	No                                       = 0,
	Yes                                      = 1,
	Rieul                                    = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackGermanCaseType
// NumValues: 0x0005
enum class EJackGermanCaseType : uint8
{
	Case_1                                   = 0,
	Case_2                                   = 1,
	Case_3                                   = 2,
	Case_4                                   = 3,
	Case_MAX                                 = 4,
};

// Enum JackGame.EJackGermanRatingType
// NumValues: 0x0004
enum class EJackGermanRatingType : uint8
{
	RatingDef                                = 0,
	RatingInDef                              = 1,
	RatingNum                                = 2,
	EJackGermanRatingType_MAX                = 3,
};

// Enum JackGame.EJackGermanSectionType
// NumValues: 0x0004
enum class EJackGermanSectionType : uint8
{
	SectionNoun                              = 0,
	SectionArticle                           = 1,
	SectionNum                               = 2,
	EJackGermanSectionType_MAX               = 3,
};

// Enum JackGame.EJackTagCategory
// NumValues: 0x0053
enum class EJackTagCategory : uint8
{
	TagCategory_None                         = 0,
	TagCategoryNoun_EventBattle              = 1,
	TagCategoryNoun_Monster                  = 2,
	TagCategoryNoun_MonsterType              = 3,
	TagCategoryNoun_Character                = 4,
	TagCategoryNoun_Caster                   = 5,
	TagCategoryNoun_Target                   = 6,
	TagCategoryNoun_Action                   = 7,
	TagCategoryNoun_SkillLine                = 8,
	TagCategoryNoun_Renkei                   = 9,
	TagCategoryNoun_WeaponType               = 10,
	TagCategoryNoun_EquipParts               = 11,
	TagCategoryNoun_Status                   = 12,
	TagCategoryNoun_Item                     = 13,
	TagCategoryNoun_ItemCategory             = 14,
	TagCategoryNoun_ItemUnit                 = 15,
	TagCategoryNoun_ItemConjunction          = 16,
	TagCategoryNoun_ItemSpace                = 17,
	TagCategoryNoun_ItemHalfSpace            = 18,
	TagCategoryNoun_ItemStoreTarget          = 19,
	TagCategoryNoun_ItemRare                 = 20,
	TagCategoryNoun_Bag                      = 21,
	TagCategoryNoun_Weather                  = 22,
	TagCategoryNoun_Field                    = 23,
	TagCategoryNoun_Restart                  = 24,
	TagCategoryNoun_RuraPoint                = 25,
	TagCategoryNoun_Place                    = 26,
	TagCategoryNoun_Altar                    = 27,
	TagCategoryNoun_Quest                    = 28,
	TagCategoryNoun_MeosiMonster             = 29,
	TagCategoryNoun_MeosiItem                = 30,
	TagCategoryNoun_PokerHand                = 31,
	TagCategoryNoun_UmaRaceRank              = 32,
	TagCategoryNoun_FusigikajiCategory       = 33,
	TagCategoryNoun_FusigikajiTokugi         = 34,
	TagCategoryNoun_Syuuren                  = 35,
	TagCategoryNoun_ShibariPlay              = 36,
	TagCategoryNumeral_Item                  = 37,
	TagCategoryNumeral_Member                = 38,
	TagCategoryNumeral_Exp                   = 39,
	TagCategoryNumeral_Level                 = 40,
	TagCategoryNumeral_SkillPoint            = 41,
	TagCategoryNumeral_Seed                  = 42,
	TagCategoryNumeral_Tikara                = 43,
	TagCategoryNumeral_Minomamori            = 44,
	TagCategoryNumeral_Subayasa              = 45,
	TagCategoryNumeral_Kiyousa               = 46,
	TagCategoryNumeral_Miryoku               = 47,
	TagCategoryNumeral_Gold                  = 48,
	TagCategoryNumeral_Damage                = 49,
	TagCategoryNumeral_Turn                  = 50,
	TagCategoryNumeral_Treasure              = 51,
	TagCategoryNumeral_FieldTarget           = 52,
	TagCategoryNumeral_Minute                = 53,
	TagCategoryNumeral_RetryItem             = 54,
	TagCategoryNumeral_BlacksmithLevel       = 55,
	TagCategoryNumeral_UpCp                  = 56,
	TagCategoryNumeral_Coin                  = 57,
	TagCategoryNumeral_DoubleUp              = 58,
	TagCategoryNumeral_Card                  = 59,
	TagCategoryNumeral_Roulette              = 60,
	TagCategoryNumeral_MedalSpin             = 61,
	TagCategoryNumeral_FleeSpin              = 62,
	TagCategoryNumeral_Game                  = 63,
	TagCategoryNumeral_Setting               = 64,
	TagCategoryNumeral_Slotblock             = 65,
	TagCategoryNumeral_Medal                 = 66,
	TagCategoryNumeral_Stamp                 = 67,
	TagCategoryNumeral_Save                  = 68,
	TagCategoryNumeral_Playtime              = 69,
	TagCategoryNumeral_MonsterQuantity       = 70,
	TagCategoryNumeral_MpRecovery            = 71,
	TagCategoryNumeral_TargetValue           = 72,
	TagCategoryNumeral_TargetNumber          = 73,
	TagCategoryNumeral_JumonNumber           = 74,
	TagCategoryFix_Player                    = 75,
	TagCategoryFix_Players                   = 76,
	TagCategoryFix_ControlledCharacter       = 77,
	TagCategoryFix_ControlledCharacters      = 78,
	TagCategoryFix_Gold                      = 79,
	TagCategoryFix_Medal                     = 80,
	TagCategoryFix_Coin                      = 81,
	EJackTagCategory_MAX                     = 82,
};

// Enum JackGame.EJackTagReferType
// NumValues: 0x0007
enum class EJackTagReferType : uint8
{
	TagRefer_None                            = 0,
	TagRefer_Fix                             = 1,
	TagRefer_OutSide_Member                  = 2,
	TagRefer_Noun                            = 3,
	TagRefer_Numeral                         = 4,
	TagRefer_List                            = 5,
	TagRefer_MAX                             = 6,
};

// Enum JackGame.EJackHangType
// NumValues: 0x0004
enum class EJackHangType : uint8
{
	Hang_None                                = 0,
	Hang_Left                                = 1,
	Hang_Right                               = 2,
	Hang_MAX                                 = 3,
};

// Enum JackGame.EJackMacroType
// NumValues: 0x0009
enum class EJackMacroType : uint8
{
	Macro_None                               = 0,
	Macro_Normal                             = 1,
	Macro_HR_Tag                             = 2,
	Macro_HR_Mac                             = 3,
	Macro_HL_Tag                             = 4,
	Macro_HL_Mac                             = 5,
	Macro_TR_Noun                            = 6,
	Macro_TR_Numeral                         = 7,
	Macro_MAX                                = 8,
};

// Enum JackGame.EJackProcessType
// NumValues: 0x003D
enum class EJackProcessType : uint8
{
	Proc_None                                = 0,
	Proc_Replacement                         = 1,
	Proc_Cap                                 = 2,
	Proc_AllCap                              = 3,
	Proc_SglM                                = 4,
	Proc_SglF                                = 5,
	Proc_SglN                                = 6,
	Proc_Sgl                                 = 7,
	Proc_IndefSgl                            = 8,
	Proc_DefSgl                              = 9,
	Proc_Plr                                 = 10,
	Proc_IndefPlr                            = 11,
	Proc_IndefPlrIT                          = 12,
	Proc_DefPlr                              = 13,
	Proc_List                                = 14,
	Proc_Gender                              = 15,
	Proc_IfPr                                = 16,
	Proc_IfPlrNoun                           = 17,
	Proc_IfProperNoun                        = 18,
	Proc_IfSing                              = 19,
	Proc_IfFRSing                            = 20,
	Proc_IfSolo                              = 21,
	Proc_IfVowel                             = 22,
	Proc_IfLastIsS                           = 23,
	Proc_IfList                              = 24,
	Proc_IndefSgl_NOM                        = 25,
	Proc_IndefSgl_GEN                        = 26,
	Proc_IndefSgl_DAT                        = 27,
	Proc_IndefSgl_ACC                        = 28,
	Proc_DefSgl_NOM                          = 29,
	Proc_DefSgl_GEN                          = 30,
	Proc_DefSgl_DAT                          = 31,
	Proc_DefSgl_ACC                          = 32,
	Proc_IndefPlr_NOM                        = 33,
	Proc_IndefPlr_GEN                        = 34,
	Proc_IndefPlr_DAT                        = 35,
	Proc_IndefPlr_ACC                        = 36,
	Proc_DefPlr_NOM                          = 37,
	Proc_DefPlr_GEN                          = 38,
	Proc_DefPlr_DAT                          = 39,
	Proc_DefPlr_ACC                          = 40,
	Proc_IndefSgl_NOM_ART                    = 41,
	Proc_IndefSgl_GEN_ART                    = 42,
	Proc_IndefSgl_DAT_ART                    = 43,
	Proc_IndefSgl_ACC_ART                    = 44,
	Proc_DefSgl_NOM_ART                      = 45,
	Proc_DefSgl_GEN_ART                      = 46,
	Proc_DefSgl_DAT_ART                      = 47,
	Proc_DefSgl_ACC_ART                      = 48,
	Proc_IndefPlr_NOM_ART                    = 49,
	Proc_IndefPlr_GEN_ART                    = 50,
	Proc_IndefPlr_DAT_ART                    = 51,
	Proc_IndefPlr_ACC_ART                    = 52,
	Proc_DefPlr_NOM_ART                      = 53,
	Proc_DefPlr_GEN_ART                      = 54,
	Proc_DefPlr_DAT_ART                      = 55,
	Proc_DefPlr_ACC_ART                      = 56,
	Proc_PPN01                               = 57,
	Proc_PPN02                               = 58,
	Proc_IfTopRanker                         = 59,
	Proc_MAX                                 = 60,
};

// Enum JackGame.EJackControllerParts
// NumValues: 0x001A
enum class EJackControllerParts : uint8
{
	A                                        = 0,
	B                                        = 1,
	BJUMP                                    = 2,
	X                                        = 3,
	Y                                        = 4,
	LT                                       = 5,
	RT                                       = 6,
	LSB                                      = 7,
	RSB                                      = 8,
	START                                    = 9,
	PHOTO                                    = 10,
	DPAD_U                                   = 11,
	DPAD_D                                   = 12,
	DPAD_L                                   = 13,
	DPAD_R                                   = 14,
	LB                                       = 15,
	RB                                       = 16,
	LS_U                                     = 17,
	LS_D                                     = 18,
	LS_L                                     = 19,
	LS_R                                     = 20,
	RS_U                                     = 21,
	RS_D                                     = 22,
	RS_L                                     = 23,
	RS_R                                     = 24,
	MAX                                      = 25,
};

// Enum JackGame.EJackScreenPercentage
// NumValues: 0x0007
enum class EJackScreenPercentage : uint8
{
	GameDefault                              = 0,
	PartyTalk                                = 1,
	PhotoMode                                = 2,
	CutScene                                 = 3,
	Casino                                   = 4,
	Custom                                   = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackPartySeizonJoutai
// NumValues: 0x0004
enum class EJackPartySeizonJoutai : uint8
{
	None                                     = 0,
	MainZenmetu                              = 1,
	AllZenmetu                               = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackCSMapLevelStatus
// NumValues: 0x0006
enum class EJackCSMapLevelStatus : uint8
{
	None                                     = 0,
	Load                                     = 1,
	Visible                                  = 2,
	Hidden                                   = 3,
	Unload                                   = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackQuestRewardType
// NumValues: 0x0005
enum class EJackQuestRewardType : uint8
{
	None                                     = 0,
	Item                                     = 1,
	Gold                                     = 2,
	PowerUp                                  = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackProgression
// NumValues: 0x000C
enum class EJackProgression : uint8
{
	NotListed                                = 0,
	Published                                = 1,
	Occurrence                               = 2,
	Inorder                                  = 3,
	Active_010                               = 4,
	Active_020                               = 5,
	Active_030                               = 6,
	Active_040                               = 7,
	AchieveDisplayWait                       = 8,
	Achieved                                 = 9,
	Terminated                               = 10,
	MAX                                      = 11,
};

// Enum JackGame.EJackAchievement
// NumValues: 0x0016
enum class EJackAchievement : uint8
{
	None                                     = 0,
	ItemGetAnyWhere                          = 1,
	ItemGetSpecificArea                      = 2,
	ItemGetFusigiKaji                        = 3,
	ItemGetSpecificMonster                   = 4,
	ItemGetSpecificTreasureBox               = 5,
	ItemGetSpecificKiraKira                  = 6,
	MonsterKnockDown                         = 7,
	MonsterKnockDownRule                     = 8,
	ReadSpecificBook                         = 9,
	ReadSpecificSignboard                    = 10,
	EquipSpecific                            = 11,
	ShowSpecificEquipmentTwice               = 12,
	ToreachSpecificPlace                     = 13,
	TalkSpecificNpc                          = 14,
	ToSpecifiedValue                         = 15,
	TalkAgainAfterSpecifiedTime              = 16,
	SpecifiedCoordinates                     = 17,
	ItemGetIceax                             = 18,
	ItemGetSickle                            = 19,
	RouletteJackpot                          = 20,
	MAX                                      = 21,
};

// Enum JackGame.EJackRestartProcessType
// NumValues: 0x0004
enum class EJackRestartProcessType : uint8
{
	Pray                                     = 0,
	Map                                      = 1,
	Event                                    = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMapResourceLoadChannel
// NumValues: 0x0004
enum class EJackMapResourceLoadChannel : uint8
{
	MiniMap                                  = 0,
	LocalMap                                 = 1,
	WorldMap                                 = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMapNowLoadingStatus
// NumValues: 0x0004
enum class EJackMapNowLoadingStatus : uint8
{
	None                                     = 0,
	Show                                     = 1,
	Hide                                     = 2,
	EJackMapNowLoadingStatus_MAX             = 3,
};

// Enum JackGame.EJackWorldMapState
// NumValues: 0x0014
enum class EJackWorldMapState : uint8
{
	Default                                  = 0,
	LocalMap                                 = 1,
	WorldMap                                 = 2,
	SeaMap                                   = 3,
	SkyMap                                   = 4,
	MapMenu                                  = 5,
	WorldMapMenu                             = 6,
	SeaSkyMapMenu                            = 7,
	Quest                                    = 8,
	Kira                                     = 9,
	Facility                                 = 10,
	Monster                                  = 11,
	Rura                                     = 12,
	DidRuraAction                            = 13,
	NeighborMap                              = 14,
	Zoom                                     = 15,
	ZoomModeTransition                       = 16,
	DisplayingOtherFloor                     = 17,
	MiniMap                                  = 18,
	MAX                                      = 19,
};

// Enum JackGame.EJackUIMapZoomState
// NumValues: 0x0005
enum class EJackUIMapZoomState : uint8
{
	None                                     = 0,
	ZoomIn                                   = 1,
	Zoom                                     = 2,
	ZoomOut                                  = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackMapTextItemDisplayMethodInNeighborMapMode
// NumValues: 0x0004
enum class EJackMapTextItemDisplayMethodInNeighborMapMode : uint8
{
	SameInCurrentMap                         = 0,
	Show                                     = 1,
	Hide                                     = 2,
	EJackMapTextItemDisplayMethodInNeighborMapMode_MAX = 3,
};

// Enum JackGame.EJackMapTextItemControlMethod
// NumValues: 0x0007
enum class EJackMapTextItemControlMethod : uint8
{
	None                                     = 0,
	DataTable                                = 1,
	CurrentMapID                             = 2,
	CurrentMapVolumeID                       = 3,
	Anchorage                                = 4,
	GameFlag                                 = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackMapTextItemDrawTarget
// NumValues: 0x0004
enum class EJackMapTextItemDrawTarget : uint8
{
	WorldMap                                 = 0,
	MiniMap                                  = 1,
	Both                                     = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMapPCMarkerDisplayMethod
// NumValues: 0x0004
enum class EJackMapPCMarkerDisplayMethod : uint8
{
	Show                                     = 0,
	ShowJustCurrentFloor                     = 1,
	Hide                                     = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackLocationNameDisplayMethod
// NumValues: 0x0006
enum class EJackLocationNameDisplayMethod : uint8
{
	None                                     = 0,
	Show                                     = 1,
	Hide                                     = 2,
	Censored                                 = 3,
	Grayout                                  = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackFloorGroup
// NumValues: 0x001D
enum class EJackFloorGroup : uint8
{
	None                                     = 0,
	Group_A                                  = 1,
	Group_B                                  = 2,
	Group_C                                  = 3,
	Group_D                                  = 4,
	Group_E                                  = 5,
	Group_F                                  = 6,
	Group_G                                  = 7,
	Group_H                                  = 8,
	Group_I                                  = 9,
	Group_J                                  = 10,
	Group_K                                  = 11,
	Group_L                                  = 12,
	Group_M                                  = 13,
	Group_N                                  = 14,
	Group_O                                  = 15,
	Group_P                                  = 16,
	Group_Q                                  = 17,
	Group_R                                  = 18,
	Group_S                                  = 19,
	Group_T                                  = 20,
	Group_U                                  = 21,
	Group_V                                  = 22,
	Group_W                                  = 23,
	Group_X                                  = 24,
	Group_Y                                  = 25,
	Group_Z                                  = 26,
	Ido                                      = 27,
	MAX                                      = 28,
};

// Enum JackGame.EJackFloorArea
// NumValues: 0x001F
enum class EJackFloorArea : uint8
{
	Area_1                                   = 0,
	Area_2                                   = 1,
	Area_3                                   = 2,
	Area_4                                   = 3,
	Area_5                                   = 4,
	Area_6                                   = 5,
	Area_7                                   = 6,
	Area_8                                   = 7,
	Area_9                                   = 8,
	Area_10                                  = 9,
	Area_11                                  = 10,
	Area_12                                  = 11,
	Area_13                                  = 12,
	Area_14                                  = 13,
	Area_15                                  = 14,
	Area_16                                  = 15,
	Area_17                                  = 16,
	Area_18                                  = 17,
	Area_19                                  = 18,
	Area_20                                  = 19,
	Area_21                                  = 20,
	Area_22                                  = 21,
	Area_23                                  = 22,
	Area_24                                  = 23,
	Area_25                                  = 24,
	Area_26                                  = 25,
	Area_27                                  = 26,
	Area_28                                  = 27,
	Area_29                                  = 28,
	Area_30                                  = 29,
	MAX                                      = 30,
};

// Enum JackGame.EJackFloorLevel
// NumValues: 0x0067
enum class EJackFloorLevel : uint8
{
	None                                     = 0,
	F1                                       = 1,
	F2                                       = 2,
	F3                                       = 3,
	F4                                       = 4,
	F5                                       = 5,
	F6                                       = 6,
	F7                                       = 7,
	F8                                       = 8,
	F9                                       = 9,
	F10                                      = 10,
	F11                                      = 11,
	F12                                      = 12,
	F13                                      = 13,
	F14                                      = 14,
	F15                                      = 15,
	F16                                      = 16,
	F17                                      = 17,
	F18                                      = 18,
	F19                                      = 19,
	F20                                      = 20,
	F21                                      = 21,
	F22                                      = 22,
	F23                                      = 23,
	F24                                      = 24,
	F25                                      = 25,
	F26                                      = 26,
	F27                                      = 27,
	F28                                      = 28,
	F29                                      = 29,
	F30                                      = 30,
	F31                                      = 31,
	F32                                      = 32,
	F33                                      = 33,
	F34                                      = 34,
	F35                                      = 35,
	F36                                      = 36,
	F37                                      = 37,
	F38                                      = 38,
	F39                                      = 39,
	F40                                      = 40,
	F41                                      = 41,
	F42                                      = 42,
	F43                                      = 43,
	F44                                      = 44,
	F45                                      = 45,
	F46                                      = 46,
	F47                                      = 47,
	F48                                      = 48,
	F49                                      = 49,
	F50                                      = 50,
	B1                                       = 51,
	B2                                       = 52,
	B3                                       = 53,
	B4                                       = 54,
	B5                                       = 55,
	B6                                       = 56,
	B7                                       = 57,
	B8                                       = 58,
	B9                                       = 59,
	B10                                      = 60,
	B11                                      = 61,
	B12                                      = 62,
	B13                                      = 63,
	B14                                      = 64,
	B15                                      = 65,
	B16                                      = 66,
	B17                                      = 67,
	B18                                      = 68,
	B19                                      = 69,
	B20                                      = 70,
	B21                                      = 71,
	B22                                      = 72,
	B23                                      = 73,
	B24                                      = 74,
	B25                                      = 75,
	B26                                      = 76,
	B27                                      = 77,
	B28                                      = 78,
	B29                                      = 79,
	B30                                      = 80,
	B31                                      = 81,
	B32                                      = 82,
	B33                                      = 83,
	B34                                      = 84,
	B35                                      = 85,
	B36                                      = 86,
	B37                                      = 87,
	B38                                      = 88,
	B39                                      = 89,
	B40                                      = 90,
	B41                                      = 91,
	B42                                      = 92,
	B43                                      = 93,
	B44                                      = 94,
	B45                                      = 95,
	B46                                      = 96,
	B47                                      = 97,
	B48                                      = 98,
	B49                                      = 99,
	B50                                      = 100,
	Invalid                                  = 101,
	MAX                                      = 102,
};

// Enum JackGame.EJackMapFieldType
// NumValues: 0x0007
enum class EJackMapFieldType : uint8
{
	Kyoten                                   = 0,
	Dungeon                                  = 1,
	Field                                    = 2,
	Ido                                      = 3,
	SeaSky                                   = 4,
	WorldMap                                 = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackMapInfoType
// NumValues: 0x0004
enum class EJackMapInfoType : uint8
{
	Usual                                    = 0,
	SLocationOnly                            = 1,
	NoMap                                    = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMapSymbol
// NumValues: 0x0047
enum class EJackMapSymbol : uint8
{
	None                                     = 0,
	Buki                                     = 1,
	Bougu                                    = 2,
	Dougu                                    = 3,
	Yadoya                                   = 4,
	Kyoukai                                  = 5,
	MegamizouD17                             = 6,
	Sakaba                                   = 7,
	Ginkou                                   = 8,
	Blacksmith                               = 9,
	Camp                                     = 10,
	Medal                                    = 11,
	HorseRace                                = 12,
	Casino                                   = 13,
	CasinoCoin                               = 14,
	CasinoKeihin                             = 15,
	ScenarioGuide                            = 16,
	QuestGuide                               = 17,
	ActionGuide                              = 18,
	DestinationGuide1                        = 19,
	DestinationGuide2                        = 20,
	HorseCall                                = 21,
	Ido                                      = 22,
	YusyaNoSekihi                            = 23,
	CurePoint                                = 24,
	TaijuNoNe                                = 25,
	TaijuNoNaegi                             = 26,
	RuraPoint1                               = 27,
	RuraPoint2                               = 28,
	MapJumpPoint                             = 29,
	MermaidHarpPoint                         = 30,
	LandingPoint1                            = 31,
	LandingPoint2                            = 32,
	Pier                                     = 33,
	GoldenIceberg                            = 34,
	MagicDoor                                = 35,
	LastDoor                                 = 36,
	S14                                      = 37,
	M14                                      = 38,
	D15                                      = 39,
	D17                                      = 40,
	KuroiTaiyou                              = 41,
	SaikyouBoss                              = 42,
	HorseRide                                = 43,
	MonsterRide                              = 44,
	Ship                                     = 45,
	Gondola                                  = 46,
	Castle                                   = 47,
	C01                                      = 48,
	D14                                      = 49,
	S11                                      = 50,
	Rubble                                   = 51,
	FloatingIsland                           = 52,
	KuroiKyutai                              = 53,
	Cave                                     = 54,
	Delubrum                                 = 55,
	Tower                                    = 56,
	Village                                  = 57,
	Town                                     = 58,
	Kira1                                    = 59,
	Kira2                                    = 60,
	TimeZone_Daytime                         = 61,
	TimeZone_Night                           = 62,
	Weather_Sunny                            = 63,
	Weather_Rain                             = 64,
	Weather_Snow                             = 65,
	PCMarker                                 = 66,
	PCFootmark                               = 67,
	CustomTexture                            = 68,
	Hidden                                   = 69,
	MAX                                      = 70,
};

// Enum JackGame.EJackMapConditionType
// NumValues: 0x0006
enum class EJackMapConditionType : uint8
{
	None                                     = 0,
	InMap                                    = 1,
	NotInMap                                 = 2,
	HaveVisited                              = 3,
	NotHaveVisited                           = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackMapIDType
// NumValues: 0x0004
enum class EJackMapIDType : uint8
{
	None                                     = 0,
	MapID                                    = 1,
	MapVolumeID                              = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackGameFlagOperator
// NumValues: 0x0009
enum class EJackGameFlagOperator : uint8
{
	None                                     = 0,
	Equal                                    = 1,
	NotEqual                                 = 2,
	IsTrue                                   = 3,
	IsNotTrue                                = 4,
	IsFalse                                  = 5,
	IsNotFalse                               = 6,
	Not                                      = 7,
	MAX                                      = 8,
};

// Enum JackGame.EJackGameFlagDataType
// NumValues: 0x0006
enum class EJackGameFlagDataType : uint8
{
	INVALID                                  = 0,
	Bool                                     = 1,
	Int                                      = 2,
	Float                                    = 3,
	String                                   = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackScenarioID
// NumValues: 0x004A
enum class EJackScenarioID : uint8
{
	None                                     = 0,
	A010                                     = 1,
	A020                                     = 2,
	A030                                     = 3,
	A040                                     = 4,
	A050                                     = 5,
	A060                                     = 6,
	A070                                     = 7,
	A080                                     = 8,
	A090                                     = 9,
	A100                                     = 10,
	A110                                     = 11,
	A120                                     = 12,
	A130                                     = 13,
	A140                                     = 14,
	A150                                     = 15,
	A160                                     = 16,
	A170                                     = 17,
	A180                                     = 18,
	S010                                     = 19,
	S020                                     = 20,
	S030                                     = 21,
	S040                                     = 22,
	S050                                     = 23,
	B010                                     = 24,
	B020                                     = 25,
	B030                                     = 26,
	B040                                     = 27,
	B050                                     = 28,
	B060                                     = 29,
	B070                                     = 30,
	B080                                     = 31,
	B090                                     = 32,
	B100                                     = 33,
	B110                                     = 34,
	B120                                     = 35,
	B130                                     = 36,
	B140                                     = 37,
	B150                                     = 38,
	B160                                     = 39,
	B170                                     = 40,
	C010                                     = 41,
	C020                                     = 42,
	C030                                     = 43,
	C040                                     = 44,
	C050                                     = 45,
	C060                                     = 46,
	C070                                     = 47,
	C080                                     = 48,
	C090                                     = 49,
	C100                                     = 50,
	C110                                     = 51,
	C120                                     = 52,
	C130                                     = 53,
	C140                                     = 54,
	C150                                     = 55,
	C160                                     = 56,
	C170                                     = 57,
	C180                                     = 58,
	C190                                     = 59,
	C200                                     = 60,
	C210                                     = 61,
	C220                                     = 62,
	C230                                     = 63,
	C240                                     = 64,
	C250                                     = 65,
	C260                                     = 66,
	C270                                     = 67,
	C280                                     = 68,
	C290                                     = 69,
	C300                                     = 70,
	Y010                                     = 71,
	NA                                       = 72,
	MAX                                      = 73,
};

// Enum JackGame.EJackScenarioGroup
// NumValues: 0x0006
enum class EJackScenarioGroup : uint8
{
	None                                     = 0,
	A                                        = 1,
	B                                        = 2,
	C                                        = 3,
	S                                        = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackEnlightenControlPurpose
// NumValues: 0x0003
enum class EJackEnlightenControlPurpose : uint8
{
	Battle                                   = 0,
	CutScene                                 = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackUMGFieldActionSoundType
// NumValues: 0x0004
enum class EJackUMGFieldActionSoundType : uint8
{
	None                                     = 0,
	Hoimi2                                   = 1,
	Zaoraru2                                 = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackLoadingScreenTips
// NumValues: 0x0004
enum class EJackLoadingScreenTips : uint8
{
	Group                                    = 0,
	Scenario                                 = 1,
	Level                                    = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackLoadingScreen
// NumValues: 0x000A
enum class EJackLoadingScreen : uint8
{
	Startup                                  = 0,
	TextOnly                                 = 1,
	WithProgress                             = 2,
	WithTips                                 = 3,
	TextOnly_White                           = 4,
	WithProgress_White                       = 5,
	WithTips_White                           = 6,
	Black                                    = 7,
	White                                    = 8,
	MAX                                      = 9,
};

// Enum JackGame.EJackPartyTalkIdleMotion
// NumValues: 0x0009
enum class EJackPartyTalkIdleMotion : uint8
{
	Normal                                   = 0,
	Serious                                  = 1,
	Happy                                    = 2,
	Angry                                    = 3,
	Thinking                                 = 4,
	Special                                  = 5,
	Amnesia                                  = 6,
	Reference                                = 7,
	MAX                                      = 8,
};

// Enum JackGame.EJackRuraOpenFlag
// NumValues: 0x0004
enum class EJackRuraOpenFlag : uint8
{
	Close                                    = 0,
	OpenUsable                               = 1,
	OpenUnusable                             = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMonsterEmotionIcon
// NumValues: 0x0004
enum class EJackMonsterEmotionIcon : uint8
{
	Exclamation                              = 0,
	Question                                 = 1,
	Angry                                    = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackActionGuideControlPurpose
// NumValues: 0x0008
enum class EJackActionGuideControlPurpose : uint8
{
	Gimmick                                  = 0,
	Interactor                               = 1,
	InteractiveActorGroup                    = 2,
	ActionCursor                             = 3,
	Self                                     = 4,
	Others                                   = 5,
	Manager                                  = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackFukidasiDuration
// NumValues: 0x0003
enum class EJackFukidasiDuration : uint8
{
	Normal                                   = 0,
	Short                                    = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackFukidasiType
// NumValues: 0x0002
enum class EJackFukidasiType : uint8
{
	Normal                                   = 0,
	MAX                                      = 1,
};

// Enum JackGame.EJackTextType
// NumValues: 0x000F
enum class EJackTextType : uint8
{
	None                                     = 0,
	Serifu                                   = 1,
	SerifuIE                                 = 2,
	SerifuCS                                 = 3,
	Fukidasi                                 = 4,
	SystemMessage                            = 5,
	TenNoKoe                                 = 6,
	Arasuji                                  = 7,
	Caption                                  = 8,
	PartyTalk                                = 9,
	TextPackCommon                           = 10,
	TextPackScenario                         = 11,
	Reference                                = 12,
	NotExists                                = 13,
	MAX                                      = 14,
};

// Enum JackGame.EJackTextCategory
// NumValues: 0x001A
enum class EJackTextCategory : uint8
{
	Test                                     = 0,
	Game                                     = 1,
	Battle                                   = 2,
	Menu                                     = 3,
	System                                   = 4,
	Fukidasi                                 = 5,
	Guide                                    = 6,
	MiniGame                                 = 7,
	Localization                             = 8,
	Shop                                     = 32,
	Yadoya                                   = 33,
	Ginkou                                   = 34,
	Kyoukai                                  = 35,
	CasinoCoin                               = 36,
	Medal                                    = 37,
	TextPack                                 = 64,
	IE                                       = 128,
	CS                                       = 144,
	FukidasiIE                               = 160,
	RESERVED_B                               = 176,
	RESERVED_C                               = 192,
	RESERVED_D                               = 208,
	RESERVED_E                               = 224,
	ReservedFF                               = 240,
	INVALID                                  = 253,
	MAX                                      = 254,
};

// Enum JackGame.EJackInputPriority
// NumValues: 0x0008
enum class EJackInputPriority : uint8
{
	CutScene                                 = 0,
	HUD                                      = 1,
	NakamaKaiwa                              = 2,
	EndingInput                              = 3,
	DebugCS                                  = 4,
	DebugCSExtra                             = 5,
	DebugSimulation                          = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackUIKeyGroup
// NumValues: 0x0008
enum class EJackUIKeyGroup : uint8
{
	None                                     = 0,
	HardButton                               = 1,
	HardCross                                = 2,
	LogicalButton                            = 3,
	LogicalCross                             = 4,
	HardLButton                              = 5,
	HardRButton                              = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackStreamingStatus
// NumValues: 0x0008
enum class EJackStreamingStatus : uint8
{
	Unloaded                                 = 0,
	UnloadedButStillAround                   = 1,
	Loading                                  = 2,
	Loaded                                   = 3,
	MakingVisible                            = 4,
	Visible                                  = 5,
	Preloading                               = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackLevelStreamingRequest
// NumValues: 0x0004
enum class EJackLevelStreamingRequest : uint8
{
	Unload                                   = 0,
	Load                                     = 1,
	BlockLoad                                = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackTimeDilationPurpose
// NumValues: 0x0005
enum class EJackTimeDilationPurpose : uint8
{
	LVD                                      = 0,
	CutScene                                 = 1,
	AnimNotify                               = 2,
	HitStop                                  = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackTutorialCategory
// NumValues: 0x0009
enum class EJackTutorialCategory : uint8
{
	Basic                                    = 0,
	Menu                                     = 1,
	Field                                    = 2,
	Battle                                   = 3,
	Item                                     = 4,
	Kaji                                     = 5,
	MiniGame                                 = 6,
	All                                      = 7,
	MAX                                      = 8,
};

// Enum JackGame.EJackAchievementTiming
// NumValues: 0x0003
enum class EJackAchievementTiming : uint8
{
	Playable                                 = 0,
	TokugiPanelOnly                          = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackAchievementCondition
// NumValues: 0x0032
enum class EJackAchievementCondition : uint8
{
	AcquiredDirect                           = 0,
	TokugiPanel_P001                         = 1,
	TokugiPanel_P002                         = 2,
	TokugiPanel_P003                         = 3,
	TokugiPanel_P004                         = 4,
	TokugiPanel_P005                         = 5,
	TokugiPanel_P006                         = 6,
	TokugiPanel_P007                         = 7,
	TokugiPanel_P008                         = 8,
	DefeatMonsterCount                       = 9,
	DefeatMonsterCount_Metal                 = 10,
	DefeatMonsterKind                        = 11,
	BattleVictoryCount                       = 12,
	UseTokugiCount                           = 13,
	RenkeiUseCount                           = 14,
	RenkeiUseKind                            = 15,
	MonsterRenkeiExecuteKind                 = 16,
	MonsterVehicleRideKind                   = 17,
	BlowAwayMonsterCount                     = 18,
	BattleCountBySwordAttack                 = 19,
	AcquisitionItemKind                      = 20,
	PossessionItemCount                      = 21,
	TotalAcquisitionItemCount                = 22,
	UseItemCount                             = 23,
	PossessionGold                           = 24,
	TotalAcquisitionGold                     = 25,
	AmountOfDeposit                          = 26,
	CampCount                                = 27,
	InnStayCount                             = 28,
	ObjectDestructionCount                   = 29,
	QuestClearCount                          = 30,
	AchievementCount                         = 31,
	LevelReached_P001                        = 32,
	LevelReached_P002                        = 33,
	LevelReached_P003                        = 34,
	LevelReached_P004                        = 35,
	LevelReached_P005                        = 36,
	LevelReached_P006                        = 37,
	LevelReached_P007                        = 38,
	LevelReached_P008                        = 39,
	FopperyEquip_P001                        = 40,
	FopperyEquip_P002                        = 41,
	FopperyEquip_P003                        = 42,
	FopperyEquip_P004                        = 43,
	FopperyEquip_P005                        = 44,
	FopperyEquip_P006                        = 45,
	FopperyEquip_P007                        = 46,
	FopperyEquip_P008                        = 47,
	FopperyEquip_ALL                         = 48,
	MAX                                      = 49,
};

// Enum JackGame.EJackAchievementCategory
// NumValues: 0x0008
enum class EJackAchievementCategory : uint8
{
	Scenario                                 = 0,
	Battle                                   = 1,
	Kazi                                     = 2,
	Casino                                   = 3,
	Item                                     = 4,
	Etc                                      = 5,
	All                                      = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackAchievementRarity
// NumValues: 0x0004
enum class EJackAchievementRarity : uint8
{
	Legend                                   = 0,
	Platinum                                 = 1,
	Gold                                     = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackTokugiPanelScenario
// NumValues: 0x002A
enum class EJackTokugiPanelScenario : uint8
{
	None                                     = 0,
	P001_0                                   = 1,
	P001_1                                   = 2,
	P001_2                                   = 3,
	P001_3                                   = 4,
	P001_4                                   = 5,
	P002_0                                   = 6,
	P002_1                                   = 7,
	P002_2                                   = 8,
	P002_3                                   = 9,
	P002_4                                   = 10,
	P003_0                                   = 11,
	P003_1                                   = 12,
	P003_2                                   = 13,
	P003_3                                   = 14,
	P003_4                                   = 15,
	P004_0                                   = 16,
	P004_1                                   = 17,
	P004_2                                   = 18,
	P004_3                                   = 19,
	P004_4                                   = 20,
	P005_0                                   = 21,
	P005_1                                   = 22,
	P005_2                                   = 23,
	P005_3                                   = 24,
	P005_4                                   = 25,
	P006_0                                   = 26,
	P006_1                                   = 27,
	P006_2                                   = 28,
	P006_3                                   = 29,
	P006_4                                   = 30,
	P007_0                                   = 31,
	P007_1                                   = 32,
	P007_2                                   = 33,
	P007_3                                   = 34,
	P007_4                                   = 35,
	P008_0                                   = 36,
	P008_1                                   = 37,
	P008_2                                   = 38,
	P008_3                                   = 39,
	P008_4                                   = 40,
	MAX                                      = 41,
};

// Enum JackGame.EJackSkillLine
// NumValues: 0x001C
enum class EJackSkillLine : uint8
{
	None                                     = 0,
	Ken                                      = 1,
	Ryouteken                                = 2,
	Tanken                                   = 3,
	Stick                                    = 4,
	Tue                                      = 5,
	Yari                                     = 6,
	Ono                                      = 7,
	Tume                                     = 8,
	Muti                                     = 9,
	Boomerang                                = 10,
	Kensin                                   = 11,
	Yuusya                                   = 12,
	Kamiwaza                                 = 13,
	Tategoto                                 = 14,
	Madousyo                                 = 15,
	Kyokugei                                 = 16,
	Otome                                    = 17,
	Kisidou                                  = 18,
	Satori                                   = 19,
	Kakutou                                  = 20,
	Oiroke                                   = 21,
	Eiyuu                                    = 22,
	Hakuai                                   = 23,
	Tate                                     = 24,
	YuusyaNoKen                              = 25,
	Other                                    = 26,
	MAX                                      = 27,
};

// Enum JackGame.EJackTokugiType
// NumValues: 0x0004
enum class EJackTokugiType : uint8
{
	Jumon                                    = 0,
	Active                                   = 1,
	Passive                                  = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackExchange
// NumValues: 0x0006
enum class EJackExchange : uint8
{
	Unknown                                  = 0,
	NoLimit                                  = 1,
	OnlyOne                                  = 2,
	MamonoNoLimit                            = 3,
	MamonoOnlyOne                            = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackMedal_StampPage
// NumValues: 0x0006
enum class EJackMedal_StampPage : uint8
{
	None                                     = 0,
	Page1                                    = 1,
	Page2                                    = 2,
	Page3                                    = 3,
	Page4                                    = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackMedal_Trade
// NumValues: 0x0003
enum class EJackMedal_Trade : uint8
{
	Stamp                                    = 0,
	Exchange                                 = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackTreasureBoxPlacementCondition
// NumValues: 0x0003
enum class EJackTreasureBoxPlacementCondition : uint8
{
	Initial                                  = 0,
	FlagReference                            = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackGettableCommonPurpose
// NumValues: 0x0005
enum class EJackGettableCommonPurpose : uint8
{
	BowgunTarget                             = 0,
	Etc                                      = 1,
	All                                      = 2,
	Undesignated                             = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackItem_Key
// NumValues: 0x0005
enum class EJackItem_Key : uint8
{
	None                                     = 0,
	MahouNoKagi                              = 1,
	SaigoNoKagi                              = 2,
	DerukadaruNoKagi                         = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackEquipmentMultiple
// NumValues: 0x0006
enum class EJackEquipmentMultiple : uint8
{
	Unknown                                  = 0,
	NG                                       = 1,
	OK                                       = 2,
	SameClassificationOnly                   = 3,
	DifferentClassificationOnly              = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackItem_EquipmentSE
// NumValues: 0x0006
enum class EJackItem_EquipmentSE : uint8
{
	Unknown                                  = 0,
	Mute                                     = 1,
	Default                                  = 2,
	Metal                                    = 3,
	Cloth                                    = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackItem_WeaponAttackAttribute
// NumValues: 0x000A
enum class EJackItem_WeaponAttackAttribute : uint8
{
	Unknown                                  = 0,
	Honoo                                    = 1,
	Koori                                    = 2,
	Kaze                                     = 3,
	Kaminari                                 = 4,
	Tuti                                     = 5,
	Yami                                     = 6,
	Hikari                                   = 7,
	Mu                                       = 8,
	MAX                                      = 9,
};

// Enum JackGame.EJackItem_SellType
// NumValues: 0x0006
enum class EJackItem_SellType : uint8
{
	Unknown                                  = 0,
	NG                                       = 1,
	OK                                       = 2,
	NeedConfirmation1                        = 3,
	NeedConfirmation2                        = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackItem_BagSave
// NumValues: 0x0015
enum class EJackItem_BagSave : uint8
{
	Bag_Common_P001                          = 0,
	Bag_Common_P002                          = 1,
	Bag_Common_P005                          = 2,
	Bag_Common_P006                          = 3,
	Bag_Common_P007                          = 4,
	Bag_Equipment_P001                       = 5,
	Bag_Equipment_P002                       = 6,
	Bag_Equipment_P005                       = 7,
	Bag_Equipment_P006                       = 8,
	Bag_Equipment_P007                       = 9,
	Bag_Daizinamono_P001                     = 10,
	Bag_Daizinamono_P002                     = 11,
	Bag_Daizinamono_P005                     = 12,
	Bag_Daizinamono_P006                     = 13,
	Bag_Daizinamono_P007                     = 14,
	Bag_Exchange_P001                        = 15,
	Bag_Exchange_P002                        = 16,
	Bag_Exchange_P005                        = 17,
	Bag_Exchange_P006                        = 18,
	Bag_Exchange_P007                        = 19,
	MAX                                      = 20,
};

// Enum JackGame.EJackSenreki_ItemCategory
// NumValues: 0x000A
enum class EJackSenreki_ItemCategory : uint8
{
	Unknown                                  = 0,
	Buki                                     = 1,
	Bougu                                    = 2,
	Accessory                                = 3,
	Dougu                                    = 4,
	Material                                 = 5,
	RecipeBook                               = 6,
	Daizinamono                              = 7,
	All                                      = 8,
	MAX                                      = 9,
};

// Enum JackGame.EJackNPCAttachmentType
// NumValues: 0x0005
enum class EJackNPCAttachmentType : uint8
{
	VisibleDaytimeOnly                       = 0,
	VisibleNightOnly                         = 1,
	Visible                                  = 2,
	Invisible                                = 3,
	EJackNPCAttachmentType_MAX               = 4,
};

// Enum JackGame.EJackNPCImportance
// NumValues: 0x0006
enum class EJackNPCImportance : uint8
{
	NotTalk                                  = 0,
	Normal                                   = 1,
	Quest                                    = 2,
	ScenarioGuide                            = 3,
	Nakama                                   = 4,
	EJackNPCImportance_MAX                   = 5,
};

// Enum JackGame.EJackNPCTalkGazeMode
// NumValues: 0x0007
enum class EJackNPCTalkGazeMode : uint8
{
	Turn                                     = 0,
	LookAt1Bone                              = 1,
	LookAt2Bone                              = 2,
	TurnAndLookAt1Bone                       = 3,
	TurnAndLookAt2Bone                       = 4,
	Ignore                                   = 5,
	EJackNPCTalkGazeMode_MAX                 = 6,
};

// Enum JackGame.EJackNPCTalkMode
// NumValues: 0x0005
enum class EJackNPCTalkMode : uint8
{
	NotTalk                                  = 0,
	TalkStart                                = 1,
	TalkSequence                             = 2,
	TalkEnd                                  = 3,
	EJackNPCTalkMode_MAX                     = 4,
};

// Enum JackGame.EJackNPCInterruptAccept
// NumValues: 0x0008
enum class EJackNPCInterruptAccept : uint8
{
	Talk                                     = 0,
	PlayerAvoid                              = 1,
	EscapeFastMoving                         = 2,
	ReactionAroundPlayer                     = 3,
	StopAtPlayerForTalk                      = 4,
	Ignore                                   = 5,
	Uso                                      = 6,
	EJackNPCInterruptAccept_MAX              = 7,
};

// Enum JackGame.EJackNPCReactionExternalTrigger
// NumValues: 0x0004
enum class EJackNPCReactionExternalTrigger : uint8
{
	CrushObject                              = 0,
	OpenCloset                               = 1,
	OpenTreasureBox                          = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackNPCType
// NumValues: 0x004D
enum class EJackNPCType : uint8
{
	N001                                     = 0,
	N002                                     = 1,
	N003                                     = 2,
	N004                                     = 3,
	N006                                     = 4,
	N007                                     = 5,
	N008                                     = 6,
	N009                                     = 7,
	N010                                     = 8,
	N011                                     = 9,
	N012                                     = 10,
	N013                                     = 11,
	N014                                     = 12,
	N015                                     = 13,
	N101                                     = 14,
	N102                                     = 15,
	N103                                     = 16,
	N109                                     = 17,
	N104                                     = 18,
	N105                                     = 19,
	N106                                     = 20,
	N107                                     = 21,
	N108                                     = 22,
	N201                                     = 23,
	N202                                     = 24,
	N203                                     = 25,
	N204                                     = 26,
	N205                                     = 27,
	A001                                     = 28,
	A002                                     = 29,
	A003                                     = 30,
	A004                                     = 31,
	A006                                     = 32,
	A007                                     = 33,
	A008                                     = 34,
	A013                                     = 35,
	A019                                     = 36,
	A020                                     = 37,
	A021                                     = 38,
	A023                                     = 39,
	A025                                     = 40,
	A026                                     = 41,
	A035                                     = 42,
	A036                                     = 43,
	A051                                     = 44,
	A052                                     = 45,
	M005                                     = 46,
	M014                                     = 47,
	M015                                     = 48,
	M022                                     = 49,
	M031                                     = 50,
	M034                                     = 51,
	M036                                     = 52,
	M043                                     = 53,
	M052                                     = 54,
	M057                                     = 55,
	M068                                     = 56,
	M112                                     = 57,
	M125                                     = 58,
	M152                                     = 59,
	M203                                     = 60,
	M504                                     = 61,
	M505                                     = 62,
	M515                                     = 63,
	M525                                     = 64,
	M526                                     = 65,
	M527                                     = 66,
	M530                                     = 67,
	M539                                     = 68,
	M543                                     = 69,
	M545                                     = 70,
	M548                                     = 71,
	M551                                     = 72,
	M560                                     = 73,
	M567                                     = 74,
	M572                                     = 75,
	MAX                                      = 76,
};

// Enum JackGame.EJackSheatheStatus
// NumValues: 0x0003
enum class EJackSheatheStatus : uint8
{
	Sheathe                                  = 0,
	Unsheathe                                = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackEquippedHand
// NumValues: 0x0003
enum class EJackEquippedHand : uint8
{
	Hand_L                                   = 0,
	Hand_R                                   = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackWeapon
// NumValues: 0x0002
enum class EJackWeapon : uint8
{
	None                                     = 0,
	MAX                                      = 1,
};

// Enum JackGame.EJackHitCameraShakePresetType
// NumValues: 0x0018
enum class EJackHitCameraShakePresetType : uint8
{
	None                                     = 0,
	N_SS                                     = 1,
	N_S                                      = 2,
	N_M                                      = 3,
	N_L                                      = 4,
	N_LL                                     = 5,
	SS_SS                                    = 6,
	SS_S                                     = 7,
	SS_M                                     = 8,
	SS_L                                     = 9,
	SS_LL                                    = 10,
	S_S                                      = 11,
	S_M                                      = 12,
	S_L                                      = 13,
	S_LL                                     = 14,
	M_M                                      = 15,
	M_L                                      = 16,
	M_LL                                     = 17,
	L_L                                      = 18,
	L_LL                                     = 19,
	LL_LL                                    = 20,
	UN1                                      = 21,
	UN2                                      = 22,
	MAX                                      = 23,
};

// Enum JackGame.EJackHitStopType
// NumValues: 0x0009
enum class EJackHitStopType : uint8
{
	None                                     = 0,
	SS                                       = 1,
	S                                        = 2,
	M                                        = 3,
	L                                        = 4,
	LL                                       = 5,
	UN1                                      = 6,
	UN2                                      = 7,
	MAX                                      = 8,
};

// Enum JackGame.EJackPlayerAIActionCategory
// NumValues: 0x0007
enum class EJackPlayerAIActionCategory : uint8
{
	None                                     = 0,
	Attack                                   = 1,
	Spell                                    = 2,
	Skill                                    = 3,
	Renkei                                   = 4,
	Item                                     = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackPlayerAIActionControl
// NumValues: 0x002B
enum class EJackPlayerAIActionControl : uint8
{
	None                                     = 0,
	Defense                                  = 1,
	Attack                                   = 2,
	AttackMp0                                = 3,
	AttackNormal                             = 4,
	Heal                                     = 5,
	HealMP                                   = 6,
	Revive                                   = 7,
	Cure                                     = 8,
	AttackDeath                              = 9,
	Confuse                                  = 10,
	Sleep                                    = 11,
	SkipTurn                                 = 12,
	Bewitching                               = 13,
	Charm                                    = 14,
	SurvivalHp1                              = 15,
	Zone                                     = 16,
	Counter                                  = 17,
	LadyFirst                                = 18,
	IceWave                                  = 19,
	Steal                                    = 20,
	Nioudati                                 = 21,
	Kabau                                    = 22,
	RunawayRateUp                            = 23,
	Doku                                     = 24,
	Mahoton                                  = 25,
	Megazaru                                 = 26,
	Asutoron                                 = 27,
	Mahokanta                                = 28,
	Zibaria                                  = 29,
	DefenseUp                                = 30,
	DefenseDown                              = 31,
	AttackUp                                 = 32,
	AttackDown                               = 33,
	SpeedUp                                  = 34,
	SpeedDown                                = 35,
	SpellResistUp                            = 36,
	SpellResistDown                          = 37,
	AttackSpellUp                            = 38,
	HealSpellUp                              = 39,
	BlessResistUp                            = 40,
	AttributeUp                              = 41,
	MAX                                      = 42,
};

// Enum JackGame.EJackPlayerAIFlowControl
// NumValues: 0x0006
enum class EJackPlayerAIFlowControl : uint8
{
	None                                     = 0,
	Action                                   = 1,
	Add                                      = 2,
	Select                                   = 3,
	End                                      = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackPlayerAIFlowJudge
// NumValues: 0x0038
enum class EJackPlayerAIFlowJudge : uint8
{
	AlwaysTrue                               = 0,
	CaseP001                                 = 1,
	CaseP002                                 = 2,
	CaseP003                                 = 3,
	CaseP004                                 = 4,
	CaseP005                                 = 5,
	CaseP006                                 = 6,
	CaseP007                                 = 7,
	CaseP008                                 = 8,
	EventBattle                              = 9,
	MonsterM716_E001_S01                     = 10,
	MonsterM601_E001_S01                     = 11,
	MonsterM602_E001_S01                     = 12,
	MonsterM603_E001_S01                     = 13,
	MonsterM605_E001_S01                     = 14,
	MonsterM606_E001_S01                     = 15,
	MonsterM607_E001_S01                     = 16,
	MonsterM611_E001_S01                     = 17,
	MonsterM615_E001_S01                     = 18,
	MonsterM616_E001_S01                     = 19,
	PlayerDeadNum                            = 20,
	Dying10Percent                           = 21,
	Dying20Percent                           = 22,
	Dying30Percent                           = 23,
	Dying40Percent                           = 24,
	Dying50Percent                           = 25,
	Dying60Percent                           = 26,
	Dying70Percent                           = 27,
	Dying80Percent                           = 28,
	Dying90Percent                           = 29,
	AbnormalVarious                          = 30,
	AbnormalDazzle                           = 31,
	AbnormalPoison                           = 32,
	AbnormalVenom                            = 33,
	EnemyWeak                                = 34,
	EnemyWeakMaybe                           = 35,
	EnemyMany                                = 36,
	EnemyStrong                              = 37,
	EnemyVeryStrong                          = 38,
	EnemyMetalExist                          = 39,
	EnableFubaha                             = 40,
	EnableMahoton                            = 41,
	EnableManusa                             = 42,
	EnableRukani                             = 43,
	EnableMagicbarrier                       = 44,
	EnableBikiruto                           = 45,
	EnableHenatosu                           = 46,
	EnableStrengthenSpell                    = 47,
	EnableGiveAttribute                      = 48,
	EnableIceWave                            = 49,
	CheckBougyo                              = 50,
	CheckSukara                              = 51,
	CheckUseIceWave                          = 52,
	UseMegazaru                              = 53,
	Can50EnemyAct                            = 54,
	MAX                                      = 55,
};

// Enum JackGame.EJackNusumuResultType
// NumValues: 0x0005
enum class EJackNusumuResultType : uint8
{
	Failure                                  = 0,
	Success                                  = 1,
	Nothing                                  = 2,
	RemainingRare                            = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackBattleFirstCameraTarget
// NumValues: 0x0004
enum class EJackBattleFirstCameraTarget : uint8
{
	EnemyGroup                               = 0,
	FieldCenter                              = 1,
	EnemyCenter                              = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMatineeRenkeiMonsterSize
// NumValues: 0x0010
enum class EJackMatineeRenkeiMonsterSize : uint8
{
	S                                        = 0,
	M                                        = 1,
	L                                        = 2,
	SP01                                     = 3,
	SP02                                     = 4,
	SP03                                     = 5,
	SP04                                     = 6,
	SP05                                     = 7,
	SP06                                     = 8,
	SP07                                     = 9,
	SP08                                     = 10,
	SP09                                     = 11,
	SP10                                     = 12,
	SP11                                     = 13,
	SP12                                     = 14,
	MAX                                      = 15,
};

// Enum JackGame.EJackBattleRenkeiFormationGroupDirection
// NumValues: 0x0003
enum class EJackBattleRenkeiFormationGroupDirection : uint8
{
	FieldCenter                              = 0,
	GroupCenter                              = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackBattleRenkeiFormationDirection
// NumValues: 0x0006
enum class EJackBattleRenkeiFormationDirection : uint8
{
	Target                                   = 0,
	TargetGroup                              = 1,
	FieldCenter                              = 2,
	Alignment                                = 3,
	VirtualTargetLocation                    = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackBattleRenkeiTiming
// NumValues: 0x0007
enum class EJackBattleRenkeiTiming : uint8
{
	RenkeiStart                              = 0,
	RenkeiEnd                                = 1,
	ActionStart                              = 2,
	ActionEnd                                = 3,
	ActionHit                                = 4,
	ActionHitEnd                             = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackBattleGroupConditionsBack
// NumValues: 0x0004
enum class EJackBattleGroupConditionsBack : uint8
{
	Troop                                    = 0,
	Group                                    = 1,
	InitialPosition                          = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackBattleTurnDirection
// NumValues: 0x0008
enum class EJackBattleTurnDirection : uint8
{
	None                                     = 0,
	GroupAngle                               = 1,
	TroopAngle                               = 2,
	OpponentTroop                            = 3,
	Target                                   = 4,
	Enemy                                    = 5,
	GoodVibes                                = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackBattleGroupAlignmentSequence
// NumValues: 0x0005
enum class EJackBattleGroupAlignmentSequence : uint8
{
	None                                     = 0,
	SizeRatio                                = 1,
	SizeRatioMultiplier                      = 2,
	SizeRatioAndDummy                        = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackBattleMoveGroup
// NumValues: 0x0004
enum class EJackBattleMoveGroup : uint8
{
	None                                     = 0,
	Player                                   = 1,
	AvoidancePlayer                          = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackBattleFreeMoveType
// NumValues: 0x0004
enum class EJackBattleFreeMoveType : uint8
{
	None                                     = 0,
	FreeMove                                 = 1,
	ReturnToOriginLocation                   = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackOddEffectParameterDisplayType
// NumValues: 0x0004
enum class EJackOddEffectParameterDisplayType : uint8
{
	None                                     = 0,
	Default                                  = 1,
	Percent                                  = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackOddEffectTuyosaDisplayType
// NumValues: 0x0004
enum class EJackOddEffectTuyosaDisplayType : uint8
{
	None                                     = 0,
	Kobetu                                   = 1,
	Gassan                                   = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackActionDamageKnockBackStatus
// NumValues: 0x0004
enum class EJackActionDamageKnockBackStatus : uint8
{
	DamageSS                                 = 0,
	DamageS                                  = 1,
	Blow                                     = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackActionDamageBlowState
// NumValues: 0x0005
enum class EJackActionDamageBlowState : uint8
{
	Small                                    = 0,
	Normal                                   = 1,
	Big                                      = 2,
	None                                     = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackReviveRequestType
// NumValues: 0x0005
enum class EJackReviveRequestType : uint8
{
	None                                     = 0,
	NormalRevive                             = 1,
	TensiRevive                              = 2,
	BunnyRevive                              = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackDeadRequestType
// NumValues: 0x0005
enum class EJackDeadRequestType : uint8
{
	None                                     = 0,
	NormalDead                               = 1,
	SelfDead                                 = 2,
	CoverDead                                = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackBattleABPFlag
// NumValues: 0x0006
enum class EJackBattleABPFlag : uint8
{
	None                                     = 0,
	SkipAnimOpenWeapon                       = 1,
	EquipChange                              = 2,
	EquipChangeFlip                          = 3,
	WeaponStyleChange                        = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackBattleABPState
// NumValues: 0x0007
enum class EJackBattleABPState : uint8
{
	None                                     = 0,
	Unsheathe                                = 1,
	Sheathe                                  = 2,
	Idle                                     = 3,
	BougyoStart                              = 4,
	BougyoIdle                               = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackBattleMemberChangeType
// NumValues: 0x0004
enum class EJackBattleMemberChangeType : uint8
{
	Turn                                     = 0,
	BattleStartMenu                          = 1,
	Zenmetu                                  = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackBattlePrgCameraRect
// NumValues: 0x0006
enum class EJackBattlePrgCameraRect : uint8
{
	None                                     = 0,
	Face                                     = 1,
	Body                                     = 2,
	Motion                                   = 3,
	Low                                      = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackEventBattleAppearLine
// NumValues: 0x0004
enum class EJackEventBattleAppearLine : uint8
{
	Default                                  = 0,
	Line_75312468                            = 1,
	Line_12345678                            = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackBattleNigeruConditionType
// NumValues: 0x0004
enum class EJackBattleNigeruConditionType : uint8
{
	Default                                  = 0,
	Invalid                                  = 1,
	AlwaysSuccess                            = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackEventBattleRaidState
// NumValues: 0x0005
enum class EJackEventBattleRaidState : uint8
{
	None                                     = 0,
	Monster                                  = 1,
	Player                                   = 2,
	Normal                                   = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackNakamaYobiSpawnLocationType
// NumValues: 0x0005
enum class EJackNakamaYobiSpawnLocationType : uint8
{
	None                                     = 0,
	Caster                                   = 1,
	BattleFieldCenter                        = 2,
	Group                                    = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackHP1NokoriType
// NumValues: 0x0004
enum class EJackHP1NokoriType : uint8
{
	None                                     = 0,
	Seijonomamori                            = 1,
	Megaminosyukufuku                        = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackKonranKoudouType
// NumValues: 0x0005
enum class EJackKonranKoudouType : uint8
{
	NanimoSinai                              = 0,
	KougekiEnemy                             = 1,
	KougekiSelf                              = 2,
	KougekiFriend                            = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackBattleMessageCompactSubType
// NumValues: 0x0008
enum class EJackBattleMessageCompactSubType : uint8
{
	None                                     = 0,
	Nioudati                                 = 1,
	Kabau                                    = 2,
	Mahokanta                                = 3,
	Ukenagasi                                = 4,
	Morobagiri                               = 5,
	Yaibanoyoroi                             = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackBattleMessageCompactType
// NumValues: 0x001F
enum class EJackBattleMessageCompactType : uint8
{
	None                                     = 0,
	HPDamage                                 = 1,
	HPHeal                                   = 2,
	MPDamage                                 = 3,
	MPHeal                                   = 4,
	HPMPHeal                                 = 5,
	DamageMiss                               = 6,
	TaiseiDamageMiss                         = 7,
	KoudouMukou                              = 8,
	OddEffectSet                             = 9,
	OddEffectOverlap                         = 10,
	OddEffectClear                           = 11,
	OddEffectMiss                            = 12,
	Dead                                     = 13,
	SlideUp                                  = 14,
	SlideDown                                = 15,
	SlideKeepUp                              = 16,
	SlideKeepDown                            = 17,
	SlideClear                               = 18,
	SlideMiss                                = 19,
	SindoLimit                               = 20,
	SindoKeep                                = 21,
	Critical                                 = 22,
	HazukasiiNoroi                           = 23,
	Zibaria                                  = 24,
	Nakamayobi                               = 25,
	StackAll                                 = 26,
	BluePrint                                = 27,
	JumonHansya                              = 28,
	OddEffectMukou                           = 29,
	MAX                                      = 30,
};

// Enum JackGame.EJackBattleMessageNoun
// NumValues: 0x0004
enum class EJackBattleMessageNoun : uint8
{
	None                                     = 0,
	Player                                   = 1,
	Monster                                  = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackActionFieldTextType
// NumValues: 0x000A
enum class EJackActionFieldTextType : uint8
{
	None                                     = 0,
	Koudou                                   = 1,
	Yuukou                                   = 2,
	YuukouMultiple                           = 3,
	YuukouOdd                                = 4,
	YuukouHpOdd                              = 5,
	Sippai                                   = 6,
	Mukou                                    = 7,
	YuukouHakai                              = 8,
	MAX                                      = 9,
};

// Enum JackGame.EJackActionMessageCategory
// NumValues: 0x0005
enum class EJackActionMessageCategory : uint8
{
	None                                     = 0,
	Default                                  = 1,
	Koudou                                   = 2,
	Hit                                      = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackActionSoundType
// NumValues: 0x0004
enum class EJackActionSoundType : uint8
{
	None                                     = 0,
	Kougeki                                  = 1,
	Jumon                                    = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackActionMonsterRaceTokkouType
// NumValues: 0x0004
enum class EJackActionMonsterRaceTokkouType : uint8
{
	None                                     = 0,
	ActionAndWeapon                          = 1,
	ActionOnly                               = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackActionTuikaKoukaType
// NumValues: 0x0004
enum class EJackActionTuikaKoukaType : uint8
{
	None                                     = 0,
	First                                    = 1,
	All                                      = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackActionCriticalType
// NumValues: 0x0008
enum class EJackActionCriticalType : uint8
{
	None                                     = 0,
	KougekiTantai                            = 1,
	KougekiHani                              = 2,
	JumonTokugi                              = 3,
	LargeDamage                              = 4,
	Kaifuku                                  = 5,
	YuukouKakuritu                           = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackActionKyuusyuuType
// NumValues: 0x0004
enum class EJackActionKyuusyuuType : uint8
{
	None                                     = 0,
	HP                                       = 1,
	MP                                       = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackActionDamageCalcType
// NumValues: 0x000F
enum class EJackActionDamageCalcType : uint8
{
	None                                     = 0,
	Kougeki                                  = 1,
	Standard                                 = 2,
	StandardPer                              = 3,
	StandardCurrentPer                       = 4,
	StandardHeal                             = 5,
	StandardHealPer                          = 6,
	Boo                                      = 7,
	Mahotora                                 = 8,
	HPPasser                                 = 9,
	Madante                                  = 10,
	CrossMadante                             = 11,
	ReverseDamage                            = 12,
	GoldShower                               = 13,
	MAX                                      = 14,
};

// Enum JackGame.EJackActionDamageType
// NumValues: 0x0008
enum class EJackActionDamageType : uint8
{
	None                                     = 0,
	DamageHP                                 = 1,
	DamageMP                                 = 2,
	HealHP                                   = 3,
	HealMP                                   = 4,
	Revive                                   = 5,
	ReviveHeal                               = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackDamageType
// NumValues: 0x0005
enum class EJackDamageType : uint8
{
	Normal                                   = 0,
	Critical                                 = 1,
	Guard                                    = 2,
	Miss                                     = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackActionEffectBehaviorType
// NumValues: 0x0006
enum class EJackActionEffectBehaviorType : uint8
{
	None                                     = 0,
	BurstAroundSelf                          = 1,
	BurstAroundTarget                        = 2,
	Projectile                               = 3,
	PenetratingProjectile                    = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackActionConsumeCondition
// NumValues: 0x000F
enum class EJackActionConsumeCondition : uint8
{
	None                                     = 0,
	Always                                   = 1,
	HealHP                                   = 2,
	HealMP                                   = 3,
	Revive                                   = 4,
	Alive                                    = 5,
	ClearDoku                                = 6,
	ClearMahi                                = 7,
	ClearKonran                              = 8,
	ClearNemuri                              = 9,
	ClearNoroi                               = 10,
	ClearGenwaku                             = 11,
	ClearMiryou                              = 12,
	InvokeZone                               = 13,
	MAX                                      = 14,
};

// Enum JackGame.EJackActionTargetListType
// NumValues: 0x0006
enum class EJackActionTargetListType : uint8
{
	None                                     = 0,
	Enemy                                    = 1,
	Friend                                   = 2,
	FriendRevive                             = 3,
	All                                      = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackActionTargetLayerType
// NumValues: 0x0004
enum class EJackActionTargetLayerType : uint8
{
	None                                     = 0,
	First                                    = 1,
	Second                                   = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackActionHitOrderType
// NumValues: 0x000F
enum class EJackActionHitOrderType : uint8
{
	None                                     = 0,
	Auto                                     = 1,
	NearCaster                               = 2,
	NearTarget                               = 3,
	FarCaster                                = 4,
	FarTarget                                = 5,
	Clockwise                                = 6,
	Counterclockwise                         = 7,
	LeftToRight                              = 8,
	RightToLeft                              = 9,
	BackToFront                              = 10,
	FrontToBack                              = 11,
	Random                                   = 12,
	RandomUniqueHit                          = 13,
	MAX                                      = 14,
};

// Enum JackGame.EJackActionExtentType
// NumValues: 0x000F
enum class EJackActionExtentType : uint8
{
	None                                     = 0,
	Single                                   = 1,
	Group                                    = 2,
	All                                      = 3,
	AllWithStandby                           = 4,
	AllWithStandbyWithoutSelf                = 5,
	AllWithoutFirstTarget                    = 6,
	Sphere                                   = 7,
	Capsule                                  = 8,
	Box                                      = 9,
	Fan                                      = 10,
	NumberByAliveOnly                        = 11,
	SingleWithParts                          = 12,
	SinglePartsOnly                          = 13,
	MAX                                      = 14,
};

// Enum JackGame.EJackActionExtentTargetType
// NumValues: 0x0005
enum class EJackActionExtentTargetType : uint8
{
	None                                     = 0,
	Self                                     = 1,
	Single                                   = 2,
	WithoutSelf                              = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackActionTargetType
// NumValues: 0x0006
enum class EJackActionTargetType : uint8
{
	None                                     = 0,
	Friend                                   = 1,
	Foe                                      = 2,
	All                                      = 3,
	AllWithoutSelf                           = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackActionModuleType
// NumValues: 0x0023
enum class EJackActionModuleType : uint8
{
	None                                     = 0,
	Damage                                   = 1,
	DamageMP                                 = 2,
	Recover                                  = 3,
	RecoverMP                                = 4,
	Revive                                   = 5,
	HPPasser                                 = 6,
	SetOddEffect                             = 7,
	ClearOddEffect                           = 8,
	InvokeOddEffect                          = 9,
	Mikawasi                                 = 10,
	TateGuard                                = 11,
	BukiGuard                                = 12,
	DamageKanzenGuard                        = 13,
	ButuriKanzenGuard                        = 14,
	KaisinKanzenGuard                        = 15,
	ImmediatelyCounter                       = 16,
	PoisonDamage                             = 17,
	Yasumi                                   = 18,
	Nigeru                                   = 19,
	Muda                                     = 20,
	NakamaYobi                               = 21,
	Nusumu                                   = 22,
	Zibaria                                  = 23,
	AutoRecover                              = 24,
	AutoRecoverMP                            = 25,
	MPZero                                   = 26,
	ActionExecDependent                      = 27,
	HandouDamage                             = 28,
	MeganteSokusi                            = 29,
	HP1Nokori                                = 30,
	SokusiMukou                              = 31,
	Voice                                    = 32,
	Invalid                                  = 33,
	MAX                                      = 34,
};

// Enum JackGame.EJackCalcDamageOperator
// NumValues: 0x0003
enum class EJackCalcDamageOperator : uint8
{
	Mul                                      = 0,
	Add                                      = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackBattleIntelligenceType
// NumValues: 0x0005
enum class EJackBattleIntelligenceType : uint8
{
	None                                     = 0,
	Baka                                     = 1,
	Ningen                                   = 2,
	Kami                                     = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackRotationProcessType
// NumValues: 0x0005
enum class EJackRotationProcessType : uint8
{
	None                                     = 0,
	Linear                                   = 1,
	Smooth                                   = 2,
	Time                                     = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackRotationLayer
// NumValues: 0x0007
enum class EJackRotationLayer : uint8
{
	None                                     = 0,
	Move                                     = 1,
	BattleAIStateMove                        = 2,
	ActionAssistMove                         = 3,
	AnimNotify                               = 4,
	Damage                                   = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackMonsterBattleStyle
// NumValues: 0x0006
enum class EJackMonsterBattleStyle : uint8
{
	None                                     = 0,
	Ten                                      = 1,
	Chi                                      = 2,
	Ryu                                      = 3,
	Dying                                    = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackMonsterSibariParameterTarget
// NumValues: 0x000A
enum class EJackMonsterSibariParameterTarget : uint8
{
	None                                     = 0,
	HP                                       = 1,
	MP                                       = 2,
	Kougekiryoku                             = 3,
	Syubiryoku                               = 4,
	Subayasa                                 = 5,
	Kiyousa                                  = 6,
	InitialZonePointMin                      = 7,
	InitialZonePointMax                      = 8,
	MAX                                      = 9,
};

// Enum JackGame.EJackMonsterSibariParameterOperator
// NumValues: 0x0005
enum class EJackMonsterSibariParameterOperator : uint8
{
	None                                     = 0,
	Add                                      = 1,
	Mul                                      = 2,
	Overwrite                                = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackMonsterTextType
// NumValues: 0x0003
enum class EJackMonsterTextType : uint8
{
	None                                     = 0,
	DisplayName                              = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackMonsterMoveDir
// NumValues: 0x0005
enum class EJackMonsterMoveDir : uint8
{
	NearWalk                                 = 0,
	NearRun                                  = 1,
	FarWalk                                  = 2,
	FarRun                                   = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackMonsterMovement
// NumValues: 0x0008
enum class EJackMonsterMovement : uint8
{
	None                                     = 0,
	Move                                     = 1,
	Anim                                     = 2,
	Effect                                   = 3,
	Wait                                     = 4,
	Trun                                     = 5,
	Spread                                   = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackMonsterRelationship
// NumValues: 0x0004
enum class EJackMonsterRelationship : uint8
{
	Strong                                   = 0,
	Weak                                     = 1,
	Amazing                                  = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMonsterState
// NumValues: 0x0008
enum class EJackMonsterState : uint8
{
	None                                     = 0,
	RunAway                                  = 1,
	Tracking                                 = 2,
	Idle                                     = 3,
	Battle                                   = 4,
	Rush                                     = 5,
	Eco                                      = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackMonsterTarget
// NumValues: 0x0011
enum class EJackMonsterTarget : uint8
{
	None                                     = 0,
	Player                                   = 1,
	Group                                    = 2,
	Other                                    = 3,
	EcoPoint                                 = 4,
	Periphery                                = 5,
	PopLoc                                   = 6,
	WeakStop                                 = 7,
	WeakRunaway                              = 8,
	StrongChase                              = 9,
	StrongRush                               = 10,
	Leader                                   = 11,
	StrongMonster                            = 12,
	WeakMonster                              = 13,
	AmazingMonster                           = 14,
	EscapeMonster                            = 15,
	MAX                                      = 16,
};

// Enum JackGame.EJackMonsterTerms
// NumValues: 0x000F
enum class EJackMonsterTerms : uint8
{
	Time                                     = 0,
	Near                                     = 1,
	Far                                      = 2,
	InSight                                  = 3,
	Attacked                                 = 4,
	None                                     = 5,
	Battle                                   = 6,
	BattleEnd                                = 7,
	OutOfSight                               = 8,
	Terminate                                = 9,
	Active                                   = 10,
	Lounched                                 = 11,
	TerminateRandom                          = 12,
	Transmitted                              = 13,
	MAX                                      = 14,
};

// Enum JackGame.EJackMonsterTransmittedInfo
// NumValues: 0x0003
enum class EJackMonsterTransmittedInfo : uint8
{
	FindPlayer                               = 0,
	Bark                                     = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackMonsterPartyType
// NumValues: 0x0006
enum class EJackMonsterPartyType : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Special                                  = 2,
	Metal                                    = 3,
	Reincarnation                            = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackMonsterBodyAttribute
// NumValues: 0x0006
enum class EJackMonsterBodyAttribute : uint8
{
	Monolithic                               = 0,
	Body                                     = 1,
	Parts                                    = 2,
	NoEntityParts                            = 3,
	ShadowCopy                               = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackMonsterBowgunResonse
// NumValues: 0x0004
enum class EJackMonsterBowgunResonse : uint8
{
	Angry                                    = 0,
	Notice                                   = 1,
	Ignore                                   = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMonsterMovementStrong
// NumValues: 0x0004
enum class EJackMonsterMovementStrong : uint8
{
	Chase                                    = 0,
	Rush                                     = 1,
	Ignore                                   = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMonsterMovementWeak
// NumValues: 0x0004
enum class EJackMonsterMovementWeak : uint8
{
	Stop                                     = 0,
	Runaway                                  = 1,
	Ignore                                   = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackMonsterSearchType
// NumValues: 0x0005
enum class EJackMonsterSearchType : uint8
{
	None                                     = 0,
	EyeSight                                 = 1,
	Hearing                                  = 2,
	ESP                                      = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackMonsterMoveSpeed
// NumValues: 0x000B
enum class EJackMonsterMoveSpeed : uint8
{
	SuperSlow                                = 0,
	VerySlow                                 = 1,
	Slow                                     = 2,
	SlightlySlow                             = 3,
	Normal                                   = 4,
	SlightlyFast                             = 5,
	Fast                                     = 6,
	VeryFast                                 = 7,
	SuperFast                                = 8,
	Original                                 = 9,
	MAX                                      = 10,
};

// Enum JackGame.EJackMonsterMoveMethod
// NumValues: 0x0003
enum class EJackMonsterMoveMethod : uint8
{
	Walk                                     = 0,
	Teleportaion                             = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackMonsterMoveType
// NumValues: 0x0003
enum class EJackMonsterMoveType : uint8
{
	Stop                                     = 0,
	Move                                     = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackMonsterPopManagerUpdatePurpose
// NumValues: 0x0007
enum class EJackMonsterPopManagerUpdatePurpose : uint8
{
	Battle                                   = 0,
	Debug                                    = 1,
	CategoryHidden_A                         = 2,
	CategoryHidden_M                         = 3,
	CutScene                                 = 4,
	AllDead                                  = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackMonsterRace
// NumValues: 0x000E
enum class EJackMonsterRace : uint8
{
	None                                     = 0,
	Slime                                    = 1,
	Dragon                                   = 2,
	Akuma                                    = 3,
	Bussitu                                  = 4,
	Zombie                                   = 5,
	Element                                  = 6,
	Kaizin                                   = 7,
	Machine                                  = 8,
	Tori                                     = 9,
	Sizen                                    = 10,
	Kemono                                   = 11,
	Maou                                     = 12,
	MAX                                      = 13,
};

// Enum JackGame.EJackCharacterSaveGold
// NumValues: 0x0006
enum class EJackCharacterSaveGold : uint8
{
	P001                                     = 0,
	P002                                     = 1,
	P005                                     = 2,
	P006                                     = 3,
	P007                                     = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackTwoLapReturnSave
// NumValues: 0x0003
enum class EJackTwoLapReturnSave : uint8
{
	A180                                     = 0,
	B170                                     = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackUmayobiNoBeruFailPurpose
// NumValues: 0x0004
enum class EJackUmayobiNoBeruFailPurpose : uint8
{
	FailSenario                              = 0,
	FailArea                                 = 1,
	FailStrangePower                         = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackRuraFailPurpose
// NumValues: 0x0002
enum class EJackRuraFailPurpose : uint8
{
	Level                                    = 0,
	MAX                                      = 1,
};

// Enum JackGame.EJackRuraFail
// NumValues: 0x000C
enum class EJackRuraFail : uint8
{
	None                                     = 0,
	RiremitoNone                             = 1,
	RuraRiremitoNone                         = 2,
	RideVehicle                              = 3,
	CannotUseArea                            = 4,
	StrangePower                             = 5,
	StrangePowerRiremito                     = 6,
	Ceil                                     = 7,
	LowCeil                                  = 8,
	ForceNone                                = 9,
	ForceRuraRiremitoNone                    = 10,
	MAX                                      = 11,
};

// Enum JackGame.EJackAnimSMGraphPurpose
// NumValues: 0x0003
enum class EJackAnimSMGraphPurpose : uint8
{
	Default                                  = 0,
	Additive                                 = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackCharacterRecover
// NumValues: 0x0004
enum class EJackCharacterRecover : uint8
{
	Full                                     = 0,
	HP                                       = 1,
	MP                                       = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackCharacterMugenPurpose
// NumValues: 0x0005
enum class EJackCharacterMugenPurpose : uint8
{
	System                                   = 0,
	Character                                = 1,
	OddEffect                                = 2,
	Debug                                    = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackCharacterAutoLookAtPurpose
// NumValues: 0x0007
enum class EJackCharacterAutoLookAtPurpose : uint8
{
	Normal                                   = 0,
	Parade                                   = 1,
	Gimmick                                  = 2,
	AfterMapJump                             = 3,
	AnimNotifyState                          = 4,
	PhotoMode                                = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackCharacterFootstepType
// NumValues: 0x0007
enum class EJackCharacterFootstepType : uint8
{
	Walk                                     = 0,
	Run                                      = 1,
	Dash                                     = 2,
	Landing                                  = 3,
	Sliding                                  = 4,
	Rain                                     = 5,
	MAX                                      = 6,
};

// Enum JackGame.EJackGuestNpcHiddenPurpose
// NumValues: 0x0010
enum class EJackGuestNpcHiddenPurpose : uint8
{
	Hidden                                   = 0,
	Battle                                   = 1,
	PartyTalk                                = 2,
	Vehicle                                  = 3,
	Ship                                     = 4,
	Whale                                    = 5,
	Ruler                                    = 6,
	Button                                   = 7,
	CutScene                                 = 8,
	Level                                    = 9,
	InDoor                                   = 10,
	Fish                                     = 11,
	Map                                      = 12,
	Teleport                                 = 13,
	Cheat                                    = 14,
	MAX                                      = 15,
};

// Enum JackGame.EJackCharacterRootMotionPurpose
// NumValues: 0x0003
enum class EJackCharacterRootMotionPurpose : uint8
{
	AutoNavigation                           = 0,
	NoFloorSlip                              = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackCharacterConstrainedOnNavMeshPurpose
// NumValues: 0x0005
enum class EJackCharacterConstrainedOnNavMeshPurpose : uint8
{
	Battle                                   = 0,
	DuringMove                               = 1,
	PushOut                                  = 2,
	DebugCommand                             = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackCharacterMovementAnimationPlayRatePurpose
// NumValues: 0x0004
enum class EJackCharacterMovementAnimationPlayRatePurpose : uint8
{
	Battle                                   = 0,
	Follow                                   = 1,
	DebugCommand                             = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackCharacterMaxMoveSpeedPurpose
// NumValues: 0x0005
enum class EJackCharacterMaxMoveSpeedPurpose : uint8
{
	Controller                               = 0,
	ActionExecutor                           = 1,
	DebugCommand                             = 2,
	Dash                                     = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackCharacterMovementMaxSpeed
// NumValues: 0x0004
enum class EJackCharacterMovementMaxSpeed : uint8
{
	NoLimit                                  = 0,
	Run                                      = 1,
	Walk                                     = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackCharacterMovementMaxSpeedPurpose
// NumValues: 0x0004
enum class EJackCharacterMovementMaxSpeedPurpose : uint8
{
	LVD                                      = 0,
	PlayableMovementDefault                  = 1,
	Debug                                    = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackAnimInstanceControlCategory
// NumValues: 0x0006
enum class EJackAnimInstanceControlCategory : uint8
{
	MenuHUD                                  = 0,
	ActionCursor                             = 1,
	ZeroDeltaSeconds                         = 2,
	DashRunCollide                           = 3,
	ActionGuideHelp                          = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackFacialControlDisablePurpose
// NumValues: 0x0004
enum class EJackFacialControlDisablePurpose : uint8
{
	LOD                                      = 0,
	Renkei                                   = 1,
	NoAnimation                              = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackFacialControlPurpose
// NumValues: 0x0002
enum class EJackFacialControlPurpose : uint8
{
	CutScene                                 = 0,
	MAX                                      = 1,
};

// Enum JackGame.EJackFootIKControlPurpose
// NumValues: 0x000B
enum class EJackFootIKControlPurpose : uint8
{
	CutScene                                 = 0,
	LOD                                      = 1,
	Gimmick                                  = 2,
	AnimInstance                             = 3,
	BattleAction                             = 4,
	BattleActionAttach                       = 5,
	AnimNotifyState                          = 6,
	VehicleRide                              = 7,
	Reduction                                = 8,
	NPCSystem                                = 9,
	MAX                                      = 10,
};

// Enum JackGame.EJackTickComponentDisabledPurpose
// NumValues: 0x000A
enum class EJackTickComponentDisabledPurpose : uint8
{
	CutScene                                 = 0,
	LoadReduction                            = 1,
	NPCSystem                                = 2,
	Attach                                   = 3,
	MenuHUD                                  = 4,
	MonsterAI                                = 5,
	Battle                                   = 6,
	GestNPC                                  = 7,
	DebugCommand                             = 8,
	MAX                                      = 9,
};

// Enum JackGame.EJackParticleSystemControl
// NumValues: 0x0004
enum class EJackParticleSystemControl : uint8
{
	Character                                = 0,
	WeaponSystem                             = 1,
	PropSystem                               = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackFriendCharacterQueryFilter
// NumValues: 0x0004
enum class EJackFriendCharacterQueryFilter : uint8
{
	FriendsWithMenuDisp                      = 0,
	FriendsWithoutLeaving                    = 1,
	Friends                                  = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackPlayerController
// NumValues: 0x0004
enum class EJackPlayerController : uint8
{
	Player1                                  = 0,
	Player2                                  = 1,
	Battle                                   = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackCollisionProfile
// NumValues: 0x0002
enum class EJackCollisionProfile : uint8
{
	Pawn                                     = 0,
	MAX                                      = 1,
};

// Enum JackGame.EJackDressupCoordinateLockReason
// NumValues: 0x0005
enum class EJackDressupCoordinateLockReason : uint8
{
	Level                                    = 0,
	Noroi                                    = 1,
	Vehicle                                  = 2,
	None                                     = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackCharacterScope
// NumValues: 0x0008
enum class EJackCharacterScope : uint8
{
	None                                     = 0,
	All                                      = 1,
	Players                                  = 2,
	Friends                                  = 3,
	Monsters                                 = 4,
	NPCs                                     = 5,
	Vehicles                                 = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackCharacterEffectSizeLayer
// NumValues: 0x0004
enum class EJackCharacterEffectSizeLayer : uint8
{
	Default                                  = 0,
	ActionCast                               = 1,
	ActionEffect                             = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackCharacterEffectSize
// NumValues: 0x0006
enum class EJackCharacterEffectSize : uint8
{
	Human                                    = 0,
	S                                        = 1,
	M                                        = 2,
	L                                        = 3,
	LL                                       = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackOddEffectParam
// NumValues: 0x0004
enum class EJackOddEffectParam : uint8
{
	None                                     = 0,
	Kougekiryoku                             = 1,
	Syubiryoku                               = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackReferenceParamTarget
// NumValues: 0x0004
enum class EJackReferenceParamTarget : uint8
{
	None                                     = 0,
	CasterCharacter                          = 1,
	TargetCharacter                          = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackReferenceParam
// NumValues: 0x001E
enum class EJackReferenceParam : uint8
{
	None                                     = 0,
	MaxHP                                    = 1,
	MaxMP                                    = 2,
	HP                                       = 3,
	MP                                       = 4,
	Tikara                                   = 5,
	Subayasa                                 = 6,
	Minomamori                               = 7,
	Kiyousa                                  = 8,
	Miryoku                                  = 9,
	Kougekiryoku                             = 10,
	Syubiryoku                               = 11,
	KougekiMaryoku                           = 12,
	KaifukuMaryoku                           = 13,
	TakaihounoMaryoku                        = 14,
	Omosa                                    = 15,
	CriticalRate                             = 16,
	MPKyuuSyuuRate                           = 17,
	TateGuardRate                            = 18,
	BukiGuardRate                            = 19,
	MikawasiRate                             = 20,
	ZibariaDamage                            = 21,
	RefAutoKaifuku                           = 22,
	Level                                    = 23,
	RenkeiTikara                             = 24,
	RenkeiKougekiryoku                       = 25,
	RenkeiKougekiMaryoku                     = 26,
	RenkeiLevel                              = 27,
	Special                                  = 28,
	MAX                                      = 29,
};

// Enum JackGame.EJackAttributeParam
// NumValues: 0x002B
enum class EJackAttributeParam : uint8
{
	None                                     = 0,
	Honoo                                    = 1,
	Koori                                    = 2,
	Kaze                                     = 3,
	Kaminari                                 = 4,
	Tuti                                     = 5,
	Yami                                     = 6,
	Hikari                                   = 7,
	Doku                                     = 8,
	Nemuri                                   = 9,
	Konran                                   = 10,
	Mahi                                     = 11,
	Sokusi                                   = 12,
	Miryou                                   = 13,
	Genwaku                                  = 14,
	Noroi                                    = 15,
	Nifuramu                                 = 16,
	Kyuusyuu                                 = 17,
	Guntai                                   = 18,
	Mitoreru                                 = 19,
	HPWariaiDamage                           = 20,
	Fuuin_Jumon                              = 21,
	Fuuin_Tokugi                             = 22,
	Obie                                     = 23,
	Korobi                                   = 24,
	PafuPafu                                 = 25,
	Warai                                    = 26,
	Odori                                    = 27,
	KougekiryokuDown                         = 28,
	SyubiryokuDown                           = 29,
	KougekiJumonDown                         = 30,
	KaifukuJumonDown                         = 31,
	SubayasaDown                             = 32,
	JumonTaiseiDown                          = 33,
	ZokuseiDown                              = 34,
	TaiseiDown                               = 35,
	Zone                                     = 36,
	Mikawasi                                 = 37,
	TateGuard                                = 38,
	BukiGuard                                = 39,
	Critical                                 = 40,
	Mitoresase                               = 41,
	MAX                                      = 42,
};

// Enum JackGame.EJackStatusParam
// NumValues: 0x0017
enum class EJackStatusParam : uint8
{
	None                                     = 0,
	MaxHP                                    = 1,
	MaxMP                                    = 2,
	HP                                       = 3,
	MP                                       = 4,
	Tikara                                   = 5,
	Subayasa                                 = 6,
	Minomamori                               = 7,
	Kiyousa                                  = 8,
	Miryoku                                  = 9,
	Kougekiryoku                             = 10,
	Syubiryoku                               = 11,
	KougekiMaryoku                           = 12,
	KaifukuMaryoku                           = 13,
	Omosa                                    = 14,
	CriticalRate                             = 15,
	MPKyuuSyuuRate                           = 16,
	TateGuardRate                            = 17,
	BukiGuardRate                            = 18,
	MikawasiRate                             = 19,
	ZibariaDamage                            = 20,
	RefAutoKaifuku                           = 21,
	MAX                                      = 22,
};

// Enum JackGame.EJackAnimalReaction
// NumValues: 0x0006
enum class EJackAnimalReaction : uint8
{
	None                                     = 0,
	HorseType                                = 1,
	CowType                                  = 2,
	MiddleDogType                            = 3,
	SmallAnimalType                          = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackAnimalRace
// NumValues: 0x0005
enum class EJackAnimalRace : uint8
{
	None                                     = 0,
	Beast                                    = 1,
	Bird                                     = 2,
	Fish                                     = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackAnimal
// NumValues: 0x0005
enum class EJackAnimal : uint8
{
	None                                     = 0,
	Dog                                      = 1,
	Mouse                                    = 2,
	Chiken                                   = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackScenarioWeather
// NumValues: 0x0006
enum class EJackScenarioWeather : uint8
{
	None                                     = 0,
	Sunny                                    = 1,
	Rain                                     = 2,
	Snow                                     = 3,
	Fog                                      = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackNounGender
// NumValues: 0x0006
enum class EJackNounGender : uint8
{
	None                                     = 0,
	M                                        = 1,
	F                                        = 2,
	N                                        = 3,
	Num                                      = 4,
	EJackNounGender_MAX                      = 5,
};

// Enum JackGame.EJackRegion
// NumValues: 0x0004
enum class EJackRegion : uint8
{
	NorthAmerica                             = 0,
	Europe                                   = 1,
	Asia                                     = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackEdition
// NumValues: 0x0004
enum class EJackEdition : uint8
{
	None                                     = 0,
	Japanese                                 = 1,
	International                            = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackGameViewportClientControlCategory
// NumValues: 0x0005
enum class EJackGameViewportClientControlCategory : uint8
{
	SceneCapture                             = 0,
	SkillPanel                               = 1,
	Movie                                    = 2,
	Renkei                                   = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackSerializeArrayMode
// NumValues: 0x0004
enum class EJackSerializeArrayMode : uint8
{
	Default                                  = 0,
	ValidOnly                                = 1,
	WithoutBackInvalid                       = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackCategoryHiddenLayer
// NumValues: 0x0006
enum class EJackCategoryHiddenLayer : uint8
{
	Battle                                   = 0,
	NakamaKaiwa                              = 1,
	Camp                                     = 2,
	CutScene                                 = 3,
	Debug                                    = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackCategoryHiddenType
// NumValues: 0x000B
enum class EJackCategoryHiddenType : uint8
{
	NPC                                      = 0,
	Monster                                  = 1,
	EventMonster                             = 2,
	Animal                                   = 3,
	TokiNoKesin                              = 4,
	Vehicle                                  = 5,
	Object                                   = 6,
	Object_Battle                            = 7,
	Object_CutScene                          = 8,
	ParadeNPC                                = 9,
	MAX                                      = 10,
};

// Enum JackGame.EJackVoicePresetFlag
// NumValues: 0x0002
enum class EJackVoicePresetFlag : uint8
{
	InvalidLipSync                           = 0,
	MAX                                      = 1,
};

// Enum JackGame.EJackCoordSound
// NumValues: 0x0016
enum class EJackCoordSound : uint8
{
	Walk                                     = 0,
	Run                                      = 1,
	Dash                                     = 2,
	ArmUp                                    = 3,
	ArmDown                                  = 4,
	Sit                                      = 5,
	Stand                                    = 6,
	Jump                                     = 7,
	Land                                     = 8,
	Turn                                     = 9,
	ArmHard                                  = 10,
	BodyHard                                 = 11,
	Down                                     = 12,
	CS1                                      = 13,
	CS2                                      = 14,
	CS3                                      = 15,
	CS4                                      = 16,
	CS5                                      = 17,
	CS6                                      = 18,
	CS7                                      = 19,
	CS8                                      = 20,
	MAX                                      = 21,
};

// Enum JackGame.EJackMEType
// NumValues: 0x0005
enum class EJackMEType : uint8
{
	Default                                  = 0,
	BattleWin                                = 1,
	Minigame                                 = 2,
	Dokodemokazi                             = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackSEADCategoryLayer
// NumValues: 0x0005
enum class EJackSEADCategoryLayer : uint8
{
	Debug                                    = 0,
	Game                                     = 1,
	Config                                   = 2,
	CutScene                                 = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackCameraMode
// NumValues: 0x0018
enum class EJackCameraMode : uint8
{
	None                                     = 0,
	PlayerView                               = 1,
	BattleView                               = 2,
	BattleSimpleView                         = 3,
	BattlePreparationView                    = 4,
	Rail                                     = 5,
	Debug                                    = 6,
	IndoorView                               = 7,
	BattleActionView                         = 8,
	BattleResultView                         = 9,
	TalkView                                 = 10,
	IndoorTalkView                           = 11,
	BattleMonsterAppearance                  = 12,
	FirstPersonView                          = 13,
	SplinePath                               = 14,
	FixCameraView                            = 15,
	FriendTalkView                           = 16,
	JumpPlayerView                           = 17,
	BackPlayerView                           = 18,
	UmaRaceView                              = 19,
	ChangeTimeView                           = 20,
	UmaRaceResultView                        = 21,
	PhotoModeView                            = 22,
	MAX                                      = 23,
};

// Enum JackGame.EJackCameraFadeZLayer
// NumValues: 0x0005
enum class EJackCameraFadeZLayer : uint8
{
	UMGForeground                            = 0,
	UMGMessage                               = 1,
	UMGUiBackgound                           = 2,
	Camera                                   = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackCameraFadeCategory
// NumValues: 0x000B
enum class EJackCameraFadeCategory : uint8
{
	Menu                                     = 0,
	MiniGame                                 = 1,
	CutSceneSkip                             = 2,
	CutScene                                 = 3,
	CutSceneForeground                       = 4,
	Level                                    = 5,
	Battle                                   = 6,
	Gimmick                                  = 7,
	Rura                                     = 8,
	Other                                    = 9,
	MAX                                      = 10,
};

// Enum JackGame.EJackCameraControlCategory
// NumValues: 0x0004
enum class EJackCameraControlCategory : uint8
{
	Battle                                   = 0,
	BattleActionCamera                       = 1,
	LockEyeViewPoint                         = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackWorldTimeDilation
// NumValues: 0x0005
enum class EJackWorldTimeDilation : uint8
{
	None                                     = 0,
	World                                    = 1,
	Matinee                                  = 2,
	DemoPlay                                 = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackVisibility
// NumValues: 0x0003
enum class EJackVisibility : uint8
{
	Hidden                                   = 0,
	Visible                                  = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackUmaRaceGameState
// NumValues: 0x000E
enum class EJackUmaRaceGameState : uint8
{
	None                                     = 0,
	Init                                     = 1,
	Mount                                    = 2,
	FadeIn                                   = 3,
	StartDemo                                = 4,
	StartDemo2                               = 5,
	StartDemo3                               = 6,
	Game                                     = 7,
	Result                                   = 8,
	ResultDemo                               = 9,
	ResultRetire                             = 10,
	Unmount                                  = 11,
	Finish                                   = 12,
	Max                                      = 13,
};

// Enum JackGame.EJackUmaRaceFarisFlagState
// NumValues: 0x0003
enum class EJackUmaRaceFarisFlagState : uint8
{
	Before                                   = 0,
	After                                    = 1,
	Max                                      = 2,
};

// Enum JackGame.EJackUmaRaceDash
// NumValues: 0x0005
enum class EJackUmaRaceDash : uint8
{
	None                                     = 0,
	Dash1st                                  = 1,
	Dash2nd                                  = 2,
	Dash3rd                                  = 3,
	Max                                      = 4,
};

// Enum JackGame.EJackUmaRaceOrbit
// NumValues: 0x0004
enum class EJackUmaRaceOrbit : uint8
{
	None                                     = 0,
	Advanced                                 = 1,
	Back                                     = 2,
	Max                                      = 3,
};

// Enum JackGame.EJackUmaRaceDashGaugeState
// NumValues: 0x0006
enum class EJackUmaRaceDashGaugeState : uint8
{
	Full                                     = 0,
	Slightly                                 = 1,
	Nothing                                  = 2,
	RecoveryStart                            = 3,
	Recovery                                 = 4,
	Max                                      = 5,
};

// Enum JackGame.EJackUmaRaceEntranceIcon
// NumValues: 0x0007
enum class EJackUmaRaceEntranceIcon : uint8
{
	FrameOnly                                = 0,
	Start01                                  = 1,
	Start02                                  = 2,
	Start03                                  = 3,
	Lock                                     = 4,
	CheckMark                                = 5,
	Max                                      = 6,
};

// Enum JackGame.EJackUmaRaceHorseType
// NumValues: 0x0009
enum class EJackUmaRaceHorseType : uint8
{
	Horse01                                  = 0,
	Horse02                                  = 1,
	Horse03                                  = 2,
	Horse04                                  = 3,
	Horse05                                  = 4,
	Horse06                                  = 5,
	Horse08                                  = 6,
	Random                                   = 7,
	Max                                      = 8,
};

// Enum JackGame.EJackUmaRaceDifficulty
// NumValues: 0x0003
enum class EJackUmaRaceDifficulty : uint8
{
	Normal                                   = 0,
	Hard                                     = 1,
	Max                                      = 2,
};

// Enum JackGame.EJackUmaRaceRank
// NumValues: 0x0008
enum class EJackUmaRaceRank : uint8
{
	None                                     = 0,
	RankS                                    = 1,
	RankA                                    = 2,
	RankB                                    = 3,
	RankC                                    = 4,
	RankD                                    = 5,
	RankFalice                               = 6,
	Max                                      = 7,
};

// Enum JackGame.EJackUMGMitameSoubiState
// NumValues: 0x0006
enum class EJackUMGMitameSoubiState : uint8
{
	NotAcquired                              = 0,
	Disable                                  = 1,
	Validity                                 = 2,
	New                                      = 3,
	None                                     = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackUMGSoubiScreenMode
// NumValues: 0x0005
enum class EJackUMGSoubiScreenMode : uint8
{
	CharacterSelect                          = 0,
	RegionSelect                             = 1,
	ItemSelect                               = 2,
	MitameSelect                             = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackUMGOddEffectFlow
// NumValues: 0x0005
enum class EJackUMGOddEffectFlow : uint8
{
	None                                     = 0,
	Clear                                    = 1,
	Set                                      = 2,
	Temp                                     = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackUMGEquipmentResult
// NumValues: 0x0005
enum class EJackUMGEquipmentResult : uint8
{
	Equipped                                 = 0,
	BouguSibari                              = 1,
	DoubleHand                               = 2,
	Cancel                                   = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackUMGDouguSeiriResult
// NumValues: 0x0006
enum class EJackUMGDouguSeiriResult : uint8
{
	ExecutedOK                               = 0,
	ExecutedRemove                           = 1,
	CancelSeiri                              = 2,
	CancelRemove                             = 3,
	NoneItem                                 = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackUMGCountBagItemType
// NumValues: 0x0006
enum class EJackUMGCountBagItemType : uint8
{
	SpecifiedBag                             = 0,
	AllMembersBag                            = 1,
	CommonBag                                = 2,
	SpecifiedBagWithCommonBag                = 3,
	AllBag                                   = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackUMGShopCurrency
// NumValues: 0x0004
enum class EJackUMGShopCurrency : uint8
{
	Gold                                     = 0,
	Medal                                    = 1,
	CasinoCoin                               = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackTuyosaPage
// NumValues: 0x0008
enum class EJackTuyosaPage : uint8
{
	Detail                                   = 0,
	Jumon                                    = 1,
	Tokugi                                   = 2,
	Skill                                    = 3,
	Renkei                                   = 4,
	Kazi                                     = 5,
	Tokusyu                                  = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackSaveDataSlotIndex
// NumValues: 0x000B
enum class EJackSaveDataSlotIndex : uint8
{
	Slot0                                    = 0,
	Slot1                                    = 1,
	Slot2                                    = 2,
	Slot3                                    = 3,
	Slot4                                    = 4,
	Slot5                                    = 5,
	Slot6                                    = 6,
	Slot7                                    = 7,
	Slot8                                    = 8,
	AutoSave                                 = 9,
	MAX                                      = 10,
};

// Enum JackGame.EJackUMGSaveDataCheckResult
// NumValues: 0x0006
enum class EJackUMGSaveDataCheckResult : uint8
{
	Success                                  = 0,
	Restore                                  = 1,
	ReCreate                                 = 2,
	Failed                                   = 3,
	NoSpage                                  = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackUMGSaveDataCheckPoint
// NumValues: 0x000A
enum class EJackUMGSaveDataCheckPoint : uint8
{
	StartGame                                = 0,
	OpenSaveDataList                         = 1,
	CreateSaveData                           = 2,
	LoadData                                 = 3,
	BeforeSave                               = 4,
	SaveData                                 = 5,
	AutoSave                                 = 6,
	FusigiNaKaji                             = 7,
	OpenSaveDataTrial                        = 8,
	MAX                                      = 9,
};

// Enum JackGame.EJackSaveSlotSearchType
// NumValues: 0x0005
enum class EJackSaveSlotSearchType : uint8
{
	None                                     = 0,
	Empty                                    = 1,
	Latest                                   = 2,
	SmallNumber                              = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackUMGSenrekiSortBamen
// NumValues: 0x0004
enum class EJackUMGSenrekiSortBamen : uint8
{
	Monster                                  = 0,
	Item                                     = 1,
	Syougou                                  = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackUMGSenrekiSortMode
// NumValues: 0x0003
enum class EJackUMGSenrekiSortMode : uint8
{
	GojuuonJun                               = 0,
	SyuruiJun                                = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackUMGSenrekiMonsterMode
// NumValues: 0x0005
enum class EJackUMGSenrekiMonsterMode : uint8
{
	NowField                                 = 0,
	Seisokuti                                = 1,
	Keitou                                   = 2,
	AllMonster                               = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackSyuurenjouMenuResult
// NumValues: 0x0003
enum class EJackSyuurenjouMenuResult : uint8
{
	Cancel                                   = 0,
	Ok                                       = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackCameraMedeSelectStick
// NumValues: 0x000A
enum class EJackCameraMedeSelectStick : uint8
{
	Stick_Neutral                            = 0,
	Stick_Up                                 = 1,
	Stick_Down                               = 2,
	Stick_Right                              = 3,
	Stick_Left                               = 4,
	Arrow_Right                              = 5,
	Arrow_Left                               = 6,
	Arrow_Up                                 = 7,
	Arrow_Down                               = 8,
	MAX                                      = 9,
};

// Enum JackGame.EJackUMGCameraModeSelectState
// NumValues: 0x000A
enum class EJackUMGCameraModeSelectState : uint8
{
	Initial                                  = 0,
	WaitRequest                              = 1,
	WaitOpen                                 = 2,
	WaitAfterOpen                            = 3,
	WaitAfterPlay                            = 4,
	WaitClose                                = 5,
	WaitAfterClose                           = 6,
	WaitBeforeClose                          = 7,
	WaitBeforeReOpen                         = 8,
	MAX                                      = 9,
};

// Enum JackGame.EJackFukubikiLotteryResult
// NumValues: 0x000C
enum class EJackFukubikiLotteryResult : uint8
{
	ThreeSunMarks                            = 0,
	ThreeStarMarks                           = 1,
	ThreeMoonMarks                           = 2,
	ThreeWaterMarks                          = 3,
	ThreeHeartMarks                          = 4,
	TwoSunMarks                              = 5,
	TwoStarMarks                             = 6,
	TwoMoonMarks                             = 7,
	TwoWaterMarks                            = 8,
	TwoHeartMarks                            = 9,
	NoPear                                   = 10,
	MAX                                      = 11,
};

// Enum JackGame.EJackFukubikiMark
// NumValues: 0x0006
enum class EJackFukubikiMark : uint8
{
	Sun                                      = 0,
	Star                                     = 1,
	Moon                                     = 2,
	Water                                    = 3,
	Heart                                    = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackUMGTurnAction
// NumValues: 0x0004
enum class EJackUMGTurnAction : uint8
{
	Normal                                   = 0,
	Appear                                   = 1,
	Disappear                                = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackUMGMapResourceType
// NumValues: 0x0006
enum class EJackUMGMapResourceType : uint8
{
	MapOpenTexture                           = 0,
	MapMaskTexture                           = 1,
	MiniMapTexture                           = 2,
	JourneyTexture                           = 3,
	MapTextWidget                            = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackMedalStampAnimFlag
// NumValues: 0x0013
enum class EJackMedalStampAnimFlag : uint8
{
	None                                     = 0,
	Wait                                     = 1,
	Stamp                                    = 2,
	StampMiddle                              = 3,
	StampLarge                               = 4,
	ShowTreasureBox                          = 5,
	ShowRareTreasureBox                      = 6,
	HideTreasureBox                          = 7,
	ShowItemGetMessage                       = 8,
	UpdateItemInfo                           = 9,
	ShowBottomInfo                           = 10,
	HideBottomInfo                           = 11,
	ShowCompleteMessage                      = 12,
	ShowCompleteStamp                        = 13,
	NextPageMessage                          = 14,
	ShowPage                                 = 15,
	HidePage                                 = 16,
	FullComplete                             = 17,
	MAX                                      = 18,
};

// Enum JackGame.EJackUMGModeSelectGotoState
// NumValues: 0x0004
enum class EJackUMGModeSelectGotoState : uint8
{
	GotoCameraMode                           = 0,
	Goto2dGameMode                           = 1,
	GotoPreviousMode                         = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackUMGModeSelectMovieState
// NumValues: 0x0006
enum class EJackUMGModeSelectMovieState : uint8
{
	Initial                                  = 0,
	WaitInitialize                           = 1,
	WaitReadyToPlay                          = 2,
	WaitEndFadeIn                            = 3,
	PlayMovie                                = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackSerifuWindowEmojiFlag
// NumValues: 0x0004
enum class EJackSerifuWindowEmojiFlag : uint8
{
	Ignore                                   = 0,
	Normal                                   = 1,
	Reverse                                  = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackSelectWindowType
// NumValues: 0x0006
enum class EJackSelectWindowType : uint8
{
	Default                                  = 0,
	YesOrNo                                  = 1,
	HotelRaiseTime                           = 2,
	Custom                                   = 3,
	Blacksmith                               = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackTokugiMatomeIconAnim
// NumValues: 0x000C
enum class EJackTokugiMatomeIconAnim : uint8
{
	None                                     = 0,
	Circle_On                                = 1,
	Check_On                                 = 2,
	Lock_On                                  = 3,
	Star_On                                  = 4,
	Secret_On                                = 5,
	Circle_In_Out                            = 6,
	Check_In_Out                             = 7,
	Secret_In_Out                            = 8,
	Check_To_Lock                            = 9,
	Check_To_Star                            = 10,
	MAX                                      = 11,
};

// Enum JackGame.EJackTokugiQuestionAnim
// NumValues: 0x001A
enum class EJackTokugiQuestionAnim : uint8
{
	None                                     = 0,
	Dark                                     = 1,
	Bright                                   = 2,
	Change_Open                              = 3,
	Change_Dark_Bright                       = 4,
	Reset_Dark_Dark                          = 5,
	Reset_Dark_Bright                        = 6,
	Reset_Bright_Bright                      = 7,
	Reset_Bright_Open                        = 8,
	Reset_Dark_Open                          = 9,
	Open_Dark                                = 10,
	Open_Bright                              = 11,
	Dark_Dark                                = 12,
	Bright_Bright                            = 13,
	Bright_Dark                              = 14,
	Close_Old                                = 15,
	Cracked_Old                              = 16,
	Open_Crack_Old                           = 17,
	Crack_Close_Old                          = 18,
	Open_Close_Old                           = 19,
	Crack_Crack_Old                          = 20,
	Reset_Crack_Crack_Old                    = 21,
	Reset_Crack_Open_Old                     = 22,
	Reset_Close_Open_Old                     = 23,
	Reset_Close_Crack_Old                    = 24,
	MAX                                      = 25,
};

// Enum JackGame.EJackTokugiPieceAnim
// NumValues: 0x0011
enum class EJackTokugiPieceAnim : uint8
{
	None                                     = 0,
	Close                                    = 1,
	Open                                     = 2,
	ProvMaster                               = 3,
	Master                                   = 4,
	Change_Master                            = 5,
	Change_Master_2                          = 6,
	ChangeGrow_Open                          = 7,
	Change_ProvMaster                        = 8,
	ChangeGrow_ProvMasterFromClose           = 9,
	ChangeGrow_MasterFromProvMaster          = 10,
	ChangeRoll_Open                          = 11,
	ChangeRoll_ProvMasterFromClose           = 12,
	ChangeRoll_MasterFromClose_Reset         = 13,
	ChangeRoll_MasterFromOpen_Reset          = 14,
	Roll_Close                               = 15,
	MAX                                      = 16,
};

// Enum JackGame.EJackTokugiPanelAdjoinPanelOpenTiming
// NumValues: 0x0005
enum class EJackTokugiPanelAdjoinPanelOpenTiming : uint8
{
	Learning                                 = 0,
	AfterLearnMessage                        = 1,
	AfterOtherAnim                           = 2,
	ShowSelectCursol                         = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackTokugiPanelMessageAnimFlag
// NumValues: 0x0009
enum class EJackTokugiPanelMessageAnimFlag : uint8
{
	ReleaseLock                              = 0,
	Master                                   = 1,
	ClosedOtherSkillLinePanel                = 2,
	SkillResetSuccess                        = 3,
	ResetAndClosedOtherLine                  = 4,
	NotifyLearnedRenkei                      = 5,
	DisplayAchievement                       = 6,
	ShowAtariEffect                          = 7,
	MAX                                      = 8,
};

// Enum JackGame.EJackTokugiPanelAnimFlag
// NumValues: 0x0019
enum class EJackTokugiPanelAnimFlag : uint8
{
	None                                     = 0,
	Open                                     = 1,
	Master                                   = 2,
	Crack                                    = 3,
	HideSelectCursol                         = 4,
	ShowSelectCursol                         = 5,
	Wait                                     = 6,
	ProvMaster                               = 7,
	CancelProvMaster                         = 8,
	CancelOpen                               = 9,
	CloseFromProvMater                       = 10,
	CancelCrack                              = 11,
	MasterFromProvMaster                     = 12,
	HideSkillLineEffect                      = 13,
	ShowSkillLineEffect                      = 14,
	ProvMasterFromClose                      = 15,
	ResetEffect                              = 16,
	CancelMaster                             = 17,
	CloseFromMater                           = 18,
	PanelResetEffect                         = 19,
	StateOpen                                = 20,
	StateClose                               = 21,
	ShowListUpdateEffect                     = 22,
	DisplayMessage                           = 23,
	MAX                                      = 24,
};

// Enum JackGame.EJackTokugiPanelAnimCategory
// NumValues: 0x0009
enum class EJackTokugiPanelAnimCategory : uint8
{
	None                                     = 0,
	ReleaseLockPanel                         = 1,
	ExecuteMaster                            = 2,
	ToggleProvMaster                         = 3,
	ExecuteMultiMaster                       = 4,
	CancelMultiMaster                        = 5,
	ResumeMultiMaster                        = 6,
	ExecuteSkillReset                        = 7,
	EJackTokugiPanelAnimCategory_MAX         = 8,
};

// Enum JackGame.EJackTokugiPanelAdjoinPieceState
// NumValues: 0x0006
enum class EJackTokugiPanelAdjoinPieceState : uint8
{
	NotExist                                 = 0,
	Close                                    = 1,
	Open                                     = 2,
	ProvMaster                               = 3,
	Master                                   = 4,
	MAX                                      = 5,
};

// Enum JackGame.EJackTokugiPanelPieceState
// NumValues: 0x0004
enum class EJackTokugiPanelPieceState : uint8
{
	Close                                    = 0,
	Open                                     = 1,
	Master                                   = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackTokugiPanelPageType
// NumValues: 0x0008
enum class EJackTokugiPanelPageType : uint8
{
	CharacterSelect                          = 0,
	SkillLineSelect                          = 1,
	SkillList                                = 2,
	MultiMaster                              = 3,
	SkillDescription                         = 4,
	TokugiPanel                              = 5,
	SkillReset                               = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackTokugiPanelWindowMode
// NumValues: 0x0004
enum class EJackTokugiPanelWindowMode : uint8
{
	Normal                                   = 0,
	BattleResult                             = 1,
	Reset                                    = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackUMGCheckValueInput
// NumValues: 0x0003
enum class EJackUMGCheckValueInput : uint8
{
	CanDown                                  = 0,
	CanUp                                    = 1,
	MAX                                      = 2,
};

// Enum JackGame.EJackVoiceDramaTag
// NumValues: 0x001E
enum class EJackVoiceDramaTag : uint8
{
	End                                      = 0,
	Wait                                     = 1,
	WaitTag                                  = 2,
	PageFade                                 = 3,
	TextHide                                 = 4,
	TalkerShow                               = 5,
	LogModeEnd                               = 6,
	BG                                       = 7,
	BGHide                                   = 8,
	BGWait                                   = 9,
	Image                                    = 10,
	ImageHide                                = 11,
	ImageWait                                = 12,
	FadeOut                                  = 13,
	FadeIn                                   = 14,
	FadeWait                                 = 15,
	BGMPlay                                  = 16,
	BGMStop                                  = 17,
	BGMWait                                  = 18,
	EnvPlay                                  = 19,
	EnvStop                                  = 20,
	EnvWait                                  = 21,
	VoicePlay                                = 22,
	VoiceWait                                = 23,
	SEPlay                                   = 24,
	SEWait                                   = 25,
	MEPlay                                   = 26,
	Pafupafu                                 = 27,
	StaffRoll                                = 28,
	MAX                                      = 29,
};

// Enum JackGame.EJackVoiceDramaHDPafuPafuSoundEffectTag
// NumValues: 0x000E
enum class EJackVoiceDramaHDPafuPafuSoundEffectTag : uint8
{
	PafuunLow                                = 0,
	PafuunHigh                               = 1,
	PafuunMostHigh                           = 2,
	Descent                                  = 3,
	Rise                                     = 4,
	CurtainOpen                              = 5,
	CurtainClose                             = 6,
	Knockout                                 = 7,
	Whiteout                                 = 8,
	Doon                                     = 9,
	CountDown                                = 10,
	Start                                    = 11,
	Finish                                   = 12,
	EJackVoiceDramaHDPafuPafuSoundEffectTag_MAX = 13,
};

// Enum JackGame.EJackVoiceDramaSelectEShop
// NumValues: 0x0004
enum class EJackVoiceDramaSelectEShop : uint8
{
	InputDLCNumber                           = 0,
	BuyAddContent                            = 1,
	CancelDLC                                = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackVoiceDramaSelectAnimButton
// NumValues: 0x0004
enum class EJackVoiceDramaSelectAnimButton : uint8
{
	Plus                                     = 0,
	Minus                                    = 1,
	XButton                                  = 2,
	MAX                                      = 3,
};

// Enum JackGame.EJackVoiceDramaSelectDLCCompleteMode
// NumValues: 0x0008
enum class EJackVoiceDramaSelectDLCCompleteMode : uint8
{
	FromTitle                                = 0,
	FromVoiceDrama                           = 1,
	RemainSelect                             = 2,
	CompleteDLC                              = 3,
	FromStaffList                            = 4,
	InVoiceDrama                             = 5,
	InEShop                                  = 6,
	MAX                                      = 7,
};

// Enum JackGame.EJackUMGBackgroundColor
// NumValues: 0x0005
enum class EJackUMGBackgroundColor : uint8
{
	None                                     = 0,
	BlackWindow                              = 1,
	PaleOrange                               = 2,
	Brown                                    = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackUMGWindowCursorMoveDirection
// NumValues: 0x0005
enum class EJackUMGWindowCursorMoveDirection : uint8
{
	Left                                     = 0,
	Up                                       = 1,
	Right                                    = 2,
	Down                                     = 3,
	MAX                                      = 4,
};

// Enum JackGame.EJackVehicleParameterStateMachineFlags
// NumValues: 0x0031
enum class EJackVehicleParameterStateMachineFlags : uint8
{
	WaitToWalkRun                            = 0,
	WalkRunToEnterTurnBack1                  = 1,
	EnterTurnBack1ToTurnBackLeft1            = 2,
	EnterTurnBack1ToTurnBackRight1           = 3,
	WaitToEnterTurn1                         = 4,
	WalkRunToEnterTurn1                      = 5,
	EnterTurn1ToTurnRight1                   = 6,
	EnterTurn1ToTurnLeft1                    = 7,
	TurnRight1ToEnterTurnBack1               = 8,
	TurnLeft1ToEnterTurnBack1                = 9,
	TurnLeft1ToExitTurn1                     = 10,
	TurnRight1ToExitTurn1                    = 11,
	TurnLeft1InTurnLeft1_1ToTurnLeft1_2      = 12,
	TurnLeft1InTurnLeft1_2ToTurnLeft1_1      = 13,
	TurnRight1InTurnRight1_1ToTurnRight1_2   = 14,
	TurnRight1InTurnRight1_2ToTurnRight1_1   = 15,
	ExitTurn1ToWalkRun                       = 16,
	ExitTurn1ToWait                          = 17,
	TurnLeft1ToDashStart                     = 18,
	TurnRight1ToDashStart                    = 19,
	WalkRunToDashStart                       = 20,
	DashStartToDash                          = 21,
	DashToDashStart                          = 22,
	DashStartWalkRun                         = 23,
	DashToRunStop                            = 24,
	WalkRunToRunStop                         = 25,
	WalkRunToWait                            = 26,
	WalkRunToJumpStart                       = 27,
	DashToJumpStart                          = 28,
	JumpLoopToJumpEnd                        = 29,
	JumpLoopToWalkRun                        = 30,
	JumpLoopToDash                           = 31,
	JumpEndToWalkRun                         = 32,
	JumpEndToDash                            = 33,
	WalkRunToFall                            = 34,
	FallToFallEnd                            = 35,
	CanCancelTurnBackLeft1ToWalkRun          = 36,
	CanCancelTurnBackRight1ToWalkRun         = 37,
	WalkRunToGride                           = 38,
	GrideToWalkRun                           = 39,
	WaitToRunForward                         = 40,
	WaitToRunBack                            = 41,
	RunForwardToWait                         = 42,
	RunBackToWait                            = 43,
	WaitToClimbing                           = 44,
	ClimbingToWait                           = 45,
	ForceRunStopToWait                       = 46,
	ForceStopToWait                          = 47,
	MAX                                      = 48,
};

// Enum JackGame.EJackVehicleParameterBool
// NumValues: 0x001D
enum class EJackVehicleParameterBool : uint8
{
	IsEnableCancelJumpEnd                    = 0,
	IsDashRequestEnable                      = 1,
	IsDashRequest                            = 2,
	IsInDash                                 = 3,
	IsDashEndRequest                         = 4,
	IsRequestDashCancel                      = 5,
	IsRequestStop                            = 6,
	IsRequestJump                            = 7,
	IsInJump                                 = 8,
	IsRequestJumpEnd                         = 9,
	IsInAir                                  = 10,
	IsCancelTurnBack                         = 11,
	IsUnmountEnable                          = 12,
	IsGride                                  = 13,
	IsJumpUp                                 = 14,
	IsV104Climbing                           = 15,
	IsV104ClimbingUp                         = 16,
	IsV104ClimbingChanging                   = 17,
	IsForceWalkDash                          = 18,
	IsV102JumpStart                          = 19,
	IsV105GridRun                            = 20,
	IsMovementEnabled                        = 21,
	ForceRunStopToWait                       = 22,
	ForceStopToWait                          = 23,
	IsInRoar                                 = 24,
	V203_WhaleRoar_Mode                      = 25,
	V203_AdditiveOn                          = 26,
	IsMount                                  = 27,
	MAX                                      = 28,
};

// Enum JackGame.EJackVehicleParameterFloat
// NumValues: 0x001F
enum class EJackVehicleParameterFloat : uint8
{
	TurnAngle                                = 0,
	CrrectedRawInputRate                     = 1,
	ForwardingRate                           = 2,
	MoveMotionBlendRate                      = 3,
	MoveMotionBlendRateReverse               = 4,
	MoveMotionBlendRateReverseRate           = 5,
	MoveMotionTurnAngleRate                  = 6,
	TurnOutAngle                             = 7,
	TurnInAngle                              = 8,
	CanTurnMoveMotionBlendRate               = 9,
	WalkForwardingRate                       = 10,
	RunForwardingRate                        = 11,
	TurnBackAngle                            = 12,
	MotionTurnAngleCalcRate                  = 13,
	WalkRunRootMotionMultiplier              = 14,
	RunOutForwardingRate                     = 15,
	DashEndInterpolationRate                 = 16,
	ToDashInterpolationSpeed                 = 17,
	ToRunInterpolationSpeed                  = 18,
	ToWalkInterpolationSpeed                 = 19,
	ToStopInterpolationSpeed                 = 20,
	V104ClimbMoveRate                        = 21,
	JumpStartMotionAnimationRate             = 22,
	GrideStateSecV105                        = 23,
	GrideStateSecV105Gride                   = 24,
	GrideStateSecV105Run                     = 25,
	RoarV203Timer                            = 26,
	RoarV203RequestOffTimer                  = 27,
	AddUpAlphaRate                           = 28,
	AddDownAlphaRate                         = 29,
	MAX                                      = 30,
};

// Enum JackGame.EJackWeaponHiddenPurpose
// NumValues: 0x0008
enum class EJackWeaponHiddenPurpose : uint8
{
	Engine                                   = 0,
	Owner                                    = 1,
	Matinee                                  = 2,
	Renkei                                   = 3,
	Field                                    = 4,
	EquipmentControlComponent                = 5,
	AttachSocket                             = 6,
	MAX                                      = 7,
};

// ScriptStruct JackGame.JackAttackTargetInfo
// 0x000C (0x000C - 0x0000)
struct FJackAttackTargetInfo final
{
public:
	TWeakObjectPtr<class UJackGameCharacter>      TargetGameCharacter;                               // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentHitCount;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackAttackTargetInfo) == 0x000004, "Wrong alignment on FJackAttackTargetInfo");
static_assert(sizeof(FJackAttackTargetInfo) == 0x00000C, "Wrong size on FJackAttackTargetInfo");
static_assert(offsetof(FJackAttackTargetInfo, TargetGameCharacter) == 0x000000, "Member 'FJackAttackTargetInfo::TargetGameCharacter' has a wrong offset!");
static_assert(offsetof(FJackAttackTargetInfo, CurrentHitCount) == 0x000008, "Member 'FJackAttackTargetInfo::CurrentHitCount' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMiniGameJackPotTowerAdditional
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableMiniGameJackPotTowerAdditional final : public FTableRowBase
{
public:
	int32                                         AdditionalBase;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FractionMin01;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FractionMax01;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FractionMin02;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FractionMax02;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMiniGameJackPotTowerAdditional) == 0x000008, "Wrong alignment on FJackDataTableMiniGameJackPotTowerAdditional");
static_assert(sizeof(FJackDataTableMiniGameJackPotTowerAdditional) == 0x000020, "Wrong size on FJackDataTableMiniGameJackPotTowerAdditional");
static_assert(offsetof(FJackDataTableMiniGameJackPotTowerAdditional, AdditionalBase) == 0x000008, "Member 'FJackDataTableMiniGameJackPotTowerAdditional::AdditionalBase' has a wrong offset!");
static_assert(offsetof(FJackDataTableMiniGameJackPotTowerAdditional, FractionMin01) == 0x00000C, "Member 'FJackDataTableMiniGameJackPotTowerAdditional::FractionMin01' has a wrong offset!");
static_assert(offsetof(FJackDataTableMiniGameJackPotTowerAdditional, FractionMax01) == 0x000010, "Member 'FJackDataTableMiniGameJackPotTowerAdditional::FractionMax01' has a wrong offset!");
static_assert(offsetof(FJackDataTableMiniGameJackPotTowerAdditional, FractionMin02) == 0x000014, "Member 'FJackDataTableMiniGameJackPotTowerAdditional::FractionMin02' has a wrong offset!");
static_assert(offsetof(FJackDataTableMiniGameJackPotTowerAdditional, FractionMax02) == 0x000018, "Member 'FJackDataTableMiniGameJackPotTowerAdditional::FractionMax02' has a wrong offset!");

// ScriptStruct JackGame.JackGameFlagDefGuide
// 0x0001 (0x0001 - 0x0000)
struct FJackGameFlagDefGuide final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackGameFlagDefGuide) == 0x000001, "Wrong alignment on FJackGameFlagDefGuide");
static_assert(sizeof(FJackGameFlagDefGuide) == 0x000001, "Wrong size on FJackGameFlagDefGuide");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtQ1_MaxOrMinRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtQ1_MaxOrMinRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtQ1_MaxOrMinRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtQ1_MaxOrMinRot");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtQ1_MaxOrMinRot) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtQ1_MaxOrMinRot");

// ScriptStruct JackGame.JackDataTableFukkatunojumonGameResumeSettingParty
// 0x0028 (0x0030 - 0x0008)
struct FJackDataTableFukkatunojumonGameResumeSettingParty final : public FTableRowBase
{
public:
	class FName                                   Category;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Value1;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Value2;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Cmds;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableFukkatunojumonGameResumeSettingParty) == 0x000008, "Wrong alignment on FJackDataTableFukkatunojumonGameResumeSettingParty");
static_assert(sizeof(FJackDataTableFukkatunojumonGameResumeSettingParty) == 0x000030, "Wrong size on FJackDataTableFukkatunojumonGameResumeSettingParty");
static_assert(offsetof(FJackDataTableFukkatunojumonGameResumeSettingParty, Category) == 0x000008, "Member 'FJackDataTableFukkatunojumonGameResumeSettingParty::Category' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonGameResumeSettingParty, Value1) == 0x000010, "Member 'FJackDataTableFukkatunojumonGameResumeSettingParty::Value1' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonGameResumeSettingParty, Value2) == 0x000018, "Member 'FJackDataTableFukkatunojumonGameResumeSettingParty::Value2' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonGameResumeSettingParty, Cmds) == 0x000020, "Member 'FJackDataTableFukkatunojumonGameResumeSettingParty::Cmds' has a wrong offset!");

// ScriptStruct JackGame.JackActionEffectDecal
// 0x0018 (0x0018 - 0x0000)
struct FJackActionEffectDecal final
{
public:
	TSubclassOf<class UJackCollideEffect>         Effect;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BumpNormalSize;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrailDecalMinHeight;                               // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrailDecalMinDistance;                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrailDecalAddSize;                                 // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackActionEffectDecal) == 0x000008, "Wrong alignment on FJackActionEffectDecal");
static_assert(sizeof(FJackActionEffectDecal) == 0x000018, "Wrong size on FJackActionEffectDecal");
static_assert(offsetof(FJackActionEffectDecal, Effect) == 0x000000, "Member 'FJackActionEffectDecal::Effect' has a wrong offset!");
static_assert(offsetof(FJackActionEffectDecal, BumpNormalSize) == 0x000008, "Member 'FJackActionEffectDecal::BumpNormalSize' has a wrong offset!");
static_assert(offsetof(FJackActionEffectDecal, TrailDecalMinHeight) == 0x00000C, "Member 'FJackActionEffectDecal::TrailDecalMinHeight' has a wrong offset!");
static_assert(offsetof(FJackActionEffectDecal, TrailDecalMinDistance) == 0x000010, "Member 'FJackActionEffectDecal::TrailDecalMinDistance' has a wrong offset!");
static_assert(offsetof(FJackActionEffectDecal, TrailDecalAddSize) == 0x000014, "Member 'FJackActionEffectDecal::TrailDecalAddSize' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableBattleFukidasiPeculiarWords
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableBattleFukidasiPeculiarWords final : public FTableRowBase
{
public:
	bool                                          bMonsterGroupBig;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterGroupSmall;                                // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterGroupMetal;                                // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterGroupDance;                                // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterGroupHorror;                               // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterGroupInsect;                               // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterGroupCat;                                  // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterGroupBird;                                 // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterGroupMagic;                                // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterGroupWarrior;                              // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterGroupMimic;                                // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterGroupUru1;                                 // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterGroupUru2;                                 // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterGroupUru;                                  // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterGroupNiz;                                  // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterGroupHome;                                 // 0x0017(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterGroupKira;                                 // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterGroupYaruki;                               // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterGroupTyui;                                 // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterGroupReisei;                               // 0x001B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterGroupAseri;                                // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterGroupIkari;                                // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterGroupKansya;                               // 0x001E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterGroupYorokobi;                             // 0x001F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterGroupKonran;                               // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableBattleFukidasiPeculiarWords) == 0x000008, "Wrong alignment on FJackDataTableBattleFukidasiPeculiarWords");
static_assert(sizeof(FJackDataTableBattleFukidasiPeculiarWords) == 0x000028, "Wrong size on FJackDataTableBattleFukidasiPeculiarWords");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupBig) == 0x000008, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupBig' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupSmall) == 0x000009, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupSmall' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupMetal) == 0x00000A, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupMetal' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupDance) == 0x00000B, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupDance' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupHorror) == 0x00000C, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupHorror' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupInsect) == 0x00000D, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupInsect' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupCat) == 0x00000E, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupCat' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupBird) == 0x00000F, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupBird' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupMagic) == 0x000010, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupMagic' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupWarrior) == 0x000011, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupWarrior' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupMimic) == 0x000012, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupMimic' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupUru1) == 0x000013, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupUru1' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupUru2) == 0x000014, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupUru2' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupUru) == 0x000015, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupUru' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupNiz) == 0x000016, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupNiz' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupHome) == 0x000017, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupHome' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupKira) == 0x000018, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupKira' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupYaruki) == 0x000019, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupYaruki' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupTyui) == 0x00001A, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupTyui' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupReisei) == 0x00001B, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupReisei' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupAseri) == 0x00001C, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupAseri' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupIkari) == 0x00001D, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupIkari' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupKansya) == 0x00001E, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupKansya' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupYorokobi) == 0x00001F, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupYorokobi' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasiPeculiarWords, bMonsterGroupKonran) == 0x000020, "Member 'FJackDataTableBattleFukidasiPeculiarWords::bMonsterGroupKonran' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_UmaRaceEDT_RankB_H
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceEDT_RankB_H final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceEDT_RankB_H) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceEDT_RankB_H");
static_assert(sizeof(FJackLDT_UmaRaceEDT_RankB_H) == 0x000010, "Wrong size on FJackLDT_UmaRaceEDT_RankB_H");

// ScriptStruct JackGame.JackEnableStringStructs
// 0x0018 (0x0018 - 0x0000)
struct FJackEnableStringStructs final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackEnableStringStructs) == 0x000008, "Wrong alignment on FJackEnableStringStructs");
static_assert(sizeof(FJackEnableStringStructs) == 0x000018, "Wrong size on FJackEnableStringStructs");
static_assert(offsetof(FJackEnableStringStructs, Command) == 0x000000, "Member 'FJackEnableStringStructs::Command' has a wrong offset!");
static_assert(offsetof(FJackEnableStringStructs, bEnable) == 0x000010, "Member 'FJackEnableStringStructs::bEnable' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotReelParam
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FJackMeosiSlotReelParam final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMeosiSlotReelParam) == 0x000004, "Wrong alignment on FJackMeosiSlotReelParam");
static_assert(sizeof(FJackMeosiSlotReelParam) == 0x000010, "Wrong size on FJackMeosiSlotReelParam");

// ScriptStruct JackGame.JackLDT_RtEx_HrSkirt_A_AverageRot2
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HrSkirt_A_AverageRot2 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HrSkirt_A_AverageRot2) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HrSkirt_A_AverageRot2");
static_assert(sizeof(FJackLDT_RtEx_HrSkirt_A_AverageRot2) == 0x000010, "Wrong size on FJackLDT_RtEx_HrSkirt_A_AverageRot2");

// ScriptStruct JackGame.JackBlendablePostProcessSettingsData
// 0x0010 (0x0010 - 0x0000)
struct FJackBlendablePostProcessSettingsData final
{
public:
	TWeakObjectPtr<class UJackPlayerCameraComponent> CameraComponent;                                   // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UMaterialInterface>      Material;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackBlendablePostProcessSettingsData) == 0x000004, "Wrong alignment on FJackBlendablePostProcessSettingsData");
static_assert(sizeof(FJackBlendablePostProcessSettingsData) == 0x000010, "Wrong size on FJackBlendablePostProcessSettingsData");
static_assert(offsetof(FJackBlendablePostProcessSettingsData, CameraComponent) == 0x000000, "Member 'FJackBlendablePostProcessSettingsData::CameraComponent' has a wrong offset!");
static_assert(offsetof(FJackBlendablePostProcessSettingsData, Material) == 0x000008, "Member 'FJackBlendablePostProcessSettingsData::Material' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_PokerTakaraBakoCoin
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PokerTakaraBakoCoin final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PokerTakaraBakoCoin) == 0x000008, "Wrong alignment on FJackLDT_PokerTakaraBakoCoin");
static_assert(sizeof(FJackLDT_PokerTakaraBakoCoin) == 0x000010, "Wrong size on FJackLDT_PokerTakaraBakoCoin");

// ScriptStruct JackGame.JackActionEffectParticles
// 0x0028 (0x0028 - 0x0000)
struct FJackActionEffectParticles final
{
public:
	class UParticleSystem*                        ParticlesHuman;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ParticlesLL;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ParticlesL;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ParticlesM;                                        // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ParticlesS;                                        // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackActionEffectParticles) == 0x000008, "Wrong alignment on FJackActionEffectParticles");
static_assert(sizeof(FJackActionEffectParticles) == 0x000028, "Wrong size on FJackActionEffectParticles");
static_assert(offsetof(FJackActionEffectParticles, ParticlesHuman) == 0x000000, "Member 'FJackActionEffectParticles::ParticlesHuman' has a wrong offset!");
static_assert(offsetof(FJackActionEffectParticles, ParticlesLL) == 0x000008, "Member 'FJackActionEffectParticles::ParticlesLL' has a wrong offset!");
static_assert(offsetof(FJackActionEffectParticles, ParticlesL) == 0x000010, "Member 'FJackActionEffectParticles::ParticlesL' has a wrong offset!");
static_assert(offsetof(FJackActionEffectParticles, ParticlesM) == 0x000018, "Member 'FJackActionEffectParticles::ParticlesM' has a wrong offset!");
static_assert(offsetof(FJackActionEffectParticles, ParticlesS) == 0x000020, "Member 'FJackActionEffectParticles::ParticlesS' has a wrong offset!");

// ScriptStruct JackGame.JackPostProcessEffectParam
// 0x0010 (0x0010 - 0x0000)
struct FJackPostProcessEffectParam final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveBase*                             ParamCurve;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackPostProcessEffectParam) == 0x000008, "Wrong alignment on FJackPostProcessEffectParam");
static_assert(sizeof(FJackPostProcessEffectParam) == 0x000010, "Wrong size on FJackPostProcessEffectParam");
static_assert(offsetof(FJackPostProcessEffectParam, ParamName) == 0x000000, "Member 'FJackPostProcessEffectParam::ParamName' has a wrong offset!");
static_assert(offsetof(FJackPostProcessEffectParam, ParamCurve) == 0x000008, "Member 'FJackPostProcessEffectParam::ParamCurve' has a wrong offset!");

// ScriptStruct JackGame.JackPostProcessEffect
// 0x0020 (0x0020 - 0x0000)
struct FJackPostProcessEffect final
{
public:
	class UMaterialParameterCollection*           MPC;                                               // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJackPostProcessEffectParam>    AnimParams;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackPostProcessEffect) == 0x000008, "Wrong alignment on FJackPostProcessEffect");
static_assert(sizeof(FJackPostProcessEffect) == 0x000020, "Wrong size on FJackPostProcessEffect");
static_assert(offsetof(FJackPostProcessEffect, MPC) == 0x000000, "Member 'FJackPostProcessEffect::MPC' has a wrong offset!");
static_assert(offsetof(FJackPostProcessEffect, Material) == 0x000008, "Member 'FJackPostProcessEffect::Material' has a wrong offset!");
static_assert(offsetof(FJackPostProcessEffect, AnimParams) == 0x000010, "Member 'FJackPostProcessEffect::AnimParams' has a wrong offset!");

// ScriptStruct JackGame.JackCameraShakeParam
// 0x0010 (0x0010 - 0x0000)
struct FJackCameraShakeParam final
{
public:
	TSubclassOf<class UCameraShake>               CameraShake;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackCameraShakeParam) == 0x000008, "Wrong alignment on FJackCameraShakeParam");
static_assert(sizeof(FJackCameraShakeParam) == 0x000010, "Wrong size on FJackCameraShakeParam");
static_assert(offsetof(FJackCameraShakeParam, CameraShake) == 0x000000, "Member 'FJackCameraShakeParam::CameraShake' has a wrong offset!");
static_assert(offsetof(FJackCameraShakeParam, Scale) == 0x000008, "Member 'FJackCameraShakeParam::Scale' has a wrong offset!");

// ScriptStruct JackGame.JackActionEffectEffect
// 0x00A0 (0x00A0 - 0x0000)
struct FJackActionEffectEffect final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeleteDelayTime;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Particle;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJackActionEffectParticles             SizeParticles;                                     // 0x0018(0x0028)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionEffectSpawnTargetType              SpawnTargetType;                                   // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IgnoreRadiusFromTarget;                            // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpawnSocket;                                       // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocation;                                  // 0x0058(0x000C)(Edit, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0064(0x000C)(Edit, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bAttach;                                           // 0x0070(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               AttachLocationType;                                // 0x0071(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAbsoluteLocation;                                 // 0x0072(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAbsoluteRotation;                                 // 0x0073(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAbsoluteScale;                                    // 0x0074(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCameraLocation;                                   // 0x0075(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeAffectedByMaterialAnimation;                    // 0x0076(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkelVertSurf;                                     // 0x0077(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJackPostProcessEffect>         PostProcessEffects;                                // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UJackCollideEffect>         DecalEffect;                                       // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJackCameraShakeParam>          CameraShakes;                                      // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackActionEffectEffect) == 0x000008, "Wrong alignment on FJackActionEffectEffect");
static_assert(sizeof(FJackActionEffectEffect) == 0x0000A0, "Wrong size on FJackActionEffectEffect");
static_assert(offsetof(FJackActionEffectEffect, StaticMesh) == 0x000000, "Member 'FJackActionEffectEffect::StaticMesh' has a wrong offset!");
static_assert(offsetof(FJackActionEffectEffect, DeleteDelayTime) == 0x000008, "Member 'FJackActionEffectEffect::DeleteDelayTime' has a wrong offset!");
static_assert(offsetof(FJackActionEffectEffect, Particle) == 0x000010, "Member 'FJackActionEffectEffect::Particle' has a wrong offset!");
static_assert(offsetof(FJackActionEffectEffect, SizeParticles) == 0x000018, "Member 'FJackActionEffectEffect::SizeParticles' has a wrong offset!");
static_assert(offsetof(FJackActionEffectEffect, Sound) == 0x000040, "Member 'FJackActionEffectEffect::Sound' has a wrong offset!");
static_assert(offsetof(FJackActionEffectEffect, SpawnTargetType) == 0x000048, "Member 'FJackActionEffectEffect::SpawnTargetType' has a wrong offset!");
static_assert(offsetof(FJackActionEffectEffect, IgnoreRadiusFromTarget) == 0x00004C, "Member 'FJackActionEffectEffect::IgnoreRadiusFromTarget' has a wrong offset!");
static_assert(offsetof(FJackActionEffectEffect, SpawnSocket) == 0x000050, "Member 'FJackActionEffectEffect::SpawnSocket' has a wrong offset!");
static_assert(offsetof(FJackActionEffectEffect, RelativeLocation) == 0x000058, "Member 'FJackActionEffectEffect::RelativeLocation' has a wrong offset!");
static_assert(offsetof(FJackActionEffectEffect, RelativeRotation) == 0x000064, "Member 'FJackActionEffectEffect::RelativeRotation' has a wrong offset!");
static_assert(offsetof(FJackActionEffectEffect, bAttach) == 0x000070, "Member 'FJackActionEffectEffect::bAttach' has a wrong offset!");
static_assert(offsetof(FJackActionEffectEffect, AttachLocationType) == 0x000071, "Member 'FJackActionEffectEffect::AttachLocationType' has a wrong offset!");
static_assert(offsetof(FJackActionEffectEffect, bAbsoluteLocation) == 0x000072, "Member 'FJackActionEffectEffect::bAbsoluteLocation' has a wrong offset!");
static_assert(offsetof(FJackActionEffectEffect, bAbsoluteRotation) == 0x000073, "Member 'FJackActionEffectEffect::bAbsoluteRotation' has a wrong offset!");
static_assert(offsetof(FJackActionEffectEffect, bAbsoluteScale) == 0x000074, "Member 'FJackActionEffectEffect::bAbsoluteScale' has a wrong offset!");
static_assert(offsetof(FJackActionEffectEffect, bCameraLocation) == 0x000075, "Member 'FJackActionEffectEffect::bCameraLocation' has a wrong offset!");
static_assert(offsetof(FJackActionEffectEffect, bBeAffectedByMaterialAnimation) == 0x000076, "Member 'FJackActionEffectEffect::bBeAffectedByMaterialAnimation' has a wrong offset!");
static_assert(offsetof(FJackActionEffectEffect, bSkelVertSurf) == 0x000077, "Member 'FJackActionEffectEffect::bSkelVertSurf' has a wrong offset!");
static_assert(offsetof(FJackActionEffectEffect, PostProcessEffects) == 0x000078, "Member 'FJackActionEffectEffect::PostProcessEffects' has a wrong offset!");
static_assert(offsetof(FJackActionEffectEffect, DecalEffect) == 0x000088, "Member 'FJackActionEffectEffect::DecalEffect' has a wrong offset!");
static_assert(offsetof(FJackActionEffectEffect, CameraShakes) == 0x000090, "Member 'FJackActionEffectEffect::CameraShakes' has a wrong offset!");

// ScriptStruct JackGame.JackBoneHiddenPresetNameList
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackBoneHiddenPresetNameList final
{
public:
	class FName                                   PresetName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHidden;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHiddenWhenAnimEnd;                              // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHiddenWhenNotifyEnd;                            // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackBoneHiddenPresetNameList) == 0x000008, "Wrong alignment on FJackBoneHiddenPresetNameList");
static_assert(sizeof(FJackBoneHiddenPresetNameList) == 0x000010, "Wrong size on FJackBoneHiddenPresetNameList");
static_assert(offsetof(FJackBoneHiddenPresetNameList, PresetName) == 0x000000, "Member 'FJackBoneHiddenPresetNameList::PresetName' has a wrong offset!");
static_assert(offsetof(FJackBoneHiddenPresetNameList, bIsHidden) == 0x000008, "Member 'FJackBoneHiddenPresetNameList::bIsHidden' has a wrong offset!");
static_assert(offsetof(FJackBoneHiddenPresetNameList, bIsHiddenWhenAnimEnd) == 0x000009, "Member 'FJackBoneHiddenPresetNameList::bIsHiddenWhenAnimEnd' has a wrong offset!");
static_assert(offsetof(FJackBoneHiddenPresetNameList, bIsHiddenWhenNotifyEnd) == 0x00000A, "Member 'FJackBoneHiddenPresetNameList::bIsHiddenWhenNotifyEnd' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_N004_AverageRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_N004_AverageRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_N004_AverageRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_N004_AverageRot");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_N004_AverageRot) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_N004_AverageRot");

// ScriptStruct JackGame.JackLookAtBoneDirectionalSetting
// 0x0008 (0x0008 - 0x0000)
struct FJackLookAtBoneDirectionalSetting final
{
public:
	float                                         MaxAngle;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleRate;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackLookAtBoneDirectionalSetting) == 0x000004, "Wrong alignment on FJackLookAtBoneDirectionalSetting");
static_assert(sizeof(FJackLookAtBoneDirectionalSetting) == 0x000008, "Wrong size on FJackLookAtBoneDirectionalSetting");
static_assert(offsetof(FJackLookAtBoneDirectionalSetting, MaxAngle) == 0x000000, "Member 'FJackLookAtBoneDirectionalSetting::MaxAngle' has a wrong offset!");
static_assert(offsetof(FJackLookAtBoneDirectionalSetting, AngleRate) == 0x000004, "Member 'FJackLookAtBoneDirectionalSetting::AngleRate' has a wrong offset!");

// ScriptStruct JackGame.JackLookAtBoneSetting
// 0x0024 (0x0024 - 0x0000)
struct FJackLookAtBoneSetting final
{
public:
	struct FJackLookAtBoneDirectionalSetting      YawLeft;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackLookAtBoneDirectionalSetting      YawRight;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackLookAtBoneDirectionalSetting      PitchUp;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackLookAtBoneDirectionalSetting      PitchDown;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RollRate;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackLookAtBoneSetting) == 0x000004, "Wrong alignment on FJackLookAtBoneSetting");
static_assert(sizeof(FJackLookAtBoneSetting) == 0x000024, "Wrong size on FJackLookAtBoneSetting");
static_assert(offsetof(FJackLookAtBoneSetting, YawLeft) == 0x000000, "Member 'FJackLookAtBoneSetting::YawLeft' has a wrong offset!");
static_assert(offsetof(FJackLookAtBoneSetting, YawRight) == 0x000008, "Member 'FJackLookAtBoneSetting::YawRight' has a wrong offset!");
static_assert(offsetof(FJackLookAtBoneSetting, PitchUp) == 0x000010, "Member 'FJackLookAtBoneSetting::PitchUp' has a wrong offset!");
static_assert(offsetof(FJackLookAtBoneSetting, PitchDown) == 0x000018, "Member 'FJackLookAtBoneSetting::PitchDown' has a wrong offset!");
static_assert(offsetof(FJackLookAtBoneSetting, RollRate) == 0x000020, "Member 'FJackLookAtBoneSetting::RollRate' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_AttachedProps_Monster
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AttachedProps_Monster final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AttachedProps_Monster) == 0x000008, "Wrong alignment on FJackLDT_AttachedProps_Monster");
static_assert(sizeof(FJackLDT_AttachedProps_Monster) == 0x000010, "Wrong size on FJackLDT_AttachedProps_Monster");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleC_001
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleC_001 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleC_001) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleC_001");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleC_001) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleC_001");

// ScriptStruct JackGame.JackFukubikiLotteryInfo
// 0x0008 (0x0008 - 0x0000)
struct FJackFukubikiLotteryInfo final
{
public:
	EJackFukubikiLotteryResult                    Result;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Rate;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackFukubikiLotteryInfo) == 0x000004, "Wrong alignment on FJackFukubikiLotteryInfo");
static_assert(sizeof(FJackFukubikiLotteryInfo) == 0x000008, "Wrong size on FJackFukubikiLotteryInfo");
static_assert(offsetof(FJackFukubikiLotteryInfo, Result) == 0x000000, "Member 'FJackFukubikiLotteryInfo::Result' has a wrong offset!");
static_assert(offsetof(FJackFukubikiLotteryInfo, Rate) == 0x000004, "Member 'FJackFukubikiLotteryInfo::Rate' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_P001_Skirt_up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_P001_Skirt_up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_P001_Skirt_up) == 0x000008, "Wrong alignment on FJackLDT_RtEx_P001_Skirt_up");
static_assert(sizeof(FJackLDT_RtEx_P001_Skirt_up) == 0x000010, "Wrong size on FJackLDT_RtEx_P001_Skirt_up");

// ScriptStruct JackGame.JackDataTableLetterList
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableLetterList final : public FTableRowBase
{
public:
	int32                                         Unicode;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AlternativeLetter;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPatchimType                              PatchimType;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableLetterList) == 0x000008, "Wrong alignment on FJackDataTableLetterList");
static_assert(sizeof(FJackDataTableLetterList) == 0x000018, "Wrong size on FJackDataTableLetterList");
static_assert(offsetof(FJackDataTableLetterList, Unicode) == 0x000008, "Member 'FJackDataTableLetterList::Unicode' has a wrong offset!");
static_assert(offsetof(FJackDataTableLetterList, AlternativeLetter) == 0x00000C, "Member 'FJackDataTableLetterList::AlternativeLetter' has a wrong offset!");
static_assert(offsetof(FJackDataTableLetterList, PatchimType) == 0x000010, "Member 'FJackDataTableLetterList::PatchimType' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Vehicle_V104_E001_Sync
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Vehicle_V104_E001_Sync final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Vehicle_V104_E001_Sync) == 0x000008, "Wrong alignment on FJackLDT_Vehicle_V104_E001_Sync");
static_assert(sizeof(FJackLDT_Vehicle_V104_E001_Sync) == 0x000010, "Wrong size on FJackLDT_Vehicle_V104_E001_Sync");

// ScriptStruct JackGame.JackLDT_RtEx_HrSkirt_A_Lerp2BonesAndClamp
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HrSkirt_A_Lerp2BonesAndClamp final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HrSkirt_A_Lerp2BonesAndClamp) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HrSkirt_A_Lerp2BonesAndClamp");
static_assert(sizeof(FJackLDT_RtEx_HrSkirt_A_Lerp2BonesAndClamp) == 0x000010, "Wrong size on FJackLDT_RtEx_HrSkirt_A_Lerp2BonesAndClamp");

// ScriptStruct JackGame.JackActionEffectMovementPosition
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FJackActionEffectMovementPosition final
{
public:
	EJackActionEffectSpawnTargetType              TargetType;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetSocket;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocation;                                  // 0x0010(0x000C)(Edit, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x001C(0x000C)(Edit, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	EJackActionEffectAxis                         FrontAxis;                                         // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackActionEffectMovementPosition) == 0x000008, "Wrong alignment on FJackActionEffectMovementPosition");
static_assert(sizeof(FJackActionEffectMovementPosition) == 0x000030, "Wrong size on FJackActionEffectMovementPosition");
static_assert(offsetof(FJackActionEffectMovementPosition, TargetType) == 0x000000, "Member 'FJackActionEffectMovementPosition::TargetType' has a wrong offset!");
static_assert(offsetof(FJackActionEffectMovementPosition, TargetSocket) == 0x000008, "Member 'FJackActionEffectMovementPosition::TargetSocket' has a wrong offset!");
static_assert(offsetof(FJackActionEffectMovementPosition, RelativeLocation) == 0x000010, "Member 'FJackActionEffectMovementPosition::RelativeLocation' has a wrong offset!");
static_assert(offsetof(FJackActionEffectMovementPosition, RelativeRotation) == 0x00001C, "Member 'FJackActionEffectMovementPosition::RelativeRotation' has a wrong offset!");
static_assert(offsetof(FJackActionEffectMovementPosition, FrontAxis) == 0x000028, "Member 'FJackActionEffectMovementPosition::FrontAxis' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1L_P001_AR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1L_P001_AR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1L_P001_AR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1L_P001_AR");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1L_P001_AR) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1L_P001_AR");

// ScriptStruct JackGame.JackArmIKResult
// 0x0040 (0x0040 - 0x0000)
struct FJackArmIKResult final
{
public:
	struct FTransform                             EffectorTransform;                                 // 0x0000(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackArmIKResult) == 0x000010, "Wrong alignment on FJackArmIKResult");
static_assert(sizeof(FJackArmIKResult) == 0x000040, "Wrong size on FJackArmIKResult");
static_assert(offsetof(FJackArmIKResult, EffectorTransform) == 0x000000, "Member 'FJackArmIKResult::EffectorTransform' has a wrong offset!");
static_assert(offsetof(FJackArmIKResult, Alpha) == 0x000030, "Member 'FJackArmIKResult::Alpha' has a wrong offset!");

// ScriptStruct JackGame.JackRubyTagData
// 0x0018 (0x0018 - 0x0000)
struct FJackRubyTagData final
{
public:
	class FString                                 Ruby;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Start;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackRubyTagData) == 0x000008, "Wrong alignment on FJackRubyTagData");
static_assert(sizeof(FJackRubyTagData) == 0x000018, "Wrong size on FJackRubyTagData");
static_assert(offsetof(FJackRubyTagData, Ruby) == 0x000000, "Member 'FJackRubyTagData::Ruby' has a wrong offset!");
static_assert(offsetof(FJackRubyTagData, Start) == 0x000010, "Member 'FJackRubyTagData::Start' has a wrong offset!");
static_assert(offsetof(FJackRubyTagData, Count) == 0x000014, "Member 'FJackRubyTagData::Count' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableRuby
// 0x0040 (0x0048 - 0x0008)
struct FJackDataTableRuby final : public FTableRowBase
{
public:
	class FString                                 Word;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ruby;                                              // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WordLength;                                        // 0x0028(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RubyLength;                                        // 0x002C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRubyTag;                                         // 0x0030(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackRubyTagData>               RubyTagData;                                       // 0x0038(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableRuby) == 0x000008, "Wrong alignment on FJackDataTableRuby");
static_assert(sizeof(FJackDataTableRuby) == 0x000048, "Wrong size on FJackDataTableRuby");
static_assert(offsetof(FJackDataTableRuby, Word) == 0x000008, "Member 'FJackDataTableRuby::Word' has a wrong offset!");
static_assert(offsetof(FJackDataTableRuby, Ruby) == 0x000018, "Member 'FJackDataTableRuby::Ruby' has a wrong offset!");
static_assert(offsetof(FJackDataTableRuby, WordLength) == 0x000028, "Member 'FJackDataTableRuby::WordLength' has a wrong offset!");
static_assert(offsetof(FJackDataTableRuby, RubyLength) == 0x00002C, "Member 'FJackDataTableRuby::RubyLength' has a wrong offset!");
static_assert(offsetof(FJackDataTableRuby, IsRubyTag) == 0x000030, "Member 'FJackDataTableRuby::IsRubyTag' has a wrong offset!");
static_assert(offsetof(FJackDataTableRuby, RubyTagData) == 0x000038, "Member 'FJackDataTableRuby::RubyTagData' has a wrong offset!");

// ScriptStruct JackGame.JackPokerDebugTreasureInfo
// 0x0028 (0x0028 - 0x0000)
struct FJackPokerDebugTreasureInfo final
{
public:
	TArray<class FName>                           ItemName;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 TreasureNum;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         StartIndex;                                        // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackPokerDebugTreasureInfo) == 0x000008, "Wrong alignment on FJackPokerDebugTreasureInfo");
static_assert(sizeof(FJackPokerDebugTreasureInfo) == 0x000028, "Wrong size on FJackPokerDebugTreasureInfo");
static_assert(offsetof(FJackPokerDebugTreasureInfo, ItemName) == 0x000000, "Member 'FJackPokerDebugTreasureInfo::ItemName' has a wrong offset!");
static_assert(offsetof(FJackPokerDebugTreasureInfo, TreasureNum) == 0x000010, "Member 'FJackPokerDebugTreasureInfo::TreasureNum' has a wrong offset!");
static_assert(offsetof(FJackPokerDebugTreasureInfo, StartIndex) == 0x000020, "Member 'FJackPokerDebugTreasureInfo::StartIndex' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotReelLamp_Anim05
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotReelLamp_Anim05 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotReelLamp_Anim05) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotReelLamp_Anim05");
static_assert(sizeof(FJackLDT_MeosiSlotReelLamp_Anim05) == 0x000010, "Wrong size on FJackLDT_MeosiSlotReelLamp_Anim05");

// ScriptStruct JackGame.JackActionEffectTimelineEventEntry
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackActionEffectTimelineEventEntry final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionEffectEvent                        Event;                                             // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Parameter;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackActionEffectTimelineEventEntry) == 0x000008, "Wrong alignment on FJackActionEffectTimelineEventEntry");
static_assert(sizeof(FJackActionEffectTimelineEventEntry) == 0x000010, "Wrong size on FJackActionEffectTimelineEventEntry");
static_assert(offsetof(FJackActionEffectTimelineEventEntry, Time) == 0x000000, "Member 'FJackActionEffectTimelineEventEntry::Time' has a wrong offset!");
static_assert(offsetof(FJackActionEffectTimelineEventEntry, Event) == 0x000004, "Member 'FJackActionEffectTimelineEventEntry::Event' has a wrong offset!");
static_assert(offsetof(FJackActionEffectTimelineEventEntry, Parameter) == 0x000008, "Member 'FJackActionEffectTimelineEventEntry::Parameter' has a wrong offset!");

// ScriptStruct JackGame.JackGroupID_Summarize
// 0x0010 (0x0010 - 0x0000)
struct FJackGroupID_Summarize final
{
public:
	TArray<class FName>                           Ids;                                               // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackGroupID_Summarize) == 0x000008, "Wrong alignment on FJackGroupID_Summarize");
static_assert(sizeof(FJackGroupID_Summarize) == 0x000010, "Wrong size on FJackGroupID_Summarize");
static_assert(offsetof(FJackGroupID_Summarize, Ids) == 0x000000, "Member 'FJackGroupID_Summarize::Ids' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_PokerCardTexture
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PokerCardTexture final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PokerCardTexture) == 0x000008, "Wrong alignment on FJackLDT_PokerCardTexture");
static_assert(sizeof(FJackLDT_PokerCardTexture) == 0x000010, "Wrong size on FJackLDT_PokerCardTexture");

// ScriptStruct JackGame.JackBattleFieldFoliageDitherDetailInfo
// 0x000C (0x000C - 0x0000)
struct FJackBattleFieldFoliageDitherDetailInfo final
{
public:
	float                                         OpacityNear;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Opacity;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearDistanceMul;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackBattleFieldFoliageDitherDetailInfo) == 0x000004, "Wrong alignment on FJackBattleFieldFoliageDitherDetailInfo");
static_assert(sizeof(FJackBattleFieldFoliageDitherDetailInfo) == 0x00000C, "Wrong size on FJackBattleFieldFoliageDitherDetailInfo");
static_assert(offsetof(FJackBattleFieldFoliageDitherDetailInfo, OpacityNear) == 0x000000, "Member 'FJackBattleFieldFoliageDitherDetailInfo::OpacityNear' has a wrong offset!");
static_assert(offsetof(FJackBattleFieldFoliageDitherDetailInfo, Opacity) == 0x000004, "Member 'FJackBattleFieldFoliageDitherDetailInfo::Opacity' has a wrong offset!");
static_assert(offsetof(FJackBattleFieldFoliageDitherDetailInfo, NearDistanceMul) == 0x000008, "Member 'FJackBattleFieldFoliageDitherDetailInfo::NearDistanceMul' has a wrong offset!");

// ScriptStruct JackGame.JackMapJumpVolumeInfo
// 0x0007 (0x0007 - 0x0000)
struct FJackMapJumpVolumeInfo final
{
public:
	EJackFadeColor                                FadeColor;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackFadeTime                                 FadeTime;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBGMControl                               BGMControl;                                        // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackFadeTime                                 BGMFadeTime;                                       // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayMapChangeAnimation;                           // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnmountVehicle;                                   // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMapChangeSound                           PlayMapChangeSound;                                // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMapJumpVolumeInfo) == 0x000001, "Wrong alignment on FJackMapJumpVolumeInfo");
static_assert(sizeof(FJackMapJumpVolumeInfo) == 0x000007, "Wrong size on FJackMapJumpVolumeInfo");
static_assert(offsetof(FJackMapJumpVolumeInfo, FadeColor) == 0x000000, "Member 'FJackMapJumpVolumeInfo::FadeColor' has a wrong offset!");
static_assert(offsetof(FJackMapJumpVolumeInfo, FadeTime) == 0x000001, "Member 'FJackMapJumpVolumeInfo::FadeTime' has a wrong offset!");
static_assert(offsetof(FJackMapJumpVolumeInfo, BGMControl) == 0x000002, "Member 'FJackMapJumpVolumeInfo::BGMControl' has a wrong offset!");
static_assert(offsetof(FJackMapJumpVolumeInfo, BGMFadeTime) == 0x000003, "Member 'FJackMapJumpVolumeInfo::BGMFadeTime' has a wrong offset!");
static_assert(offsetof(FJackMapJumpVolumeInfo, bPlayMapChangeAnimation) == 0x000004, "Member 'FJackMapJumpVolumeInfo::bPlayMapChangeAnimation' has a wrong offset!");
static_assert(offsetof(FJackMapJumpVolumeInfo, bUnmountVehicle) == 0x000005, "Member 'FJackMapJumpVolumeInfo::bUnmountVehicle' has a wrong offset!");
static_assert(offsetof(FJackMapJumpVolumeInfo, PlayMapChangeSound) == 0x000006, "Member 'FJackMapJumpVolumeInfo::PlayMapChangeSound' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_F19
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_F19 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_F19) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_F19");
static_assert(sizeof(FJackLDT_MonsterDeploy_F19) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_F19");

// ScriptStruct JackGame.JackLDT_Pose_P004Hair
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_P004Hair final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_P004Hair) == 0x000008, "Wrong alignment on FJackLDT_Pose_P004Hair");
static_assert(sizeof(FJackLDT_Pose_P004Hair) == 0x000010, "Wrong size on FJackLDT_Pose_P004Hair");

// ScriptStruct JackGame.JackDataTableTenseiParams2D
// 0x0030 (0x0038 - 0x0008)
struct FJackDataTableTenseiParams2D final : public FTableRowBase
{
public:
	class FName                                   Category;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FlagId;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubFlagId;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Arg1;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Arg2;                                              // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Arg3;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Cmds;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableTenseiParams2D) == 0x000008, "Wrong alignment on FJackDataTableTenseiParams2D");
static_assert(sizeof(FJackDataTableTenseiParams2D) == 0x000038, "Wrong size on FJackDataTableTenseiParams2D");
static_assert(offsetof(FJackDataTableTenseiParams2D, Category) == 0x000008, "Member 'FJackDataTableTenseiParams2D::Category' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiParams2D, FlagId) == 0x000010, "Member 'FJackDataTableTenseiParams2D::FlagId' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiParams2D, SubFlagId) == 0x000014, "Member 'FJackDataTableTenseiParams2D::SubFlagId' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiParams2D, Arg1) == 0x000018, "Member 'FJackDataTableTenseiParams2D::Arg1' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiParams2D, Arg2) == 0x00001C, "Member 'FJackDataTableTenseiParams2D::Arg2' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiParams2D, Arg3) == 0x000020, "Member 'FJackDataTableTenseiParams2D::Arg3' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiParams2D, Cmds) == 0x000028, "Member 'FJackDataTableTenseiParams2D::Cmds' has a wrong offset!");

// ScriptStruct JackGame.JackCameraShakeDict
// 0x0010 (0x0010 - 0x0000)
struct FJackCameraShakeDict final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShake>               CameraShakeClass;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackCameraShakeDict) == 0x000008, "Wrong alignment on FJackCameraShakeDict");
static_assert(sizeof(FJackCameraShakeDict) == 0x000010, "Wrong size on FJackCameraShakeDict");
static_assert(offsetof(FJackCameraShakeDict, Name) == 0x000000, "Member 'FJackCameraShakeDict::Name' has a wrong offset!");
static_assert(offsetof(FJackCameraShakeDict, CameraShakeClass) == 0x000008, "Member 'FJackCameraShakeDict::CameraShakeClass' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_InnTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_InnTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_InnTable) == 0x000008, "Wrong alignment on FJackLDT_InnTable");
static_assert(sizeof(FJackLDT_InnTable) == 0x000010, "Wrong size on FJackLDT_InnTable");

// ScriptStruct JackGame.JackDataTableFacialAnimation
// 0x0098 (0x00A0 - 0x0008)
struct FJackDataTableFacialAnimation final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USkeletalMesh>           FaceSkeletalMesh;                                  // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           FacePoses;                                         // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           AdditionalFacePoses;                               // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           CutSceneFacePoses;                                 // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           CutSceneAdditionalFacePoses;                       // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeLookAtAngle_Up;                                 // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeLookAtAngle_Down;                               // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeLookAtAngle_Left;                               // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeLookAtAngle_Right;                              // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ExcludeFacePoseForEyeLookAt;                       // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableFacialAnimation) == 0x000008, "Wrong alignment on FJackDataTableFacialAnimation");
static_assert(sizeof(FJackDataTableFacialAnimation) == 0x0000A0, "Wrong size on FJackDataTableFacialAnimation");
static_assert(offsetof(FJackDataTableFacialAnimation, FaceSkeletalMesh) == 0x000008, "Member 'FJackDataTableFacialAnimation::FaceSkeletalMesh' has a wrong offset!");
static_assert(offsetof(FJackDataTableFacialAnimation, FacePoses) == 0x000020, "Member 'FJackDataTableFacialAnimation::FacePoses' has a wrong offset!");
static_assert(offsetof(FJackDataTableFacialAnimation, AdditionalFacePoses) == 0x000038, "Member 'FJackDataTableFacialAnimation::AdditionalFacePoses' has a wrong offset!");
static_assert(offsetof(FJackDataTableFacialAnimation, CutSceneFacePoses) == 0x000050, "Member 'FJackDataTableFacialAnimation::CutSceneFacePoses' has a wrong offset!");
static_assert(offsetof(FJackDataTableFacialAnimation, CutSceneAdditionalFacePoses) == 0x000068, "Member 'FJackDataTableFacialAnimation::CutSceneAdditionalFacePoses' has a wrong offset!");
static_assert(offsetof(FJackDataTableFacialAnimation, EyeLookAtAngle_Up) == 0x000080, "Member 'FJackDataTableFacialAnimation::EyeLookAtAngle_Up' has a wrong offset!");
static_assert(offsetof(FJackDataTableFacialAnimation, EyeLookAtAngle_Down) == 0x000084, "Member 'FJackDataTableFacialAnimation::EyeLookAtAngle_Down' has a wrong offset!");
static_assert(offsetof(FJackDataTableFacialAnimation, EyeLookAtAngle_Left) == 0x000088, "Member 'FJackDataTableFacialAnimation::EyeLookAtAngle_Left' has a wrong offset!");
static_assert(offsetof(FJackDataTableFacialAnimation, EyeLookAtAngle_Right) == 0x00008C, "Member 'FJackDataTableFacialAnimation::EyeLookAtAngle_Right' has a wrong offset!");
static_assert(offsetof(FJackDataTableFacialAnimation, ExcludeFacePoseForEyeLookAt) == 0x000090, "Member 'FJackDataTableFacialAnimation::ExcludeFacePoseForEyeLookAt' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_UmaRaceEDT_RankD_N
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceEDT_RankD_N final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceEDT_RankD_N) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceEDT_RankD_N");
static_assert(sizeof(FJackLDT_UmaRaceEDT_RankD_N) == 0x000010, "Wrong size on FJackLDT_UmaRaceEDT_RankD_N");

// ScriptStruct JackGame.JackAnimCancelFrameInfo
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FJackAnimCancelFrameInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAnimCancelFrameInfo) == 0x000004, "Wrong alignment on FJackAnimCancelFrameInfo");
static_assert(sizeof(FJackAnimCancelFrameInfo) == 0x000008, "Wrong size on FJackAnimCancelFrameInfo");

// ScriptStruct JackGame.JackFieldAttackDamageEvent
// 0x0008 (0x0018 - 0x0010)
struct FJackFieldAttackDamageEvent final : public FDamageEvent
{
public:
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackFieldAttackDamageEvent) == 0x000008, "Wrong alignment on FJackFieldAttackDamageEvent");
static_assert(sizeof(FJackFieldAttackDamageEvent) == 0x000018, "Wrong size on FJackFieldAttackDamageEvent");

// ScriptStruct JackGame.JackNextActionCameraData
// 0x0020 (0x0020 - 0x0000)
struct FJackNextActionCameraData final
{
public:
	EJackBattleActionCameraPlayConditions         PlayConditions;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpTime;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NextCamera;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackNextActionCameraData) == 0x000008, "Wrong alignment on FJackNextActionCameraData");
static_assert(sizeof(FJackNextActionCameraData) == 0x000020, "Wrong size on FJackNextActionCameraData");
static_assert(offsetof(FJackNextActionCameraData, PlayConditions) == 0x000000, "Member 'FJackNextActionCameraData::PlayConditions' has a wrong offset!");
static_assert(offsetof(FJackNextActionCameraData, Time) == 0x000004, "Member 'FJackNextActionCameraData::Time' has a wrong offset!");
static_assert(offsetof(FJackNextActionCameraData, InterpTime) == 0x000008, "Member 'FJackNextActionCameraData::InterpTime' has a wrong offset!");
static_assert(offsetof(FJackNextActionCameraData, NextCamera) == 0x000010, "Member 'FJackNextActionCameraData::NextCamera' has a wrong offset!");

// ScriptStruct JackGame.JackActionCameraDataTypeDataElementNextCamera
// 0x0010 (0x0010 - 0x0000)
struct FJackActionCameraDataTypeDataElementNextCamera final
{
public:
	TArray<struct FJackNextActionCameraData>      NextCameraNoArray;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackActionCameraDataTypeDataElementNextCamera) == 0x000008, "Wrong alignment on FJackActionCameraDataTypeDataElementNextCamera");
static_assert(sizeof(FJackActionCameraDataTypeDataElementNextCamera) == 0x000010, "Wrong size on FJackActionCameraDataTypeDataElementNextCamera");
static_assert(offsetof(FJackActionCameraDataTypeDataElementNextCamera, NextCameraNoArray) == 0x000000, "Member 'FJackActionCameraDataTypeDataElementNextCamera::NextCameraNoArray' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableUICurrentPlaceInfo
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableUICurrentPlaceInfo final : public FTableRowBase
{
public:
	struct FVector2D                              Position;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableUICurrentPlaceInfo) == 0x000008, "Wrong alignment on FJackDataTableUICurrentPlaceInfo");
static_assert(sizeof(FJackDataTableUICurrentPlaceInfo) == 0x000010, "Wrong size on FJackDataTableUICurrentPlaceInfo");
static_assert(offsetof(FJackDataTableUICurrentPlaceInfo, Position) == 0x000008, "Member 'FJackDataTableUICurrentPlaceInfo::Position' has a wrong offset!");

// ScriptStruct JackGame.JackScreenPercentageSetting
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackScreenPercentageSetting final
{
public:
	class FName                                   TypeName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConsoleModeScreenPercentage;                       // 0x0008(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandheldModeScreenPercentage;                      // 0x000C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDynamicResolution;                                // 0x0010(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackScreenPercentageSetting) == 0x000008, "Wrong alignment on FJackScreenPercentageSetting");
static_assert(sizeof(FJackScreenPercentageSetting) == 0x000018, "Wrong size on FJackScreenPercentageSetting");
static_assert(offsetof(FJackScreenPercentageSetting, TypeName) == 0x000000, "Member 'FJackScreenPercentageSetting::TypeName' has a wrong offset!");
static_assert(offsetof(FJackScreenPercentageSetting, ConsoleModeScreenPercentage) == 0x000008, "Member 'FJackScreenPercentageSetting::ConsoleModeScreenPercentage' has a wrong offset!");
static_assert(offsetof(FJackScreenPercentageSetting, HandheldModeScreenPercentage) == 0x00000C, "Member 'FJackScreenPercentageSetting::HandheldModeScreenPercentage' has a wrong offset!");
static_assert(offsetof(FJackScreenPercentageSetting, bDynamicResolution) == 0x000010, "Member 'FJackScreenPercentageSetting::bDynamicResolution' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotTransitionProbability_CZ
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotTransitionProbability_CZ final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotTransitionProbability_CZ) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotTransitionProbability_CZ");
static_assert(sizeof(FJackLDT_MeosiSlotTransitionProbability_CZ) == 0x000010, "Wrong size on FJackLDT_MeosiSlotTransitionProbability_CZ");

// ScriptStruct JackGame.JackArticleInfo
// 0x0088 (0x0088 - 0x0000)
struct FJackArticleInfo final
{
public:
	EJackNounGender                               Gender;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DefSgl;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IndefSgl;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SglM;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SglF;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SglN;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefPlr;                                            // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IndefPlr;                                          // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IndefPlrIT;                                        // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Plr;                                               // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlrNounFlag;                                       // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ProNounFlag;                                       // 0x0071(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VowelFlag;                                         // 0x0072(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastIsSFlag;                                       // 0x0073(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 List;                                              // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackArticleInfo) == 0x000008, "Wrong alignment on FJackArticleInfo");
static_assert(sizeof(FJackArticleInfo) == 0x000088, "Wrong size on FJackArticleInfo");
static_assert(offsetof(FJackArticleInfo, Gender) == 0x000000, "Member 'FJackArticleInfo::Gender' has a wrong offset!");
static_assert(offsetof(FJackArticleInfo, DefSgl) == 0x000008, "Member 'FJackArticleInfo::DefSgl' has a wrong offset!");
static_assert(offsetof(FJackArticleInfo, IndefSgl) == 0x000010, "Member 'FJackArticleInfo::IndefSgl' has a wrong offset!");
static_assert(offsetof(FJackArticleInfo, SglM) == 0x000018, "Member 'FJackArticleInfo::SglM' has a wrong offset!");
static_assert(offsetof(FJackArticleInfo, SglF) == 0x000028, "Member 'FJackArticleInfo::SglF' has a wrong offset!");
static_assert(offsetof(FJackArticleInfo, SglN) == 0x000038, "Member 'FJackArticleInfo::SglN' has a wrong offset!");
static_assert(offsetof(FJackArticleInfo, DefPlr) == 0x000048, "Member 'FJackArticleInfo::DefPlr' has a wrong offset!");
static_assert(offsetof(FJackArticleInfo, IndefPlr) == 0x000050, "Member 'FJackArticleInfo::IndefPlr' has a wrong offset!");
static_assert(offsetof(FJackArticleInfo, IndefPlrIT) == 0x000058, "Member 'FJackArticleInfo::IndefPlrIT' has a wrong offset!");
static_assert(offsetof(FJackArticleInfo, Plr) == 0x000060, "Member 'FJackArticleInfo::Plr' has a wrong offset!");
static_assert(offsetof(FJackArticleInfo, PlrNounFlag) == 0x000070, "Member 'FJackArticleInfo::PlrNounFlag' has a wrong offset!");
static_assert(offsetof(FJackArticleInfo, ProNounFlag) == 0x000071, "Member 'FJackArticleInfo::ProNounFlag' has a wrong offset!");
static_assert(offsetof(FJackArticleInfo, VowelFlag) == 0x000072, "Member 'FJackArticleInfo::VowelFlag' has a wrong offset!");
static_assert(offsetof(FJackArticleInfo, LastIsSFlag) == 0x000073, "Member 'FJackArticleInfo::LastIsSFlag' has a wrong offset!");
static_assert(offsetof(FJackArticleInfo, List) == 0x000078, "Member 'FJackArticleInfo::List' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableArticleInfo
// 0x0088 (0x0090 - 0x0008)
struct FJackDataTableArticleInfo : public FTableRowBase
{
public:
	struct FJackArticleInfo                       ArticleInfo;                                       // 0x0008(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableArticleInfo) == 0x000008, "Wrong alignment on FJackDataTableArticleInfo");
static_assert(sizeof(FJackDataTableArticleInfo) == 0x000090, "Wrong size on FJackDataTableArticleInfo");
static_assert(offsetof(FJackDataTableArticleInfo, ArticleInfo) == 0x000008, "Member 'FJackDataTableArticleInfo::ArticleInfo' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_PlayerBattleAI
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PlayerBattleAI final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PlayerBattleAI) == 0x000008, "Wrong alignment on FJackLDT_PlayerBattleAI");
static_assert(sizeof(FJackLDT_PlayerBattleAI) == 0x000010, "Wrong size on FJackLDT_PlayerBattleAI");

// ScriptStruct JackGame.JackCharacterCoordEffectContainer
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackCharacterCoordEffectContainer final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackCharacterCoordEffectContainer) == 0x000008, "Wrong alignment on FJackCharacterCoordEffectContainer");
static_assert(sizeof(FJackCharacterCoordEffectContainer) == 0x000010, "Wrong size on FJackCharacterCoordEffectContainer");

// ScriptStruct JackGame.JackCharacterDamageEffectContainer
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackCharacterDamageEffectContainer final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackCharacterDamageEffectContainer) == 0x000008, "Wrong alignment on FJackCharacterDamageEffectContainer");
static_assert(sizeof(FJackCharacterDamageEffectContainer) == 0x000010, "Wrong size on FJackCharacterDamageEffectContainer");

// ScriptStruct JackGame.JackAnimNotify_PlayMaterialAnimation_ApplyParts
// 0x0005 (0x0005 - 0x0000)
struct FJackAnimNotify_PlayMaterialAnimation_ApplyParts final
{
public:
	bool                                          bApplyCharacterBody;                               // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyRightWeaponBody;                             // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyRightWeaponCase;                             // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyLeftWeaponBody;                              // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyLeftWeaponCase;                              // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackAnimNotify_PlayMaterialAnimation_ApplyParts) == 0x000001, "Wrong alignment on FJackAnimNotify_PlayMaterialAnimation_ApplyParts");
static_assert(sizeof(FJackAnimNotify_PlayMaterialAnimation_ApplyParts) == 0x000005, "Wrong size on FJackAnimNotify_PlayMaterialAnimation_ApplyParts");
static_assert(offsetof(FJackAnimNotify_PlayMaterialAnimation_ApplyParts, bApplyCharacterBody) == 0x000000, "Member 'FJackAnimNotify_PlayMaterialAnimation_ApplyParts::bApplyCharacterBody' has a wrong offset!");
static_assert(offsetof(FJackAnimNotify_PlayMaterialAnimation_ApplyParts, bApplyRightWeaponBody) == 0x000001, "Member 'FJackAnimNotify_PlayMaterialAnimation_ApplyParts::bApplyRightWeaponBody' has a wrong offset!");
static_assert(offsetof(FJackAnimNotify_PlayMaterialAnimation_ApplyParts, bApplyRightWeaponCase) == 0x000002, "Member 'FJackAnimNotify_PlayMaterialAnimation_ApplyParts::bApplyRightWeaponCase' has a wrong offset!");
static_assert(offsetof(FJackAnimNotify_PlayMaterialAnimation_ApplyParts, bApplyLeftWeaponBody) == 0x000003, "Member 'FJackAnimNotify_PlayMaterialAnimation_ApplyParts::bApplyLeftWeaponBody' has a wrong offset!");
static_assert(offsetof(FJackAnimNotify_PlayMaterialAnimation_ApplyParts, bApplyLeftWeaponCase) == 0x000004, "Member 'FJackAnimNotify_PlayMaterialAnimation_ApplyParts::bApplyLeftWeaponCase' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_SlotMamonoNormalRoleDataTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_SlotMamonoNormalRoleDataTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_SlotMamonoNormalRoleDataTable) == 0x000008, "Wrong alignment on FJackLDT_SlotMamonoNormalRoleDataTable");
static_assert(sizeof(FJackLDT_SlotMamonoNormalRoleDataTable) == 0x000010, "Wrong size on FJackLDT_SlotMamonoNormalRoleDataTable");

// ScriptStruct JackGame.JackCharacterFootstepEffectContainer
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackCharacterFootstepEffectContainer final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackCharacterFootstepEffectContainer) == 0x000008, "Wrong alignment on FJackCharacterFootstepEffectContainer");
static_assert(sizeof(FJackCharacterFootstepEffectContainer) == 0x000010, "Wrong size on FJackCharacterFootstepEffectContainer");

// ScriptStruct JackGame.JackDataTableNPCList
// 0x0058 (0x0060 - 0x0008)
struct FJackDataTableNPCList final : public FTableRowBase
{
public:
	class FName                                   DisplayName;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPipipiType                               PipipiTypeOverride;                                // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   UsoType;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachmentID1;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackNPCAttachmentType                        AttachmentType1;                                   // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachmentID2;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackNPCAttachmentType                        AttachmentType2;                                   // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachmentID3;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackNPCAttachmentType                        AttachmentType3;                                   // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachmentID4;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackNPCAttachmentType                        AttachmentType4;                                   // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableNPCList) == 0x000008, "Wrong alignment on FJackDataTableNPCList");
static_assert(sizeof(FJackDataTableNPCList) == 0x000060, "Wrong size on FJackDataTableNPCList");
static_assert(offsetof(FJackDataTableNPCList, DisplayName) == 0x000008, "Member 'FJackDataTableNPCList::DisplayName' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCList, Scale) == 0x000010, "Member 'FJackDataTableNPCList::Scale' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCList, PipipiTypeOverride) == 0x000014, "Member 'FJackDataTableNPCList::PipipiTypeOverride' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCList, UsoType) == 0x000018, "Member 'FJackDataTableNPCList::UsoType' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCList, AttachmentID1) == 0x000020, "Member 'FJackDataTableNPCList::AttachmentID1' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCList, AttachmentType1) == 0x000028, "Member 'FJackDataTableNPCList::AttachmentType1' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCList, AttachmentID2) == 0x000030, "Member 'FJackDataTableNPCList::AttachmentID2' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCList, AttachmentType2) == 0x000038, "Member 'FJackDataTableNPCList::AttachmentType2' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCList, AttachmentID3) == 0x000040, "Member 'FJackDataTableNPCList::AttachmentID3' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCList, AttachmentType3) == 0x000048, "Member 'FJackDataTableNPCList::AttachmentType3' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCList, AttachmentID4) == 0x000050, "Member 'FJackDataTableNPCList::AttachmentID4' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCList, AttachmentType4) == 0x000058, "Member 'FJackDataTableNPCList::AttachmentType4' has a wrong offset!");

// ScriptStruct JackGame.JackInteractorRange
// 0x0014 (0x0014 - 0x0000)
struct FJackInteractorRange final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackOffset;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchUp;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchDown;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackInteractorRange) == 0x000004, "Wrong alignment on FJackInteractorRange");
static_assert(sizeof(FJackInteractorRange) == 0x000014, "Wrong size on FJackInteractorRange");
static_assert(offsetof(FJackInteractorRange, Radius) == 0x000000, "Member 'FJackInteractorRange::Radius' has a wrong offset!");
static_assert(offsetof(FJackInteractorRange, BackOffset) == 0x000004, "Member 'FJackInteractorRange::BackOffset' has a wrong offset!");
static_assert(offsetof(FJackInteractorRange, Yaw) == 0x000008, "Member 'FJackInteractorRange::Yaw' has a wrong offset!");
static_assert(offsetof(FJackInteractorRange, PitchUp) == 0x00000C, "Member 'FJackInteractorRange::PitchUp' has a wrong offset!");
static_assert(offsetof(FJackInteractorRange, PitchDown) == 0x000010, "Member 'FJackInteractorRange::PitchDown' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_D08
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_D08 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_D08) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_D08");
static_assert(sizeof(FJackLDT_MonsterDeploy_D08) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_D08");

// ScriptStruct JackGame.JackDataTableTexture
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableTexture final : public FTableRowBase
{
public:
	class UTexture*                               Texture;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableTexture) == 0x000008, "Wrong alignment on FJackDataTableTexture");
static_assert(sizeof(FJackDataTableTexture) == 0x000010, "Wrong size on FJackDataTableTexture");
static_assert(offsetof(FJackDataTableTexture, Texture) == 0x000008, "Member 'FJackDataTableTexture::Texture' has a wrong offset!");

// ScriptStruct JackGame.JackTextureDict
// 0x0010 (0x0010 - 0x0000)
struct FJackTextureDict final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Texture;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackTextureDict) == 0x000008, "Wrong alignment on FJackTextureDict");
static_assert(sizeof(FJackTextureDict) == 0x000010, "Wrong size on FJackTextureDict");
static_assert(offsetof(FJackTextureDict, Name) == 0x000000, "Member 'FJackTextureDict::Name' has a wrong offset!");
static_assert(offsetof(FJackTextureDict, Texture) == 0x000008, "Member 'FJackTextureDict::Texture' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_KaziSafetyAreaTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_KaziSafetyAreaTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_KaziSafetyAreaTable) == 0x000008, "Wrong alignment on FJackLDT_KaziSafetyAreaTable");
static_assert(sizeof(FJackLDT_KaziSafetyAreaTable) == 0x000010, "Wrong size on FJackLDT_KaziSafetyAreaTable");

// ScriptStruct JackGame.JackDataTableFukkatunojumon
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableFukkatunojumon final : public FTableRowBase
{
public:
	class FString                                 SpellResurrection;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScenarioProgress;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackFukkatunojumonSpecial                    SpecialType;                                       // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableFukkatunojumon) == 0x000008, "Wrong alignment on FJackDataTableFukkatunojumon");
static_assert(sizeof(FJackDataTableFukkatunojumon) == 0x000020, "Wrong size on FJackDataTableFukkatunojumon");
static_assert(offsetof(FJackDataTableFukkatunojumon, SpellResurrection) == 0x000008, "Member 'FJackDataTableFukkatunojumon::SpellResurrection' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumon, ScenarioProgress) == 0x000018, "Member 'FJackDataTableFukkatunojumon::ScenarioProgress' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumon, SpecialType) == 0x00001C, "Member 'FJackDataTableFukkatunojumon::SpecialType' has a wrong offset!");

// ScriptStruct JackGame.JackActionModule
// 0x00B8 (0x00B8 - 0x0000)
struct alignas(0x08) FJackActionModule final
{
public:
	uint8                                         Pad_0[0xB8];                                       // 0x0000(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackActionModule) == 0x000008, "Wrong alignment on FJackActionModule");
static_assert(sizeof(FJackActionModule) == 0x0000B8, "Wrong size on FJackActionModule");

// ScriptStruct JackGame.JackActionExtentCharacterHitInfo
// 0x0020 (0x0020 - 0x0000)
struct FJackActionExtentCharacterHitInfo final
{
public:
	int32                                         HitGroupCount;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackActionModule>              HitActionModules;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	float                                         HitDelayTime;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackActionExtentCharacterHitInfo) == 0x000008, "Wrong alignment on FJackActionExtentCharacterHitInfo");
static_assert(sizeof(FJackActionExtentCharacterHitInfo) == 0x000020, "Wrong size on FJackActionExtentCharacterHitInfo");
static_assert(offsetof(FJackActionExtentCharacterHitInfo, HitGroupCount) == 0x000000, "Member 'FJackActionExtentCharacterHitInfo::HitGroupCount' has a wrong offset!");
static_assert(offsetof(FJackActionExtentCharacterHitInfo, HitActionModules) == 0x000008, "Member 'FJackActionExtentCharacterHitInfo::HitActionModules' has a wrong offset!");
static_assert(offsetof(FJackActionExtentCharacterHitInfo, HitDelayTime) == 0x000018, "Member 'FJackActionExtentCharacterHitInfo::HitDelayTime' has a wrong offset!");

// ScriptStruct JackGame.JackActionExtentCharacterInfo
// 0x0028 (0x0028 - 0x0000)
struct FJackActionExtentCharacterInfo final
{
public:
	TWeakObjectPtr<class UJackGameCharacter>      TargetGameCharacter;                               // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalDamageHP;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalDamageMP;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJackActionExtentCharacterHitInfo> HitInfos;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         ActionDepth;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSokusi;                                           // 0x0024(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJumonHansya;                                      // 0x0025(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackActionExtentCharacterInfo) == 0x000008, "Wrong alignment on FJackActionExtentCharacterInfo");
static_assert(sizeof(FJackActionExtentCharacterInfo) == 0x000028, "Wrong size on FJackActionExtentCharacterInfo");
static_assert(offsetof(FJackActionExtentCharacterInfo, TargetGameCharacter) == 0x000000, "Member 'FJackActionExtentCharacterInfo::TargetGameCharacter' has a wrong offset!");
static_assert(offsetof(FJackActionExtentCharacterInfo, TotalDamageHP) == 0x000008, "Member 'FJackActionExtentCharacterInfo::TotalDamageHP' has a wrong offset!");
static_assert(offsetof(FJackActionExtentCharacterInfo, TotalDamageMP) == 0x00000C, "Member 'FJackActionExtentCharacterInfo::TotalDamageMP' has a wrong offset!");
static_assert(offsetof(FJackActionExtentCharacterInfo, HitInfos) == 0x000010, "Member 'FJackActionExtentCharacterInfo::HitInfos' has a wrong offset!");
static_assert(offsetof(FJackActionExtentCharacterInfo, ActionDepth) == 0x000020, "Member 'FJackActionExtentCharacterInfo::ActionDepth' has a wrong offset!");
static_assert(offsetof(FJackActionExtentCharacterInfo, bSokusi) == 0x000024, "Member 'FJackActionExtentCharacterInfo::bSokusi' has a wrong offset!");
static_assert(offsetof(FJackActionExtentCharacterInfo, bJumonHansya) == 0x000025, "Member 'FJackActionExtentCharacterInfo::bJumonHansya' has a wrong offset!");

// ScriptStruct JackGame.JackActionData
// 0x00B0 (0x00B0 - 0x0000)
struct alignas(0x08) FJackActionData final
{
public:
	uint8                                         Pad_0[0xB0];                                       // 0x0000(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackActionData) == 0x000008, "Wrong alignment on FJackActionData");
static_assert(sizeof(FJackActionData) == 0x0000B0, "Wrong size on FJackActionData");

// ScriptStruct JackGame.JackCalcActionParam
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackCalcActionParam final
{
public:
	class FName                                   RenkeiID;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackCalcActionParam) == 0x000008, "Wrong alignment on FJackCalcActionParam");
static_assert(sizeof(FJackCalcActionParam) == 0x000018, "Wrong size on FJackCalcActionParam");
static_assert(offsetof(FJackCalcActionParam, RenkeiID) == 0x000000, "Member 'FJackCalcActionParam::RenkeiID' has a wrong offset!");

// ScriptStruct JackGame.JackActionHitGroupInfo
// 0x0030 (0x0030 - 0x0000)
struct FJackActionHitGroupInfo final
{
public:
	int32                                         HitGroupCount;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackActionModule>              ActionModules;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FName                                   ActionHitOrderID;                                  // 0x0018(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnyDamageHitCount;                                 // 0x0020(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExtentCharacterNum;                                // 0x0024(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitGroupCritical;                                 // 0x0028(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActionHitFinalGroup;                              // 0x0029(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOddEffectFinalGroup;                              // 0x002A(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackActionHitGroupInfo) == 0x000008, "Wrong alignment on FJackActionHitGroupInfo");
static_assert(sizeof(FJackActionHitGroupInfo) == 0x000030, "Wrong size on FJackActionHitGroupInfo");
static_assert(offsetof(FJackActionHitGroupInfo, HitGroupCount) == 0x000000, "Member 'FJackActionHitGroupInfo::HitGroupCount' has a wrong offset!");
static_assert(offsetof(FJackActionHitGroupInfo, ActionModules) == 0x000008, "Member 'FJackActionHitGroupInfo::ActionModules' has a wrong offset!");
static_assert(offsetof(FJackActionHitGroupInfo, ActionHitOrderID) == 0x000018, "Member 'FJackActionHitGroupInfo::ActionHitOrderID' has a wrong offset!");
static_assert(offsetof(FJackActionHitGroupInfo, AnyDamageHitCount) == 0x000020, "Member 'FJackActionHitGroupInfo::AnyDamageHitCount' has a wrong offset!");
static_assert(offsetof(FJackActionHitGroupInfo, ExtentCharacterNum) == 0x000024, "Member 'FJackActionHitGroupInfo::ExtentCharacterNum' has a wrong offset!");
static_assert(offsetof(FJackActionHitGroupInfo, bHitGroupCritical) == 0x000028, "Member 'FJackActionHitGroupInfo::bHitGroupCritical' has a wrong offset!");
static_assert(offsetof(FJackActionHitGroupInfo, bActionHitFinalGroup) == 0x000029, "Member 'FJackActionHitGroupInfo::bActionHitFinalGroup' has a wrong offset!");
static_assert(offsetof(FJackActionHitGroupInfo, bOddEffectFinalGroup) == 0x00002A, "Member 'FJackActionHitGroupInfo::bOddEffectFinalGroup' has a wrong offset!");

// ScriptStruct JackGame.JackActionResult
// 0x0158 (0x0158 - 0x0000)
struct FJackActionResult final
{
public:
	EJackActionResultType                         ResultType;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionConsumeResultType                  ConsumeResultType;                                 // 0x0001(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackActionData                        ActionData;                                        // 0x0008(0x00B0)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UJackGameCharacter>      CasterGameCharacter;                               // 0x00B8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UJackGameCharacter>      FirstTargetGameCharacter;                          // 0x00C0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UJackGameCharacter>      TargetGameCharacter;                               // 0x00C8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseMP;                                             // 0x00D0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseGold;                                           // 0x00D4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJackActionModule>              AllActionModules;                                  // 0x00D8(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FJackActionHitGroupInfo>        HitGroupInfos;                                     // 0x00E8(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FJackActionExtentCharacterInfo> TargetCharacterInfos;                              // 0x00F8(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class UJackGameCharacter*>             ActionTargetCharacters;                            // 0x0108(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FJackCalcActionParam                   CalcActionParam;                                   // 0x0118(0x0018)(Edit, EditConst, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UJackGameCharacter>> JumonHansyaGameCharacters;                         // 0x0130(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UJackGameCharacter>> ReviveGameCharacters;                              // 0x0140(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	class FName                                   ActionVoiceID;                                     // 0x0150(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackActionResult) == 0x000008, "Wrong alignment on FJackActionResult");
static_assert(sizeof(FJackActionResult) == 0x000158, "Wrong size on FJackActionResult");
static_assert(offsetof(FJackActionResult, ResultType) == 0x000000, "Member 'FJackActionResult::ResultType' has a wrong offset!");
static_assert(offsetof(FJackActionResult, ConsumeResultType) == 0x000001, "Member 'FJackActionResult::ConsumeResultType' has a wrong offset!");
static_assert(offsetof(FJackActionResult, ActionData) == 0x000008, "Member 'FJackActionResult::ActionData' has a wrong offset!");
static_assert(offsetof(FJackActionResult, CasterGameCharacter) == 0x0000B8, "Member 'FJackActionResult::CasterGameCharacter' has a wrong offset!");
static_assert(offsetof(FJackActionResult, FirstTargetGameCharacter) == 0x0000C0, "Member 'FJackActionResult::FirstTargetGameCharacter' has a wrong offset!");
static_assert(offsetof(FJackActionResult, TargetGameCharacter) == 0x0000C8, "Member 'FJackActionResult::TargetGameCharacter' has a wrong offset!");
static_assert(offsetof(FJackActionResult, UseMP) == 0x0000D0, "Member 'FJackActionResult::UseMP' has a wrong offset!");
static_assert(offsetof(FJackActionResult, UseGold) == 0x0000D4, "Member 'FJackActionResult::UseGold' has a wrong offset!");
static_assert(offsetof(FJackActionResult, AllActionModules) == 0x0000D8, "Member 'FJackActionResult::AllActionModules' has a wrong offset!");
static_assert(offsetof(FJackActionResult, HitGroupInfos) == 0x0000E8, "Member 'FJackActionResult::HitGroupInfos' has a wrong offset!");
static_assert(offsetof(FJackActionResult, TargetCharacterInfos) == 0x0000F8, "Member 'FJackActionResult::TargetCharacterInfos' has a wrong offset!");
static_assert(offsetof(FJackActionResult, ActionTargetCharacters) == 0x000108, "Member 'FJackActionResult::ActionTargetCharacters' has a wrong offset!");
static_assert(offsetof(FJackActionResult, CalcActionParam) == 0x000118, "Member 'FJackActionResult::CalcActionParam' has a wrong offset!");
static_assert(offsetof(FJackActionResult, JumonHansyaGameCharacters) == 0x000130, "Member 'FJackActionResult::JumonHansyaGameCharacters' has a wrong offset!");
static_assert(offsetof(FJackActionResult, ReviveGameCharacters) == 0x000140, "Member 'FJackActionResult::ReviveGameCharacters' has a wrong offset!");
static_assert(offsetof(FJackActionResult, ActionVoiceID) == 0x000150, "Member 'FJackActionResult::ActionVoiceID' has a wrong offset!");

// ScriptStruct JackGame.JackAttackInfo
// 0x0180 (0x0180 - 0x0000)
struct FJackAttackInfo final
{
public:
	struct FJackActionResult                      ActionResult;                                      // 0x0000(0x0158)(Edit, NativeAccessSpecifierPublic)
	int32                                         CurrentHitGroupCount;                              // 0x0158(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentActionHitRequestCount;                      // 0x015C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKoukaDisable;                                     // 0x0160(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPopupBalloonDisable;                              // 0x0161(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPendingDead;                                      // 0x0162(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_163[0x5];                                      // 0x0163(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackAttackTargetInfo>          AttackTargetInfos;                                 // 0x0168(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	bool                                          bUseDefaultHitEffectSub;                           // 0x0178(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAttackInfo) == 0x000008, "Wrong alignment on FJackAttackInfo");
static_assert(sizeof(FJackAttackInfo) == 0x000180, "Wrong size on FJackAttackInfo");
static_assert(offsetof(FJackAttackInfo, ActionResult) == 0x000000, "Member 'FJackAttackInfo::ActionResult' has a wrong offset!");
static_assert(offsetof(FJackAttackInfo, CurrentHitGroupCount) == 0x000158, "Member 'FJackAttackInfo::CurrentHitGroupCount' has a wrong offset!");
static_assert(offsetof(FJackAttackInfo, CurrentActionHitRequestCount) == 0x00015C, "Member 'FJackAttackInfo::CurrentActionHitRequestCount' has a wrong offset!");
static_assert(offsetof(FJackAttackInfo, bKoukaDisable) == 0x000160, "Member 'FJackAttackInfo::bKoukaDisable' has a wrong offset!");
static_assert(offsetof(FJackAttackInfo, bPopupBalloonDisable) == 0x000161, "Member 'FJackAttackInfo::bPopupBalloonDisable' has a wrong offset!");
static_assert(offsetof(FJackAttackInfo, bPendingDead) == 0x000162, "Member 'FJackAttackInfo::bPendingDead' has a wrong offset!");
static_assert(offsetof(FJackAttackInfo, AttackTargetInfos) == 0x000168, "Member 'FJackAttackInfo::AttackTargetInfos' has a wrong offset!");
static_assert(offsetof(FJackAttackInfo, bUseDefaultHitEffectSub) == 0x000178, "Member 'FJackAttackInfo::bUseDefaultHitEffectSub' has a wrong offset!");

// ScriptStruct JackGame.JackGameFlagDefSystem
// 0x0001 (0x0001 - 0x0000)
struct FJackGameFlagDefSystem final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackGameFlagDefSystem) == 0x000001, "Wrong alignment on FJackGameFlagDefSystem");
static_assert(sizeof(FJackGameFlagDefSystem) == 0x000001, "Wrong size on FJackGameFlagDefSystem");

// ScriptStruct JackGame.JackDataTableUIKatagaki
// 0x0058 (0x0060 - 0x0008)
struct FJackDataTableUIKatagaki final : public FTableRowBase
{
public:
	EJackScenarioPlaythrough                      Playthrough;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackScenarioID                               ScenarioID;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ScenarioFlag;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CutSceneFlag;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   P001;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   P002;                                              // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   P003;                                              // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   P004;                                              // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   P005;                                              // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   P006;                                              // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   P007;                                              // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   P008;                                              // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableUIKatagaki) == 0x000008, "Wrong alignment on FJackDataTableUIKatagaki");
static_assert(sizeof(FJackDataTableUIKatagaki) == 0x000060, "Wrong size on FJackDataTableUIKatagaki");
static_assert(offsetof(FJackDataTableUIKatagaki, Playthrough) == 0x000008, "Member 'FJackDataTableUIKatagaki::Playthrough' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIKatagaki, ScenarioID) == 0x000009, "Member 'FJackDataTableUIKatagaki::ScenarioID' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIKatagaki, ScenarioFlag) == 0x000010, "Member 'FJackDataTableUIKatagaki::ScenarioFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIKatagaki, CutSceneFlag) == 0x000018, "Member 'FJackDataTableUIKatagaki::CutSceneFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIKatagaki, P001) == 0x000020, "Member 'FJackDataTableUIKatagaki::P001' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIKatagaki, P002) == 0x000028, "Member 'FJackDataTableUIKatagaki::P002' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIKatagaki, P003) == 0x000030, "Member 'FJackDataTableUIKatagaki::P003' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIKatagaki, P004) == 0x000038, "Member 'FJackDataTableUIKatagaki::P004' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIKatagaki, P005) == 0x000040, "Member 'FJackDataTableUIKatagaki::P005' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIKatagaki, P006) == 0x000048, "Member 'FJackDataTableUIKatagaki::P006' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIKatagaki, P007) == 0x000050, "Member 'FJackDataTableUIKatagaki::P007' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIKatagaki, P008) == 0x000058, "Member 'FJackDataTableUIKatagaki::P008' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotShimohuriRefundSetting
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableMeosiSlotShimohuriRefundSetting final : public FTableRowBase
{
public:
	int32                                         UperRefundRate;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LowerRefundRate;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UperMonsterCnt;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LowerMonsterCnt;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustRate;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotShimohuriRefundSetting) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotShimohuriRefundSetting");
static_assert(sizeof(FJackDataTableMeosiSlotShimohuriRefundSetting) == 0x000020, "Wrong size on FJackDataTableMeosiSlotShimohuriRefundSetting");
static_assert(offsetof(FJackDataTableMeosiSlotShimohuriRefundSetting, UperRefundRate) == 0x000008, "Member 'FJackDataTableMeosiSlotShimohuriRefundSetting::UperRefundRate' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotShimohuriRefundSetting, LowerRefundRate) == 0x00000C, "Member 'FJackDataTableMeosiSlotShimohuriRefundSetting::LowerRefundRate' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotShimohuriRefundSetting, UperMonsterCnt) == 0x000010, "Member 'FJackDataTableMeosiSlotShimohuriRefundSetting::UperMonsterCnt' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotShimohuriRefundSetting, LowerMonsterCnt) == 0x000014, "Member 'FJackDataTableMeosiSlotShimohuriRefundSetting::LowerMonsterCnt' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotShimohuriRefundSetting, AdjustRate) == 0x000018, "Member 'FJackDataTableMeosiSlotShimohuriRefundSetting::AdjustRate' has a wrong offset!");

// ScriptStruct JackGame.JackActionPlayParam
// 0x0290 (0x0290 - 0x0000)
struct alignas(0x10) FJackActionPlayParam final
{
public:
	class FName                                   ActionID;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJackActionResult                      ActionResult;                                      // 0x0008(0x0158)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UJackGameCharacter>      CasterGameCharacter;                               // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UJackGameCharacter>      TargetGameCharacter;                               // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Override_Motion_Cast;                              // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Override_Motion_Shot;                              // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionPlayType                           ActionPlayType;                                    // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionRequestType                        RequestType;                                       // 0x0181(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackItem_Bag                                 BagType;                                           // 0x0182(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_183[0x1];                                      // 0x0183(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DouguId;                                           // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SecondCheckID;                                     // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_190[0x100];                                    // 0x0190(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackActionPlayParam) == 0x000010, "Wrong alignment on FJackActionPlayParam");
static_assert(sizeof(FJackActionPlayParam) == 0x000290, "Wrong size on FJackActionPlayParam");
static_assert(offsetof(FJackActionPlayParam, ActionID) == 0x000000, "Member 'FJackActionPlayParam::ActionID' has a wrong offset!");
static_assert(offsetof(FJackActionPlayParam, ActionResult) == 0x000008, "Member 'FJackActionPlayParam::ActionResult' has a wrong offset!");
static_assert(offsetof(FJackActionPlayParam, CasterGameCharacter) == 0x000160, "Member 'FJackActionPlayParam::CasterGameCharacter' has a wrong offset!");
static_assert(offsetof(FJackActionPlayParam, TargetGameCharacter) == 0x000168, "Member 'FJackActionPlayParam::TargetGameCharacter' has a wrong offset!");
static_assert(offsetof(FJackActionPlayParam, Override_Motion_Cast) == 0x000170, "Member 'FJackActionPlayParam::Override_Motion_Cast' has a wrong offset!");
static_assert(offsetof(FJackActionPlayParam, Override_Motion_Shot) == 0x000178, "Member 'FJackActionPlayParam::Override_Motion_Shot' has a wrong offset!");
static_assert(offsetof(FJackActionPlayParam, ActionPlayType) == 0x000180, "Member 'FJackActionPlayParam::ActionPlayType' has a wrong offset!");
static_assert(offsetof(FJackActionPlayParam, RequestType) == 0x000181, "Member 'FJackActionPlayParam::RequestType' has a wrong offset!");
static_assert(offsetof(FJackActionPlayParam, BagType) == 0x000182, "Member 'FJackActionPlayParam::BagType' has a wrong offset!");
static_assert(offsetof(FJackActionPlayParam, DouguId) == 0x000184, "Member 'FJackActionPlayParam::DouguId' has a wrong offset!");
static_assert(offsetof(FJackActionPlayParam, SecondCheckID) == 0x000188, "Member 'FJackActionPlayParam::SecondCheckID' has a wrong offset!");

// ScriptStruct JackGame.JackSaveGameHeader
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FJackSaveGameHeader final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackSaveGameHeader) == 0x000008, "Wrong alignment on FJackSaveGameHeader");
static_assert(sizeof(FJackSaveGameHeader) == 0x000060, "Wrong size on FJackSaveGameHeader");

// ScriptStruct JackGame.JackMaterialDict
// 0x0010 (0x0010 - 0x0000)
struct FJackMaterialDict final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMaterialDict) == 0x000008, "Wrong alignment on FJackMaterialDict");
static_assert(sizeof(FJackMaterialDict) == 0x000010, "Wrong size on FJackMaterialDict");
static_assert(offsetof(FJackMaterialDict, Name) == 0x000000, "Member 'FJackMaterialDict::Name' has a wrong offset!");
static_assert(offsetof(FJackMaterialDict, Material) == 0x000008, "Member 'FJackMaterialDict::Material' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1L_P001_RC
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1L_P001_RC final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1L_P001_RC) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1L_P001_RC");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1L_P001_RC) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1L_P001_RC");

// ScriptStruct JackGame.JackAutoCameraItemOffset
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackAutoCameraItemOffset final
{
public:
	class FName                                   ItemID;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRectRedW;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRectRedH;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRectRedOffsetZ;                               // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAutoCameraItemOffset) == 0x000008, "Wrong alignment on FJackAutoCameraItemOffset");
static_assert(sizeof(FJackAutoCameraItemOffset) == 0x000018, "Wrong size on FJackAutoCameraItemOffset");
static_assert(offsetof(FJackAutoCameraItemOffset, ItemID) == 0x000000, "Member 'FJackAutoCameraItemOffset::ItemID' has a wrong offset!");
static_assert(offsetof(FJackAutoCameraItemOffset, ScoreRectRedW) == 0x000008, "Member 'FJackAutoCameraItemOffset::ScoreRectRedW' has a wrong offset!");
static_assert(offsetof(FJackAutoCameraItemOffset, ScoreRectRedH) == 0x00000C, "Member 'FJackAutoCameraItemOffset::ScoreRectRedH' has a wrong offset!");
static_assert(offsetof(FJackAutoCameraItemOffset, ScoreRectRedOffsetZ) == 0x000010, "Member 'FJackAutoCameraItemOffset::ScoreRectRedOffsetZ' has a wrong offset!");

// ScriptStruct JackGame.JackAutoCameraScoreRect
// 0x0078 (0x0078 - 0x0000)
struct FJackAutoCameraScoreRect final
{
public:
	class FName                                   ScoreRectRedSocket;                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRectRedW;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRectRedH;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRectRedOffsetZ;                               // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackAutoCameraItemOffset>      RedOffset;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ScoreRectBlueSocket;                               // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRectBlueW;                                    // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRectBlueH;                                    // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRectBlueOffsetZ;                              // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackAutoCameraItemOffset>      BlueOffset;                                        // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ScoreRectYellowSocket;                             // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRectYellowW;                                  // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRectYellowH;                                  // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRectYellowOffsetZ;                            // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackAutoCameraItemOffset>      YellowOffset;                                      // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackAutoCameraScoreRect) == 0x000008, "Wrong alignment on FJackAutoCameraScoreRect");
static_assert(sizeof(FJackAutoCameraScoreRect) == 0x000078, "Wrong size on FJackAutoCameraScoreRect");
static_assert(offsetof(FJackAutoCameraScoreRect, ScoreRectRedSocket) == 0x000000, "Member 'FJackAutoCameraScoreRect::ScoreRectRedSocket' has a wrong offset!");
static_assert(offsetof(FJackAutoCameraScoreRect, ScoreRectRedW) == 0x000008, "Member 'FJackAutoCameraScoreRect::ScoreRectRedW' has a wrong offset!");
static_assert(offsetof(FJackAutoCameraScoreRect, ScoreRectRedH) == 0x00000C, "Member 'FJackAutoCameraScoreRect::ScoreRectRedH' has a wrong offset!");
static_assert(offsetof(FJackAutoCameraScoreRect, ScoreRectRedOffsetZ) == 0x000010, "Member 'FJackAutoCameraScoreRect::ScoreRectRedOffsetZ' has a wrong offset!");
static_assert(offsetof(FJackAutoCameraScoreRect, RedOffset) == 0x000018, "Member 'FJackAutoCameraScoreRect::RedOffset' has a wrong offset!");
static_assert(offsetof(FJackAutoCameraScoreRect, ScoreRectBlueSocket) == 0x000028, "Member 'FJackAutoCameraScoreRect::ScoreRectBlueSocket' has a wrong offset!");
static_assert(offsetof(FJackAutoCameraScoreRect, ScoreRectBlueW) == 0x000030, "Member 'FJackAutoCameraScoreRect::ScoreRectBlueW' has a wrong offset!");
static_assert(offsetof(FJackAutoCameraScoreRect, ScoreRectBlueH) == 0x000034, "Member 'FJackAutoCameraScoreRect::ScoreRectBlueH' has a wrong offset!");
static_assert(offsetof(FJackAutoCameraScoreRect, ScoreRectBlueOffsetZ) == 0x000038, "Member 'FJackAutoCameraScoreRect::ScoreRectBlueOffsetZ' has a wrong offset!");
static_assert(offsetof(FJackAutoCameraScoreRect, BlueOffset) == 0x000040, "Member 'FJackAutoCameraScoreRect::BlueOffset' has a wrong offset!");
static_assert(offsetof(FJackAutoCameraScoreRect, ScoreRectYellowSocket) == 0x000050, "Member 'FJackAutoCameraScoreRect::ScoreRectYellowSocket' has a wrong offset!");
static_assert(offsetof(FJackAutoCameraScoreRect, ScoreRectYellowW) == 0x000058, "Member 'FJackAutoCameraScoreRect::ScoreRectYellowW' has a wrong offset!");
static_assert(offsetof(FJackAutoCameraScoreRect, ScoreRectYellowH) == 0x00005C, "Member 'FJackAutoCameraScoreRect::ScoreRectYellowH' has a wrong offset!");
static_assert(offsetof(FJackAutoCameraScoreRect, ScoreRectYellowOffsetZ) == 0x000060, "Member 'FJackAutoCameraScoreRect::ScoreRectYellowOffsetZ' has a wrong offset!");
static_assert(offsetof(FJackAutoCameraScoreRect, YellowOffset) == 0x000068, "Member 'FJackAutoCameraScoreRect::YellowOffset' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_PokerItem_1Coin_Red
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PokerItem_1Coin_Red final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PokerItem_1Coin_Red) == 0x000008, "Wrong alignment on FJackLDT_PokerItem_1Coin_Red");
static_assert(sizeof(FJackLDT_PokerItem_1Coin_Red) == 0x000010, "Wrong size on FJackLDT_PokerItem_1Coin_Red");

// ScriptStruct JackGame.JackItemPresentTitle
// 0x0020 (0x0020 - 0x0000)
struct FJackItemPresentTitle final
{
public:
	class FName                                   DlcId;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitleName;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VestedFlag;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackItemPresentTitle) == 0x000008, "Wrong alignment on FJackItemPresentTitle");
static_assert(sizeof(FJackItemPresentTitle) == 0x000020, "Wrong size on FJackItemPresentTitle");
static_assert(offsetof(FJackItemPresentTitle, DlcId) == 0x000000, "Member 'FJackItemPresentTitle::DlcId' has a wrong offset!");
static_assert(offsetof(FJackItemPresentTitle, TitleName) == 0x000008, "Member 'FJackItemPresentTitle::TitleName' has a wrong offset!");
static_assert(offsetof(FJackItemPresentTitle, VestedFlag) == 0x000018, "Member 'FJackItemPresentTitle::VestedFlag' has a wrong offset!");

// ScriptStruct JackGame.JackGameCharacterParameters
// 0x004C (0x004C - 0x0000)
struct FJackGameCharacterParameters final
{
public:
	int32                                         Tikara;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minomamori;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Subayasa;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Kiyousa;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Miryoku;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KougekiMaryoku;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KaifukuMaryoku;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxHP;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMP;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Kougekiryoku;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Syubiryoku;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HPKyuuSyuuRate;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MPKyuuSyuuRate;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TateGuardRate;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BukiGuardRate;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MikawasiRate;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalRate;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoneOnRate;                                        // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeityuuRate;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackGameCharacterParameters) == 0x000004, "Wrong alignment on FJackGameCharacterParameters");
static_assert(sizeof(FJackGameCharacterParameters) == 0x00004C, "Wrong size on FJackGameCharacterParameters");
static_assert(offsetof(FJackGameCharacterParameters, Tikara) == 0x000000, "Member 'FJackGameCharacterParameters::Tikara' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterParameters, Minomamori) == 0x000004, "Member 'FJackGameCharacterParameters::Minomamori' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterParameters, Subayasa) == 0x000008, "Member 'FJackGameCharacterParameters::Subayasa' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterParameters, Kiyousa) == 0x00000C, "Member 'FJackGameCharacterParameters::Kiyousa' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterParameters, Miryoku) == 0x000010, "Member 'FJackGameCharacterParameters::Miryoku' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterParameters, KougekiMaryoku) == 0x000014, "Member 'FJackGameCharacterParameters::KougekiMaryoku' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterParameters, KaifukuMaryoku) == 0x000018, "Member 'FJackGameCharacterParameters::KaifukuMaryoku' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterParameters, MaxHP) == 0x00001C, "Member 'FJackGameCharacterParameters::MaxHP' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterParameters, MaxMP) == 0x000020, "Member 'FJackGameCharacterParameters::MaxMP' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterParameters, Kougekiryoku) == 0x000024, "Member 'FJackGameCharacterParameters::Kougekiryoku' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterParameters, Syubiryoku) == 0x000028, "Member 'FJackGameCharacterParameters::Syubiryoku' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterParameters, HPKyuuSyuuRate) == 0x00002C, "Member 'FJackGameCharacterParameters::HPKyuuSyuuRate' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterParameters, MPKyuuSyuuRate) == 0x000030, "Member 'FJackGameCharacterParameters::MPKyuuSyuuRate' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterParameters, TateGuardRate) == 0x000034, "Member 'FJackGameCharacterParameters::TateGuardRate' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterParameters, BukiGuardRate) == 0x000038, "Member 'FJackGameCharacterParameters::BukiGuardRate' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterParameters, MikawasiRate) == 0x00003C, "Member 'FJackGameCharacterParameters::MikawasiRate' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterParameters, CriticalRate) == 0x000040, "Member 'FJackGameCharacterParameters::CriticalRate' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterParameters, ZoneOnRate) == 0x000044, "Member 'FJackGameCharacterParameters::ZoneOnRate' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterParameters, MeityuuRate) == 0x000048, "Member 'FJackGameCharacterParameters::MeityuuRate' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableME
// 0x0040 (0x0048 - 0x0008)
struct FJackDataTableME final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USoundBase>              ME;                                                // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              OrcheME;                                           // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDontResumeBGM;                                    // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayAtPrintEnd;                                   // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableME) == 0x000008, "Wrong alignment on FJackDataTableME");
static_assert(sizeof(FJackDataTableME) == 0x000048, "Wrong size on FJackDataTableME");
static_assert(offsetof(FJackDataTableME, ME) == 0x000008, "Member 'FJackDataTableME::ME' has a wrong offset!");
static_assert(offsetof(FJackDataTableME, OrcheME) == 0x000020, "Member 'FJackDataTableME::OrcheME' has a wrong offset!");
static_assert(offsetof(FJackDataTableME, FadeOutTime) == 0x000038, "Member 'FJackDataTableME::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableME, FadeInTime) == 0x00003C, "Member 'FJackDataTableME::FadeInTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableME, bDontResumeBGM) == 0x000040, "Member 'FJackDataTableME::bDontResumeBGM' has a wrong offset!");
static_assert(offsetof(FJackDataTableME, bPlayAtPrintEnd) == 0x000041, "Member 'FJackDataTableME::bPlayAtPrintEnd' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_PartyTalkData_C300
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_C300 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_C300) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_C300");
static_assert(sizeof(FJackLDT_PartyTalkData_C300) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_C300");

// ScriptStruct JackGame.JackSkeletalMeshDict
// 0x0010 (0x0010 - 0x0000)
struct FJackSkeletalMeshDict final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackSkeletalMeshDict) == 0x000008, "Wrong alignment on FJackSkeletalMeshDict");
static_assert(sizeof(FJackSkeletalMeshDict) == 0x000010, "Wrong size on FJackSkeletalMeshDict");
static_assert(offsetof(FJackSkeletalMeshDict, Name) == 0x000000, "Member 'FJackSkeletalMeshDict::Name' has a wrong offset!");
static_assert(offsetof(FJackSkeletalMeshDict, SkeletalMesh) == 0x000008, "Member 'FJackSkeletalMeshDict::SkeletalMesh' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Pose_SideHairF1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_SideHairF1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_SideHairF1) == 0x000008, "Wrong alignment on FJackLDT_Pose_SideHairF1");
static_assert(sizeof(FJackLDT_Pose_SideHairF1) == 0x000010, "Wrong size on FJackLDT_Pose_SideHairF1");

// ScriptStruct JackGame.JackDataTableCoordSoundTable
// 0x01F8 (0x0200 - 0x0008)
struct FJackDataTableCoordSoundTable final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USoundBase>              Walk;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Run;                                               // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Dash;                                              // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              ArmUp;                                             // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              ArmDown;                                           // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Sit;                                               // 0x0080(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Stand;                                             // 0x0098(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Jump;                                              // 0x00B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Land;                                              // 0x00C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Turn;                                              // 0x00E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              ArmHard;                                           // 0x00F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              BodyHard;                                          // 0x0110(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Down;                                              // 0x0128(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              CS1;                                               // 0x0140(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              CS2;                                               // 0x0158(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              CS3;                                               // 0x0170(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              CS4;                                               // 0x0188(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              CS5;                                               // 0x01A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              CS6;                                               // 0x01B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              CS7;                                               // 0x01D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              CS8;                                               // 0x01E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableCoordSoundTable) == 0x000008, "Wrong alignment on FJackDataTableCoordSoundTable");
static_assert(sizeof(FJackDataTableCoordSoundTable) == 0x000200, "Wrong size on FJackDataTableCoordSoundTable");
static_assert(offsetof(FJackDataTableCoordSoundTable, Walk) == 0x000008, "Member 'FJackDataTableCoordSoundTable::Walk' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordSoundTable, Run) == 0x000020, "Member 'FJackDataTableCoordSoundTable::Run' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordSoundTable, Dash) == 0x000038, "Member 'FJackDataTableCoordSoundTable::Dash' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordSoundTable, ArmUp) == 0x000050, "Member 'FJackDataTableCoordSoundTable::ArmUp' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordSoundTable, ArmDown) == 0x000068, "Member 'FJackDataTableCoordSoundTable::ArmDown' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordSoundTable, Sit) == 0x000080, "Member 'FJackDataTableCoordSoundTable::Sit' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordSoundTable, Stand) == 0x000098, "Member 'FJackDataTableCoordSoundTable::Stand' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordSoundTable, Jump) == 0x0000B0, "Member 'FJackDataTableCoordSoundTable::Jump' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordSoundTable, Land) == 0x0000C8, "Member 'FJackDataTableCoordSoundTable::Land' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordSoundTable, Turn) == 0x0000E0, "Member 'FJackDataTableCoordSoundTable::Turn' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordSoundTable, ArmHard) == 0x0000F8, "Member 'FJackDataTableCoordSoundTable::ArmHard' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordSoundTable, BodyHard) == 0x000110, "Member 'FJackDataTableCoordSoundTable::BodyHard' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordSoundTable, Down) == 0x000128, "Member 'FJackDataTableCoordSoundTable::Down' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordSoundTable, CS1) == 0x000140, "Member 'FJackDataTableCoordSoundTable::CS1' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordSoundTable, CS2) == 0x000158, "Member 'FJackDataTableCoordSoundTable::CS2' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordSoundTable, CS3) == 0x000170, "Member 'FJackDataTableCoordSoundTable::CS3' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordSoundTable, CS4) == 0x000188, "Member 'FJackDataTableCoordSoundTable::CS4' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordSoundTable, CS5) == 0x0001A0, "Member 'FJackDataTableCoordSoundTable::CS5' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordSoundTable, CS6) == 0x0001B8, "Member 'FJackDataTableCoordSoundTable::CS6' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordSoundTable, CS7) == 0x0001D0, "Member 'FJackDataTableCoordSoundTable::CS7' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordSoundTable, CS8) == 0x0001E8, "Member 'FJackDataTableCoordSoundTable::CS8' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_TokugiPanelInfoTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TokugiPanelInfoTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TokugiPanelInfoTable) == 0x000008, "Wrong alignment on FJackLDT_TokugiPanelInfoTable");
static_assert(sizeof(FJackLDT_TokugiPanelInfoTable) == 0x000010, "Wrong size on FJackLDT_TokugiPanelInfoTable");

// ScriptStruct JackGame.JackUMGBagEventTag
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FJackUMGBagEventTag final
{
public:
	class FName                                   Common;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Equipment;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Daizinamono;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DouguSeiri;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MedalStamp;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RecipeBook;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Exchanges;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGBagEventTag) == 0x000008, "Wrong alignment on FJackUMGBagEventTag");
static_assert(sizeof(FJackUMGBagEventTag) == 0x000038, "Wrong size on FJackUMGBagEventTag");
static_assert(offsetof(FJackUMGBagEventTag, Common) == 0x000000, "Member 'FJackUMGBagEventTag::Common' has a wrong offset!");
static_assert(offsetof(FJackUMGBagEventTag, Equipment) == 0x000008, "Member 'FJackUMGBagEventTag::Equipment' has a wrong offset!");
static_assert(offsetof(FJackUMGBagEventTag, Daizinamono) == 0x000010, "Member 'FJackUMGBagEventTag::Daizinamono' has a wrong offset!");
static_assert(offsetof(FJackUMGBagEventTag, DouguSeiri) == 0x000018, "Member 'FJackUMGBagEventTag::DouguSeiri' has a wrong offset!");
static_assert(offsetof(FJackUMGBagEventTag, MedalStamp) == 0x000020, "Member 'FJackUMGBagEventTag::MedalStamp' has a wrong offset!");
static_assert(offsetof(FJackUMGBagEventTag, RecipeBook) == 0x000028, "Member 'FJackUMGBagEventTag::RecipeBook' has a wrong offset!");
static_assert(offsetof(FJackUMGBagEventTag, Exchanges) == 0x000030, "Member 'FJackUMGBagEventTag::Exchanges' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotDrakeeEffect1Bonus
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotDrakeeEffect1Bonus final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotDrakeeEffect1Bonus) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotDrakeeEffect1Bonus");
static_assert(sizeof(FJackLDT_MeosiSlotDrakeeEffect1Bonus) == 0x000010, "Wrong size on FJackLDT_MeosiSlotDrakeeEffect1Bonus");

// ScriptStruct JackGame.JackCommand
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackCommand
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackCommand) == 0x000008, "Wrong alignment on FJackCommand");
static_assert(sizeof(FJackCommand) == 0x000010, "Wrong size on FJackCommand");

// ScriptStruct JackGame.JackCommandBattleInitialize
// 0x0030 (0x0040 - 0x0010)
struct FJackCommandBattleInitialize final : public FJackCommand
{
public:
	uint8                                         Pad_10[0x30];                                      // 0x0010(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackCommandBattleInitialize) == 0x000008, "Wrong alignment on FJackCommandBattleInitialize");
static_assert(sizeof(FJackCommandBattleInitialize) == 0x000040, "Wrong size on FJackCommandBattleInitialize");

// ScriptStruct JackGame.JackAIAction
// 0x00A8 (0x00A8 - 0x0000)
struct alignas(0x08) FJackAIAction final
{
public:
	uint8                                         Pad_0[0xA8];                                       // 0x0000(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAIAction) == 0x000008, "Wrong alignment on FJackAIAction");
static_assert(sizeof(FJackAIAction) == 0x0000A8, "Wrong size on FJackAIAction");

// ScriptStruct JackGame.JackLDT_MeosiSlotShimofuriYakumono
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotShimofuriYakumono final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotShimofuriYakumono) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotShimofuriYakumono");
static_assert(sizeof(FJackLDT_MeosiSlotShimofuriYakumono) == 0x000010, "Wrong size on FJackLDT_MeosiSlotShimofuriYakumono");

// ScriptStruct JackGame.JackStaticMeshDict
// 0x0010 (0x0010 - 0x0000)
struct FJackStaticMeshDict final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticMesh;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackStaticMeshDict) == 0x000008, "Wrong alignment on FJackStaticMeshDict");
static_assert(sizeof(FJackStaticMeshDict) == 0x000010, "Wrong size on FJackStaticMeshDict");
static_assert(offsetof(FJackStaticMeshDict, Name) == 0x000000, "Member 'FJackStaticMeshDict::Name' has a wrong offset!");
static_assert(offsetof(FJackStaticMeshDict, StaticMesh) == 0x000008, "Member 'FJackStaticMeshDict::StaticMesh' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableOddEffectTag
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableOddEffectTag final : public FTableRowBase
{
public:
	bool                                          Dummy;                                             // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableOddEffectTag) == 0x000008, "Wrong alignment on FJackDataTableOddEffectTag");
static_assert(sizeof(FJackDataTableOddEffectTag) == 0x000010, "Wrong size on FJackDataTableOddEffectTag");
static_assert(offsetof(FJackDataTableOddEffectTag, Dummy) == 0x000008, "Member 'FJackDataTableOddEffectTag::Dummy' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_NPCList_ArticleInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_NPCList_ArticleInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_NPCList_ArticleInfo) == 0x000008, "Wrong alignment on FJackLDT_NPCList_ArticleInfo");
static_assert(sizeof(FJackLDT_NPCList_ArticleInfo) == 0x000010, "Wrong size on FJackLDT_NPCList_ArticleInfo");

// ScriptStruct JackGame.JackDataTableMeosiSlotReelArray
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMeosiSlotReelArray final : public FTableRowBase
{
public:
	TArray<EJackMeosiSlotPicture>                 Elements;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotReelArray) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotReelArray");
static_assert(sizeof(FJackDataTableMeosiSlotReelArray) == 0x000018, "Wrong size on FJackDataTableMeosiSlotReelArray");
static_assert(offsetof(FJackDataTableMeosiSlotReelArray, Elements) == 0x000008, "Member 'FJackDataTableMeosiSlotReelArray::Elements' has a wrong offset!");

// ScriptStruct JackGame.JackHazukasiiNoroiTalkParam
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FJackHazukasiiNoroiTalkParam final
{
public:
	class FName                                   TextID_PreMotion;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID_PostMotion;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartAnimationID;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndAnimationID;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackHazukasiiNoroiTalkParam) == 0x000008, "Wrong alignment on FJackHazukasiiNoroiTalkParam");
static_assert(sizeof(FJackHazukasiiNoroiTalkParam) == 0x000020, "Wrong size on FJackHazukasiiNoroiTalkParam");
static_assert(offsetof(FJackHazukasiiNoroiTalkParam, TextID_PreMotion) == 0x000000, "Member 'FJackHazukasiiNoroiTalkParam::TextID_PreMotion' has a wrong offset!");
static_assert(offsetof(FJackHazukasiiNoroiTalkParam, TextID_PostMotion) == 0x000008, "Member 'FJackHazukasiiNoroiTalkParam::TextID_PostMotion' has a wrong offset!");
static_assert(offsetof(FJackHazukasiiNoroiTalkParam, StartAnimationID) == 0x000010, "Member 'FJackHazukasiiNoroiTalkParam::StartAnimationID' has a wrong offset!");
static_assert(offsetof(FJackHazukasiiNoroiTalkParam, EndAnimationID) == 0x000018, "Member 'FJackHazukasiiNoroiTalkParam::EndAnimationID' has a wrong offset!");

// ScriptStruct JackGame.JackHazukasiiNoroiTalk
// 0x0018 (0x0018 - 0x0000)
struct FJackHazukasiiNoroiTalk final
{
public:
	EJackCharacter                                CharacterType;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackHazukasiiNoroiTalkParam>   HazukasiiNoroiTalkParam;                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackHazukasiiNoroiTalk) == 0x000008, "Wrong alignment on FJackHazukasiiNoroiTalk");
static_assert(sizeof(FJackHazukasiiNoroiTalk) == 0x000018, "Wrong size on FJackHazukasiiNoroiTalk");
static_assert(offsetof(FJackHazukasiiNoroiTalk, CharacterType) == 0x000000, "Member 'FJackHazukasiiNoroiTalk::CharacterType' has a wrong offset!");
static_assert(offsetof(FJackHazukasiiNoroiTalk, HazukasiiNoroiTalkParam) == 0x000008, "Member 'FJackHazukasiiNoroiTalk::HazukasiiNoroiTalkParam' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotShimofuriContProb
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotShimofuriContProb final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotShimofuriContProb) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotShimofuriContProb");
static_assert(sizeof(FJackLDT_MeosiSlotShimofuriContProb) == 0x000010, "Wrong size on FJackLDT_MeosiSlotShimofuriContProb");

// ScriptStruct JackGame.JackDataTableUmaRaceEntryData
// 0x0058 (0x0060 - 0x0008)
struct FJackDataTableUmaRaceEntryData final : public FTableRowBase
{
public:
	class FName                                   PlayerName;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUmaRaceHorseType                         HorseType;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   NPCBlueprintClass;                                 // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecifyPaddockNumber;                              // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsModelScale;                                     // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PathNo;                                            // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UDataTable>              TimeScheduleDataTable;                             // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImpactPriority;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableUmaRaceEntryData) == 0x000008, "Wrong alignment on FJackDataTableUmaRaceEntryData");
static_assert(sizeof(FJackDataTableUmaRaceEntryData) == 0x000060, "Wrong size on FJackDataTableUmaRaceEntryData");
static_assert(offsetof(FJackDataTableUmaRaceEntryData, PlayerName) == 0x000008, "Member 'FJackDataTableUmaRaceEntryData::PlayerName' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceEntryData, HorseType) == 0x000010, "Member 'FJackDataTableUmaRaceEntryData::HorseType' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceEntryData, NPCBlueprintClass) == 0x000018, "Member 'FJackDataTableUmaRaceEntryData::NPCBlueprintClass' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceEntryData, SpecifyPaddockNumber) == 0x000030, "Member 'FJackDataTableUmaRaceEntryData::SpecifyPaddockNumber' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceEntryData, bIsModelScale) == 0x000034, "Member 'FJackDataTableUmaRaceEntryData::bIsModelScale' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceEntryData, PathNo) == 0x000038, "Member 'FJackDataTableUmaRaceEntryData::PathNo' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceEntryData, TimeScheduleDataTable) == 0x000040, "Member 'FJackDataTableUmaRaceEntryData::TimeScheduleDataTable' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceEntryData, ImpactPriority) == 0x000058, "Member 'FJackDataTableUmaRaceEntryData::ImpactPriority' has a wrong offset!");

// ScriptStruct JackGame.JackUMGCursorSaveTarget
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackUMGCursorSaveTarget final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name;                                              // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGCursorSaveTarget) == 0x000008, "Wrong alignment on FJackUMGCursorSaveTarget");
static_assert(sizeof(FJackUMGCursorSaveTarget) == 0x000010, "Wrong size on FJackUMGCursorSaveTarget");
static_assert(offsetof(FJackUMGCursorSaveTarget, Index) == 0x000000, "Member 'FJackUMGCursorSaveTarget::Index' has a wrong offset!");
static_assert(offsetof(FJackUMGCursorSaveTarget, Name) == 0x000008, "Member 'FJackUMGCursorSaveTarget::Name' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1S_P001_RC
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1S_P001_RC final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1S_P001_RC) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1S_P001_RC");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1S_P001_RC) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1S_P001_RC");

// ScriptStruct JackGame.JackDataTableWidgetBlueprint
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableWidgetBlueprint final : public FTableRowBase
{
public:
	class UBlueprint*                             WidgetBlueprint;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableWidgetBlueprint) == 0x000008, "Wrong alignment on FJackDataTableWidgetBlueprint");
static_assert(sizeof(FJackDataTableWidgetBlueprint) == 0x000010, "Wrong size on FJackDataTableWidgetBlueprint");
static_assert(offsetof(FJackDataTableWidgetBlueprint, WidgetBlueprint) == 0x000008, "Member 'FJackDataTableWidgetBlueprint::WidgetBlueprint' has a wrong offset!");

// ScriptStruct JackGame.JackUMGFaceIconTexture
// 0x0030 (0x0030 - 0x0000)
struct FJackUMGFaceIconTexture final
{
public:
	class UTexture2D*                             AliveTexture;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             DeadTexture;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ZoneTexture;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             BustTexture;                                       // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             EyeTexture;                                        // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             FaceTexture;                                       // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGFaceIconTexture) == 0x000008, "Wrong alignment on FJackUMGFaceIconTexture");
static_assert(sizeof(FJackUMGFaceIconTexture) == 0x000030, "Wrong size on FJackUMGFaceIconTexture");
static_assert(offsetof(FJackUMGFaceIconTexture, AliveTexture) == 0x000000, "Member 'FJackUMGFaceIconTexture::AliveTexture' has a wrong offset!");
static_assert(offsetof(FJackUMGFaceIconTexture, DeadTexture) == 0x000008, "Member 'FJackUMGFaceIconTexture::DeadTexture' has a wrong offset!");
static_assert(offsetof(FJackUMGFaceIconTexture, ZoneTexture) == 0x000010, "Member 'FJackUMGFaceIconTexture::ZoneTexture' has a wrong offset!");
static_assert(offsetof(FJackUMGFaceIconTexture, BustTexture) == 0x000018, "Member 'FJackUMGFaceIconTexture::BustTexture' has a wrong offset!");
static_assert(offsetof(FJackUMGFaceIconTexture, EyeTexture) == 0x000020, "Member 'FJackUMGFaceIconTexture::EyeTexture' has a wrong offset!");
static_assert(offsetof(FJackUMGFaceIconTexture, FaceTexture) == 0x000028, "Member 'FJackUMGFaceIconTexture::FaceTexture' has a wrong offset!");

// ScriptStruct JackGame.JackBattleFieldPermitVolumeInfo
// 0x0030 (0x0030 - 0x0000)
struct FJackBattleFieldPermitVolumeInfo final
{
public:
	class AVolume*                                Volume;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BattleFieldRadius;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AJackLocator*                           Orientation;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOrientationFlipEnable;                            // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AJackBattleFieldGenerator_BlockingVolume*> BlockingVolumeArray;                               // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackBattleFieldPermitVolumeInfo) == 0x000008, "Wrong alignment on FJackBattleFieldPermitVolumeInfo");
static_assert(sizeof(FJackBattleFieldPermitVolumeInfo) == 0x000030, "Wrong size on FJackBattleFieldPermitVolumeInfo");
static_assert(offsetof(FJackBattleFieldPermitVolumeInfo, Volume) == 0x000000, "Member 'FJackBattleFieldPermitVolumeInfo::Volume' has a wrong offset!");
static_assert(offsetof(FJackBattleFieldPermitVolumeInfo, BattleFieldRadius) == 0x000008, "Member 'FJackBattleFieldPermitVolumeInfo::BattleFieldRadius' has a wrong offset!");
static_assert(offsetof(FJackBattleFieldPermitVolumeInfo, Orientation) == 0x000010, "Member 'FJackBattleFieldPermitVolumeInfo::Orientation' has a wrong offset!");
static_assert(offsetof(FJackBattleFieldPermitVolumeInfo, bOrientationFlipEnable) == 0x000018, "Member 'FJackBattleFieldPermitVolumeInfo::bOrientationFlipEnable' has a wrong offset!");
static_assert(offsetof(FJackBattleFieldPermitVolumeInfo, BlockingVolumeArray) == 0x000020, "Member 'FJackBattleFieldPermitVolumeInfo::BlockingVolumeArray' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MonsterDrop
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDrop final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDrop) == 0x000008, "Wrong alignment on FJackLDT_MonsterDrop");
static_assert(sizeof(FJackLDT_MonsterDrop) == 0x000010, "Wrong size on FJackLDT_MonsterDrop");

// ScriptStruct JackGame.JackCollideEffectDict
// 0x0010 (0x0010 - 0x0000)
struct FJackCollideEffectDict final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UJackCollideEffect>         CollideEffect;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackCollideEffectDict) == 0x000008, "Wrong alignment on FJackCollideEffectDict");
static_assert(sizeof(FJackCollideEffectDict) == 0x000010, "Wrong size on FJackCollideEffectDict");
static_assert(offsetof(FJackCollideEffectDict, Name) == 0x000000, "Member 'FJackCollideEffectDict::Name' has a wrong offset!");
static_assert(offsetof(FJackCollideEffectDict, CollideEffect) == 0x000008, "Member 'FJackCollideEffectDict::CollideEffect' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_ActionBattleText
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ActionBattleText final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ActionBattleText) == 0x000008, "Wrong alignment on FJackLDT_ActionBattleText");
static_assert(sizeof(FJackLDT_ActionBattleText) == 0x000010, "Wrong size on FJackLDT_ActionBattleText");

// ScriptStruct JackGame.JackDataTableFacePoseSequence
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableFacePoseSequence final : public FTableRowBase
{
public:
	class FName                                   PoseName;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frame;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackFacialAnimCategory                       Category;                                          // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForbiddenRandomBlink;                             // 0x0015(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackFacialReferencedAnimSequence             ReferencedAnimSequenceType;                        // 0x0016(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableFacePoseSequence) == 0x000008, "Wrong alignment on FJackDataTableFacePoseSequence");
static_assert(sizeof(FJackDataTableFacePoseSequence) == 0x000018, "Wrong size on FJackDataTableFacePoseSequence");
static_assert(offsetof(FJackDataTableFacePoseSequence, PoseName) == 0x000008, "Member 'FJackDataTableFacePoseSequence::PoseName' has a wrong offset!");
static_assert(offsetof(FJackDataTableFacePoseSequence, Frame) == 0x000010, "Member 'FJackDataTableFacePoseSequence::Frame' has a wrong offset!");
static_assert(offsetof(FJackDataTableFacePoseSequence, Category) == 0x000014, "Member 'FJackDataTableFacePoseSequence::Category' has a wrong offset!");
static_assert(offsetof(FJackDataTableFacePoseSequence, bForbiddenRandomBlink) == 0x000015, "Member 'FJackDataTableFacePoseSequence::bForbiddenRandomBlink' has a wrong offset!");
static_assert(offsetof(FJackDataTableFacePoseSequence, ReferencedAnimSequenceType) == 0x000016, "Member 'FJackDataTableFacePoseSequence::ReferencedAnimSequenceType' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Monster_FacialTemplate
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Monster_FacialTemplate final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Monster_FacialTemplate) == 0x000008, "Wrong alignment on FJackLDT_Monster_FacialTemplate");
static_assert(sizeof(FJackLDT_Monster_FacialTemplate) == 0x000010, "Wrong size on FJackLDT_Monster_FacialTemplate");

// ScriptStruct JackGame.JackItemInnerCountMax
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackItemInnerCountMax final
{
public:
	class FName                                   ItemID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InnerCountMax;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackItemInnerCountMax) == 0x000008, "Wrong alignment on FJackItemInnerCountMax");
static_assert(sizeof(FJackItemInnerCountMax) == 0x000010, "Wrong size on FJackItemInnerCountMax");
static_assert(offsetof(FJackItemInnerCountMax, ItemID) == 0x000000, "Member 'FJackItemInnerCountMax::ItemID' has a wrong offset!");
static_assert(offsetof(FJackItemInnerCountMax, InnerCountMax) == 0x000008, "Member 'FJackItemInnerCountMax::InnerCountMax' has a wrong offset!");

// ScriptStruct JackGame.JackMaterialParameterCollectionDict
// 0x0010 (0x0010 - 0x0000)
struct FJackMaterialParameterCollectionDict final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           MaterialParameterCollection;                       // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMaterialParameterCollectionDict) == 0x000008, "Wrong alignment on FJackMaterialParameterCollectionDict");
static_assert(sizeof(FJackMaterialParameterCollectionDict) == 0x000010, "Wrong size on FJackMaterialParameterCollectionDict");
static_assert(offsetof(FJackMaterialParameterCollectionDict, Name) == 0x000000, "Member 'FJackMaterialParameterCollectionDict::Name' has a wrong offset!");
static_assert(offsetof(FJackMaterialParameterCollectionDict, MaterialParameterCollection) == 0x000008, "Member 'FJackMaterialParameterCollectionDict::MaterialParameterCollection' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotMonsterList_Rank_C
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMonsterList_Rank_C final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMonsterList_Rank_C) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMonsterList_Rank_C");
static_assert(sizeof(FJackLDT_MeosiSlotMonsterList_Rank_C) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMonsterList_Rank_C");

// ScriptStruct JackGame.JackDataTableCutSceneLevelLoadInfo
// 0x0080 (0x0088 - 0x0008)
struct FJackDataTableCutSceneLevelLoadInfo final : public FTableRowBase
{
public:
	class FName                                   LoadLevel0;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCSMapLevelStatus                         LoadState0;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCSMapLevelStatus                         UnLoadState0;                                      // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LoadLevel1;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCSMapLevelStatus                         LoadState1;                                        // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCSMapLevelStatus                         UnLoadState1;                                      // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LoadLevel2;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCSMapLevelStatus                         LoadState2;                                        // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCSMapLevelStatus                         UnLoadState2;                                      // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LoadLevel3;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCSMapLevelStatus                         LoadState3;                                        // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCSMapLevelStatus                         UnLoadState3;                                      // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LoadLevel4;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCSMapLevelStatus                         LoadState4;                                        // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCSMapLevelStatus                         UnLoadState4;                                      // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LoadLevel5;                                        // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCSMapLevelStatus                         LoadState5;                                        // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCSMapLevelStatus                         UnLoadState5;                                      // 0x0061(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LoadLevel6;                                        // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCSMapLevelStatus                         LoadState6;                                        // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCSMapLevelStatus                         UnLoadState6;                                      // 0x0071(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LoadLevel7;                                        // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCSMapLevelStatus                         LoadState7;                                        // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCSMapLevelStatus                         UnLoadState7;                                      // 0x0081(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableCutSceneLevelLoadInfo) == 0x000008, "Wrong alignment on FJackDataTableCutSceneLevelLoadInfo");
static_assert(sizeof(FJackDataTableCutSceneLevelLoadInfo) == 0x000088, "Wrong size on FJackDataTableCutSceneLevelLoadInfo");
static_assert(offsetof(FJackDataTableCutSceneLevelLoadInfo, LoadLevel0) == 0x000008, "Member 'FJackDataTableCutSceneLevelLoadInfo::LoadLevel0' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLevelLoadInfo, LoadState0) == 0x000010, "Member 'FJackDataTableCutSceneLevelLoadInfo::LoadState0' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLevelLoadInfo, UnLoadState0) == 0x000011, "Member 'FJackDataTableCutSceneLevelLoadInfo::UnLoadState0' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLevelLoadInfo, LoadLevel1) == 0x000018, "Member 'FJackDataTableCutSceneLevelLoadInfo::LoadLevel1' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLevelLoadInfo, LoadState1) == 0x000020, "Member 'FJackDataTableCutSceneLevelLoadInfo::LoadState1' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLevelLoadInfo, UnLoadState1) == 0x000021, "Member 'FJackDataTableCutSceneLevelLoadInfo::UnLoadState1' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLevelLoadInfo, LoadLevel2) == 0x000028, "Member 'FJackDataTableCutSceneLevelLoadInfo::LoadLevel2' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLevelLoadInfo, LoadState2) == 0x000030, "Member 'FJackDataTableCutSceneLevelLoadInfo::LoadState2' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLevelLoadInfo, UnLoadState2) == 0x000031, "Member 'FJackDataTableCutSceneLevelLoadInfo::UnLoadState2' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLevelLoadInfo, LoadLevel3) == 0x000038, "Member 'FJackDataTableCutSceneLevelLoadInfo::LoadLevel3' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLevelLoadInfo, LoadState3) == 0x000040, "Member 'FJackDataTableCutSceneLevelLoadInfo::LoadState3' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLevelLoadInfo, UnLoadState3) == 0x000041, "Member 'FJackDataTableCutSceneLevelLoadInfo::UnLoadState3' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLevelLoadInfo, LoadLevel4) == 0x000048, "Member 'FJackDataTableCutSceneLevelLoadInfo::LoadLevel4' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLevelLoadInfo, LoadState4) == 0x000050, "Member 'FJackDataTableCutSceneLevelLoadInfo::LoadState4' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLevelLoadInfo, UnLoadState4) == 0x000051, "Member 'FJackDataTableCutSceneLevelLoadInfo::UnLoadState4' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLevelLoadInfo, LoadLevel5) == 0x000058, "Member 'FJackDataTableCutSceneLevelLoadInfo::LoadLevel5' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLevelLoadInfo, LoadState5) == 0x000060, "Member 'FJackDataTableCutSceneLevelLoadInfo::LoadState5' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLevelLoadInfo, UnLoadState5) == 0x000061, "Member 'FJackDataTableCutSceneLevelLoadInfo::UnLoadState5' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLevelLoadInfo, LoadLevel6) == 0x000068, "Member 'FJackDataTableCutSceneLevelLoadInfo::LoadLevel6' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLevelLoadInfo, LoadState6) == 0x000070, "Member 'FJackDataTableCutSceneLevelLoadInfo::LoadState6' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLevelLoadInfo, UnLoadState6) == 0x000071, "Member 'FJackDataTableCutSceneLevelLoadInfo::UnLoadState6' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLevelLoadInfo, LoadLevel7) == 0x000078, "Member 'FJackDataTableCutSceneLevelLoadInfo::LoadLevel7' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLevelLoadInfo, LoadState7) == 0x000080, "Member 'FJackDataTableCutSceneLevelLoadInfo::LoadState7' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLevelLoadInfo, UnLoadState7) == 0x000081, "Member 'FJackDataTableCutSceneLevelLoadInfo::UnLoadState7' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Zukan
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Zukan final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Zukan) == 0x000008, "Wrong alignment on FJackLDT_Zukan");
static_assert(sizeof(FJackLDT_Zukan) == 0x000010, "Wrong size on FJackLDT_Zukan");

// ScriptStruct JackGame.JackTravelMapInfo
// 0x0007 (0x0007 - 0x0000)
struct FJackTravelMapInfo final
{
public:
	struct FJackMapJumpVolumeInfo                 MapJumpVolumeInfo;                                 // 0x0000(0x0007)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackTravelMapInfo) == 0x000001, "Wrong alignment on FJackTravelMapInfo");
static_assert(sizeof(FJackTravelMapInfo) == 0x000007, "Wrong size on FJackTravelMapInfo");
static_assert(offsetof(FJackTravelMapInfo, MapJumpVolumeInfo) == 0x000000, "Member 'FJackTravelMapInfo::MapJumpVolumeInfo' has a wrong offset!");

// ScriptStruct JackGame.JackBattleExtraToubatuCountInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackBattleExtraToubatuCountInfo final
{
public:
	class FName                                   MonsterID;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToubatuCount;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackBattleExtraToubatuCountInfo) == 0x000008, "Wrong alignment on FJackBattleExtraToubatuCountInfo");
static_assert(sizeof(FJackBattleExtraToubatuCountInfo) == 0x000010, "Wrong size on FJackBattleExtraToubatuCountInfo");
static_assert(offsetof(FJackBattleExtraToubatuCountInfo, MonsterID) == 0x000000, "Member 'FJackBattleExtraToubatuCountInfo::MonsterID' has a wrong offset!");
static_assert(offsetof(FJackBattleExtraToubatuCountInfo, ToubatuCount) == 0x000008, "Member 'FJackBattleExtraToubatuCountInfo::ToubatuCount' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotScenarioTBoxFeedProb
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotScenarioTBoxFeedProb final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotScenarioTBoxFeedProb) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotScenarioTBoxFeedProb");
static_assert(sizeof(FJackLDT_MeosiSlotScenarioTBoxFeedProb) == 0x000010, "Wrong size on FJackLDT_MeosiSlotScenarioTBoxFeedProb");

// ScriptStruct JackGame.JackDataTableMiniGameJackPotFluctuations
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMiniGameJackPotFluctuations final : public FTableRowBase
{
public:
	float                                         Lower;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Upper;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMiniGameJackPotFluctuations) == 0x000008, "Wrong alignment on FJackDataTableMiniGameJackPotFluctuations");
static_assert(sizeof(FJackDataTableMiniGameJackPotFluctuations) == 0x000010, "Wrong size on FJackDataTableMiniGameJackPotFluctuations");
static_assert(offsetof(FJackDataTableMiniGameJackPotFluctuations, Lower) == 0x000008, "Member 'FJackDataTableMiniGameJackPotFluctuations::Lower' has a wrong offset!");
static_assert(offsetof(FJackDataTableMiniGameJackPotFluctuations, Upper) == 0x00000C, "Member 'FJackDataTableMiniGameJackPotFluctuations::Upper' has a wrong offset!");

// ScriptStruct JackGame.JackCurveDict
// 0x0010 (0x0010 - 0x0000)
struct FJackCurveDict final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveBase*                             Curve;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackCurveDict) == 0x000008, "Wrong alignment on FJackCurveDict");
static_assert(sizeof(FJackCurveDict) == 0x000010, "Wrong size on FJackCurveDict");
static_assert(offsetof(FJackCurveDict, Name) == 0x000000, "Member 'FJackCurveDict::Name' has a wrong offset!");
static_assert(offsetof(FJackCurveDict, Curve) == 0x000008, "Member 'FJackCurveDict::Curve' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotSquare
// 0x0008 (0x0008 - 0x0000)
struct FJackMeosiSlotSquare final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Pos;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMeosiSlotSquare) == 0x000004, "Wrong alignment on FJackMeosiSlotSquare");
static_assert(sizeof(FJackMeosiSlotSquare) == 0x000008, "Wrong size on FJackMeosiSlotSquare");
static_assert(offsetof(FJackMeosiSlotSquare, bIsValid) == 0x000000, "Member 'FJackMeosiSlotSquare::bIsValid' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotSquare, Pos) == 0x000004, "Member 'FJackMeosiSlotSquare::Pos' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotWinningInfo
// 0x0018 (0x0018 - 0x0000)
struct FJackMeosiSlotWinningInfo final
{
public:
	EJackMeosiSlotPicture                         Picture;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackMeosiSlotSquare>           PayLineSquares;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMeosiSlotWinningInfo) == 0x000008, "Wrong alignment on FJackMeosiSlotWinningInfo");
static_assert(sizeof(FJackMeosiSlotWinningInfo) == 0x000018, "Wrong size on FJackMeosiSlotWinningInfo");
static_assert(offsetof(FJackMeosiSlotWinningInfo, Picture) == 0x000000, "Member 'FJackMeosiSlotWinningInfo::Picture' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotWinningInfo, PayLineSquares) == 0x000008, "Member 'FJackMeosiSlotWinningInfo::PayLineSquares' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotBreakOffRefundSetting
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMeosiSlotBreakOffRefundSetting final : public FTableRowBase
{
public:
	float                                         EachGameRate;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UperRate;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowerRate;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotBreakOffRefundSetting) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotBreakOffRefundSetting");
static_assert(sizeof(FJackDataTableMeosiSlotBreakOffRefundSetting) == 0x000018, "Wrong size on FJackDataTableMeosiSlotBreakOffRefundSetting");
static_assert(offsetof(FJackDataTableMeosiSlotBreakOffRefundSetting, EachGameRate) == 0x000008, "Member 'FJackDataTableMeosiSlotBreakOffRefundSetting::EachGameRate' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotBreakOffRefundSetting, UperRate) == 0x00000C, "Member 'FJackDataTableMeosiSlotBreakOffRefundSetting::UperRate' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotBreakOffRefundSetting, LowerRate) == 0x000010, "Member 'FJackDataTableMeosiSlotBreakOffRefundSetting::LowerRate' has a wrong offset!");

// ScriptStruct JackGame.JackUMGActionBagInfo
// 0x0008 (0x0008 - 0x0000)
struct FJackUMGActionBagInfo final
{
public:
	EJackItem_Bag                                 BagType;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                CharType;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemIndex;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGActionBagInfo) == 0x000004, "Wrong alignment on FJackUMGActionBagInfo");
static_assert(sizeof(FJackUMGActionBagInfo) == 0x000008, "Wrong size on FJackUMGActionBagInfo");
static_assert(offsetof(FJackUMGActionBagInfo, BagType) == 0x000000, "Member 'FJackUMGActionBagInfo::BagType' has a wrong offset!");
static_assert(offsetof(FJackUMGActionBagInfo, CharType) == 0x000001, "Member 'FJackUMGActionBagInfo::CharType' has a wrong offset!");
static_assert(offsetof(FJackUMGActionBagInfo, ItemIndex) == 0x000004, "Member 'FJackUMGActionBagInfo::ItemIndex' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_D07
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_D07 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_D07) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_D07");
static_assert(sizeof(FJackLDT_MonsterDeploy_D07) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_D07");

// ScriptStruct JackGame.JackDataTableParticle
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableParticle final : public FTableRowBase
{
public:
	class UParticleSystem*                        Particle;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableParticle) == 0x000008, "Wrong alignment on FJackDataTableParticle");
static_assert(sizeof(FJackDataTableParticle) == 0x000010, "Wrong size on FJackDataTableParticle");
static_assert(offsetof(FJackDataTableParticle, Particle) == 0x000008, "Member 'FJackDataTableParticle::Particle' has a wrong offset!");

// ScriptStruct JackGame.JackForceFeedbackDict
// 0x0010 (0x0010 - 0x0000)
struct FJackForceFeedbackDict final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   ForceFeedback;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackForceFeedbackDict) == 0x000008, "Wrong alignment on FJackForceFeedbackDict");
static_assert(sizeof(FJackForceFeedbackDict) == 0x000010, "Wrong size on FJackForceFeedbackDict");
static_assert(offsetof(FJackForceFeedbackDict, Name) == 0x000000, "Member 'FJackForceFeedbackDict::Name' has a wrong offset!");
static_assert(offsetof(FJackForceFeedbackDict, ForceFeedback) == 0x000008, "Member 'FJackForceFeedbackDict::ForceFeedback' has a wrong offset!");

// ScriptStruct JackGame.JackUMGEquipmentResultData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackUMGEquipmentResultData final
{
public:
	EJackUMGEquipmentResult                       ResultType;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackItem_Bag                                 EquipmentBagType;                                  // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackItem_Bag                                 TakenOutBagType;                                   // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EquipmentItemId;                                   // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReleaseItemId;                                     // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGEquipmentResultData) == 0x000008, "Wrong alignment on FJackUMGEquipmentResultData");
static_assert(sizeof(FJackUMGEquipmentResultData) == 0x000018, "Wrong size on FJackUMGEquipmentResultData");
static_assert(offsetof(FJackUMGEquipmentResultData, ResultType) == 0x000000, "Member 'FJackUMGEquipmentResultData::ResultType' has a wrong offset!");
static_assert(offsetof(FJackUMGEquipmentResultData, EquipmentBagType) == 0x000001, "Member 'FJackUMGEquipmentResultData::EquipmentBagType' has a wrong offset!");
static_assert(offsetof(FJackUMGEquipmentResultData, TakenOutBagType) == 0x000002, "Member 'FJackUMGEquipmentResultData::TakenOutBagType' has a wrong offset!");
static_assert(offsetof(FJackUMGEquipmentResultData, EquipmentItemId) == 0x000008, "Member 'FJackUMGEquipmentResultData::EquipmentItemId' has a wrong offset!");
static_assert(offsetof(FJackUMGEquipmentResultData, ReleaseItemId) == 0x000010, "Member 'FJackUMGEquipmentResultData::ReleaseItemId' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotBonusMonsterListLevel3
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotBonusMonsterListLevel3 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotBonusMonsterListLevel3) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotBonusMonsterListLevel3");
static_assert(sizeof(FJackLDT_MeosiSlotBonusMonsterListLevel3) == 0x000010, "Wrong size on FJackLDT_MeosiSlotBonusMonsterListLevel3");

// ScriptStruct JackGame.JackOverrideMaterial
// 0x01B0 (0x01B0 - 0x0000)
struct FJackOverrideMaterial final
{
public:
	class FName                                   TargetMaterialName;                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      OverrideMaterial;                                  // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideTexture1_ParamName;                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                OverrideTexture1;                                  // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideTexture2_ParamName;                        // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                OverrideTexture2;                                  // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideTexture3_ParamName;                        // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                OverrideTexture3;                                  // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideTexture4_ParamName;                        // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                OverrideTexture4;                                  // 0x0088(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideTexture5_ParamName;                        // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                OverrideTexture5;                                  // 0x00A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideColor1_ParamName;                          // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OverrideColor1;                                    // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideColor2_ParamName;                          // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OverrideColor2;                                    // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideColor3_ParamName;                          // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OverrideColor3;                                    // 0x00F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideColor4_ParamName;                          // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OverrideColor4;                                    // 0x0110(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideColor5_ParamName;                          // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OverrideColor5;                                    // 0x0128(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideColor6_ParamName;                          // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OverrideColor6;                                    // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideColor7_ParamName;                          // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OverrideColor7;                                    // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideColor8_ParamName;                          // 0x0168(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OverrideColor8;                                    // 0x0170(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideColor9_ParamName;                          // 0x0180(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OverrideColor9;                                    // 0x0188(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideColor10_ParamName;                         // 0x0198(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OverrideColor10;                                   // 0x01A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackOverrideMaterial) == 0x000008, "Wrong alignment on FJackOverrideMaterial");
static_assert(sizeof(FJackOverrideMaterial) == 0x0001B0, "Wrong size on FJackOverrideMaterial");
static_assert(offsetof(FJackOverrideMaterial, TargetMaterialName) == 0x000000, "Member 'FJackOverrideMaterial::TargetMaterialName' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideMaterial) == 0x000008, "Member 'FJackOverrideMaterial::OverrideMaterial' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideTexture1_ParamName) == 0x000020, "Member 'FJackOverrideMaterial::OverrideTexture1_ParamName' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideTexture1) == 0x000028, "Member 'FJackOverrideMaterial::OverrideTexture1' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideTexture2_ParamName) == 0x000040, "Member 'FJackOverrideMaterial::OverrideTexture2_ParamName' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideTexture2) == 0x000048, "Member 'FJackOverrideMaterial::OverrideTexture2' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideTexture3_ParamName) == 0x000060, "Member 'FJackOverrideMaterial::OverrideTexture3_ParamName' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideTexture3) == 0x000068, "Member 'FJackOverrideMaterial::OverrideTexture3' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideTexture4_ParamName) == 0x000080, "Member 'FJackOverrideMaterial::OverrideTexture4_ParamName' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideTexture4) == 0x000088, "Member 'FJackOverrideMaterial::OverrideTexture4' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideTexture5_ParamName) == 0x0000A0, "Member 'FJackOverrideMaterial::OverrideTexture5_ParamName' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideTexture5) == 0x0000A8, "Member 'FJackOverrideMaterial::OverrideTexture5' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideColor1_ParamName) == 0x0000C0, "Member 'FJackOverrideMaterial::OverrideColor1_ParamName' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideColor1) == 0x0000C8, "Member 'FJackOverrideMaterial::OverrideColor1' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideColor2_ParamName) == 0x0000D8, "Member 'FJackOverrideMaterial::OverrideColor2_ParamName' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideColor2) == 0x0000E0, "Member 'FJackOverrideMaterial::OverrideColor2' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideColor3_ParamName) == 0x0000F0, "Member 'FJackOverrideMaterial::OverrideColor3_ParamName' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideColor3) == 0x0000F8, "Member 'FJackOverrideMaterial::OverrideColor3' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideColor4_ParamName) == 0x000108, "Member 'FJackOverrideMaterial::OverrideColor4_ParamName' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideColor4) == 0x000110, "Member 'FJackOverrideMaterial::OverrideColor4' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideColor5_ParamName) == 0x000120, "Member 'FJackOverrideMaterial::OverrideColor5_ParamName' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideColor5) == 0x000128, "Member 'FJackOverrideMaterial::OverrideColor5' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideColor6_ParamName) == 0x000138, "Member 'FJackOverrideMaterial::OverrideColor6_ParamName' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideColor6) == 0x000140, "Member 'FJackOverrideMaterial::OverrideColor6' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideColor7_ParamName) == 0x000150, "Member 'FJackOverrideMaterial::OverrideColor7_ParamName' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideColor7) == 0x000158, "Member 'FJackOverrideMaterial::OverrideColor7' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideColor8_ParamName) == 0x000168, "Member 'FJackOverrideMaterial::OverrideColor8_ParamName' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideColor8) == 0x000170, "Member 'FJackOverrideMaterial::OverrideColor8' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideColor9_ParamName) == 0x000180, "Member 'FJackOverrideMaterial::OverrideColor9_ParamName' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideColor9) == 0x000188, "Member 'FJackOverrideMaterial::OverrideColor9' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideColor10_ParamName) == 0x000198, "Member 'FJackOverrideMaterial::OverrideColor10_ParamName' has a wrong offset!");
static_assert(offsetof(FJackOverrideMaterial, OverrideColor10) == 0x0001A0, "Member 'FJackOverrideMaterial::OverrideColor10' has a wrong offset!");

// ScriptStruct JackGame.JackCoordinateMeshInfo
// 0x0888 (0x0888 - 0x0000)
struct FJackCoordinateMeshInfo final
{
public:
	TSoftObjectPtr<class USkeletalMesh>           Mesh;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJackOverrideMaterial                  OverrideMaterial1;                                 // 0x0018(0x01B0)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackOverrideMaterial                  OverrideMaterial2;                                 // 0x01C8(0x01B0)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackOverrideMaterial                  OverrideMaterial3;                                 // 0x0378(0x01B0)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackOverrideMaterial                  OverrideMaterial4;                                 // 0x0528(0x01B0)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackOverrideMaterial                  OverrideMaterial5;                                 // 0x06D8(0x01B0)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackCoordinateMeshInfo) == 0x000008, "Wrong alignment on FJackCoordinateMeshInfo");
static_assert(sizeof(FJackCoordinateMeshInfo) == 0x000888, "Wrong size on FJackCoordinateMeshInfo");
static_assert(offsetof(FJackCoordinateMeshInfo, Mesh) == 0x000000, "Member 'FJackCoordinateMeshInfo::Mesh' has a wrong offset!");
static_assert(offsetof(FJackCoordinateMeshInfo, OverrideMaterial1) == 0x000018, "Member 'FJackCoordinateMeshInfo::OverrideMaterial1' has a wrong offset!");
static_assert(offsetof(FJackCoordinateMeshInfo, OverrideMaterial2) == 0x0001C8, "Member 'FJackCoordinateMeshInfo::OverrideMaterial2' has a wrong offset!");
static_assert(offsetof(FJackCoordinateMeshInfo, OverrideMaterial3) == 0x000378, "Member 'FJackCoordinateMeshInfo::OverrideMaterial3' has a wrong offset!");
static_assert(offsetof(FJackCoordinateMeshInfo, OverrideMaterial4) == 0x000528, "Member 'FJackCoordinateMeshInfo::OverrideMaterial4' has a wrong offset!");
static_assert(offsetof(FJackCoordinateMeshInfo, OverrideMaterial5) == 0x0006D8, "Member 'FJackCoordinateMeshInfo::OverrideMaterial5' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableCoordinate
// 0x4458 (0x4460 - 0x0008)
struct FJackDataTableCoordinate final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USkeletalMesh>           MasterPoseMesh;                                    // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJackCoordinateMeshInfo                Body;                                              // 0x0020(0x0888)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackCoordinateMeshInfo                Face;                                              // 0x08A8(0x0888)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackCoordinateMeshInfo                Hair;                                              // 0x1130(0x0888)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackCoordinateMeshInfo                Beard;                                             // 0x19B8(0x0888)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackCoordinateMeshInfo                Accessory;                                         // 0x2240(0x0888)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackCoordinateMeshInfo                Cloth1;                                            // 0x2AC8(0x0888)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackCoordinateMeshInfo                Cloth2;                                            // 0x3350(0x0888)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackCoordinateMeshInfo                Cloth3;                                            // 0x3BD8(0x0888)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableCoordinate) == 0x000008, "Wrong alignment on FJackDataTableCoordinate");
static_assert(sizeof(FJackDataTableCoordinate) == 0x004460, "Wrong size on FJackDataTableCoordinate");
static_assert(offsetof(FJackDataTableCoordinate, MasterPoseMesh) == 0x000008, "Member 'FJackDataTableCoordinate::MasterPoseMesh' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordinate, Body) == 0x000020, "Member 'FJackDataTableCoordinate::Body' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordinate, Face) == 0x0008A8, "Member 'FJackDataTableCoordinate::Face' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordinate, Hair) == 0x001130, "Member 'FJackDataTableCoordinate::Hair' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordinate, Beard) == 0x0019B8, "Member 'FJackDataTableCoordinate::Beard' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordinate, Accessory) == 0x002240, "Member 'FJackDataTableCoordinate::Accessory' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordinate, Cloth1) == 0x002AC8, "Member 'FJackDataTableCoordinate::Cloth1' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordinate, Cloth2) == 0x003350, "Member 'FJackDataTableCoordinate::Cloth2' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoordinate, Cloth3) == 0x003BD8, "Member 'FJackDataTableCoordinate::Cloth3' has a wrong offset!");

// ScriptStruct JackGame.JackCameraAnimDict
// 0x0010 (0x0010 - 0x0000)
struct FJackCameraAnimDict final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraAnim*                            CameraAnim;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackCameraAnimDict) == 0x000008, "Wrong alignment on FJackCameraAnimDict");
static_assert(sizeof(FJackCameraAnimDict) == 0x000010, "Wrong size on FJackCameraAnimDict");
static_assert(offsetof(FJackCameraAnimDict, Name) == 0x000000, "Member 'FJackCameraAnimDict::Name' has a wrong offset!");
static_assert(offsetof(FJackCameraAnimDict, CameraAnim) == 0x000008, "Member 'FJackCameraAnimDict::CameraAnim' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Sim_MantleC_N013_up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_MantleC_N013_up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_MantleC_N013_up) == 0x000008, "Wrong alignment on FJackLDT_Sim_MantleC_N013_up");
static_assert(sizeof(FJackLDT_Sim_MantleC_N013_up) == 0x000010, "Wrong size on FJackLDT_Sim_MantleC_N013_up");

// ScriptStruct JackGame.JackPointDamageEvent
// 0x0090 (0x0138 - 0x00A8)
struct FJackPointDamageEvent final : public FPointDamageEvent
{
public:
	uint8                                         Pad_A8[0x90];                                      // 0x00A8(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackPointDamageEvent) == 0x000008, "Wrong alignment on FJackPointDamageEvent");
static_assert(sizeof(FJackPointDamageEvent) == 0x000138, "Wrong size on FJackPointDamageEvent");

// ScriptStruct JackGame.JackUmaRaceSplineData
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackUmaRaceSplineData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUmaRaceSplineData) == 0x000008, "Wrong alignment on FJackUmaRaceSplineData");
static_assert(sizeof(FJackUmaRaceSplineData) == 0x000010, "Wrong size on FJackUmaRaceSplineData");

// ScriptStruct JackGame.JackDataTableCoinExchange
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableCoinExchange final : public FTableRowBase
{
public:
	class FName                                   ItemID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExchangeNumber;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackExchange                                 ExchangeType;                                      // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   QuestionItemName;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestionItemExplanation;                           // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableCoinExchange) == 0x000008, "Wrong alignment on FJackDataTableCoinExchange");
static_assert(sizeof(FJackDataTableCoinExchange) == 0x000028, "Wrong size on FJackDataTableCoinExchange");
static_assert(offsetof(FJackDataTableCoinExchange, ItemID) == 0x000008, "Member 'FJackDataTableCoinExchange::ItemID' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchange, ExchangeNumber) == 0x000010, "Member 'FJackDataTableCoinExchange::ExchangeNumber' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchange, ExchangeType) == 0x000014, "Member 'FJackDataTableCoinExchange::ExchangeType' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchange, QuestionItemName) == 0x000018, "Member 'FJackDataTableCoinExchange::QuestionItemName' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchange, QuestionItemExplanation) == 0x000020, "Member 'FJackDataTableCoinExchange::QuestionItemExplanation' has a wrong offset!");

// ScriptStruct JackGame.JackCommandSample3
// 0x0008 (0x0018 - 0x0010)
struct FJackCommandSample3 final : public FJackCommand
{
public:
	int32                                         HogeParameter;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackCommandSample3) == 0x000008, "Wrong alignment on FJackCommandSample3");
static_assert(sizeof(FJackCommandSample3) == 0x000018, "Wrong size on FJackCommandSample3");
static_assert(offsetof(FJackCommandSample3, HogeParameter) == 0x000010, "Member 'FJackCommandSample3::HogeParameter' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Vehicle_V001_E001_P008_Sync
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Vehicle_V001_E001_P008_Sync final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Vehicle_V001_E001_P008_Sync) == 0x000008, "Wrong alignment on FJackLDT_Vehicle_V001_E001_P008_Sync");
static_assert(sizeof(FJackLDT_Vehicle_V001_E001_P008_Sync) == 0x000010, "Wrong size on FJackLDT_Vehicle_V001_E001_P008_Sync");

// ScriptStruct JackGame.JackDataTableMiniGameJackPotProbability
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMiniGameJackPotProbability final : public FTableRowBase
{
public:
	int32                                         BasePercent;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fraction;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMiniGameJackPotProbability) == 0x000008, "Wrong alignment on FJackDataTableMiniGameJackPotProbability");
static_assert(sizeof(FJackDataTableMiniGameJackPotProbability) == 0x000010, "Wrong size on FJackDataTableMiniGameJackPotProbability");
static_assert(offsetof(FJackDataTableMiniGameJackPotProbability, BasePercent) == 0x000008, "Member 'FJackDataTableMiniGameJackPotProbability::BasePercent' has a wrong offset!");
static_assert(offsetof(FJackDataTableMiniGameJackPotProbability, Fraction) == 0x00000C, "Member 'FJackDataTableMiniGameJackPotProbability::Fraction' has a wrong offset!");

// ScriptStruct JackGame.JackPropClassDict
// 0x0010 (0x0010 - 0x0000)
struct FJackPropClassDict final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AJackPropActor>             PropClass;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackPropClassDict) == 0x000008, "Wrong alignment on FJackPropClassDict");
static_assert(sizeof(FJackPropClassDict) == 0x000010, "Wrong size on FJackPropClassDict");
static_assert(offsetof(FJackPropClassDict, Name) == 0x000000, "Member 'FJackPropClassDict::Name' has a wrong offset!");
static_assert(offsetof(FJackPropClassDict, PropClass) == 0x000008, "Member 'FJackPropClassDict::PropClass' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableAchievement
// 0x0050 (0x0058 - 0x0008)
struct FJackDataTableAchievement final : public FTableRowBase
{
public:
	class FName                                   AchievementNameID;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DescriptionID;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackAchievementRarity                        Rarity;                                            // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackAchievementCategory                      Category;                                          // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackAchievementCondition                     Condition;                                         // 0x001A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StringParameter;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumericalParameter;                                // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackAchievementTiming                        Timing;                                            // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CategoryNo;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhoneticNo;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TripleAchievementNo;                               // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   UE4AchievementName;                                // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUE4AchievementOnly;                               // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUE4AchievementReload;                             // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisabledInTrial;                                  // 0x0052(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableAchievement) == 0x000008, "Wrong alignment on FJackDataTableAchievement");
static_assert(sizeof(FJackDataTableAchievement) == 0x000058, "Wrong size on FJackDataTableAchievement");
static_assert(offsetof(FJackDataTableAchievement, AchievementNameID) == 0x000008, "Member 'FJackDataTableAchievement::AchievementNameID' has a wrong offset!");
static_assert(offsetof(FJackDataTableAchievement, DescriptionID) == 0x000010, "Member 'FJackDataTableAchievement::DescriptionID' has a wrong offset!");
static_assert(offsetof(FJackDataTableAchievement, Rarity) == 0x000018, "Member 'FJackDataTableAchievement::Rarity' has a wrong offset!");
static_assert(offsetof(FJackDataTableAchievement, Category) == 0x000019, "Member 'FJackDataTableAchievement::Category' has a wrong offset!");
static_assert(offsetof(FJackDataTableAchievement, Condition) == 0x00001A, "Member 'FJackDataTableAchievement::Condition' has a wrong offset!");
static_assert(offsetof(FJackDataTableAchievement, StringParameter) == 0x000020, "Member 'FJackDataTableAchievement::StringParameter' has a wrong offset!");
static_assert(offsetof(FJackDataTableAchievement, NumericalParameter) == 0x000030, "Member 'FJackDataTableAchievement::NumericalParameter' has a wrong offset!");
static_assert(offsetof(FJackDataTableAchievement, Timing) == 0x000034, "Member 'FJackDataTableAchievement::Timing' has a wrong offset!");
static_assert(offsetof(FJackDataTableAchievement, CategoryNo) == 0x000038, "Member 'FJackDataTableAchievement::CategoryNo' has a wrong offset!");
static_assert(offsetof(FJackDataTableAchievement, PhoneticNo) == 0x00003C, "Member 'FJackDataTableAchievement::PhoneticNo' has a wrong offset!");
static_assert(offsetof(FJackDataTableAchievement, TripleAchievementNo) == 0x000040, "Member 'FJackDataTableAchievement::TripleAchievementNo' has a wrong offset!");
static_assert(offsetof(FJackDataTableAchievement, UE4AchievementName) == 0x000048, "Member 'FJackDataTableAchievement::UE4AchievementName' has a wrong offset!");
static_assert(offsetof(FJackDataTableAchievement, bUE4AchievementOnly) == 0x000050, "Member 'FJackDataTableAchievement::bUE4AchievementOnly' has a wrong offset!");
static_assert(offsetof(FJackDataTableAchievement, bUE4AchievementReload) == 0x000051, "Member 'FJackDataTableAchievement::bUE4AchievementReload' has a wrong offset!");
static_assert(offsetof(FJackDataTableAchievement, bDisabledInTrial) == 0x000052, "Member 'FJackDataTableAchievement::bDisabledInTrial' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableOddEffectSlide
// 0x0028 (0x0030 - 0x0008)
struct FJackDataTableOddEffectSlide final : public FTableRowBase
{
public:
	class FName                                   SlideControlOddEffectID;                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 RankValues;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   PlusEffectID;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MinusEffectID;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableOddEffectSlide) == 0x000008, "Wrong alignment on FJackDataTableOddEffectSlide");
static_assert(sizeof(FJackDataTableOddEffectSlide) == 0x000030, "Wrong size on FJackDataTableOddEffectSlide");
static_assert(offsetof(FJackDataTableOddEffectSlide, SlideControlOddEffectID) == 0x000008, "Member 'FJackDataTableOddEffectSlide::SlideControlOddEffectID' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectSlide, RankValues) == 0x000010, "Member 'FJackDataTableOddEffectSlide::RankValues' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectSlide, PlusEffectID) == 0x000020, "Member 'FJackDataTableOddEffectSlide::PlusEffectID' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectSlide, MinusEffectID) == 0x000028, "Member 'FJackDataTableOddEffectSlide::MinusEffectID' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Vehicle_V103_E001_Sync
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Vehicle_V103_E001_Sync final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Vehicle_V103_E001_Sync) == 0x000008, "Wrong alignment on FJackLDT_Vehicle_V103_E001_Sync");
static_assert(sizeof(FJackLDT_Vehicle_V103_E001_Sync) == 0x000010, "Wrong size on FJackLDT_Vehicle_V103_E001_Sync");

// ScriptStruct JackGame.JackDataTableMeosiSlotMonsterRankMap
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableMeosiSlotMonsterRankMap final : public FTableRowBase
{
public:
	EJackMeosiSlotMonsterRank                     Lv1_5;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterRank                     Lv6_10;                                            // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterRank                     Lv11_15;                                           // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterRank                     Lv16_20;                                           // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterRank                     Lv21_25;                                           // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterRank                     Lv26_30;                                           // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterRank                     Lv31_35;                                           // 0x000E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterRank                     Lv36_40;                                           // 0x000F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterRank                     Lv41_45;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterRank                     Lv46_50;                                           // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterRank                     Lv51_55;                                           // 0x0012(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterRank                     Lv56_60;                                           // 0x0013(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterRank                     Lv61_65;                                           // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterRank                     Lv66_70;                                           // 0x0015(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterRank                     Lv71_75;                                           // 0x0016(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterRank                     Lv76_80;                                           // 0x0017(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterRank                     Lv81_85;                                           // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterRank                     Lv86_90;                                           // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterRank                     Lv91_95;                                           // 0x001A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterRank                     Lv96_99;                                           // 0x001B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotMonsterRankMap) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotMonsterRankMap");
static_assert(sizeof(FJackDataTableMeosiSlotMonsterRankMap) == 0x000020, "Wrong size on FJackDataTableMeosiSlotMonsterRankMap");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRankMap, Lv1_5) == 0x000008, "Member 'FJackDataTableMeosiSlotMonsterRankMap::Lv1_5' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRankMap, Lv6_10) == 0x000009, "Member 'FJackDataTableMeosiSlotMonsterRankMap::Lv6_10' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRankMap, Lv11_15) == 0x00000A, "Member 'FJackDataTableMeosiSlotMonsterRankMap::Lv11_15' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRankMap, Lv16_20) == 0x00000B, "Member 'FJackDataTableMeosiSlotMonsterRankMap::Lv16_20' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRankMap, Lv21_25) == 0x00000C, "Member 'FJackDataTableMeosiSlotMonsterRankMap::Lv21_25' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRankMap, Lv26_30) == 0x00000D, "Member 'FJackDataTableMeosiSlotMonsterRankMap::Lv26_30' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRankMap, Lv31_35) == 0x00000E, "Member 'FJackDataTableMeosiSlotMonsterRankMap::Lv31_35' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRankMap, Lv36_40) == 0x00000F, "Member 'FJackDataTableMeosiSlotMonsterRankMap::Lv36_40' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRankMap, Lv41_45) == 0x000010, "Member 'FJackDataTableMeosiSlotMonsterRankMap::Lv41_45' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRankMap, Lv46_50) == 0x000011, "Member 'FJackDataTableMeosiSlotMonsterRankMap::Lv46_50' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRankMap, Lv51_55) == 0x000012, "Member 'FJackDataTableMeosiSlotMonsterRankMap::Lv51_55' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRankMap, Lv56_60) == 0x000013, "Member 'FJackDataTableMeosiSlotMonsterRankMap::Lv56_60' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRankMap, Lv61_65) == 0x000014, "Member 'FJackDataTableMeosiSlotMonsterRankMap::Lv61_65' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRankMap, Lv66_70) == 0x000015, "Member 'FJackDataTableMeosiSlotMonsterRankMap::Lv66_70' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRankMap, Lv71_75) == 0x000016, "Member 'FJackDataTableMeosiSlotMonsterRankMap::Lv71_75' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRankMap, Lv76_80) == 0x000017, "Member 'FJackDataTableMeosiSlotMonsterRankMap::Lv76_80' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRankMap, Lv81_85) == 0x000018, "Member 'FJackDataTableMeosiSlotMonsterRankMap::Lv81_85' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRankMap, Lv86_90) == 0x000019, "Member 'FJackDataTableMeosiSlotMonsterRankMap::Lv86_90' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRankMap, Lv91_95) == 0x00001A, "Member 'FJackDataTableMeosiSlotMonsterRankMap::Lv91_95' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRankMap, Lv96_99) == 0x00001B, "Member 'FJackDataTableMeosiSlotMonsterRankMap::Lv96_99' has a wrong offset!");

// ScriptStruct JackGame.JackWeaponClassDict
// 0x0010 (0x0010 - 0x0000)
struct FJackWeaponClassDict final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AJackWeaponBase>            WeaponClass;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackWeaponClassDict) == 0x000008, "Wrong alignment on FJackWeaponClassDict");
static_assert(sizeof(FJackWeaponClassDict) == 0x000010, "Wrong size on FJackWeaponClassDict");
static_assert(offsetof(FJackWeaponClassDict, Name) == 0x000000, "Member 'FJackWeaponClassDict::Name' has a wrong offset!");
static_assert(offsetof(FJackWeaponClassDict, WeaponClass) == 0x000008, "Member 'FJackWeaponClassDict::WeaponClass' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotMachineSoltico
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMachineSoltico final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMachineSoltico) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMachineSoltico");
static_assert(sizeof(FJackLDT_MeosiSlotMachineSoltico) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMachineSoltico");

// ScriptStruct JackGame.JackDataTableActionSecondCheck
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableActionSecondCheck final : public FTableRowBase
{
public:
	class FName                                   FunctionName;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SubSecondCheckIDs;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableActionSecondCheck) == 0x000008, "Wrong alignment on FJackDataTableActionSecondCheck");
static_assert(sizeof(FJackDataTableActionSecondCheck) == 0x000020, "Wrong size on FJackDataTableActionSecondCheck");
static_assert(offsetof(FJackDataTableActionSecondCheck, FunctionName) == 0x000008, "Member 'FJackDataTableActionSecondCheck::FunctionName' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionSecondCheck, SubSecondCheckIDs) == 0x000010, "Member 'FJackDataTableActionSecondCheck::SubSecondCheckIDs' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotUnionRouteNum
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotUnionRouteNum final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotUnionRouteNum) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotUnionRouteNum");
static_assert(sizeof(FJackLDT_MeosiSlotUnionRouteNum) == 0x000010, "Wrong size on FJackLDT_MeosiSlotUnionRouteNum");

// ScriptStruct JackGame.JackProjectileClassDict
// 0x0010 (0x0010 - 0x0000)
struct FJackProjectileClassDict final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AJackProjectile>            ProjectileClass;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackProjectileClassDict) == 0x000008, "Wrong alignment on FJackProjectileClassDict");
static_assert(sizeof(FJackProjectileClassDict) == 0x000010, "Wrong size on FJackProjectileClassDict");
static_assert(offsetof(FJackProjectileClassDict, Name) == 0x000000, "Member 'FJackProjectileClassDict::Name' has a wrong offset!");
static_assert(offsetof(FJackProjectileClassDict, ProjectileClass) == 0x000008, "Member 'FJackProjectileClassDict::ProjectileClass' has a wrong offset!");

// ScriptStruct JackGame.JackSoundDict
// 0x0010 (0x0010 - 0x0000)
struct FJackSoundDict
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackSoundDict) == 0x000008, "Wrong alignment on FJackSoundDict");
static_assert(sizeof(FJackSoundDict) == 0x000010, "Wrong size on FJackSoundDict");
static_assert(offsetof(FJackSoundDict, Name) == 0x000000, "Member 'FJackSoundDict::Name' has a wrong offset!");
static_assert(offsetof(FJackSoundDict, Sound) == 0x000008, "Member 'FJackSoundDict::Sound' has a wrong offset!");

// ScriptStruct JackGame.JackCaptionLipInfo
// 0x0048 (0x0048 - 0x0000)
struct FJackCaptionLipInfo final
{
public:
	bool                                          bLipSyncEnable;                                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LipSyncSec;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LipSyncStartOffset;                                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LipChangeSec;                                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseVowel;                                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackVowel                                    StartVowelType;                                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartVowelSec;                                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackVowel                                    EndVowelType;                                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EndVowelSec;                                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LipSyncApplyRate;                                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USoundBase*>                     VoiceAssets;                                       // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UDataTable*                             LipPoseDataBase;                                   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             VoiceTimelineDataBase;                             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackCaptionLipInfo) == 0x000008, "Wrong alignment on FJackCaptionLipInfo");
static_assert(sizeof(FJackCaptionLipInfo) == 0x000048, "Wrong size on FJackCaptionLipInfo");
static_assert(offsetof(FJackCaptionLipInfo, bLipSyncEnable) == 0x000000, "Member 'FJackCaptionLipInfo::bLipSyncEnable' has a wrong offset!");
static_assert(offsetof(FJackCaptionLipInfo, LipSyncSec) == 0x000004, "Member 'FJackCaptionLipInfo::LipSyncSec' has a wrong offset!");
static_assert(offsetof(FJackCaptionLipInfo, LipSyncStartOffset) == 0x000008, "Member 'FJackCaptionLipInfo::LipSyncStartOffset' has a wrong offset!");
static_assert(offsetof(FJackCaptionLipInfo, LipChangeSec) == 0x00000C, "Member 'FJackCaptionLipInfo::LipChangeSec' has a wrong offset!");
static_assert(offsetof(FJackCaptionLipInfo, bUseVowel) == 0x000010, "Member 'FJackCaptionLipInfo::bUseVowel' has a wrong offset!");
static_assert(offsetof(FJackCaptionLipInfo, StartVowelType) == 0x000011, "Member 'FJackCaptionLipInfo::StartVowelType' has a wrong offset!");
static_assert(offsetof(FJackCaptionLipInfo, StartVowelSec) == 0x000014, "Member 'FJackCaptionLipInfo::StartVowelSec' has a wrong offset!");
static_assert(offsetof(FJackCaptionLipInfo, EndVowelType) == 0x000018, "Member 'FJackCaptionLipInfo::EndVowelType' has a wrong offset!");
static_assert(offsetof(FJackCaptionLipInfo, EndVowelSec) == 0x00001C, "Member 'FJackCaptionLipInfo::EndVowelSec' has a wrong offset!");
static_assert(offsetof(FJackCaptionLipInfo, LipSyncApplyRate) == 0x000020, "Member 'FJackCaptionLipInfo::LipSyncApplyRate' has a wrong offset!");
static_assert(offsetof(FJackCaptionLipInfo, VoiceAssets) == 0x000028, "Member 'FJackCaptionLipInfo::VoiceAssets' has a wrong offset!");
static_assert(offsetof(FJackCaptionLipInfo, LipPoseDataBase) == 0x000038, "Member 'FJackCaptionLipInfo::LipPoseDataBase' has a wrong offset!");
static_assert(offsetof(FJackCaptionLipInfo, VoiceTimelineDataBase) == 0x000040, "Member 'FJackCaptionLipInfo::VoiceTimelineDataBase' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotBonusProbability
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotBonusProbability final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotBonusProbability) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotBonusProbability");
static_assert(sizeof(FJackLDT_MeosiSlotBonusProbability) == 0x000010, "Wrong size on FJackLDT_MeosiSlotBonusProbability");

// ScriptStruct JackGame.JackLDT_UIKatagaki
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UIKatagaki final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UIKatagaki) == 0x000008, "Wrong alignment on FJackLDT_UIKatagaki");
static_assert(sizeof(FJackLDT_UIKatagaki) == 0x000010, "Wrong size on FJackLDT_UIKatagaki");

// ScriptStruct JackGame.JackDataTableNPCUsoTalk
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableNPCUsoTalk final : public FTableRowBase
{
public:
	int32                                         UsoRate;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           UsoTalkTexts;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableNPCUsoTalk) == 0x000008, "Wrong alignment on FJackDataTableNPCUsoTalk");
static_assert(sizeof(FJackDataTableNPCUsoTalk) == 0x000020, "Wrong size on FJackDataTableNPCUsoTalk");
static_assert(offsetof(FJackDataTableNPCUsoTalk, UsoRate) == 0x000008, "Member 'FJackDataTableNPCUsoTalk::UsoRate' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCUsoTalk, UsoTalkTexts) == 0x000010, "Member 'FJackDataTableNPCUsoTalk::UsoTalkTexts' has a wrong offset!");

// ScriptStruct JackGame.JackEventBattleSyuurenjouInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackEventBattleSyuurenjouInfo final
{
public:
	class FName                                   SirenID;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackEventBattleSyuurenjouInfo) == 0x000008, "Wrong alignment on FJackEventBattleSyuurenjouInfo");
static_assert(sizeof(FJackEventBattleSyuurenjouInfo) == 0x000010, "Wrong size on FJackEventBattleSyuurenjouInfo");
static_assert(offsetof(FJackEventBattleSyuurenjouInfo, SirenID) == 0x000000, "Member 'FJackEventBattleSyuurenjouInfo::SirenID' has a wrong offset!");
static_assert(offsetof(FJackEventBattleSyuurenjouInfo, BattleIndex) == 0x000008, "Member 'FJackEventBattleSyuurenjouInfo::BattleIndex' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotEncounteredMonsterCount
// 0x0030 (0x0038 - 0x0008)
struct FJackDataTableMeosiSlotEncounteredMonsterCount final : public FTableRowBase
{
public:
	int32                                         Count1;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count2;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count3;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count4;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count5;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count6;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count7;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count8;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count9;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count10;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count99;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotEncounteredMonsterCount) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotEncounteredMonsterCount");
static_assert(sizeof(FJackDataTableMeosiSlotEncounteredMonsterCount) == 0x000038, "Wrong size on FJackDataTableMeosiSlotEncounteredMonsterCount");
static_assert(offsetof(FJackDataTableMeosiSlotEncounteredMonsterCount, Count1) == 0x000008, "Member 'FJackDataTableMeosiSlotEncounteredMonsterCount::Count1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotEncounteredMonsterCount, Count2) == 0x00000C, "Member 'FJackDataTableMeosiSlotEncounteredMonsterCount::Count2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotEncounteredMonsterCount, Count3) == 0x000010, "Member 'FJackDataTableMeosiSlotEncounteredMonsterCount::Count3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotEncounteredMonsterCount, Count4) == 0x000014, "Member 'FJackDataTableMeosiSlotEncounteredMonsterCount::Count4' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotEncounteredMonsterCount, Count5) == 0x000018, "Member 'FJackDataTableMeosiSlotEncounteredMonsterCount::Count5' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotEncounteredMonsterCount, Count6) == 0x00001C, "Member 'FJackDataTableMeosiSlotEncounteredMonsterCount::Count6' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotEncounteredMonsterCount, Count7) == 0x000020, "Member 'FJackDataTableMeosiSlotEncounteredMonsterCount::Count7' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotEncounteredMonsterCount, Count8) == 0x000024, "Member 'FJackDataTableMeosiSlotEncounteredMonsterCount::Count8' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotEncounteredMonsterCount, Count9) == 0x000028, "Member 'FJackDataTableMeosiSlotEncounteredMonsterCount::Count9' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotEncounteredMonsterCount, Count10) == 0x00002C, "Member 'FJackDataTableMeosiSlotEncounteredMonsterCount::Count10' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotEncounteredMonsterCount, Count99) == 0x000030, "Member 'FJackDataTableMeosiSlotEncounteredMonsterCount::Count99' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Sim_MantleC_N002_up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_MantleC_N002_up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_MantleC_N002_up) == 0x000008, "Wrong alignment on FJackLDT_Sim_MantleC_N002_up");
static_assert(sizeof(FJackLDT_Sim_MantleC_N002_up) == 0x000010, "Wrong size on FJackLDT_Sim_MantleC_N002_up");

// ScriptStruct JackGame.JackBattleFukidasiTalkCondition
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FJackBattleFukidasiTalkCondition final
{
public:
	EJackBattleFukidasiTalkTarget                 Target;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ValueTargetParam;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StringTargetParam;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleFukidasiTalkCondChara              TalkCondChara;                                     // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleFukidasiTalkConditionType          CaseType;                                          // 0x0011(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ValueCaseParam;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StringCaseParam;                                   // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackBattleFukidasiTalkCondition) == 0x000008, "Wrong alignment on FJackBattleFukidasiTalkCondition");
static_assert(sizeof(FJackBattleFukidasiTalkCondition) == 0x000020, "Wrong size on FJackBattleFukidasiTalkCondition");
static_assert(offsetof(FJackBattleFukidasiTalkCondition, Target) == 0x000000, "Member 'FJackBattleFukidasiTalkCondition::Target' has a wrong offset!");
static_assert(offsetof(FJackBattleFukidasiTalkCondition, ValueTargetParam) == 0x000004, "Member 'FJackBattleFukidasiTalkCondition::ValueTargetParam' has a wrong offset!");
static_assert(offsetof(FJackBattleFukidasiTalkCondition, StringTargetParam) == 0x000008, "Member 'FJackBattleFukidasiTalkCondition::StringTargetParam' has a wrong offset!");
static_assert(offsetof(FJackBattleFukidasiTalkCondition, TalkCondChara) == 0x000010, "Member 'FJackBattleFukidasiTalkCondition::TalkCondChara' has a wrong offset!");
static_assert(offsetof(FJackBattleFukidasiTalkCondition, CaseType) == 0x000011, "Member 'FJackBattleFukidasiTalkCondition::CaseType' has a wrong offset!");
static_assert(offsetof(FJackBattleFukidasiTalkCondition, ValueCaseParam) == 0x000014, "Member 'FJackBattleFukidasiTalkCondition::ValueCaseParam' has a wrong offset!");
static_assert(offsetof(FJackBattleFukidasiTalkCondition, StringCaseParam) == 0x000018, "Member 'FJackBattleFukidasiTalkCondition::StringCaseParam' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_LevelUp_P002
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_LevelUp_P002 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_LevelUp_P002) == 0x000008, "Wrong alignment on FJackLDT_LevelUp_P002");
static_assert(sizeof(FJackLDT_LevelUp_P002) == 0x000010, "Wrong size on FJackLDT_LevelUp_P002");

// ScriptStruct JackGame.JackLDT_MeosiSlotLongFreeze
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotLongFreeze final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotLongFreeze) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotLongFreeze");
static_assert(sizeof(FJackLDT_MeosiSlotLongFreeze) == 0x000010, "Wrong size on FJackLDT_MeosiSlotLongFreeze");

// ScriptStruct JackGame.JackParticleDict
// 0x0010 (0x0010 - 0x0000)
struct FJackParticleDict final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        Particle;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackParticleDict) == 0x000008, "Wrong alignment on FJackParticleDict");
static_assert(sizeof(FJackParticleDict) == 0x000010, "Wrong size on FJackParticleDict");
static_assert(offsetof(FJackParticleDict, Name) == 0x000000, "Member 'FJackParticleDict::Name' has a wrong offset!");
static_assert(offsetof(FJackParticleDict, Particle) == 0x000008, "Member 'FJackParticleDict::Particle' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Pose_C_RearHairB1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_C_RearHairB1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_C_RearHairB1) == 0x000008, "Wrong alignment on FJackLDT_Pose_C_RearHairB1");
static_assert(sizeof(FJackLDT_Pose_C_RearHairB1) == 0x000010, "Wrong size on FJackLDT_Pose_C_RearHairB1");

// ScriptStruct JackGame.JackDataTableKaziUnderCorrection
// 0x0030 (0x0038 - 0x0008)
struct FJackDataTableKaziUnderCorrection final : public FTableRowBase
{
public:
	int32                                         PlayerLv_Min;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerLv_Max;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Correction_10;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Correction_9;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Correction_8;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Correction_7;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Correction_6;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Correction_5;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Correction_4;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Correction_3;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Correction_2;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Correction_1;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableKaziUnderCorrection) == 0x000008, "Wrong alignment on FJackDataTableKaziUnderCorrection");
static_assert(sizeof(FJackDataTableKaziUnderCorrection) == 0x000038, "Wrong size on FJackDataTableKaziUnderCorrection");
static_assert(offsetof(FJackDataTableKaziUnderCorrection, PlayerLv_Min) == 0x000008, "Member 'FJackDataTableKaziUnderCorrection::PlayerLv_Min' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziUnderCorrection, PlayerLv_Max) == 0x00000C, "Member 'FJackDataTableKaziUnderCorrection::PlayerLv_Max' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziUnderCorrection, Correction_10) == 0x000010, "Member 'FJackDataTableKaziUnderCorrection::Correction_10' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziUnderCorrection, Correction_9) == 0x000014, "Member 'FJackDataTableKaziUnderCorrection::Correction_9' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziUnderCorrection, Correction_8) == 0x000018, "Member 'FJackDataTableKaziUnderCorrection::Correction_8' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziUnderCorrection, Correction_7) == 0x00001C, "Member 'FJackDataTableKaziUnderCorrection::Correction_7' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziUnderCorrection, Correction_6) == 0x000020, "Member 'FJackDataTableKaziUnderCorrection::Correction_6' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziUnderCorrection, Correction_5) == 0x000024, "Member 'FJackDataTableKaziUnderCorrection::Correction_5' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziUnderCorrection, Correction_4) == 0x000028, "Member 'FJackDataTableKaziUnderCorrection::Correction_4' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziUnderCorrection, Correction_3) == 0x00002C, "Member 'FJackDataTableKaziUnderCorrection::Correction_3' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziUnderCorrection, Correction_2) == 0x000030, "Member 'FJackDataTableKaziUnderCorrection::Correction_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziUnderCorrection, Correction_1) == 0x000034, "Member 'FJackDataTableKaziUnderCorrection::Correction_1' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Coordinate
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Coordinate final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Coordinate) == 0x000008, "Wrong alignment on FJackLDT_Coordinate");
static_assert(sizeof(FJackLDT_Coordinate) == 0x000010, "Wrong size on FJackLDT_Coordinate");

// ScriptStruct JackGame.JackLDT_PokerDoubleUpDataTable10
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PokerDoubleUpDataTable10 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PokerDoubleUpDataTable10) == 0x000008, "Wrong alignment on FJackLDT_PokerDoubleUpDataTable10");
static_assert(sizeof(FJackLDT_PokerDoubleUpDataTable10) == 0x000010, "Wrong size on FJackLDT_PokerDoubleUpDataTable10");

// ScriptStruct JackGame.JackUMGHpMpItemInfo
// 0x0028 (0x0028 - 0x0000)
struct FJackUMGHpMpItemInfo final
{
public:
	class UJackUMGWidgetBase*                     HpMpItem;                                          // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x20];                                       // 0x0008(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGHpMpItemInfo) == 0x000008, "Wrong alignment on FJackUMGHpMpItemInfo");
static_assert(sizeof(FJackUMGHpMpItemInfo) == 0x000028, "Wrong size on FJackUMGHpMpItemInfo");
static_assert(offsetof(FJackUMGHpMpItemInfo, HpMpItem) == 0x000000, "Member 'FJackUMGHpMpItemInfo::HpMpItem' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_V004_Upper
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_V004_Upper final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_V004_Upper) == 0x000008, "Wrong alignment on FJackLDT_V004_Upper");
static_assert(sizeof(FJackLDT_V004_Upper) == 0x000010, "Wrong size on FJackLDT_V004_Upper");

// ScriptStruct JackGame.JackLDT_MeosiSlotMonsterList_Rank_A
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMonsterList_Rank_A final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMonsterList_Rank_A) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMonsterList_Rank_A");
static_assert(sizeof(FJackLDT_MeosiSlotMonsterList_Rank_A) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMonsterList_Rank_A");

// ScriptStruct JackGame.JackActionBattleTextInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackActionBattleTextInfo final
{
public:
	class FName                                   TextPackID;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionTextType                           Timming;                                           // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleMessageNoun                        PorM;                                              // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleMessageCompactType                 MatomeType;                                        // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackActionBattleTextInfo) == 0x000008, "Wrong alignment on FJackActionBattleTextInfo");
static_assert(sizeof(FJackActionBattleTextInfo) == 0x000010, "Wrong size on FJackActionBattleTextInfo");
static_assert(offsetof(FJackActionBattleTextInfo, TextPackID) == 0x000000, "Member 'FJackActionBattleTextInfo::TextPackID' has a wrong offset!");
static_assert(offsetof(FJackActionBattleTextInfo, Timming) == 0x000008, "Member 'FJackActionBattleTextInfo::Timming' has a wrong offset!");
static_assert(offsetof(FJackActionBattleTextInfo, PorM) == 0x000009, "Member 'FJackActionBattleTextInfo::PorM' has a wrong offset!");
static_assert(offsetof(FJackActionBattleTextInfo, MatomeType) == 0x00000A, "Member 'FJackActionBattleTextInfo::MatomeType' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableActionBattleText
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableActionBattleText : public FTableRowBase
{
public:
	TArray<struct FJackActionBattleTextInfo>      BattleTextInfos;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableActionBattleText) == 0x000008, "Wrong alignment on FJackDataTableActionBattleText");
static_assert(sizeof(FJackDataTableActionBattleText) == 0x000018, "Wrong size on FJackDataTableActionBattleText");
static_assert(offsetof(FJackDataTableActionBattleText, BattleTextInfos) == 0x000008, "Member 'FJackDataTableActionBattleText::BattleTextInfos' has a wrong offset!");

// ScriptStruct JackGame.JackBattleCommandAI_ExecActionCount
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackBattleCommandAI_ExecActionCount final
{
public:
	class FName                                   ActionID;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExecCount;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackBattleCommandAI_ExecActionCount) == 0x000008, "Wrong alignment on FJackBattleCommandAI_ExecActionCount");
static_assert(sizeof(FJackBattleCommandAI_ExecActionCount) == 0x000010, "Wrong size on FJackBattleCommandAI_ExecActionCount");
static_assert(offsetof(FJackBattleCommandAI_ExecActionCount, ActionID) == 0x000000, "Member 'FJackBattleCommandAI_ExecActionCount::ActionID' has a wrong offset!");
static_assert(offsetof(FJackBattleCommandAI_ExecActionCount, ExecCount) == 0x000008, "Member 'FJackBattleCommandAI_ExecActionCount::ExecCount' has a wrong offset!");

// ScriptStruct JackGame.JackActionMultiAttackInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FJackActionMultiAttackInfo final
{
public:
	class FName                                   OverrideActionDamageID;                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamagePer;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCriticalDisable;                                  // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMissDisable;                                      // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMikawasiDisable;                                  // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTateGuardDisable;                                 // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBukiGuardDisable;                                 // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKnockBackDisable;                                 // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitOnlyFirstTarget;                               // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OverrideActionHitOrderID;                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackActionMultiAttackInfo) == 0x000008, "Wrong alignment on FJackActionMultiAttackInfo");
static_assert(sizeof(FJackActionMultiAttackInfo) == 0x000020, "Wrong size on FJackActionMultiAttackInfo");
static_assert(offsetof(FJackActionMultiAttackInfo, OverrideActionDamageID) == 0x000000, "Member 'FJackActionMultiAttackInfo::OverrideActionDamageID' has a wrong offset!");
static_assert(offsetof(FJackActionMultiAttackInfo, DamagePer) == 0x000008, "Member 'FJackActionMultiAttackInfo::DamagePer' has a wrong offset!");
static_assert(offsetof(FJackActionMultiAttackInfo, bCriticalDisable) == 0x00000C, "Member 'FJackActionMultiAttackInfo::bCriticalDisable' has a wrong offset!");
static_assert(offsetof(FJackActionMultiAttackInfo, bMissDisable) == 0x00000D, "Member 'FJackActionMultiAttackInfo::bMissDisable' has a wrong offset!");
static_assert(offsetof(FJackActionMultiAttackInfo, bMikawasiDisable) == 0x00000E, "Member 'FJackActionMultiAttackInfo::bMikawasiDisable' has a wrong offset!");
static_assert(offsetof(FJackActionMultiAttackInfo, bTateGuardDisable) == 0x00000F, "Member 'FJackActionMultiAttackInfo::bTateGuardDisable' has a wrong offset!");
static_assert(offsetof(FJackActionMultiAttackInfo, bBukiGuardDisable) == 0x000010, "Member 'FJackActionMultiAttackInfo::bBukiGuardDisable' has a wrong offset!");
static_assert(offsetof(FJackActionMultiAttackInfo, bKnockBackDisable) == 0x000011, "Member 'FJackActionMultiAttackInfo::bKnockBackDisable' has a wrong offset!");
static_assert(offsetof(FJackActionMultiAttackInfo, bHitOnlyFirstTarget) == 0x000012, "Member 'FJackActionMultiAttackInfo::bHitOnlyFirstTarget' has a wrong offset!");
static_assert(offsetof(FJackActionMultiAttackInfo, OverrideActionHitOrderID) == 0x000018, "Member 'FJackActionMultiAttackInfo::OverrideActionHitOrderID' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotDrakeeEffect1Gase
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotDrakeeEffect1Gase final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotDrakeeEffect1Gase) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotDrakeeEffect1Gase");
static_assert(sizeof(FJackLDT_MeosiSlotDrakeeEffect1Gase) == 0x000010, "Wrong size on FJackLDT_MeosiSlotDrakeeEffect1Gase");

// ScriptStruct JackGame.JackLDT_Facial_M501
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Facial_M501 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Facial_M501) == 0x000008, "Wrong alignment on FJackLDT_Facial_M501");
static_assert(sizeof(FJackLDT_Facial_M501) == 0x000010, "Wrong size on FJackLDT_Facial_M501");

// ScriptStruct JackGame.JackMESaveCategoryVolume
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FJackMESaveCategoryVolume final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMESaveCategoryVolume) == 0x000004, "Wrong alignment on FJackMESaveCategoryVolume");
static_assert(sizeof(FJackMESaveCategoryVolume) == 0x000008, "Wrong size on FJackMESaveCategoryVolume");

// ScriptStruct JackGame.JackLDT_PartyTalkData_NA
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_NA final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_NA) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_NA");
static_assert(sizeof(FJackLDT_PartyTalkData_NA) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_NA");

// ScriptStruct JackGame.JackDataTableMonsterZukan
// 0x0238 (0x0240 - 0x0008)
struct FJackDataTableMonsterZukan final : public FTableRowBase
{
public:
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SyuukaiID;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortTsuyosa;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sort50on;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MonsterIDA;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MonsterIDB;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MonsterIDC;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RendouID1;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RendouID2;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RendouID3;                                         // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RendouID4;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RendouID5;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RendouID6;                                         // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RendouMonsterID1;                                  // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RendouMonsterID2;                                  // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RendouMonsterID3;                                  // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RendouMonsterID4;                                  // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RendouMonsterID5;                                  // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RendouMonsterID6;                                  // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku1A;                                         // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku2A;                                         // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku3A;                                         // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku4A;                                         // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku5A;                                         // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku6A;                                         // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku7A;                                         // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku8A;                                         // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku9A;                                         // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku10A;                                        // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku1S;                                         // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku2S;                                         // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku3S;                                         // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku4S;                                         // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku5S;                                         // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku6S;                                         // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku7S;                                         // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku8S;                                         // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku9S;                                         // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku10S;                                        // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku1B;                                         // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku2B;                                         // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku3B;                                         // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku4B;                                         // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku5B;                                         // 0x0158(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku6B;                                         // 0x0160(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku7B;                                         // 0x0168(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku8B;                                         // 0x0170(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku9B;                                         // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku10B;                                        // 0x0180(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku1C;                                         // 0x0188(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku2C;                                         // 0x0190(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku3C;                                         // 0x0198(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku4C;                                         // 0x01A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku5C;                                         // 0x01A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku6C;                                         // 0x01B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku7C;                                         // 0x01B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku8C;                                         // 0x01C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku9C;                                         // 0x01C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Seisoku10C;                                        // 0x01D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToubatuRendouID1;                                  // 0x01D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToubatuRendouID2;                                  // 0x01E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToubatuRendouID3;                                  // 0x01E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToubatuRendouID4;                                  // 0x01F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToubatuRendouID5;                                  // 0x01F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToubatuRendouID6;                                  // 0x0200(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToubatuRendouID7;                                  // 0x0208(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToubatuRendouID8;                                  // 0x0210(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToubatuRendouID9;                                  // 0x0218(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToubatuRendouID10;                                 // 0x0220(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                Zukan2DTexture;                                    // 0x0228(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMonsterZukan) == 0x000008, "Wrong alignment on FJackDataTableMonsterZukan");
static_assert(sizeof(FJackDataTableMonsterZukan) == 0x000240, "Wrong size on FJackDataTableMonsterZukan");
static_assert(offsetof(FJackDataTableMonsterZukan, Name) == 0x000008, "Member 'FJackDataTableMonsterZukan::Name' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, SyuukaiID) == 0x000010, "Member 'FJackDataTableMonsterZukan::SyuukaiID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, SortTsuyosa) == 0x000014, "Member 'FJackDataTableMonsterZukan::SortTsuyosa' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Sort50on) == 0x000018, "Member 'FJackDataTableMonsterZukan::Sort50on' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, MonsterIDA) == 0x000020, "Member 'FJackDataTableMonsterZukan::MonsterIDA' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, MonsterIDB) == 0x000028, "Member 'FJackDataTableMonsterZukan::MonsterIDB' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, MonsterIDC) == 0x000030, "Member 'FJackDataTableMonsterZukan::MonsterIDC' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, RendouID1) == 0x000038, "Member 'FJackDataTableMonsterZukan::RendouID1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, RendouID2) == 0x000040, "Member 'FJackDataTableMonsterZukan::RendouID2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, RendouID3) == 0x000048, "Member 'FJackDataTableMonsterZukan::RendouID3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, RendouID4) == 0x000050, "Member 'FJackDataTableMonsterZukan::RendouID4' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, RendouID5) == 0x000058, "Member 'FJackDataTableMonsterZukan::RendouID5' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, RendouID6) == 0x000060, "Member 'FJackDataTableMonsterZukan::RendouID6' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, RendouMonsterID1) == 0x000068, "Member 'FJackDataTableMonsterZukan::RendouMonsterID1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, RendouMonsterID2) == 0x000070, "Member 'FJackDataTableMonsterZukan::RendouMonsterID2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, RendouMonsterID3) == 0x000078, "Member 'FJackDataTableMonsterZukan::RendouMonsterID3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, RendouMonsterID4) == 0x000080, "Member 'FJackDataTableMonsterZukan::RendouMonsterID4' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, RendouMonsterID5) == 0x000088, "Member 'FJackDataTableMonsterZukan::RendouMonsterID5' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, RendouMonsterID6) == 0x000090, "Member 'FJackDataTableMonsterZukan::RendouMonsterID6' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku1A) == 0x000098, "Member 'FJackDataTableMonsterZukan::Seisoku1A' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku2A) == 0x0000A0, "Member 'FJackDataTableMonsterZukan::Seisoku2A' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku3A) == 0x0000A8, "Member 'FJackDataTableMonsterZukan::Seisoku3A' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku4A) == 0x0000B0, "Member 'FJackDataTableMonsterZukan::Seisoku4A' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku5A) == 0x0000B8, "Member 'FJackDataTableMonsterZukan::Seisoku5A' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku6A) == 0x0000C0, "Member 'FJackDataTableMonsterZukan::Seisoku6A' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku7A) == 0x0000C8, "Member 'FJackDataTableMonsterZukan::Seisoku7A' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku8A) == 0x0000D0, "Member 'FJackDataTableMonsterZukan::Seisoku8A' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku9A) == 0x0000D8, "Member 'FJackDataTableMonsterZukan::Seisoku9A' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku10A) == 0x0000E0, "Member 'FJackDataTableMonsterZukan::Seisoku10A' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku1S) == 0x0000E8, "Member 'FJackDataTableMonsterZukan::Seisoku1S' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku2S) == 0x0000F0, "Member 'FJackDataTableMonsterZukan::Seisoku2S' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku3S) == 0x0000F8, "Member 'FJackDataTableMonsterZukan::Seisoku3S' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku4S) == 0x000100, "Member 'FJackDataTableMonsterZukan::Seisoku4S' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku5S) == 0x000108, "Member 'FJackDataTableMonsterZukan::Seisoku5S' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku6S) == 0x000110, "Member 'FJackDataTableMonsterZukan::Seisoku6S' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku7S) == 0x000118, "Member 'FJackDataTableMonsterZukan::Seisoku7S' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku8S) == 0x000120, "Member 'FJackDataTableMonsterZukan::Seisoku8S' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku9S) == 0x000128, "Member 'FJackDataTableMonsterZukan::Seisoku9S' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku10S) == 0x000130, "Member 'FJackDataTableMonsterZukan::Seisoku10S' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku1B) == 0x000138, "Member 'FJackDataTableMonsterZukan::Seisoku1B' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku2B) == 0x000140, "Member 'FJackDataTableMonsterZukan::Seisoku2B' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku3B) == 0x000148, "Member 'FJackDataTableMonsterZukan::Seisoku3B' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku4B) == 0x000150, "Member 'FJackDataTableMonsterZukan::Seisoku4B' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku5B) == 0x000158, "Member 'FJackDataTableMonsterZukan::Seisoku5B' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku6B) == 0x000160, "Member 'FJackDataTableMonsterZukan::Seisoku6B' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku7B) == 0x000168, "Member 'FJackDataTableMonsterZukan::Seisoku7B' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku8B) == 0x000170, "Member 'FJackDataTableMonsterZukan::Seisoku8B' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku9B) == 0x000178, "Member 'FJackDataTableMonsterZukan::Seisoku9B' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku10B) == 0x000180, "Member 'FJackDataTableMonsterZukan::Seisoku10B' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku1C) == 0x000188, "Member 'FJackDataTableMonsterZukan::Seisoku1C' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku2C) == 0x000190, "Member 'FJackDataTableMonsterZukan::Seisoku2C' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku3C) == 0x000198, "Member 'FJackDataTableMonsterZukan::Seisoku3C' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku4C) == 0x0001A0, "Member 'FJackDataTableMonsterZukan::Seisoku4C' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku5C) == 0x0001A8, "Member 'FJackDataTableMonsterZukan::Seisoku5C' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku6C) == 0x0001B0, "Member 'FJackDataTableMonsterZukan::Seisoku6C' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku7C) == 0x0001B8, "Member 'FJackDataTableMonsterZukan::Seisoku7C' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku8C) == 0x0001C0, "Member 'FJackDataTableMonsterZukan::Seisoku8C' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku9C) == 0x0001C8, "Member 'FJackDataTableMonsterZukan::Seisoku9C' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Seisoku10C) == 0x0001D0, "Member 'FJackDataTableMonsterZukan::Seisoku10C' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, ToubatuRendouID1) == 0x0001D8, "Member 'FJackDataTableMonsterZukan::ToubatuRendouID1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, ToubatuRendouID2) == 0x0001E0, "Member 'FJackDataTableMonsterZukan::ToubatuRendouID2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, ToubatuRendouID3) == 0x0001E8, "Member 'FJackDataTableMonsterZukan::ToubatuRendouID3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, ToubatuRendouID4) == 0x0001F0, "Member 'FJackDataTableMonsterZukan::ToubatuRendouID4' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, ToubatuRendouID5) == 0x0001F8, "Member 'FJackDataTableMonsterZukan::ToubatuRendouID5' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, ToubatuRendouID6) == 0x000200, "Member 'FJackDataTableMonsterZukan::ToubatuRendouID6' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, ToubatuRendouID7) == 0x000208, "Member 'FJackDataTableMonsterZukan::ToubatuRendouID7' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, ToubatuRendouID8) == 0x000210, "Member 'FJackDataTableMonsterZukan::ToubatuRendouID8' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, ToubatuRendouID9) == 0x000218, "Member 'FJackDataTableMonsterZukan::ToubatuRendouID9' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, ToubatuRendouID10) == 0x000220, "Member 'FJackDataTableMonsterZukan::ToubatuRendouID10' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukan, Zukan2DTexture) == 0x000228, "Member 'FJackDataTableMonsterZukan::Zukan2DTexture' has a wrong offset!");

// ScriptStruct JackGame.JackMiniGameSlotAnimAssetList
// 0x0020 (0x0020 - 0x0000)
struct FJackMiniGameSlotAnimAssetList final
{
public:
	class UAnimSequence*                          AnimStand;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AnimReach;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AnimWin;                                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AnimWinIn;                                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMiniGameSlotAnimAssetList) == 0x000008, "Wrong alignment on FJackMiniGameSlotAnimAssetList");
static_assert(sizeof(FJackMiniGameSlotAnimAssetList) == 0x000020, "Wrong size on FJackMiniGameSlotAnimAssetList");
static_assert(offsetof(FJackMiniGameSlotAnimAssetList, AnimStand) == 0x000000, "Member 'FJackMiniGameSlotAnimAssetList::AnimStand' has a wrong offset!");
static_assert(offsetof(FJackMiniGameSlotAnimAssetList, AnimReach) == 0x000008, "Member 'FJackMiniGameSlotAnimAssetList::AnimReach' has a wrong offset!");
static_assert(offsetof(FJackMiniGameSlotAnimAssetList, AnimWin) == 0x000010, "Member 'FJackMiniGameSlotAnimAssetList::AnimWin' has a wrong offset!");
static_assert(offsetof(FJackMiniGameSlotAnimAssetList, AnimWinIn) == 0x000018, "Member 'FJackMiniGameSlotAnimAssetList::AnimWinIn' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_PartyTalkData_B070
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_B070 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_B070) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_B070");
static_assert(sizeof(FJackLDT_PartyTalkData_B070) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_B070");

// ScriptStruct JackGame.JackAttachEffect
// 0x0010 (0x0010 - 0x0000)
struct FJackAttachEffect final
{
public:
	class UParticleSystem*                        Effect;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackAttachEffect) == 0x000008, "Wrong alignment on FJackAttachEffect");
static_assert(sizeof(FJackAttachEffect) == 0x000010, "Wrong size on FJackAttachEffect");
static_assert(offsetof(FJackAttachEffect, Effect) == 0x000000, "Member 'FJackAttachEffect::Effect' has a wrong offset!");
static_assert(offsetof(FJackAttachEffect, SocketName) == 0x000008, "Member 'FJackAttachEffect::SocketName' has a wrong offset!");

// ScriptStruct JackGame.JackPokerHandInfo
// 0x0018 (0x0018 - 0x0000)
struct FJackPokerHandInfo final
{
public:
	EJackPokerHand                                HandType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 HitCards;                                          // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackPokerHandInfo) == 0x000008, "Wrong alignment on FJackPokerHandInfo");
static_assert(sizeof(FJackPokerHandInfo) == 0x000018, "Wrong size on FJackPokerHandInfo");
static_assert(offsetof(FJackPokerHandInfo, HandType) == 0x000000, "Member 'FJackPokerHandInfo::HandType' has a wrong offset!");
static_assert(offsetof(FJackPokerHandInfo, HitCards) == 0x000008, "Member 'FJackPokerHandInfo::HitCards' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_NPCList
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_NPCList final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_NPCList) == 0x000008, "Wrong alignment on FJackLDT_NPCList");
static_assert(sizeof(FJackLDT_NPCList) == 0x000010, "Wrong size on FJackLDT_NPCList");

// ScriptStruct JackGame.JackDataTableActionMultiAttack
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableActionMultiAttack final : public FTableRowBase
{
public:
	int32                                         MultiAttackNum;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackActionMultiAttackInfo>     MultiAttackInfos;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableActionMultiAttack) == 0x000008, "Wrong alignment on FJackDataTableActionMultiAttack");
static_assert(sizeof(FJackDataTableActionMultiAttack) == 0x000020, "Wrong size on FJackDataTableActionMultiAttack");
static_assert(offsetof(FJackDataTableActionMultiAttack, MultiAttackNum) == 0x000008, "Member 'FJackDataTableActionMultiAttack::MultiAttackNum' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionMultiAttack, MultiAttackInfos) == 0x000010, "Member 'FJackDataTableActionMultiAttack::MultiAttackInfos' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_PartyTalkMotionTag
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkMotionTag final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkMotionTag) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkMotionTag");
static_assert(sizeof(FJackLDT_PartyTalkMotionTag) == 0x000010, "Wrong size on FJackLDT_PartyTalkMotionTag");

// ScriptStruct JackGame.JackDataTableRouletteCoinCount
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FJackDataTableRouletteCoinCount final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableRouletteCoinCount) == 0x000004, "Wrong alignment on FJackDataTableRouletteCoinCount");
static_assert(sizeof(FJackDataTableRouletteCoinCount) == 0x000008, "Wrong size on FJackDataTableRouletteCoinCount");

// ScriptStruct JackGame.JackMessageArgumentData
// 0x0048 (0x0048 - 0x0000)
struct FJackMessageArgumentData final
{
public:
	class FString                                 ArgumentName;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ArgumentValue;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ArgumentId;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackDataTableReferType                       ArgumentTableType;                                 // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x18];                                      // 0x0029(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          ArgumentPriorReplaceFlag;                          // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ArgumentListFlag;                                  // 0x0042(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMessageArgumentData) == 0x000008, "Wrong alignment on FJackMessageArgumentData");
static_assert(sizeof(FJackMessageArgumentData) == 0x000048, "Wrong size on FJackMessageArgumentData");
static_assert(offsetof(FJackMessageArgumentData, ArgumentName) == 0x000000, "Member 'FJackMessageArgumentData::ArgumentName' has a wrong offset!");
static_assert(offsetof(FJackMessageArgumentData, ArgumentValue) == 0x000010, "Member 'FJackMessageArgumentData::ArgumentValue' has a wrong offset!");
static_assert(offsetof(FJackMessageArgumentData, ArgumentId) == 0x000020, "Member 'FJackMessageArgumentData::ArgumentId' has a wrong offset!");
static_assert(offsetof(FJackMessageArgumentData, ArgumentTableType) == 0x000028, "Member 'FJackMessageArgumentData::ArgumentTableType' has a wrong offset!");
static_assert(offsetof(FJackMessageArgumentData, ArgumentPriorReplaceFlag) == 0x000041, "Member 'FJackMessageArgumentData::ArgumentPriorReplaceFlag' has a wrong offset!");
static_assert(offsetof(FJackMessageArgumentData, ArgumentListFlag) == 0x000042, "Member 'FJackMessageArgumentData::ArgumentListFlag' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_Other
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_Other final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_Other) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_Other");
static_assert(sizeof(FJackLDT_MonsterDeploy_Other) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_Other");

// ScriptStruct JackGame.JackAnimInstanceProxy
// 0x0050 (0x0520 - 0x04D0)
struct FJackAnimInstanceProxy final : public FAnimInstanceProxy
{
public:
	uint8                                         Pad_4D0[0x50];                                     // 0x04D0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAnimInstanceProxy) == 0x000010, "Wrong alignment on FJackAnimInstanceProxy");
static_assert(sizeof(FJackAnimInstanceProxy) == 0x000520, "Wrong size on FJackAnimInstanceProxy");

// ScriptStruct JackGame.JackDataTableMeosiSlotMonsterRecruitProbability
// 0x0030 (0x0038 - 0x0008)
struct FJackDataTableMeosiSlotMonsterRecruitProbability final : public FTableRowBase
{
public:
	float                                         PartyNum_0;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartyNum_1;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartyNum_2;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartyNum_3;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartyNum_4;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartyNum_5;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartyNum_6;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartyNum_7;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartyNum_8;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartyNum_9;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartyNum_10;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartyNum_Over;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotMonsterRecruitProbability) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotMonsterRecruitProbability");
static_assert(sizeof(FJackDataTableMeosiSlotMonsterRecruitProbability) == 0x000038, "Wrong size on FJackDataTableMeosiSlotMonsterRecruitProbability");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRecruitProbability, PartyNum_0) == 0x000008, "Member 'FJackDataTableMeosiSlotMonsterRecruitProbability::PartyNum_0' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRecruitProbability, PartyNum_1) == 0x00000C, "Member 'FJackDataTableMeosiSlotMonsterRecruitProbability::PartyNum_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRecruitProbability, PartyNum_2) == 0x000010, "Member 'FJackDataTableMeosiSlotMonsterRecruitProbability::PartyNum_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRecruitProbability, PartyNum_3) == 0x000014, "Member 'FJackDataTableMeosiSlotMonsterRecruitProbability::PartyNum_3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRecruitProbability, PartyNum_4) == 0x000018, "Member 'FJackDataTableMeosiSlotMonsterRecruitProbability::PartyNum_4' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRecruitProbability, PartyNum_5) == 0x00001C, "Member 'FJackDataTableMeosiSlotMonsterRecruitProbability::PartyNum_5' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRecruitProbability, PartyNum_6) == 0x000020, "Member 'FJackDataTableMeosiSlotMonsterRecruitProbability::PartyNum_6' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRecruitProbability, PartyNum_7) == 0x000024, "Member 'FJackDataTableMeosiSlotMonsterRecruitProbability::PartyNum_7' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRecruitProbability, PartyNum_8) == 0x000028, "Member 'FJackDataTableMeosiSlotMonsterRecruitProbability::PartyNum_8' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRecruitProbability, PartyNum_9) == 0x00002C, "Member 'FJackDataTableMeosiSlotMonsterRecruitProbability::PartyNum_9' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRecruitProbability, PartyNum_10) == 0x000030, "Member 'FJackDataTableMeosiSlotMonsterRecruitProbability::PartyNum_10' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRecruitProbability, PartyNum_Over) == 0x000034, "Member 'FJackDataTableMeosiSlotMonsterRecruitProbability::PartyNum_Over' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotDrakeeEffect1Challenge
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotDrakeeEffect1Challenge final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotDrakeeEffect1Challenge) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotDrakeeEffect1Challenge");
static_assert(sizeof(FJackLDT_MeosiSlotDrakeeEffect1Challenge) == 0x000010, "Wrong size on FJackLDT_MeosiSlotDrakeeEffect1Challenge");

// ScriptStruct JackGame.JackActionMessageArg
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FJackActionMessageArg final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackActionMessageArg) == 0x000008, "Wrong alignment on FJackActionMessageArg");
static_assert(sizeof(FJackActionMessageArg) == 0x000020, "Wrong size on FJackActionMessageArg");

// ScriptStruct JackGame.JackBattleFukidasiTalkCommandInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FJackBattleFukidasiTalkCommandInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackBattleFukidasiTalkCommandInfo) == 0x000008, "Wrong alignment on FJackBattleFukidasiTalkCommandInfo");
static_assert(sizeof(FJackBattleFukidasiTalkCommandInfo) == 0x000020, "Wrong size on FJackBattleFukidasiTalkCommandInfo");

// ScriptStruct JackGame.JackLDT_CoordSoundTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_CoordSoundTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_CoordSoundTable) == 0x000008, "Wrong alignment on FJackLDT_CoordSoundTable");
static_assert(sizeof(FJackLDT_CoordSoundTable) == 0x000010, "Wrong size on FJackLDT_CoordSoundTable");

// ScriptStruct JackGame.JackBattleNavigationQueryFilterDict
// 0x0010 (0x0010 - 0x0000)
struct FJackBattleNavigationQueryFilterDict final
{
public:
	TSubclassOf<class UNavigationQueryFilter>     NavigationQueryFilter;                             // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     BattleNavigationQueryFilter;                       // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackBattleNavigationQueryFilterDict) == 0x000008, "Wrong alignment on FJackBattleNavigationQueryFilterDict");
static_assert(sizeof(FJackBattleNavigationQueryFilterDict) == 0x000010, "Wrong size on FJackBattleNavigationQueryFilterDict");
static_assert(offsetof(FJackBattleNavigationQueryFilterDict, NavigationQueryFilter) == 0x000000, "Member 'FJackBattleNavigationQueryFilterDict::NavigationQueryFilter' has a wrong offset!");
static_assert(offsetof(FJackBattleNavigationQueryFilterDict, BattleNavigationQueryFilter) == 0x000008, "Member 'FJackBattleNavigationQueryFilterDict::BattleNavigationQueryFilter' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotPamphlet
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableMeosiSlotPamphlet final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture>                Texture;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotPamphlet) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotPamphlet");
static_assert(sizeof(FJackDataTableMeosiSlotPamphlet) == 0x000020, "Wrong size on FJackDataTableMeosiSlotPamphlet");
static_assert(offsetof(FJackDataTableMeosiSlotPamphlet, Texture) == 0x000008, "Member 'FJackDataTableMeosiSlotPamphlet::Texture' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotActNoBase
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMeosiSlotActNoBase final : public FTableRowBase
{
public:
	EJackMeosiSlotScenarioActNo                   ActBase;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotActNoBase) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotActNoBase");
static_assert(sizeof(FJackDataTableMeosiSlotActNoBase) == 0x000010, "Wrong size on FJackDataTableMeosiSlotActNoBase");
static_assert(offsetof(FJackDataTableMeosiSlotActNoBase, ActBase) == 0x000008, "Member 'FJackDataTableMeosiSlotActNoBase::ActBase' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_ActionHitOrder
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ActionHitOrder final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ActionHitOrder) == 0x000008, "Wrong alignment on FJackLDT_ActionHitOrder");
static_assert(sizeof(FJackLDT_ActionHitOrder) == 0x000010, "Wrong size on FJackLDT_ActionHitOrder");

// ScriptStruct JackGame.JackScheduledNPCAppendObjectInfo
// 0x0018 (0x0018 - 0x0000)
struct FJackScheduledNPCAppendObjectInfo final
{
public:
	TArray<class UObject*>                        AppendObjectList;                                  // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackScheduledNPCAppendObjectInfo) == 0x000008, "Wrong alignment on FJackScheduledNPCAppendObjectInfo");
static_assert(sizeof(FJackScheduledNPCAppendObjectInfo) == 0x000018, "Wrong size on FJackScheduledNPCAppendObjectInfo");
static_assert(offsetof(FJackScheduledNPCAppendObjectInfo, AppendObjectList) == 0x000000, "Member 'FJackScheduledNPCAppendObjectInfo::AppendObjectList' has a wrong offset!");

// ScriptStruct JackGame.JackCameraDataDict
// 0x0010 (0x0010 - 0x0000)
struct FJackCameraDataDict final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UJackCameraData>            CameraDataClass;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackCameraDataDict) == 0x000008, "Wrong alignment on FJackCameraDataDict");
static_assert(sizeof(FJackCameraDataDict) == 0x000010, "Wrong size on FJackCameraDataDict");
static_assert(offsetof(FJackCameraDataDict, Name) == 0x000000, "Member 'FJackCameraDataDict::Name' has a wrong offset!");
static_assert(offsetof(FJackCameraDataDict, CameraDataClass) == 0x000008, "Member 'FJackCameraDataDict::CameraDataClass' has a wrong offset!");

// ScriptStruct JackGame.JackGroupFormation
// 0x0008 (0x0008 - 0x0000)
struct FJackGroupFormation final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackGroupFormation) == 0x000004, "Wrong alignment on FJackGroupFormation");
static_assert(sizeof(FJackGroupFormation) == 0x000008, "Wrong size on FJackGroupFormation");
static_assert(offsetof(FJackGroupFormation, X) == 0x000000, "Member 'FJackGroupFormation::X' has a wrong offset!");
static_assert(offsetof(FJackGroupFormation, Y) == 0x000004, "Member 'FJackGroupFormation::Y' has a wrong offset!");

// ScriptStruct JackGame.JackGroupFormations
// 0x0010 (0x0010 - 0x0000)
struct FJackGroupFormations final
{
public:
	TArray<struct FJackGroupFormation>            GroupFormation;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackGroupFormations) == 0x000008, "Wrong alignment on FJackGroupFormations");
static_assert(sizeof(FJackGroupFormations) == 0x000010, "Wrong size on FJackGroupFormations");
static_assert(offsetof(FJackGroupFormations, GroupFormation) == 0x000000, "Member 'FJackGroupFormations::GroupFormation' has a wrong offset!");

// ScriptStruct JackGame.JackGroupFormationsList
// 0x0010 (0x0010 - 0x0000)
struct FJackGroupFormationsList final
{
public:
	TArray<struct FJackGroupFormations>           GroupFormations;                                   // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackGroupFormationsList) == 0x000008, "Wrong alignment on FJackGroupFormationsList");
static_assert(sizeof(FJackGroupFormationsList) == 0x000010, "Wrong size on FJackGroupFormationsList");
static_assert(offsetof(FJackGroupFormationsList, GroupFormations) == 0x000000, "Member 'FJackGroupFormationsList::GroupFormations' has a wrong offset!");

// ScriptStruct JackGame.JackCommandSample4
// 0x0008 (0x0018 - 0x0010)
struct FJackCommandSample4 final : public FJackCommand
{
public:
	int32                                         HogeParameter;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackCommandSample4) == 0x000008, "Wrong alignment on FJackCommandSample4");
static_assert(sizeof(FJackCommandSample4) == 0x000018, "Wrong size on FJackCommandSample4");
static_assert(offsetof(FJackCommandSample4, HogeParameter) == 0x000010, "Member 'FJackCommandSample4::HogeParameter' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_UITabiNoKokoroe
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UITabiNoKokoroe final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UITabiNoKokoroe) == 0x000008, "Wrong alignment on FJackLDT_UITabiNoKokoroe");
static_assert(sizeof(FJackLDT_UITabiNoKokoroe) == 0x000010, "Wrong size on FJackLDT_UITabiNoKokoroe");

// ScriptStruct JackGame.JackLDT_CutSceneInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_CutSceneInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_CutSceneInfo) == 0x000008, "Wrong alignment on FJackLDT_CutSceneInfo");
static_assert(sizeof(FJackLDT_CutSceneInfo) == 0x000010, "Wrong size on FJackLDT_CutSceneInfo");

// ScriptStruct JackGame.JackDataTableCharacterLODBounds
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableCharacterLODBounds final : public FTableRowBase
{
public:
	class FName                                   OriginBoneName;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OriginOffsetInBoneSpace;                           // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CastShadowCullingBoundsScale;                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableCharacterLODBounds) == 0x000008, "Wrong alignment on FJackDataTableCharacterLODBounds");
static_assert(sizeof(FJackDataTableCharacterLODBounds) == 0x000028, "Wrong size on FJackDataTableCharacterLODBounds");
static_assert(offsetof(FJackDataTableCharacterLODBounds, OriginBoneName) == 0x000008, "Member 'FJackDataTableCharacterLODBounds::OriginBoneName' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterLODBounds, OriginOffsetInBoneSpace) == 0x000010, "Member 'FJackDataTableCharacterLODBounds::OriginOffsetInBoneSpace' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterLODBounds, Radius) == 0x00001C, "Member 'FJackDataTableCharacterLODBounds::Radius' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterLODBounds, CastShadowCullingBoundsScale) == 0x000020, "Member 'FJackDataTableCharacterLODBounds::CastShadowCullingBoundsScale' has a wrong offset!");

// ScriptStruct JackGame.JackSerifuPrintSpeedDict
// 0x0008 (0x0008 - 0x0000)
struct FJackSerifuPrintSpeedDict final
{
public:
	EJackSpeed                                    SpeedID;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaitSecondsPerCharacter;                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackSerifuPrintSpeedDict) == 0x000004, "Wrong alignment on FJackSerifuPrintSpeedDict");
static_assert(sizeof(FJackSerifuPrintSpeedDict) == 0x000008, "Wrong size on FJackSerifuPrintSpeedDict");
static_assert(offsetof(FJackSerifuPrintSpeedDict, SpeedID) == 0x000000, "Member 'FJackSerifuPrintSpeedDict::SpeedID' has a wrong offset!");
static_assert(offsetof(FJackSerifuPrintSpeedDict, WaitSecondsPerCharacter) == 0x000004, "Member 'FJackSerifuPrintSpeedDict::WaitSecondsPerCharacter' has a wrong offset!");

// ScriptStruct JackGame.JackCommandSample5
// 0x0008 (0x0018 - 0x0010)
struct FJackCommandSample5 final : public FJackCommand
{
public:
	int32                                         HogeParameter;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackCommandSample5) == 0x000008, "Wrong alignment on FJackCommandSample5");
static_assert(sizeof(FJackCommandSample5) == 0x000018, "Wrong size on FJackCommandSample5");
static_assert(offsetof(FJackCommandSample5, HogeParameter) == 0x000010, "Member 'FJackCommandSample5::HogeParameter' has a wrong offset!");

// ScriptStruct JackGame.JackGameCharacterEquippedItem
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackGameCharacterEquippedItem final
{
public:
	class FName                                   ItemID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackEquipmentRegion                          Region;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackGameCharacterEquippedItem) == 0x000008, "Wrong alignment on FJackGameCharacterEquippedItem");
static_assert(sizeof(FJackGameCharacterEquippedItem) == 0x000010, "Wrong size on FJackGameCharacterEquippedItem");
static_assert(offsetof(FJackGameCharacterEquippedItem, ItemID) == 0x000000, "Member 'FJackGameCharacterEquippedItem::ItemID' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterEquippedItem, Region) == 0x000008, "Member 'FJackGameCharacterEquippedItem::Region' has a wrong offset!");

// ScriptStruct JackGame.JackWorldParticleContainer
// 0x0010 (0x0010 - 0x0000)
struct FJackWorldParticleContainer final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*               Particle;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackWorldParticleContainer) == 0x000008, "Wrong alignment on FJackWorldParticleContainer");
static_assert(sizeof(FJackWorldParticleContainer) == 0x000010, "Wrong size on FJackWorldParticleContainer");
static_assert(offsetof(FJackWorldParticleContainer, OwnerActor) == 0x000000, "Member 'FJackWorldParticleContainer::OwnerActor' has a wrong offset!");
static_assert(offsetof(FJackWorldParticleContainer, Particle) == 0x000008, "Member 'FJackWorldParticleContainer::Particle' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_UmaRaceEDT_RankS_N
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceEDT_RankS_N final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceEDT_RankS_N) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceEDT_RankS_N");
static_assert(sizeof(FJackLDT_UmaRaceEDT_RankS_N) == 0x000010, "Wrong size on FJackLDT_UmaRaceEDT_RankS_N");

// ScriptStruct JackGame.JackDataTableCurve
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableCurve final : public FTableRowBase
{
public:
	class UCurveBase*                             Curve;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableCurve) == 0x000008, "Wrong alignment on FJackDataTableCurve");
static_assert(sizeof(FJackDataTableCurve) == 0x000010, "Wrong size on FJackDataTableCurve");
static_assert(offsetof(FJackDataTableCurve, Curve) == 0x000008, "Member 'FJackDataTableCurve::Curve' has a wrong offset!");

// ScriptStruct JackGame.JackBattleFukidasiConditionCharaInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackBattleFukidasiConditionCharaInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackBattleFukidasiConditionCharaInfo) == 0x000008, "Wrong alignment on FJackBattleFukidasiConditionCharaInfo");
static_assert(sizeof(FJackBattleFukidasiConditionCharaInfo) == 0x000010, "Wrong size on FJackBattleFukidasiConditionCharaInfo");

// ScriptStruct JackGame.JackDataTableSlotHitProbability
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableSlotHitProbability final : public FTableRowBase
{
public:
	float                                         Normal;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Metal;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableSlotHitProbability) == 0x000008, "Wrong alignment on FJackDataTableSlotHitProbability");
static_assert(sizeof(FJackDataTableSlotHitProbability) == 0x000018, "Wrong size on FJackDataTableSlotHitProbability");
static_assert(offsetof(FJackDataTableSlotHitProbability, Normal) == 0x000008, "Member 'FJackDataTableSlotHitProbability::Normal' has a wrong offset!");
static_assert(offsetof(FJackDataTableSlotHitProbability, Metal) == 0x00000C, "Member 'FJackDataTableSlotHitProbability::Metal' has a wrong offset!");
static_assert(offsetof(FJackDataTableSlotHitProbability, Range) == 0x000010, "Member 'FJackDataTableSlotHitProbability::Range' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_FtSkirt_Length2_Lerp2BonesAndClamp
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FtSkirt_Length2_Lerp2BonesAndClamp final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FtSkirt_Length2_Lerp2BonesAndClamp) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FtSkirt_Length2_Lerp2BonesAndClamp");
static_assert(sizeof(FJackLDT_RtEx_FtSkirt_Length2_Lerp2BonesAndClamp) == 0x000010, "Wrong size on FJackLDT_RtEx_FtSkirt_Length2_Lerp2BonesAndClamp");

// ScriptStruct JackGame.JackDataTableText
// 0x0028 (0x0030 - 0x0008)
struct FJackDataTableText : public FTableRowBase
{
public:
	class FString                                 Text;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackTextType                                 Type;                                              // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TalkerID;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bNoTurn : 1;                                       // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNoTalkStartEvent : 1;                             // 0x0028(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bResetByMapJump : 1;                               // 0x0028(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bScenarioGuide : 1;                                // 0x0028(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bQuestGuide : 1;                                   // 0x0028(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableText) == 0x000008, "Wrong alignment on FJackDataTableText");
static_assert(sizeof(FJackDataTableText) == 0x000030, "Wrong size on FJackDataTableText");
static_assert(offsetof(FJackDataTableText, Text) == 0x000008, "Member 'FJackDataTableText::Text' has a wrong offset!");
static_assert(offsetof(FJackDataTableText, Type) == 0x000018, "Member 'FJackDataTableText::Type' has a wrong offset!");
static_assert(offsetof(FJackDataTableText, TalkerID) == 0x000020, "Member 'FJackDataTableText::TalkerID' has a wrong offset!");

// ScriptStruct JackGame.JackItemGetLinkFlag
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackItemGetLinkFlag final
{
public:
	class FName                                   ItemID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackGameFlagCategory                         FlagCategory;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FlagName;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackItemGetLinkFlag) == 0x000008, "Wrong alignment on FJackItemGetLinkFlag");
static_assert(sizeof(FJackItemGetLinkFlag) == 0x000018, "Wrong size on FJackItemGetLinkFlag");
static_assert(offsetof(FJackItemGetLinkFlag, ItemID) == 0x000000, "Member 'FJackItemGetLinkFlag::ItemID' has a wrong offset!");
static_assert(offsetof(FJackItemGetLinkFlag, FlagCategory) == 0x000008, "Member 'FJackItemGetLinkFlag::FlagCategory' has a wrong offset!");
static_assert(offsetof(FJackItemGetLinkFlag, FlagName) == 0x000010, "Member 'FJackItemGetLinkFlag::FlagName' has a wrong offset!");

// ScriptStruct JackGame.JackGuestNPCLoadedResourceInfo
// 0x0010 (0x0010 - 0x0000)
struct FJackGuestNPCLoadedResourceInfo final
{
public:
	TArray<class UJackStreamObjectsHolder*>       ObjectsHolders;                                    // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackGuestNPCLoadedResourceInfo) == 0x000008, "Wrong alignment on FJackGuestNPCLoadedResourceInfo");
static_assert(sizeof(FJackGuestNPCLoadedResourceInfo) == 0x000010, "Wrong size on FJackGuestNPCLoadedResourceInfo");
static_assert(offsetof(FJackGuestNPCLoadedResourceInfo, ObjectsHolders) == 0x000000, "Member 'FJackGuestNPCLoadedResourceInfo::ObjectsHolders' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotTextures
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMeosiSlotTextures final : public FTableRowBase
{
public:
	TArray<TSoftObjectPtr<class UTexture>>        Textures;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotTextures) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotTextures");
static_assert(sizeof(FJackDataTableMeosiSlotTextures) == 0x000018, "Wrong size on FJackDataTableMeosiSlotTextures");
static_assert(offsetof(FJackDataTableMeosiSlotTextures, Textures) == 0x000008, "Member 'FJackDataTableMeosiSlotTextures::Textures' has a wrong offset!");

// ScriptStruct JackGame.JackItemPresent
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackItemPresent final
{
public:
	class FName                                   ItemID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackItemPresent) == 0x000008, "Wrong alignment on FJackItemPresent");
static_assert(sizeof(FJackItemPresent) == 0x000010, "Wrong size on FJackItemPresent");
static_assert(offsetof(FJackItemPresent, ItemID) == 0x000000, "Member 'FJackItemPresent::ItemID' has a wrong offset!");
static_assert(offsetof(FJackItemPresent, ItemCount) == 0x000008, "Member 'FJackItemPresent::ItemCount' has a wrong offset!");

// ScriptStruct JackGame.JackItemPresentPackage
// 0x0048 (0x0048 - 0x0000)
struct FJackItemPresentPackage final
{
public:
	bool                                          InstalledFlag;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TitleName;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExplanatoryText;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackItemPresent>               ItemList;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TripleDlcNo;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackItemPresentPackage) == 0x000008, "Wrong alignment on FJackItemPresentPackage");
static_assert(sizeof(FJackItemPresentPackage) == 0x000048, "Wrong size on FJackItemPresentPackage");
static_assert(offsetof(FJackItemPresentPackage, InstalledFlag) == 0x000000, "Member 'FJackItemPresentPackage::InstalledFlag' has a wrong offset!");
static_assert(offsetof(FJackItemPresentPackage, TitleName) == 0x000008, "Member 'FJackItemPresentPackage::TitleName' has a wrong offset!");
static_assert(offsetof(FJackItemPresentPackage, ExplanatoryText) == 0x000018, "Member 'FJackItemPresentPackage::ExplanatoryText' has a wrong offset!");
static_assert(offsetof(FJackItemPresentPackage, Gold) == 0x000028, "Member 'FJackItemPresentPackage::Gold' has a wrong offset!");
static_assert(offsetof(FJackItemPresentPackage, ItemList) == 0x000030, "Member 'FJackItemPresentPackage::ItemList' has a wrong offset!");
static_assert(offsetof(FJackItemPresentPackage, TripleDlcNo) == 0x000040, "Member 'FJackItemPresentPackage::TripleDlcNo' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotBonusMonsterListLevel2
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotBonusMonsterListLevel2 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotBonusMonsterListLevel2) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotBonusMonsterListLevel2");
static_assert(sizeof(FJackLDT_MeosiSlotBonusMonsterListLevel2) == 0x000010, "Wrong size on FJackLDT_MeosiSlotBonusMonsterListLevel2");

// ScriptStruct JackGame.JackLDT_GameFlagDataScenario
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_GameFlagDataScenario final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_GameFlagDataScenario) == 0x000008, "Wrong alignment on FJackLDT_GameFlagDataScenario");
static_assert(sizeof(FJackLDT_GameFlagDataScenario) == 0x000010, "Wrong size on FJackLDT_GameFlagDataScenario");

// ScriptStruct JackGame.JackUMGScenarioFlag
// 0x0030 (0x0030 - 0x0000)
struct FJackUMGScenarioFlag final
{
public:
	struct FJackLDT_GameFlagDataScenario          ID1;                                               // 0x0000(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Value1;                                            // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackLDT_GameFlagDataScenario          ID2;                                               // 0x0018(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Value2;                                            // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGScenarioFlag) == 0x000008, "Wrong alignment on FJackUMGScenarioFlag");
static_assert(sizeof(FJackUMGScenarioFlag) == 0x000030, "Wrong size on FJackUMGScenarioFlag");
static_assert(offsetof(FJackUMGScenarioFlag, ID1) == 0x000000, "Member 'FJackUMGScenarioFlag::ID1' has a wrong offset!");
static_assert(offsetof(FJackUMGScenarioFlag, Value1) == 0x000010, "Member 'FJackUMGScenarioFlag::Value1' has a wrong offset!");
static_assert(offsetof(FJackUMGScenarioFlag, ID2) == 0x000018, "Member 'FJackUMGScenarioFlag::ID2' has a wrong offset!");
static_assert(offsetof(FJackUMGScenarioFlag, Value2) == 0x000028, "Member 'FJackUMGScenarioFlag::Value2' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_NPCReactionAnimation
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_NPCReactionAnimation final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_NPCReactionAnimation) == 0x000008, "Wrong alignment on FJackLDT_NPCReactionAnimation");
static_assert(sizeof(FJackLDT_NPCReactionAnimation) == 0x000010, "Wrong size on FJackLDT_NPCReactionAnimation");

// ScriptStruct JackGame.JackPhotoModoScreenShotSavePath
// 0x0030 (0x0030 - 0x0000)
struct FJackPhotoModoScreenShotSavePath final
{
public:
	class FString                                 PathName;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PrefixName;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SaveDataId;                                        // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackPhotoModoScreenShotSavePath) == 0x000008, "Wrong alignment on FJackPhotoModoScreenShotSavePath");
static_assert(sizeof(FJackPhotoModoScreenShotSavePath) == 0x000030, "Wrong size on FJackPhotoModoScreenShotSavePath");
static_assert(offsetof(FJackPhotoModoScreenShotSavePath, PathName) == 0x000000, "Member 'FJackPhotoModoScreenShotSavePath::PathName' has a wrong offset!");
static_assert(offsetof(FJackPhotoModoScreenShotSavePath, PrefixName) == 0x000010, "Member 'FJackPhotoModoScreenShotSavePath::PrefixName' has a wrong offset!");
static_assert(offsetof(FJackPhotoModoScreenShotSavePath, SaveDataId) == 0x000020, "Member 'FJackPhotoModoScreenShotSavePath::SaveDataId' has a wrong offset!");

// ScriptStruct JackGame.JackFootIKData
// 0x0078 (0x0078 - 0x0000)
struct alignas(0x08) FJackFootIKData final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TraceUpperDistance;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceLowerDistance;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSeparateLimitDistanceFromTrace;                   // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UpperLimitDistance;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowerLimitDistance;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpperActiveDistance;                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowerActiveDistance;                               // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthFromSocketToSole;                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SweepedSphereRadius;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceOffsetInComponentSpace;                       // 0x0030(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReferencePoseLength;                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinReferencePoseLength;                            // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MinCheckLocationWithMeshRoot;                      // 0x0044(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SocketToGroundHalfHeight;                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSeparateRotationRangeElements;                    // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               MinSeparateRotation;                               // 0x0058(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               MaxSeparateRotation;                               // 0x0064(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SeparateRotationApplyHeight;                       // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   SeparateRotationApplyEasingFunc;                   // 0x0074(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackFootIKData) == 0x000008, "Wrong alignment on FJackFootIKData");
static_assert(sizeof(FJackFootIKData) == 0x000078, "Wrong size on FJackFootIKData");
static_assert(offsetof(FJackFootIKData, SocketName) == 0x000000, "Member 'FJackFootIKData::SocketName' has a wrong offset!");
static_assert(offsetof(FJackFootIKData, bEnabled) == 0x000008, "Member 'FJackFootIKData::bEnabled' has a wrong offset!");
static_assert(offsetof(FJackFootIKData, TraceUpperDistance) == 0x00000C, "Member 'FJackFootIKData::TraceUpperDistance' has a wrong offset!");
static_assert(offsetof(FJackFootIKData, TraceLowerDistance) == 0x000010, "Member 'FJackFootIKData::TraceLowerDistance' has a wrong offset!");
static_assert(offsetof(FJackFootIKData, bSeparateLimitDistanceFromTrace) == 0x000014, "Member 'FJackFootIKData::bSeparateLimitDistanceFromTrace' has a wrong offset!");
static_assert(offsetof(FJackFootIKData, UpperLimitDistance) == 0x000018, "Member 'FJackFootIKData::UpperLimitDistance' has a wrong offset!");
static_assert(offsetof(FJackFootIKData, LowerLimitDistance) == 0x00001C, "Member 'FJackFootIKData::LowerLimitDistance' has a wrong offset!");
static_assert(offsetof(FJackFootIKData, UpperActiveDistance) == 0x000020, "Member 'FJackFootIKData::UpperActiveDistance' has a wrong offset!");
static_assert(offsetof(FJackFootIKData, LowerActiveDistance) == 0x000024, "Member 'FJackFootIKData::LowerActiveDistance' has a wrong offset!");
static_assert(offsetof(FJackFootIKData, LengthFromSocketToSole) == 0x000028, "Member 'FJackFootIKData::LengthFromSocketToSole' has a wrong offset!");
static_assert(offsetof(FJackFootIKData, SweepedSphereRadius) == 0x00002C, "Member 'FJackFootIKData::SweepedSphereRadius' has a wrong offset!");
static_assert(offsetof(FJackFootIKData, TraceOffsetInComponentSpace) == 0x000030, "Member 'FJackFootIKData::TraceOffsetInComponentSpace' has a wrong offset!");
static_assert(offsetof(FJackFootIKData, ReferencePoseLength) == 0x00003C, "Member 'FJackFootIKData::ReferencePoseLength' has a wrong offset!");
static_assert(offsetof(FJackFootIKData, MinReferencePoseLength) == 0x000040, "Member 'FJackFootIKData::MinReferencePoseLength' has a wrong offset!");
static_assert(offsetof(FJackFootIKData, MinCheckLocationWithMeshRoot) == 0x000044, "Member 'FJackFootIKData::MinCheckLocationWithMeshRoot' has a wrong offset!");
static_assert(offsetof(FJackFootIKData, SocketToGroundHalfHeight) == 0x000050, "Member 'FJackFootIKData::SocketToGroundHalfHeight' has a wrong offset!");
static_assert(offsetof(FJackFootIKData, bSeparateRotationRangeElements) == 0x000054, "Member 'FJackFootIKData::bSeparateRotationRangeElements' has a wrong offset!");
static_assert(offsetof(FJackFootIKData, MinSeparateRotation) == 0x000058, "Member 'FJackFootIKData::MinSeparateRotation' has a wrong offset!");
static_assert(offsetof(FJackFootIKData, MaxSeparateRotation) == 0x000064, "Member 'FJackFootIKData::MaxSeparateRotation' has a wrong offset!");
static_assert(offsetof(FJackFootIKData, SeparateRotationApplyHeight) == 0x000070, "Member 'FJackFootIKData::SeparateRotationApplyHeight' has a wrong offset!");
static_assert(offsetof(FJackFootIKData, SeparateRotationApplyEasingFunc) == 0x000074, "Member 'FJackFootIKData::SeparateRotationApplyEasingFunc' has a wrong offset!");

// ScriptStruct JackGame.JackPossibleAction
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackPossibleAction final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackPossibleAction) == 0x000008, "Wrong alignment on FJackPossibleAction");
static_assert(sizeof(FJackPossibleAction) == 0x000018, "Wrong size on FJackPossibleAction");

// ScriptStruct JackGame.JackMaterialUpdaterManager
// 0x0068 (0x0068 - 0x0000)
struct FJackMaterialUpdaterManager final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJackMaterialUpdater*>           MaterialUpdaters;                                  // 0x0008(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_18[0x50];                                      // 0x0018(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMaterialUpdaterManager) == 0x000008, "Wrong alignment on FJackMaterialUpdaterManager");
static_assert(sizeof(FJackMaterialUpdaterManager) == 0x000068, "Wrong size on FJackMaterialUpdaterManager");
static_assert(offsetof(FJackMaterialUpdaterManager, MaterialUpdaters) == 0x000008, "Member 'FJackMaterialUpdaterManager::MaterialUpdaters' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotFlavorItemKindSelectProbability2
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotFlavorItemKindSelectProbability2 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotFlavorItemKindSelectProbability2) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotFlavorItemKindSelectProbability2");
static_assert(sizeof(FJackLDT_MeosiSlotFlavorItemKindSelectProbability2) == 0x000010, "Wrong size on FJackLDT_MeosiSlotFlavorItemKindSelectProbability2");

// ScriptStruct JackGame.JackUIInputDelegateInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackUIInputDelegateInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUIInputDelegateInfo) == 0x000008, "Wrong alignment on FJackUIInputDelegateInfo");
static_assert(sizeof(FJackUIInputDelegateInfo) == 0x000010, "Wrong size on FJackUIInputDelegateInfo");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_F05
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_F05 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_F05) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_F05");
static_assert(sizeof(FJackLDT_MonsterDeploy_F05) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_F05");

// ScriptStruct JackGame.JackActionMissDelayInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackActionMissDelayInfo final
{
public:
	class FName                                   ActionID;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelaySec;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackActionMissDelayInfo) == 0x000008, "Wrong alignment on FJackActionMissDelayInfo");
static_assert(sizeof(FJackActionMissDelayInfo) == 0x000010, "Wrong size on FJackActionMissDelayInfo");
static_assert(offsetof(FJackActionMissDelayInfo, ActionID) == 0x000000, "Member 'FJackActionMissDelayInfo::ActionID' has a wrong offset!");
static_assert(offsetof(FJackActionMissDelayInfo, DelaySec) == 0x000008, "Member 'FJackActionMissDelayInfo::DelaySec' has a wrong offset!");

// ScriptStruct JackGame.JackDropItemStructs
// 0x0038 (0x0038 - 0x0000)
struct FJackDropItemStructs final
{
public:
	class FName                                   ItemName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Owner;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJackGameCharacter*                     OwnerCharacter;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RareBox;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rarity;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Probability;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortNo;                                            // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Random;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDropItemStructs) == 0x000008, "Wrong alignment on FJackDropItemStructs");
static_assert(sizeof(FJackDropItemStructs) == 0x000038, "Wrong size on FJackDropItemStructs");
static_assert(offsetof(FJackDropItemStructs, ItemName) == 0x000000, "Member 'FJackDropItemStructs::ItemName' has a wrong offset!");
static_assert(offsetof(FJackDropItemStructs, Owner) == 0x000008, "Member 'FJackDropItemStructs::Owner' has a wrong offset!");
static_assert(offsetof(FJackDropItemStructs, OwnerCharacter) == 0x000018, "Member 'FJackDropItemStructs::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(FJackDropItemStructs, RareBox) == 0x000020, "Member 'FJackDropItemStructs::RareBox' has a wrong offset!");
static_assert(offsetof(FJackDropItemStructs, Rarity) == 0x000024, "Member 'FJackDropItemStructs::Rarity' has a wrong offset!");
static_assert(offsetof(FJackDropItemStructs, Probability) == 0x000028, "Member 'FJackDropItemStructs::Probability' has a wrong offset!");
static_assert(offsetof(FJackDropItemStructs, SortNo) == 0x00002C, "Member 'FJackDropItemStructs::SortNo' has a wrong offset!");
static_assert(offsetof(FJackDropItemStructs, Random) == 0x000030, "Member 'FJackDropItemStructs::Random' has a wrong offset!");

// ScriptStruct JackGame.JackKeyStatus
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FJackKeyStatus final
{
public:
	uint8                                         Pad_0[0xE];                                        // 0x0000(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Down;                                              // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Pressed;                                           // 0x000F(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Released;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Repeated;                                          // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2E];                                      // 0x0012(0x002E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackKeyStatus) == 0x000008, "Wrong alignment on FJackKeyStatus");
static_assert(sizeof(FJackKeyStatus) == 0x000040, "Wrong size on FJackKeyStatus");
static_assert(offsetof(FJackKeyStatus, Down) == 0x00000E, "Member 'FJackKeyStatus::Down' has a wrong offset!");
static_assert(offsetof(FJackKeyStatus, Pressed) == 0x00000F, "Member 'FJackKeyStatus::Pressed' has a wrong offset!");
static_assert(offsetof(FJackKeyStatus, Released) == 0x000010, "Member 'FJackKeyStatus::Released' has a wrong offset!");
static_assert(offsetof(FJackKeyStatus, Repeated) == 0x000011, "Member 'FJackKeyStatus::Repeated' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_LevelStreamingStatus
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_LevelStreamingStatus final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_LevelStreamingStatus) == 0x000008, "Wrong alignment on FJackLDT_LevelStreamingStatus");
static_assert(sizeof(FJackLDT_LevelStreamingStatus) == 0x000010, "Wrong size on FJackLDT_LevelStreamingStatus");

// ScriptStruct JackGame.JackDataTableMeosiSlotMonsterEncounterProbability
// 0x0050 (0x0058 - 0x0008)
struct FJackDataTableMeosiSlotMonsterEncounterProbability final : public FTableRowBase
{
public:
	int32                                         Game_1;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game_2;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game_3;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game_4;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game_5;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game_6;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game_7;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game_8;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game_9;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game_10;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game_11;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game_12;                                           // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game_13;                                           // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game_14;                                           // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game_15;                                           // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game_16;                                           // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game_17;                                           // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game_18;                                           // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game_19;                                           // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game_20;                                           // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotMonsterEncounterProbability) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotMonsterEncounterProbability");
static_assert(sizeof(FJackDataTableMeosiSlotMonsterEncounterProbability) == 0x000058, "Wrong size on FJackDataTableMeosiSlotMonsterEncounterProbability");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterEncounterProbability, Game_1) == 0x000008, "Member 'FJackDataTableMeosiSlotMonsterEncounterProbability::Game_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterEncounterProbability, Game_2) == 0x00000C, "Member 'FJackDataTableMeosiSlotMonsterEncounterProbability::Game_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterEncounterProbability, Game_3) == 0x000010, "Member 'FJackDataTableMeosiSlotMonsterEncounterProbability::Game_3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterEncounterProbability, Game_4) == 0x000014, "Member 'FJackDataTableMeosiSlotMonsterEncounterProbability::Game_4' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterEncounterProbability, Game_5) == 0x000018, "Member 'FJackDataTableMeosiSlotMonsterEncounterProbability::Game_5' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterEncounterProbability, Game_6) == 0x00001C, "Member 'FJackDataTableMeosiSlotMonsterEncounterProbability::Game_6' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterEncounterProbability, Game_7) == 0x000020, "Member 'FJackDataTableMeosiSlotMonsterEncounterProbability::Game_7' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterEncounterProbability, Game_8) == 0x000024, "Member 'FJackDataTableMeosiSlotMonsterEncounterProbability::Game_8' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterEncounterProbability, Game_9) == 0x000028, "Member 'FJackDataTableMeosiSlotMonsterEncounterProbability::Game_9' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterEncounterProbability, Game_10) == 0x00002C, "Member 'FJackDataTableMeosiSlotMonsterEncounterProbability::Game_10' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterEncounterProbability, Game_11) == 0x000030, "Member 'FJackDataTableMeosiSlotMonsterEncounterProbability::Game_11' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterEncounterProbability, Game_12) == 0x000034, "Member 'FJackDataTableMeosiSlotMonsterEncounterProbability::Game_12' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterEncounterProbability, Game_13) == 0x000038, "Member 'FJackDataTableMeosiSlotMonsterEncounterProbability::Game_13' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterEncounterProbability, Game_14) == 0x00003C, "Member 'FJackDataTableMeosiSlotMonsterEncounterProbability::Game_14' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterEncounterProbability, Game_15) == 0x000040, "Member 'FJackDataTableMeosiSlotMonsterEncounterProbability::Game_15' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterEncounterProbability, Game_16) == 0x000044, "Member 'FJackDataTableMeosiSlotMonsterEncounterProbability::Game_16' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterEncounterProbability, Game_17) == 0x000048, "Member 'FJackDataTableMeosiSlotMonsterEncounterProbability::Game_17' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterEncounterProbability, Game_18) == 0x00004C, "Member 'FJackDataTableMeosiSlotMonsterEncounterProbability::Game_18' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterEncounterProbability, Game_19) == 0x000050, "Member 'FJackDataTableMeosiSlotMonsterEncounterProbability::Game_19' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterEncounterProbability, Game_20) == 0x000054, "Member 'FJackDataTableMeosiSlotMonsterEncounterProbability::Game_20' has a wrong offset!");

// ScriptStruct JackGame.JackUMGTabiNoKokoroePageData
// 0x0050 (0x0050 - 0x0000)
struct FJackUMGTabiNoKokoroePageData final
{
public:
	class FString                                 TitleText;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MainText;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayTexture;                                   // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             TopTexture;                                        // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                TopTextureAsset;                                   // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageIndex;                                         // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGTabiNoKokoroePageData) == 0x000008, "Wrong alignment on FJackUMGTabiNoKokoroePageData");
static_assert(sizeof(FJackUMGTabiNoKokoroePageData) == 0x000050, "Wrong size on FJackUMGTabiNoKokoroePageData");
static_assert(offsetof(FJackUMGTabiNoKokoroePageData, TitleText) == 0x000000, "Member 'FJackUMGTabiNoKokoroePageData::TitleText' has a wrong offset!");
static_assert(offsetof(FJackUMGTabiNoKokoroePageData, MainText) == 0x000010, "Member 'FJackUMGTabiNoKokoroePageData::MainText' has a wrong offset!");
static_assert(offsetof(FJackUMGTabiNoKokoroePageData, bDisplayTexture) == 0x000020, "Member 'FJackUMGTabiNoKokoroePageData::bDisplayTexture' has a wrong offset!");
static_assert(offsetof(FJackUMGTabiNoKokoroePageData, TopTexture) == 0x000028, "Member 'FJackUMGTabiNoKokoroePageData::TopTexture' has a wrong offset!");
static_assert(offsetof(FJackUMGTabiNoKokoroePageData, TopTextureAsset) == 0x000030, "Member 'FJackUMGTabiNoKokoroePageData::TopTextureAsset' has a wrong offset!");
static_assert(offsetof(FJackUMGTabiNoKokoroePageData, PageIndex) == 0x000048, "Member 'FJackUMGTabiNoKokoroePageData::PageIndex' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotSptProb
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotSptProb final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotSptProb) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotSptProb");
static_assert(sizeof(FJackLDT_MeosiSlotSptProb) == 0x000010, "Wrong size on FJackLDT_MeosiSlotSptProb");

// ScriptStruct JackGame.JackUMGAnimSet
// 0x0038 (0x0038 - 0x0000)
struct FJackUMGAnimSet final
{
public:
	class UCurveFloat*                            MoveCurve;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MoveOffset;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGAnimMove                              MoveType;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ScaleCurve;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScaleParam;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            FadeCurve;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGAnimSet) == 0x000008, "Wrong alignment on FJackUMGAnimSet");
static_assert(sizeof(FJackUMGAnimSet) == 0x000038, "Wrong size on FJackUMGAnimSet");
static_assert(offsetof(FJackUMGAnimSet, MoveCurve) == 0x000000, "Member 'FJackUMGAnimSet::MoveCurve' has a wrong offset!");
static_assert(offsetof(FJackUMGAnimSet, MoveOffset) == 0x000008, "Member 'FJackUMGAnimSet::MoveOffset' has a wrong offset!");
static_assert(offsetof(FJackUMGAnimSet, MoveType) == 0x000010, "Member 'FJackUMGAnimSet::MoveType' has a wrong offset!");
static_assert(offsetof(FJackUMGAnimSet, ScaleCurve) == 0x000018, "Member 'FJackUMGAnimSet::ScaleCurve' has a wrong offset!");
static_assert(offsetof(FJackUMGAnimSet, ScaleParam) == 0x000020, "Member 'FJackUMGAnimSet::ScaleParam' has a wrong offset!");
static_assert(offsetof(FJackUMGAnimSet, FadeCurve) == 0x000028, "Member 'FJackUMGAnimSet::FadeCurve' has a wrong offset!");
static_assert(offsetof(FJackUMGAnimSet, DelayTime) == 0x000030, "Member 'FJackUMGAnimSet::DelayTime' has a wrong offset!");

// ScriptStruct JackGame.JackUMGTaneIdToTextIdRec
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackUMGTaneIdToTextIdRec final
{
public:
	class FName                                   ItemID;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGTaneIdToTextIdRec) == 0x000008, "Wrong alignment on FJackUMGTaneIdToTextIdRec");
static_assert(sizeof(FJackUMGTaneIdToTextIdRec) == 0x000010, "Wrong size on FJackUMGTaneIdToTextIdRec");
static_assert(offsetof(FJackUMGTaneIdToTextIdRec, ItemID) == 0x000000, "Member 'FJackUMGTaneIdToTextIdRec::ItemID' has a wrong offset!");
static_assert(offsetof(FJackUMGTaneIdToTextIdRec, TextID) == 0x000008, "Member 'FJackUMGTaneIdToTextIdRec::TextID' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotScenarioRouteNum
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotScenarioRouteNum final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotScenarioRouteNum) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotScenarioRouteNum");
static_assert(sizeof(FJackLDT_MeosiSlotScenarioRouteNum) == 0x000010, "Wrong size on FJackLDT_MeosiSlotScenarioRouteNum");

// ScriptStruct JackGame.JackUMGParamPercentFlags
// 0x0012 (0x0012 - 0x0000)
struct FJackUMGParamPercentFlags final
{
public:
	bool                                          Unknown;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Kougekiryoku;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Syubiryoku;                                        // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MPKyuuSyuuRate;                                    // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TateGuardRate;                                     // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MikawasiRate;                                      // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CriticalRate;                                      // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ZoneOnRate;                                        // 0x0007(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Kiyousa;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Subayasa;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KougekiMaryoku;                                    // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KaifukuMaryoku;                                    // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MaxHP;                                             // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MaxMP;                                             // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Miryoku;                                           // 0x000E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Minomamori;                                        // 0x000F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Tikara;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BukiGuardRate;                                     // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGParamPercentFlags) == 0x000001, "Wrong alignment on FJackUMGParamPercentFlags");
static_assert(sizeof(FJackUMGParamPercentFlags) == 0x000012, "Wrong size on FJackUMGParamPercentFlags");
static_assert(offsetof(FJackUMGParamPercentFlags, Unknown) == 0x000000, "Member 'FJackUMGParamPercentFlags::Unknown' has a wrong offset!");
static_assert(offsetof(FJackUMGParamPercentFlags, Kougekiryoku) == 0x000001, "Member 'FJackUMGParamPercentFlags::Kougekiryoku' has a wrong offset!");
static_assert(offsetof(FJackUMGParamPercentFlags, Syubiryoku) == 0x000002, "Member 'FJackUMGParamPercentFlags::Syubiryoku' has a wrong offset!");
static_assert(offsetof(FJackUMGParamPercentFlags, MPKyuuSyuuRate) == 0x000003, "Member 'FJackUMGParamPercentFlags::MPKyuuSyuuRate' has a wrong offset!");
static_assert(offsetof(FJackUMGParamPercentFlags, TateGuardRate) == 0x000004, "Member 'FJackUMGParamPercentFlags::TateGuardRate' has a wrong offset!");
static_assert(offsetof(FJackUMGParamPercentFlags, MikawasiRate) == 0x000005, "Member 'FJackUMGParamPercentFlags::MikawasiRate' has a wrong offset!");
static_assert(offsetof(FJackUMGParamPercentFlags, CriticalRate) == 0x000006, "Member 'FJackUMGParamPercentFlags::CriticalRate' has a wrong offset!");
static_assert(offsetof(FJackUMGParamPercentFlags, ZoneOnRate) == 0x000007, "Member 'FJackUMGParamPercentFlags::ZoneOnRate' has a wrong offset!");
static_assert(offsetof(FJackUMGParamPercentFlags, Kiyousa) == 0x000008, "Member 'FJackUMGParamPercentFlags::Kiyousa' has a wrong offset!");
static_assert(offsetof(FJackUMGParamPercentFlags, Subayasa) == 0x000009, "Member 'FJackUMGParamPercentFlags::Subayasa' has a wrong offset!");
static_assert(offsetof(FJackUMGParamPercentFlags, KougekiMaryoku) == 0x00000A, "Member 'FJackUMGParamPercentFlags::KougekiMaryoku' has a wrong offset!");
static_assert(offsetof(FJackUMGParamPercentFlags, KaifukuMaryoku) == 0x00000B, "Member 'FJackUMGParamPercentFlags::KaifukuMaryoku' has a wrong offset!");
static_assert(offsetof(FJackUMGParamPercentFlags, MaxHP) == 0x00000C, "Member 'FJackUMGParamPercentFlags::MaxHP' has a wrong offset!");
static_assert(offsetof(FJackUMGParamPercentFlags, MaxMP) == 0x00000D, "Member 'FJackUMGParamPercentFlags::MaxMP' has a wrong offset!");
static_assert(offsetof(FJackUMGParamPercentFlags, Miryoku) == 0x00000E, "Member 'FJackUMGParamPercentFlags::Miryoku' has a wrong offset!");
static_assert(offsetof(FJackUMGParamPercentFlags, Minomamori) == 0x00000F, "Member 'FJackUMGParamPercentFlags::Minomamori' has a wrong offset!");
static_assert(offsetof(FJackUMGParamPercentFlags, Tikara) == 0x000010, "Member 'FJackUMGParamPercentFlags::Tikara' has a wrong offset!");
static_assert(offsetof(FJackUMGParamPercentFlags, BukiGuardRate) == 0x000011, "Member 'FJackUMGParamPercentFlags::BukiGuardRate' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Vehicle_V105_E001_Sync
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Vehicle_V105_E001_Sync final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Vehicle_V105_E001_Sync) == 0x000008, "Wrong alignment on FJackLDT_Vehicle_V105_E001_Sync");
static_assert(sizeof(FJackLDT_Vehicle_V105_E001_Sync) == 0x000010, "Wrong size on FJackLDT_Vehicle_V105_E001_Sync");

// ScriptStruct JackGame.JackLDT_AttachedProps_P005
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AttachedProps_P005 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AttachedProps_P005) == 0x000008, "Wrong alignment on FJackLDT_AttachedProps_P005");
static_assert(sizeof(FJackLDT_AttachedProps_P005) == 0x000010, "Wrong size on FJackLDT_AttachedProps_P005");

// ScriptStruct JackGame.JackSlotResultInfo
// 0x0010 (0x0010 - 0x0000)
struct FJackSlotResultInfo final
{
public:
	EJackMiniGameSlotHand                         HandType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackSlotResultType                           Result;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ResultBit;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackSlotResultInfo) == 0x000004, "Wrong alignment on FJackSlotResultInfo");
static_assert(sizeof(FJackSlotResultInfo) == 0x000010, "Wrong size on FJackSlotResultInfo");
static_assert(offsetof(FJackSlotResultInfo, HandType) == 0x000000, "Member 'FJackSlotResultInfo::HandType' has a wrong offset!");
static_assert(offsetof(FJackSlotResultInfo, Count) == 0x000004, "Member 'FJackSlotResultInfo::Count' has a wrong offset!");
static_assert(offsetof(FJackSlotResultInfo, Result) == 0x000008, "Member 'FJackSlotResultInfo::Result' has a wrong offset!");
static_assert(offsetof(FJackSlotResultInfo, ResultBit) == 0x00000C, "Member 'FJackSlotResultInfo::ResultBit' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MedalExchangeTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MedalExchangeTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MedalExchangeTable) == 0x000008, "Wrong alignment on FJackLDT_MedalExchangeTable");
static_assert(sizeof(FJackLDT_MedalExchangeTable) == 0x000010, "Wrong size on FJackLDT_MedalExchangeTable");

// ScriptStruct JackGame.JackLDT_BoukenGuide
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_BoukenGuide final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_BoukenGuide) == 0x000008, "Wrong alignment on FJackLDT_BoukenGuide");
static_assert(sizeof(FJackLDT_BoukenGuide) == 0x000010, "Wrong size on FJackLDT_BoukenGuide");

// ScriptStruct JackGame.JackSlideAction
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackSlideAction final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackSlideAction) == 0x000008, "Wrong alignment on FJackSlideAction");
static_assert(sizeof(FJackSlideAction) == 0x000018, "Wrong size on FJackSlideAction");

// ScriptStruct JackGame.JackSlotStartInfo
// 0x000B (0x000B - 0x0000)
struct FJackSlotStartInfo final
{
public:
	EJackSlotHitLineType                          HitLineNo;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackSlotSetNumberType                        NumberLine;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMiniGameSlotHand                         HandType;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsQueenSlime;                                     // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackSlotResultType                           Result;                                            // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLottey;                                         // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReach;                                            // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMetalSpin;                                        // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFreeSpin;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsJackPot;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x1];                                        // 0x000A(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackSlotStartInfo) == 0x000001, "Wrong alignment on FJackSlotStartInfo");
static_assert(sizeof(FJackSlotStartInfo) == 0x00000B, "Wrong size on FJackSlotStartInfo");
static_assert(offsetof(FJackSlotStartInfo, HitLineNo) == 0x000000, "Member 'FJackSlotStartInfo::HitLineNo' has a wrong offset!");
static_assert(offsetof(FJackSlotStartInfo, NumberLine) == 0x000001, "Member 'FJackSlotStartInfo::NumberLine' has a wrong offset!");
static_assert(offsetof(FJackSlotStartInfo, HandType) == 0x000002, "Member 'FJackSlotStartInfo::HandType' has a wrong offset!");
static_assert(offsetof(FJackSlotStartInfo, bIsQueenSlime) == 0x000003, "Member 'FJackSlotStartInfo::bIsQueenSlime' has a wrong offset!");
static_assert(offsetof(FJackSlotStartInfo, Result) == 0x000004, "Member 'FJackSlotStartInfo::Result' has a wrong offset!");
static_assert(offsetof(FJackSlotStartInfo, bIsLottey) == 0x000005, "Member 'FJackSlotStartInfo::bIsLottey' has a wrong offset!");
static_assert(offsetof(FJackSlotStartInfo, bReach) == 0x000006, "Member 'FJackSlotStartInfo::bReach' has a wrong offset!");
static_assert(offsetof(FJackSlotStartInfo, bMetalSpin) == 0x000007, "Member 'FJackSlotStartInfo::bMetalSpin' has a wrong offset!");
static_assert(offsetof(FJackSlotStartInfo, bFreeSpin) == 0x000008, "Member 'FJackSlotStartInfo::bFreeSpin' has a wrong offset!");
static_assert(offsetof(FJackSlotStartInfo, bIsJackPot) == 0x000009, "Member 'FJackSlotStartInfo::bIsJackPot' has a wrong offset!");

// ScriptStruct JackGame.JackMiniGameSlotCoinCount
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FJackMiniGameSlotCoinCount final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMiniGameSlotCoinCount) == 0x000004, "Wrong alignment on FJackMiniGameSlotCoinCount");
static_assert(sizeof(FJackMiniGameSlotCoinCount) == 0x000008, "Wrong size on FJackMiniGameSlotCoinCount");

// ScriptStruct JackGame.JackLDT_Other_Lerp2BonesAndClamp
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Other_Lerp2BonesAndClamp final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Other_Lerp2BonesAndClamp) == 0x000008, "Wrong alignment on FJackLDT_Other_Lerp2BonesAndClamp");
static_assert(sizeof(FJackLDT_Other_Lerp2BonesAndClamp) == 0x000010, "Wrong size on FJackLDT_Other_Lerp2BonesAndClamp");

// ScriptStruct JackGame.JackMiniGameRouletteDebugBetCoinInfo
// 0x000C (0x000C - 0x0000)
struct FJackMiniGameRouletteDebugBetCoinInfo final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinNum;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMiniGameRouletteDebugBetCoinInfo) == 0x000004, "Wrong alignment on FJackMiniGameRouletteDebugBetCoinInfo");
static_assert(sizeof(FJackMiniGameRouletteDebugBetCoinInfo) == 0x00000C, "Wrong size on FJackMiniGameRouletteDebugBetCoinInfo");
static_assert(offsetof(FJackMiniGameRouletteDebugBetCoinInfo, X) == 0x000000, "Member 'FJackMiniGameRouletteDebugBetCoinInfo::X' has a wrong offset!");
static_assert(offsetof(FJackMiniGameRouletteDebugBetCoinInfo, Y) == 0x000004, "Member 'FJackMiniGameRouletteDebugBetCoinInfo::Y' has a wrong offset!");
static_assert(offsetof(FJackMiniGameRouletteDebugBetCoinInfo, CoinNum) == 0x000008, "Member 'FJackMiniGameRouletteDebugBetCoinInfo::CoinNum' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_PartyTalkData_B150
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_B150 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_B150) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_B150");
static_assert(sizeof(FJackLDT_PartyTalkData_B150) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_B150");

// ScriptStruct JackGame.JackSoundRainFootstepAssets
// 0x0028 (0x0028 - 0x0000)
struct FJackSoundRainFootstepAssets final
{
public:
	class USoundBase*                             Human;                                             // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SizeS;                                             // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SizeM;                                             // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SizeL;                                             // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SizeLL;                                            // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackSoundRainFootstepAssets) == 0x000008, "Wrong alignment on FJackSoundRainFootstepAssets");
static_assert(sizeof(FJackSoundRainFootstepAssets) == 0x000028, "Wrong size on FJackSoundRainFootstepAssets");
static_assert(offsetof(FJackSoundRainFootstepAssets, Human) == 0x000000, "Member 'FJackSoundRainFootstepAssets::Human' has a wrong offset!");
static_assert(offsetof(FJackSoundRainFootstepAssets, SizeS) == 0x000008, "Member 'FJackSoundRainFootstepAssets::SizeS' has a wrong offset!");
static_assert(offsetof(FJackSoundRainFootstepAssets, SizeM) == 0x000010, "Member 'FJackSoundRainFootstepAssets::SizeM' has a wrong offset!");
static_assert(offsetof(FJackSoundRainFootstepAssets, SizeL) == 0x000018, "Member 'FJackSoundRainFootstepAssets::SizeL' has a wrong offset!");
static_assert(offsetof(FJackSoundRainFootstepAssets, SizeLL) == 0x000020, "Member 'FJackSoundRainFootstepAssets::SizeLL' has a wrong offset!");

// ScriptStruct JackGame.JackRouletteBetCoinSaveData
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FJackRouletteBetCoinSaveData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackRouletteBetCoinSaveData) == 0x000004, "Wrong alignment on FJackRouletteBetCoinSaveData");
static_assert(sizeof(FJackRouletteBetCoinSaveData) == 0x000008, "Wrong size on FJackRouletteBetCoinSaveData");

// ScriptStruct JackGame.JackLDT_TextDataDLCItem_07
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextDataDLCItem_07 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextDataDLCItem_07) == 0x000008, "Wrong alignment on FJackLDT_TextDataDLCItem_07");
static_assert(sizeof(FJackLDT_TextDataDLCItem_07) == 0x000010, "Wrong size on FJackLDT_TextDataDLCItem_07");

// ScriptStruct JackGame.JackVoiceTimelineExecutor
// 0x0028 (0x0028 - 0x0000)
struct FJackVoiceTimelineExecutor final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class AActor>>          TargetNPCWeak;                                     // 0x0008(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UJackVoiceTimelineTrack*>        VoiceTimelineTracks;                               // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FJackVoiceTimelineExecutor) == 0x000008, "Wrong alignment on FJackVoiceTimelineExecutor");
static_assert(sizeof(FJackVoiceTimelineExecutor) == 0x000028, "Wrong size on FJackVoiceTimelineExecutor");
static_assert(offsetof(FJackVoiceTimelineExecutor, TargetNPCWeak) == 0x000008, "Member 'FJackVoiceTimelineExecutor::TargetNPCWeak' has a wrong offset!");
static_assert(offsetof(FJackVoiceTimelineExecutor, VoiceTimelineTracks) == 0x000018, "Member 'FJackVoiceTimelineExecutor::VoiceTimelineTracks' has a wrong offset!");

// ScriptStruct JackGame.JackUIStickToButtonBindState
// 0x0005 (0x0005 - 0x0000)
struct FJackUIStickToButtonBindState final
{
public:
	uint8                                         Pad_0[0x5];                                        // 0x0000(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUIStickToButtonBindState) == 0x000001, "Wrong alignment on FJackUIStickToButtonBindState");
static_assert(sizeof(FJackUIStickToButtonBindState) == 0x000005, "Wrong size on FJackUIStickToButtonBindState");

// ScriptStruct JackGame.JackLDT_RtEx_NmSkirtA1_MaxOrMinRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_NmSkirtA1_MaxOrMinRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_NmSkirtA1_MaxOrMinRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_NmSkirtA1_MaxOrMinRot");
static_assert(sizeof(FJackLDT_RtEx_NmSkirtA1_MaxOrMinRot) == 0x000010, "Wrong size on FJackLDT_RtEx_NmSkirtA1_MaxOrMinRot");

// ScriptStruct JackGame.JackFootIKResult
// 0x0160 (0x0160 - 0x0000)
struct FJackFootIKResult final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGotGround;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EffectorLocation;                                  // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EffectorLocationInWorldSpace;                      // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SoleRotationOffset;                                // 0x0020(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0030(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FHitResult                             WaterSurfaceHitResult;                             // 0x00B8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         HeightByMeshRotation;                              // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x1C];                                     // 0x0144(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackFootIKResult) == 0x000008, "Wrong alignment on FJackFootIKResult");
static_assert(sizeof(FJackFootIKResult) == 0x000160, "Wrong size on FJackFootIKResult");
static_assert(offsetof(FJackFootIKResult, Offset) == 0x000000, "Member 'FJackFootIKResult::Offset' has a wrong offset!");
static_assert(offsetof(FJackFootIKResult, bGotGround) == 0x000004, "Member 'FJackFootIKResult::bGotGround' has a wrong offset!");
static_assert(offsetof(FJackFootIKResult, EffectorLocation) == 0x000008, "Member 'FJackFootIKResult::EffectorLocation' has a wrong offset!");
static_assert(offsetof(FJackFootIKResult, EffectorLocationInWorldSpace) == 0x000014, "Member 'FJackFootIKResult::EffectorLocationInWorldSpace' has a wrong offset!");
static_assert(offsetof(FJackFootIKResult, SoleRotationOffset) == 0x000020, "Member 'FJackFootIKResult::SoleRotationOffset' has a wrong offset!");
static_assert(offsetof(FJackFootIKResult, Alpha) == 0x00002C, "Member 'FJackFootIKResult::Alpha' has a wrong offset!");
static_assert(offsetof(FJackFootIKResult, HitResult) == 0x000030, "Member 'FJackFootIKResult::HitResult' has a wrong offset!");
static_assert(offsetof(FJackFootIKResult, WaterSurfaceHitResult) == 0x0000B8, "Member 'FJackFootIKResult::WaterSurfaceHitResult' has a wrong offset!");
static_assert(offsetof(FJackFootIKResult, HeightByMeshRotation) == 0x000140, "Member 'FJackFootIKResult::HeightByMeshRotation' has a wrong offset!");

// ScriptStruct JackGame.JackFootIKDict
// 0x03A0 (0x03A0 - 0x0000)
struct alignas(0x10) FJackFootIKDict final
{
public:
	struct FJackFootIKData                        Data;                                              // 0x0000(0x0078)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackFootIKResult                      Result;                                            // 0x0078(0x0160)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0x1B8];                                    // 0x01D8(0x01B8)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bResultValidate;                                   // 0x0390(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_391[0xF];                                      // 0x0391(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackFootIKDict) == 0x000010, "Wrong alignment on FJackFootIKDict");
static_assert(sizeof(FJackFootIKDict) == 0x0003A0, "Wrong size on FJackFootIKDict");
static_assert(offsetof(FJackFootIKDict, Data) == 0x000000, "Member 'FJackFootIKDict::Data' has a wrong offset!");
static_assert(offsetof(FJackFootIKDict, Result) == 0x000078, "Member 'FJackFootIKDict::Result' has a wrong offset!");
static_assert(offsetof(FJackFootIKDict, bResultValidate) == 0x000390, "Member 'FJackFootIKDict::bResultValidate' has a wrong offset!");

// ScriptStruct JackGame.JackUMGCursorMoveSetting
// 0x0018 (0x0018 - 0x0000)
struct FJackUMGCursorMoveSetting final
{
public:
	class UJackUMGItemBase*                       SelectedItem;                                      // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KeyDirection;                                      // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGItemBase*                       MoveTarget;                                        // 0x0010(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGCursorMoveSetting) == 0x000008, "Wrong alignment on FJackUMGCursorMoveSetting");
static_assert(sizeof(FJackUMGCursorMoveSetting) == 0x000018, "Wrong size on FJackUMGCursorMoveSetting");
static_assert(offsetof(FJackUMGCursorMoveSetting, SelectedItem) == 0x000000, "Member 'FJackUMGCursorMoveSetting::SelectedItem' has a wrong offset!");
static_assert(offsetof(FJackUMGCursorMoveSetting, KeyDirection) == 0x000008, "Member 'FJackUMGCursorMoveSetting::KeyDirection' has a wrong offset!");
static_assert(offsetof(FJackUMGCursorMoveSetting, MoveTarget) == 0x000010, "Member 'FJackUMGCursorMoveSetting::MoveTarget' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotScenarioHazure
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotScenarioHazure final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotScenarioHazure) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotScenarioHazure");
static_assert(sizeof(FJackLDT_MeosiSlotScenarioHazure) == 0x000010, "Wrong size on FJackLDT_MeosiSlotScenarioHazure");

// ScriptStruct JackGame.JackDataTableDamageMaterialAnimation
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableDamageMaterialAnimation final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UCurveBase>              CurveAsset;                                        // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveTimeScale;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageEmissiveScale;                               // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableDamageMaterialAnimation) == 0x000008, "Wrong alignment on FJackDataTableDamageMaterialAnimation");
static_assert(sizeof(FJackDataTableDamageMaterialAnimation) == 0x000028, "Wrong size on FJackDataTableDamageMaterialAnimation");
static_assert(offsetof(FJackDataTableDamageMaterialAnimation, CurveAsset) == 0x000008, "Member 'FJackDataTableDamageMaterialAnimation::CurveAsset' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageMaterialAnimation, CurveTimeScale) == 0x000020, "Member 'FJackDataTableDamageMaterialAnimation::CurveTimeScale' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageMaterialAnimation, DamageEmissiveScale) == 0x000024, "Member 'FJackDataTableDamageMaterialAnimation::DamageEmissiveScale' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_Qujira
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_Qujira final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_Qujira) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_Qujira");
static_assert(sizeof(FJackLDT_MonsterDeploy_Qujira) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_Qujira");

// ScriptStruct JackGame.JackUIItemBulkBuyingInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackUIItemBulkBuyingInfo final
{
public:
	class FName                                   ItemID;                                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUIItemBulkBuyingInfo) == 0x000008, "Wrong alignment on FJackUIItemBulkBuyingInfo");
static_assert(sizeof(FJackUIItemBulkBuyingInfo) == 0x000010, "Wrong size on FJackUIItemBulkBuyingInfo");
static_assert(offsetof(FJackUIItemBulkBuyingInfo, ItemID) == 0x000000, "Member 'FJackUIItemBulkBuyingInfo::ItemID' has a wrong offset!");
static_assert(offsetof(FJackUIItemBulkBuyingInfo, Count) == 0x000008, "Member 'FJackUIItemBulkBuyingInfo::Count' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_N008_SamaCoat
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_N008_SamaCoat final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_N008_SamaCoat) == 0x000008, "Wrong alignment on FJackLDT_RtEx_N008_SamaCoat");
static_assert(sizeof(FJackLDT_RtEx_N008_SamaCoat) == 0x000010, "Wrong size on FJackLDT_RtEx_N008_SamaCoat");

// ScriptStruct JackGame.JackDataTableLookAtBoneSetting
// 0x0090 (0x0098 - 0x0008)
struct FJackDataTableLookAtBoneSetting final : public FTableRowBase
{
public:
	struct FJackLookAtBoneSetting                 Spine1;                                            // 0x0008(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackLookAtBoneSetting                 Spine2;                                            // 0x002C(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackLookAtBoneSetting                 Neck;                                              // 0x0050(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackLookAtBoneSetting                 Head;                                              // 0x0074(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableLookAtBoneSetting) == 0x000008, "Wrong alignment on FJackDataTableLookAtBoneSetting");
static_assert(sizeof(FJackDataTableLookAtBoneSetting) == 0x000098, "Wrong size on FJackDataTableLookAtBoneSetting");
static_assert(offsetof(FJackDataTableLookAtBoneSetting, Spine1) == 0x000008, "Member 'FJackDataTableLookAtBoneSetting::Spine1' has a wrong offset!");
static_assert(offsetof(FJackDataTableLookAtBoneSetting, Spine2) == 0x00002C, "Member 'FJackDataTableLookAtBoneSetting::Spine2' has a wrong offset!");
static_assert(offsetof(FJackDataTableLookAtBoneSetting, Neck) == 0x000050, "Member 'FJackDataTableLookAtBoneSetting::Neck' has a wrong offset!");
static_assert(offsetof(FJackDataTableLookAtBoneSetting, Head) == 0x000074, "Member 'FJackDataTableLookAtBoneSetting::Head' has a wrong offset!");

// ScriptStruct JackGame.JackUMGItemGetInfo
// 0x0020 (0x0020 - 0x0000)
struct FJackUMGItemGetInfo final
{
public:
	class FName                                   MapId;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortNo;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReference;                                        // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemPlacedAcquisition                 IconType;                                          // 0x000D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Caption;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGItemGetInfo) == 0x000008, "Wrong alignment on FJackUMGItemGetInfo");
static_assert(sizeof(FJackUMGItemGetInfo) == 0x000020, "Wrong size on FJackUMGItemGetInfo");
static_assert(offsetof(FJackUMGItemGetInfo, MapId) == 0x000000, "Member 'FJackUMGItemGetInfo::MapId' has a wrong offset!");
static_assert(offsetof(FJackUMGItemGetInfo, SortNo) == 0x000008, "Member 'FJackUMGItemGetInfo::SortNo' has a wrong offset!");
static_assert(offsetof(FJackUMGItemGetInfo, bReference) == 0x00000C, "Member 'FJackUMGItemGetInfo::bReference' has a wrong offset!");
static_assert(offsetof(FJackUMGItemGetInfo, IconType) == 0x00000D, "Member 'FJackUMGItemGetInfo::IconType' has a wrong offset!");
static_assert(offsetof(FJackUMGItemGetInfo, Caption) == 0x000010, "Member 'FJackUMGItemGetInfo::Caption' has a wrong offset!");

// ScriptStruct JackGame.JackUMGEquipmentParam
// 0x0038 (0x0038 - 0x0000)
struct FJackUMGEquipmentParam final
{
public:
	int32                                         ParamNumber;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackItem_ParameterType                       ParamEnumType;                                     // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ParamName;                                         // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         ItemBase;                                          // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Present;                                           // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Changed;                                           // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PresentFloat;                                      // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangedFloat;                                      // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMajor;                                           // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDisplay;                                         // 0x0035(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPercent;                                         // 0x0036(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_37[0x1];                                       // 0x0037(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGEquipmentParam) == 0x000008, "Wrong alignment on FJackUMGEquipmentParam");
static_assert(sizeof(FJackUMGEquipmentParam) == 0x000038, "Wrong size on FJackUMGEquipmentParam");
static_assert(offsetof(FJackUMGEquipmentParam, ParamNumber) == 0x000000, "Member 'FJackUMGEquipmentParam::ParamNumber' has a wrong offset!");
static_assert(offsetof(FJackUMGEquipmentParam, ParamEnumType) == 0x000004, "Member 'FJackUMGEquipmentParam::ParamEnumType' has a wrong offset!");
static_assert(offsetof(FJackUMGEquipmentParam, ParamName) == 0x000008, "Member 'FJackUMGEquipmentParam::ParamName' has a wrong offset!");
static_assert(offsetof(FJackUMGEquipmentParam, ItemBase) == 0x000020, "Member 'FJackUMGEquipmentParam::ItemBase' has a wrong offset!");
static_assert(offsetof(FJackUMGEquipmentParam, Present) == 0x000024, "Member 'FJackUMGEquipmentParam::Present' has a wrong offset!");
static_assert(offsetof(FJackUMGEquipmentParam, Changed) == 0x000028, "Member 'FJackUMGEquipmentParam::Changed' has a wrong offset!");
static_assert(offsetof(FJackUMGEquipmentParam, PresentFloat) == 0x00002C, "Member 'FJackUMGEquipmentParam::PresentFloat' has a wrong offset!");
static_assert(offsetof(FJackUMGEquipmentParam, ChangedFloat) == 0x000030, "Member 'FJackUMGEquipmentParam::ChangedFloat' has a wrong offset!");
static_assert(offsetof(FJackUMGEquipmentParam, IsMajor) == 0x000034, "Member 'FJackUMGEquipmentParam::IsMajor' has a wrong offset!");
static_assert(offsetof(FJackUMGEquipmentParam, IsDisplay) == 0x000035, "Member 'FJackUMGEquipmentParam::IsDisplay' has a wrong offset!");
static_assert(offsetof(FJackUMGEquipmentParam, IsPercent) == 0x000036, "Member 'FJackUMGEquipmentParam::IsPercent' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotFlavorItemRank3
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotFlavorItemRank3 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotFlavorItemRank3) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotFlavorItemRank3");
static_assert(sizeof(FJackLDT_MeosiSlotFlavorItemRank3) == 0x000010, "Wrong size on FJackLDT_MeosiSlotFlavorItemRank3");

// ScriptStruct JackGame.JackUMGGetItemData
// 0x0010 (0x0010 - 0x0000)
struct FJackUMGGetItemData final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EnumIndex;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntValue;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValue;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGGetItemData) == 0x000004, "Wrong alignment on FJackUMGGetItemData");
static_assert(sizeof(FJackUMGGetItemData) == 0x000010, "Wrong size on FJackUMGGetItemData");
static_assert(offsetof(FJackUMGGetItemData, Flag) == 0x000000, "Member 'FJackUMGGetItemData::Flag' has a wrong offset!");
static_assert(offsetof(FJackUMGGetItemData, EnumIndex) == 0x000004, "Member 'FJackUMGGetItemData::EnumIndex' has a wrong offset!");
static_assert(offsetof(FJackUMGGetItemData, IntValue) == 0x000008, "Member 'FJackUMGGetItemData::IntValue' has a wrong offset!");
static_assert(offsetof(FJackUMGGetItemData, FloatValue) == 0x00000C, "Member 'FJackUMGGetItemData::FloatValue' has a wrong offset!");

// ScriptStruct JackGame.JackPopDistanceParams
// 0x0018 (0x0018 - 0x0000)
struct FJackPopDistanceParams final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VisibleDistance;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveDistance;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PopDistance;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PopVirticalWidth;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThresholdWidth;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackPopDistanceParams) == 0x000004, "Wrong alignment on FJackPopDistanceParams");
static_assert(sizeof(FJackPopDistanceParams) == 0x000018, "Wrong size on FJackPopDistanceParams");
static_assert(offsetof(FJackPopDistanceParams, Radius) == 0x000000, "Member 'FJackPopDistanceParams::Radius' has a wrong offset!");
static_assert(offsetof(FJackPopDistanceParams, VisibleDistance) == 0x000004, "Member 'FJackPopDistanceParams::VisibleDistance' has a wrong offset!");
static_assert(offsetof(FJackPopDistanceParams, ActiveDistance) == 0x000008, "Member 'FJackPopDistanceParams::ActiveDistance' has a wrong offset!");
static_assert(offsetof(FJackPopDistanceParams, PopDistance) == 0x00000C, "Member 'FJackPopDistanceParams::PopDistance' has a wrong offset!");
static_assert(offsetof(FJackPopDistanceParams, PopVirticalWidth) == 0x000010, "Member 'FJackPopDistanceParams::PopVirticalWidth' has a wrong offset!");
static_assert(offsetof(FJackPopDistanceParams, ThresholdWidth) == 0x000014, "Member 'FJackPopDistanceParams::ThresholdWidth' has a wrong offset!");

// ScriptStruct JackGame.JackPopDistanceParamsByPL
// 0x0018 (0x0018 - 0x0000)
struct FJackPopDistanceParamsByPL final
{
public:
	class FName                                   PersistentLevelName;                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJackPopDistanceParams>         DistanceParameters;                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackPopDistanceParamsByPL) == 0x000008, "Wrong alignment on FJackPopDistanceParamsByPL");
static_assert(sizeof(FJackPopDistanceParamsByPL) == 0x000018, "Wrong size on FJackPopDistanceParamsByPL");
static_assert(offsetof(FJackPopDistanceParamsByPL, PersistentLevelName) == 0x000000, "Member 'FJackPopDistanceParamsByPL::PersistentLevelName' has a wrong offset!");
static_assert(offsetof(FJackPopDistanceParamsByPL, DistanceParameters) == 0x000008, "Member 'FJackPopDistanceParamsByPL::DistanceParameters' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Sim_MantleC_low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_MantleC_low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_MantleC_low) == 0x000008, "Wrong alignment on FJackLDT_Sim_MantleC_low");
static_assert(sizeof(FJackLDT_Sim_MantleC_low) == 0x000010, "Wrong size on FJackLDT_Sim_MantleC_low");

// ScriptStruct JackGame.JackUMGItemListInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackUMGItemListInfo final
{
public:
	EJackItem_Bag                                 BagType;                                           // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IndexInBag;                                        // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID;                                            // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackEquipmentRegion                          EquipmentInRegion;                                 // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGItemListInfo) == 0x000008, "Wrong alignment on FJackUMGItemListInfo");
static_assert(sizeof(FJackUMGItemListInfo) == 0x000018, "Wrong size on FJackUMGItemListInfo");
static_assert(offsetof(FJackUMGItemListInfo, BagType) == 0x000000, "Member 'FJackUMGItemListInfo::BagType' has a wrong offset!");
static_assert(offsetof(FJackUMGItemListInfo, IndexInBag) == 0x000004, "Member 'FJackUMGItemListInfo::IndexInBag' has a wrong offset!");
static_assert(offsetof(FJackUMGItemListInfo, ItemID) == 0x000008, "Member 'FJackUMGItemListInfo::ItemID' has a wrong offset!");
static_assert(offsetof(FJackUMGItemListInfo, EquipmentInRegion) == 0x000010, "Member 'FJackUMGItemListInfo::EquipmentInRegion' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_SlotNormalRoleDataTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_SlotNormalRoleDataTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_SlotNormalRoleDataTable) == 0x000008, "Wrong alignment on FJackLDT_SlotNormalRoleDataTable");
static_assert(sizeof(FJackLDT_SlotNormalRoleDataTable) == 0x000010, "Wrong size on FJackLDT_SlotNormalRoleDataTable");

// ScriptStruct JackGame.JackUMGScenarioFlagName
// 0x0040 (0x0040 - 0x0000)
struct FJackUMGScenarioFlagName final
{
public:
	struct FJackUMGScenarioFlag                   Scenario;                                          // 0x0000(0x0030)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   NameId;                                            // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGScenarioFlagName) == 0x000008, "Wrong alignment on FJackUMGScenarioFlagName");
static_assert(sizeof(FJackUMGScenarioFlagName) == 0x000040, "Wrong size on FJackUMGScenarioFlagName");
static_assert(offsetof(FJackUMGScenarioFlagName, Scenario) == 0x000000, "Member 'FJackUMGScenarioFlagName::Scenario' has a wrong offset!");
static_assert(offsetof(FJackUMGScenarioFlagName, NameId) == 0x000030, "Member 'FJackUMGScenarioFlagName::NameId' has a wrong offset!");
static_assert(offsetof(FJackUMGScenarioFlagName, Value) == 0x000038, "Member 'FJackUMGScenarioFlagName::Value' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotDoorEmission
// 0x0001 (0x0001 - 0x0000)
struct FJackMeosiSlotDoorEmission final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMeosiSlotDoorEmission) == 0x000001, "Wrong alignment on FJackMeosiSlotDoorEmission");
static_assert(sizeof(FJackMeosiSlotDoorEmission) == 0x000001, "Wrong size on FJackMeosiSlotDoorEmission");
static_assert(offsetof(FJackMeosiSlotDoorEmission, bIsValid) == 0x000000, "Member 'FJackMeosiSlotDoorEmission::bIsValid' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleC_003
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleC_003 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleC_003) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleC_003");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleC_003) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleC_003");

// ScriptStruct JackGame.JackUMGItemClassRefineName
// 0x00A0 (0x00A0 - 0x0000)
struct alignas(0x08) FJackUMGItemClassRefineName final
{
public:
	class FName                                   Unknown;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Sword;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Dagger;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Ax;                                                // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Stick;                                             // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Boomerang;                                         // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DoubleSword;                                       // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Spear;                                             // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Staff;                                             // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Claw;                                              // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Whip;                                              // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Shield;                                            // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Armor;                                             // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Helmet;                                            // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Accessory;                                         // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Usable;                                            // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Daizinamono;                                       // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material;                                          // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RecipeBook;                                        // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Exchange;                                          // 0x0098(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGItemClassRefineName) == 0x000008, "Wrong alignment on FJackUMGItemClassRefineName");
static_assert(sizeof(FJackUMGItemClassRefineName) == 0x0000A0, "Wrong size on FJackUMGItemClassRefineName");
static_assert(offsetof(FJackUMGItemClassRefineName, Unknown) == 0x000000, "Member 'FJackUMGItemClassRefineName::Unknown' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineName, Sword) == 0x000008, "Member 'FJackUMGItemClassRefineName::Sword' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineName, Dagger) == 0x000010, "Member 'FJackUMGItemClassRefineName::Dagger' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineName, Ax) == 0x000018, "Member 'FJackUMGItemClassRefineName::Ax' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineName, Stick) == 0x000020, "Member 'FJackUMGItemClassRefineName::Stick' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineName, Boomerang) == 0x000028, "Member 'FJackUMGItemClassRefineName::Boomerang' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineName, DoubleSword) == 0x000030, "Member 'FJackUMGItemClassRefineName::DoubleSword' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineName, Spear) == 0x000038, "Member 'FJackUMGItemClassRefineName::Spear' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineName, Staff) == 0x000040, "Member 'FJackUMGItemClassRefineName::Staff' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineName, Claw) == 0x000048, "Member 'FJackUMGItemClassRefineName::Claw' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineName, Whip) == 0x000050, "Member 'FJackUMGItemClassRefineName::Whip' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineName, Shield) == 0x000058, "Member 'FJackUMGItemClassRefineName::Shield' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineName, Armor) == 0x000060, "Member 'FJackUMGItemClassRefineName::Armor' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineName, Helmet) == 0x000068, "Member 'FJackUMGItemClassRefineName::Helmet' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineName, Accessory) == 0x000070, "Member 'FJackUMGItemClassRefineName::Accessory' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineName, Usable) == 0x000078, "Member 'FJackUMGItemClassRefineName::Usable' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineName, Daizinamono) == 0x000080, "Member 'FJackUMGItemClassRefineName::Daizinamono' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineName, Material) == 0x000088, "Member 'FJackUMGItemClassRefineName::Material' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineName, RecipeBook) == 0x000090, "Member 'FJackUMGItemClassRefineName::RecipeBook' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineName, Exchange) == 0x000098, "Member 'FJackUMGItemClassRefineName::Exchange' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotMonsterList_CZ2
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMonsterList_CZ2 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMonsterList_CZ2) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMonsterList_CZ2");
static_assert(sizeof(FJackLDT_MeosiSlotMonsterList_CZ2) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMonsterList_CZ2");

// ScriptStruct JackGame.JackDataTableWeaponClass
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableWeaponClass final : public FTableRowBase
{
public:
	TSubclassOf<class AJackWeaponBase>            WeaponClass;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableWeaponClass) == 0x000008, "Wrong alignment on FJackDataTableWeaponClass");
static_assert(sizeof(FJackDataTableWeaponClass) == 0x000010, "Wrong size on FJackDataTableWeaponClass");
static_assert(offsetof(FJackDataTableWeaponClass, WeaponClass) == 0x000008, "Member 'FJackDataTableWeaponClass::WeaponClass' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_BodyExtra_AverageRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_BodyExtra_AverageRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_BodyExtra_AverageRot) == 0x000008, "Wrong alignment on FJackLDT_BodyExtra_AverageRot");
static_assert(sizeof(FJackLDT_BodyExtra_AverageRot) == 0x000010, "Wrong size on FJackLDT_BodyExtra_AverageRot");

// ScriptStruct JackGame.JackUMGItemClassRefineData
// 0x001F (0x001F - 0x0000)
struct FJackUMGItemClassRefineData final
{
public:
	EJackUMGItemClassRefineType                   Unknown;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   Sword;                                             // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   Dagger;                                            // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   Ax;                                                // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   Stick;                                             // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   Boomerang;                                         // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   DoubleSword;                                       // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   Spear;                                             // 0x0007(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   Staff;                                             // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   Claw;                                              // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   Whip;                                              // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   Shield;                                            // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   LargeShield;                                       // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   Clothes;                                           // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   Armor;                                             // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   Robe;                                              // 0x000F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   Hat;                                               // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   Helmet;                                            // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   FaceAccessory;                                     // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   NeckAccessory;                                     // 0x0013(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   FingerAccessory;                                   // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   HandAccessory;                                     // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   ArmAccessory;                                      // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   ShoesAccessory;                                    // 0x0017(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   FootAccessory;                                     // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   EtcAccessory;                                      // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   UsableItem;                                        // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   Daizinamono;                                       // 0x001B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   Material;                                          // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   RecipeBook;                                        // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGItemClassRefineType                   Exchange;                                          // 0x001E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGItemClassRefineData) == 0x000001, "Wrong alignment on FJackUMGItemClassRefineData");
static_assert(sizeof(FJackUMGItemClassRefineData) == 0x00001F, "Wrong size on FJackUMGItemClassRefineData");
static_assert(offsetof(FJackUMGItemClassRefineData, Unknown) == 0x000000, "Member 'FJackUMGItemClassRefineData::Unknown' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, Sword) == 0x000001, "Member 'FJackUMGItemClassRefineData::Sword' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, Dagger) == 0x000002, "Member 'FJackUMGItemClassRefineData::Dagger' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, Ax) == 0x000003, "Member 'FJackUMGItemClassRefineData::Ax' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, Stick) == 0x000004, "Member 'FJackUMGItemClassRefineData::Stick' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, Boomerang) == 0x000005, "Member 'FJackUMGItemClassRefineData::Boomerang' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, DoubleSword) == 0x000006, "Member 'FJackUMGItemClassRefineData::DoubleSword' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, Spear) == 0x000007, "Member 'FJackUMGItemClassRefineData::Spear' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, Staff) == 0x000008, "Member 'FJackUMGItemClassRefineData::Staff' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, Claw) == 0x000009, "Member 'FJackUMGItemClassRefineData::Claw' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, Whip) == 0x00000A, "Member 'FJackUMGItemClassRefineData::Whip' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, Shield) == 0x00000B, "Member 'FJackUMGItemClassRefineData::Shield' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, LargeShield) == 0x00000C, "Member 'FJackUMGItemClassRefineData::LargeShield' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, Clothes) == 0x00000D, "Member 'FJackUMGItemClassRefineData::Clothes' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, Armor) == 0x00000E, "Member 'FJackUMGItemClassRefineData::Armor' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, Robe) == 0x00000F, "Member 'FJackUMGItemClassRefineData::Robe' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, Hat) == 0x000010, "Member 'FJackUMGItemClassRefineData::Hat' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, Helmet) == 0x000011, "Member 'FJackUMGItemClassRefineData::Helmet' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, FaceAccessory) == 0x000012, "Member 'FJackUMGItemClassRefineData::FaceAccessory' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, NeckAccessory) == 0x000013, "Member 'FJackUMGItemClassRefineData::NeckAccessory' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, FingerAccessory) == 0x000014, "Member 'FJackUMGItemClassRefineData::FingerAccessory' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, HandAccessory) == 0x000015, "Member 'FJackUMGItemClassRefineData::HandAccessory' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, ArmAccessory) == 0x000016, "Member 'FJackUMGItemClassRefineData::ArmAccessory' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, ShoesAccessory) == 0x000017, "Member 'FJackUMGItemClassRefineData::ShoesAccessory' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, FootAccessory) == 0x000018, "Member 'FJackUMGItemClassRefineData::FootAccessory' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, EtcAccessory) == 0x000019, "Member 'FJackUMGItemClassRefineData::EtcAccessory' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, UsableItem) == 0x00001A, "Member 'FJackUMGItemClassRefineData::UsableItem' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, Daizinamono) == 0x00001B, "Member 'FJackUMGItemClassRefineData::Daizinamono' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, Material) == 0x00001C, "Member 'FJackUMGItemClassRefineData::Material' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, RecipeBook) == 0x00001D, "Member 'FJackUMGItemClassRefineData::RecipeBook' has a wrong offset!");
static_assert(offsetof(FJackUMGItemClassRefineData, Exchange) == 0x00001E, "Member 'FJackUMGItemClassRefineData::Exchange' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_AnimDynamics_M611
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AnimDynamics_M611 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AnimDynamics_M611) == 0x000008, "Wrong alignment on FJackLDT_AnimDynamics_M611");
static_assert(sizeof(FJackLDT_AnimDynamics_M611) == 0x000010, "Wrong size on FJackLDT_AnimDynamics_M611");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleS_001_N
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleS_001_N final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleS_001_N) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleS_001_N");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleS_001_N) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleS_001_N");

// ScriptStruct JackGame.JackUMGCanOnlyBuyOnceItem
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackUMGCanOnlyBuyOnceItem final
{
public:
	class FName                                   ItemID;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SystemFlagId;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGCanOnlyBuyOnceItem) == 0x000008, "Wrong alignment on FJackUMGCanOnlyBuyOnceItem");
static_assert(sizeof(FJackUMGCanOnlyBuyOnceItem) == 0x000010, "Wrong size on FJackUMGCanOnlyBuyOnceItem");
static_assert(offsetof(FJackUMGCanOnlyBuyOnceItem, ItemID) == 0x000000, "Member 'FJackUMGCanOnlyBuyOnceItem::ItemID' has a wrong offset!");
static_assert(offsetof(FJackUMGCanOnlyBuyOnceItem, SystemFlagId) == 0x000008, "Member 'FJackUMGCanOnlyBuyOnceItem::SystemFlagId' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotFlavorItemRank4
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotFlavorItemRank4 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotFlavorItemRank4) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotFlavorItemRank4");
static_assert(sizeof(FJackLDT_MeosiSlotFlavorItemRank4) == 0x000010, "Wrong size on FJackLDT_MeosiSlotFlavorItemRank4");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_F10
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_F10 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_F10) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_F10");
static_assert(sizeof(FJackLDT_MonsterDeploy_F10) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_F10");

// ScriptStruct JackGame.JackUMGActionIcons
// 0x0078 (0x0078 - 0x0000)
struct FJackUMGActionIcons final
{
public:
	TSoftObjectPtr<class UTexture>                Bouken;                                            // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                Jakutai;                                           // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                Kaifuku;                                           // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                Kougeki;                                           // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                Sien;                                              // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGActionIcons) == 0x000008, "Wrong alignment on FJackUMGActionIcons");
static_assert(sizeof(FJackUMGActionIcons) == 0x000078, "Wrong size on FJackUMGActionIcons");
static_assert(offsetof(FJackUMGActionIcons, Bouken) == 0x000000, "Member 'FJackUMGActionIcons::Bouken' has a wrong offset!");
static_assert(offsetof(FJackUMGActionIcons, Jakutai) == 0x000018, "Member 'FJackUMGActionIcons::Jakutai' has a wrong offset!");
static_assert(offsetof(FJackUMGActionIcons, Kaifuku) == 0x000030, "Member 'FJackUMGActionIcons::Kaifuku' has a wrong offset!");
static_assert(offsetof(FJackUMGActionIcons, Kougeki) == 0x000048, "Member 'FJackUMGActionIcons::Kougeki' has a wrong offset!");
static_assert(offsetof(FJackUMGActionIcons, Sien) == 0x000060, "Member 'FJackUMGActionIcons::Sien' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotMachineGrotta_Second
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMachineGrotta_Second final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMachineGrotta_Second) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMachineGrotta_Second");
static_assert(sizeof(FJackLDT_MeosiSlotMachineGrotta_Second) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMachineGrotta_Second");

// ScriptStruct JackGame.JackDataTableRenkei
// 0x0138 (0x0140 - 0x0008)
struct FJackDataTableRenkei final : public FTableRowBase
{
public:
	class FName                                   RenkeiID;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AchievementID;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisplayName;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionIconType                           ActionIconType;                                    // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Description2;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Description4;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackRenkeiCategory                           RenkeiCategory;                                    // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DoRenkeiID;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SelectActionID;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisplayFlag;                                       // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NeedFlag;                                          // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NeedItemID;                                        // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OwnerCharacter;                                    // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackRenkeiMember                             ActionCameraDefenderReference;                     // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CharacterA;                                        // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NeedActionID_A;                                    // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedZone_A;                                        // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RefreshZone_A;                                     // 0x0089(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CharacterB;                                        // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NeedActionID_B;                                    // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedZone_B;                                        // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RefreshZone_B;                                     // 0x00A1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CharacterC;                                        // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NeedActionID_C;                                    // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedZone_C;                                        // 0x00B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RefreshZone_C;                                     // 0x00B9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CharacterD;                                        // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NeedActionID_D;                                    // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedZone_D;                                        // 0x00D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RefreshZone_D;                                     // 0x00D1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RenkeiCutInID;                                     // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeColorR_Cut;                                    // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeColorG_Cut;                                    // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeColorB_Cut;                                    // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime_Cut;                                      // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeColorR;                                        // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeColorG;                                        // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeColorB;                                        // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeColorR_Result;                                 // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeColorG_Result;                                 // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeColorB_Result;                                 // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime_Result;                                   // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionCutIn_FormationID;                           // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionCutIn_CameraID;                              // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionCutIn_AnimMontage;                           // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActionCutIn_Time;                                  // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionCutIn_TextID;                                // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TripleRenkeiNo;                                    // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableRenkei) == 0x000008, "Wrong alignment on FJackDataTableRenkei");
static_assert(sizeof(FJackDataTableRenkei) == 0x000140, "Wrong size on FJackDataTableRenkei");
static_assert(offsetof(FJackDataTableRenkei, RenkeiID) == 0x000008, "Member 'FJackDataTableRenkei::RenkeiID' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, AchievementID) == 0x000010, "Member 'FJackDataTableRenkei::AchievementID' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, DisplayName) == 0x000018, "Member 'FJackDataTableRenkei::DisplayName' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, ActionIconType) == 0x000020, "Member 'FJackDataTableRenkei::ActionIconType' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, Description2) == 0x000028, "Member 'FJackDataTableRenkei::Description2' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, Description4) == 0x000030, "Member 'FJackDataTableRenkei::Description4' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, RenkeiCategory) == 0x000038, "Member 'FJackDataTableRenkei::RenkeiCategory' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, DoRenkeiID) == 0x000040, "Member 'FJackDataTableRenkei::DoRenkeiID' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, SelectActionID) == 0x000048, "Member 'FJackDataTableRenkei::SelectActionID' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, DisplayFlag) == 0x000050, "Member 'FJackDataTableRenkei::DisplayFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, NeedFlag) == 0x000058, "Member 'FJackDataTableRenkei::NeedFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, NeedItemID) == 0x000060, "Member 'FJackDataTableRenkei::NeedItemID' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, OwnerCharacter) == 0x000068, "Member 'FJackDataTableRenkei::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, ActionCameraDefenderReference) == 0x000070, "Member 'FJackDataTableRenkei::ActionCameraDefenderReference' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, CharacterA) == 0x000078, "Member 'FJackDataTableRenkei::CharacterA' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, NeedActionID_A) == 0x000080, "Member 'FJackDataTableRenkei::NeedActionID_A' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, NeedZone_A) == 0x000088, "Member 'FJackDataTableRenkei::NeedZone_A' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, RefreshZone_A) == 0x000089, "Member 'FJackDataTableRenkei::RefreshZone_A' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, CharacterB) == 0x000090, "Member 'FJackDataTableRenkei::CharacterB' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, NeedActionID_B) == 0x000098, "Member 'FJackDataTableRenkei::NeedActionID_B' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, NeedZone_B) == 0x0000A0, "Member 'FJackDataTableRenkei::NeedZone_B' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, RefreshZone_B) == 0x0000A1, "Member 'FJackDataTableRenkei::RefreshZone_B' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, CharacterC) == 0x0000A8, "Member 'FJackDataTableRenkei::CharacterC' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, NeedActionID_C) == 0x0000B0, "Member 'FJackDataTableRenkei::NeedActionID_C' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, NeedZone_C) == 0x0000B8, "Member 'FJackDataTableRenkei::NeedZone_C' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, RefreshZone_C) == 0x0000B9, "Member 'FJackDataTableRenkei::RefreshZone_C' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, CharacterD) == 0x0000C0, "Member 'FJackDataTableRenkei::CharacterD' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, NeedActionID_D) == 0x0000C8, "Member 'FJackDataTableRenkei::NeedActionID_D' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, NeedZone_D) == 0x0000D0, "Member 'FJackDataTableRenkei::NeedZone_D' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, RefreshZone_D) == 0x0000D1, "Member 'FJackDataTableRenkei::RefreshZone_D' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, RenkeiCutInID) == 0x0000D8, "Member 'FJackDataTableRenkei::RenkeiCutInID' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, FadeColorR_Cut) == 0x0000E0, "Member 'FJackDataTableRenkei::FadeColorR_Cut' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, FadeColorG_Cut) == 0x0000E4, "Member 'FJackDataTableRenkei::FadeColorG_Cut' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, FadeColorB_Cut) == 0x0000E8, "Member 'FJackDataTableRenkei::FadeColorB_Cut' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, FadeTime_Cut) == 0x0000EC, "Member 'FJackDataTableRenkei::FadeTime_Cut' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, FadeColorR) == 0x0000F0, "Member 'FJackDataTableRenkei::FadeColorR' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, FadeColorG) == 0x0000F4, "Member 'FJackDataTableRenkei::FadeColorG' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, FadeColorB) == 0x0000F8, "Member 'FJackDataTableRenkei::FadeColorB' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, FadeTime) == 0x0000FC, "Member 'FJackDataTableRenkei::FadeTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, FadeColorR_Result) == 0x000100, "Member 'FJackDataTableRenkei::FadeColorR_Result' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, FadeColorG_Result) == 0x000104, "Member 'FJackDataTableRenkei::FadeColorG_Result' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, FadeColorB_Result) == 0x000108, "Member 'FJackDataTableRenkei::FadeColorB_Result' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, FadeTime_Result) == 0x00010C, "Member 'FJackDataTableRenkei::FadeTime_Result' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, ActionCutIn_FormationID) == 0x000110, "Member 'FJackDataTableRenkei::ActionCutIn_FormationID' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, ActionCutIn_CameraID) == 0x000118, "Member 'FJackDataTableRenkei::ActionCutIn_CameraID' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, ActionCutIn_AnimMontage) == 0x000120, "Member 'FJackDataTableRenkei::ActionCutIn_AnimMontage' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, ActionCutIn_Time) == 0x000128, "Member 'FJackDataTableRenkei::ActionCutIn_Time' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, ActionCutIn_TextID) == 0x000130, "Member 'FJackDataTableRenkei::ActionCutIn_TextID' has a wrong offset!");
static_assert(offsetof(FJackDataTableRenkei, TripleRenkeiNo) == 0x000138, "Member 'FJackDataTableRenkei::TripleRenkeiNo' has a wrong offset!");

// ScriptStruct JackGame.JackUMGCharacterUIPresetData
// 0x0030 (0x0030 - 0x0000)
struct FJackUMGCharacterUIPresetData final
{
public:
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DrawSize;                                          // 0x0008(0x0008)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DrawOffset;                                        // 0x0010(0x0008)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Pivot;                                             // 0x0018(0x0008)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PostionOffset;                                     // 0x0020(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDeviceZTest;                                // 0x002C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUse3dWidget;                                      // 0x002D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGCharacterUIPresetData) == 0x000008, "Wrong alignment on FJackUMGCharacterUIPresetData");
static_assert(sizeof(FJackUMGCharacterUIPresetData) == 0x000030, "Wrong size on FJackUMGCharacterUIPresetData");
static_assert(offsetof(FJackUMGCharacterUIPresetData, WidgetClass) == 0x000000, "Member 'FJackUMGCharacterUIPresetData::WidgetClass' has a wrong offset!");
static_assert(offsetof(FJackUMGCharacterUIPresetData, DrawSize) == 0x000008, "Member 'FJackUMGCharacterUIPresetData::DrawSize' has a wrong offset!");
static_assert(offsetof(FJackUMGCharacterUIPresetData, DrawOffset) == 0x000010, "Member 'FJackUMGCharacterUIPresetData::DrawOffset' has a wrong offset!");
static_assert(offsetof(FJackUMGCharacterUIPresetData, Pivot) == 0x000018, "Member 'FJackUMGCharacterUIPresetData::Pivot' has a wrong offset!");
static_assert(offsetof(FJackUMGCharacterUIPresetData, PostionOffset) == 0x000020, "Member 'FJackUMGCharacterUIPresetData::PostionOffset' has a wrong offset!");
static_assert(offsetof(FJackUMGCharacterUIPresetData, bEnableDeviceZTest) == 0x00002C, "Member 'FJackUMGCharacterUIPresetData::bEnableDeviceZTest' has a wrong offset!");
static_assert(offsetof(FJackUMGCharacterUIPresetData, bUse3dWidget) == 0x00002D, "Member 'FJackUMGCharacterUIPresetData::bUse3dWidget' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtQ1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtQ1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtQ1) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtQ1");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtQ1) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtQ1");

// ScriptStruct JackGame.JackDataTableMiniGameJackPotComp
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMiniGameJackPotComp final : public FTableRowBase
{
public:
	int32                                         Coin;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMiniGameJackPotComp) == 0x000008, "Wrong alignment on FJackDataTableMiniGameJackPotComp");
static_assert(sizeof(FJackDataTableMiniGameJackPotComp) == 0x000010, "Wrong size on FJackDataTableMiniGameJackPotComp");
static_assert(offsetof(FJackDataTableMiniGameJackPotComp, Coin) == 0x000008, "Member 'FJackDataTableMiniGameJackPotComp::Coin' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotReelLamp_Anim06
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotReelLamp_Anim06 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotReelLamp_Anim06) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotReelLamp_Anim06");
static_assert(sizeof(FJackLDT_MeosiSlotReelLamp_Anim06) == 0x000010, "Wrong size on FJackLDT_MeosiSlotReelLamp_Anim06");

// ScriptStruct JackGame.JackUMGRequiredMaterialInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FJackUMGRequiredMaterialInfo final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemID;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumHaving;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumNeed;                                           // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnough;                                           // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBuy;                                           // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGRequiredMaterialInfo) == 0x000008, "Wrong alignment on FJackUMGRequiredMaterialInfo");
static_assert(sizeof(FJackUMGRequiredMaterialInfo) == 0x000020, "Wrong size on FJackUMGRequiredMaterialInfo");
static_assert(offsetof(FJackUMGRequiredMaterialInfo, Index) == 0x000000, "Member 'FJackUMGRequiredMaterialInfo::Index' has a wrong offset!");
static_assert(offsetof(FJackUMGRequiredMaterialInfo, ItemID) == 0x000008, "Member 'FJackUMGRequiredMaterialInfo::ItemID' has a wrong offset!");
static_assert(offsetof(FJackUMGRequiredMaterialInfo, NumHaving) == 0x000010, "Member 'FJackUMGRequiredMaterialInfo::NumHaving' has a wrong offset!");
static_assert(offsetof(FJackUMGRequiredMaterialInfo, NumNeed) == 0x000014, "Member 'FJackUMGRequiredMaterialInfo::NumNeed' has a wrong offset!");
static_assert(offsetof(FJackUMGRequiredMaterialInfo, bEnough) == 0x000018, "Member 'FJackUMGRequiredMaterialInfo::bEnough' has a wrong offset!");
static_assert(offsetof(FJackUMGRequiredMaterialInfo, bCanBuy) == 0x000019, "Member 'FJackUMGRequiredMaterialInfo::bCanBuy' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_Islands
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_Islands final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_Islands) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_Islands");
static_assert(sizeof(FJackLDT_MonsterDeploy_Islands) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_Islands");

// ScriptStruct JackGame.JackUMGOddEffectStatus
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackUMGOddEffectStatus final
{
public:
	class FName                                   OddEffectID;                                       // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlideRank;                                         // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainTurn;                                        // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortNumber;                                        // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGOddEffectStatus) == 0x000008, "Wrong alignment on FJackUMGOddEffectStatus");
static_assert(sizeof(FJackUMGOddEffectStatus) == 0x000018, "Wrong size on FJackUMGOddEffectStatus");
static_assert(offsetof(FJackUMGOddEffectStatus, OddEffectID) == 0x000000, "Member 'FJackUMGOddEffectStatus::OddEffectID' has a wrong offset!");
static_assert(offsetof(FJackUMGOddEffectStatus, SlideRank) == 0x000008, "Member 'FJackUMGOddEffectStatus::SlideRank' has a wrong offset!");
static_assert(offsetof(FJackUMGOddEffectStatus, RemainTurn) == 0x00000C, "Member 'FJackUMGOddEffectStatus::RemainTurn' has a wrong offset!");
static_assert(offsetof(FJackUMGOddEffectStatus, SortNumber) == 0x000010, "Member 'FJackUMGOddEffectStatus::SortNumber' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_P002_AR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_P002_AR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_P002_AR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_P002_AR");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_P002_AR) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_P002_AR");

// ScriptStruct JackGame.JackDataTableVoiceDrama
// 0x0068 (0x0070 - 0x0008)
struct FJackDataTableVoiceDrama final : public FTableRowBase
{
public:
	class FString                                 SceneTitle;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TalkerName;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPageSkip;                                         // 0x0038(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ScenarioTag_Head;                                  // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ScenarioTag_Foot;                                  // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SoundStartMSec;                                    // 0x0060(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SoundEndMSec;                                      // 0x0064(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundMSec;                                         // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableVoiceDrama) == 0x000008, "Wrong alignment on FJackDataTableVoiceDrama");
static_assert(sizeof(FJackDataTableVoiceDrama) == 0x000070, "Wrong size on FJackDataTableVoiceDrama");
static_assert(offsetof(FJackDataTableVoiceDrama, SceneTitle) == 0x000008, "Member 'FJackDataTableVoiceDrama::SceneTitle' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDrama, TalkerName) == 0x000018, "Member 'FJackDataTableVoiceDrama::TalkerName' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDrama, Text) == 0x000028, "Member 'FJackDataTableVoiceDrama::Text' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDrama, bPageSkip) == 0x000038, "Member 'FJackDataTableVoiceDrama::bPageSkip' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDrama, ScenarioTag_Head) == 0x000040, "Member 'FJackDataTableVoiceDrama::ScenarioTag_Head' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDrama, ScenarioTag_Foot) == 0x000050, "Member 'FJackDataTableVoiceDrama::ScenarioTag_Foot' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDrama, SoundStartMSec) == 0x000060, "Member 'FJackDataTableVoiceDrama::SoundStartMSec' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDrama, SoundEndMSec) == 0x000064, "Member 'FJackDataTableVoiceDrama::SoundEndMSec' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDrama, SoundMSec) == 0x000068, "Member 'FJackDataTableVoiceDrama::SoundMSec' has a wrong offset!");

// ScriptStruct JackGame.JackUMGJoutaiMiruMember
// 0x0020 (0x0020 - 0x0000)
struct FJackUMGJoutaiMiruMember final
{
public:
	EJackCharacter                                CharType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CharName;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGJoutaiMiruMember) == 0x000008, "Wrong alignment on FJackUMGJoutaiMiruMember");
static_assert(sizeof(FJackUMGJoutaiMiruMember) == 0x000020, "Wrong size on FJackUMGJoutaiMiruMember");
static_assert(offsetof(FJackUMGJoutaiMiruMember, CharType) == 0x000000, "Member 'FJackUMGJoutaiMiruMember::CharType' has a wrong offset!");
static_assert(offsetof(FJackUMGJoutaiMiruMember, CharName) == 0x000008, "Member 'FJackUMGJoutaiMiruMember::CharName' has a wrong offset!");

// ScriptStruct JackGame.JackUMGDefaultSoundSetting
// 0x0008 (0x0008 - 0x0000)
struct FJackUMGDefaultSoundSetting final
{
public:
	EJackAudioVolume                              BgmVolume;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackAudioVolume                              SeVolume;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackAudioVolume                              VoiceVolume;                                       // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableP001Voice;                                  // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBGMDiscVersion                           BGMDiscVersion;                                    // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDQ8BGM;                                        // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackVoice                                    VoiceType;                                         // 0x0006(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAutomaticFeedOfSpeech;                      // 0x0007(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGDefaultSoundSetting) == 0x000001, "Wrong alignment on FJackUMGDefaultSoundSetting");
static_assert(sizeof(FJackUMGDefaultSoundSetting) == 0x000008, "Wrong size on FJackUMGDefaultSoundSetting");
static_assert(offsetof(FJackUMGDefaultSoundSetting, BgmVolume) == 0x000000, "Member 'FJackUMGDefaultSoundSetting::BgmVolume' has a wrong offset!");
static_assert(offsetof(FJackUMGDefaultSoundSetting, SeVolume) == 0x000001, "Member 'FJackUMGDefaultSoundSetting::SeVolume' has a wrong offset!");
static_assert(offsetof(FJackUMGDefaultSoundSetting, VoiceVolume) == 0x000002, "Member 'FJackUMGDefaultSoundSetting::VoiceVolume' has a wrong offset!");
static_assert(offsetof(FJackUMGDefaultSoundSetting, bEnableP001Voice) == 0x000003, "Member 'FJackUMGDefaultSoundSetting::bEnableP001Voice' has a wrong offset!");
static_assert(offsetof(FJackUMGDefaultSoundSetting, BGMDiscVersion) == 0x000004, "Member 'FJackUMGDefaultSoundSetting::BGMDiscVersion' has a wrong offset!");
static_assert(offsetof(FJackUMGDefaultSoundSetting, bUseDQ8BGM) == 0x000005, "Member 'FJackUMGDefaultSoundSetting::bUseDQ8BGM' has a wrong offset!");
static_assert(offsetof(FJackUMGDefaultSoundSetting, VoiceType) == 0x000006, "Member 'FJackUMGDefaultSoundSetting::VoiceType' has a wrong offset!");
static_assert(offsetof(FJackUMGDefaultSoundSetting, bEnableAutomaticFeedOfSpeech) == 0x000007, "Member 'FJackUMGDefaultSoundSetting::bEnableAutomaticFeedOfSpeech' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableCutSceneDynamicResolutionInfo
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableCutSceneDynamicResolutionInfo final : public FTableRowBase
{
public:
	class FName                                   CutSceneID;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CutID;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenPercentage_Console;                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenPercentage_Handheld;                         // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableCutSceneDynamicResolutionInfo) == 0x000008, "Wrong alignment on FJackDataTableCutSceneDynamicResolutionInfo");
static_assert(sizeof(FJackDataTableCutSceneDynamicResolutionInfo) == 0x000020, "Wrong size on FJackDataTableCutSceneDynamicResolutionInfo");
static_assert(offsetof(FJackDataTableCutSceneDynamicResolutionInfo, CutSceneID) == 0x000008, "Member 'FJackDataTableCutSceneDynamicResolutionInfo::CutSceneID' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneDynamicResolutionInfo, CutID) == 0x000010, "Member 'FJackDataTableCutSceneDynamicResolutionInfo::CutID' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneDynamicResolutionInfo, ScreenPercentage_Console) == 0x000018, "Member 'FJackDataTableCutSceneDynamicResolutionInfo::ScreenPercentage_Console' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneDynamicResolutionInfo, ScreenPercentage_Handheld) == 0x00001C, "Member 'FJackDataTableCutSceneDynamicResolutionInfo::ScreenPercentage_Handheld' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Pose_RearHairKPP
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_RearHairKPP final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_RearHairKPP) == 0x000008, "Wrong alignment on FJackLDT_Pose_RearHairKPP");
static_assert(sizeof(FJackLDT_Pose_RearHairKPP) == 0x000010, "Wrong size on FJackLDT_Pose_RearHairKPP");

// ScriptStruct JackGame.JackUMGRestartListData
// 0x0030 (0x0030 - 0x0000)
struct FJackUMGRestartListData final
{
public:
	bool                                          bIsOnData;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGRestartMenuType                       RestartMenu;                                       // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PointTag;                                          // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TextData;                                          // 0x0010(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         LostGoldRate;                                      // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGRestartListData) == 0x000008, "Wrong alignment on FJackUMGRestartListData");
static_assert(sizeof(FJackUMGRestartListData) == 0x000030, "Wrong size on FJackUMGRestartListData");
static_assert(offsetof(FJackUMGRestartListData, bIsOnData) == 0x000000, "Member 'FJackUMGRestartListData::bIsOnData' has a wrong offset!");
static_assert(offsetof(FJackUMGRestartListData, RestartMenu) == 0x000001, "Member 'FJackUMGRestartListData::RestartMenu' has a wrong offset!");
static_assert(offsetof(FJackUMGRestartListData, PointTag) == 0x000008, "Member 'FJackUMGRestartListData::PointTag' has a wrong offset!");
static_assert(offsetof(FJackUMGRestartListData, TextData) == 0x000010, "Member 'FJackUMGRestartListData::TextData' has a wrong offset!");
static_assert(offsetof(FJackUMGRestartListData, LostGoldRate) == 0x000028, "Member 'FJackUMGRestartListData::LostGoldRate' has a wrong offset!");

// ScriptStruct JackGame.JackDecodeInfo
// 0x0068 (0x0068 - 0x0000)
struct FJackDecodeInfo final
{
public:
	EJackFukkatunojumonPlatform                   PlatformType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackFukkatunojumonSpell                      SpellType;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackFukkatunojumon                           JumonType;                                         // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FukkatunojumonScenarioProgress;                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FukkatunojumonReturnScenarioProgress;              // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScenarioProgress;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnScenarioProgress;                            // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RestartPointNumber;                                // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MapStart;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FukkatunojumonLevel;                               // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FukkatunojumonGold;                                // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp;                                               // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold;                                              // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemSet;                                           // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ItemIds;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bNewGame;                                          // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpecialGame;                                      // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStoreGame;                                        // 0x0062(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewGamePlus;                                      // 0x0063(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayGo;                                           // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalidSpell;                                     // 0x0065(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDecodeInfo) == 0x000008, "Wrong alignment on FJackDecodeInfo");
static_assert(sizeof(FJackDecodeInfo) == 0x000068, "Wrong size on FJackDecodeInfo");
static_assert(offsetof(FJackDecodeInfo, PlatformType) == 0x000000, "Member 'FJackDecodeInfo::PlatformType' has a wrong offset!");
static_assert(offsetof(FJackDecodeInfo, SpellType) == 0x000001, "Member 'FJackDecodeInfo::SpellType' has a wrong offset!");
static_assert(offsetof(FJackDecodeInfo, JumonType) == 0x000002, "Member 'FJackDecodeInfo::JumonType' has a wrong offset!");
static_assert(offsetof(FJackDecodeInfo, PlayerName) == 0x000008, "Member 'FJackDecodeInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FJackDecodeInfo, FukkatunojumonScenarioProgress) == 0x000018, "Member 'FJackDecodeInfo::FukkatunojumonScenarioProgress' has a wrong offset!");
static_assert(offsetof(FJackDecodeInfo, FukkatunojumonReturnScenarioProgress) == 0x00001C, "Member 'FJackDecodeInfo::FukkatunojumonReturnScenarioProgress' has a wrong offset!");
static_assert(offsetof(FJackDecodeInfo, ScenarioProgress) == 0x000020, "Member 'FJackDecodeInfo::ScenarioProgress' has a wrong offset!");
static_assert(offsetof(FJackDecodeInfo, ReturnScenarioProgress) == 0x000024, "Member 'FJackDecodeInfo::ReturnScenarioProgress' has a wrong offset!");
static_assert(offsetof(FJackDecodeInfo, RestartPointNumber) == 0x000028, "Member 'FJackDecodeInfo::RestartPointNumber' has a wrong offset!");
static_assert(offsetof(FJackDecodeInfo, MapStart) == 0x000030, "Member 'FJackDecodeInfo::MapStart' has a wrong offset!");
static_assert(offsetof(FJackDecodeInfo, FukkatunojumonLevel) == 0x000038, "Member 'FJackDecodeInfo::FukkatunojumonLevel' has a wrong offset!");
static_assert(offsetof(FJackDecodeInfo, FukkatunojumonGold) == 0x00003C, "Member 'FJackDecodeInfo::FukkatunojumonGold' has a wrong offset!");
static_assert(offsetof(FJackDecodeInfo, Exp) == 0x000040, "Member 'FJackDecodeInfo::Exp' has a wrong offset!");
static_assert(offsetof(FJackDecodeInfo, Gold) == 0x000044, "Member 'FJackDecodeInfo::Gold' has a wrong offset!");
static_assert(offsetof(FJackDecodeInfo, ItemSet) == 0x000048, "Member 'FJackDecodeInfo::ItemSet' has a wrong offset!");
static_assert(offsetof(FJackDecodeInfo, ItemIds) == 0x000050, "Member 'FJackDecodeInfo::ItemIds' has a wrong offset!");
static_assert(offsetof(FJackDecodeInfo, bNewGame) == 0x000060, "Member 'FJackDecodeInfo::bNewGame' has a wrong offset!");
static_assert(offsetof(FJackDecodeInfo, bSpecialGame) == 0x000061, "Member 'FJackDecodeInfo::bSpecialGame' has a wrong offset!");
static_assert(offsetof(FJackDecodeInfo, bStoreGame) == 0x000062, "Member 'FJackDecodeInfo::bStoreGame' has a wrong offset!");
static_assert(offsetof(FJackDecodeInfo, bNewGamePlus) == 0x000063, "Member 'FJackDecodeInfo::bNewGamePlus' has a wrong offset!");
static_assert(offsetof(FJackDecodeInfo, bPlayGo) == 0x000064, "Member 'FJackDecodeInfo::bPlayGo' has a wrong offset!");
static_assert(offsetof(FJackDecodeInfo, bInvalidSpell) == 0x000065, "Member 'FJackDecodeInfo::bInvalidSpell' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableBank
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableBank final : public FTableRowBase
{
public:
	class FString                                 TalkTypeID;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableBank) == 0x000008, "Wrong alignment on FJackDataTableBank");
static_assert(sizeof(FJackDataTableBank) == 0x000018, "Wrong size on FJackDataTableBank");
static_assert(offsetof(FJackDataTableBank, TalkTypeID) == 0x000008, "Member 'FJackDataTableBank::TalkTypeID' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Sim_DancerSkirt_up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_DancerSkirt_up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_DancerSkirt_up) == 0x000008, "Wrong alignment on FJackLDT_Sim_DancerSkirt_up");
static_assert(sizeof(FJackLDT_Sim_DancerSkirt_up) == 0x000010, "Wrong size on FJackLDT_Sim_DancerSkirt_up");

// ScriptStruct JackGame.JackActiveTokugiSpecialConditionSetting
// 0x0020 (0x0020 - 0x0000)
struct FJackActiveTokugiSpecialConditionSetting final
{
public:
	class FName                                   ActiveTokugiID;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           MustEquippedItemID;                                // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   MustPossessionItemID;                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackActiveTokugiSpecialConditionSetting) == 0x000008, "Wrong alignment on FJackActiveTokugiSpecialConditionSetting");
static_assert(sizeof(FJackActiveTokugiSpecialConditionSetting) == 0x000020, "Wrong size on FJackActiveTokugiSpecialConditionSetting");
static_assert(offsetof(FJackActiveTokugiSpecialConditionSetting, ActiveTokugiID) == 0x000000, "Member 'FJackActiveTokugiSpecialConditionSetting::ActiveTokugiID' has a wrong offset!");
static_assert(offsetof(FJackActiveTokugiSpecialConditionSetting, MustEquippedItemID) == 0x000008, "Member 'FJackActiveTokugiSpecialConditionSetting::MustEquippedItemID' has a wrong offset!");
static_assert(offsetof(FJackActiveTokugiSpecialConditionSetting, MustPossessionItemID) == 0x000018, "Member 'FJackActiveTokugiSpecialConditionSetting::MustPossessionItemID' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotSimulation
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMeosiSlotSimulation final : public FTableRowBase
{
public:
	float                                         WinningProbability;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExactlyPressProbability;                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotSimulation) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotSimulation");
static_assert(sizeof(FJackDataTableMeosiSlotSimulation) == 0x000010, "Wrong size on FJackDataTableMeosiSlotSimulation");
static_assert(offsetof(FJackDataTableMeosiSlotSimulation, WinningProbability) == 0x000008, "Member 'FJackDataTableMeosiSlotSimulation::WinningProbability' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotSimulation, ExactlyPressProbability) == 0x00000C, "Member 'FJackDataTableMeosiSlotSimulation::ExactlyPressProbability' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_F08
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_F08 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_F08) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_F08");
static_assert(sizeof(FJackLDT_MonsterDeploy_F08) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_F08");

// ScriptStruct JackGame.JackDataTableChurch
// 0x0028 (0x0030 - 0x0008)
struct FJackDataTableChurch final : public FTableRowBase
{
public:
	EJackChurch                                   ChurchType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TalkTypeID;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackChurchFukkatunojumon                     FukkatunojumonType;                                // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackChurchFukkatunojumon                     TenseiType;                                        // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RestartID;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableChurch) == 0x000008, "Wrong alignment on FJackDataTableChurch");
static_assert(sizeof(FJackDataTableChurch) == 0x000030, "Wrong size on FJackDataTableChurch");
static_assert(offsetof(FJackDataTableChurch, ChurchType) == 0x000008, "Member 'FJackDataTableChurch::ChurchType' has a wrong offset!");
static_assert(offsetof(FJackDataTableChurch, TalkTypeID) == 0x000010, "Member 'FJackDataTableChurch::TalkTypeID' has a wrong offset!");
static_assert(offsetof(FJackDataTableChurch, FukkatunojumonType) == 0x000020, "Member 'FJackDataTableChurch::FukkatunojumonType' has a wrong offset!");
static_assert(offsetof(FJackDataTableChurch, TenseiType) == 0x000021, "Member 'FJackDataTableChurch::TenseiType' has a wrong offset!");
static_assert(offsetof(FJackDataTableChurch, RestartID) == 0x000028, "Member 'FJackDataTableChurch::RestartID' has a wrong offset!");

// ScriptStruct JackGame.JackActionCompactMessageInfo
// 0x0050 (0x0050 - 0x0000)
struct FJackActionCompactMessageInfo final
{
public:
	class FString                                 TextID;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GoukeiCompactMessageID;                            // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeikinCompactMessageID;                            // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GoukeiEnemyCompactMessageID;                       // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeikinEnemyCompactMessageID;                       // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackActionCompactMessageInfo) == 0x000008, "Wrong alignment on FJackActionCompactMessageInfo");
static_assert(sizeof(FJackActionCompactMessageInfo) == 0x000050, "Wrong size on FJackActionCompactMessageInfo");
static_assert(offsetof(FJackActionCompactMessageInfo, TextID) == 0x000000, "Member 'FJackActionCompactMessageInfo::TextID' has a wrong offset!");
static_assert(offsetof(FJackActionCompactMessageInfo, GoukeiCompactMessageID) == 0x000010, "Member 'FJackActionCompactMessageInfo::GoukeiCompactMessageID' has a wrong offset!");
static_assert(offsetof(FJackActionCompactMessageInfo, HeikinCompactMessageID) == 0x000020, "Member 'FJackActionCompactMessageInfo::HeikinCompactMessageID' has a wrong offset!");
static_assert(offsetof(FJackActionCompactMessageInfo, GoukeiEnemyCompactMessageID) == 0x000030, "Member 'FJackActionCompactMessageInfo::GoukeiEnemyCompactMessageID' has a wrong offset!");
static_assert(offsetof(FJackActionCompactMessageInfo, HeikinEnemyCompactMessageID) == 0x000040, "Member 'FJackActionCompactMessageInfo::HeikinEnemyCompactMessageID' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_PartyTalkData_A070
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_A070 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_A070) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_A070");
static_assert(sizeof(FJackLDT_PartyTalkData_A070) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_A070");

// ScriptStruct JackGame.JackDataTableShop
// 0x00F0 (0x00F8 - 0x0008)
struct FJackDataTableShop final : public FTableRowBase
{
public:
	class FName                                   MapId;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShopName;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackShop                                     ShopType;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TalkTypeID;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SaleRate;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScenarioSequenceNo;                                // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_001;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_002;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_003;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_004;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_005;                                        // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_006;                                        // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_007;                                        // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_008;                                        // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_009;                                        // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_010;                                        // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_011;                                        // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_012;                                        // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_013;                                        // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_014;                                        // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_015;                                        // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_016;                                        // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_017;                                        // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_018;                                        // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_019;                                        // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_020;                                        // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_021;                                        // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_022;                                        // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_023;                                        // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_024;                                        // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableShop) == 0x000008, "Wrong alignment on FJackDataTableShop");
static_assert(sizeof(FJackDataTableShop) == 0x0000F8, "Wrong size on FJackDataTableShop");
static_assert(offsetof(FJackDataTableShop, MapId) == 0x000008, "Member 'FJackDataTableShop::MapId' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ShopName) == 0x000010, "Member 'FJackDataTableShop::ShopName' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ShopType) == 0x000018, "Member 'FJackDataTableShop::ShopType' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, TalkTypeID) == 0x000020, "Member 'FJackDataTableShop::TalkTypeID' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, SaleRate) == 0x000030, "Member 'FJackDataTableShop::SaleRate' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ScenarioSequenceNo) == 0x000034, "Member 'FJackDataTableShop::ScenarioSequenceNo' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ItemID_001) == 0x000038, "Member 'FJackDataTableShop::ItemID_001' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ItemID_002) == 0x000040, "Member 'FJackDataTableShop::ItemID_002' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ItemID_003) == 0x000048, "Member 'FJackDataTableShop::ItemID_003' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ItemID_004) == 0x000050, "Member 'FJackDataTableShop::ItemID_004' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ItemID_005) == 0x000058, "Member 'FJackDataTableShop::ItemID_005' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ItemID_006) == 0x000060, "Member 'FJackDataTableShop::ItemID_006' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ItemID_007) == 0x000068, "Member 'FJackDataTableShop::ItemID_007' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ItemID_008) == 0x000070, "Member 'FJackDataTableShop::ItemID_008' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ItemID_009) == 0x000078, "Member 'FJackDataTableShop::ItemID_009' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ItemID_010) == 0x000080, "Member 'FJackDataTableShop::ItemID_010' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ItemID_011) == 0x000088, "Member 'FJackDataTableShop::ItemID_011' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ItemID_012) == 0x000090, "Member 'FJackDataTableShop::ItemID_012' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ItemID_013) == 0x000098, "Member 'FJackDataTableShop::ItemID_013' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ItemID_014) == 0x0000A0, "Member 'FJackDataTableShop::ItemID_014' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ItemID_015) == 0x0000A8, "Member 'FJackDataTableShop::ItemID_015' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ItemID_016) == 0x0000B0, "Member 'FJackDataTableShop::ItemID_016' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ItemID_017) == 0x0000B8, "Member 'FJackDataTableShop::ItemID_017' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ItemID_018) == 0x0000C0, "Member 'FJackDataTableShop::ItemID_018' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ItemID_019) == 0x0000C8, "Member 'FJackDataTableShop::ItemID_019' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ItemID_020) == 0x0000D0, "Member 'FJackDataTableShop::ItemID_020' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ItemID_021) == 0x0000D8, "Member 'FJackDataTableShop::ItemID_021' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ItemID_022) == 0x0000E0, "Member 'FJackDataTableShop::ItemID_022' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ItemID_023) == 0x0000E8, "Member 'FJackDataTableShop::ItemID_023' has a wrong offset!");
static_assert(offsetof(FJackDataTableShop, ItemID_024) == 0x0000F0, "Member 'FJackDataTableShop::ItemID_024' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableInn
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableInn final : public FTableRowBase
{
public:
	class FString                                 TalkTypeID;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BasePrice;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableInn) == 0x000008, "Wrong alignment on FJackDataTableInn");
static_assert(sizeof(FJackDataTableInn) == 0x000020, "Wrong size on FJackDataTableInn");
static_assert(offsetof(FJackDataTableInn, TalkTypeID) == 0x000008, "Member 'FJackDataTableInn::TalkTypeID' has a wrong offset!");
static_assert(offsetof(FJackDataTableInn, BasePrice) == 0x000018, "Member 'FJackDataTableInn::BasePrice' has a wrong offset!");

// ScriptStruct JackGame.JackRouletteSegmentResult
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FJackRouletteSegmentResult final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackRouletteSegmentResult) == 0x000004, "Wrong alignment on FJackRouletteSegmentResult");
static_assert(sizeof(FJackRouletteSegmentResult) == 0x00000C, "Wrong size on FJackRouletteSegmentResult");

// ScriptStruct JackGame.JackUMGBalloonInfo
// 0x0068 (0x0068 - 0x0000)
struct FJackUMGBalloonInfo final
{
public:
	int32                                         Digit;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Num;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Wpos;                                              // 0x0018(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Lpos;                                              // 0x0024(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LposOff;                                           // 0x002C(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DigitOffset;                                       // 0x0034(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DigitScale;                                        // 0x003C(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPopupBalloon                             Type;                                              // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x23];                                      // 0x0045(0x0023)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGBalloonInfo) == 0x000008, "Wrong alignment on FJackUMGBalloonInfo");
static_assert(sizeof(FJackUMGBalloonInfo) == 0x000068, "Wrong size on FJackUMGBalloonInfo");
static_assert(offsetof(FJackUMGBalloonInfo, Digit) == 0x000000, "Member 'FJackUMGBalloonInfo::Digit' has a wrong offset!");
static_assert(offsetof(FJackUMGBalloonInfo, Num) == 0x000008, "Member 'FJackUMGBalloonInfo::Num' has a wrong offset!");
static_assert(offsetof(FJackUMGBalloonInfo, Wpos) == 0x000018, "Member 'FJackUMGBalloonInfo::Wpos' has a wrong offset!");
static_assert(offsetof(FJackUMGBalloonInfo, Lpos) == 0x000024, "Member 'FJackUMGBalloonInfo::Lpos' has a wrong offset!");
static_assert(offsetof(FJackUMGBalloonInfo, LposOff) == 0x00002C, "Member 'FJackUMGBalloonInfo::LposOff' has a wrong offset!");
static_assert(offsetof(FJackUMGBalloonInfo, DigitOffset) == 0x000034, "Member 'FJackUMGBalloonInfo::DigitOffset' has a wrong offset!");
static_assert(offsetof(FJackUMGBalloonInfo, DigitScale) == 0x00003C, "Member 'FJackUMGBalloonInfo::DigitScale' has a wrong offset!");
static_assert(offsetof(FJackUMGBalloonInfo, Type) == 0x000044, "Member 'FJackUMGBalloonInfo::Type' has a wrong offset!");

// ScriptStruct JackGame.JackSpectacularShowMonsterData
// 0x0028 (0x0028 - 0x0000)
struct FJackSpectacularShowMonsterData final
{
public:
	int32                                         MaxLevel;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SuccessMonstersID;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           FailureMonstersID;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackSpectacularShowMonsterData) == 0x000008, "Wrong alignment on FJackSpectacularShowMonsterData");
static_assert(sizeof(FJackSpectacularShowMonsterData) == 0x000028, "Wrong size on FJackSpectacularShowMonsterData");
static_assert(offsetof(FJackSpectacularShowMonsterData, MaxLevel) == 0x000000, "Member 'FJackSpectacularShowMonsterData::MaxLevel' has a wrong offset!");
static_assert(offsetof(FJackSpectacularShowMonsterData, SuccessMonstersID) == 0x000008, "Member 'FJackSpectacularShowMonsterData::SuccessMonstersID' has a wrong offset!");
static_assert(offsetof(FJackSpectacularShowMonsterData, FailureMonstersID) == 0x000018, "Member 'FJackSpectacularShowMonsterData::FailureMonstersID' has a wrong offset!");

// ScriptStruct JackGame.JackSpectacularShowData
// 0x0020 (0x0020 - 0x0000)
struct FJackSpectacularShowData final
{
public:
	class FName                                   ScenarioFlagStart;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScenarioFlagEnd;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJackSpectacularShowMonsterData> MonsterData;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackSpectacularShowData) == 0x000008, "Wrong alignment on FJackSpectacularShowData");
static_assert(sizeof(FJackSpectacularShowData) == 0x000020, "Wrong size on FJackSpectacularShowData");
static_assert(offsetof(FJackSpectacularShowData, ScenarioFlagStart) == 0x000000, "Member 'FJackSpectacularShowData::ScenarioFlagStart' has a wrong offset!");
static_assert(offsetof(FJackSpectacularShowData, ScenarioFlagEnd) == 0x000008, "Member 'FJackSpectacularShowData::ScenarioFlagEnd' has a wrong offset!");
static_assert(offsetof(FJackSpectacularShowData, MonsterData) == 0x000010, "Member 'FJackSpectacularShowData::MonsterData' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_Skirt_SBSkirt2_Lerp2BonesAndClamp
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_Skirt_SBSkirt2_Lerp2BonesAndClamp final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_Skirt_SBSkirt2_Lerp2BonesAndClamp) == 0x000008, "Wrong alignment on FJackLDT_RtEx_Skirt_SBSkirt2_Lerp2BonesAndClamp");
static_assert(sizeof(FJackLDT_RtEx_Skirt_SBSkirt2_Lerp2BonesAndClamp) == 0x000010, "Wrong size on FJackLDT_RtEx_Skirt_SBSkirt2_Lerp2BonesAndClamp");

// ScriptStruct JackGame.JackDataTableFukidasi
// 0x0008 (0x0038 - 0x0030)
struct FJackDataTableFukidasi final : public FJackDataTableText
{
public:
	EJackFukidasiType                             FukidasiType;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackFukidasiDuration                         FukidasiDuration;                                  // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableFukidasi) == 0x000008, "Wrong alignment on FJackDataTableFukidasi");
static_assert(sizeof(FJackDataTableFukidasi) == 0x000038, "Wrong size on FJackDataTableFukidasi");
static_assert(offsetof(FJackDataTableFukidasi, FukidasiType) == 0x000030, "Member 'FJackDataTableFukidasi::FukidasiType' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukidasi, FukidasiDuration) == 0x000031, "Member 'FJackDataTableFukidasi::FukidasiDuration' has a wrong offset!");

// ScriptStruct JackGame.JackUMGItemContainer
// 0x0050 (0x0050 - 0x0000)
struct FJackUMGItemContainer final
{
public:
	EJackUMGItemContainerType                     Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Tag;                                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UMaterial*                              Material;                                          // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Object;                                            // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisible;                                         // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGItemContainer) == 0x000008, "Wrong alignment on FJackUMGItemContainer");
static_assert(sizeof(FJackUMGItemContainer) == 0x000050, "Wrong size on FJackUMGItemContainer");
static_assert(offsetof(FJackUMGItemContainer, Type) == 0x000000, "Member 'FJackUMGItemContainer::Type' has a wrong offset!");
static_assert(offsetof(FJackUMGItemContainer, Tag) == 0x000008, "Member 'FJackUMGItemContainer::Tag' has a wrong offset!");
static_assert(offsetof(FJackUMGItemContainer, Value) == 0x000010, "Member 'FJackUMGItemContainer::Value' has a wrong offset!");
static_assert(offsetof(FJackUMGItemContainer, Text) == 0x000018, "Member 'FJackUMGItemContainer::Text' has a wrong offset!");
static_assert(offsetof(FJackUMGItemContainer, Material) == 0x000030, "Member 'FJackUMGItemContainer::Material' has a wrong offset!");
static_assert(offsetof(FJackUMGItemContainer, Texture) == 0x000038, "Member 'FJackUMGItemContainer::Texture' has a wrong offset!");
static_assert(offsetof(FJackUMGItemContainer, Object) == 0x000040, "Member 'FJackUMGItemContainer::Object' has a wrong offset!");
static_assert(offsetof(FJackUMGItemContainer, IsVisible) == 0x000048, "Member 'FJackUMGItemContainer::IsVisible' has a wrong offset!");

// ScriptStruct JackGame.JackUMGFontColor
// 0x0024 (0x0024 - 0x0000)
struct FJackUMGFontColor final
{
public:
	struct FLinearColor                           Base;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Border;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BorderWidth;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGFontColor) == 0x000004, "Wrong alignment on FJackUMGFontColor");
static_assert(sizeof(FJackUMGFontColor) == 0x000024, "Wrong size on FJackUMGFontColor");
static_assert(offsetof(FJackUMGFontColor, Base) == 0x000000, "Member 'FJackUMGFontColor::Base' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColor, Border) == 0x000010, "Member 'FJackUMGFontColor::Border' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColor, BorderWidth) == 0x000020, "Member 'FJackUMGFontColor::BorderWidth' has a wrong offset!");

// ScriptStruct JackGame.JackUIKeyRepeatSetting
// 0x0020 (0x0020 - 0x0000)
struct FJackUIKeyRepeatSetting final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalTime;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EJackKeys>                             EnableRepeatKeys;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUIKeyRepeatSetting) == 0x000008, "Wrong alignment on FJackUIKeyRepeatSetting");
static_assert(sizeof(FJackUIKeyRepeatSetting) == 0x000020, "Wrong size on FJackUIKeyRepeatSetting");
static_assert(offsetof(FJackUIKeyRepeatSetting, StartTime) == 0x000000, "Member 'FJackUIKeyRepeatSetting::StartTime' has a wrong offset!");
static_assert(offsetof(FJackUIKeyRepeatSetting, IntervalTime) == 0x000004, "Member 'FJackUIKeyRepeatSetting::IntervalTime' has a wrong offset!");
static_assert(offsetof(FJackUIKeyRepeatSetting, EnableRepeatKeys) == 0x000008, "Member 'FJackUIKeyRepeatSetting::EnableRepeatKeys' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableRecipeBook
// 0x0050 (0x0058 - 0x0008)
struct FJackDataTableRecipeBook final : public FTableRowBase
{
public:
	class FName                                   RecipeId_01;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RecipeId_02;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RecipeId_03;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RecipeId_04;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RecipeId_05;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RecipeId_06;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RecipeId_07;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RecipeId_08;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RecipeId_09;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RecipeId_10;                                       // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableRecipeBook) == 0x000008, "Wrong alignment on FJackDataTableRecipeBook");
static_assert(sizeof(FJackDataTableRecipeBook) == 0x000058, "Wrong size on FJackDataTableRecipeBook");
static_assert(offsetof(FJackDataTableRecipeBook, RecipeId_01) == 0x000008, "Member 'FJackDataTableRecipeBook::RecipeId_01' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipeBook, RecipeId_02) == 0x000010, "Member 'FJackDataTableRecipeBook::RecipeId_02' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipeBook, RecipeId_03) == 0x000018, "Member 'FJackDataTableRecipeBook::RecipeId_03' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipeBook, RecipeId_04) == 0x000020, "Member 'FJackDataTableRecipeBook::RecipeId_04' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipeBook, RecipeId_05) == 0x000028, "Member 'FJackDataTableRecipeBook::RecipeId_05' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipeBook, RecipeId_06) == 0x000030, "Member 'FJackDataTableRecipeBook::RecipeId_06' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipeBook, RecipeId_07) == 0x000038, "Member 'FJackDataTableRecipeBook::RecipeId_07' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipeBook, RecipeId_08) == 0x000040, "Member 'FJackDataTableRecipeBook::RecipeId_08' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipeBook, RecipeId_09) == 0x000048, "Member 'FJackDataTableRecipeBook::RecipeId_09' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipeBook, RecipeId_10) == 0x000050, "Member 'FJackDataTableRecipeBook::RecipeId_10' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_FBSkirtA1_P006_low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FBSkirtA1_P006_low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FBSkirtA1_P006_low) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FBSkirtA1_P006_low");
static_assert(sizeof(FJackLDT_RtEx_FBSkirtA1_P006_low) == 0x000010, "Wrong size on FJackLDT_RtEx_FBSkirtA1_P006_low");

// ScriptStruct JackGame.JackDataTableMiniGameJackPotPayoutData
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMiniGameJackPotPayoutData final : public FTableRowBase
{
public:
	int32                                         MinimumCoin;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCoin;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMiniGameJackPotPayoutData) == 0x000008, "Wrong alignment on FJackDataTableMiniGameJackPotPayoutData");
static_assert(sizeof(FJackDataTableMiniGameJackPotPayoutData) == 0x000010, "Wrong size on FJackDataTableMiniGameJackPotPayoutData");
static_assert(offsetof(FJackDataTableMiniGameJackPotPayoutData, MinimumCoin) == 0x000008, "Member 'FJackDataTableMiniGameJackPotPayoutData::MinimumCoin' has a wrong offset!");
static_assert(offsetof(FJackDataTableMiniGameJackPotPayoutData, MaxCoin) == 0x00000C, "Member 'FJackDataTableMiniGameJackPotPayoutData::MaxCoin' has a wrong offset!");

// ScriptStruct JackGame.JackActionNakamaYobiInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackActionNakamaYobiInfo final
{
public:
	class FName                                   ZouenMonsterID;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZouenNumMin;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZouenNumMax;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZouenNumLimit;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackActionNakamaYobiInfo) == 0x000008, "Wrong alignment on FJackActionNakamaYobiInfo");
static_assert(sizeof(FJackActionNakamaYobiInfo) == 0x000018, "Wrong size on FJackActionNakamaYobiInfo");
static_assert(offsetof(FJackActionNakamaYobiInfo, ZouenMonsterID) == 0x000000, "Member 'FJackActionNakamaYobiInfo::ZouenMonsterID' has a wrong offset!");
static_assert(offsetof(FJackActionNakamaYobiInfo, ZouenNumMin) == 0x000008, "Member 'FJackActionNakamaYobiInfo::ZouenNumMin' has a wrong offset!");
static_assert(offsetof(FJackActionNakamaYobiInfo, ZouenNumMax) == 0x00000C, "Member 'FJackActionNakamaYobiInfo::ZouenNumMax' has a wrong offset!");
static_assert(offsetof(FJackActionNakamaYobiInfo, ZouenNumLimit) == 0x000010, "Member 'FJackActionNakamaYobiInfo::ZouenNumLimit' has a wrong offset!");

// ScriptStruct JackGame.JackDataTablePokerCardTexture
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTablePokerCardTexture final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture>                Texture1;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTablePokerCardTexture) == 0x000008, "Wrong alignment on FJackDataTablePokerCardTexture");
static_assert(sizeof(FJackDataTablePokerCardTexture) == 0x000020, "Wrong size on FJackDataTablePokerCardTexture");
static_assert(offsetof(FJackDataTablePokerCardTexture, Texture1) == 0x000008, "Member 'FJackDataTablePokerCardTexture::Texture1' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_BodyExtra_MaxOrMinRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_BodyExtra_MaxOrMinRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_BodyExtra_MaxOrMinRot) == 0x000008, "Wrong alignment on FJackLDT_BodyExtra_MaxOrMinRot");
static_assert(sizeof(FJackLDT_BodyExtra_MaxOrMinRot) == 0x000010, "Wrong size on FJackLDT_BodyExtra_MaxOrMinRot");

// ScriptStruct JackGame.JackUMGLoadMenuAssetsInfo
// 0x0010 (0x0010 - 0x0000)
struct FJackUMGLoadMenuAssetsInfo final
{
public:
	EJackUMGMenuId                                MenuId;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackStreamObjectsHolder*               ObjectsHolder;                                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGLoadMenuAssetsInfo) == 0x000008, "Wrong alignment on FJackUMGLoadMenuAssetsInfo");
static_assert(sizeof(FJackUMGLoadMenuAssetsInfo) == 0x000010, "Wrong size on FJackUMGLoadMenuAssetsInfo");
static_assert(offsetof(FJackUMGLoadMenuAssetsInfo, MenuId) == 0x000000, "Member 'FJackUMGLoadMenuAssetsInfo::MenuId' has a wrong offset!");
static_assert(offsetof(FJackUMGLoadMenuAssetsInfo, ObjectsHolder) == 0x000008, "Member 'FJackUMGLoadMenuAssetsInfo::ObjectsHolder' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_AnimDynamics_M569
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AnimDynamics_M569 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AnimDynamics_M569) == 0x000008, "Wrong alignment on FJackLDT_AnimDynamics_M569");
static_assert(sizeof(FJackLDT_AnimDynamics_M569) == 0x000010, "Wrong size on FJackLDT_AnimDynamics_M569");

// ScriptStruct JackGame.JackZukanMotionWeaponAnimData
// 0x0030 (0x0030 - 0x0000)
struct FJackZukanMotionWeaponAnimData final
{
public:
	EJackEquippedWeaponStyle                      WeaponStyle;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackZukanMotionEquippedShieldFlag            EquippedShieldFlag;                                // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimSequence>           AnimSequenceAsset;                                 // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RightWeaponAnimMontageKey;                         // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LeftWeaponAnimMontageKey;                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackZukanMotionWeaponAnimData) == 0x000008, "Wrong alignment on FJackZukanMotionWeaponAnimData");
static_assert(sizeof(FJackZukanMotionWeaponAnimData) == 0x000030, "Wrong size on FJackZukanMotionWeaponAnimData");
static_assert(offsetof(FJackZukanMotionWeaponAnimData, WeaponStyle) == 0x000000, "Member 'FJackZukanMotionWeaponAnimData::WeaponStyle' has a wrong offset!");
static_assert(offsetof(FJackZukanMotionWeaponAnimData, EquippedShieldFlag) == 0x000001, "Member 'FJackZukanMotionWeaponAnimData::EquippedShieldFlag' has a wrong offset!");
static_assert(offsetof(FJackZukanMotionWeaponAnimData, AnimSequenceAsset) == 0x000008, "Member 'FJackZukanMotionWeaponAnimData::AnimSequenceAsset' has a wrong offset!");
static_assert(offsetof(FJackZukanMotionWeaponAnimData, RightWeaponAnimMontageKey) == 0x000020, "Member 'FJackZukanMotionWeaponAnimData::RightWeaponAnimMontageKey' has a wrong offset!");
static_assert(offsetof(FJackZukanMotionWeaponAnimData, LeftWeaponAnimMontageKey) == 0x000028, "Member 'FJackZukanMotionWeaponAnimData::LeftWeaponAnimMontageKey' has a wrong offset!");

// ScriptStruct JackGame.JackUMGLoadedCache
// 0x0010 (0x0010 - 0x0000)
struct FJackUMGLoadedCache final
{
public:
	class UObject*                                ObjectRef;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        AssetRef;                                          // 0x0008(0x0008)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGLoadedCache) == 0x000008, "Wrong alignment on FJackUMGLoadedCache");
static_assert(sizeof(FJackUMGLoadedCache) == 0x000010, "Wrong size on FJackUMGLoadedCache");
static_assert(offsetof(FJackUMGLoadedCache, ObjectRef) == 0x000000, "Member 'FJackUMGLoadedCache::ObjectRef' has a wrong offset!");
static_assert(offsetof(FJackUMGLoadedCache, AssetRef) == 0x000008, "Member 'FJackUMGLoadedCache::AssetRef' has a wrong offset!");

// ScriptStruct JackGame.JackDataTablePlayerBattleAI
// 0x0038 (0x0040 - 0x0008)
struct FJackDataTablePlayerBattleAI final : public FTableRowBase
{
public:
	EJackPlayerAIFlowJudge                        FlowJudgeType;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FlowActionRate;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPlayerAIFlowControl                      FlowControlType;                                   // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPlayerAIActionControl                    ActionControlType;                                 // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SuccessNextFlowId;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FailNextFlowId;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EvaluateScoreCheckId;                              // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvaluateScore;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTablePlayerBattleAI) == 0x000008, "Wrong alignment on FJackDataTablePlayerBattleAI");
static_assert(sizeof(FJackDataTablePlayerBattleAI) == 0x000040, "Wrong size on FJackDataTablePlayerBattleAI");
static_assert(offsetof(FJackDataTablePlayerBattleAI, FlowJudgeType) == 0x000008, "Member 'FJackDataTablePlayerBattleAI::FlowJudgeType' has a wrong offset!");
static_assert(offsetof(FJackDataTablePlayerBattleAI, FlowActionRate) == 0x000010, "Member 'FJackDataTablePlayerBattleAI::FlowActionRate' has a wrong offset!");
static_assert(offsetof(FJackDataTablePlayerBattleAI, FlowControlType) == 0x000018, "Member 'FJackDataTablePlayerBattleAI::FlowControlType' has a wrong offset!");
static_assert(offsetof(FJackDataTablePlayerBattleAI, ActionControlType) == 0x000019, "Member 'FJackDataTablePlayerBattleAI::ActionControlType' has a wrong offset!");
static_assert(offsetof(FJackDataTablePlayerBattleAI, SuccessNextFlowId) == 0x000020, "Member 'FJackDataTablePlayerBattleAI::SuccessNextFlowId' has a wrong offset!");
static_assert(offsetof(FJackDataTablePlayerBattleAI, FailNextFlowId) == 0x000028, "Member 'FJackDataTablePlayerBattleAI::FailNextFlowId' has a wrong offset!");
static_assert(offsetof(FJackDataTablePlayerBattleAI, EvaluateScoreCheckId) == 0x000030, "Member 'FJackDataTablePlayerBattleAI::EvaluateScoreCheckId' has a wrong offset!");
static_assert(offsetof(FJackDataTablePlayerBattleAI, EvaluateScore) == 0x000038, "Member 'FJackDataTablePlayerBattleAI::EvaluateScore' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_AnimDynamics_M541
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AnimDynamics_M541 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AnimDynamics_M541) == 0x000008, "Wrong alignment on FJackLDT_AnimDynamics_M541");
static_assert(sizeof(FJackLDT_AnimDynamics_M541) == 0x000010, "Wrong size on FJackLDT_AnimDynamics_M541");

// ScriptStruct JackGame.JackUMGItemDataAllocator
// 0x0028 (0x0028 - 0x0000)
struct FJackUMGItemDataAllocator final
{
public:
	TArray<class UJackUMGItemData*>               Uses;                                              // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGItemDataAllocator) == 0x000008, "Wrong alignment on FJackUMGItemDataAllocator");
static_assert(sizeof(FJackUMGItemDataAllocator) == 0x000028, "Wrong size on FJackUMGItemDataAllocator");
static_assert(offsetof(FJackUMGItemDataAllocator, Uses) == 0x000000, "Member 'FJackUMGItemDataAllocator::Uses' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_ActionSecondCheck
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ActionSecondCheck final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ActionSecondCheck) == 0x000008, "Wrong alignment on FJackLDT_ActionSecondCheck");
static_assert(sizeof(FJackLDT_ActionSecondCheck) == 0x000010, "Wrong size on FJackLDT_ActionSecondCheck");

// ScriptStruct JackGame.JackSerifuWindowShakeWindowInfo
// 0x0010 (0x0010 - 0x0000)
struct FJackSerifuWindowShakeWindowInfo final
{
public:
	class UCurveVector*                           Curve;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackSerifuWindowShakeWindowInfo) == 0x000008, "Wrong alignment on FJackSerifuWindowShakeWindowInfo");
static_assert(sizeof(FJackSerifuWindowShakeWindowInfo) == 0x000010, "Wrong size on FJackSerifuWindowShakeWindowInfo");
static_assert(offsetof(FJackSerifuWindowShakeWindowInfo, Curve) == 0x000000, "Member 'FJackSerifuWindowShakeWindowInfo::Curve' has a wrong offset!");
static_assert(offsetof(FJackSerifuWindowShakeWindowInfo, Multiplier) == 0x000008, "Member 'FJackSerifuWindowShakeWindowInfo::Multiplier' has a wrong offset!");
static_assert(offsetof(FJackSerifuWindowShakeWindowInfo, Time) == 0x00000C, "Member 'FJackSerifuWindowShakeWindowInfo::Time' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Pose_NeckHoodA1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_NeckHoodA1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_NeckHoodA1) == 0x000008, "Wrong alignment on FJackLDT_Pose_NeckHoodA1");
static_assert(sizeof(FJackLDT_Pose_NeckHoodA1) == 0x000010, "Wrong size on FJackLDT_Pose_NeckHoodA1");

// ScriptStruct JackGame.JackLDT_TextPackBattle
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextPackBattle final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextPackBattle) == 0x000008, "Wrong alignment on FJackLDT_TextPackBattle");
static_assert(sizeof(FJackLDT_TextPackBattle) == 0x000010, "Wrong size on FJackLDT_TextPackBattle");

// ScriptStruct JackGame.JackDataTableMeosiSlotRareHandLottery
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMeosiSlotRareHandLottery final : public FTableRowBase
{
public:
	TArray<int32>                                 EventProbability;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotRareHandLottery) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotRareHandLottery");
static_assert(sizeof(FJackDataTableMeosiSlotRareHandLottery) == 0x000018, "Wrong size on FJackDataTableMeosiSlotRareHandLottery");
static_assert(offsetof(FJackDataTableMeosiSlotRareHandLottery, EventProbability) == 0x000008, "Member 'FJackDataTableMeosiSlotRareHandLottery::EventProbability' has a wrong offset!");

// ScriptStruct JackGame.JackSerifuWindowMoveTextLabelInfo
// 0x0010 (0x0010 - 0x0000)
struct FJackSerifuWindowMoveTextLabelInfo final
{
public:
	class UCurveFloat*                            Curve;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackSerifuWindowMoveTextLabelInfo) == 0x000008, "Wrong alignment on FJackSerifuWindowMoveTextLabelInfo");
static_assert(sizeof(FJackSerifuWindowMoveTextLabelInfo) == 0x000010, "Wrong size on FJackSerifuWindowMoveTextLabelInfo");
static_assert(offsetof(FJackSerifuWindowMoveTextLabelInfo, Curve) == 0x000000, "Member 'FJackSerifuWindowMoveTextLabelInfo::Curve' has a wrong offset!");
static_assert(offsetof(FJackSerifuWindowMoveTextLabelInfo, Time) == 0x000008, "Member 'FJackSerifuWindowMoveTextLabelInfo::Time' has a wrong offset!");

// ScriptStruct JackGame.JackVoiceDramaTagData
// 0x0030 (0x0030 - 0x0000)
struct FJackVoiceDramaTagData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ArgString;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<int32>                                 ArgInt;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x4];                                       // 0x0028(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsExecuted;                                       // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackVoiceDramaTagData) == 0x000008, "Wrong alignment on FJackVoiceDramaTagData");
static_assert(sizeof(FJackVoiceDramaTagData) == 0x000030, "Wrong size on FJackVoiceDramaTagData");
static_assert(offsetof(FJackVoiceDramaTagData, ArgString) == 0x000008, "Member 'FJackVoiceDramaTagData::ArgString' has a wrong offset!");
static_assert(offsetof(FJackVoiceDramaTagData, ArgInt) == 0x000018, "Member 'FJackVoiceDramaTagData::ArgInt' has a wrong offset!");
static_assert(offsetof(FJackVoiceDramaTagData, bIsExecuted) == 0x00002C, "Member 'FJackVoiceDramaTagData::bIsExecuted' has a wrong offset!");

// ScriptStruct JackGame.JackFusigiKaziTurnStartEffect
// 0x0003 (0x0003 - 0x0000)
struct FJackFusigiKaziTurnStartEffect final
{
public:
	uint8                                         Pad_0[0x3];                                        // 0x0000(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackFusigiKaziTurnStartEffect) == 0x000001, "Wrong alignment on FJackFusigiKaziTurnStartEffect");
static_assert(sizeof(FJackFusigiKaziTurnStartEffect) == 0x000003, "Wrong size on FJackFusigiKaziTurnStartEffect");

// ScriptStruct JackGame.JackDataTableMonsterDeploy
// 0x0220 (0x0228 - 0x0008)
struct FJackDataTableMonsterDeploy : public FTableRowBase
{
public:
	class FName                                   GeneratorId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MonsterID;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DeployedInstanceName;                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubstituteEventBattleID;                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultCount;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultDensity;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeSpan;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomDistanceMin;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomDistanceMax;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleNigeruConditionType                NigeruCondition;                                   // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRepop;                                            // 0x003D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RepopIntervalSeconds;                              // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSnapToGroundOnPop;                                // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDepopWhenBattleFinished;                          // 0x0045(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackVehicleModelId                           DropVehicleType;                                   // 0x0046(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47[0x1];                                       // 0x0047(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MovingBounds;                                      // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActiveTimeStart;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActiveTimeEnd;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterActiveWeather                     ActiveWeather1;                                    // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterActiveWeather                     ActiveWeather2;                                    // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterActiveScenario                    ActiveScenario;                                    // 0x005A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B[0x1];                                       // 0x005B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PartyMonsterTotalLimit;                            // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PartyMonsterId1;                                   // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyMonsterMin1;                                  // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyMonsterMax1;                                  // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartyMonsterLotteryRate1;                          // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PartyMonsterId2;                                   // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyMonsterMin2;                                  // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyMonsterMax2;                                  // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartyMonsterLotteryRate2;                          // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PartyMonsterId3;                                   // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyMonsterMin3;                                  // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyMonsterMax3;                                  // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartyMonsterLotteryRate3;                          // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PartyMonsterId4;                                   // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyMonsterMin4;                                  // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyMonsterMax4;                                  // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartyMonsterLotteryRate4;                          // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PartyMonsterId5;                                   // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyMonsterMin5;                                  // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyMonsterMax5;                                  // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartyMonsterLotteryRate5;                          // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PartyMonsterId6;                                   // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyMonsterMin6;                                  // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyMonsterMax6;                                  // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartyMonsterLotteryRate6;                          // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PartyMonsterId7;                                   // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyMonsterMin7;                                  // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyMonsterMax7;                                  // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartyMonsterLotteryRate7;                          // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PartyMonsterId8;                                   // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyMonsterMin8;                                  // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyMonsterMax8;                                  // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartyMonsterLotteryRate8;                          // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MetalEncountId;                                    // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpPartyRate;                                       // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SpPartyMonsterId1;                                 // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpPartyMonsterMin1;                                // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpPartyMonsterMax1;                                // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpPartyMonsterId2;                                 // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpPartyMonsterMin2;                                // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpPartyMonsterMax2;                                // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpPartyMonsterId3;                                 // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpPartyMonsterMin3;                                // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpPartyMonsterMax3;                                // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpPartyMonsterId4;                                 // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpPartyMonsterMin4;                                // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpPartyMonsterMax4;                                // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpPartyMonsterId5;                                 // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpPartyMonsterMin5;                                // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpPartyMonsterMax5;                                // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpPartyMonsterId6;                                 // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpPartyMonsterMin6;                                // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpPartyMonsterMax6;                                // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpPartyMonsterId7;                                 // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpPartyMonsterMin7;                                // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpPartyMonsterMax7;                                // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpPartyMonsterId8;                                 // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpPartyMonsterMin8;                                // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpPartyMonsterMax8;                                // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterPopCondition                      PopCondition;                                      // 0x01B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PopConditionMontageKey;                            // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterPatrolMode                        PatrolMode;                                        // 0x01C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1[0x7];                                      // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PatrolCourse;                                      // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterPatrolMovingMethod                PatrolMovingMethod;                                // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PatrolPointWaitTime;                               // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PatrolPointMontageKey;                             // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterDepopBehavior                     DepopBehavior;                                     // 0x01E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1[0x7];                                      // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DepopLocatorKeyName;                               // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterReaction                          ReactionForMonster;                                // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReactionTargetName;                                // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReactionMontageKey;                                // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReactionFrequency;                                 // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterFollowerFormation                 FollowerFormation;                                 // 0x020C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterFollowerReactionMode              FollowerReactionMode;                              // 0x020D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterApproachAction                    ApproachActionType;                                // 0x020E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20F[0x1];                                      // 0x020F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ApproachTargetName;                                // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ApproachActionMontageKey;                          // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ApproachActionFrequency;                           // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMonsterDeploy) == 0x000008, "Wrong alignment on FJackDataTableMonsterDeploy");
static_assert(sizeof(FJackDataTableMonsterDeploy) == 0x000228, "Wrong size on FJackDataTableMonsterDeploy");
static_assert(offsetof(FJackDataTableMonsterDeploy, GeneratorId) == 0x000008, "Member 'FJackDataTableMonsterDeploy::GeneratorId' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, MonsterID) == 0x000010, "Member 'FJackDataTableMonsterDeploy::MonsterID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, DeployedInstanceName) == 0x000018, "Member 'FJackDataTableMonsterDeploy::DeployedInstanceName' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SubstituteEventBattleID) == 0x000020, "Member 'FJackDataTableMonsterDeploy::SubstituteEventBattleID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, DefaultCount) == 0x000028, "Member 'FJackDataTableMonsterDeploy::DefaultCount' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, DefaultDensity) == 0x00002C, "Member 'FJackDataTableMonsterDeploy::DefaultDensity' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, LifeSpan) == 0x000030, "Member 'FJackDataTableMonsterDeploy::LifeSpan' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, RandomDistanceMin) == 0x000034, "Member 'FJackDataTableMonsterDeploy::RandomDistanceMin' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, RandomDistanceMax) == 0x000038, "Member 'FJackDataTableMonsterDeploy::RandomDistanceMax' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, NigeruCondition) == 0x00003C, "Member 'FJackDataTableMonsterDeploy::NigeruCondition' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, bRepop) == 0x00003D, "Member 'FJackDataTableMonsterDeploy::bRepop' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, RepopIntervalSeconds) == 0x000040, "Member 'FJackDataTableMonsterDeploy::RepopIntervalSeconds' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, bSnapToGroundOnPop) == 0x000044, "Member 'FJackDataTableMonsterDeploy::bSnapToGroundOnPop' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, bDepopWhenBattleFinished) == 0x000045, "Member 'FJackDataTableMonsterDeploy::bDepopWhenBattleFinished' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, DropVehicleType) == 0x000046, "Member 'FJackDataTableMonsterDeploy::DropVehicleType' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, MovingBounds) == 0x000048, "Member 'FJackDataTableMonsterDeploy::MovingBounds' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, ActiveTimeStart) == 0x000050, "Member 'FJackDataTableMonsterDeploy::ActiveTimeStart' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, ActiveTimeEnd) == 0x000054, "Member 'FJackDataTableMonsterDeploy::ActiveTimeEnd' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, ActiveWeather1) == 0x000058, "Member 'FJackDataTableMonsterDeploy::ActiveWeather1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, ActiveWeather2) == 0x000059, "Member 'FJackDataTableMonsterDeploy::ActiveWeather2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, ActiveScenario) == 0x00005A, "Member 'FJackDataTableMonsterDeploy::ActiveScenario' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterTotalLimit) == 0x00005C, "Member 'FJackDataTableMonsterDeploy::PartyMonsterTotalLimit' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterId1) == 0x000060, "Member 'FJackDataTableMonsterDeploy::PartyMonsterId1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterMin1) == 0x000068, "Member 'FJackDataTableMonsterDeploy::PartyMonsterMin1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterMax1) == 0x00006C, "Member 'FJackDataTableMonsterDeploy::PartyMonsterMax1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterLotteryRate1) == 0x000070, "Member 'FJackDataTableMonsterDeploy::PartyMonsterLotteryRate1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterId2) == 0x000078, "Member 'FJackDataTableMonsterDeploy::PartyMonsterId2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterMin2) == 0x000080, "Member 'FJackDataTableMonsterDeploy::PartyMonsterMin2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterMax2) == 0x000084, "Member 'FJackDataTableMonsterDeploy::PartyMonsterMax2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterLotteryRate2) == 0x000088, "Member 'FJackDataTableMonsterDeploy::PartyMonsterLotteryRate2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterId3) == 0x000090, "Member 'FJackDataTableMonsterDeploy::PartyMonsterId3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterMin3) == 0x000098, "Member 'FJackDataTableMonsterDeploy::PartyMonsterMin3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterMax3) == 0x00009C, "Member 'FJackDataTableMonsterDeploy::PartyMonsterMax3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterLotteryRate3) == 0x0000A0, "Member 'FJackDataTableMonsterDeploy::PartyMonsterLotteryRate3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterId4) == 0x0000A8, "Member 'FJackDataTableMonsterDeploy::PartyMonsterId4' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterMin4) == 0x0000B0, "Member 'FJackDataTableMonsterDeploy::PartyMonsterMin4' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterMax4) == 0x0000B4, "Member 'FJackDataTableMonsterDeploy::PartyMonsterMax4' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterLotteryRate4) == 0x0000B8, "Member 'FJackDataTableMonsterDeploy::PartyMonsterLotteryRate4' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterId5) == 0x0000C0, "Member 'FJackDataTableMonsterDeploy::PartyMonsterId5' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterMin5) == 0x0000C8, "Member 'FJackDataTableMonsterDeploy::PartyMonsterMin5' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterMax5) == 0x0000CC, "Member 'FJackDataTableMonsterDeploy::PartyMonsterMax5' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterLotteryRate5) == 0x0000D0, "Member 'FJackDataTableMonsterDeploy::PartyMonsterLotteryRate5' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterId6) == 0x0000D8, "Member 'FJackDataTableMonsterDeploy::PartyMonsterId6' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterMin6) == 0x0000E0, "Member 'FJackDataTableMonsterDeploy::PartyMonsterMin6' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterMax6) == 0x0000E4, "Member 'FJackDataTableMonsterDeploy::PartyMonsterMax6' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterLotteryRate6) == 0x0000E8, "Member 'FJackDataTableMonsterDeploy::PartyMonsterLotteryRate6' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterId7) == 0x0000F0, "Member 'FJackDataTableMonsterDeploy::PartyMonsterId7' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterMin7) == 0x0000F8, "Member 'FJackDataTableMonsterDeploy::PartyMonsterMin7' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterMax7) == 0x0000FC, "Member 'FJackDataTableMonsterDeploy::PartyMonsterMax7' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterLotteryRate7) == 0x000100, "Member 'FJackDataTableMonsterDeploy::PartyMonsterLotteryRate7' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterId8) == 0x000108, "Member 'FJackDataTableMonsterDeploy::PartyMonsterId8' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterMin8) == 0x000110, "Member 'FJackDataTableMonsterDeploy::PartyMonsterMin8' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterMax8) == 0x000114, "Member 'FJackDataTableMonsterDeploy::PartyMonsterMax8' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PartyMonsterLotteryRate8) == 0x000118, "Member 'FJackDataTableMonsterDeploy::PartyMonsterLotteryRate8' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, MetalEncountId) == 0x000120, "Member 'FJackDataTableMonsterDeploy::MetalEncountId' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyRate) == 0x000128, "Member 'FJackDataTableMonsterDeploy::SpPartyRate' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyMonsterId1) == 0x000130, "Member 'FJackDataTableMonsterDeploy::SpPartyMonsterId1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyMonsterMin1) == 0x000138, "Member 'FJackDataTableMonsterDeploy::SpPartyMonsterMin1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyMonsterMax1) == 0x00013C, "Member 'FJackDataTableMonsterDeploy::SpPartyMonsterMax1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyMonsterId2) == 0x000140, "Member 'FJackDataTableMonsterDeploy::SpPartyMonsterId2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyMonsterMin2) == 0x000148, "Member 'FJackDataTableMonsterDeploy::SpPartyMonsterMin2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyMonsterMax2) == 0x00014C, "Member 'FJackDataTableMonsterDeploy::SpPartyMonsterMax2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyMonsterId3) == 0x000150, "Member 'FJackDataTableMonsterDeploy::SpPartyMonsterId3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyMonsterMin3) == 0x000158, "Member 'FJackDataTableMonsterDeploy::SpPartyMonsterMin3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyMonsterMax3) == 0x00015C, "Member 'FJackDataTableMonsterDeploy::SpPartyMonsterMax3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyMonsterId4) == 0x000160, "Member 'FJackDataTableMonsterDeploy::SpPartyMonsterId4' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyMonsterMin4) == 0x000168, "Member 'FJackDataTableMonsterDeploy::SpPartyMonsterMin4' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyMonsterMax4) == 0x00016C, "Member 'FJackDataTableMonsterDeploy::SpPartyMonsterMax4' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyMonsterId5) == 0x000170, "Member 'FJackDataTableMonsterDeploy::SpPartyMonsterId5' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyMonsterMin5) == 0x000178, "Member 'FJackDataTableMonsterDeploy::SpPartyMonsterMin5' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyMonsterMax5) == 0x00017C, "Member 'FJackDataTableMonsterDeploy::SpPartyMonsterMax5' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyMonsterId6) == 0x000180, "Member 'FJackDataTableMonsterDeploy::SpPartyMonsterId6' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyMonsterMin6) == 0x000188, "Member 'FJackDataTableMonsterDeploy::SpPartyMonsterMin6' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyMonsterMax6) == 0x00018C, "Member 'FJackDataTableMonsterDeploy::SpPartyMonsterMax6' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyMonsterId7) == 0x000190, "Member 'FJackDataTableMonsterDeploy::SpPartyMonsterId7' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyMonsterMin7) == 0x000198, "Member 'FJackDataTableMonsterDeploy::SpPartyMonsterMin7' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyMonsterMax7) == 0x00019C, "Member 'FJackDataTableMonsterDeploy::SpPartyMonsterMax7' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyMonsterId8) == 0x0001A0, "Member 'FJackDataTableMonsterDeploy::SpPartyMonsterId8' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyMonsterMin8) == 0x0001A8, "Member 'FJackDataTableMonsterDeploy::SpPartyMonsterMin8' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, SpPartyMonsterMax8) == 0x0001AC, "Member 'FJackDataTableMonsterDeploy::SpPartyMonsterMax8' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PopCondition) == 0x0001B0, "Member 'FJackDataTableMonsterDeploy::PopCondition' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PopConditionMontageKey) == 0x0001B8, "Member 'FJackDataTableMonsterDeploy::PopConditionMontageKey' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PatrolMode) == 0x0001C0, "Member 'FJackDataTableMonsterDeploy::PatrolMode' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PatrolCourse) == 0x0001C8, "Member 'FJackDataTableMonsterDeploy::PatrolCourse' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PatrolMovingMethod) == 0x0001D0, "Member 'FJackDataTableMonsterDeploy::PatrolMovingMethod' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PatrolPointWaitTime) == 0x0001D4, "Member 'FJackDataTableMonsterDeploy::PatrolPointWaitTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, PatrolPointMontageKey) == 0x0001D8, "Member 'FJackDataTableMonsterDeploy::PatrolPointMontageKey' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, DepopBehavior) == 0x0001E0, "Member 'FJackDataTableMonsterDeploy::DepopBehavior' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, DepopLocatorKeyName) == 0x0001E8, "Member 'FJackDataTableMonsterDeploy::DepopLocatorKeyName' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, ReactionForMonster) == 0x0001F0, "Member 'FJackDataTableMonsterDeploy::ReactionForMonster' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, ReactionTargetName) == 0x0001F8, "Member 'FJackDataTableMonsterDeploy::ReactionTargetName' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, ReactionMontageKey) == 0x000200, "Member 'FJackDataTableMonsterDeploy::ReactionMontageKey' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, ReactionFrequency) == 0x000208, "Member 'FJackDataTableMonsterDeploy::ReactionFrequency' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, FollowerFormation) == 0x00020C, "Member 'FJackDataTableMonsterDeploy::FollowerFormation' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, FollowerReactionMode) == 0x00020D, "Member 'FJackDataTableMonsterDeploy::FollowerReactionMode' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, ApproachActionType) == 0x00020E, "Member 'FJackDataTableMonsterDeploy::ApproachActionType' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, ApproachTargetName) == 0x000210, "Member 'FJackDataTableMonsterDeploy::ApproachTargetName' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, ApproachActionMontageKey) == 0x000218, "Member 'FJackDataTableMonsterDeploy::ApproachActionMontageKey' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDeploy, ApproachActionFrequency) == 0x000220, "Member 'FJackDataTableMonsterDeploy::ApproachActionFrequency' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMonsterDeploySerialize
// 0x0000 (0x0228 - 0x0228)
struct FJackDataTableMonsterDeploySerialize final : public FJackDataTableMonsterDeploy
{
};
static_assert(alignof(FJackDataTableMonsterDeploySerialize) == 0x000008, "Wrong alignment on FJackDataTableMonsterDeploySerialize");
static_assert(sizeof(FJackDataTableMonsterDeploySerialize) == 0x000228, "Wrong size on FJackDataTableMonsterDeploySerialize");

// ScriptStruct JackGame.JackLDT_TenseiParamsTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TenseiParamsTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TenseiParamsTable) == 0x000008, "Wrong alignment on FJackLDT_TenseiParamsTable");
static_assert(sizeof(FJackLDT_TenseiParamsTable) == 0x000010, "Wrong size on FJackLDT_TenseiParamsTable");

// ScriptStruct JackGame.JackDataTableItemGettable_GmmickDrop
// 0x0048 (0x0050 - 0x0008)
struct FJackDataTableItemGettable_GmmickDrop final : public FTableRowBase
{
public:
	class FName                                   GetFlag;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapId;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScenarioSequenceNo;                                // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minitue;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_001;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum_001;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemID_002;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum_002;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemID_003;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum_003;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableItemGettable_GmmickDrop) == 0x000008, "Wrong alignment on FJackDataTableItemGettable_GmmickDrop");
static_assert(sizeof(FJackDataTableItemGettable_GmmickDrop) == 0x000050, "Wrong size on FJackDataTableItemGettable_GmmickDrop");
static_assert(offsetof(FJackDataTableItemGettable_GmmickDrop, GetFlag) == 0x000008, "Member 'FJackDataTableItemGettable_GmmickDrop::GetFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_GmmickDrop, MapId) == 0x000010, "Member 'FJackDataTableItemGettable_GmmickDrop::MapId' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_GmmickDrop, ScenarioSequenceNo) == 0x000018, "Member 'FJackDataTableItemGettable_GmmickDrop::ScenarioSequenceNo' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_GmmickDrop, Minitue) == 0x00001C, "Member 'FJackDataTableItemGettable_GmmickDrop::Minitue' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_GmmickDrop, ItemID_001) == 0x000020, "Member 'FJackDataTableItemGettable_GmmickDrop::ItemID_001' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_GmmickDrop, ItemNum_001) == 0x000028, "Member 'FJackDataTableItemGettable_GmmickDrop::ItemNum_001' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_GmmickDrop, ItemID_002) == 0x000030, "Member 'FJackDataTableItemGettable_GmmickDrop::ItemID_002' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_GmmickDrop, ItemNum_002) == 0x000038, "Member 'FJackDataTableItemGettable_GmmickDrop::ItemNum_002' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_GmmickDrop, ItemID_003) == 0x000040, "Member 'FJackDataTableItemGettable_GmmickDrop::ItemID_003' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_GmmickDrop, ItemNum_003) == 0x000048, "Member 'FJackDataTableItemGettable_GmmickDrop::ItemNum_003' has a wrong offset!");

// ScriptStruct JackGame.JackVoiceDramaHDPafuPafuTargetNPC
// 0x0088 (0x0088 - 0x0000)
struct FJackVoiceDramaHDPafuPafuTargetNPC final
{
public:
	int32                                         Health;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 FacialChangeNums;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UTexture2D*>                     FacialImages;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         FacialNowIndex;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVoicePlay;                                      // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFade;                                           // 0x002D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsKnockout;                                       // 0x002E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F[0x11];                                      // 0x002F(0x0011)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGVoiceDramaHDPafuPafu*           PafuPafu;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJackPafuPafuVoiceManager*              VoiceManager;                                      // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 TargetImage;                                       // 0x0050(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 TargetImageBack;                                   // 0x0058(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaBack;                                         // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FacialChangeSpeed;                                 // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsShake;                                          // 0x006C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShakeHeightMax;                                    // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShakeSpeed;                                        // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShakeCounter;                                      // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ImageOriginPosition;                               // 0x007C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackVoiceDramaHDPafuPafuTargetNPC) == 0x000008, "Wrong alignment on FJackVoiceDramaHDPafuPafuTargetNPC");
static_assert(sizeof(FJackVoiceDramaHDPafuPafuTargetNPC) == 0x000088, "Wrong size on FJackVoiceDramaHDPafuPafuTargetNPC");
static_assert(offsetof(FJackVoiceDramaHDPafuPafuTargetNPC, Health) == 0x000000, "Member 'FJackVoiceDramaHDPafuPafuTargetNPC::Health' has a wrong offset!");
static_assert(offsetof(FJackVoiceDramaHDPafuPafuTargetNPC, FacialChangeNums) == 0x000008, "Member 'FJackVoiceDramaHDPafuPafuTargetNPC::FacialChangeNums' has a wrong offset!");
static_assert(offsetof(FJackVoiceDramaHDPafuPafuTargetNPC, FacialImages) == 0x000018, "Member 'FJackVoiceDramaHDPafuPafuTargetNPC::FacialImages' has a wrong offset!");
static_assert(offsetof(FJackVoiceDramaHDPafuPafuTargetNPC, FacialNowIndex) == 0x000028, "Member 'FJackVoiceDramaHDPafuPafuTargetNPC::FacialNowIndex' has a wrong offset!");
static_assert(offsetof(FJackVoiceDramaHDPafuPafuTargetNPC, bIsVoicePlay) == 0x00002C, "Member 'FJackVoiceDramaHDPafuPafuTargetNPC::bIsVoicePlay' has a wrong offset!");
static_assert(offsetof(FJackVoiceDramaHDPafuPafuTargetNPC, bIsFade) == 0x00002D, "Member 'FJackVoiceDramaHDPafuPafuTargetNPC::bIsFade' has a wrong offset!");
static_assert(offsetof(FJackVoiceDramaHDPafuPafuTargetNPC, bIsKnockout) == 0x00002E, "Member 'FJackVoiceDramaHDPafuPafuTargetNPC::bIsKnockout' has a wrong offset!");
static_assert(offsetof(FJackVoiceDramaHDPafuPafuTargetNPC, PafuPafu) == 0x000040, "Member 'FJackVoiceDramaHDPafuPafuTargetNPC::PafuPafu' has a wrong offset!");
static_assert(offsetof(FJackVoiceDramaHDPafuPafuTargetNPC, VoiceManager) == 0x000048, "Member 'FJackVoiceDramaHDPafuPafuTargetNPC::VoiceManager' has a wrong offset!");
static_assert(offsetof(FJackVoiceDramaHDPafuPafuTargetNPC, TargetImage) == 0x000050, "Member 'FJackVoiceDramaHDPafuPafuTargetNPC::TargetImage' has a wrong offset!");
static_assert(offsetof(FJackVoiceDramaHDPafuPafuTargetNPC, TargetImageBack) == 0x000058, "Member 'FJackVoiceDramaHDPafuPafuTargetNPC::TargetImageBack' has a wrong offset!");
static_assert(offsetof(FJackVoiceDramaHDPafuPafuTargetNPC, Alpha) == 0x000060, "Member 'FJackVoiceDramaHDPafuPafuTargetNPC::Alpha' has a wrong offset!");
static_assert(offsetof(FJackVoiceDramaHDPafuPafuTargetNPC, AlphaBack) == 0x000064, "Member 'FJackVoiceDramaHDPafuPafuTargetNPC::AlphaBack' has a wrong offset!");
static_assert(offsetof(FJackVoiceDramaHDPafuPafuTargetNPC, FacialChangeSpeed) == 0x000068, "Member 'FJackVoiceDramaHDPafuPafuTargetNPC::FacialChangeSpeed' has a wrong offset!");
static_assert(offsetof(FJackVoiceDramaHDPafuPafuTargetNPC, bIsShake) == 0x00006C, "Member 'FJackVoiceDramaHDPafuPafuTargetNPC::bIsShake' has a wrong offset!");
static_assert(offsetof(FJackVoiceDramaHDPafuPafuTargetNPC, ShakeHeightMax) == 0x000070, "Member 'FJackVoiceDramaHDPafuPafuTargetNPC::ShakeHeightMax' has a wrong offset!");
static_assert(offsetof(FJackVoiceDramaHDPafuPafuTargetNPC, ShakeSpeed) == 0x000074, "Member 'FJackVoiceDramaHDPafuPafuTargetNPC::ShakeSpeed' has a wrong offset!");
static_assert(offsetof(FJackVoiceDramaHDPafuPafuTargetNPC, ShakeCounter) == 0x000078, "Member 'FJackVoiceDramaHDPafuPafuTargetNPC::ShakeCounter' has a wrong offset!");
static_assert(offsetof(FJackVoiceDramaHDPafuPafuTargetNPC, ImageOriginPosition) == 0x00007C, "Member 'FJackVoiceDramaHDPafuPafuTargetNPC::ImageOriginPosition' has a wrong offset!");

// ScriptStruct JackGame.JackVoiceDramaHDTutorial
// 0x0010 (0x0010 - 0x0000)
struct FJackVoiceDramaHDTutorial final
{
public:
	int32                                         ProgressCount;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackPafuPafuVoiceManager*              VoiceManager;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackVoiceDramaHDTutorial) == 0x000008, "Wrong alignment on FJackVoiceDramaHDTutorial");
static_assert(sizeof(FJackVoiceDramaHDTutorial) == 0x000010, "Wrong size on FJackVoiceDramaHDTutorial");
static_assert(offsetof(FJackVoiceDramaHDTutorial, ProgressCount) == 0x000000, "Member 'FJackVoiceDramaHDTutorial::ProgressCount' has a wrong offset!");
static_assert(offsetof(FJackVoiceDramaHDTutorial, VoiceManager) == 0x000008, "Member 'FJackVoiceDramaHDTutorial::VoiceManager' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MonsterBattleAI
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterBattleAI final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterBattleAI) == 0x000008, "Wrong alignment on FJackLDT_MonsterBattleAI");
static_assert(sizeof(FJackLDT_MonsterBattleAI) == 0x000010, "Wrong size on FJackLDT_MonsterBattleAI");

// ScriptStruct JackGame.JackMiniGameJackPotData
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FJackMiniGameJackPotData final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMiniGameJackPotData) == 0x000004, "Wrong alignment on FJackMiniGameJackPotData");
static_assert(sizeof(FJackMiniGameJackPotData) == 0x00000C, "Wrong size on FJackMiniGameJackPotData");

// ScriptStruct JackGame.JackKeyframeVector
// 0x0010 (0x0010 - 0x0000)
struct FJackKeyframeVector final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0004(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackKeyframeVector) == 0x000004, "Wrong alignment on FJackKeyframeVector");
static_assert(sizeof(FJackKeyframeVector) == 0x000010, "Wrong size on FJackKeyframeVector");
static_assert(offsetof(FJackKeyframeVector, Time) == 0x000000, "Member 'FJackKeyframeVector::Time' has a wrong offset!");
static_assert(offsetof(FJackKeyframeVector, Value) == 0x000004, "Member 'FJackKeyframeVector::Value' has a wrong offset!");

// ScriptStruct JackGame.JackBattleActionCameraDataTypeDataElementCurveVector
// 0x0010 (0x0010 - 0x0000)
struct FJackBattleActionCameraDataTypeDataElementCurveVector final
{
public:
	TArray<struct FJackKeyframeVector>            KeyframeArray;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackBattleActionCameraDataTypeDataElementCurveVector) == 0x000008, "Wrong alignment on FJackBattleActionCameraDataTypeDataElementCurveVector");
static_assert(sizeof(FJackBattleActionCameraDataTypeDataElementCurveVector) == 0x000010, "Wrong size on FJackBattleActionCameraDataTypeDataElementCurveVector");
static_assert(offsetof(FJackBattleActionCameraDataTypeDataElementCurveVector, KeyframeArray) == 0x000000, "Member 'FJackBattleActionCameraDataTypeDataElementCurveVector::KeyframeArray' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_N_D14
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_N_D14 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_N_D14) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_N_D14");
static_assert(sizeof(FJackLDT_MonsterDeploy_N_D14) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_N_D14");

// ScriptStruct JackGame.JackUMGSerifuWindowDebug
// 0x000C (0x000C - 0x0000)
struct FJackUMGSerifuWindowDebug final
{
public:
	int32                                         MainState;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrevState;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubState;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGSerifuWindowDebug) == 0x000004, "Wrong alignment on FJackUMGSerifuWindowDebug");
static_assert(sizeof(FJackUMGSerifuWindowDebug) == 0x00000C, "Wrong size on FJackUMGSerifuWindowDebug");
static_assert(offsetof(FJackUMGSerifuWindowDebug, MainState) == 0x000000, "Member 'FJackUMGSerifuWindowDebug::MainState' has a wrong offset!");
static_assert(offsetof(FJackUMGSerifuWindowDebug, PrevState) == 0x000004, "Member 'FJackUMGSerifuWindowDebug::PrevState' has a wrong offset!");
static_assert(offsetof(FJackUMGSerifuWindowDebug, SubState) == 0x000008, "Member 'FJackUMGSerifuWindowDebug::SubState' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableRecipe
// 0x00A0 (0x00A8 - 0x0008)
struct FJackDataTableRecipe final : public FTableRowBase
{
public:
	class FName                                   CreateItemID;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortIndex;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CategoryKind;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialSpecial;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResultType;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MetalKind;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialID_01;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialNum_01;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MaterialID_02;                                     // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialNum_02;                                    // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MaterialID_03;                                     // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialNum_03;                                    // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MaterialID_04;                                     // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialNum_04;                                    // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MaterialID_05;                                     // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialNum_05;                                    // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TakeRetryBall_0;                                   // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TakeRetryBall_1;                                   // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TakeRetryBall_2;                                   // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TakeRetryBall_3;                                   // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TakeRetryBall_Fail;                                // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedRetryBall_0;                                   // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedRetryBall_1;                                   // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedRetryBall_2;                                   // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DifficultyRank;                                    // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableRecipe) == 0x000008, "Wrong alignment on FJackDataTableRecipe");
static_assert(sizeof(FJackDataTableRecipe) == 0x0000A8, "Wrong size on FJackDataTableRecipe");
static_assert(offsetof(FJackDataTableRecipe, CreateItemID) == 0x000008, "Member 'FJackDataTableRecipe::CreateItemID' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipe, SortIndex) == 0x000010, "Member 'FJackDataTableRecipe::SortIndex' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipe, CategoryKind) == 0x000018, "Member 'FJackDataTableRecipe::CategoryKind' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipe, MaterialSpecial) == 0x000020, "Member 'FJackDataTableRecipe::MaterialSpecial' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipe, ResultType) == 0x000028, "Member 'FJackDataTableRecipe::ResultType' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipe, MetalKind) == 0x000030, "Member 'FJackDataTableRecipe::MetalKind' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipe, MaterialID_01) == 0x000038, "Member 'FJackDataTableRecipe::MaterialID_01' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipe, MaterialNum_01) == 0x000040, "Member 'FJackDataTableRecipe::MaterialNum_01' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipe, MaterialID_02) == 0x000048, "Member 'FJackDataTableRecipe::MaterialID_02' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipe, MaterialNum_02) == 0x000050, "Member 'FJackDataTableRecipe::MaterialNum_02' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipe, MaterialID_03) == 0x000058, "Member 'FJackDataTableRecipe::MaterialID_03' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipe, MaterialNum_03) == 0x000060, "Member 'FJackDataTableRecipe::MaterialNum_03' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipe, MaterialID_04) == 0x000068, "Member 'FJackDataTableRecipe::MaterialID_04' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipe, MaterialNum_04) == 0x000070, "Member 'FJackDataTableRecipe::MaterialNum_04' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipe, MaterialID_05) == 0x000078, "Member 'FJackDataTableRecipe::MaterialID_05' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipe, MaterialNum_05) == 0x000080, "Member 'FJackDataTableRecipe::MaterialNum_05' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipe, TakeRetryBall_0) == 0x000084, "Member 'FJackDataTableRecipe::TakeRetryBall_0' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipe, TakeRetryBall_1) == 0x000088, "Member 'FJackDataTableRecipe::TakeRetryBall_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipe, TakeRetryBall_2) == 0x00008C, "Member 'FJackDataTableRecipe::TakeRetryBall_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipe, TakeRetryBall_3) == 0x000090, "Member 'FJackDataTableRecipe::TakeRetryBall_3' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipe, TakeRetryBall_Fail) == 0x000094, "Member 'FJackDataTableRecipe::TakeRetryBall_Fail' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipe, NeedRetryBall_0) == 0x000098, "Member 'FJackDataTableRecipe::NeedRetryBall_0' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipe, NeedRetryBall_1) == 0x00009C, "Member 'FJackDataTableRecipe::NeedRetryBall_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipe, NeedRetryBall_2) == 0x0000A0, "Member 'FJackDataTableRecipe::NeedRetryBall_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableRecipe, DifficultyRank) == 0x0000A4, "Member 'FJackDataTableRecipe::DifficultyRank' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_OddEffectMotion
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_OddEffectMotion final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_OddEffectMotion) == 0x000008, "Wrong alignment on FJackLDT_OddEffectMotion");
static_assert(sizeof(FJackLDT_OddEffectMotion) == 0x000010, "Wrong size on FJackLDT_OddEffectMotion");

// ScriptStruct JackGame.JackLDT_RtEx_Skirt_Length3
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_Skirt_Length3 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_Skirt_Length3) == 0x000008, "Wrong alignment on FJackLDT_RtEx_Skirt_Length3");
static_assert(sizeof(FJackLDT_RtEx_Skirt_Length3) == 0x000010, "Wrong size on FJackLDT_RtEx_Skirt_Length3");

// ScriptStruct JackGame.JackUMGSerifuTextParseResult
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FJackUMGSerifuTextParseResult final
{
public:
	class FName                                   TextID;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPages;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLines;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWithSelectTag;                                    // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWithEndTag;                                       // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bButtonWait;                                       // 0x0016(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x9];                                       // 0x0017(0x0009)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGSerifuTextParseResult) == 0x000008, "Wrong alignment on FJackUMGSerifuTextParseResult");
static_assert(sizeof(FJackUMGSerifuTextParseResult) == 0x000020, "Wrong size on FJackUMGSerifuTextParseResult");
static_assert(offsetof(FJackUMGSerifuTextParseResult, TextID) == 0x000000, "Member 'FJackUMGSerifuTextParseResult::TextID' has a wrong offset!");
static_assert(offsetof(FJackUMGSerifuTextParseResult, NumPages) == 0x000008, "Member 'FJackUMGSerifuTextParseResult::NumPages' has a wrong offset!");
static_assert(offsetof(FJackUMGSerifuTextParseResult, NumLines) == 0x00000C, "Member 'FJackUMGSerifuTextParseResult::NumLines' has a wrong offset!");
static_assert(offsetof(FJackUMGSerifuTextParseResult, Length) == 0x000010, "Member 'FJackUMGSerifuTextParseResult::Length' has a wrong offset!");
static_assert(offsetof(FJackUMGSerifuTextParseResult, bWithSelectTag) == 0x000014, "Member 'FJackUMGSerifuTextParseResult::bWithSelectTag' has a wrong offset!");
static_assert(offsetof(FJackUMGSerifuTextParseResult, bWithEndTag) == 0x000015, "Member 'FJackUMGSerifuTextParseResult::bWithEndTag' has a wrong offset!");
static_assert(offsetof(FJackUMGSerifuTextParseResult, bButtonWait) == 0x000016, "Member 'FJackUMGSerifuTextParseResult::bButtonWait' has a wrong offset!");

// ScriptStruct JackGame.JackErrorInfo
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FJackErrorInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackErrorInfo) == 0x000004, "Wrong alignment on FJackErrorInfo");
static_assert(sizeof(FJackErrorInfo) == 0x000008, "Wrong size on FJackErrorInfo");

// ScriptStruct JackGame.JackActionValue
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackActionValue final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackActionValue) == 0x000008, "Wrong alignment on FJackActionValue");
static_assert(sizeof(FJackActionValue) == 0x000018, "Wrong size on FJackActionValue");

// ScriptStruct JackGame.JackLDT_CoinExchangeShopTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_CoinExchangeShopTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_CoinExchangeShopTable) == 0x000008, "Wrong alignment on FJackLDT_CoinExchangeShopTable");
static_assert(sizeof(FJackLDT_CoinExchangeShopTable) == 0x000010, "Wrong size on FJackLDT_CoinExchangeShopTable");

// ScriptStruct JackGame.JackCommandSample2
// 0x0000 (0x0010 - 0x0010)
struct FJackCommandSample2 final : public FJackCommand
{
};
static_assert(alignof(FJackCommandSample2) == 0x000008, "Wrong alignment on FJackCommandSample2");
static_assert(sizeof(FJackCommandSample2) == 0x000010, "Wrong size on FJackCommandSample2");

// ScriptStruct JackGame.JackGameFlagDefScenario
// 0x0001 (0x0001 - 0x0000)
struct FJackGameFlagDefScenario final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackGameFlagDefScenario) == 0x000001, "Wrong alignment on FJackGameFlagDefScenario");
static_assert(sizeof(FJackGameFlagDefScenario) == 0x000001, "Wrong size on FJackGameFlagDefScenario");

// ScriptStruct JackGame.JackActionCalcValue
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FJackActionCalcValue final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackActionCalcValue) == 0x000004, "Wrong alignment on FJackActionCalcValue");
static_assert(sizeof(FJackActionCalcValue) == 0x00000C, "Wrong size on FJackActionCalcValue");

// ScriptStruct JackGame.JackActionCalcRate
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FJackActionCalcRate final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackActionCalcRate) == 0x000004, "Wrong alignment on FJackActionCalcRate");
static_assert(sizeof(FJackActionCalcRate) == 0x00000C, "Wrong size on FJackActionCalcRate");

// ScriptStruct JackGame.JackActionKill
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackActionKill final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackActionKill) == 0x000008, "Wrong alignment on FJackActionKill");
static_assert(sizeof(FJackActionKill) == 0x000010, "Wrong size on FJackActionKill");

// ScriptStruct JackGame.JackLDT_RecipeTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RecipeTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RecipeTable) == 0x000008, "Wrong alignment on FJackLDT_RecipeTable");
static_assert(sizeof(FJackLDT_RecipeTable) == 0x000010, "Wrong size on FJackLDT_RecipeTable");

// ScriptStruct JackGame.JackDataTableFukkatunojumonItemTable
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableFukkatunojumonItemTable final : public FTableRowBase
{
public:
	class FName                                   ItemID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableFukkatunojumonItemTable) == 0x000008, "Wrong alignment on FJackDataTableFukkatunojumonItemTable");
static_assert(sizeof(FJackDataTableFukkatunojumonItemTable) == 0x000010, "Wrong size on FJackDataTableFukkatunojumonItemTable");
static_assert(offsetof(FJackDataTableFukkatunojumonItemTable, ItemID) == 0x000008, "Member 'FJackDataTableFukkatunojumonItemTable::ItemID' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MaterialCoordinate
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MaterialCoordinate final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MaterialCoordinate) == 0x000008, "Wrong alignment on FJackLDT_MaterialCoordinate");
static_assert(sizeof(FJackLDT_MaterialCoordinate) == 0x000010, "Wrong size on FJackLDT_MaterialCoordinate");

// ScriptStruct JackGame.JackActionOddEffectCollect
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackActionOddEffectCollect final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackActionOddEffectCollect) == 0x000008, "Wrong alignment on FJackActionOddEffectCollect");
static_assert(sizeof(FJackActionOddEffectCollect) == 0x000010, "Wrong size on FJackActionOddEffectCollect");

// ScriptStruct JackGame.JackDataTableTenseiFlags2D
// 0x0030 (0x0038 - 0x0008)
struct FJackDataTableTenseiFlags2D final : public FTableRowBase
{
public:
	class FName                                   Category;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FlagId;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubFlagId;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Arg1;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Arg2;                                              // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Arg3;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Cmds;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableTenseiFlags2D) == 0x000008, "Wrong alignment on FJackDataTableTenseiFlags2D");
static_assert(sizeof(FJackDataTableTenseiFlags2D) == 0x000038, "Wrong size on FJackDataTableTenseiFlags2D");
static_assert(offsetof(FJackDataTableTenseiFlags2D, Category) == 0x000008, "Member 'FJackDataTableTenseiFlags2D::Category' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiFlags2D, FlagId) == 0x000010, "Member 'FJackDataTableTenseiFlags2D::FlagId' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiFlags2D, SubFlagId) == 0x000014, "Member 'FJackDataTableTenseiFlags2D::SubFlagId' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiFlags2D, Arg1) == 0x000018, "Member 'FJackDataTableTenseiFlags2D::Arg1' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiFlags2D, Arg2) == 0x00001C, "Member 'FJackDataTableTenseiFlags2D::Arg2' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiFlags2D, Arg3) == 0x000020, "Member 'FJackDataTableTenseiFlags2D::Arg3' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiFlags2D, Cmds) == 0x000028, "Member 'FJackDataTableTenseiFlags2D::Cmds' has a wrong offset!");

// ScriptStruct JackGame.JackSlideActionCalc
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FJackSlideActionCalc final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackSlideActionCalc) == 0x000004, "Wrong alignment on FJackSlideActionCalc");
static_assert(sizeof(FJackSlideActionCalc) == 0x000018, "Wrong size on FJackSlideActionCalc");

// ScriptStruct JackGame.JackDataTableMaterialCoordinateType
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableMaterialCoordinateType final : public FTableRowBase
{
public:
	class FName                                   VariableName;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMaterialParameterControlMethod           Method;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ApplyRateMaterialParameterName;                    // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResidentMaterials;                                // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMaterialCoordinateType) == 0x000008, "Wrong alignment on FJackDataTableMaterialCoordinateType");
static_assert(sizeof(FJackDataTableMaterialCoordinateType) == 0x000028, "Wrong size on FJackDataTableMaterialCoordinateType");
static_assert(offsetof(FJackDataTableMaterialCoordinateType, VariableName) == 0x000008, "Member 'FJackDataTableMaterialCoordinateType::VariableName' has a wrong offset!");
static_assert(offsetof(FJackDataTableMaterialCoordinateType, Method) == 0x000010, "Member 'FJackDataTableMaterialCoordinateType::Method' has a wrong offset!");
static_assert(offsetof(FJackDataTableMaterialCoordinateType, ApplyRateMaterialParameterName) == 0x000018, "Member 'FJackDataTableMaterialCoordinateType::ApplyRateMaterialParameterName' has a wrong offset!");
static_assert(offsetof(FJackDataTableMaterialCoordinateType, bResidentMaterials) == 0x000020, "Member 'FJackDataTableMaterialCoordinateType::bResidentMaterials' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableFukkatunojumonRestartPointTable
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableFukkatunojumonRestartPointTable final : public FTableRowBase
{
public:
	class FName                                   ChurchId;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapStart;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableFukkatunojumonRestartPointTable) == 0x000008, "Wrong alignment on FJackDataTableFukkatunojumonRestartPointTable");
static_assert(sizeof(FJackDataTableFukkatunojumonRestartPointTable) == 0x000018, "Wrong size on FJackDataTableFukkatunojumonRestartPointTable");
static_assert(offsetof(FJackDataTableFukkatunojumonRestartPointTable, ChurchId) == 0x000008, "Member 'FJackDataTableFukkatunojumonRestartPointTable::ChurchId' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonRestartPointTable, MapStart) == 0x000010, "Member 'FJackDataTableFukkatunojumonRestartPointTable::MapStart' has a wrong offset!");

// ScriptStruct JackGame.JackActionAttachedParticle
// 0x0030 (0x0030 - 0x0000)
struct FJackActionAttachedParticle final
{
public:
	class UParticleSystem*                        Particle;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoAttach;                                         // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LocationSocketName;                                // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RotationSocketName;                                // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackActionAttachedParticle) == 0x000008, "Wrong alignment on FJackActionAttachedParticle");
static_assert(sizeof(FJackActionAttachedParticle) == 0x000030, "Wrong size on FJackActionAttachedParticle");
static_assert(offsetof(FJackActionAttachedParticle, Particle) == 0x000000, "Member 'FJackActionAttachedParticle::Particle' has a wrong offset!");
static_assert(offsetof(FJackActionAttachedParticle, Sound) == 0x000008, "Member 'FJackActionAttachedParticle::Sound' has a wrong offset!");
static_assert(offsetof(FJackActionAttachedParticle, SocketName) == 0x000010, "Member 'FJackActionAttachedParticle::SocketName' has a wrong offset!");
static_assert(offsetof(FJackActionAttachedParticle, bNoAttach) == 0x000018, "Member 'FJackActionAttachedParticle::bNoAttach' has a wrong offset!");
static_assert(offsetof(FJackActionAttachedParticle, LocationSocketName) == 0x000020, "Member 'FJackActionAttachedParticle::LocationSocketName' has a wrong offset!");
static_assert(offsetof(FJackActionAttachedParticle, RotationSocketName) == 0x000028, "Member 'FJackActionAttachedParticle::RotationSocketName' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Re430_breath
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Re430_breath final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Re430_breath) == 0x000008, "Wrong alignment on FJackLDT_Re430_breath");
static_assert(sizeof(FJackLDT_Re430_breath) == 0x000010, "Wrong size on FJackLDT_Re430_breath");

// ScriptStruct JackGame.JackActionSpawnedBurstEffect
// 0x0010 (0x0010 - 0x0000)
struct FJackActionSpawnedBurstEffect final
{
public:
	TSubclassOf<class UJackBurstEffect>           Class;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackActionSpawnedBurstEffect) == 0x000008, "Wrong alignment on FJackActionSpawnedBurstEffect");
static_assert(sizeof(FJackActionSpawnedBurstEffect) == 0x000010, "Wrong size on FJackActionSpawnedBurstEffect");
static_assert(offsetof(FJackActionSpawnedBurstEffect, Class) == 0x000000, "Member 'FJackActionSpawnedBurstEffect::Class' has a wrong offset!");
static_assert(offsetof(FJackActionSpawnedBurstEffect, SocketName) == 0x000008, "Member 'FJackActionSpawnedBurstEffect::SocketName' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Re435_breath
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Re435_breath final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Re435_breath) == 0x000008, "Wrong alignment on FJackLDT_Re435_breath");
static_assert(sizeof(FJackLDT_Re435_breath) == 0x000010, "Wrong size on FJackLDT_Re435_breath");

// ScriptStruct JackGame.JackActionSpawnedProjectile
// 0x0010 (0x0010 - 0x0000)
struct FJackActionSpawnedProjectile final
{
public:
	TSubclassOf<class AJackProjectile>            Class;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackActionSpawnedProjectile) == 0x000008, "Wrong alignment on FJackActionSpawnedProjectile");
static_assert(sizeof(FJackActionSpawnedProjectile) == 0x000010, "Wrong size on FJackActionSpawnedProjectile");
static_assert(offsetof(FJackActionSpawnedProjectile, Class) == 0x000000, "Member 'FJackActionSpawnedProjectile::Class' has a wrong offset!");
static_assert(offsetof(FJackActionSpawnedProjectile, SocketName) == 0x000008, "Member 'FJackActionSpawnedProjectile::SocketName' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableAdditiveAnimMontage
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableAdditiveAnimMontage final : public FTableRowBase
{
public:
	class UAnimMontage*                           AdditiveAnimMontage;                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveRate;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableAdditiveAnimMontage) == 0x000008, "Wrong alignment on FJackDataTableAdditiveAnimMontage");
static_assert(sizeof(FJackDataTableAdditiveAnimMontage) == 0x000018, "Wrong size on FJackDataTableAdditiveAnimMontage");
static_assert(offsetof(FJackDataTableAdditiveAnimMontage, AdditiveAnimMontage) == 0x000008, "Member 'FJackDataTableAdditiveAnimMontage::AdditiveAnimMontage' has a wrong offset!");
static_assert(offsetof(FJackDataTableAdditiveAnimMontage, AdditiveRate) == 0x000010, "Member 'FJackDataTableAdditiveAnimMontage::AdditiveRate' has a wrong offset!");

// ScriptStruct JackGame.JackBlendAnimOverrideTrackKeyInfo
// 0x0010 (0x0010 - 0x0000)
struct FJackBlendAnimOverrideTrackKeyInfo final
{
public:
	float                                         TimeVar;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          AnimSeq;                                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackBlendAnimOverrideTrackKeyInfo) == 0x000008, "Wrong alignment on FJackBlendAnimOverrideTrackKeyInfo");
static_assert(sizeof(FJackBlendAnimOverrideTrackKeyInfo) == 0x000010, "Wrong size on FJackBlendAnimOverrideTrackKeyInfo");
static_assert(offsetof(FJackBlendAnimOverrideTrackKeyInfo, TimeVar) == 0x000000, "Member 'FJackBlendAnimOverrideTrackKeyInfo::TimeVar' has a wrong offset!");
static_assert(offsetof(FJackBlendAnimOverrideTrackKeyInfo, AnimSeq) == 0x000008, "Member 'FJackBlendAnimOverrideTrackKeyInfo::AnimSeq' has a wrong offset!");

// ScriptStruct JackGame.JackActionHitCharacterInfo
// 0x000C (0x000C - 0x0000)
struct FJackActionHitCharacterInfo final
{
public:
	TWeakObjectPtr<class UJackGameCharacter>      GameCharacter;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitDelayTime;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackActionHitCharacterInfo) == 0x000004, "Wrong alignment on FJackActionHitCharacterInfo");
static_assert(sizeof(FJackActionHitCharacterInfo) == 0x00000C, "Wrong size on FJackActionHitCharacterInfo");
static_assert(offsetof(FJackActionHitCharacterInfo, GameCharacter) == 0x000000, "Member 'FJackActionHitCharacterInfo::GameCharacter' has a wrong offset!");
static_assert(offsetof(FJackActionHitCharacterInfo, HitDelayTime) == 0x000008, "Member 'FJackActionHitCharacterInfo::HitDelayTime' has a wrong offset!");

// ScriptStruct JackGame.JackKeyframeEvent
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackKeyframeEvent final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Event;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackKeyframeEvent) == 0x000008, "Wrong alignment on FJackKeyframeEvent");
static_assert(sizeof(FJackKeyframeEvent) == 0x000010, "Wrong size on FJackKeyframeEvent");
static_assert(offsetof(FJackKeyframeEvent, Time) == 0x000000, "Member 'FJackKeyframeEvent::Time' has a wrong offset!");
static_assert(offsetof(FJackKeyframeEvent, Event) == 0x000008, "Member 'FJackKeyframeEvent::Event' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_VoiceDrama_V_050
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_VoiceDrama_V_050 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_VoiceDrama_V_050) == 0x000008, "Wrong alignment on FJackLDT_VoiceDrama_V_050");
static_assert(sizeof(FJackLDT_VoiceDrama_V_050) == 0x000010, "Wrong size on FJackLDT_VoiceDrama_V_050");

// ScriptStruct JackGame.JackLDT_DynamicBoneState_Mantle
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_DynamicBoneState_Mantle final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_DynamicBoneState_Mantle) == 0x000008, "Wrong alignment on FJackLDT_DynamicBoneState_Mantle");
static_assert(sizeof(FJackLDT_DynamicBoneState_Mantle) == 0x000010, "Wrong size on FJackLDT_DynamicBoneState_Mantle");

// ScriptStruct JackGame.JackGrantCommand
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackGrantCommand final
{
public:
	class FName                                   Cmd0;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Cmd1;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Cmd2;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackGrantCommand) == 0x000008, "Wrong alignment on FJackGrantCommand");
static_assert(sizeof(FJackGrantCommand) == 0x000018, "Wrong size on FJackGrantCommand");
static_assert(offsetof(FJackGrantCommand, Cmd0) == 0x000000, "Member 'FJackGrantCommand::Cmd0' has a wrong offset!");
static_assert(offsetof(FJackGrantCommand, Cmd1) == 0x000008, "Member 'FJackGrantCommand::Cmd1' has a wrong offset!");
static_assert(offsetof(FJackGrantCommand, Cmd2) == 0x000010, "Member 'FJackGrantCommand::Cmd2' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableFukkatunojumonGameResumeSettingItem
// 0x0028 (0x0030 - 0x0008)
struct FJackDataTableFukkatunojumonGameResumeSettingItem final : public FTableRowBase
{
public:
	class FName                                   Category;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Value1;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Value2;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJackGrantCommand>              Cmds;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableFukkatunojumonGameResumeSettingItem) == 0x000008, "Wrong alignment on FJackDataTableFukkatunojumonGameResumeSettingItem");
static_assert(sizeof(FJackDataTableFukkatunojumonGameResumeSettingItem) == 0x000030, "Wrong size on FJackDataTableFukkatunojumonGameResumeSettingItem");
static_assert(offsetof(FJackDataTableFukkatunojumonGameResumeSettingItem, Category) == 0x000008, "Member 'FJackDataTableFukkatunojumonGameResumeSettingItem::Category' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonGameResumeSettingItem, Value1) == 0x000010, "Member 'FJackDataTableFukkatunojumonGameResumeSettingItem::Value1' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonGameResumeSettingItem, Value2) == 0x000018, "Member 'FJackDataTableFukkatunojumonGameResumeSettingItem::Value2' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonGameResumeSettingItem, Cmds) == 0x000020, "Member 'FJackDataTableFukkatunojumonGameResumeSettingItem::Cmds' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_PartyTalkData_C020
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_C020 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_C020) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_C020");
static_assert(sizeof(FJackLDT_PartyTalkData_C020) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_C020");

// ScriptStruct JackGame.JackIntTagDict
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackIntTagDict final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackIntTagDict) == 0x000008, "Wrong alignment on FJackIntTagDict");
static_assert(sizeof(FJackIntTagDict) == 0x000010, "Wrong size on FJackIntTagDict");
static_assert(offsetof(FJackIntTagDict, Name) == 0x000000, "Member 'FJackIntTagDict::Name' has a wrong offset!");
static_assert(offsetof(FJackIntTagDict, Value) == 0x000008, "Member 'FJackIntTagDict::Value' has a wrong offset!");

// ScriptStruct JackGame.JackAttachInfo
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FJackAttachInfo final
{
public:
	EJackAttachTargetType                         TargetType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetActorSocketName;                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocation;                                  // 0x0018(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0024(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EJackActionEffectAxis                         FrontAxis;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAttachInfo) == 0x000008, "Wrong alignment on FJackAttachInfo");
static_assert(sizeof(FJackAttachInfo) == 0x000038, "Wrong size on FJackAttachInfo");
static_assert(offsetof(FJackAttachInfo, TargetType) == 0x000000, "Member 'FJackAttachInfo::TargetType' has a wrong offset!");
static_assert(offsetof(FJackAttachInfo, TargetActor) == 0x000004, "Member 'FJackAttachInfo::TargetActor' has a wrong offset!");
static_assert(offsetof(FJackAttachInfo, TargetActorSocketName) == 0x000010, "Member 'FJackAttachInfo::TargetActorSocketName' has a wrong offset!");
static_assert(offsetof(FJackAttachInfo, RelativeLocation) == 0x000018, "Member 'FJackAttachInfo::RelativeLocation' has a wrong offset!");
static_assert(offsetof(FJackAttachInfo, RelativeRotation) == 0x000024, "Member 'FJackAttachInfo::RelativeRotation' has a wrong offset!");
static_assert(offsetof(FJackAttachInfo, FrontAxis) == 0x000030, "Member 'FJackAttachInfo::FrontAxis' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableActionTag
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableActionTag final : public FTableRowBase
{
public:
	bool                                          Dummy;                                             // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableActionTag) == 0x000008, "Wrong alignment on FJackDataTableActionTag");
static_assert(sizeof(FJackDataTableActionTag) == 0x000010, "Wrong size on FJackDataTableActionTag");
static_assert(offsetof(FJackDataTableActionTag, Dummy) == 0x000008, "Member 'FJackDataTableActionTag::Dummy' has a wrong offset!");

// ScriptStruct JackGame.JackDamageInfo
// 0x0001 (0x0001 - 0x0000)
struct FJackDamageInfo final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDamageInfo) == 0x000001, "Wrong alignment on FJackDamageInfo");
static_assert(sizeof(FJackDamageInfo) == 0x000001, "Wrong size on FJackDamageInfo");

// ScriptStruct JackGame.JackLDT_PartyTalkVoice
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkVoice final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkVoice) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkVoice");
static_assert(sizeof(FJackLDT_PartyTalkVoice) == 0x000010, "Wrong size on FJackLDT_PartyTalkVoice");

// ScriptStruct JackGame.JackZukanMotionDirectionalLightParameter
// 0x0010 (0x0010 - 0x0000)
struct FJackZukanMotionDirectionalLightParameter final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackZukanMotionDirectionalLightParameter) == 0x000004, "Wrong alignment on FJackZukanMotionDirectionalLightParameter");
static_assert(sizeof(FJackZukanMotionDirectionalLightParameter) == 0x000010, "Wrong size on FJackZukanMotionDirectionalLightParameter");
static_assert(offsetof(FJackZukanMotionDirectionalLightParameter, Intensity) == 0x000000, "Member 'FJackZukanMotionDirectionalLightParameter::Intensity' has a wrong offset!");
static_assert(offsetof(FJackZukanMotionDirectionalLightParameter, Rotation) == 0x000004, "Member 'FJackZukanMotionDirectionalLightParameter::Rotation' has a wrong offset!");

// ScriptStruct JackGame.JackZukanMotionPointLightParameter
// 0x001C (0x001C - 0x0000)
struct FJackZukanMotionPointLightParameter final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Intensity;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttenuationRadius;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceRadius;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackZukanMotionPointLightParameter) == 0x000004, "Wrong alignment on FJackZukanMotionPointLightParameter");
static_assert(sizeof(FJackZukanMotionPointLightParameter) == 0x00001C, "Wrong size on FJackZukanMotionPointLightParameter");
static_assert(offsetof(FJackZukanMotionPointLightParameter, bEnable) == 0x000000, "Member 'FJackZukanMotionPointLightParameter::bEnable' has a wrong offset!");
static_assert(offsetof(FJackZukanMotionPointLightParameter, Intensity) == 0x000004, "Member 'FJackZukanMotionPointLightParameter::Intensity' has a wrong offset!");
static_assert(offsetof(FJackZukanMotionPointLightParameter, Position) == 0x000008, "Member 'FJackZukanMotionPointLightParameter::Position' has a wrong offset!");
static_assert(offsetof(FJackZukanMotionPointLightParameter, AttenuationRadius) == 0x000014, "Member 'FJackZukanMotionPointLightParameter::AttenuationRadius' has a wrong offset!");
static_assert(offsetof(FJackZukanMotionPointLightParameter, SourceRadius) == 0x000018, "Member 'FJackZukanMotionPointLightParameter::SourceRadius' has a wrong offset!");

// ScriptStruct JackGame.JackZukanMotionMonsterAnimData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackZukanMotionMonsterAnimData final
{
public:
	class FName                                   AnimKey;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRepeat;                                           // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetPosOffset;                                   // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackZukanMotionMonsterAnimData) == 0x000008, "Wrong alignment on FJackZukanMotionMonsterAnimData");
static_assert(sizeof(FJackZukanMotionMonsterAnimData) == 0x000018, "Wrong size on FJackZukanMotionMonsterAnimData");
static_assert(offsetof(FJackZukanMotionMonsterAnimData, AnimKey) == 0x000000, "Member 'FJackZukanMotionMonsterAnimData::AnimKey' has a wrong offset!");
static_assert(offsetof(FJackZukanMotionMonsterAnimData, bLoop) == 0x000008, "Member 'FJackZukanMotionMonsterAnimData::bLoop' has a wrong offset!");
static_assert(offsetof(FJackZukanMotionMonsterAnimData, bRepeat) == 0x000009, "Member 'FJackZukanMotionMonsterAnimData::bRepeat' has a wrong offset!");
static_assert(offsetof(FJackZukanMotionMonsterAnimData, TargetPosOffset) == 0x00000C, "Member 'FJackZukanMotionMonsterAnimData::TargetPosOffset' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMonsterZukanMotion
// 0x00C0 (0x00C8 - 0x0008)
struct FJackDataTableMonsterZukanMotion final : public FTableRowBase
{
public:
	float                                         InitCameraZoom;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoomOutCameraFovAngle;                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoomInCameraFovAngle;                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoomSpeed;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarCameraDist;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearCameraDist;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              FarCameraPos;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NearCameraPos;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarCameraPitch;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearCameraPitch;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarCameraSlideSpeed;                               // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearCameraSlideSpeed;                              // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetPos;                                         // 0x0040(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InitialRotation;                                   // 0x004C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableLookAt;                                     // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LookAtLocation;                                    // 0x005C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SlideTargetOrigin;                                 // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              FarSlideTargetSize;                                // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NearSlideTargetSize;                               // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInBattle;                                         // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackZukanMotionMonsterAnimData> MonsterAnimDataList;                               // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FJackZukanMotionWeaponAnimData> WeaponAnimList;                                    // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FJackZukanMotionDirectionalLightParameter> DirectionalLightParameterList;                     // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FJackZukanMotionPointLightParameter> PointLightParameterList;                           // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMonsterZukanMotion) == 0x000008, "Wrong alignment on FJackDataTableMonsterZukanMotion");
static_assert(sizeof(FJackDataTableMonsterZukanMotion) == 0x0000C8, "Wrong size on FJackDataTableMonsterZukanMotion");
static_assert(offsetof(FJackDataTableMonsterZukanMotion, InitCameraZoom) == 0x000008, "Member 'FJackDataTableMonsterZukanMotion::InitCameraZoom' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanMotion, ZoomOutCameraFovAngle) == 0x00000C, "Member 'FJackDataTableMonsterZukanMotion::ZoomOutCameraFovAngle' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanMotion, ZoomInCameraFovAngle) == 0x000010, "Member 'FJackDataTableMonsterZukanMotion::ZoomInCameraFovAngle' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanMotion, ZoomSpeed) == 0x000014, "Member 'FJackDataTableMonsterZukanMotion::ZoomSpeed' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanMotion, FarCameraDist) == 0x000018, "Member 'FJackDataTableMonsterZukanMotion::FarCameraDist' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanMotion, NearCameraDist) == 0x00001C, "Member 'FJackDataTableMonsterZukanMotion::NearCameraDist' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanMotion, FarCameraPos) == 0x000020, "Member 'FJackDataTableMonsterZukanMotion::FarCameraPos' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanMotion, NearCameraPos) == 0x000028, "Member 'FJackDataTableMonsterZukanMotion::NearCameraPos' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanMotion, FarCameraPitch) == 0x000030, "Member 'FJackDataTableMonsterZukanMotion::FarCameraPitch' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanMotion, NearCameraPitch) == 0x000034, "Member 'FJackDataTableMonsterZukanMotion::NearCameraPitch' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanMotion, FarCameraSlideSpeed) == 0x000038, "Member 'FJackDataTableMonsterZukanMotion::FarCameraSlideSpeed' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanMotion, NearCameraSlideSpeed) == 0x00003C, "Member 'FJackDataTableMonsterZukanMotion::NearCameraSlideSpeed' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanMotion, TargetPos) == 0x000040, "Member 'FJackDataTableMonsterZukanMotion::TargetPos' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanMotion, InitialRotation) == 0x00004C, "Member 'FJackDataTableMonsterZukanMotion::InitialRotation' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanMotion, bEnableLookAt) == 0x000058, "Member 'FJackDataTableMonsterZukanMotion::bEnableLookAt' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanMotion, LookAtLocation) == 0x00005C, "Member 'FJackDataTableMonsterZukanMotion::LookAtLocation' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanMotion, SlideTargetOrigin) == 0x000068, "Member 'FJackDataTableMonsterZukanMotion::SlideTargetOrigin' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanMotion, FarSlideTargetSize) == 0x000070, "Member 'FJackDataTableMonsterZukanMotion::FarSlideTargetSize' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanMotion, NearSlideTargetSize) == 0x000078, "Member 'FJackDataTableMonsterZukanMotion::NearSlideTargetSize' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanMotion, bInBattle) == 0x000080, "Member 'FJackDataTableMonsterZukanMotion::bInBattle' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanMotion, MonsterAnimDataList) == 0x000088, "Member 'FJackDataTableMonsterZukanMotion::MonsterAnimDataList' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanMotion, WeaponAnimList) == 0x000098, "Member 'FJackDataTableMonsterZukanMotion::WeaponAnimList' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanMotion, DirectionalLightParameterList) == 0x0000A8, "Member 'FJackDataTableMonsterZukanMotion::DirectionalLightParameterList' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanMotion, PointLightParameterList) == 0x0000B8, "Member 'FJackDataTableMonsterZukanMotion::PointLightParameterList' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableItem
// 0x01E0 (0x01E8 - 0x0008)
struct FJackDataTableItem final : public FTableRowBase
{
public:
	class FName                                   ItemNameID;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortNo;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StrengthNo;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhoneticNo;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PictorialBookNo;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LapNo;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClassificationID;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RecipeBookID;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rarity;                                            // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlusValue;                                         // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price_Buying;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price_Selling;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetMEType;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GetSEID;                                           // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackItemGetIcon                              GetIconType;                                       // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   UnitNameID;                                        // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DescriptionID;                                     // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpecificAbilityDescriptionID;                      // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UsingActionID;                                     // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UsingEvent;                                        // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UsingEventParameter;                               // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParameterCorrection_Kougekiryoku;                  // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParameterCorrection_Syubiryoku;                    // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParameterCorrection_MPKyuuSyuuRate;                // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParameterCorrection_BukiGuardRate;                 // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParameterCorrection_TateGuardRate;                 // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParameterCorrection_MikawasiRate;                  // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParameterCorrection_CriticalRate;                  // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParameterCorrection_ZoneOnRate;                    // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParameterCorrection_Tikara;                        // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParameterCorrection_Minomamori;                    // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParameterCorrection_Kiyousa;                       // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParameterCorrection_Subayasa;                      // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParameterCorrection_KougekiMaryoku;                // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParameterCorrection_KaifukuMaryoku;                // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParameterCorrection_MaxHP;                         // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParameterCorrection_MaxMP;                         // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParameterCorrection_Miryoku;                       // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackItem_ParameterType                       MajorParameter1;                                   // 0x00DC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackItem_ParameterType                       MajorParameter2;                                   // 0x00DD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackItem_ParameterType                       MajorParameter3;                                   // 0x00DE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackItem_ParameterType                       MajorParameter4;                                   // 0x00DF(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OddEffectID_01;                                    // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OddEffectID_02;                                    // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OddEffectID_03;                                    // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OddEffectID_04;                                    // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEquipmentPossible_P001;                           // 0x0100(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEquipmentPossible_P002;                           // 0x0101(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEquipmentPossible_P003;                           // 0x0102(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEquipmentPossible_P004_1;                         // 0x0103(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEquipmentPossible_P004_2;                         // 0x0104(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEquipmentPossible_P005;                           // 0x0105(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEquipmentPossible_P006;                           // 0x0106(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEquipmentPossible_P007;                           // 0x0107(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEquipmentPossible_P008;                           // 0x0108(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EquipmentLevel;                                    // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanConsume;                                       // 0x0110(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBuy;                                           // 0x0111(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackItem_SellType                            SellType;                                          // 0x0112(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackItem_DiscardType                         DiscardType;                                       // 0x0113(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeaveAtSort;                                      // 0x0114(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStoreCommonBag;                                   // 0x0115(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116[0x2];                                      // 0x0116(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LimitedNumber;                                     // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                MenuIconTexture;                                   // 0x0120(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                PictureBookIconTexture;                            // 0x0138(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                PopIconTexture;                                    // 0x0150(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             EquipmentStaticMesh_Main;                          // 0x0168(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             EquipmentStaticMesh_Main_L;                        // 0x0180(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             EquipmentStaticMesh_Sub;                           // 0x0198(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           EquipmentSkeletalMesh_Main;                        // 0x01B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           EquipmentSkeletalMesh_Sub;                         // 0x01C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackItem_EquipmentSE                         EquipmentSE;                                       // 0x01E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TripleItemNo;                                      // 0x01E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableItem) == 0x000008, "Wrong alignment on FJackDataTableItem");
static_assert(sizeof(FJackDataTableItem) == 0x0001E8, "Wrong size on FJackDataTableItem");
static_assert(offsetof(FJackDataTableItem, ItemNameID) == 0x000008, "Member 'FJackDataTableItem::ItemNameID' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, SortNo) == 0x000010, "Member 'FJackDataTableItem::SortNo' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, StrengthNo) == 0x000014, "Member 'FJackDataTableItem::StrengthNo' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, PhoneticNo) == 0x000018, "Member 'FJackDataTableItem::PhoneticNo' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, PictorialBookNo) == 0x00001C, "Member 'FJackDataTableItem::PictorialBookNo' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, LapNo) == 0x000020, "Member 'FJackDataTableItem::LapNo' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, ClassificationID) == 0x000028, "Member 'FJackDataTableItem::ClassificationID' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, RecipeBookID) == 0x000030, "Member 'FJackDataTableItem::RecipeBookID' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, Rarity) == 0x000038, "Member 'FJackDataTableItem::Rarity' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, PlusValue) == 0x00003C, "Member 'FJackDataTableItem::PlusValue' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, Price_Buying) == 0x000040, "Member 'FJackDataTableItem::Price_Buying' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, Price_Selling) == 0x000044, "Member 'FJackDataTableItem::Price_Selling' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, GetMEType) == 0x000048, "Member 'FJackDataTableItem::GetMEType' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, GetSEID) == 0x000058, "Member 'FJackDataTableItem::GetSEID' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, GetIconType) == 0x000060, "Member 'FJackDataTableItem::GetIconType' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, UnitNameID) == 0x000068, "Member 'FJackDataTableItem::UnitNameID' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, DescriptionID) == 0x000070, "Member 'FJackDataTableItem::DescriptionID' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, SpecificAbilityDescriptionID) == 0x000078, "Member 'FJackDataTableItem::SpecificAbilityDescriptionID' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, UsingActionID) == 0x000080, "Member 'FJackDataTableItem::UsingActionID' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, UsingEvent) == 0x000088, "Member 'FJackDataTableItem::UsingEvent' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, UsingEventParameter) == 0x000090, "Member 'FJackDataTableItem::UsingEventParameter' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, ParameterCorrection_Kougekiryoku) == 0x000098, "Member 'FJackDataTableItem::ParameterCorrection_Kougekiryoku' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, ParameterCorrection_Syubiryoku) == 0x00009C, "Member 'FJackDataTableItem::ParameterCorrection_Syubiryoku' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, ParameterCorrection_MPKyuuSyuuRate) == 0x0000A0, "Member 'FJackDataTableItem::ParameterCorrection_MPKyuuSyuuRate' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, ParameterCorrection_BukiGuardRate) == 0x0000A4, "Member 'FJackDataTableItem::ParameterCorrection_BukiGuardRate' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, ParameterCorrection_TateGuardRate) == 0x0000A8, "Member 'FJackDataTableItem::ParameterCorrection_TateGuardRate' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, ParameterCorrection_MikawasiRate) == 0x0000AC, "Member 'FJackDataTableItem::ParameterCorrection_MikawasiRate' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, ParameterCorrection_CriticalRate) == 0x0000B0, "Member 'FJackDataTableItem::ParameterCorrection_CriticalRate' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, ParameterCorrection_ZoneOnRate) == 0x0000B4, "Member 'FJackDataTableItem::ParameterCorrection_ZoneOnRate' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, ParameterCorrection_Tikara) == 0x0000B8, "Member 'FJackDataTableItem::ParameterCorrection_Tikara' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, ParameterCorrection_Minomamori) == 0x0000BC, "Member 'FJackDataTableItem::ParameterCorrection_Minomamori' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, ParameterCorrection_Kiyousa) == 0x0000C0, "Member 'FJackDataTableItem::ParameterCorrection_Kiyousa' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, ParameterCorrection_Subayasa) == 0x0000C4, "Member 'FJackDataTableItem::ParameterCorrection_Subayasa' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, ParameterCorrection_KougekiMaryoku) == 0x0000C8, "Member 'FJackDataTableItem::ParameterCorrection_KougekiMaryoku' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, ParameterCorrection_KaifukuMaryoku) == 0x0000CC, "Member 'FJackDataTableItem::ParameterCorrection_KaifukuMaryoku' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, ParameterCorrection_MaxHP) == 0x0000D0, "Member 'FJackDataTableItem::ParameterCorrection_MaxHP' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, ParameterCorrection_MaxMP) == 0x0000D4, "Member 'FJackDataTableItem::ParameterCorrection_MaxMP' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, ParameterCorrection_Miryoku) == 0x0000D8, "Member 'FJackDataTableItem::ParameterCorrection_Miryoku' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, MajorParameter1) == 0x0000DC, "Member 'FJackDataTableItem::MajorParameter1' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, MajorParameter2) == 0x0000DD, "Member 'FJackDataTableItem::MajorParameter2' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, MajorParameter3) == 0x0000DE, "Member 'FJackDataTableItem::MajorParameter3' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, MajorParameter4) == 0x0000DF, "Member 'FJackDataTableItem::MajorParameter4' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, OddEffectID_01) == 0x0000E0, "Member 'FJackDataTableItem::OddEffectID_01' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, OddEffectID_02) == 0x0000E8, "Member 'FJackDataTableItem::OddEffectID_02' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, OddEffectID_03) == 0x0000F0, "Member 'FJackDataTableItem::OddEffectID_03' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, OddEffectID_04) == 0x0000F8, "Member 'FJackDataTableItem::OddEffectID_04' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, bEquipmentPossible_P001) == 0x000100, "Member 'FJackDataTableItem::bEquipmentPossible_P001' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, bEquipmentPossible_P002) == 0x000101, "Member 'FJackDataTableItem::bEquipmentPossible_P002' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, bEquipmentPossible_P003) == 0x000102, "Member 'FJackDataTableItem::bEquipmentPossible_P003' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, bEquipmentPossible_P004_1) == 0x000103, "Member 'FJackDataTableItem::bEquipmentPossible_P004_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, bEquipmentPossible_P004_2) == 0x000104, "Member 'FJackDataTableItem::bEquipmentPossible_P004_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, bEquipmentPossible_P005) == 0x000105, "Member 'FJackDataTableItem::bEquipmentPossible_P005' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, bEquipmentPossible_P006) == 0x000106, "Member 'FJackDataTableItem::bEquipmentPossible_P006' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, bEquipmentPossible_P007) == 0x000107, "Member 'FJackDataTableItem::bEquipmentPossible_P007' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, bEquipmentPossible_P008) == 0x000108, "Member 'FJackDataTableItem::bEquipmentPossible_P008' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, EquipmentLevel) == 0x00010C, "Member 'FJackDataTableItem::EquipmentLevel' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, bCanConsume) == 0x000110, "Member 'FJackDataTableItem::bCanConsume' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, bCanBuy) == 0x000111, "Member 'FJackDataTableItem::bCanBuy' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, SellType) == 0x000112, "Member 'FJackDataTableItem::SellType' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, DiscardType) == 0x000113, "Member 'FJackDataTableItem::DiscardType' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, bLeaveAtSort) == 0x000114, "Member 'FJackDataTableItem::bLeaveAtSort' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, bStoreCommonBag) == 0x000115, "Member 'FJackDataTableItem::bStoreCommonBag' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, LimitedNumber) == 0x000118, "Member 'FJackDataTableItem::LimitedNumber' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, MenuIconTexture) == 0x000120, "Member 'FJackDataTableItem::MenuIconTexture' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, PictureBookIconTexture) == 0x000138, "Member 'FJackDataTableItem::PictureBookIconTexture' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, PopIconTexture) == 0x000150, "Member 'FJackDataTableItem::PopIconTexture' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, EquipmentStaticMesh_Main) == 0x000168, "Member 'FJackDataTableItem::EquipmentStaticMesh_Main' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, EquipmentStaticMesh_Main_L) == 0x000180, "Member 'FJackDataTableItem::EquipmentStaticMesh_Main_L' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, EquipmentStaticMesh_Sub) == 0x000198, "Member 'FJackDataTableItem::EquipmentStaticMesh_Sub' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, EquipmentSkeletalMesh_Main) == 0x0001B0, "Member 'FJackDataTableItem::EquipmentSkeletalMesh_Main' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, EquipmentSkeletalMesh_Sub) == 0x0001C8, "Member 'FJackDataTableItem::EquipmentSkeletalMesh_Sub' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, EquipmentSE) == 0x0001E0, "Member 'FJackDataTableItem::EquipmentSE' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem, TripleItemNo) == 0x0001E4, "Member 'FJackDataTableItem::TripleItemNo' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotBattleIchigekiGames
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotBattleIchigekiGames final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotBattleIchigekiGames) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotBattleIchigekiGames");
static_assert(sizeof(FJackLDT_MeosiSlotBattleIchigekiGames) == 0x000010, "Wrong size on FJackLDT_MeosiSlotBattleIchigekiGames");

// ScriptStruct JackGame.JackDataTableDebugConsoleCommand
// 0x0048 (0x0050 - 0x0008)
struct FJackDataTableDebugConsoleCommand final : public FTableRowBase
{
public:
	class FString                                 Command;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubCategory;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JackCommandFlag;                                   // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CommentarySentence;                                // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableDebugConsoleCommand) == 0x000008, "Wrong alignment on FJackDataTableDebugConsoleCommand");
static_assert(sizeof(FJackDataTableDebugConsoleCommand) == 0x000050, "Wrong size on FJackDataTableDebugConsoleCommand");
static_assert(offsetof(FJackDataTableDebugConsoleCommand, Command) == 0x000008, "Member 'FJackDataTableDebugConsoleCommand::Command' has a wrong offset!");
static_assert(offsetof(FJackDataTableDebugConsoleCommand, Category) == 0x000018, "Member 'FJackDataTableDebugConsoleCommand::Category' has a wrong offset!");
static_assert(offsetof(FJackDataTableDebugConsoleCommand, SubCategory) == 0x000028, "Member 'FJackDataTableDebugConsoleCommand::SubCategory' has a wrong offset!");
static_assert(offsetof(FJackDataTableDebugConsoleCommand, JackCommandFlag) == 0x000038, "Member 'FJackDataTableDebugConsoleCommand::JackCommandFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableDebugConsoleCommand, CommentarySentence) == 0x000040, "Member 'FJackDataTableDebugConsoleCommand::CommentarySentence' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMedalStamp
// 0x0028 (0x0030 - 0x0008)
struct FJackDataTableMedalStamp final : public FTableRowBase
{
public:
	class FName                                   ItemID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StampNumber;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                IconTexture;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMedalStamp) == 0x000008, "Wrong alignment on FJackDataTableMedalStamp");
static_assert(sizeof(FJackDataTableMedalStamp) == 0x000030, "Wrong size on FJackDataTableMedalStamp");
static_assert(offsetof(FJackDataTableMedalStamp, ItemID) == 0x000008, "Member 'FJackDataTableMedalStamp::ItemID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMedalStamp, StampNumber) == 0x000010, "Member 'FJackDataTableMedalStamp::StampNumber' has a wrong offset!");
static_assert(offsetof(FJackDataTableMedalStamp, IconTexture) == 0x000018, "Member 'FJackDataTableMedalStamp::IconTexture' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotBGM
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMeosiSlotBGM final : public FTableRowBase
{
public:
	class FName                                   BGMID;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotBGM) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotBGM");
static_assert(sizeof(FJackDataTableMeosiSlotBGM) == 0x000010, "Wrong size on FJackDataTableMeosiSlotBGM");
static_assert(offsetof(FJackDataTableMeosiSlotBGM, BGMID) == 0x000008, "Member 'FJackDataTableMeosiSlotBGM::BGMID' has a wrong offset!");

// ScriptStruct JackGame.JackActionScoreResult
// 0x0068 (0x0068 - 0x0000)
struct FJackActionScoreResult final
{
public:
	EJackActionResultType                         ResultType;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackActionData>                ActionDataList;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UJackGameCharacter>> CasterGameCharacterList;                           // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UJackGameCharacter>> TargetGameCharacterList;                           // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<int32>                                 UseMPList;                                         // 0x0038(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<int32>                                 UseGoldList;                                       // 0x0048(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x10];                                      // 0x0058(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackActionScoreResult) == 0x000008, "Wrong alignment on FJackActionScoreResult");
static_assert(sizeof(FJackActionScoreResult) == 0x000068, "Wrong size on FJackActionScoreResult");
static_assert(offsetof(FJackActionScoreResult, ResultType) == 0x000000, "Member 'FJackActionScoreResult::ResultType' has a wrong offset!");
static_assert(offsetof(FJackActionScoreResult, ActionDataList) == 0x000008, "Member 'FJackActionScoreResult::ActionDataList' has a wrong offset!");
static_assert(offsetof(FJackActionScoreResult, CasterGameCharacterList) == 0x000018, "Member 'FJackActionScoreResult::CasterGameCharacterList' has a wrong offset!");
static_assert(offsetof(FJackActionScoreResult, TargetGameCharacterList) == 0x000028, "Member 'FJackActionScoreResult::TargetGameCharacterList' has a wrong offset!");
static_assert(offsetof(FJackActionScoreResult, UseMPList) == 0x000038, "Member 'FJackActionScoreResult::UseMPList' has a wrong offset!");
static_assert(offsetof(FJackActionScoreResult, UseGoldList) == 0x000048, "Member 'FJackActionScoreResult::UseGoldList' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableEnvSoundTable
// 0x0840 (0x0848 - 0x0008)
struct FJackDataTableEnvSoundTable final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USoundBase>              ClearAndSunnyDayW1;                                // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              ClearAndSunnyDayW2;                                // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              ClearAndSunnyDayW3;                                // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              ClearAndSunnyDayW4;                                // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              ClearAndSunnyNightW1;                              // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              ClearAndSunnyNightW2;                              // 0x0080(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              ClearAndSunnyNightW3;                              // 0x0098(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              ClearAndSunnyNightW4;                              // 0x00B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SunnyDayW1;                                        // 0x00C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SunnyDayW2;                                        // 0x00E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SunnyDayW3;                                        // 0x00F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SunnyDayW4;                                        // 0x0110(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SunnyNightW1;                                      // 0x0128(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SunnyNightW2;                                      // 0x0140(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SunnyNightW3;                                      // 0x0158(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SunnyNightW4;                                      // 0x0170(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              CloudyDayW1;                                       // 0x0188(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              CloudyDayW2;                                       // 0x01A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              CloudyDayW3;                                       // 0x01B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              CloudyDayW4;                                       // 0x01D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              CloudyNightW1;                                     // 0x01E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              CloudyNightW2;                                     // 0x0200(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              CloudyNightW3;                                     // 0x0218(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              CloudyNightW4;                                     // 0x0230(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              LightRainDayW1;                                    // 0x0248(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              LightRainDayW2;                                    // 0x0260(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              LightRainDayW3;                                    // 0x0278(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              LightRainDayW4;                                    // 0x0290(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              LightRainNightW1;                                  // 0x02A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              LightRainNightW2;                                  // 0x02C0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              LightRainNightW3;                                  // 0x02D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              LightRainNightW4;                                  // 0x02F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              RainDayW1;                                         // 0x0308(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              RainDayW2;                                         // 0x0320(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              RainDayW3;                                         // 0x0338(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              RainDayW4;                                         // 0x0350(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              RainNightW1;                                       // 0x0368(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              RainNightW2;                                       // 0x0380(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              RainNightW3;                                       // 0x0398(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              RainNightW4;                                       // 0x03B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              HeavyRainDayW1;                                    // 0x03C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              HeavyRainDayW2;                                    // 0x03E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              HeavyRainDayW3;                                    // 0x03F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              HeavyRainDayW4;                                    // 0x0410(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              HeavyRainNightW1;                                  // 0x0428(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              HeavyRainNightW2;                                  // 0x0440(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              HeavyRainNightW3;                                  // 0x0458(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              HeavyRainNightW4;                                  // 0x0470(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              ThunderstormDayW1;                                 // 0x0488(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              ThunderstormDayW2;                                 // 0x04A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              ThunderstormDayW3;                                 // 0x04B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              ThunderstormDayW4;                                 // 0x04D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              ThunderstormNightW1;                               // 0x04E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              ThunderstormNightW2;                               // 0x0500(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              ThunderstormNightW3;                               // 0x0518(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              ThunderstormNightW4;                               // 0x0530(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SnowDayW1;                                         // 0x0548(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SnowDayW2;                                         // 0x0560(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SnowDayW3;                                         // 0x0578(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SnowDayW4;                                         // 0x0590(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SnowNightW1;                                       // 0x05A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SnowNightW2;                                       // 0x05C0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SnowNightW3;                                       // 0x05D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SnowNightW4;                                       // 0x05F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SnowstormDayW1;                                    // 0x0608(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SnowstormDayW2;                                    // 0x0620(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SnowstormDayW3;                                    // 0x0638(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SnowstormDayW4;                                    // 0x0650(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SnowstormNightW1;                                  // 0x0668(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SnowstormNightW2;                                  // 0x0680(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SnowstormNightW3;                                  // 0x0698(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SnowstormNightW4;                                  // 0x06B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              FogDayW1;                                          // 0x06C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              FogDayW2;                                          // 0x06E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              FogDayW3;                                          // 0x06F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              FogDayW4;                                          // 0x0710(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              FogNightW1;                                        // 0x0728(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              FogNightW2;                                        // 0x0740(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              FogNightW3;                                        // 0x0758(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              FogNightW4;                                        // 0x0770(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              HeavyFogDayW1;                                     // 0x0788(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              HeavyFogDayW2;                                     // 0x07A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              HeavyFogDayW3;                                     // 0x07B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              HeavyFogDayW4;                                     // 0x07D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              HeavyFogNightW1;                                   // 0x07E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              HeavyFogNightW2;                                   // 0x0800(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              HeavyFogNightW3;                                   // 0x0818(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              HeavyFogNightW4;                                   // 0x0830(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableEnvSoundTable) == 0x000008, "Wrong alignment on FJackDataTableEnvSoundTable");
static_assert(sizeof(FJackDataTableEnvSoundTable) == 0x000848, "Wrong size on FJackDataTableEnvSoundTable");
static_assert(offsetof(FJackDataTableEnvSoundTable, ClearAndSunnyDayW1) == 0x000008, "Member 'FJackDataTableEnvSoundTable::ClearAndSunnyDayW1' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, ClearAndSunnyDayW2) == 0x000020, "Member 'FJackDataTableEnvSoundTable::ClearAndSunnyDayW2' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, ClearAndSunnyDayW3) == 0x000038, "Member 'FJackDataTableEnvSoundTable::ClearAndSunnyDayW3' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, ClearAndSunnyDayW4) == 0x000050, "Member 'FJackDataTableEnvSoundTable::ClearAndSunnyDayW4' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, ClearAndSunnyNightW1) == 0x000068, "Member 'FJackDataTableEnvSoundTable::ClearAndSunnyNightW1' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, ClearAndSunnyNightW2) == 0x000080, "Member 'FJackDataTableEnvSoundTable::ClearAndSunnyNightW2' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, ClearAndSunnyNightW3) == 0x000098, "Member 'FJackDataTableEnvSoundTable::ClearAndSunnyNightW3' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, ClearAndSunnyNightW4) == 0x0000B0, "Member 'FJackDataTableEnvSoundTable::ClearAndSunnyNightW4' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, SunnyDayW1) == 0x0000C8, "Member 'FJackDataTableEnvSoundTable::SunnyDayW1' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, SunnyDayW2) == 0x0000E0, "Member 'FJackDataTableEnvSoundTable::SunnyDayW2' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, SunnyDayW3) == 0x0000F8, "Member 'FJackDataTableEnvSoundTable::SunnyDayW3' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, SunnyDayW4) == 0x000110, "Member 'FJackDataTableEnvSoundTable::SunnyDayW4' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, SunnyNightW1) == 0x000128, "Member 'FJackDataTableEnvSoundTable::SunnyNightW1' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, SunnyNightW2) == 0x000140, "Member 'FJackDataTableEnvSoundTable::SunnyNightW2' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, SunnyNightW3) == 0x000158, "Member 'FJackDataTableEnvSoundTable::SunnyNightW3' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, SunnyNightW4) == 0x000170, "Member 'FJackDataTableEnvSoundTable::SunnyNightW4' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, CloudyDayW1) == 0x000188, "Member 'FJackDataTableEnvSoundTable::CloudyDayW1' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, CloudyDayW2) == 0x0001A0, "Member 'FJackDataTableEnvSoundTable::CloudyDayW2' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, CloudyDayW3) == 0x0001B8, "Member 'FJackDataTableEnvSoundTable::CloudyDayW3' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, CloudyDayW4) == 0x0001D0, "Member 'FJackDataTableEnvSoundTable::CloudyDayW4' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, CloudyNightW1) == 0x0001E8, "Member 'FJackDataTableEnvSoundTable::CloudyNightW1' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, CloudyNightW2) == 0x000200, "Member 'FJackDataTableEnvSoundTable::CloudyNightW2' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, CloudyNightW3) == 0x000218, "Member 'FJackDataTableEnvSoundTable::CloudyNightW3' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, CloudyNightW4) == 0x000230, "Member 'FJackDataTableEnvSoundTable::CloudyNightW4' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, LightRainDayW1) == 0x000248, "Member 'FJackDataTableEnvSoundTable::LightRainDayW1' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, LightRainDayW2) == 0x000260, "Member 'FJackDataTableEnvSoundTable::LightRainDayW2' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, LightRainDayW3) == 0x000278, "Member 'FJackDataTableEnvSoundTable::LightRainDayW3' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, LightRainDayW4) == 0x000290, "Member 'FJackDataTableEnvSoundTable::LightRainDayW4' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, LightRainNightW1) == 0x0002A8, "Member 'FJackDataTableEnvSoundTable::LightRainNightW1' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, LightRainNightW2) == 0x0002C0, "Member 'FJackDataTableEnvSoundTable::LightRainNightW2' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, LightRainNightW3) == 0x0002D8, "Member 'FJackDataTableEnvSoundTable::LightRainNightW3' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, LightRainNightW4) == 0x0002F0, "Member 'FJackDataTableEnvSoundTable::LightRainNightW4' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, RainDayW1) == 0x000308, "Member 'FJackDataTableEnvSoundTable::RainDayW1' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, RainDayW2) == 0x000320, "Member 'FJackDataTableEnvSoundTable::RainDayW2' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, RainDayW3) == 0x000338, "Member 'FJackDataTableEnvSoundTable::RainDayW3' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, RainDayW4) == 0x000350, "Member 'FJackDataTableEnvSoundTable::RainDayW4' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, RainNightW1) == 0x000368, "Member 'FJackDataTableEnvSoundTable::RainNightW1' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, RainNightW2) == 0x000380, "Member 'FJackDataTableEnvSoundTable::RainNightW2' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, RainNightW3) == 0x000398, "Member 'FJackDataTableEnvSoundTable::RainNightW3' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, RainNightW4) == 0x0003B0, "Member 'FJackDataTableEnvSoundTable::RainNightW4' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, HeavyRainDayW1) == 0x0003C8, "Member 'FJackDataTableEnvSoundTable::HeavyRainDayW1' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, HeavyRainDayW2) == 0x0003E0, "Member 'FJackDataTableEnvSoundTable::HeavyRainDayW2' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, HeavyRainDayW3) == 0x0003F8, "Member 'FJackDataTableEnvSoundTable::HeavyRainDayW3' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, HeavyRainDayW4) == 0x000410, "Member 'FJackDataTableEnvSoundTable::HeavyRainDayW4' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, HeavyRainNightW1) == 0x000428, "Member 'FJackDataTableEnvSoundTable::HeavyRainNightW1' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, HeavyRainNightW2) == 0x000440, "Member 'FJackDataTableEnvSoundTable::HeavyRainNightW2' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, HeavyRainNightW3) == 0x000458, "Member 'FJackDataTableEnvSoundTable::HeavyRainNightW3' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, HeavyRainNightW4) == 0x000470, "Member 'FJackDataTableEnvSoundTable::HeavyRainNightW4' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, ThunderstormDayW1) == 0x000488, "Member 'FJackDataTableEnvSoundTable::ThunderstormDayW1' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, ThunderstormDayW2) == 0x0004A0, "Member 'FJackDataTableEnvSoundTable::ThunderstormDayW2' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, ThunderstormDayW3) == 0x0004B8, "Member 'FJackDataTableEnvSoundTable::ThunderstormDayW3' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, ThunderstormDayW4) == 0x0004D0, "Member 'FJackDataTableEnvSoundTable::ThunderstormDayW4' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, ThunderstormNightW1) == 0x0004E8, "Member 'FJackDataTableEnvSoundTable::ThunderstormNightW1' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, ThunderstormNightW2) == 0x000500, "Member 'FJackDataTableEnvSoundTable::ThunderstormNightW2' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, ThunderstormNightW3) == 0x000518, "Member 'FJackDataTableEnvSoundTable::ThunderstormNightW3' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, ThunderstormNightW4) == 0x000530, "Member 'FJackDataTableEnvSoundTable::ThunderstormNightW4' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, SnowDayW1) == 0x000548, "Member 'FJackDataTableEnvSoundTable::SnowDayW1' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, SnowDayW2) == 0x000560, "Member 'FJackDataTableEnvSoundTable::SnowDayW2' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, SnowDayW3) == 0x000578, "Member 'FJackDataTableEnvSoundTable::SnowDayW3' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, SnowDayW4) == 0x000590, "Member 'FJackDataTableEnvSoundTable::SnowDayW4' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, SnowNightW1) == 0x0005A8, "Member 'FJackDataTableEnvSoundTable::SnowNightW1' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, SnowNightW2) == 0x0005C0, "Member 'FJackDataTableEnvSoundTable::SnowNightW2' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, SnowNightW3) == 0x0005D8, "Member 'FJackDataTableEnvSoundTable::SnowNightW3' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, SnowNightW4) == 0x0005F0, "Member 'FJackDataTableEnvSoundTable::SnowNightW4' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, SnowstormDayW1) == 0x000608, "Member 'FJackDataTableEnvSoundTable::SnowstormDayW1' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, SnowstormDayW2) == 0x000620, "Member 'FJackDataTableEnvSoundTable::SnowstormDayW2' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, SnowstormDayW3) == 0x000638, "Member 'FJackDataTableEnvSoundTable::SnowstormDayW3' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, SnowstormDayW4) == 0x000650, "Member 'FJackDataTableEnvSoundTable::SnowstormDayW4' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, SnowstormNightW1) == 0x000668, "Member 'FJackDataTableEnvSoundTable::SnowstormNightW1' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, SnowstormNightW2) == 0x000680, "Member 'FJackDataTableEnvSoundTable::SnowstormNightW2' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, SnowstormNightW3) == 0x000698, "Member 'FJackDataTableEnvSoundTable::SnowstormNightW3' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, SnowstormNightW4) == 0x0006B0, "Member 'FJackDataTableEnvSoundTable::SnowstormNightW4' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, FogDayW1) == 0x0006C8, "Member 'FJackDataTableEnvSoundTable::FogDayW1' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, FogDayW2) == 0x0006E0, "Member 'FJackDataTableEnvSoundTable::FogDayW2' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, FogDayW3) == 0x0006F8, "Member 'FJackDataTableEnvSoundTable::FogDayW3' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, FogDayW4) == 0x000710, "Member 'FJackDataTableEnvSoundTable::FogDayW4' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, FogNightW1) == 0x000728, "Member 'FJackDataTableEnvSoundTable::FogNightW1' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, FogNightW2) == 0x000740, "Member 'FJackDataTableEnvSoundTable::FogNightW2' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, FogNightW3) == 0x000758, "Member 'FJackDataTableEnvSoundTable::FogNightW3' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, FogNightW4) == 0x000770, "Member 'FJackDataTableEnvSoundTable::FogNightW4' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, HeavyFogDayW1) == 0x000788, "Member 'FJackDataTableEnvSoundTable::HeavyFogDayW1' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, HeavyFogDayW2) == 0x0007A0, "Member 'FJackDataTableEnvSoundTable::HeavyFogDayW2' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, HeavyFogDayW3) == 0x0007B8, "Member 'FJackDataTableEnvSoundTable::HeavyFogDayW3' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, HeavyFogDayW4) == 0x0007D0, "Member 'FJackDataTableEnvSoundTable::HeavyFogDayW4' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, HeavyFogNightW1) == 0x0007E8, "Member 'FJackDataTableEnvSoundTable::HeavyFogNightW1' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, HeavyFogNightW2) == 0x000800, "Member 'FJackDataTableEnvSoundTable::HeavyFogNightW2' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, HeavyFogNightW3) == 0x000818, "Member 'FJackDataTableEnvSoundTable::HeavyFogNightW3' has a wrong offset!");
static_assert(offsetof(FJackDataTableEnvSoundTable, HeavyFogNightW4) == 0x000830, "Member 'FJackDataTableEnvSoundTable::HeavyFogNightW4' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_UmaRaceEDT_RankS_H
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceEDT_RankS_H final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceEDT_RankS_H) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceEDT_RankS_H");
static_assert(sizeof(FJackLDT_UmaRaceEDT_RankS_H) == 0x000010, "Wrong size on FJackLDT_UmaRaceEDT_RankS_H");

// ScriptStruct JackGame.JackActionCalcDamageResult
// 0x0058 (0x0058 - 0x0000)
struct FJackActionCalcDamageResult final
{
public:
	class FName                                   ActionID;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UJackGameCharacter>      CasterGameCharacter;                               // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UJackGameCharacter>      TargetGameCharacter;                               // 0x0010(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionDamageType                         DamageType;                                        // 0x0018(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Damage;                                            // 0x001C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackAttributeParam                           KougekiAttribute;                                  // 0x0020(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttributeTaisei;                                   // 0x0024(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionDamageKnockBackStatus              KnockBackStatus;                                   // 0x0028(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlowDeadStatus;                                   // 0x0029(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           InvokeOddEffectIDs;                                // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	bool                                          bCritical;                                         // 0x0040(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCounter;                                          // 0x0041(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediatelyCounter;                               // 0x0042(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUkenagasi;                                        // 0x0043(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMikawasi;                                         // 0x0044(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTateGuard;                                        // 0x0045(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBukiGuard;                                        // 0x0046(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMeityuuMiss;                                      // 0x0047(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAsutoronGuard;                                    // 0x0048(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageKanzenGuard;                                // 0x0049(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bButuriKanzenGuard;                                // 0x004A(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKaisinKanzenGuard;                                // 0x004B(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMahosute;                                         // 0x004C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMeganteSokusi;                                    // 0x004D(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSokusiMukou;                                      // 0x004E(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bYoDamageUp;                                       // 0x004F(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackHP1NokoriType                            HP1NokoriType;                                     // 0x0050(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bParamNoChange;                                    // 0x0051(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMP0Damage;                                        // 0x0052(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHP0Damage;                                        // 0x0053(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackActionCalcDamageResult) == 0x000008, "Wrong alignment on FJackActionCalcDamageResult");
static_assert(sizeof(FJackActionCalcDamageResult) == 0x000058, "Wrong size on FJackActionCalcDamageResult");
static_assert(offsetof(FJackActionCalcDamageResult, ActionID) == 0x000000, "Member 'FJackActionCalcDamageResult::ActionID' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, CasterGameCharacter) == 0x000008, "Member 'FJackActionCalcDamageResult::CasterGameCharacter' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, TargetGameCharacter) == 0x000010, "Member 'FJackActionCalcDamageResult::TargetGameCharacter' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, DamageType) == 0x000018, "Member 'FJackActionCalcDamageResult::DamageType' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, Damage) == 0x00001C, "Member 'FJackActionCalcDamageResult::Damage' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, KougekiAttribute) == 0x000020, "Member 'FJackActionCalcDamageResult::KougekiAttribute' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, AttributeTaisei) == 0x000024, "Member 'FJackActionCalcDamageResult::AttributeTaisei' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, KnockBackStatus) == 0x000028, "Member 'FJackActionCalcDamageResult::KnockBackStatus' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, bBlowDeadStatus) == 0x000029, "Member 'FJackActionCalcDamageResult::bBlowDeadStatus' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, InvokeOddEffectIDs) == 0x000030, "Member 'FJackActionCalcDamageResult::InvokeOddEffectIDs' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, bCritical) == 0x000040, "Member 'FJackActionCalcDamageResult::bCritical' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, bCounter) == 0x000041, "Member 'FJackActionCalcDamageResult::bCounter' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, bImmediatelyCounter) == 0x000042, "Member 'FJackActionCalcDamageResult::bImmediatelyCounter' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, bUkenagasi) == 0x000043, "Member 'FJackActionCalcDamageResult::bUkenagasi' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, bMikawasi) == 0x000044, "Member 'FJackActionCalcDamageResult::bMikawasi' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, bTateGuard) == 0x000045, "Member 'FJackActionCalcDamageResult::bTateGuard' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, bBukiGuard) == 0x000046, "Member 'FJackActionCalcDamageResult::bBukiGuard' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, bMeityuuMiss) == 0x000047, "Member 'FJackActionCalcDamageResult::bMeityuuMiss' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, bAsutoronGuard) == 0x000048, "Member 'FJackActionCalcDamageResult::bAsutoronGuard' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, bDamageKanzenGuard) == 0x000049, "Member 'FJackActionCalcDamageResult::bDamageKanzenGuard' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, bButuriKanzenGuard) == 0x00004A, "Member 'FJackActionCalcDamageResult::bButuriKanzenGuard' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, bKaisinKanzenGuard) == 0x00004B, "Member 'FJackActionCalcDamageResult::bKaisinKanzenGuard' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, bMahosute) == 0x00004C, "Member 'FJackActionCalcDamageResult::bMahosute' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, bMeganteSokusi) == 0x00004D, "Member 'FJackActionCalcDamageResult::bMeganteSokusi' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, bSokusiMukou) == 0x00004E, "Member 'FJackActionCalcDamageResult::bSokusiMukou' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, bYoDamageUp) == 0x00004F, "Member 'FJackActionCalcDamageResult::bYoDamageUp' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, HP1NokoriType) == 0x000050, "Member 'FJackActionCalcDamageResult::HP1NokoriType' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, bParamNoChange) == 0x000051, "Member 'FJackActionCalcDamageResult::bParamNoChange' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, bMP0Damage) == 0x000052, "Member 'FJackActionCalcDamageResult::bMP0Damage' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageResult, bHP0Damage) == 0x000053, "Member 'FJackActionCalcDamageResult::bHP0Damage' has a wrong offset!");

// ScriptStruct JackGame.JackOddEffectData
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FJackOddEffectData final
{
public:
	class FName                                   OddEffectID;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UJackOddEffectDatabase>  OddEffectDB;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UDataTable>              DT_OddEffect;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18[0x40];                                      // 0x0018(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackOddEffectData) == 0x000008, "Wrong alignment on FJackOddEffectData");
static_assert(sizeof(FJackOddEffectData) == 0x000058, "Wrong size on FJackOddEffectData");
static_assert(offsetof(FJackOddEffectData, OddEffectID) == 0x000000, "Member 'FJackOddEffectData::OddEffectID' has a wrong offset!");
static_assert(offsetof(FJackOddEffectData, OddEffectDB) == 0x000008, "Member 'FJackOddEffectData::OddEffectDB' has a wrong offset!");
static_assert(offsetof(FJackOddEffectData, DT_OddEffect) == 0x000010, "Member 'FJackOddEffectData::DT_OddEffect' has a wrong offset!");

// ScriptStruct JackGame.JackCalcOddEffectResult
// 0x0140 (0x0140 - 0x0000)
struct FJackCalcOddEffectResult final
{
public:
	struct FJackActionData                        ActionData;                                        // 0x0000(0x00B0)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackOddEffectData                     OddEffectData;                                     // 0x00B0(0x0058)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UJackGameCharacter>      CasterGameCharacter;                               // 0x0108(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UJackGameCharacter>      TargetGameCharacter;                               // 0x0110(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuccessPer;                                        // 0x0118(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x011C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FinalTaisei;                                       // 0x0120(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCritical;                                         // 0x0124(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverwriteFail;                                    // 0x0125(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_126[0x2];                                      // 0x0126(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InvalidReasonOddEffectID;                          // 0x0128(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMahosute;                                         // 0x0130(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageKanzenGuardFail;                            // 0x0131(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0xE];                                      // 0x0132(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackCalcOddEffectResult) == 0x000008, "Wrong alignment on FJackCalcOddEffectResult");
static_assert(sizeof(FJackCalcOddEffectResult) == 0x000140, "Wrong size on FJackCalcOddEffectResult");
static_assert(offsetof(FJackCalcOddEffectResult, ActionData) == 0x000000, "Member 'FJackCalcOddEffectResult::ActionData' has a wrong offset!");
static_assert(offsetof(FJackCalcOddEffectResult, OddEffectData) == 0x0000B0, "Member 'FJackCalcOddEffectResult::OddEffectData' has a wrong offset!");
static_assert(offsetof(FJackCalcOddEffectResult, CasterGameCharacter) == 0x000108, "Member 'FJackCalcOddEffectResult::CasterGameCharacter' has a wrong offset!");
static_assert(offsetof(FJackCalcOddEffectResult, TargetGameCharacter) == 0x000110, "Member 'FJackCalcOddEffectResult::TargetGameCharacter' has a wrong offset!");
static_assert(offsetof(FJackCalcOddEffectResult, SuccessPer) == 0x000118, "Member 'FJackCalcOddEffectResult::SuccessPer' has a wrong offset!");
static_assert(offsetof(FJackCalcOddEffectResult, bSuccess) == 0x00011C, "Member 'FJackCalcOddEffectResult::bSuccess' has a wrong offset!");
static_assert(offsetof(FJackCalcOddEffectResult, FinalTaisei) == 0x000120, "Member 'FJackCalcOddEffectResult::FinalTaisei' has a wrong offset!");
static_assert(offsetof(FJackCalcOddEffectResult, bCritical) == 0x000124, "Member 'FJackCalcOddEffectResult::bCritical' has a wrong offset!");
static_assert(offsetof(FJackCalcOddEffectResult, bOverwriteFail) == 0x000125, "Member 'FJackCalcOddEffectResult::bOverwriteFail' has a wrong offset!");
static_assert(offsetof(FJackCalcOddEffectResult, InvalidReasonOddEffectID) == 0x000128, "Member 'FJackCalcOddEffectResult::InvalidReasonOddEffectID' has a wrong offset!");
static_assert(offsetof(FJackCalcOddEffectResult, bMahosute) == 0x000130, "Member 'FJackCalcOddEffectResult::bMahosute' has a wrong offset!");
static_assert(offsetof(FJackCalcOddEffectResult, bDamageKanzenGuardFail) == 0x000131, "Member 'FJackCalcOddEffectResult::bDamageKanzenGuardFail' has a wrong offset!");

// ScriptStruct JackGame.JackActionScore
// 0x0078 (0x0078 - 0x0000)
struct FJackActionScore final
{
public:
	struct FJackActionCalcDamageResult            DamageResult;                                      // 0x0000(0x0058)(Edit, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FJackCalcOddEffectResult>       SetOddEffectResult;                                // 0x0058(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FJackCalcOddEffectResult>       ClearOddEffectResult;                              // 0x0068(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackActionScore) == 0x000008, "Wrong alignment on FJackActionScore");
static_assert(sizeof(FJackActionScore) == 0x000078, "Wrong size on FJackActionScore");
static_assert(offsetof(FJackActionScore, DamageResult) == 0x000000, "Member 'FJackActionScore::DamageResult' has a wrong offset!");
static_assert(offsetof(FJackActionScore, SetOddEffectResult) == 0x000058, "Member 'FJackActionScore::SetOddEffectResult' has a wrong offset!");
static_assert(offsetof(FJackActionScore, ClearOddEffectResult) == 0x000068, "Member 'FJackActionScore::ClearOddEffectResult' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotMachineCondition
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMachineCondition final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMachineCondition) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMachineCondition");
static_assert(sizeof(FJackLDT_MeosiSlotMachineCondition) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMachineCondition");

// ScriptStruct JackGame.JackDataTableCutSceneLipInfo
// 0x0030 (0x0038 - 0x0008)
struct FJackDataTableCutSceneLipInfo final : public FTableRowBase
{
public:
	class FName                                   SerifuID;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lip_aa;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lip_ln;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lip_fv;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lip_ee;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lip_oo;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lip_sh;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lip_bmp;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableCutSceneLipInfo) == 0x000008, "Wrong alignment on FJackDataTableCutSceneLipInfo");
static_assert(sizeof(FJackDataTableCutSceneLipInfo) == 0x000038, "Wrong size on FJackDataTableCutSceneLipInfo");
static_assert(offsetof(FJackDataTableCutSceneLipInfo, SerifuID) == 0x000008, "Member 'FJackDataTableCutSceneLipInfo::SerifuID' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLipInfo, StartTime) == 0x000010, "Member 'FJackDataTableCutSceneLipInfo::StartTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLipInfo, Lip_aa) == 0x000014, "Member 'FJackDataTableCutSceneLipInfo::Lip_aa' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLipInfo, Lip_ln) == 0x000018, "Member 'FJackDataTableCutSceneLipInfo::Lip_ln' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLipInfo, Lip_fv) == 0x00001C, "Member 'FJackDataTableCutSceneLipInfo::Lip_fv' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLipInfo, Lip_ee) == 0x000020, "Member 'FJackDataTableCutSceneLipInfo::Lip_ee' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLipInfo, Lip_oo) == 0x000024, "Member 'FJackDataTableCutSceneLipInfo::Lip_oo' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLipInfo, Lip_sh) == 0x000028, "Member 'FJackDataTableCutSceneLipInfo::Lip_sh' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLipInfo, Lip_bmp) == 0x00002C, "Member 'FJackDataTableCutSceneLipInfo::Lip_bmp' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLipInfo, BlendInTime) == 0x000030, "Member 'FJackDataTableCutSceneLipInfo::BlendInTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneLipInfo, BlendOutTime) == 0x000034, "Member 'FJackDataTableCutSceneLipInfo::BlendOutTime' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_TextPackPlatform
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextPackPlatform final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextPackPlatform) == 0x000008, "Wrong alignment on FJackLDT_TextPackPlatform");
static_assert(sizeof(FJackLDT_TextPackPlatform) == 0x000010, "Wrong size on FJackLDT_TextPackPlatform");

// ScriptStruct JackGame.JackPreparationViewData
// 0x0010 (0x0010 - 0x0000)
struct FJackPreparationViewData final
{
public:
	TSubclassOf<class UJackCameraData>            CameraDataClass;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CorrespondingRadius;                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackPreparationViewData) == 0x000008, "Wrong alignment on FJackPreparationViewData");
static_assert(sizeof(FJackPreparationViewData) == 0x000010, "Wrong size on FJackPreparationViewData");
static_assert(offsetof(FJackPreparationViewData, CameraDataClass) == 0x000000, "Member 'FJackPreparationViewData::CameraDataClass' has a wrong offset!");
static_assert(offsetof(FJackPreparationViewData, CorrespondingRadius) == 0x000008, "Member 'FJackPreparationViewData::CorrespondingRadius' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_ZukanSeisokuti
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ZukanSeisokuti final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ZukanSeisokuti) == 0x000008, "Wrong alignment on FJackLDT_ZukanSeisokuti");
static_assert(sizeof(FJackLDT_ZukanSeisokuti) == 0x000010, "Wrong size on FJackLDT_ZukanSeisokuti");

// ScriptStruct JackGame.JackBattleResultFormations
// 0x0010 (0x0010 - 0x0000)
struct FJackBattleResultFormations final
{
public:
	TArray<struct FVector>                        Formation;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackBattleResultFormations) == 0x000008, "Wrong alignment on FJackBattleResultFormations");
static_assert(sizeof(FJackBattleResultFormations) == 0x000010, "Wrong size on FJackBattleResultFormations");
static_assert(offsetof(FJackBattleResultFormations, Formation) == 0x000000, "Member 'FJackBattleResultFormations::Formation' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotHandHsToNm
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMeosiSlotHandHsToNm final : public FTableRowBase
{
public:
	EJackMeosiSlotHand                            NmHand;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotHandHsToNm) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotHandHsToNm");
static_assert(sizeof(FJackDataTableMeosiSlotHandHsToNm) == 0x000010, "Wrong size on FJackDataTableMeosiSlotHandHsToNm");
static_assert(offsetof(FJackDataTableMeosiSlotHandHsToNm, NmHand) == 0x000008, "Member 'FJackDataTableMeosiSlotHandHsToNm::NmHand' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotBgChgWaitGames
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotBgChgWaitGames final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotBgChgWaitGames) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotBgChgWaitGames");
static_assert(sizeof(FJackLDT_MeosiSlotBgChgWaitGames) == 0x000010, "Wrong size on FJackLDT_MeosiSlotBgChgWaitGames");

// ScriptStruct JackGame.JackLDT_BGM
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_BGM final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_BGM) == 0x000008, "Wrong alignment on FJackLDT_BGM");
static_assert(sizeof(FJackLDT_BGM) == 0x000010, "Wrong size on FJackLDT_BGM");

// ScriptStruct JackGame.JackOddEffect_OnTurnEndResult
// 0x0020 (0x0020 - 0x0000)
struct FJackOddEffect_OnTurnEndResult final
{
public:
	TArray<class FName>                           ClearOddEffectIDArray;                             // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackOddEffect_OnTurnEndResult) == 0x000008, "Wrong alignment on FJackOddEffect_OnTurnEndResult");
static_assert(sizeof(FJackOddEffect_OnTurnEndResult) == 0x000020, "Wrong size on FJackOddEffect_OnTurnEndResult");
static_assert(offsetof(FJackOddEffect_OnTurnEndResult, ClearOddEffectIDArray) == 0x000000, "Member 'FJackOddEffect_OnTurnEndResult::ClearOddEffectIDArray' has a wrong offset!");

// ScriptStruct JackGame.JackActionCalcOddEffectParam
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FJackActionCalcOddEffectParam final
{
public:
	int32                                         ActionDepth;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x18];                                       // 0x0004(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HitGroupCount;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FJackActionCalcOddEffectParam) == 0x000008, "Wrong alignment on FJackActionCalcOddEffectParam");
static_assert(sizeof(FJackActionCalcOddEffectParam) == 0x000020, "Wrong size on FJackActionCalcOddEffectParam");
static_assert(offsetof(FJackActionCalcOddEffectParam, ActionDepth) == 0x000000, "Member 'FJackActionCalcOddEffectParam::ActionDepth' has a wrong offset!");
static_assert(offsetof(FJackActionCalcOddEffectParam, HitGroupCount) == 0x00001C, "Member 'FJackActionCalcOddEffectParam::HitGroupCount' has a wrong offset!");

// ScriptStruct JackGame.JackQuestReward
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FJackQuestReward final
{
public:
	EJackQuestRewardType                          RewardType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EventItemId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tokugi;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PowerUpText;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackQuestReward) == 0x000008, "Wrong alignment on FJackQuestReward");
static_assert(sizeof(FJackQuestReward) == 0x000020, "Wrong size on FJackQuestReward");
static_assert(offsetof(FJackQuestReward, RewardType) == 0x000000, "Member 'FJackQuestReward::RewardType' has a wrong offset!");
static_assert(offsetof(FJackQuestReward, EventItemId) == 0x000008, "Member 'FJackQuestReward::EventItemId' has a wrong offset!");
static_assert(offsetof(FJackQuestReward, Tokugi) == 0x000010, "Member 'FJackQuestReward::Tokugi' has a wrong offset!");
static_assert(offsetof(FJackQuestReward, PowerUpText) == 0x000018, "Member 'FJackQuestReward::PowerUpText' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableItemGettable_TreasureBox
// 0x0070 (0x0078 - 0x0008)
struct FJackDataTableItemGettable_TreasureBox final : public FTableRowBase
{
public:
	class FName                                   GetFlag;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapVolumeID_001;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapVolumeID_002;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapVolumeID_003;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackTreasureBoxPlacementCondition            PlacementConditionType;                            // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PlacementConditionParameter;                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold;                                              // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemID_001;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum_001;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemID_002;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum_002;                                       // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemID_003;                                        // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum_003;                                       // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MimicEventBattleID;                                // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableItemGettable_TreasureBox) == 0x000008, "Wrong alignment on FJackDataTableItemGettable_TreasureBox");
static_assert(sizeof(FJackDataTableItemGettable_TreasureBox) == 0x000078, "Wrong size on FJackDataTableItemGettable_TreasureBox");
static_assert(offsetof(FJackDataTableItemGettable_TreasureBox, GetFlag) == 0x000008, "Member 'FJackDataTableItemGettable_TreasureBox::GetFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_TreasureBox, MapVolumeID_001) == 0x000010, "Member 'FJackDataTableItemGettable_TreasureBox::MapVolumeID_001' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_TreasureBox, MapVolumeID_002) == 0x000018, "Member 'FJackDataTableItemGettable_TreasureBox::MapVolumeID_002' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_TreasureBox, MapVolumeID_003) == 0x000020, "Member 'FJackDataTableItemGettable_TreasureBox::MapVolumeID_003' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_TreasureBox, PlacementConditionType) == 0x000028, "Member 'FJackDataTableItemGettable_TreasureBox::PlacementConditionType' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_TreasureBox, PlacementConditionParameter) == 0x000030, "Member 'FJackDataTableItemGettable_TreasureBox::PlacementConditionParameter' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_TreasureBox, Gold) == 0x000038, "Member 'FJackDataTableItemGettable_TreasureBox::Gold' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_TreasureBox, ItemID_001) == 0x000040, "Member 'FJackDataTableItemGettable_TreasureBox::ItemID_001' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_TreasureBox, ItemNum_001) == 0x000048, "Member 'FJackDataTableItemGettable_TreasureBox::ItemNum_001' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_TreasureBox, ItemID_002) == 0x000050, "Member 'FJackDataTableItemGettable_TreasureBox::ItemID_002' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_TreasureBox, ItemNum_002) == 0x000058, "Member 'FJackDataTableItemGettable_TreasureBox::ItemNum_002' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_TreasureBox, ItemID_003) == 0x000060, "Member 'FJackDataTableItemGettable_TreasureBox::ItemID_003' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_TreasureBox, ItemNum_003) == 0x000068, "Member 'FJackDataTableItemGettable_TreasureBox::ItemNum_003' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_TreasureBox, MimicEventBattleID) == 0x000070, "Member 'FJackDataTableItemGettable_TreasureBox::MimicEventBattleID' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_PrinSkirt_P006_L2BAC
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_PrinSkirt_P006_L2BAC final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_PrinSkirt_P006_L2BAC) == 0x000008, "Wrong alignment on FJackLDT_RtEx_PrinSkirt_P006_L2BAC");
static_assert(sizeof(FJackLDT_RtEx_PrinSkirt_P006_L2BAC) == 0x000010, "Wrong size on FJackLDT_RtEx_PrinSkirt_P006_L2BAC");

// ScriptStruct JackGame.JackDataTableBattleHazukasiiNoroiText
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableBattleHazukasiiNoroiText final : public FTableRowBase
{
public:
	class FName                                   HazukasiiNoroiCharacterID;                         // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HazukasiiNoroiText1;                               // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HazukasiiNoroiText2;                               // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableBattleHazukasiiNoroiText) == 0x000008, "Wrong alignment on FJackDataTableBattleHazukasiiNoroiText");
static_assert(sizeof(FJackDataTableBattleHazukasiiNoroiText) == 0x000020, "Wrong size on FJackDataTableBattleHazukasiiNoroiText");
static_assert(offsetof(FJackDataTableBattleHazukasiiNoroiText, HazukasiiNoroiCharacterID) == 0x000008, "Member 'FJackDataTableBattleHazukasiiNoroiText::HazukasiiNoroiCharacterID' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleHazukasiiNoroiText, HazukasiiNoroiText1) == 0x000010, "Member 'FJackDataTableBattleHazukasiiNoroiText::HazukasiiNoroiText1' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleHazukasiiNoroiText, HazukasiiNoroiText2) == 0x000018, "Member 'FJackDataTableBattleHazukasiiNoroiText::HazukasiiNoroiText2' has a wrong offset!");

// ScriptStruct JackGame.JackPafuPafuMessageInfo
// 0x0018 (0x0018 - 0x0000)
struct FJackPafuPafuMessageInfo final
{
public:
	EJackCharacter                                TargetCharacterType;                               // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TextID;                                            // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackPafuPafuMessageInfo) == 0x000008, "Wrong alignment on FJackPafuPafuMessageInfo");
static_assert(sizeof(FJackPafuPafuMessageInfo) == 0x000018, "Wrong size on FJackPafuPafuMessageInfo");
static_assert(offsetof(FJackPafuPafuMessageInfo, TargetCharacterType) == 0x000000, "Member 'FJackPafuPafuMessageInfo::TargetCharacterType' has a wrong offset!");
static_assert(offsetof(FJackPafuPafuMessageInfo, TextID) == 0x000008, "Member 'FJackPafuPafuMessageInfo::TextID' has a wrong offset!");

// ScriptStruct JackGame.JackActionCalcDamageParam
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FJackActionCalcDamageParam final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OverrideActionDamageID;                            // 0x0020(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         HitGroupCount;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         HitCount;                                          // 0x002C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         AnyDamageHitCount;                                 // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ExtentCharacterNum;                                // 0x0034(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TargetHP;                                          // 0x0038(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TargetMP;                                          // 0x003C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ReverseDamage;                                     // 0x0040(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackActionCalcDamageParam) == 0x000008, "Wrong alignment on FJackActionCalcDamageParam");
static_assert(sizeof(FJackActionCalcDamageParam) == 0x000050, "Wrong size on FJackActionCalcDamageParam");
static_assert(offsetof(FJackActionCalcDamageParam, OverrideActionDamageID) == 0x000020, "Member 'FJackActionCalcDamageParam::OverrideActionDamageID' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageParam, HitGroupCount) == 0x000028, "Member 'FJackActionCalcDamageParam::HitGroupCount' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageParam, HitCount) == 0x00002C, "Member 'FJackActionCalcDamageParam::HitCount' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageParam, AnyDamageHitCount) == 0x000030, "Member 'FJackActionCalcDamageParam::AnyDamageHitCount' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageParam, ExtentCharacterNum) == 0x000034, "Member 'FJackActionCalcDamageParam::ExtentCharacterNum' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageParam, TargetHP) == 0x000038, "Member 'FJackActionCalcDamageParam::TargetHP' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageParam, TargetMP) == 0x00003C, "Member 'FJackActionCalcDamageParam::TargetMP' has a wrong offset!");
static_assert(offsetof(FJackActionCalcDamageParam, ReverseDamage) == 0x000040, "Member 'FJackActionCalcDamageParam::ReverseDamage' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Monster
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Monster final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Monster) == 0x000008, "Wrong alignment on FJackLDT_Monster");
static_assert(sizeof(FJackLDT_Monster) == 0x000010, "Wrong size on FJackLDT_Monster");

// ScriptStruct JackGame.JackLDT_MeosiSlotDrakeeEffect1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotDrakeeEffect1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotDrakeeEffect1) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotDrakeeEffect1");
static_assert(sizeof(FJackLDT_MeosiSlotDrakeeEffect1) == 0x000010, "Wrong size on FJackLDT_MeosiSlotDrakeeEffect1");

// ScriptStruct JackGame.JackDataTableModeChangeType
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableModeChangeType final : public FTableRowBase
{
public:
	class FName                                   JumpPointID;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangeTo2D;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackLoadingScreen                            LoadingScreenType;                                 // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableModeChangeType) == 0x000008, "Wrong alignment on FJackDataTableModeChangeType");
static_assert(sizeof(FJackDataTableModeChangeType) == 0x000018, "Wrong size on FJackDataTableModeChangeType");
static_assert(offsetof(FJackDataTableModeChangeType, JumpPointID) == 0x000008, "Member 'FJackDataTableModeChangeType::JumpPointID' has a wrong offset!");
static_assert(offsetof(FJackDataTableModeChangeType, bChangeTo2D) == 0x000010, "Member 'FJackDataTableModeChangeType::bChangeTo2D' has a wrong offset!");
static_assert(offsetof(FJackDataTableModeChangeType, LoadingScreenType) == 0x000011, "Member 'FJackDataTableModeChangeType::LoadingScreenType' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_GameFlagDataCutScene
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_GameFlagDataCutScene final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_GameFlagDataCutScene) == 0x000008, "Wrong alignment on FJackLDT_GameFlagDataCutScene");
static_assert(sizeof(FJackLDT_GameFlagDataCutScene) == 0x000010, "Wrong size on FJackLDT_GameFlagDataCutScene");

// ScriptStruct JackGame.JackDataTableMeosiSlotTransitionProbability_CZ
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMeosiSlotTransitionProbability_CZ final : public FTableRowBase
{
public:
	int32                                         Default;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         High;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Heaven;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotTransitionProbability_CZ) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotTransitionProbability_CZ");
static_assert(sizeof(FJackDataTableMeosiSlotTransitionProbability_CZ) == 0x000018, "Wrong size on FJackDataTableMeosiSlotTransitionProbability_CZ");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_CZ, Default) == 0x000008, "Member 'FJackDataTableMeosiSlotTransitionProbability_CZ::Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_CZ, High) == 0x00000C, "Member 'FJackDataTableMeosiSlotTransitionProbability_CZ::High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_CZ, Heaven) == 0x000010, "Member 'FJackDataTableMeosiSlotTransitionProbability_CZ::Heaven' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotItemParam
// 0x0038 (0x0040 - 0x0008)
struct FJackDataTableMeosiSlotItemParam final : public FTableRowBase
{
public:
	class FString                                 NameText;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotItemKind                        Kind;                                              // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                Texture;                                           // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotItemSpec                        ItemID;                                            // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotItemParam) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotItemParam");
static_assert(sizeof(FJackDataTableMeosiSlotItemParam) == 0x000040, "Wrong size on FJackDataTableMeosiSlotItemParam");
static_assert(offsetof(FJackDataTableMeosiSlotItemParam, NameText) == 0x000008, "Member 'FJackDataTableMeosiSlotItemParam::NameText' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotItemParam, Kind) == 0x000018, "Member 'FJackDataTableMeosiSlotItemParam::Kind' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotItemParam, Texture) == 0x000020, "Member 'FJackDataTableMeosiSlotItemParam::Texture' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotItemParam, ItemID) == 0x000038, "Member 'FJackDataTableMeosiSlotItemParam::ItemID' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_UITokugiPanelSkillLine
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UITokugiPanelSkillLine final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UITokugiPanelSkillLine) == 0x000008, "Wrong alignment on FJackLDT_UITokugiPanelSkillLine");
static_assert(sizeof(FJackLDT_UITokugiPanelSkillLine) == 0x000010, "Wrong size on FJackLDT_UITokugiPanelSkillLine");

// ScriptStruct JackGame.JackActionMessageCompactInfo
// 0x0020 (0x0020 - 0x0000)
struct FJackActionMessageCompactInfo final
{
public:
	int32                                         SlideParam;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackOddEffectConditionType                   ConditionType;                                     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleMessageCompactType                 ForceMatomeType;                                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleMessageCompactSubType              MatomeSubType;                                     // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BattleTextID;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJackGameCharacter*                     NounGameCharacter;                                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OddEffectID;                                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackActionMessageCompactInfo) == 0x000008, "Wrong alignment on FJackActionMessageCompactInfo");
static_assert(sizeof(FJackActionMessageCompactInfo) == 0x000020, "Wrong size on FJackActionMessageCompactInfo");
static_assert(offsetof(FJackActionMessageCompactInfo, SlideParam) == 0x000000, "Member 'FJackActionMessageCompactInfo::SlideParam' has a wrong offset!");
static_assert(offsetof(FJackActionMessageCompactInfo, ConditionType) == 0x000004, "Member 'FJackActionMessageCompactInfo::ConditionType' has a wrong offset!");
static_assert(offsetof(FJackActionMessageCompactInfo, ForceMatomeType) == 0x000005, "Member 'FJackActionMessageCompactInfo::ForceMatomeType' has a wrong offset!");
static_assert(offsetof(FJackActionMessageCompactInfo, MatomeSubType) == 0x000006, "Member 'FJackActionMessageCompactInfo::MatomeSubType' has a wrong offset!");
static_assert(offsetof(FJackActionMessageCompactInfo, BattleTextID) == 0x000008, "Member 'FJackActionMessageCompactInfo::BattleTextID' has a wrong offset!");
static_assert(offsetof(FJackActionMessageCompactInfo, NounGameCharacter) == 0x000010, "Member 'FJackActionMessageCompactInfo::NounGameCharacter' has a wrong offset!");
static_assert(offsetof(FJackActionMessageCompactInfo, OddEffectID) == 0x000018, "Member 'FJackActionMessageCompactInfo::OddEffectID' has a wrong offset!");

// ScriptStruct JackGame.JackUMGMapTextItemGroup
// 0x0040 (0x0040 - 0x0000)
struct FJackUMGMapTextItemGroup final
{
public:
	class FName                                   ConfigID;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UJackUMGMapTextLocationNameItem>> LocationNameItems;                                 // 0x0008(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UJackUMGMapTextImageItem>> ArrowItems;                                        // 0x0018(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UJackUMGMapTextImageItem>> MapSymbolItems;                                    // 0x0028(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGMapTextItemGroup) == 0x000008, "Wrong alignment on FJackUMGMapTextItemGroup");
static_assert(sizeof(FJackUMGMapTextItemGroup) == 0x000040, "Wrong size on FJackUMGMapTextItemGroup");
static_assert(offsetof(FJackUMGMapTextItemGroup, ConfigID) == 0x000000, "Member 'FJackUMGMapTextItemGroup::ConfigID' has a wrong offset!");
static_assert(offsetof(FJackUMGMapTextItemGroup, LocationNameItems) == 0x000008, "Member 'FJackUMGMapTextItemGroup::LocationNameItems' has a wrong offset!");
static_assert(offsetof(FJackUMGMapTextItemGroup, ArrowItems) == 0x000018, "Member 'FJackUMGMapTextItemGroup::ArrowItems' has a wrong offset!");
static_assert(offsetof(FJackUMGMapTextItemGroup, MapSymbolItems) == 0x000028, "Member 'FJackUMGMapTextItemGroup::MapSymbolItems' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_F11
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_F11 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_F11) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_F11");
static_assert(sizeof(FJackLDT_MonsterDeploy_F11) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_F11");

// ScriptStruct JackGame.JackReferenceParamInfo
// 0x001C (0x001C - 0x0000)
struct FJackReferenceParamInfo final
{
public:
	int32                                         BaseMonster;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseMin;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseMax;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackReferenceParam                           ReferenceParam;                                    // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReferenceHoseiMin;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReferenceHoseiMax;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Random;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackReferenceParamInfo) == 0x000004, "Wrong alignment on FJackReferenceParamInfo");
static_assert(sizeof(FJackReferenceParamInfo) == 0x00001C, "Wrong size on FJackReferenceParamInfo");
static_assert(offsetof(FJackReferenceParamInfo, BaseMonster) == 0x000000, "Member 'FJackReferenceParamInfo::BaseMonster' has a wrong offset!");
static_assert(offsetof(FJackReferenceParamInfo, BaseMin) == 0x000004, "Member 'FJackReferenceParamInfo::BaseMin' has a wrong offset!");
static_assert(offsetof(FJackReferenceParamInfo, BaseMax) == 0x000008, "Member 'FJackReferenceParamInfo::BaseMax' has a wrong offset!");
static_assert(offsetof(FJackReferenceParamInfo, ReferenceParam) == 0x00000C, "Member 'FJackReferenceParamInfo::ReferenceParam' has a wrong offset!");
static_assert(offsetof(FJackReferenceParamInfo, ReferenceHoseiMin) == 0x000010, "Member 'FJackReferenceParamInfo::ReferenceHoseiMin' has a wrong offset!");
static_assert(offsetof(FJackReferenceParamInfo, ReferenceHoseiMax) == 0x000014, "Member 'FJackReferenceParamInfo::ReferenceHoseiMax' has a wrong offset!");
static_assert(offsetof(FJackReferenceParamInfo, Random) == 0x000018, "Member 'FJackReferenceParamInfo::Random' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MonsterSlotEffect
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterSlotEffect final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterSlotEffect) == 0x000008, "Wrong alignment on FJackLDT_MonsterSlotEffect");
static_assert(sizeof(FJackLDT_MonsterSlotEffect) == 0x000010, "Wrong size on FJackLDT_MonsterSlotEffect");

// ScriptStruct JackGame.JackDataTableCoinExchangeShop
// 0x00D0 (0x00D8 - 0x0008)
struct FJackDataTableCoinExchangeShop final : public FTableRowBase
{
public:
	class FString                                 TalkTypeID;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrizeId_01;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrizeId_02;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrizeId_03;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrizeId_04;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrizeId_05;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrizeId_06;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrizeId_07;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrizeId_08;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrizeId_09;                                        // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrizeId_10;                                        // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrizeId_11;                                        // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrizeId_12;                                        // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrizeId_13;                                        // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrizeId_14;                                        // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrizeId_15;                                        // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrizeId_16;                                        // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrizeId_17;                                        // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrizeId_18;                                        // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrizeId_19;                                        // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrizeId_20;                                        // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrizeId_21;                                        // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrizeId_22;                                        // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrizeId_23;                                        // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrizeId_24;                                        // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableCoinExchangeShop) == 0x000008, "Wrong alignment on FJackDataTableCoinExchangeShop");
static_assert(sizeof(FJackDataTableCoinExchangeShop) == 0x0000D8, "Wrong size on FJackDataTableCoinExchangeShop");
static_assert(offsetof(FJackDataTableCoinExchangeShop, TalkTypeID) == 0x000008, "Member 'FJackDataTableCoinExchangeShop::TalkTypeID' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchangeShop, PrizeId_01) == 0x000018, "Member 'FJackDataTableCoinExchangeShop::PrizeId_01' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchangeShop, PrizeId_02) == 0x000020, "Member 'FJackDataTableCoinExchangeShop::PrizeId_02' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchangeShop, PrizeId_03) == 0x000028, "Member 'FJackDataTableCoinExchangeShop::PrizeId_03' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchangeShop, PrizeId_04) == 0x000030, "Member 'FJackDataTableCoinExchangeShop::PrizeId_04' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchangeShop, PrizeId_05) == 0x000038, "Member 'FJackDataTableCoinExchangeShop::PrizeId_05' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchangeShop, PrizeId_06) == 0x000040, "Member 'FJackDataTableCoinExchangeShop::PrizeId_06' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchangeShop, PrizeId_07) == 0x000048, "Member 'FJackDataTableCoinExchangeShop::PrizeId_07' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchangeShop, PrizeId_08) == 0x000050, "Member 'FJackDataTableCoinExchangeShop::PrizeId_08' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchangeShop, PrizeId_09) == 0x000058, "Member 'FJackDataTableCoinExchangeShop::PrizeId_09' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchangeShop, PrizeId_10) == 0x000060, "Member 'FJackDataTableCoinExchangeShop::PrizeId_10' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchangeShop, PrizeId_11) == 0x000068, "Member 'FJackDataTableCoinExchangeShop::PrizeId_11' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchangeShop, PrizeId_12) == 0x000070, "Member 'FJackDataTableCoinExchangeShop::PrizeId_12' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchangeShop, PrizeId_13) == 0x000078, "Member 'FJackDataTableCoinExchangeShop::PrizeId_13' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchangeShop, PrizeId_14) == 0x000080, "Member 'FJackDataTableCoinExchangeShop::PrizeId_14' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchangeShop, PrizeId_15) == 0x000088, "Member 'FJackDataTableCoinExchangeShop::PrizeId_15' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchangeShop, PrizeId_16) == 0x000090, "Member 'FJackDataTableCoinExchangeShop::PrizeId_16' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchangeShop, PrizeId_17) == 0x000098, "Member 'FJackDataTableCoinExchangeShop::PrizeId_17' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchangeShop, PrizeId_18) == 0x0000A0, "Member 'FJackDataTableCoinExchangeShop::PrizeId_18' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchangeShop, PrizeId_19) == 0x0000A8, "Member 'FJackDataTableCoinExchangeShop::PrizeId_19' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchangeShop, PrizeId_20) == 0x0000B0, "Member 'FJackDataTableCoinExchangeShop::PrizeId_20' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchangeShop, PrizeId_21) == 0x0000B8, "Member 'FJackDataTableCoinExchangeShop::PrizeId_21' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchangeShop, PrizeId_22) == 0x0000C0, "Member 'FJackDataTableCoinExchangeShop::PrizeId_22' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchangeShop, PrizeId_23) == 0x0000C8, "Member 'FJackDataTableCoinExchangeShop::PrizeId_23' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinExchangeShop, PrizeId_24) == 0x0000D0, "Member 'FJackDataTableCoinExchangeShop::PrizeId_24' has a wrong offset!");

// ScriptStruct JackGame.JackTextDataTableContainer
// 0x0010 (0x0010 - 0x0000)
struct FJackTextDataTableContainer final
{
public:
	EJackTextCategory                             Category;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             DataTable;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackTextDataTableContainer) == 0x000008, "Wrong alignment on FJackTextDataTableContainer");
static_assert(sizeof(FJackTextDataTableContainer) == 0x000010, "Wrong size on FJackTextDataTableContainer");
static_assert(offsetof(FJackTextDataTableContainer, Category) == 0x000000, "Member 'FJackTextDataTableContainer::Category' has a wrong offset!");
static_assert(offsetof(FJackTextDataTableContainer, DataTable) == 0x000008, "Member 'FJackTextDataTableContainer::DataTable' has a wrong offset!");

// ScriptStruct JackGame.JackAirBubbleAsset
// 0x0010 (0x0010 - 0x0000)
struct FJackAirBubbleAsset final
{
public:
	class UParticleSystem*                        ParticleSystem;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackAirBubbleAsset) == 0x000008, "Wrong alignment on FJackAirBubbleAsset");
static_assert(sizeof(FJackAirBubbleAsset) == 0x000010, "Wrong size on FJackAirBubbleAsset");
static_assert(offsetof(FJackAirBubbleAsset, ParticleSystem) == 0x000000, "Member 'FJackAirBubbleAsset::ParticleSystem' has a wrong offset!");
static_assert(offsetof(FJackAirBubbleAsset, Sound) == 0x000008, "Member 'FJackAirBubbleAsset::Sound' has a wrong offset!");

// ScriptStruct JackGame.JackAnimControlTrackKey
// 0x0010 (0x0010 - 0x0000)
struct FJackAnimControlTrackKey final
{
public:
	float                                         AnimInterpSec;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendRate;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkipInterpSec;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsApplyAnimationRateFromDT;                       // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAnimControlTrackKey) == 0x000004, "Wrong alignment on FJackAnimControlTrackKey");
static_assert(sizeof(FJackAnimControlTrackKey) == 0x000010, "Wrong size on FJackAnimControlTrackKey");
static_assert(offsetof(FJackAnimControlTrackKey, AnimInterpSec) == 0x000000, "Member 'FJackAnimControlTrackKey::AnimInterpSec' has a wrong offset!");
static_assert(offsetof(FJackAnimControlTrackKey, BlendRate) == 0x000004, "Member 'FJackAnimControlTrackKey::BlendRate' has a wrong offset!");
static_assert(offsetof(FJackAnimControlTrackKey, SkipInterpSec) == 0x000008, "Member 'FJackAnimControlTrackKey::SkipInterpSec' has a wrong offset!");
static_assert(offsetof(FJackAnimControlTrackKey, bIsApplyAnimationRateFromDT) == 0x00000C, "Member 'FJackAnimControlTrackKey::bIsApplyAnimationRateFromDT' has a wrong offset!");

// ScriptStruct JackGame.JackUpdatingDynamicsCondition
// 0x000A (0x000A - 0x0000)
struct FJackUpdatingDynamicsCondition final
{
public:
	bool                                          bUpdateUpperDynamicState;                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateLowerDynamicState;                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateBodyExDynamicState;                         // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateHairDynamicState;                           // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateHairExDynamicState;                         // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateMantleDynamicState;                         // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateOtherDynamicState;                          // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateCacheVelocity;                              // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateWindBaseCach;                               // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateWindRandomizeCache;                         // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUpdatingDynamicsCondition) == 0x000001, "Wrong alignment on FJackUpdatingDynamicsCondition");
static_assert(sizeof(FJackUpdatingDynamicsCondition) == 0x00000A, "Wrong size on FJackUpdatingDynamicsCondition");
static_assert(offsetof(FJackUpdatingDynamicsCondition, bUpdateUpperDynamicState) == 0x000000, "Member 'FJackUpdatingDynamicsCondition::bUpdateUpperDynamicState' has a wrong offset!");
static_assert(offsetof(FJackUpdatingDynamicsCondition, bUpdateLowerDynamicState) == 0x000001, "Member 'FJackUpdatingDynamicsCondition::bUpdateLowerDynamicState' has a wrong offset!");
static_assert(offsetof(FJackUpdatingDynamicsCondition, bUpdateBodyExDynamicState) == 0x000002, "Member 'FJackUpdatingDynamicsCondition::bUpdateBodyExDynamicState' has a wrong offset!");
static_assert(offsetof(FJackUpdatingDynamicsCondition, bUpdateHairDynamicState) == 0x000003, "Member 'FJackUpdatingDynamicsCondition::bUpdateHairDynamicState' has a wrong offset!");
static_assert(offsetof(FJackUpdatingDynamicsCondition, bUpdateHairExDynamicState) == 0x000004, "Member 'FJackUpdatingDynamicsCondition::bUpdateHairExDynamicState' has a wrong offset!");
static_assert(offsetof(FJackUpdatingDynamicsCondition, bUpdateMantleDynamicState) == 0x000005, "Member 'FJackUpdatingDynamicsCondition::bUpdateMantleDynamicState' has a wrong offset!");
static_assert(offsetof(FJackUpdatingDynamicsCondition, bUpdateOtherDynamicState) == 0x000006, "Member 'FJackUpdatingDynamicsCondition::bUpdateOtherDynamicState' has a wrong offset!");
static_assert(offsetof(FJackUpdatingDynamicsCondition, bUpdateCacheVelocity) == 0x000007, "Member 'FJackUpdatingDynamicsCondition::bUpdateCacheVelocity' has a wrong offset!");
static_assert(offsetof(FJackUpdatingDynamicsCondition, bUpdateWindBaseCach) == 0x000008, "Member 'FJackUpdatingDynamicsCondition::bUpdateWindBaseCach' has a wrong offset!");
static_assert(offsetof(FJackUpdatingDynamicsCondition, bUpdateWindRandomizeCache) == 0x000009, "Member 'FJackUpdatingDynamicsCondition::bUpdateWindRandomizeCache' has a wrong offset!");

// ScriptStruct JackGame.JackLookAtNodeParam
// 0x0028 (0x0028 - 0x0000)
struct FJackLookAtNodeParam final
{
public:
	struct FJackLookAtClamp                       LookAtClamp;                                       // 0x0000(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RollRate;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NodeAlpha;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackLookAtNodeParam) == 0x000004, "Wrong alignment on FJackLookAtNodeParam");
static_assert(sizeof(FJackLookAtNodeParam) == 0x000028, "Wrong size on FJackLookAtNodeParam");
static_assert(offsetof(FJackLookAtNodeParam, LookAtClamp) == 0x000000, "Member 'FJackLookAtNodeParam::LookAtClamp' has a wrong offset!");
static_assert(offsetof(FJackLookAtNodeParam, RollRate) == 0x000020, "Member 'FJackLookAtNodeParam::RollRate' has a wrong offset!");
static_assert(offsetof(FJackLookAtNodeParam, NodeAlpha) == 0x000024, "Member 'FJackLookAtNodeParam::NodeAlpha' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_TextPackLocalization
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextPackLocalization final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextPackLocalization) == 0x000008, "Wrong alignment on FJackLDT_TextPackLocalization");
static_assert(sizeof(FJackLDT_TextPackLocalization) == 0x000010, "Wrong size on FJackLDT_TextPackLocalization");

// ScriptStruct JackGame.JackLDT_VoiceDrama_V_010
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_VoiceDrama_V_010 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_VoiceDrama_V_010) == 0x000008, "Wrong alignment on FJackLDT_VoiceDrama_V_010");
static_assert(sizeof(FJackLDT_VoiceDrama_V_010) == 0x000010, "Wrong size on FJackLDT_VoiceDrama_V_010");

// ScriptStruct JackGame.JackAnimNode_FootPlacementIK
// 0x00A0 (0x0110 - 0x0070)
struct FJackAnimNode_FootPlacementIK final : public FAnimNode_SkeletalControlBase
{
public:
	bool                                          bActive;                                           // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         IKBone;                                            // 0x0078(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                EffectorLocation;                                  // 0x0090(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                JointTargetLocation;                               // 0x009C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             JointTargetLocationSpace;                          // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   JointTargetSpaceBoneName;                          // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAllowStretching : 1;                              // 0x00B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              StretchLimits;                                     // 0x00BC(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitZOffset;                                        // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowUnderZ;                                      // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0xB];                                       // 0x00CD(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EffectorSocketName;                                // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x00E0(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               MinRotation;                                       // 0x00EC(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               MaxRotation;                                       // 0x00F8(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EBoneModificationMode                         RotationMode;                                      // 0x0104(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             RotationSpace;                                     // 0x0105(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_106[0xA];                                      // 0x0106(0x000A)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAnimNode_FootPlacementIK) == 0x000008, "Wrong alignment on FJackAnimNode_FootPlacementIK");
static_assert(sizeof(FJackAnimNode_FootPlacementIK) == 0x000110, "Wrong size on FJackAnimNode_FootPlacementIK");
static_assert(offsetof(FJackAnimNode_FootPlacementIK, bActive) == 0x000070, "Member 'FJackAnimNode_FootPlacementIK::bActive' has a wrong offset!");
static_assert(offsetof(FJackAnimNode_FootPlacementIK, IKBone) == 0x000078, "Member 'FJackAnimNode_FootPlacementIK::IKBone' has a wrong offset!");
static_assert(offsetof(FJackAnimNode_FootPlacementIK, EffectorLocation) == 0x000090, "Member 'FJackAnimNode_FootPlacementIK::EffectorLocation' has a wrong offset!");
static_assert(offsetof(FJackAnimNode_FootPlacementIK, JointTargetLocation) == 0x00009C, "Member 'FJackAnimNode_FootPlacementIK::JointTargetLocation' has a wrong offset!");
static_assert(offsetof(FJackAnimNode_FootPlacementIK, JointTargetLocationSpace) == 0x0000A8, "Member 'FJackAnimNode_FootPlacementIK::JointTargetLocationSpace' has a wrong offset!");
static_assert(offsetof(FJackAnimNode_FootPlacementIK, JointTargetSpaceBoneName) == 0x0000B0, "Member 'FJackAnimNode_FootPlacementIK::JointTargetSpaceBoneName' has a wrong offset!");
static_assert(offsetof(FJackAnimNode_FootPlacementIK, StretchLimits) == 0x0000BC, "Member 'FJackAnimNode_FootPlacementIK::StretchLimits' has a wrong offset!");
static_assert(offsetof(FJackAnimNode_FootPlacementIK, HitZOffset) == 0x0000C4, "Member 'FJackAnimNode_FootPlacementIK::HitZOffset' has a wrong offset!");
static_assert(offsetof(FJackAnimNode_FootPlacementIK, BlendTime) == 0x0000C8, "Member 'FJackAnimNode_FootPlacementIK::BlendTime' has a wrong offset!");
static_assert(offsetof(FJackAnimNode_FootPlacementIK, bAllowUnderZ) == 0x0000CC, "Member 'FJackAnimNode_FootPlacementIK::bAllowUnderZ' has a wrong offset!");
static_assert(offsetof(FJackAnimNode_FootPlacementIK, EffectorSocketName) == 0x0000D8, "Member 'FJackAnimNode_FootPlacementIK::EffectorSocketName' has a wrong offset!");
static_assert(offsetof(FJackAnimNode_FootPlacementIK, Rotation) == 0x0000E0, "Member 'FJackAnimNode_FootPlacementIK::Rotation' has a wrong offset!");
static_assert(offsetof(FJackAnimNode_FootPlacementIK, MinRotation) == 0x0000EC, "Member 'FJackAnimNode_FootPlacementIK::MinRotation' has a wrong offset!");
static_assert(offsetof(FJackAnimNode_FootPlacementIK, MaxRotation) == 0x0000F8, "Member 'FJackAnimNode_FootPlacementIK::MaxRotation' has a wrong offset!");
static_assert(offsetof(FJackAnimNode_FootPlacementIK, RotationMode) == 0x000104, "Member 'FJackAnimNode_FootPlacementIK::RotationMode' has a wrong offset!");
static_assert(offsetof(FJackAnimNode_FootPlacementIK, RotationSpace) == 0x000105, "Member 'FJackAnimNode_FootPlacementIK::RotationSpace' has a wrong offset!");

// ScriptStruct JackGame.JackAnalysisMacroInfo
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FJackAnalysisMacroInfo final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAnalysisMacroInfo) == 0x000008, "Wrong alignment on FJackAnalysisMacroInfo");
static_assert(sizeof(FJackAnalysisMacroInfo) == 0x000028, "Wrong size on FJackAnalysisMacroInfo");

// ScriptStruct JackGame.JackAnimNode_InterruptIK
// 0x0020 (0x0050 - 0x0030)
struct FJackAnimNode_InterruptIK final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bByPass;                                           // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAnimNode_InterruptIK) == 0x000008, "Wrong alignment on FJackAnimNode_InterruptIK");
static_assert(sizeof(FJackAnimNode_InterruptIK) == 0x000050, "Wrong size on FJackAnimNode_InterruptIK");
static_assert(offsetof(FJackAnimNode_InterruptIK, Source) == 0x000030, "Member 'FJackAnimNode_InterruptIK::Source' has a wrong offset!");
static_assert(offsetof(FJackAnimNode_InterruptIK, bByPass) == 0x000048, "Member 'FJackAnimNode_InterruptIK::bByPass' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_TextPackUI
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextPackUI final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextPackUI) == 0x000008, "Wrong alignment on FJackLDT_TextPackUI");
static_assert(sizeof(FJackLDT_TextPackUI) == 0x000010, "Wrong size on FJackLDT_TextPackUI");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleA_003_N
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleA_003_N final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleA_003_N) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleA_003_N");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleA_003_N) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleA_003_N");

// ScriptStruct JackGame.JackLDT_BGMScenario
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_BGMScenario final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_BGMScenario) == 0x000008, "Wrong alignment on FJackLDT_BGMScenario");
static_assert(sizeof(FJackLDT_BGMScenario) == 0x000010, "Wrong size on FJackLDT_BGMScenario");

// ScriptStruct JackGame.JackAnimNode_LipSync
// 0x00B8 (0x00E8 - 0x0030)
struct FJackAnimNode_LipSync final : public FAnimNode_Base
{
public:
	uint8                                         Pad_30[0xB8];                                      // 0x0030(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAnimNode_LipSync) == 0x000008, "Wrong alignment on FJackAnimNode_LipSync");
static_assert(sizeof(FJackAnimNode_LipSync) == 0x0000E8, "Wrong size on FJackAnimNode_LipSync");

// ScriptStruct JackGame.JackBattleCommandAI_ExecTurnCommandResult
// 0x02A0 (0x02A0 - 0x0000)
struct FJackBattleCommandAI_ExecTurnCommandResult final
{
public:
	struct FJackActionPlayParam                   ActionPlayParam;                                   // 0x0000(0x0290)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_290[0x10];                                     // 0x0290(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackBattleCommandAI_ExecTurnCommandResult) == 0x000010, "Wrong alignment on FJackBattleCommandAI_ExecTurnCommandResult");
static_assert(sizeof(FJackBattleCommandAI_ExecTurnCommandResult) == 0x0002A0, "Wrong size on FJackBattleCommandAI_ExecTurnCommandResult");
static_assert(offsetof(FJackBattleCommandAI_ExecTurnCommandResult, ActionPlayParam) == 0x000000, "Member 'FJackBattleCommandAI_ExecTurnCommandResult::ActionPlayParam' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableScheduledKira
// 0x00C8 (0x00D0 - 0x0008)
struct FJackDataTableScheduledKira final : public FTableRowBase
{
public:
	class FName                                   MapId;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackTreasureBoxPlacementCondition            PlacementConditionType;                            // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PlacementConditionParameter;                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlacementNum_Min;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlacementNum_Max;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReplacementMin;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlacementTimeZone_Morning;                        // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlacementTimeZone_Daytime;                        // 0x002D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlacementTimeZone_Evening;                        // 0x002E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlacementTimeZone_Night;                          // 0x002F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlacementWeather_ClearAndSunny;                   // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlacementWeather_Sunny;                           // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlacementWeather_Cloudy;                          // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlacementWeather_LightRain;                       // 0x0033(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlacementWeather_Rain;                            // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlacementWeather_HeavyRain;                       // 0x0035(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlacementWeather_Thunderstorm;                    // 0x0036(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlacementWeather_Snow;                            // 0x0037(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlacementWeather_Snowstorm;                       // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlacementWeather_Fog;                             // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlacementWeather_HeavyFog;                        // 0x003A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RespawnInformationFlag;                            // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScenarioSequenceNo;                                // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemID_001;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum_001;                                       // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemWeight_001;                                    // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_002;                                        // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum_002;                                       // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemWeight_002;                                    // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_003;                                        // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum_003;                                       // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemWeight_003;                                    // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_004;                                        // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum_004;                                       // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemWeight_004;                                    // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_005;                                        // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum_005;                                       // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemWeight_005;                                    // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_006;                                        // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum_006;                                       // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemWeight_006;                                    // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_007;                                        // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum_007;                                       // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemWeight_007;                                    // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_008;                                        // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum_008;                                       // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemWeight_008;                                    // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableScheduledKira) == 0x000008, "Wrong alignment on FJackDataTableScheduledKira");
static_assert(sizeof(FJackDataTableScheduledKira) == 0x0000D0, "Wrong size on FJackDataTableScheduledKira");
static_assert(offsetof(FJackDataTableScheduledKira, MapId) == 0x000008, "Member 'FJackDataTableScheduledKira::MapId' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, PlacementConditionType) == 0x000010, "Member 'FJackDataTableScheduledKira::PlacementConditionType' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, PlacementConditionParameter) == 0x000018, "Member 'FJackDataTableScheduledKira::PlacementConditionParameter' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, PlacementNum_Min) == 0x000020, "Member 'FJackDataTableScheduledKira::PlacementNum_Min' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, PlacementNum_Max) == 0x000024, "Member 'FJackDataTableScheduledKira::PlacementNum_Max' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ReplacementMin) == 0x000028, "Member 'FJackDataTableScheduledKira::ReplacementMin' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, bPlacementTimeZone_Morning) == 0x00002C, "Member 'FJackDataTableScheduledKira::bPlacementTimeZone_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, bPlacementTimeZone_Daytime) == 0x00002D, "Member 'FJackDataTableScheduledKira::bPlacementTimeZone_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, bPlacementTimeZone_Evening) == 0x00002E, "Member 'FJackDataTableScheduledKira::bPlacementTimeZone_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, bPlacementTimeZone_Night) == 0x00002F, "Member 'FJackDataTableScheduledKira::bPlacementTimeZone_Night' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, bPlacementWeather_ClearAndSunny) == 0x000030, "Member 'FJackDataTableScheduledKira::bPlacementWeather_ClearAndSunny' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, bPlacementWeather_Sunny) == 0x000031, "Member 'FJackDataTableScheduledKira::bPlacementWeather_Sunny' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, bPlacementWeather_Cloudy) == 0x000032, "Member 'FJackDataTableScheduledKira::bPlacementWeather_Cloudy' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, bPlacementWeather_LightRain) == 0x000033, "Member 'FJackDataTableScheduledKira::bPlacementWeather_LightRain' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, bPlacementWeather_Rain) == 0x000034, "Member 'FJackDataTableScheduledKira::bPlacementWeather_Rain' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, bPlacementWeather_HeavyRain) == 0x000035, "Member 'FJackDataTableScheduledKira::bPlacementWeather_HeavyRain' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, bPlacementWeather_Thunderstorm) == 0x000036, "Member 'FJackDataTableScheduledKira::bPlacementWeather_Thunderstorm' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, bPlacementWeather_Snow) == 0x000037, "Member 'FJackDataTableScheduledKira::bPlacementWeather_Snow' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, bPlacementWeather_Snowstorm) == 0x000038, "Member 'FJackDataTableScheduledKira::bPlacementWeather_Snowstorm' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, bPlacementWeather_Fog) == 0x000039, "Member 'FJackDataTableScheduledKira::bPlacementWeather_Fog' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, bPlacementWeather_HeavyFog) == 0x00003A, "Member 'FJackDataTableScheduledKira::bPlacementWeather_HeavyFog' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, RespawnInformationFlag) == 0x000040, "Member 'FJackDataTableScheduledKira::RespawnInformationFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ScenarioSequenceNo) == 0x000048, "Member 'FJackDataTableScheduledKira::ScenarioSequenceNo' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ItemID_001) == 0x000050, "Member 'FJackDataTableScheduledKira::ItemID_001' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ItemNum_001) == 0x000058, "Member 'FJackDataTableScheduledKira::ItemNum_001' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ItemWeight_001) == 0x00005C, "Member 'FJackDataTableScheduledKira::ItemWeight_001' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ItemID_002) == 0x000060, "Member 'FJackDataTableScheduledKira::ItemID_002' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ItemNum_002) == 0x000068, "Member 'FJackDataTableScheduledKira::ItemNum_002' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ItemWeight_002) == 0x00006C, "Member 'FJackDataTableScheduledKira::ItemWeight_002' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ItemID_003) == 0x000070, "Member 'FJackDataTableScheduledKira::ItemID_003' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ItemNum_003) == 0x000078, "Member 'FJackDataTableScheduledKira::ItemNum_003' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ItemWeight_003) == 0x00007C, "Member 'FJackDataTableScheduledKira::ItemWeight_003' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ItemID_004) == 0x000080, "Member 'FJackDataTableScheduledKira::ItemID_004' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ItemNum_004) == 0x000088, "Member 'FJackDataTableScheduledKira::ItemNum_004' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ItemWeight_004) == 0x00008C, "Member 'FJackDataTableScheduledKira::ItemWeight_004' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ItemID_005) == 0x000090, "Member 'FJackDataTableScheduledKira::ItemID_005' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ItemNum_005) == 0x000098, "Member 'FJackDataTableScheduledKira::ItemNum_005' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ItemWeight_005) == 0x00009C, "Member 'FJackDataTableScheduledKira::ItemWeight_005' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ItemID_006) == 0x0000A0, "Member 'FJackDataTableScheduledKira::ItemID_006' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ItemNum_006) == 0x0000A8, "Member 'FJackDataTableScheduledKira::ItemNum_006' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ItemWeight_006) == 0x0000AC, "Member 'FJackDataTableScheduledKira::ItemWeight_006' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ItemID_007) == 0x0000B0, "Member 'FJackDataTableScheduledKira::ItemID_007' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ItemNum_007) == 0x0000B8, "Member 'FJackDataTableScheduledKira::ItemNum_007' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ItemWeight_007) == 0x0000BC, "Member 'FJackDataTableScheduledKira::ItemWeight_007' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ItemID_008) == 0x0000C0, "Member 'FJackDataTableScheduledKira::ItemID_008' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ItemNum_008) == 0x0000C8, "Member 'FJackDataTableScheduledKira::ItemNum_008' has a wrong offset!");
static_assert(offsetof(FJackDataTableScheduledKira, ItemWeight_008) == 0x0000CC, "Member 'FJackDataTableScheduledKira::ItemWeight_008' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_ScheduledKira
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ScheduledKira final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ScheduledKira) == 0x000008, "Wrong alignment on FJackLDT_ScheduledKira");
static_assert(sizeof(FJackLDT_ScheduledKira) == 0x000010, "Wrong size on FJackLDT_ScheduledKira");

// ScriptStruct JackGame.JackAnimNode_MatineeAnimation
// 0x01F8 (0x0228 - 0x0030)
struct FJackAnimNode_MatineeAnimation final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              AdditiveIdentity;                                  // 0x0048(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0xEF];                                      // 0x0061(0x00EF)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBlendSampleData>               BlendSampleDataCache;                              // 0x0150(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FBlendFilter                           BlendFilter;                                       // 0x0160(0x0090)(NativeAccessSpecifierPrivate)
	float                                         InternalTimeAccumulator;                           // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F4[0x34];                                     // 0x01F4(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAnimNode_MatineeAnimation) == 0x000008, "Wrong alignment on FJackAnimNode_MatineeAnimation");
static_assert(sizeof(FJackAnimNode_MatineeAnimation) == 0x000228, "Wrong size on FJackAnimNode_MatineeAnimation");
static_assert(offsetof(FJackAnimNode_MatineeAnimation, Source) == 0x000030, "Member 'FJackAnimNode_MatineeAnimation::Source' has a wrong offset!");
static_assert(offsetof(FJackAnimNode_MatineeAnimation, AdditiveIdentity) == 0x000048, "Member 'FJackAnimNode_MatineeAnimation::AdditiveIdentity' has a wrong offset!");
static_assert(offsetof(FJackAnimNode_MatineeAnimation, bActive) == 0x000060, "Member 'FJackAnimNode_MatineeAnimation::bActive' has a wrong offset!");
static_assert(offsetof(FJackAnimNode_MatineeAnimation, BlendSampleDataCache) == 0x000150, "Member 'FJackAnimNode_MatineeAnimation::BlendSampleDataCache' has a wrong offset!");
static_assert(offsetof(FJackAnimNode_MatineeAnimation, BlendFilter) == 0x000160, "Member 'FJackAnimNode_MatineeAnimation::BlendFilter' has a wrong offset!");
static_assert(offsetof(FJackAnimNode_MatineeAnimation, InternalTimeAccumulator) == 0x0001F0, "Member 'FJackAnimNode_MatineeAnimation::InternalTimeAccumulator' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotConfigurationParam
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FJackMeosiSlotConfigurationParam final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMeosiSlotConfigurationParam) == 0x000004, "Wrong alignment on FJackMeosiSlotConfigurationParam");
static_assert(sizeof(FJackMeosiSlotConfigurationParam) == 0x00000C, "Wrong size on FJackMeosiSlotConfigurationParam");

// ScriptStruct JackGame.JackAnimNode_ScaleBone
// 0x0070 (0x00E0 - 0x0070)
struct FJackAnimNode_ScaleBone final : public FAnimNode_SkeletalControlBase
{
public:
	uint8                                         Pad_70[0x70];                                      // 0x0070(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAnimNode_ScaleBone) == 0x000008, "Wrong alignment on FJackAnimNode_ScaleBone");
static_assert(sizeof(FJackAnimNode_ScaleBone) == 0x0000E0, "Wrong size on FJackAnimNode_ScaleBone");

// ScriptStruct JackGame.JackDataTableMatineelevelRenkeiDivision
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableMatineelevelRenkeiDivision final : public FTableRowBase
{
public:
	class FName                                   LevelName;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelNamePass;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MatineeName;                                       // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupNumber;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                CharacterType;                                     // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMatineelevelRenkeiDivision) == 0x000008, "Wrong alignment on FJackDataTableMatineelevelRenkeiDivision");
static_assert(sizeof(FJackDataTableMatineelevelRenkeiDivision) == 0x000028, "Wrong size on FJackDataTableMatineelevelRenkeiDivision");
static_assert(offsetof(FJackDataTableMatineelevelRenkeiDivision, LevelName) == 0x000008, "Member 'FJackDataTableMatineelevelRenkeiDivision::LevelName' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineelevelRenkeiDivision, LevelNamePass) == 0x000010, "Member 'FJackDataTableMatineelevelRenkeiDivision::LevelNamePass' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineelevelRenkeiDivision, MatineeName) == 0x000018, "Member 'FJackDataTableMatineelevelRenkeiDivision::MatineeName' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineelevelRenkeiDivision, GroupNumber) == 0x000020, "Member 'FJackDataTableMatineelevelRenkeiDivision::GroupNumber' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineelevelRenkeiDivision, CharacterType) == 0x000024, "Member 'FJackDataTableMatineelevelRenkeiDivision::CharacterType' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableSkeletalMesh
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableSkeletalMesh final : public FTableRowBase
{
public:
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableSkeletalMesh) == 0x000008, "Wrong alignment on FJackDataTableSkeletalMesh");
static_assert(sizeof(FJackDataTableSkeletalMesh) == 0x000010, "Wrong size on FJackDataTableSkeletalMesh");
static_assert(offsetof(FJackDataTableSkeletalMesh, SkeletalMesh) == 0x000008, "Member 'FJackDataTableSkeletalMesh::SkeletalMesh' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableSlotReach
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableSlotReach final : public FTableRowBase
{
public:
	int32                                         Percent;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableSlotReach) == 0x000008, "Wrong alignment on FJackDataTableSlotReach");
static_assert(sizeof(FJackDataTableSlotReach) == 0x000010, "Wrong size on FJackDataTableSlotReach");
static_assert(offsetof(FJackDataTableSlotReach, Percent) == 0x000008, "Member 'FJackDataTableSlotReach::Percent' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_AnimDynamics_M229
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AnimDynamics_M229 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AnimDynamics_M229) == 0x000008, "Wrong alignment on FJackLDT_AnimDynamics_M229");
static_assert(sizeof(FJackLDT_AnimDynamics_M229) == 0x000010, "Wrong size on FJackLDT_AnimDynamics_M229");

// ScriptStruct JackGame.JackAnimNode_ScheduledNPC
// 0x0190 (0x01C0 - 0x0030)
struct FJackAnimNode_ScheduledNPC final : public FAnimNode_Base
{
public:
	uint8                                         Pad_30[0x190];                                     // 0x0030(0x0190)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAnimNode_ScheduledNPC) == 0x000008, "Wrong alignment on FJackAnimNode_ScheduledNPC");
static_assert(sizeof(FJackAnimNode_ScheduledNPC) == 0x0001C0, "Wrong size on FJackAnimNode_ScheduledNPC");

// ScriptStruct JackGame.JackAttackRay
// 0x0048 (0x0048 - 0x0000)
struct FJackAttackRay final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x000C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartLength;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndLength;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERelativeTransformSpace                       SocketSpace;                                       // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UJackCollideEffectTable>    AttackHitEffect;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelativeScale;                                    // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAttackRay) == 0x000008, "Wrong alignment on FJackAttackRay");
static_assert(sizeof(FJackAttackRay) == 0x000048, "Wrong size on FJackAttackRay");
static_assert(offsetof(FJackAttackRay, Offset) == 0x000000, "Member 'FJackAttackRay::Offset' has a wrong offset!");
static_assert(offsetof(FJackAttackRay, Direction) == 0x00000C, "Member 'FJackAttackRay::Direction' has a wrong offset!");
static_assert(offsetof(FJackAttackRay, Radius) == 0x000018, "Member 'FJackAttackRay::Radius' has a wrong offset!");
static_assert(offsetof(FJackAttackRay, StartLength) == 0x00001C, "Member 'FJackAttackRay::StartLength' has a wrong offset!");
static_assert(offsetof(FJackAttackRay, EndLength) == 0x000020, "Member 'FJackAttackRay::EndLength' has a wrong offset!");
static_assert(offsetof(FJackAttackRay, SocketName) == 0x000028, "Member 'FJackAttackRay::SocketName' has a wrong offset!");
static_assert(offsetof(FJackAttackRay, SocketSpace) == 0x000030, "Member 'FJackAttackRay::SocketSpace' has a wrong offset!");
static_assert(offsetof(FJackAttackRay, AttackHitEffect) == 0x000038, "Member 'FJackAttackRay::AttackHitEffect' has a wrong offset!");
static_assert(offsetof(FJackAttackRay, bRelativeScale) == 0x000040, "Member 'FJackAttackRay::bRelativeScale' has a wrong offset!");

// ScriptStruct JackGame.JackAttackBurstSphere
// 0x0038 (0x0038 - 0x0000)
struct FJackAttackBurstSphere final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartSize;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndSize;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageFalloff;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERelativeTransformSpace                       SocketSpace;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UJackCollideEffectTable>    AttackHitEffect;                                   // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelativeScale;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAttackBurstSphere) == 0x000008, "Wrong alignment on FJackAttackBurstSphere");
static_assert(sizeof(FJackAttackBurstSphere) == 0x000038, "Wrong size on FJackAttackBurstSphere");
static_assert(offsetof(FJackAttackBurstSphere, Offset) == 0x000000, "Member 'FJackAttackBurstSphere::Offset' has a wrong offset!");
static_assert(offsetof(FJackAttackBurstSphere, StartSize) == 0x00000C, "Member 'FJackAttackBurstSphere::StartSize' has a wrong offset!");
static_assert(offsetof(FJackAttackBurstSphere, EndSize) == 0x000010, "Member 'FJackAttackBurstSphere::EndSize' has a wrong offset!");
static_assert(offsetof(FJackAttackBurstSphere, DamageFalloff) == 0x000014, "Member 'FJackAttackBurstSphere::DamageFalloff' has a wrong offset!");
static_assert(offsetof(FJackAttackBurstSphere, SocketName) == 0x000018, "Member 'FJackAttackBurstSphere::SocketName' has a wrong offset!");
static_assert(offsetof(FJackAttackBurstSphere, SocketSpace) == 0x000020, "Member 'FJackAttackBurstSphere::SocketSpace' has a wrong offset!");
static_assert(offsetof(FJackAttackBurstSphere, AttackHitEffect) == 0x000028, "Member 'FJackAttackBurstSphere::AttackHitEffect' has a wrong offset!");
static_assert(offsetof(FJackAttackBurstSphere, bRelativeScale) == 0x000030, "Member 'FJackAttackBurstSphere::bRelativeScale' has a wrong offset!");

// ScriptStruct JackGame.JackGameFlagKeyValueSet
// 0x0020 (0x0020 - 0x0000)
struct FJackGameFlagKeyValueSet final
{
public:
	EJackGameFlagCategory                         Category;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackGameFlagKeyValueSet) == 0x000008, "Wrong alignment on FJackGameFlagKeyValueSet");
static_assert(sizeof(FJackGameFlagKeyValueSet) == 0x000020, "Wrong size on FJackGameFlagKeyValueSet");
static_assert(offsetof(FJackGameFlagKeyValueSet, Category) == 0x000000, "Member 'FJackGameFlagKeyValueSet::Category' has a wrong offset!");
static_assert(offsetof(FJackGameFlagKeyValueSet, Name) == 0x000008, "Member 'FJackGameFlagKeyValueSet::Name' has a wrong offset!");
static_assert(offsetof(FJackGameFlagKeyValueSet, Value) == 0x000010, "Member 'FJackGameFlagKeyValueSet::Value' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableStaticMesh
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableStaticMesh final : public FTableRowBase
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableStaticMesh) == 0x000008, "Wrong alignment on FJackDataTableStaticMesh");
static_assert(sizeof(FJackDataTableStaticMesh) == 0x000010, "Wrong size on FJackDataTableStaticMesh");
static_assert(offsetof(FJackDataTableStaticMesh, StaticMesh) == 0x000008, "Member 'FJackDataTableStaticMesh::StaticMesh' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMonsterFieldAI
// 0x0030 (0x0038 - 0x0008)
struct FJackDataTableMonsterFieldAI final : public FTableRowBase
{
public:
	EJackMonsterMoveType                          MoveType;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterMoveMethod                        MoveMethod;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FieldBasicSpeed;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterMoveSpeed                         ChaseSpeed;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterMoveSpeed                         EscapeSpeed;                                       // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterMoveSpeed                         RageSpeed;                                         // 0x0012(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterSearchType                        SearchType;                                        // 0x0013(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SearchRadius;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SearchAngle;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpreadDistance;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSearchStandingPlayer;                             // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTakeWarnning;                                     // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterMovementWeak                      MovementWeak;                                      // 0x0022(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterMovementStrong                    MovementStrong;                                    // 0x0023(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterBowgunResonse                     BowgunResponse;                                    // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WeakMovementThreshold;                             // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppealFrequency;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WakeUpRate;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMonsterFieldAI) == 0x000008, "Wrong alignment on FJackDataTableMonsterFieldAI");
static_assert(sizeof(FJackDataTableMonsterFieldAI) == 0x000038, "Wrong size on FJackDataTableMonsterFieldAI");
static_assert(offsetof(FJackDataTableMonsterFieldAI, MoveType) == 0x000008, "Member 'FJackDataTableMonsterFieldAI::MoveType' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldAI, MoveMethod) == 0x000009, "Member 'FJackDataTableMonsterFieldAI::MoveMethod' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldAI, FieldBasicSpeed) == 0x00000C, "Member 'FJackDataTableMonsterFieldAI::FieldBasicSpeed' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldAI, ChaseSpeed) == 0x000010, "Member 'FJackDataTableMonsterFieldAI::ChaseSpeed' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldAI, EscapeSpeed) == 0x000011, "Member 'FJackDataTableMonsterFieldAI::EscapeSpeed' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldAI, RageSpeed) == 0x000012, "Member 'FJackDataTableMonsterFieldAI::RageSpeed' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldAI, SearchType) == 0x000013, "Member 'FJackDataTableMonsterFieldAI::SearchType' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldAI, SearchRadius) == 0x000014, "Member 'FJackDataTableMonsterFieldAI::SearchRadius' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldAI, SearchAngle) == 0x000018, "Member 'FJackDataTableMonsterFieldAI::SearchAngle' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldAI, SpreadDistance) == 0x00001C, "Member 'FJackDataTableMonsterFieldAI::SpreadDistance' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldAI, bSearchStandingPlayer) == 0x000020, "Member 'FJackDataTableMonsterFieldAI::bSearchStandingPlayer' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldAI, bTakeWarnning) == 0x000021, "Member 'FJackDataTableMonsterFieldAI::bTakeWarnning' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldAI, MovementWeak) == 0x000022, "Member 'FJackDataTableMonsterFieldAI::MovementWeak' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldAI, MovementStrong) == 0x000023, "Member 'FJackDataTableMonsterFieldAI::MovementStrong' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldAI, BowgunResponse) == 0x000024, "Member 'FJackDataTableMonsterFieldAI::BowgunResponse' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldAI, WeakMovementThreshold) == 0x000028, "Member 'FJackDataTableMonsterFieldAI::WeakMovementThreshold' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldAI, AppealFrequency) == 0x00002C, "Member 'FJackDataTableMonsterFieldAI::AppealFrequency' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldAI, WakeUpRate) == 0x000030, "Member 'FJackDataTableMonsterFieldAI::WakeUpRate' has a wrong offset!");

// ScriptStruct JackGame.JackAttackSphere
// 0x0030 (0x0030 - 0x0000)
struct FJackAttackSphere final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERelativeTransformSpace                       SocketSpace;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UJackCollideEffectTable>    AttackHitEffect;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelativeScale;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAttackSphere) == 0x000008, "Wrong alignment on FJackAttackSphere");
static_assert(sizeof(FJackAttackSphere) == 0x000030, "Wrong size on FJackAttackSphere");
static_assert(offsetof(FJackAttackSphere, Offset) == 0x000000, "Member 'FJackAttackSphere::Offset' has a wrong offset!");
static_assert(offsetof(FJackAttackSphere, Radius) == 0x00000C, "Member 'FJackAttackSphere::Radius' has a wrong offset!");
static_assert(offsetof(FJackAttackSphere, SocketName) == 0x000010, "Member 'FJackAttackSphere::SocketName' has a wrong offset!");
static_assert(offsetof(FJackAttackSphere, SocketSpace) == 0x000018, "Member 'FJackAttackSphere::SocketSpace' has a wrong offset!");
static_assert(offsetof(FJackAttackSphere, AttackHitEffect) == 0x000020, "Member 'FJackAttackSphere::AttackHitEffect' has a wrong offset!");
static_assert(offsetof(FJackAttackSphere, bRelativeScale) == 0x000028, "Member 'FJackAttackSphere::bRelativeScale' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_V003_Hair
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_V003_Hair final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_V003_Hair) == 0x000008, "Wrong alignment on FJackLDT_V003_Hair");
static_assert(sizeof(FJackLDT_V003_Hair) == 0x000010, "Wrong size on FJackLDT_V003_Hair");

// ScriptStruct JackGame.JackDataTableCollideEffectTable
// 0x0360 (0x0368 - 0x0008)
struct FJackDataTableCollideEffectTable final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   Default;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Earth;                                             // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   EarthDry;                                          // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Mud;                                               // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Stone;                                             // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Wood;                                              // 0x0080(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   WoodBoard;                                         // 0x0098(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   WoodDamaged;                                       // 0x00B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   WoodThick;                                         // 0x00C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SuspensionBridge;                                  // 0x00E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SandStone;                                         // 0x00F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Sand;                                              // 0x0110(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Gravel;                                            // 0x0128(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   BurntSand;                                         // 0x0140(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Water;                                             // 0x0158(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Shallow;                                           // 0x0170(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OceanFloor;                                        // 0x0188(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Snow;                                              // 0x01A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Ice;                                               // 0x01B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Grass;                                             // 0x01D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Leaf;                                              // 0x01E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Straw;                                             // 0x0200(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   BrownGrass;                                        // 0x0218(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Cloth;                                             // 0x0230(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ClothThick;                                        // 0x0248(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Metal;                                             // 0x0260(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Coin;                                              // 0x0278(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Flesh;                                             // 0x0290(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Ladder;                                            // 0x02A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Rope;                                              // 0x02C0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Poison;                                            // 0x02D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Lava;                                              // 0x02F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Ivy;                                               // 0x0308(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Barrier;                                           // 0x0320(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ColdLava;                                          // 0x0338(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CleftLava;                                         // 0x0350(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableCollideEffectTable) == 0x000008, "Wrong alignment on FJackDataTableCollideEffectTable");
static_assert(sizeof(FJackDataTableCollideEffectTable) == 0x000368, "Wrong size on FJackDataTableCollideEffectTable");
static_assert(offsetof(FJackDataTableCollideEffectTable, Default) == 0x000008, "Member 'FJackDataTableCollideEffectTable::Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, Earth) == 0x000020, "Member 'FJackDataTableCollideEffectTable::Earth' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, EarthDry) == 0x000038, "Member 'FJackDataTableCollideEffectTable::EarthDry' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, Mud) == 0x000050, "Member 'FJackDataTableCollideEffectTable::Mud' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, Stone) == 0x000068, "Member 'FJackDataTableCollideEffectTable::Stone' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, Wood) == 0x000080, "Member 'FJackDataTableCollideEffectTable::Wood' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, WoodBoard) == 0x000098, "Member 'FJackDataTableCollideEffectTable::WoodBoard' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, WoodDamaged) == 0x0000B0, "Member 'FJackDataTableCollideEffectTable::WoodDamaged' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, WoodThick) == 0x0000C8, "Member 'FJackDataTableCollideEffectTable::WoodThick' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, SuspensionBridge) == 0x0000E0, "Member 'FJackDataTableCollideEffectTable::SuspensionBridge' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, SandStone) == 0x0000F8, "Member 'FJackDataTableCollideEffectTable::SandStone' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, Sand) == 0x000110, "Member 'FJackDataTableCollideEffectTable::Sand' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, Gravel) == 0x000128, "Member 'FJackDataTableCollideEffectTable::Gravel' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, BurntSand) == 0x000140, "Member 'FJackDataTableCollideEffectTable::BurntSand' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, Water) == 0x000158, "Member 'FJackDataTableCollideEffectTable::Water' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, Shallow) == 0x000170, "Member 'FJackDataTableCollideEffectTable::Shallow' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, OceanFloor) == 0x000188, "Member 'FJackDataTableCollideEffectTable::OceanFloor' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, Snow) == 0x0001A0, "Member 'FJackDataTableCollideEffectTable::Snow' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, Ice) == 0x0001B8, "Member 'FJackDataTableCollideEffectTable::Ice' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, Grass) == 0x0001D0, "Member 'FJackDataTableCollideEffectTable::Grass' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, Leaf) == 0x0001E8, "Member 'FJackDataTableCollideEffectTable::Leaf' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, Straw) == 0x000200, "Member 'FJackDataTableCollideEffectTable::Straw' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, BrownGrass) == 0x000218, "Member 'FJackDataTableCollideEffectTable::BrownGrass' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, Cloth) == 0x000230, "Member 'FJackDataTableCollideEffectTable::Cloth' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, ClothThick) == 0x000248, "Member 'FJackDataTableCollideEffectTable::ClothThick' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, Metal) == 0x000260, "Member 'FJackDataTableCollideEffectTable::Metal' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, Coin) == 0x000278, "Member 'FJackDataTableCollideEffectTable::Coin' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, Flesh) == 0x000290, "Member 'FJackDataTableCollideEffectTable::Flesh' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, Ladder) == 0x0002A8, "Member 'FJackDataTableCollideEffectTable::Ladder' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, Rope) == 0x0002C0, "Member 'FJackDataTableCollideEffectTable::Rope' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, Poison) == 0x0002D8, "Member 'FJackDataTableCollideEffectTable::Poison' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, Lava) == 0x0002F0, "Member 'FJackDataTableCollideEffectTable::Lava' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, Ivy) == 0x000308, "Member 'FJackDataTableCollideEffectTable::Ivy' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, Barrier) == 0x000320, "Member 'FJackDataTableCollideEffectTable::Barrier' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, ColdLava) == 0x000338, "Member 'FJackDataTableCollideEffectTable::ColdLava' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideEffectTable, CleftLava) == 0x000350, "Member 'FJackDataTableCollideEffectTable::CleftLava' has a wrong offset!");

// ScriptStruct JackGame.JackPrgCameraParameter
// 0x0020 (0x0020 - 0x0000)
struct FJackPrgCameraParameter final
{
public:
	TWeakObjectPtr<class AJackCharacter>          MainCaster;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AJackCharacter>          MainTarget;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class AJackCharacter>>  ViewTarget;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackPrgCameraParameter) == 0x000008, "Wrong alignment on FJackPrgCameraParameter");
static_assert(sizeof(FJackPrgCameraParameter) == 0x000020, "Wrong size on FJackPrgCameraParameter");
static_assert(offsetof(FJackPrgCameraParameter, MainCaster) == 0x000000, "Member 'FJackPrgCameraParameter::MainCaster' has a wrong offset!");
static_assert(offsetof(FJackPrgCameraParameter, MainTarget) == 0x000008, "Member 'FJackPrgCameraParameter::MainTarget' has a wrong offset!");
static_assert(offsetof(FJackPrgCameraParameter, ViewTarget) == 0x000010, "Member 'FJackPrgCameraParameter::ViewTarget' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MonsterFieldAI
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterFieldAI final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterFieldAI) == 0x000008, "Wrong alignment on FJackLDT_MonsterFieldAI");
static_assert(sizeof(FJackLDT_MonsterFieldAI) == 0x000010, "Wrong size on FJackLDT_MonsterFieldAI");

// ScriptStruct JackGame.JackDataTableMaterial
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMaterial final : public FTableRowBase
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMaterial) == 0x000008, "Wrong alignment on FJackDataTableMaterial");
static_assert(sizeof(FJackDataTableMaterial) == 0x000010, "Wrong size on FJackDataTableMaterial");
static_assert(offsetof(FJackDataTableMaterial, Material) == 0x000008, "Member 'FJackDataTableMaterial::Material' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Facial_M007
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Facial_M007 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Facial_M007) == 0x000008, "Wrong alignment on FJackLDT_Facial_M007");
static_assert(sizeof(FJackLDT_Facial_M007) == 0x000010, "Wrong size on FJackLDT_Facial_M007");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleS_003_N
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleS_003_N final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleS_003_N) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleS_003_N");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleS_003_N) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleS_003_N");

// ScriptStruct JackGame.JackKeyframeFloat
// 0x0008 (0x0008 - 0x0000)
struct FJackKeyframeFloat final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackKeyframeFloat) == 0x000004, "Wrong alignment on FJackKeyframeFloat");
static_assert(sizeof(FJackKeyframeFloat) == 0x000008, "Wrong size on FJackKeyframeFloat");
static_assert(offsetof(FJackKeyframeFloat, Time) == 0x000000, "Member 'FJackKeyframeFloat::Time' has a wrong offset!");
static_assert(offsetof(FJackKeyframeFloat, Value) == 0x000004, "Member 'FJackKeyframeFloat::Value' has a wrong offset!");

// ScriptStruct JackGame.JackBattleActionCameraDataTypeDataElementCurve
// 0x0010 (0x0010 - 0x0000)
struct FJackBattleActionCameraDataTypeDataElementCurve final
{
public:
	TArray<struct FJackKeyframeFloat>             KeyframeArray;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackBattleActionCameraDataTypeDataElementCurve) == 0x000008, "Wrong alignment on FJackBattleActionCameraDataTypeDataElementCurve");
static_assert(sizeof(FJackBattleActionCameraDataTypeDataElementCurve) == 0x000010, "Wrong size on FJackBattleActionCameraDataTypeDataElementCurve");
static_assert(offsetof(FJackBattleActionCameraDataTypeDataElementCurve, KeyframeArray) == 0x000000, "Member 'FJackBattleActionCameraDataTypeDataElementCurve::KeyframeArray' has a wrong offset!");

// ScriptStruct JackGame.JackBattleActionCameraDataTypeData
// 0x00D8 (0x00D8 - 0x0000)
struct FJackBattleActionCameraDataTypeData final
{
public:
	EJackBattleActionCameraEyeLocationCategory    EyeLocationCategory;                               // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionCameraAtCategory             AttackerTarget;                                    // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionCameraAtCategory             DefenderTarget;                                    // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionCameraTimingCategory         TrackingStopCategory;                              // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrackingStopTime;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionCameraHiddenCharacterCategory HiddenCharacterCategory;                           // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionCameraLengthAdjustCategory   LengthAdjustCategory;                              // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LimitSelection;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                SelectCharacter;                                   // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SelectMonsterID;                                   // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelectLengthAdjust;                                // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttackerSocketName;                                // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefenderSocketName;                                // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeInterpTime;                                     // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AtInterpTime;                                      // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OtherInterpTime;                                   // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionCameraLoopCategory           LoopParam;                                         // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackActionCameraDataTypeDataElementNextCamera NextCamera;                                        // 0x0050(0x0010)(Edit, NativeAccessSpecifierPublic)
	struct FJackBattleActionCameraDataTypeDataElementCurve AtToEyeYaw;                                        // 0x0060(0x0010)(Edit, NativeAccessSpecifierPublic)
	struct FJackBattleActionCameraDataTypeDataElementCurve AtToEyePitch;                                      // 0x0070(0x0010)(Edit, NativeAccessSpecifierPublic)
	struct FJackBattleActionCameraDataTypeDataElementCurve AtToEyeLength;                                     // 0x0080(0x0010)(Edit, NativeAccessSpecifierPublic)
	struct FJackBattleActionCameraDataTypeDataElementCurve AtRateBetweenAttackerDefender;                     // 0x0090(0x0010)(Edit, NativeAccessSpecifierPublic)
	struct FJackBattleActionCameraDataTypeDataElementCurve Roll;                                              // 0x00A0(0x0010)(Edit, NativeAccessSpecifierPublic)
	struct FJackBattleActionCameraDataTypeDataElementCurveVector EyeOffset;                                         // 0x00B0(0x0010)(Edit, NativeAccessSpecifierPublic)
	struct FJackBattleActionCameraDataTypeDataElementCurveVector AtOffset;                                          // 0x00C0(0x0010)(Edit, NativeAccessSpecifierPublic)
	bool                                          bSystemUse;                                        // 0x00D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackBattleActionCameraDataTypeData) == 0x000008, "Wrong alignment on FJackBattleActionCameraDataTypeData");
static_assert(sizeof(FJackBattleActionCameraDataTypeData) == 0x0000D8, "Wrong size on FJackBattleActionCameraDataTypeData");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, EyeLocationCategory) == 0x000000, "Member 'FJackBattleActionCameraDataTypeData::EyeLocationCategory' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, AttackerTarget) == 0x000001, "Member 'FJackBattleActionCameraDataTypeData::AttackerTarget' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, DefenderTarget) == 0x000002, "Member 'FJackBattleActionCameraDataTypeData::DefenderTarget' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, TrackingStopCategory) == 0x000003, "Member 'FJackBattleActionCameraDataTypeData::TrackingStopCategory' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, TrackingStopTime) == 0x000004, "Member 'FJackBattleActionCameraDataTypeData::TrackingStopTime' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, HiddenCharacterCategory) == 0x000008, "Member 'FJackBattleActionCameraDataTypeData::HiddenCharacterCategory' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, LengthAdjustCategory) == 0x000009, "Member 'FJackBattleActionCameraDataTypeData::LengthAdjustCategory' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, LimitSelection) == 0x00000C, "Member 'FJackBattleActionCameraDataTypeData::LimitSelection' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, SelectCharacter) == 0x000010, "Member 'FJackBattleActionCameraDataTypeData::SelectCharacter' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, SelectMonsterID) == 0x000018, "Member 'FJackBattleActionCameraDataTypeData::SelectMonsterID' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, SelectLengthAdjust) == 0x000020, "Member 'FJackBattleActionCameraDataTypeData::SelectLengthAdjust' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, AttackerSocketName) == 0x000028, "Member 'FJackBattleActionCameraDataTypeData::AttackerSocketName' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, DefenderSocketName) == 0x000030, "Member 'FJackBattleActionCameraDataTypeData::DefenderSocketName' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, EyeInterpTime) == 0x000038, "Member 'FJackBattleActionCameraDataTypeData::EyeInterpTime' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, AtInterpTime) == 0x00003C, "Member 'FJackBattleActionCameraDataTypeData::AtInterpTime' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, OtherInterpTime) == 0x000040, "Member 'FJackBattleActionCameraDataTypeData::OtherInterpTime' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, EndTime) == 0x000044, "Member 'FJackBattleActionCameraDataTypeData::EndTime' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, LoopParam) == 0x000048, "Member 'FJackBattleActionCameraDataTypeData::LoopParam' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, NextCamera) == 0x000050, "Member 'FJackBattleActionCameraDataTypeData::NextCamera' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, AtToEyeYaw) == 0x000060, "Member 'FJackBattleActionCameraDataTypeData::AtToEyeYaw' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, AtToEyePitch) == 0x000070, "Member 'FJackBattleActionCameraDataTypeData::AtToEyePitch' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, AtToEyeLength) == 0x000080, "Member 'FJackBattleActionCameraDataTypeData::AtToEyeLength' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, AtRateBetweenAttackerDefender) == 0x000090, "Member 'FJackBattleActionCameraDataTypeData::AtRateBetweenAttackerDefender' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, Roll) == 0x0000A0, "Member 'FJackBattleActionCameraDataTypeData::Roll' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, EyeOffset) == 0x0000B0, "Member 'FJackBattleActionCameraDataTypeData::EyeOffset' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, AtOffset) == 0x0000C0, "Member 'FJackBattleActionCameraDataTypeData::AtOffset' has a wrong offset!");
static_assert(offsetof(FJackBattleActionCameraDataTypeData, bSystemUse) == 0x0000D0, "Member 'FJackBattleActionCameraDataTypeData::bSystemUse' has a wrong offset!");

// ScriptStruct JackGame.JackMantanActionInfo
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FJackMantanActionInfo final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMantanActionInfo) == 0x000008, "Wrong alignment on FJackMantanActionInfo");
static_assert(sizeof(FJackMantanActionInfo) == 0x000038, "Wrong size on FJackMantanActionInfo");

// ScriptStruct JackGame.JackCalcActionInfo
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FJackCalcActionInfo final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackCalcActionInfo) == 0x000008, "Wrong alignment on FJackCalcActionInfo");
static_assert(sizeof(FJackCalcActionInfo) == 0x000038, "Wrong size on FJackCalcActionInfo");

// ScriptStruct JackGame.JackDyingCalcRate
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FJackDyingCalcRate final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDyingCalcRate) == 0x000004, "Wrong alignment on FJackDyingCalcRate");
static_assert(sizeof(FJackDyingCalcRate) == 0x00000C, "Wrong size on FJackDyingCalcRate");

// ScriptStruct JackGame.JackRenkeiAction
// 0x00D0 (0x00D0 - 0x0000)
struct alignas(0x08) FJackRenkeiAction final
{
public:
	uint8                                         Pad_0[0xD0];                                       // 0x0000(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackRenkeiAction) == 0x000008, "Wrong alignment on FJackRenkeiAction");
static_assert(sizeof(FJackRenkeiAction) == 0x0000D0, "Wrong size on FJackRenkeiAction");

// ScriptStruct JackGame.JackLDT_PartyTalkData_B080
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_B080 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_B080) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_B080");
static_assert(sizeof(FJackLDT_PartyTalkData_B080) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_B080");

// ScriptStruct JackGame.JackDataTableMeosiSlotBGMProbability
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMeosiSlotBGMProbability final : public FTableRowBase
{
public:
	int32                                         NormalBGM;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StockBgm;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotBGMProbability) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotBGMProbability");
static_assert(sizeof(FJackDataTableMeosiSlotBGMProbability) == 0x000010, "Wrong size on FJackDataTableMeosiSlotBGMProbability");
static_assert(offsetof(FJackDataTableMeosiSlotBGMProbability, NormalBGM) == 0x000008, "Member 'FJackDataTableMeosiSlotBGMProbability::NormalBGM' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotBGMProbability, StockBgm) == 0x00000C, "Member 'FJackDataTableMeosiSlotBGMProbability::StockBgm' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Pose_P003Hair_Cs2
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_P003Hair_Cs2 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_P003Hair_Cs2) == 0x000008, "Wrong alignment on FJackLDT_Pose_P003Hair_Cs2");
static_assert(sizeof(FJackLDT_Pose_P003Hair_Cs2) == 0x000010, "Wrong size on FJackLDT_Pose_P003Hair_Cs2");

// ScriptStruct JackGame.JackLDT_MeosiSlotGoldSevens
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotGoldSevens final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotGoldSevens) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotGoldSevens");
static_assert(sizeof(FJackLDT_MeosiSlotGoldSevens) == 0x000010, "Wrong size on FJackLDT_MeosiSlotGoldSevens");

// ScriptStruct JackGame.JackLDT_TextDataMiniGame
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextDataMiniGame final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextDataMiniGame) == 0x000008, "Wrong alignment on FJackLDT_TextDataMiniGame");
static_assert(sizeof(FJackLDT_TextDataMiniGame) == 0x000010, "Wrong size on FJackLDT_TextDataMiniGame");

// ScriptStruct JackGame.JackKonranNanimoSinaiInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackKonranNanimoSinaiInfo final
{
public:
	class FName                                   ActionID;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Per;                                               // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackKonranNanimoSinaiInfo) == 0x000008, "Wrong alignment on FJackKonranNanimoSinaiInfo");
static_assert(sizeof(FJackKonranNanimoSinaiInfo) == 0x000010, "Wrong size on FJackKonranNanimoSinaiInfo");
static_assert(offsetof(FJackKonranNanimoSinaiInfo, ActionID) == 0x000000, "Member 'FJackKonranNanimoSinaiInfo::ActionID' has a wrong offset!");
static_assert(offsetof(FJackKonranNanimoSinaiInfo, Per) == 0x000008, "Member 'FJackKonranNanimoSinaiInfo::Per' has a wrong offset!");

// ScriptStruct JackGame.JackBattleCommandAI_ExecHistory
// 0x0020 (0x0020 - 0x0000)
struct FJackBattleCommandAI_ExecHistory final
{
public:
	TArray<struct FJackBattleCommandAI_ExecActionCount> ExecActionCounts;                                  // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<class FName>                           ExecLatestActionIDs;                               // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackBattleCommandAI_ExecHistory) == 0x000008, "Wrong alignment on FJackBattleCommandAI_ExecHistory");
static_assert(sizeof(FJackBattleCommandAI_ExecHistory) == 0x000020, "Wrong size on FJackBattleCommandAI_ExecHistory");
static_assert(offsetof(FJackBattleCommandAI_ExecHistory, ExecActionCounts) == 0x000000, "Member 'FJackBattleCommandAI_ExecHistory::ExecActionCounts' has a wrong offset!");
static_assert(offsetof(FJackBattleCommandAI_ExecHistory, ExecLatestActionIDs) == 0x000010, "Member 'FJackBattleCommandAI_ExecHistory::ExecLatestActionIDs' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_Skirt_Length1_TransSyncRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_Skirt_Length1_TransSyncRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_Skirt_Length1_TransSyncRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_Skirt_Length1_TransSyncRot");
static_assert(sizeof(FJackLDT_RtEx_Skirt_Length1_TransSyncRot) == 0x000010, "Wrong size on FJackLDT_RtEx_Skirt_Length1_TransSyncRot");

// ScriptStruct JackGame.JackPreemptiveStrikePersons
// 0x0010 (0x0010 - 0x0000)
struct FJackPreemptiveStrikePersons final
{
public:
	TArray<int32>                                 Probability;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackPreemptiveStrikePersons) == 0x000008, "Wrong alignment on FJackPreemptiveStrikePersons");
static_assert(sizeof(FJackPreemptiveStrikePersons) == 0x000010, "Wrong size on FJackPreemptiveStrikePersons");
static_assert(offsetof(FJackPreemptiveStrikePersons, Probability) == 0x000000, "Member 'FJackPreemptiveStrikePersons::Probability' has a wrong offset!");

// ScriptStruct JackGame.JackUmaRaceEntryData
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackUmaRaceEntryData final
{
public:
	class FName                                   PlayerName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseSpeedRate;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUmaRaceEntryData) == 0x000008, "Wrong alignment on FJackUmaRaceEntryData");
static_assert(sizeof(FJackUmaRaceEntryData) == 0x000010, "Wrong size on FJackUmaRaceEntryData");
static_assert(offsetof(FJackUmaRaceEntryData, PlayerName) == 0x000000, "Member 'FJackUmaRaceEntryData::PlayerName' has a wrong offset!");
static_assert(offsetof(FJackUmaRaceEntryData, BaseSpeedRate) == 0x000008, "Member 'FJackUmaRaceEntryData::BaseSpeedRate' has a wrong offset!");

// ScriptStruct JackGame.JackLevelDifferenceParam
// 0x000C (0x000C - 0x0000)
struct FJackLevelDifferenceParam final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpperLimit;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackLevelDifferenceParam) == 0x000004, "Wrong alignment on FJackLevelDifferenceParam");
static_assert(sizeof(FJackLevelDifferenceParam) == 0x00000C, "Wrong size on FJackLevelDifferenceParam");
static_assert(offsetof(FJackLevelDifferenceParam, Rate) == 0x000000, "Member 'FJackLevelDifferenceParam::Rate' has a wrong offset!");
static_assert(offsetof(FJackLevelDifferenceParam, UpperLimit) == 0x000004, "Member 'FJackLevelDifferenceParam::UpperLimit' has a wrong offset!");
static_assert(offsetof(FJackLevelDifferenceParam, Level) == 0x000008, "Member 'FJackLevelDifferenceParam::Level' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotBonusMonsterEncounterProbability
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableMeosiSlotBonusMonsterEncounterProbability final : public FTableRowBase
{
public:
	int32                                         Level1;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level2;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level3;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level4;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level5;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotBonusMonsterEncounterProbability) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotBonusMonsterEncounterProbability");
static_assert(sizeof(FJackDataTableMeosiSlotBonusMonsterEncounterProbability) == 0x000020, "Wrong size on FJackDataTableMeosiSlotBonusMonsterEncounterProbability");
static_assert(offsetof(FJackDataTableMeosiSlotBonusMonsterEncounterProbability, Level1) == 0x000008, "Member 'FJackDataTableMeosiSlotBonusMonsterEncounterProbability::Level1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotBonusMonsterEncounterProbability, Level2) == 0x00000C, "Member 'FJackDataTableMeosiSlotBonusMonsterEncounterProbability::Level2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotBonusMonsterEncounterProbability, Level3) == 0x000010, "Member 'FJackDataTableMeosiSlotBonusMonsterEncounterProbability::Level3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotBonusMonsterEncounterProbability, Level4) == 0x000014, "Member 'FJackDataTableMeosiSlotBonusMonsterEncounterProbability::Level4' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotBonusMonsterEncounterProbability, Level5) == 0x000018, "Member 'FJackDataTableMeosiSlotBonusMonsterEncounterProbability::Level5' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Pose_N101Hair
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_N101Hair final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_N101Hair) == 0x000008, "Wrong alignment on FJackLDT_Pose_N101Hair");
static_assert(sizeof(FJackLDT_Pose_N101Hair) == 0x000010, "Wrong size on FJackLDT_Pose_N101Hair");

// ScriptStruct JackGame.JackDataTableNPCReactionAnimation
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableNPCReactionAnimation final : public FTableRowBase
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotateSpeed;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableNPCReactionAnimation) == 0x000008, "Wrong alignment on FJackDataTableNPCReactionAnimation");
static_assert(sizeof(FJackDataTableNPCReactionAnimation) == 0x000018, "Wrong size on FJackDataTableNPCReactionAnimation");
static_assert(offsetof(FJackDataTableNPCReactionAnimation, AnimMontage) == 0x000008, "Member 'FJackDataTableNPCReactionAnimation::AnimMontage' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReactionAnimation, RotateSpeed) == 0x000010, "Member 'FJackDataTableNPCReactionAnimation::RotateSpeed' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_NmSkirtD1_MOMR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_NmSkirtD1_MOMR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_NmSkirtD1_MOMR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_NmSkirtD1_MOMR");
static_assert(sizeof(FJackLDT_RtEx_NmSkirtD1_MOMR) == 0x000010, "Wrong size on FJackLDT_RtEx_NmSkirtD1_MOMR");

// ScriptStruct JackGame.JackBattleResFukidasiInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackBattleResFukidasiInfo final
{
public:
	float                                         DelayTime;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayNowTime;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackBattleResFukidasiInfo) == 0x000008, "Wrong alignment on FJackBattleResFukidasiInfo");
static_assert(sizeof(FJackBattleResFukidasiInfo) == 0x000018, "Wrong size on FJackBattleResFukidasiInfo");
static_assert(offsetof(FJackBattleResFukidasiInfo, DelayTime) == 0x000000, "Member 'FJackBattleResFukidasiInfo::DelayTime' has a wrong offset!");
static_assert(offsetof(FJackBattleResFukidasiInfo, DelayNowTime) == 0x000004, "Member 'FJackBattleResFukidasiInfo::DelayNowTime' has a wrong offset!");

// ScriptStruct JackGame.JackBattleFukidasiVoiceInfo
// 0x0028 (0x0028 - 0x0000)
struct FJackBattleFukidasiVoiceInfo final
{
public:
	class UJackBattleVoicePlayer*                 VoicePlayer;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoiceID;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DelayDel;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bPlay2D;                                           // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackBattleFukidasiVoiceInfo) == 0x000008, "Wrong alignment on FJackBattleFukidasiVoiceInfo");
static_assert(sizeof(FJackBattleFukidasiVoiceInfo) == 0x000028, "Wrong size on FJackBattleFukidasiVoiceInfo");
static_assert(offsetof(FJackBattleFukidasiVoiceInfo, VoicePlayer) == 0x000000, "Member 'FJackBattleFukidasiVoiceInfo::VoicePlayer' has a wrong offset!");
static_assert(offsetof(FJackBattleFukidasiVoiceInfo, VoiceID) == 0x000008, "Member 'FJackBattleFukidasiVoiceInfo::VoiceID' has a wrong offset!");
static_assert(offsetof(FJackBattleFukidasiVoiceInfo, DelayDel) == 0x000010, "Member 'FJackBattleFukidasiVoiceInfo::DelayDel' has a wrong offset!");
static_assert(offsetof(FJackBattleFukidasiVoiceInfo, bPlay2D) == 0x000020, "Member 'FJackBattleFukidasiVoiceInfo::bPlay2D' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableSlotPayout
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableSlotPayout final : public FTableRowBase
{
public:
	int32                                         Five;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Four;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Three;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableSlotPayout) == 0x000008, "Wrong alignment on FJackDataTableSlotPayout");
static_assert(sizeof(FJackDataTableSlotPayout) == 0x000018, "Wrong size on FJackDataTableSlotPayout");
static_assert(offsetof(FJackDataTableSlotPayout, Five) == 0x000008, "Member 'FJackDataTableSlotPayout::Five' has a wrong offset!");
static_assert(offsetof(FJackDataTableSlotPayout, Four) == 0x00000C, "Member 'FJackDataTableSlotPayout::Four' has a wrong offset!");
static_assert(offsetof(FJackDataTableSlotPayout, Three) == 0x000010, "Member 'FJackDataTableSlotPayout::Three' has a wrong offset!");

// ScriptStruct JackGame.JackBattleFukidasiInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackBattleFukidasiInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackBattleFukidasiInfo) == 0x000008, "Wrong alignment on FJackBattleFukidasiInfo");
static_assert(sizeof(FJackBattleFukidasiInfo) == 0x000018, "Wrong size on FJackBattleFukidasiInfo");

// ScriptStruct JackGame.JackDataTableMeosiSlotUnionScenarioBlock
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMeosiSlotUnionScenarioBlock final : public FTableRowBase
{
public:
	EJackMeosiSlotUnionScenarioBranch             Branch;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinNum;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNum;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cont;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotUnionScenarioBlock) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotUnionScenarioBlock");
static_assert(sizeof(FJackDataTableMeosiSlotUnionScenarioBlock) == 0x000018, "Wrong size on FJackDataTableMeosiSlotUnionScenarioBlock");
static_assert(offsetof(FJackDataTableMeosiSlotUnionScenarioBlock, Branch) == 0x000008, "Member 'FJackDataTableMeosiSlotUnionScenarioBlock::Branch' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotUnionScenarioBlock, MinNum) == 0x00000C, "Member 'FJackDataTableMeosiSlotUnionScenarioBlock::MinNum' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotUnionScenarioBlock, MaxNum) == 0x000010, "Member 'FJackDataTableMeosiSlotUnionScenarioBlock::MaxNum' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotUnionScenarioBlock, Cont) == 0x000014, "Member 'FJackDataTableMeosiSlotUnionScenarioBlock::Cont' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotUnionScenario
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableMeosiSlotUnionScenario final : public FTableRowBase
{
public:
	int32                                         Group;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ratio;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstNum;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackDataTableMeosiSlotUnionScenarioBlock> GameStructArray;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotUnionScenario) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotUnionScenario");
static_assert(sizeof(FJackDataTableMeosiSlotUnionScenario) == 0x000028, "Wrong size on FJackDataTableMeosiSlotUnionScenario");
static_assert(offsetof(FJackDataTableMeosiSlotUnionScenario, Group) == 0x000008, "Member 'FJackDataTableMeosiSlotUnionScenario::Group' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotUnionScenario, Ratio) == 0x00000C, "Member 'FJackDataTableMeosiSlotUnionScenario::Ratio' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotUnionScenario, FirstNum) == 0x000010, "Member 'FJackDataTableMeosiSlotUnionScenario::FirstNum' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotUnionScenario, GameStructArray) == 0x000018, "Member 'FJackDataTableMeosiSlotUnionScenario::GameStructArray' has a wrong offset!");

// ScriptStruct JackGame.JackBattleFukidasiTalkCommandTicket
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FJackBattleFukidasiTalkCommandTicket final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackBattleFukidasiTalkCommandTicket) == 0x000008, "Wrong alignment on FJackBattleFukidasiTalkCommandTicket");
static_assert(sizeof(FJackBattleFukidasiTalkCommandTicket) == 0x000030, "Wrong size on FJackBattleFukidasiTalkCommandTicket");

// ScriptStruct JackGame.JackLDT_VoiceDrama_HDPafuPafu
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_VoiceDrama_HDPafuPafu final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_VoiceDrama_HDPafuPafu) == 0x000008, "Wrong alignment on FJackLDT_VoiceDrama_HDPafuPafu");
static_assert(sizeof(FJackLDT_VoiceDrama_HDPafuPafu) == 0x000010, "Wrong size on FJackLDT_VoiceDrama_HDPafuPafu");

// ScriptStruct JackGame.JackLDT_BattleFukidasiPeculiarWords
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_BattleFukidasiPeculiarWords final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_BattleFukidasiPeculiarWords) == 0x000008, "Wrong alignment on FJackLDT_BattleFukidasiPeculiarWords");
static_assert(sizeof(FJackLDT_BattleFukidasiPeculiarWords) == 0x000010, "Wrong size on FJackLDT_BattleFukidasiPeculiarWords");

// ScriptStruct JackGame.JackDataTableMapStart
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableMapStart final : public FTableRowBase
{
public:
	class FName                                   MapId;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelStreamingStatusID;                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CameraNo;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMapStart) == 0x000008, "Wrong alignment on FJackDataTableMapStart");
static_assert(sizeof(FJackDataTableMapStart) == 0x000020, "Wrong size on FJackDataTableMapStart");
static_assert(offsetof(FJackDataTableMapStart, MapId) == 0x000008, "Member 'FJackDataTableMapStart::MapId' has a wrong offset!");
static_assert(offsetof(FJackDataTableMapStart, LevelStreamingStatusID) == 0x000010, "Member 'FJackDataTableMapStart::LevelStreamingStatusID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMapStart, CameraNo) == 0x000018, "Member 'FJackDataTableMapStart::CameraNo' has a wrong offset!");

// ScriptStruct JackGame.JackBattleGroup
// 0x0098 (0x0098 - 0x0000)
struct FJackBattleGroup final
{
public:
	TWeakObjectPtr<class AJackCharacter>          Leader;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalLocation;                                     // 0x0014(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Direction;                                         // 0x0020(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundHeight;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x1C];                                      // 0x0034(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index;                                             // 0x0050(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EJackMight                                    Might;                                             // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MonsterID;                                         // 0x0058(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class AJackCharacter>>  JoinedCharacters;                                  // 0x0070(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct FVector>                        GroupLocations;                                    // 0x0080(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_90[0x8];                                       // 0x0090(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackBattleGroup) == 0x000008, "Wrong alignment on FJackBattleGroup");
static_assert(sizeof(FJackBattleGroup) == 0x000098, "Wrong size on FJackBattleGroup");
static_assert(offsetof(FJackBattleGroup, Leader) == 0x000000, "Member 'FJackBattleGroup::Leader' has a wrong offset!");
static_assert(offsetof(FJackBattleGroup, Location) == 0x000008, "Member 'FJackBattleGroup::Location' has a wrong offset!");
static_assert(offsetof(FJackBattleGroup, LocalLocation) == 0x000014, "Member 'FJackBattleGroup::LocalLocation' has a wrong offset!");
static_assert(offsetof(FJackBattleGroup, Direction) == 0x000020, "Member 'FJackBattleGroup::Direction' has a wrong offset!");
static_assert(offsetof(FJackBattleGroup, Radius) == 0x00002C, "Member 'FJackBattleGroup::Radius' has a wrong offset!");
static_assert(offsetof(FJackBattleGroup, GroundHeight) == 0x000030, "Member 'FJackBattleGroup::GroundHeight' has a wrong offset!");
static_assert(offsetof(FJackBattleGroup, Index) == 0x000050, "Member 'FJackBattleGroup::Index' has a wrong offset!");
static_assert(offsetof(FJackBattleGroup, Might) == 0x000054, "Member 'FJackBattleGroup::Might' has a wrong offset!");
static_assert(offsetof(FJackBattleGroup, MonsterID) == 0x000058, "Member 'FJackBattleGroup::MonsterID' has a wrong offset!");
static_assert(offsetof(FJackBattleGroup, JoinedCharacters) == 0x000070, "Member 'FJackBattleGroup::JoinedCharacters' has a wrong offset!");
static_assert(offsetof(FJackBattleGroup, GroupLocations) == 0x000080, "Member 'FJackBattleGroup::GroupLocations' has a wrong offset!");

// ScriptStruct JackGame.JackBattleTroop
// 0x00A8 (0x00A8 - 0x0000)
struct FJackBattleTroop final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Direction;                                         // 0x000C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HighDensityRate;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x70];                                      // 0x0020(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index;                                             // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EJackMight                                    Might;                                             // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackBattleGroup>               JoinedGroups;                                      // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FJackBattleTroop) == 0x000008, "Wrong alignment on FJackBattleTroop");
static_assert(sizeof(FJackBattleTroop) == 0x0000A8, "Wrong size on FJackBattleTroop");
static_assert(offsetof(FJackBattleTroop, Location) == 0x000000, "Member 'FJackBattleTroop::Location' has a wrong offset!");
static_assert(offsetof(FJackBattleTroop, Direction) == 0x00000C, "Member 'FJackBattleTroop::Direction' has a wrong offset!");
static_assert(offsetof(FJackBattleTroop, Radius) == 0x000018, "Member 'FJackBattleTroop::Radius' has a wrong offset!");
static_assert(offsetof(FJackBattleTroop, HighDensityRate) == 0x00001C, "Member 'FJackBattleTroop::HighDensityRate' has a wrong offset!");
static_assert(offsetof(FJackBattleTroop, Index) == 0x000090, "Member 'FJackBattleTroop::Index' has a wrong offset!");
static_assert(offsetof(FJackBattleTroop, Might) == 0x000094, "Member 'FJackBattleTroop::Might' has a wrong offset!");
static_assert(offsetof(FJackBattleTroop, JoinedGroups) == 0x000098, "Member 'FJackBattleTroop::JoinedGroups' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotReelLamp_Anim01
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotReelLamp_Anim01 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotReelLamp_Anim01) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotReelLamp_Anim01");
static_assert(sizeof(FJackLDT_MeosiSlotReelLamp_Anim01) == 0x000010, "Wrong size on FJackLDT_MeosiSlotReelLamp_Anim01");

// ScriptStruct JackGame.JackDataTableNPCInterruptControl
// 0x0050 (0x0058 - 0x0008)
struct FJackDataTableNPCInterruptControl final : public FTableRowBase
{
public:
	bool                                          bPermitToTalk;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPermitToTalkAnimation;                            // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPermitToReaction;                                 // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPermitUso;                                        // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackNPCTalkGazeMode                          TalkGazeMode;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimationAsset>         TalkAnimation;                                     // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimationAsset>         TalkEndAnimation;                                  // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimationAsset>         TalkEndWaitAnimation;                              // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableNPCInterruptControl) == 0x000008, "Wrong alignment on FJackDataTableNPCInterruptControl");
static_assert(sizeof(FJackDataTableNPCInterruptControl) == 0x000058, "Wrong size on FJackDataTableNPCInterruptControl");
static_assert(offsetof(FJackDataTableNPCInterruptControl, bPermitToTalk) == 0x000008, "Member 'FJackDataTableNPCInterruptControl::bPermitToTalk' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCInterruptControl, bPermitToTalkAnimation) == 0x000009, "Member 'FJackDataTableNPCInterruptControl::bPermitToTalkAnimation' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCInterruptControl, bPermitToReaction) == 0x00000A, "Member 'FJackDataTableNPCInterruptControl::bPermitToReaction' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCInterruptControl, bPermitUso) == 0x00000B, "Member 'FJackDataTableNPCInterruptControl::bPermitUso' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCInterruptControl, TalkGazeMode) == 0x00000C, "Member 'FJackDataTableNPCInterruptControl::TalkGazeMode' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCInterruptControl, TalkAnimation) == 0x000010, "Member 'FJackDataTableNPCInterruptControl::TalkAnimation' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCInterruptControl, TalkEndAnimation) == 0x000028, "Member 'FJackDataTableNPCInterruptControl::TalkEndAnimation' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCInterruptControl, TalkEndWaitAnimation) == 0x000040, "Member 'FJackDataTableNPCInterruptControl::TalkEndWaitAnimation' has a wrong offset!");

// ScriptStruct JackGame.JackGroupGuestExceptionFormationInfo
// 0x000C (0x000C - 0x0000)
struct FJackGroupGuestExceptionFormationInfo final
{
public:
	EJackCharacter                                CharacterType;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackGroupFormation                    Formation;                                         // 0x0004(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackGroupGuestExceptionFormationInfo) == 0x000004, "Wrong alignment on FJackGroupGuestExceptionFormationInfo");
static_assert(sizeof(FJackGroupGuestExceptionFormationInfo) == 0x00000C, "Wrong size on FJackGroupGuestExceptionFormationInfo");
static_assert(offsetof(FJackGroupGuestExceptionFormationInfo, CharacterType) == 0x000000, "Member 'FJackGroupGuestExceptionFormationInfo::CharacterType' has a wrong offset!");
static_assert(offsetof(FJackGroupGuestExceptionFormationInfo, Formation) == 0x000004, "Member 'FJackGroupGuestExceptionFormationInfo::Formation' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableBGMScenario
// 0x00C0 (0x00C8 - 0x0008)
struct FJackDataTableBGMScenario final : public FTableRowBase
{
public:
	class FName                                   StartFlag1;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndFlag1;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CSFlag1;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BGMID1;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartFlag2;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndFlag2;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CSFlag2;                                           // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BGMID2;                                            // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartFlag3;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndFlag3;                                          // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CSFlag3;                                           // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BGMID3;                                            // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartFlag4;                                        // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndFlag4;                                          // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CSFlag4;                                           // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BGMID4;                                            // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartFlag5;                                        // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndFlag5;                                          // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CSFlag5;                                           // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BGMID5;                                            // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartFlag6;                                        // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndFlag6;                                          // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CSFlag6;                                           // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BGMID6;                                            // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableBGMScenario) == 0x000008, "Wrong alignment on FJackDataTableBGMScenario");
static_assert(sizeof(FJackDataTableBGMScenario) == 0x0000C8, "Wrong size on FJackDataTableBGMScenario");
static_assert(offsetof(FJackDataTableBGMScenario, StartFlag1) == 0x000008, "Member 'FJackDataTableBGMScenario::StartFlag1' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMScenario, EndFlag1) == 0x000010, "Member 'FJackDataTableBGMScenario::EndFlag1' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMScenario, CSFlag1) == 0x000018, "Member 'FJackDataTableBGMScenario::CSFlag1' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMScenario, BGMID1) == 0x000020, "Member 'FJackDataTableBGMScenario::BGMID1' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMScenario, StartFlag2) == 0x000028, "Member 'FJackDataTableBGMScenario::StartFlag2' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMScenario, EndFlag2) == 0x000030, "Member 'FJackDataTableBGMScenario::EndFlag2' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMScenario, CSFlag2) == 0x000038, "Member 'FJackDataTableBGMScenario::CSFlag2' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMScenario, BGMID2) == 0x000040, "Member 'FJackDataTableBGMScenario::BGMID2' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMScenario, StartFlag3) == 0x000048, "Member 'FJackDataTableBGMScenario::StartFlag3' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMScenario, EndFlag3) == 0x000050, "Member 'FJackDataTableBGMScenario::EndFlag3' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMScenario, CSFlag3) == 0x000058, "Member 'FJackDataTableBGMScenario::CSFlag3' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMScenario, BGMID3) == 0x000060, "Member 'FJackDataTableBGMScenario::BGMID3' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMScenario, StartFlag4) == 0x000068, "Member 'FJackDataTableBGMScenario::StartFlag4' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMScenario, EndFlag4) == 0x000070, "Member 'FJackDataTableBGMScenario::EndFlag4' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMScenario, CSFlag4) == 0x000078, "Member 'FJackDataTableBGMScenario::CSFlag4' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMScenario, BGMID4) == 0x000080, "Member 'FJackDataTableBGMScenario::BGMID4' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMScenario, StartFlag5) == 0x000088, "Member 'FJackDataTableBGMScenario::StartFlag5' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMScenario, EndFlag5) == 0x000090, "Member 'FJackDataTableBGMScenario::EndFlag5' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMScenario, CSFlag5) == 0x000098, "Member 'FJackDataTableBGMScenario::CSFlag5' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMScenario, BGMID5) == 0x0000A0, "Member 'FJackDataTableBGMScenario::BGMID5' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMScenario, StartFlag6) == 0x0000A8, "Member 'FJackDataTableBGMScenario::StartFlag6' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMScenario, EndFlag6) == 0x0000B0, "Member 'FJackDataTableBGMScenario::EndFlag6' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMScenario, CSFlag6) == 0x0000B8, "Member 'FJackDataTableBGMScenario::CSFlag6' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMScenario, BGMID6) == 0x0000C0, "Member 'FJackDataTableBGMScenario::BGMID6' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleF_001
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleF_001 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleF_001) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleF_001");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleF_001) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleF_001");

// ScriptStruct JackGame.JackLDT_PokerDoubleUpBaseCardRate
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PokerDoubleUpBaseCardRate final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PokerDoubleUpBaseCardRate) == 0x000008, "Wrong alignment on FJackLDT_PokerDoubleUpBaseCardRate");
static_assert(sizeof(FJackLDT_PokerDoubleUpBaseCardRate) == 0x000010, "Wrong size on FJackLDT_PokerDoubleUpBaseCardRate");

// ScriptStruct JackGame.JackLDT_RtEx_FBSkirtA1_AverageRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FBSkirtA1_AverageRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FBSkirtA1_AverageRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FBSkirtA1_AverageRot");
static_assert(sizeof(FJackLDT_RtEx_FBSkirtA1_AverageRot) == 0x000010, "Wrong size on FJackLDT_RtEx_FBSkirtA1_AverageRot");

// ScriptStruct JackGame.JackActionBalloonDelayInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackActionBalloonDelayInfo final
{
public:
	class FName                                   ActionID;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPopupBalloon                             BalloonType;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelaySec;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackActionBalloonDelayInfo) == 0x000008, "Wrong alignment on FJackActionBalloonDelayInfo");
static_assert(sizeof(FJackActionBalloonDelayInfo) == 0x000010, "Wrong size on FJackActionBalloonDelayInfo");
static_assert(offsetof(FJackActionBalloonDelayInfo, ActionID) == 0x000000, "Member 'FJackActionBalloonDelayInfo::ActionID' has a wrong offset!");
static_assert(offsetof(FJackActionBalloonDelayInfo, BalloonType) == 0x000008, "Member 'FJackActionBalloonDelayInfo::BalloonType' has a wrong offset!");
static_assert(offsetof(FJackActionBalloonDelayInfo, DelaySec) == 0x00000C, "Member 'FJackActionBalloonDelayInfo::DelaySec' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_ResidentCurve
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ResidentCurve final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ResidentCurve) == 0x000008, "Wrong alignment on FJackLDT_ResidentCurve");
static_assert(sizeof(FJackLDT_ResidentCurve) == 0x000010, "Wrong size on FJackLDT_ResidentCurve");

// ScriptStruct JackGame.JackFusigiKaziActionData
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FJackFusigiKaziActionData final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackFusigiKaziActionData) == 0x000004, "Wrong alignment on FJackFusigiKaziActionData");
static_assert(sizeof(FJackFusigiKaziActionData) == 0x000014, "Wrong size on FJackFusigiKaziActionData");

// ScriptStruct JackGame.JackLDT_SlotMetalSpinRoleDataTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_SlotMetalSpinRoleDataTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_SlotMetalSpinRoleDataTable) == 0x000008, "Wrong alignment on FJackLDT_SlotMetalSpinRoleDataTable");
static_assert(sizeof(FJackLDT_SlotMetalSpinRoleDataTable) == 0x000010, "Wrong size on FJackLDT_SlotMetalSpinRoleDataTable");

// ScriptStruct JackGame.JackDataTableCutSceneVoiceTimelineInfo
// 0x0040 (0x0048 - 0x0008)
struct FJackDataTableCutSceneVoiceTimelineInfo final : public FTableRowBase
{
public:
	class FName                                   SerifuID;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetCharacterName;                               // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Parameter1;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Parameter2;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Parameter3;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Parameter4;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableCutSceneVoiceTimelineInfo) == 0x000008, "Wrong alignment on FJackDataTableCutSceneVoiceTimelineInfo");
static_assert(sizeof(FJackDataTableCutSceneVoiceTimelineInfo) == 0x000048, "Wrong size on FJackDataTableCutSceneVoiceTimelineInfo");
static_assert(offsetof(FJackDataTableCutSceneVoiceTimelineInfo, SerifuID) == 0x000008, "Member 'FJackDataTableCutSceneVoiceTimelineInfo::SerifuID' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneVoiceTimelineInfo, TargetCharacterName) == 0x000010, "Member 'FJackDataTableCutSceneVoiceTimelineInfo::TargetCharacterName' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneVoiceTimelineInfo, ActionName) == 0x000018, "Member 'FJackDataTableCutSceneVoiceTimelineInfo::ActionName' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneVoiceTimelineInfo, StartTime) == 0x000020, "Member 'FJackDataTableCutSceneVoiceTimelineInfo::StartTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneVoiceTimelineInfo, Parameter1) == 0x000028, "Member 'FJackDataTableCutSceneVoiceTimelineInfo::Parameter1' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneVoiceTimelineInfo, Parameter2) == 0x000030, "Member 'FJackDataTableCutSceneVoiceTimelineInfo::Parameter2' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneVoiceTimelineInfo, Parameter3) == 0x000038, "Member 'FJackDataTableCutSceneVoiceTimelineInfo::Parameter3' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneVoiceTimelineInfo, Parameter4) == 0x000040, "Member 'FJackDataTableCutSceneVoiceTimelineInfo::Parameter4' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Facial_M505
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Facial_M505 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Facial_M505) == 0x000008, "Wrong alignment on FJackLDT_Facial_M505");
static_assert(sizeof(FJackLDT_Facial_M505) == 0x000010, "Wrong size on FJackLDT_Facial_M505");

// ScriptStruct JackGame.JackBattleResultExpInfo
// 0x0014 (0x0014 - 0x0000)
struct FJackBattleResultExpInfo final
{
public:
	TWeakObjectPtr<class UJackGameCharacter>      GameCharacter;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp;                                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldExp;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSibariExp;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackBattleResultExpInfo) == 0x000004, "Wrong alignment on FJackBattleResultExpInfo");
static_assert(sizeof(FJackBattleResultExpInfo) == 0x000014, "Wrong size on FJackBattleResultExpInfo");
static_assert(offsetof(FJackBattleResultExpInfo, GameCharacter) == 0x000000, "Member 'FJackBattleResultExpInfo::GameCharacter' has a wrong offset!");
static_assert(offsetof(FJackBattleResultExpInfo, Exp) == 0x000008, "Member 'FJackBattleResultExpInfo::Exp' has a wrong offset!");
static_assert(offsetof(FJackBattleResultExpInfo, FieldExp) == 0x00000C, "Member 'FJackBattleResultExpInfo::FieldExp' has a wrong offset!");
static_assert(offsetof(FJackBattleResultExpInfo, bSibariExp) == 0x000010, "Member 'FJackBattleResultExpInfo::bSibariExp' has a wrong offset!");

// ScriptStruct JackGame.JackBattleFukidasiText
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FJackBattleFukidasiText final
{
public:
	class FName                                   CharacterID;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleFukidasiTextVoiceType              VoiceType;                                         // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleFukidasiTextVoiceType              VoiceTypeNE;                                       // 0x0011(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FaceIconID;                                        // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StringParam;                                       // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackBattleFukidasiText) == 0x000008, "Wrong alignment on FJackBattleFukidasiText");
static_assert(sizeof(FJackBattleFukidasiText) == 0x000028, "Wrong size on FJackBattleFukidasiText");
static_assert(offsetof(FJackBattleFukidasiText, CharacterID) == 0x000000, "Member 'FJackBattleFukidasiText::CharacterID' has a wrong offset!");
static_assert(offsetof(FJackBattleFukidasiText, TextID) == 0x000008, "Member 'FJackBattleFukidasiText::TextID' has a wrong offset!");
static_assert(offsetof(FJackBattleFukidasiText, VoiceType) == 0x000010, "Member 'FJackBattleFukidasiText::VoiceType' has a wrong offset!");
static_assert(offsetof(FJackBattleFukidasiText, VoiceTypeNE) == 0x000011, "Member 'FJackBattleFukidasiText::VoiceTypeNE' has a wrong offset!");
static_assert(offsetof(FJackBattleFukidasiText, FaceIconID) == 0x000018, "Member 'FJackBattleFukidasiText::FaceIconID' has a wrong offset!");
static_assert(offsetof(FJackBattleFukidasiText, StringParam) == 0x000020, "Member 'FJackBattleFukidasiText::StringParam' has a wrong offset!");

// ScriptStruct JackGame.JackCaptionTrackSynchroInfo
// 0x000C (0x000C - 0x0000)
struct FJackCaptionTrackSynchroInfo final
{
public:
	TWeakObjectPtr<class AMatineeActor>           RequestMatinee;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x4];                                        // 0x0008(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackCaptionTrackSynchroInfo) == 0x000004, "Wrong alignment on FJackCaptionTrackSynchroInfo");
static_assert(sizeof(FJackCaptionTrackSynchroInfo) == 0x00000C, "Wrong size on FJackCaptionTrackSynchroInfo");
static_assert(offsetof(FJackCaptionTrackSynchroInfo, RequestMatinee) == 0x000000, "Member 'FJackCaptionTrackSynchroInfo::RequestMatinee' has a wrong offset!");

// ScriptStruct JackGame.JackBattleFukidasiTextContainer
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackBattleFukidasiTextContainer final
{
public:
	class FName                                   TextID;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleFukidasiTextEnableType             EnableType;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackBattleFukidasiTextContainer) == 0x000008, "Wrong alignment on FJackBattleFukidasiTextContainer");
static_assert(sizeof(FJackBattleFukidasiTextContainer) == 0x000010, "Wrong size on FJackBattleFukidasiTextContainer");
static_assert(offsetof(FJackBattleFukidasiTextContainer, TextID) == 0x000000, "Member 'FJackBattleFukidasiTextContainer::TextID' has a wrong offset!");
static_assert(offsetof(FJackBattleFukidasiTextContainer, EnableType) == 0x000008, "Member 'FJackBattleFukidasiTextContainer::EnableType' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_PartyTalkData_A010
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_A010 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_A010) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_A010");
static_assert(sizeof(FJackLDT_PartyTalkData_A010) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_A010");

// ScriptStruct JackGame.JackBattleFieldFoliageDitherInfo
// 0x0028 (0x0028 - 0x0000)
struct FJackBattleFieldFoliageDitherInfo final
{
public:
	float                                         BattleFieldRadius;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJackBattleFieldFoliageDitherDetailInfo DetailInfos[0x3];                                  // 0x0004(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackBattleFieldFoliageDitherInfo) == 0x000004, "Wrong alignment on FJackBattleFieldFoliageDitherInfo");
static_assert(sizeof(FJackBattleFieldFoliageDitherInfo) == 0x000028, "Wrong size on FJackBattleFieldFoliageDitherInfo");
static_assert(offsetof(FJackBattleFieldFoliageDitherInfo, BattleFieldRadius) == 0x000000, "Member 'FJackBattleFieldFoliageDitherInfo::BattleFieldRadius' has a wrong offset!");
static_assert(offsetof(FJackBattleFieldFoliageDitherInfo, DetailInfos) == 0x000004, "Member 'FJackBattleFieldFoliageDitherInfo::DetailInfos' has a wrong offset!");

// ScriptStruct JackGame.JackVoiceDramaSelectButtonAnimation
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackVoiceDramaSelectButtonAnimation final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackVoiceDramaSelectButtonAnimation) == 0x000008, "Wrong alignment on FJackVoiceDramaSelectButtonAnimation");
static_assert(sizeof(FJackVoiceDramaSelectButtonAnimation) == 0x000018, "Wrong size on FJackVoiceDramaSelectButtonAnimation");

// ScriptStruct JackGame.JackLDT_TenseiSelectTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TenseiSelectTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TenseiSelectTable) == 0x000008, "Wrong alignment on FJackLDT_TenseiSelectTable");
static_assert(sizeof(FJackLDT_TenseiSelectTable) == 0x000010, "Wrong size on FJackLDT_TenseiSelectTable");

// ScriptStruct JackGame.JackDataTableBattleFukidasi
// 0x0060 (0x0068 - 0x0008)
struct FJackDataTableBattleFukidasi final : public FTableRowBase
{
public:
	class FName                                   FukidasiRequirementID;                             // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJackBattleFukidasiTextContainer> TextContainer;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EJackBattleFukidasiTalkTimming                Timming;                                           // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnce;                                             // 0x0021(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InvokePer;                                         // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToCharacter;                                       // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleFukidasiTalkTurn                   Turn;                                              // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleFukidasiSndCalcType                SndCalcType;                                       // 0x0031(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SndCalcParam;                                      // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Capacity;                                          // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFree;                                          // 0x003C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleFukidasiUIType                     UIType;                                            // 0x0044(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleFukidasiCalcType                   SetCalcType;                                       // 0x0045(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayTime;                                         // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x004C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoSilence;                                        // 0x0050(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalidMoveTalk;                                  // 0x0051(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSlomo;                                            // 0x0052(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackBattleFukidasiTalkCondition> SetConditions;                                     // 0x0058(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableBattleFukidasi) == 0x000008, "Wrong alignment on FJackDataTableBattleFukidasi");
static_assert(sizeof(FJackDataTableBattleFukidasi) == 0x000068, "Wrong size on FJackDataTableBattleFukidasi");
static_assert(offsetof(FJackDataTableBattleFukidasi, FukidasiRequirementID) == 0x000008, "Member 'FJackDataTableBattleFukidasi::FukidasiRequirementID' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasi, TextContainer) == 0x000010, "Member 'FJackDataTableBattleFukidasi::TextContainer' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasi, Timming) == 0x000020, "Member 'FJackDataTableBattleFukidasi::Timming' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasi, bOnce) == 0x000021, "Member 'FJackDataTableBattleFukidasi::bOnce' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasi, InvokePer) == 0x000024, "Member 'FJackDataTableBattleFukidasi::InvokePer' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasi, ToCharacter) == 0x000028, "Member 'FJackDataTableBattleFukidasi::ToCharacter' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasi, Turn) == 0x000030, "Member 'FJackDataTableBattleFukidasi::Turn' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasi, SndCalcType) == 0x000031, "Member 'FJackDataTableBattleFukidasi::SndCalcType' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasi, SndCalcParam) == 0x000034, "Member 'FJackDataTableBattleFukidasi::SndCalcParam' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasi, Capacity) == 0x000038, "Member 'FJackDataTableBattleFukidasi::Capacity' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasi, bUseFree) == 0x00003C, "Member 'FJackDataTableBattleFukidasi::bUseFree' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasi, Priority) == 0x000040, "Member 'FJackDataTableBattleFukidasi::Priority' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasi, UIType) == 0x000044, "Member 'FJackDataTableBattleFukidasi::UIType' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasi, SetCalcType) == 0x000045, "Member 'FJackDataTableBattleFukidasi::SetCalcType' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasi, DelayTime) == 0x000048, "Member 'FJackDataTableBattleFukidasi::DelayTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasi, Time) == 0x00004C, "Member 'FJackDataTableBattleFukidasi::Time' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasi, bNoSilence) == 0x000050, "Member 'FJackDataTableBattleFukidasi::bNoSilence' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasi, bInvalidMoveTalk) == 0x000051, "Member 'FJackDataTableBattleFukidasi::bInvalidMoveTalk' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasi, bSlomo) == 0x000052, "Member 'FJackDataTableBattleFukidasi::bSlomo' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleFukidasi, SetConditions) == 0x000058, "Member 'FJackDataTableBattleFukidasi::SetConditions' has a wrong offset!");

// ScriptStruct JackGame.JackBattleSelectionCharacterInfo
// 0x0018 (0x0018 - 0x0000)
struct FJackBattleSelectionCharacterInfo final
{
public:
	TWeakObjectPtr<class AJackCharacter>          Character;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UJackMaterialUpdaterHandle> MaterialUpdaterHandle;                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AJackCharacter>          MaterialAnimationCharacter;                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackBattleSelectionCharacterInfo) == 0x000004, "Wrong alignment on FJackBattleSelectionCharacterInfo");
static_assert(sizeof(FJackBattleSelectionCharacterInfo) == 0x000018, "Wrong size on FJackBattleSelectionCharacterInfo");
static_assert(offsetof(FJackBattleSelectionCharacterInfo, Character) == 0x000000, "Member 'FJackBattleSelectionCharacterInfo::Character' has a wrong offset!");
static_assert(offsetof(FJackBattleSelectionCharacterInfo, MaterialUpdaterHandle) == 0x000008, "Member 'FJackBattleSelectionCharacterInfo::MaterialUpdaterHandle' has a wrong offset!");
static_assert(offsetof(FJackBattleSelectionCharacterInfo, MaterialAnimationCharacter) == 0x000010, "Member 'FJackBattleSelectionCharacterInfo::MaterialAnimationCharacter' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotRefundRate
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMeosiSlotRefundRate final : public FTableRowBase
{
public:
	float                                         ShimohuriRate;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClearanceRate;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotRefundRate) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotRefundRate");
static_assert(sizeof(FJackDataTableMeosiSlotRefundRate) == 0x000010, "Wrong size on FJackDataTableMeosiSlotRefundRate");
static_assert(offsetof(FJackDataTableMeosiSlotRefundRate, ShimohuriRate) == 0x000008, "Member 'FJackDataTableMeosiSlotRefundRate::ShimohuriRate' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotRefundRate, ClearanceRate) == 0x00000C, "Member 'FJackDataTableMeosiSlotRefundRate::ClearanceRate' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableKaziLv
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableKaziLv final : public FTableRowBase
{
public:
	int32                                         PlayerLv;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCP;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForgedPower_Min;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForgedPower_Max;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Kaisin_Percentage;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnderRank;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableKaziLv) == 0x000008, "Wrong alignment on FJackDataTableKaziLv");
static_assert(sizeof(FJackDataTableKaziLv) == 0x000020, "Wrong size on FJackDataTableKaziLv");
static_assert(offsetof(FJackDataTableKaziLv, PlayerLv) == 0x000008, "Member 'FJackDataTableKaziLv::PlayerLv' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziLv, MaxCP) == 0x00000C, "Member 'FJackDataTableKaziLv::MaxCP' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziLv, ForgedPower_Min) == 0x000010, "Member 'FJackDataTableKaziLv::ForgedPower_Min' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziLv, ForgedPower_Max) == 0x000014, "Member 'FJackDataTableKaziLv::ForgedPower_Max' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziLv, Kaisin_Percentage) == 0x000018, "Member 'FJackDataTableKaziLv::Kaisin_Percentage' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziLv, UnderRank) == 0x00001C, "Member 'FJackDataTableKaziLv::UnderRank' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_VoiceDrama_V_070
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_VoiceDrama_V_070 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_VoiceDrama_V_070) == 0x000008, "Wrong alignment on FJackLDT_VoiceDrama_V_070");
static_assert(sizeof(FJackLDT_VoiceDrama_V_070) == 0x000010, "Wrong size on FJackLDT_VoiceDrama_V_070");

// ScriptStruct JackGame.JackHazukasiiNoroiMessageInfo
// 0x0020 (0x0020 - 0x0000)
struct FJackHazukasiiNoroiMessageInfo final
{
public:
	class FString                                 TextID1;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextID2;                                           // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackHazukasiiNoroiMessageInfo) == 0x000008, "Wrong alignment on FJackHazukasiiNoroiMessageInfo");
static_assert(sizeof(FJackHazukasiiNoroiMessageInfo) == 0x000020, "Wrong size on FJackHazukasiiNoroiMessageInfo");
static_assert(offsetof(FJackHazukasiiNoroiMessageInfo, TextID1) == 0x000000, "Member 'FJackHazukasiiNoroiMessageInfo::TextID1' has a wrong offset!");
static_assert(offsetof(FJackHazukasiiNoroiMessageInfo, TextID2) == 0x000010, "Member 'FJackHazukasiiNoroiMessageInfo::TextID2' has a wrong offset!");

// ScriptStruct JackGame.JackOddEffectCompactMessageInfo
// 0x0050 (0x0050 - 0x0000)
struct FJackOddEffectCompactMessageInfo final
{
public:
	class FName                                   OddEffectID;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleMessageCompactType                 CompactType;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CompactMessageID;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeikinCompactMessageID;                            // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EnemyCompactMessageID;                             // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeikinEnemyCompactMessageID;                       // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackOddEffectCompactMessageInfo) == 0x000008, "Wrong alignment on FJackOddEffectCompactMessageInfo");
static_assert(sizeof(FJackOddEffectCompactMessageInfo) == 0x000050, "Wrong size on FJackOddEffectCompactMessageInfo");
static_assert(offsetof(FJackOddEffectCompactMessageInfo, OddEffectID) == 0x000000, "Member 'FJackOddEffectCompactMessageInfo::OddEffectID' has a wrong offset!");
static_assert(offsetof(FJackOddEffectCompactMessageInfo, CompactType) == 0x000008, "Member 'FJackOddEffectCompactMessageInfo::CompactType' has a wrong offset!");
static_assert(offsetof(FJackOddEffectCompactMessageInfo, CompactMessageID) == 0x000010, "Member 'FJackOddEffectCompactMessageInfo::CompactMessageID' has a wrong offset!");
static_assert(offsetof(FJackOddEffectCompactMessageInfo, HeikinCompactMessageID) == 0x000020, "Member 'FJackOddEffectCompactMessageInfo::HeikinCompactMessageID' has a wrong offset!");
static_assert(offsetof(FJackOddEffectCompactMessageInfo, EnemyCompactMessageID) == 0x000030, "Member 'FJackOddEffectCompactMessageInfo::EnemyCompactMessageID' has a wrong offset!");
static_assert(offsetof(FJackOddEffectCompactMessageInfo, HeikinEnemyCompactMessageID) == 0x000040, "Member 'FJackOddEffectCompactMessageInfo::HeikinEnemyCompactMessageID' has a wrong offset!");

// ScriptStruct JackGame.JackDamageCompactMessageInfo
// 0x0050 (0x0050 - 0x0000)
struct FJackDamageCompactMessageInfo final
{
public:
	class FName                                   BattleTextID;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleMessageCompactType                 CompactType;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GoukeiPlayerCompactMessageID;                      // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeikinPlayerCompactMessageID;                      // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GoukeiEnemyCompactMessageID;                       // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeikinEnemyCompactMessageID;                       // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDamageCompactMessageInfo) == 0x000008, "Wrong alignment on FJackDamageCompactMessageInfo");
static_assert(sizeof(FJackDamageCompactMessageInfo) == 0x000050, "Wrong size on FJackDamageCompactMessageInfo");
static_assert(offsetof(FJackDamageCompactMessageInfo, BattleTextID) == 0x000000, "Member 'FJackDamageCompactMessageInfo::BattleTextID' has a wrong offset!");
static_assert(offsetof(FJackDamageCompactMessageInfo, CompactType) == 0x000008, "Member 'FJackDamageCompactMessageInfo::CompactType' has a wrong offset!");
static_assert(offsetof(FJackDamageCompactMessageInfo, GoukeiPlayerCompactMessageID) == 0x000010, "Member 'FJackDamageCompactMessageInfo::GoukeiPlayerCompactMessageID' has a wrong offset!");
static_assert(offsetof(FJackDamageCompactMessageInfo, HeikinPlayerCompactMessageID) == 0x000020, "Member 'FJackDamageCompactMessageInfo::HeikinPlayerCompactMessageID' has a wrong offset!");
static_assert(offsetof(FJackDamageCompactMessageInfo, GoukeiEnemyCompactMessageID) == 0x000030, "Member 'FJackDamageCompactMessageInfo::GoukeiEnemyCompactMessageID' has a wrong offset!");
static_assert(offsetof(FJackDamageCompactMessageInfo, HeikinEnemyCompactMessageID) == 0x000040, "Member 'FJackDamageCompactMessageInfo::HeikinEnemyCompactMessageID' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_GameFlagDataGuide
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_GameFlagDataGuide final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_GameFlagDataGuide) == 0x000008, "Wrong alignment on FJackLDT_GameFlagDataGuide");
static_assert(sizeof(FJackLDT_GameFlagDataGuide) == 0x000010, "Wrong size on FJackLDT_GameFlagDataGuide");

// ScriptStruct JackGame.JackKougekiInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackKougekiInfo final
{
public:
	class FName                                   NormalActionID;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DistantActionID;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistantThreshold;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistantBranchPer;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackKougekiInfo) == 0x000008, "Wrong alignment on FJackKougekiInfo");
static_assert(sizeof(FJackKougekiInfo) == 0x000018, "Wrong size on FJackKougekiInfo");
static_assert(offsetof(FJackKougekiInfo, NormalActionID) == 0x000000, "Member 'FJackKougekiInfo::NormalActionID' has a wrong offset!");
static_assert(offsetof(FJackKougekiInfo, DistantActionID) == 0x000008, "Member 'FJackKougekiInfo::DistantActionID' has a wrong offset!");
static_assert(offsetof(FJackKougekiInfo, DistantThreshold) == 0x000010, "Member 'FJackKougekiInfo::DistantThreshold' has a wrong offset!");
static_assert(offsetof(FJackKougekiInfo, DistantBranchPer) == 0x000014, "Member 'FJackKougekiInfo::DistantBranchPer' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_PartyTalkData_A100
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_A100 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_A100) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_A100");
static_assert(sizeof(FJackLDT_PartyTalkData_A100) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_A100");

// ScriptStruct JackGame.JackBattleZenmetuMemberChangeInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackBattleZenmetuMemberChangeInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackBattleZenmetuMemberChangeInfo) == 0x000008, "Wrong alignment on FJackBattleZenmetuMemberChangeInfo");
static_assert(sizeof(FJackBattleZenmetuMemberChangeInfo) == 0x000010, "Wrong size on FJackBattleZenmetuMemberChangeInfo");

// ScriptStruct JackGame.JackBattleMemberChangeCharaInfo
// 0x0050 (0x0050 - 0x0000)
struct FJackBattleMemberChangeCharaInfo final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldIndex;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldDestroy;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UJackFriendGameCharacter> LeaveGameCharacter;                                // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UJackFriendGameCharacter> JoinGameCharacter;                                 // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LeaveCharacterTransform;                           // 0x0020(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackBattleMemberChangeCharaInfo) == 0x000010, "Wrong alignment on FJackBattleMemberChangeCharaInfo");
static_assert(sizeof(FJackBattleMemberChangeCharaInfo) == 0x000050, "Wrong size on FJackBattleMemberChangeCharaInfo");
static_assert(offsetof(FJackBattleMemberChangeCharaInfo, Index) == 0x000000, "Member 'FJackBattleMemberChangeCharaInfo::Index' has a wrong offset!");
static_assert(offsetof(FJackBattleMemberChangeCharaInfo, OldIndex) == 0x000004, "Member 'FJackBattleMemberChangeCharaInfo::OldIndex' has a wrong offset!");
static_assert(offsetof(FJackBattleMemberChangeCharaInfo, bShouldDestroy) == 0x000008, "Member 'FJackBattleMemberChangeCharaInfo::bShouldDestroy' has a wrong offset!");
static_assert(offsetof(FJackBattleMemberChangeCharaInfo, LeaveGameCharacter) == 0x00000C, "Member 'FJackBattleMemberChangeCharaInfo::LeaveGameCharacter' has a wrong offset!");
static_assert(offsetof(FJackBattleMemberChangeCharaInfo, JoinGameCharacter) == 0x000014, "Member 'FJackBattleMemberChangeCharaInfo::JoinGameCharacter' has a wrong offset!");
static_assert(offsetof(FJackBattleMemberChangeCharaInfo, LeaveCharacterTransform) == 0x000020, "Member 'FJackBattleMemberChangeCharaInfo::LeaveCharacterTransform' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableSlotWild
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableSlotWild final : public FTableRowBase
{
public:
	int32                                         Percent;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableSlotWild) == 0x000008, "Wrong alignment on FJackDataTableSlotWild");
static_assert(sizeof(FJackDataTableSlotWild) == 0x000010, "Wrong size on FJackDataTableSlotWild");
static_assert(offsetof(FJackDataTableSlotWild, Percent) == 0x000008, "Member 'FJackDataTableSlotWild::Percent' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotReelLamp_Ken
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotReelLamp_Ken final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotReelLamp_Ken) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotReelLamp_Ken");
static_assert(sizeof(FJackLDT_MeosiSlotReelLamp_Ken) == 0x000010, "Wrong size on FJackLDT_MeosiSlotReelLamp_Ken");

// ScriptStruct JackGame.JackDamageSound
// 0x0060 (0x0060 - 0x0000)
struct FJackDamageSound final
{
public:
	TSoftObjectPtr<class USoundBase>              DamageNormal;                                      // 0x0000(0x0018)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              DamageCritical;                                    // 0x0018(0x0018)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              DamageGuard;                                       // 0x0030(0x0018)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              DamageMiss;                                        // 0x0048(0x0018)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDamageSound) == 0x000008, "Wrong alignment on FJackDamageSound");
static_assert(sizeof(FJackDamageSound) == 0x000060, "Wrong size on FJackDamageSound");
static_assert(offsetof(FJackDamageSound, DamageNormal) == 0x000000, "Member 'FJackDamageSound::DamageNormal' has a wrong offset!");
static_assert(offsetof(FJackDamageSound, DamageCritical) == 0x000018, "Member 'FJackDamageSound::DamageCritical' has a wrong offset!");
static_assert(offsetof(FJackDamageSound, DamageGuard) == 0x000030, "Member 'FJackDamageSound::DamageGuard' has a wrong offset!");
static_assert(offsetof(FJackDamageSound, DamageMiss) == 0x000048, "Member 'FJackDamageSound::DamageMiss' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableDamageSoundTable
// 0x0F00 (0x0F08 - 0x0008)
struct FJackDataTableDamageSoundTable final : public FTableRowBase
{
public:
	struct FJackDamageSound                       NOT;                                               // 0x0008(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       SWD;                                               // 0x0068(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       DGR;                                               // 0x00C8(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       AXE;                                               // 0x0128(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       STK;                                               // 0x0188(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       BOO;                                               // 0x01E8(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       TSW;                                               // 0x0248(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       SPR;                                               // 0x02A8(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       ROD;                                               // 0x0308(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       CLW;                                               // 0x0368(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       WHP;                                               // 0x03C8(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       DSW;                                               // 0x0428(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       DDG;                                               // 0x0488(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       DAX;                                               // 0x04E8(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       DST;                                               // 0x0548(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       DBO;                                               // 0x05A8(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       Fng_S;                                             // 0x0608(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       Fng_M;                                             // 0x0668(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       Fng_L;                                             // 0x06C8(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       Bek_S;                                             // 0x0728(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       Bek_M;                                             // 0x0788(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       Bek_L;                                             // 0x07E8(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       Pnc_S;                                             // 0x0848(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       Pnc_M;                                             // 0x08A8(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       Pnc_L;                                             // 0x0908(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       Don_S;                                             // 0x0968(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       Don_M;                                             // 0x09C8(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       Don_L;                                             // 0x0A28(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       Spr_S;                                             // 0x0A88(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       Spr_M;                                             // 0x0AE8(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       Spr_L;                                             // 0x0B48(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       Clw_S;                                             // 0x0BA8(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       Clw_M;                                             // 0x0C08(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       Clw_L;                                             // 0x0C68(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       Swd_S;                                             // 0x0CC8(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       Swd_M;                                             // 0x0D28(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       Swd_L;                                             // 0x0D88(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       Arw_S;                                             // 0x0DE8(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       Arw_M;                                             // 0x0E48(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageSound                       Arw_L;                                             // 0x0EA8(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableDamageSoundTable) == 0x000008, "Wrong alignment on FJackDataTableDamageSoundTable");
static_assert(sizeof(FJackDataTableDamageSoundTable) == 0x000F08, "Wrong size on FJackDataTableDamageSoundTable");
static_assert(offsetof(FJackDataTableDamageSoundTable, NOT) == 0x000008, "Member 'FJackDataTableDamageSoundTable::NOT' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, SWD) == 0x000068, "Member 'FJackDataTableDamageSoundTable::SWD' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, DGR) == 0x0000C8, "Member 'FJackDataTableDamageSoundTable::DGR' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, AXE) == 0x000128, "Member 'FJackDataTableDamageSoundTable::AXE' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, STK) == 0x000188, "Member 'FJackDataTableDamageSoundTable::STK' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, BOO) == 0x0001E8, "Member 'FJackDataTableDamageSoundTable::BOO' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, TSW) == 0x000248, "Member 'FJackDataTableDamageSoundTable::TSW' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, SPR) == 0x0002A8, "Member 'FJackDataTableDamageSoundTable::SPR' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, ROD) == 0x000308, "Member 'FJackDataTableDamageSoundTable::ROD' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, CLW) == 0x000368, "Member 'FJackDataTableDamageSoundTable::CLW' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, WHP) == 0x0003C8, "Member 'FJackDataTableDamageSoundTable::WHP' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, DSW) == 0x000428, "Member 'FJackDataTableDamageSoundTable::DSW' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, DDG) == 0x000488, "Member 'FJackDataTableDamageSoundTable::DDG' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, DAX) == 0x0004E8, "Member 'FJackDataTableDamageSoundTable::DAX' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, DST) == 0x000548, "Member 'FJackDataTableDamageSoundTable::DST' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, DBO) == 0x0005A8, "Member 'FJackDataTableDamageSoundTable::DBO' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, Fng_S) == 0x000608, "Member 'FJackDataTableDamageSoundTable::Fng_S' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, Fng_M) == 0x000668, "Member 'FJackDataTableDamageSoundTable::Fng_M' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, Fng_L) == 0x0006C8, "Member 'FJackDataTableDamageSoundTable::Fng_L' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, Bek_S) == 0x000728, "Member 'FJackDataTableDamageSoundTable::Bek_S' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, Bek_M) == 0x000788, "Member 'FJackDataTableDamageSoundTable::Bek_M' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, Bek_L) == 0x0007E8, "Member 'FJackDataTableDamageSoundTable::Bek_L' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, Pnc_S) == 0x000848, "Member 'FJackDataTableDamageSoundTable::Pnc_S' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, Pnc_M) == 0x0008A8, "Member 'FJackDataTableDamageSoundTable::Pnc_M' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, Pnc_L) == 0x000908, "Member 'FJackDataTableDamageSoundTable::Pnc_L' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, Don_S) == 0x000968, "Member 'FJackDataTableDamageSoundTable::Don_S' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, Don_M) == 0x0009C8, "Member 'FJackDataTableDamageSoundTable::Don_M' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, Don_L) == 0x000A28, "Member 'FJackDataTableDamageSoundTable::Don_L' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, Spr_S) == 0x000A88, "Member 'FJackDataTableDamageSoundTable::Spr_S' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, Spr_M) == 0x000AE8, "Member 'FJackDataTableDamageSoundTable::Spr_M' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, Spr_L) == 0x000B48, "Member 'FJackDataTableDamageSoundTable::Spr_L' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, Clw_S) == 0x000BA8, "Member 'FJackDataTableDamageSoundTable::Clw_S' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, Clw_M) == 0x000C08, "Member 'FJackDataTableDamageSoundTable::Clw_M' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, Clw_L) == 0x000C68, "Member 'FJackDataTableDamageSoundTable::Clw_L' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, Swd_S) == 0x000CC8, "Member 'FJackDataTableDamageSoundTable::Swd_S' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, Swd_M) == 0x000D28, "Member 'FJackDataTableDamageSoundTable::Swd_M' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, Swd_L) == 0x000D88, "Member 'FJackDataTableDamageSoundTable::Swd_L' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, Arw_S) == 0x000DE8, "Member 'FJackDataTableDamageSoundTable::Arw_S' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, Arw_M) == 0x000E48, "Member 'FJackDataTableDamageSoundTable::Arw_M' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageSoundTable, Arw_L) == 0x000EA8, "Member 'FJackDataTableDamageSoundTable::Arw_L' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_N_D17
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_N_D17 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_N_D17) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_N_D17");
static_assert(sizeof(FJackLDT_MonsterDeploy_N_D17) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_N_D17");

// ScriptStruct JackGame.JackCoordSoundTrackKey
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackCoordSoundTrackKey final
{
public:
	float                                         TimeVar;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCoordSound                               CoordSoundType;                                    // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketBoneName;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackCoordSoundTrackKey) == 0x000008, "Wrong alignment on FJackCoordSoundTrackKey");
static_assert(sizeof(FJackCoordSoundTrackKey) == 0x000018, "Wrong size on FJackCoordSoundTrackKey");
static_assert(offsetof(FJackCoordSoundTrackKey, TimeVar) == 0x000000, "Member 'FJackCoordSoundTrackKey::TimeVar' has a wrong offset!");
static_assert(offsetof(FJackCoordSoundTrackKey, CoordSoundType) == 0x000004, "Member 'FJackCoordSoundTrackKey::CoordSoundType' has a wrong offset!");
static_assert(offsetof(FJackCoordSoundTrackKey, SocketBoneName) == 0x000008, "Member 'FJackCoordSoundTrackKey::SocketBoneName' has a wrong offset!");
static_assert(offsetof(FJackCoordSoundTrackKey, Volume) == 0x000010, "Member 'FJackCoordSoundTrackKey::Volume' has a wrong offset!");

// ScriptStruct JackGame.JackBattleCharacterRelocationInfo
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x10) FJackBattleCharacterRelocationInfo final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackBattleCharacterRelocationInfo) == 0x000010, "Wrong alignment on FJackBattleCharacterRelocationInfo");
static_assert(sizeof(FJackBattleCharacterRelocationInfo) == 0x000040, "Wrong size on FJackBattleCharacterRelocationInfo");

// ScriptStruct JackGame.JackMonsterBattleAI_ActionSlot
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FJackMonsterBattleAI_ActionSlot final
{
public:
	int32                                         SlotID;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionID;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Motion_Cast;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Motion_Shot;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionTargetType                   Target_Type;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionSelectType                   Select_Type;                                       // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Groupe_Check;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Invoke_Rate;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SecondCheckID;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMonsterBattleAI_ActionSlot) == 0x000008, "Wrong alignment on FJackMonsterBattleAI_ActionSlot");
static_assert(sizeof(FJackMonsterBattleAI_ActionSlot) == 0x000038, "Wrong size on FJackMonsterBattleAI_ActionSlot");
static_assert(offsetof(FJackMonsterBattleAI_ActionSlot, SlotID) == 0x000000, "Member 'FJackMonsterBattleAI_ActionSlot::SlotID' has a wrong offset!");
static_assert(offsetof(FJackMonsterBattleAI_ActionSlot, ActionID) == 0x000008, "Member 'FJackMonsterBattleAI_ActionSlot::ActionID' has a wrong offset!");
static_assert(offsetof(FJackMonsterBattleAI_ActionSlot, Motion_Cast) == 0x000010, "Member 'FJackMonsterBattleAI_ActionSlot::Motion_Cast' has a wrong offset!");
static_assert(offsetof(FJackMonsterBattleAI_ActionSlot, Motion_Shot) == 0x000018, "Member 'FJackMonsterBattleAI_ActionSlot::Motion_Shot' has a wrong offset!");
static_assert(offsetof(FJackMonsterBattleAI_ActionSlot, Target_Type) == 0x000020, "Member 'FJackMonsterBattleAI_ActionSlot::Target_Type' has a wrong offset!");
static_assert(offsetof(FJackMonsterBattleAI_ActionSlot, Select_Type) == 0x000021, "Member 'FJackMonsterBattleAI_ActionSlot::Select_Type' has a wrong offset!");
static_assert(offsetof(FJackMonsterBattleAI_ActionSlot, Groupe_Check) == 0x000024, "Member 'FJackMonsterBattleAI_ActionSlot::Groupe_Check' has a wrong offset!");
static_assert(offsetof(FJackMonsterBattleAI_ActionSlot, Invoke_Rate) == 0x000028, "Member 'FJackMonsterBattleAI_ActionSlot::Invoke_Rate' has a wrong offset!");
static_assert(offsetof(FJackMonsterBattleAI_ActionSlot, SecondCheckID) == 0x000030, "Member 'FJackMonsterBattleAI_ActionSlot::SecondCheckID' has a wrong offset!");

// ScriptStruct JackGame.JackActionSlot
// 0x0040 (0x0040 - 0x0000)
struct FJackActionSlot final
{
public:
	class FName                                   ActionID;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJackMonsterBattleAI_ActionSlot        MonsterBattleAIActionSlot;                         // 0x0008(0x0038)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackActionSlot) == 0x000008, "Wrong alignment on FJackActionSlot");
static_assert(sizeof(FJackActionSlot) == 0x000040, "Wrong size on FJackActionSlot");
static_assert(offsetof(FJackActionSlot, ActionID) == 0x000000, "Member 'FJackActionSlot::ActionID' has a wrong offset!");
static_assert(offsetof(FJackActionSlot, MonsterBattleAIActionSlot) == 0x000008, "Member 'FJackActionSlot::MonsterBattleAIActionSlot' has a wrong offset!");

// ScriptStruct JackGame.JackBattlePrgCameraInfo
// 0x00B8 (0x00B8 - 0x0000)
struct FJackBattlePrgCameraInfo final
{
public:
	uint8                                         Pad_0[0x6C];                                       // 0x0000(0x006C)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AJackCharacter>          CharaA;                                            // 0x006C(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AJackCharacter>          CharaB;                                            // 0x0074(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class AJackCharacter>>  ViewCharas;                                        // 0x0080(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AJackCharacter>          Attacker;                                          // 0x0090(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AJackCharacter>          TrackingCharacter;                                 // 0x0098(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x18];                                      // 0x00A0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackBattlePrgCameraInfo) == 0x000008, "Wrong alignment on FJackBattlePrgCameraInfo");
static_assert(sizeof(FJackBattlePrgCameraInfo) == 0x0000B8, "Wrong size on FJackBattlePrgCameraInfo");
static_assert(offsetof(FJackBattlePrgCameraInfo, CharaA) == 0x00006C, "Member 'FJackBattlePrgCameraInfo::CharaA' has a wrong offset!");
static_assert(offsetof(FJackBattlePrgCameraInfo, CharaB) == 0x000074, "Member 'FJackBattlePrgCameraInfo::CharaB' has a wrong offset!");
static_assert(offsetof(FJackBattlePrgCameraInfo, ViewCharas) == 0x000080, "Member 'FJackBattlePrgCameraInfo::ViewCharas' has a wrong offset!");
static_assert(offsetof(FJackBattlePrgCameraInfo, Attacker) == 0x000090, "Member 'FJackBattlePrgCameraInfo::Attacker' has a wrong offset!");
static_assert(offsetof(FJackBattlePrgCameraInfo, TrackingCharacter) == 0x000098, "Member 'FJackBattlePrgCameraInfo::TrackingCharacter' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_TextSerifuIE
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextSerifuIE final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextSerifuIE) == 0x000008, "Wrong alignment on FJackLDT_TextSerifuIE");
static_assert(sizeof(FJackLDT_TextSerifuIE) == 0x000010, "Wrong size on FJackLDT_TextSerifuIE");

// ScriptStruct JackGame.JackUmaRaceHealParam
// 0x0008 (0x0008 - 0x0000)
struct FJackUmaRaceHealParam final
{
public:
	bool                                          bIsUse;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Heal;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUmaRaceHealParam) == 0x000004, "Wrong alignment on FJackUmaRaceHealParam");
static_assert(sizeof(FJackUmaRaceHealParam) == 0x000008, "Wrong size on FJackUmaRaceHealParam");
static_assert(offsetof(FJackUmaRaceHealParam, bIsUse) == 0x000000, "Member 'FJackUmaRaceHealParam::bIsUse' has a wrong offset!");
static_assert(offsetof(FJackUmaRaceHealParam, Heal) == 0x000004, "Member 'FJackUmaRaceHealParam::Heal' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotItemList
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMeosiSlotItemList final : public FTableRowBase
{
public:
	class FName                                   Key;                                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotItemList) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotItemList");
static_assert(sizeof(FJackDataTableMeosiSlotItemList) == 0x000010, "Wrong size on FJackDataTableMeosiSlotItemList");
static_assert(offsetof(FJackDataTableMeosiSlotItemList, Key) == 0x000008, "Member 'FJackDataTableMeosiSlotItemList::Key' has a wrong offset!");

// ScriptStruct JackGame.JackMaterialCoordinate
// 0x0020 (0x0020 - 0x0000)
struct FJackMaterialCoordinate final
{
public:
	class FName                                   TypeName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      OverrideMaterial;                                  // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMaterialCoordinate) == 0x000008, "Wrong alignment on FJackMaterialCoordinate");
static_assert(sizeof(FJackMaterialCoordinate) == 0x000020, "Wrong size on FJackMaterialCoordinate");
static_assert(offsetof(FJackMaterialCoordinate, TypeName) == 0x000000, "Member 'FJackMaterialCoordinate::TypeName' has a wrong offset!");
static_assert(offsetof(FJackMaterialCoordinate, OverrideMaterial) == 0x000008, "Member 'FJackMaterialCoordinate::OverrideMaterial' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMaterialCoordinate
// 0x0028 (0x0030 - 0x0008)
struct FJackDataTableMaterialCoordinate final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UMaterialInterface>      TargetMaterial;                                    // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJackMaterialCoordinate>        MaterialCoordinates;                               // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMaterialCoordinate) == 0x000008, "Wrong alignment on FJackDataTableMaterialCoordinate");
static_assert(sizeof(FJackDataTableMaterialCoordinate) == 0x000030, "Wrong size on FJackDataTableMaterialCoordinate");
static_assert(offsetof(FJackDataTableMaterialCoordinate, TargetMaterial) == 0x000008, "Member 'FJackDataTableMaterialCoordinate::TargetMaterial' has a wrong offset!");
static_assert(offsetof(FJackDataTableMaterialCoordinate, MaterialCoordinates) == 0x000020, "Member 'FJackDataTableMaterialCoordinate::MaterialCoordinates' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_UICurrentPlaceInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UICurrentPlaceInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UICurrentPlaceInfo) == 0x000008, "Wrong alignment on FJackLDT_UICurrentPlaceInfo");
static_assert(sizeof(FJackLDT_UICurrentPlaceInfo) == 0x000010, "Wrong size on FJackLDT_UICurrentPlaceInfo");

// ScriptStruct JackGame.JackBattlePrgCameraScore
// 0x0024 (0x0024 - 0x0000)
struct alignas(0x04) FJackBattlePrgCameraScore final
{
public:
	uint8                                         Pad_0[0x24];                                       // 0x0000(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackBattlePrgCameraScore) == 0x000004, "Wrong alignment on FJackBattlePrgCameraScore");
static_assert(sizeof(FJackBattlePrgCameraScore) == 0x000024, "Wrong size on FJackBattlePrgCameraScore");

// ScriptStruct JackGame.JackLDT_Sim_MantleC_P004_up_Cs1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_MantleC_P004_up_Cs1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_MantleC_P004_up_Cs1) == 0x000008, "Wrong alignment on FJackLDT_Sim_MantleC_P004_up_Cs1");
static_assert(sizeof(FJackLDT_Sim_MantleC_P004_up_Cs1) == 0x000010, "Wrong size on FJackLDT_Sim_MantleC_P004_up_Cs1");

// ScriptStruct JackGame.JackZonePointInvokeInfo
// 0x0008 (0x0008 - 0x0000)
struct FJackZonePointInvokeInfo final
{
public:
	float                                         ZonePointPer;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoneInvokePer;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackZonePointInvokeInfo) == 0x000004, "Wrong alignment on FJackZonePointInvokeInfo");
static_assert(sizeof(FJackZonePointInvokeInfo) == 0x000008, "Wrong size on FJackZonePointInvokeInfo");
static_assert(offsetof(FJackZonePointInvokeInfo, ZonePointPer) == 0x000000, "Member 'FJackZonePointInvokeInfo::ZonePointPer' has a wrong offset!");
static_assert(offsetof(FJackZonePointInvokeInfo, ZoneInvokePer) == 0x000004, "Member 'FJackZonePointInvokeInfo::ZoneInvokePer' has a wrong offset!");

// ScriptStruct JackGame.JackDamageZonePointInfo
// 0x0008 (0x0008 - 0x0000)
struct FJackDamageZonePointInfo final
{
public:
	float                                         DamagePer;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZonePoint;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDamageZonePointInfo) == 0x000004, "Wrong alignment on FJackDamageZonePointInfo");
static_assert(sizeof(FJackDamageZonePointInfo) == 0x000008, "Wrong size on FJackDamageZonePointInfo");
static_assert(offsetof(FJackDamageZonePointInfo, DamagePer) == 0x000000, "Member 'FJackDamageZonePointInfo::DamagePer' has a wrong offset!");
static_assert(offsetof(FJackDamageZonePointInfo, ZonePoint) == 0x000004, "Member 'FJackDamageZonePointInfo::ZonePoint' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableRestart
// 0x0048 (0x0050 - 0x0008)
struct FJackDataTableRestart final : public FTableRowBase
{
public:
	class FName                                   MapId;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayLocationName;                               // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NPCTag;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MessageID;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MessageIDFromLoad;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LostGoldRate;                                      // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetRestartChurch;                               // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetRestartTown;                                 // 0x004D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetRestartEvent;                                // 0x004E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackRestartProcessType                       RestartProcessType;                                // 0x004F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableRestart) == 0x000008, "Wrong alignment on FJackDataTableRestart");
static_assert(sizeof(FJackDataTableRestart) == 0x000050, "Wrong size on FJackDataTableRestart");
static_assert(offsetof(FJackDataTableRestart, MapId) == 0x000008, "Member 'FJackDataTableRestart::MapId' has a wrong offset!");
static_assert(offsetof(FJackDataTableRestart, MapName) == 0x000010, "Member 'FJackDataTableRestart::MapName' has a wrong offset!");
static_assert(offsetof(FJackDataTableRestart, DisplayLocationName) == 0x000020, "Member 'FJackDataTableRestart::DisplayLocationName' has a wrong offset!");
static_assert(offsetof(FJackDataTableRestart, NPCTag) == 0x000030, "Member 'FJackDataTableRestart::NPCTag' has a wrong offset!");
static_assert(offsetof(FJackDataTableRestart, MessageID) == 0x000038, "Member 'FJackDataTableRestart::MessageID' has a wrong offset!");
static_assert(offsetof(FJackDataTableRestart, MessageIDFromLoad) == 0x000040, "Member 'FJackDataTableRestart::MessageIDFromLoad' has a wrong offset!");
static_assert(offsetof(FJackDataTableRestart, LostGoldRate) == 0x000048, "Member 'FJackDataTableRestart::LostGoldRate' has a wrong offset!");
static_assert(offsetof(FJackDataTableRestart, bResetRestartChurch) == 0x00004C, "Member 'FJackDataTableRestart::bResetRestartChurch' has a wrong offset!");
static_assert(offsetof(FJackDataTableRestart, bResetRestartTown) == 0x00004D, "Member 'FJackDataTableRestart::bResetRestartTown' has a wrong offset!");
static_assert(offsetof(FJackDataTableRestart, bResetRestartEvent) == 0x00004E, "Member 'FJackDataTableRestart::bResetRestartEvent' has a wrong offset!");
static_assert(offsetof(FJackDataTableRestart, RestartProcessType) == 0x00004F, "Member 'FJackDataTableRestart::RestartProcessType' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableUmaRaceMapData
// 0x0048 (0x0050 - 0x0008)
struct FJackDataTableUmaRaceMapData final : public FTableRowBase
{
public:
	int32                                         Number;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold_H;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LapNum;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_N_01;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_N_02;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_H_01;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_H_02;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_N_Rank02;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID_H_Rank02;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsualRoute;                                       // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInnerCourse;                                      // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNightRace;                                        // 0x004A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableUmaRaceMapData) == 0x000008, "Wrong alignment on FJackDataTableUmaRaceMapData");
static_assert(sizeof(FJackDataTableUmaRaceMapData) == 0x000050, "Wrong size on FJackDataTableUmaRaceMapData");
static_assert(offsetof(FJackDataTableUmaRaceMapData, Number) == 0x000008, "Member 'FJackDataTableUmaRaceMapData::Number' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceMapData, Gold) == 0x00000C, "Member 'FJackDataTableUmaRaceMapData::Gold' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceMapData, Gold_H) == 0x000010, "Member 'FJackDataTableUmaRaceMapData::Gold_H' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceMapData, LapNum) == 0x000014, "Member 'FJackDataTableUmaRaceMapData::LapNum' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceMapData, ItemID_N_01) == 0x000018, "Member 'FJackDataTableUmaRaceMapData::ItemID_N_01' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceMapData, ItemID_N_02) == 0x000020, "Member 'FJackDataTableUmaRaceMapData::ItemID_N_02' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceMapData, ItemID_H_01) == 0x000028, "Member 'FJackDataTableUmaRaceMapData::ItemID_H_01' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceMapData, ItemID_H_02) == 0x000030, "Member 'FJackDataTableUmaRaceMapData::ItemID_H_02' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceMapData, ItemID_N_Rank02) == 0x000038, "Member 'FJackDataTableUmaRaceMapData::ItemID_N_Rank02' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceMapData, ItemID_H_Rank02) == 0x000040, "Member 'FJackDataTableUmaRaceMapData::ItemID_H_Rank02' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceMapData, bUsualRoute) == 0x000048, "Member 'FJackDataTableUmaRaceMapData::bUsualRoute' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceMapData, bInnerCourse) == 0x000049, "Member 'FJackDataTableUmaRaceMapData::bInnerCourse' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceMapData, bNightRace) == 0x00004A, "Member 'FJackDataTableUmaRaceMapData::bNightRace' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Pose_P004Hair_Cs1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_P004Hair_Cs1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_P004Hair_Cs1) == 0x000008, "Wrong alignment on FJackLDT_Pose_P004Hair_Cs1");
static_assert(sizeof(FJackLDT_Pose_P004Hair_Cs1) == 0x000010, "Wrong size on FJackLDT_Pose_P004Hair_Cs1");

// ScriptStruct JackGame.JackDataTableKaziAction
// 0x0058 (0x0060 - 0x0008)
struct FJackDataTableKaziAction final : public FTableRowBase
{
public:
	class FName                                   ActionName;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionComment;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionComment1;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetLV;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Kaisin_Percentage;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortIndex;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionType;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCP;                                            // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumData_01;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumData_02;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumData_03;                                        // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                IconTexture;                                       // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableKaziAction) == 0x000008, "Wrong alignment on FJackDataTableKaziAction");
static_assert(sizeof(FJackDataTableKaziAction) == 0x000060, "Wrong size on FJackDataTableKaziAction");
static_assert(offsetof(FJackDataTableKaziAction, ActionName) == 0x000008, "Member 'FJackDataTableKaziAction::ActionName' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziAction, ActionComment) == 0x000010, "Member 'FJackDataTableKaziAction::ActionComment' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziAction, ActionComment1) == 0x000018, "Member 'FJackDataTableKaziAction::ActionComment1' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziAction, GetLV) == 0x000020, "Member 'FJackDataTableKaziAction::GetLV' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziAction, Kaisin_Percentage) == 0x000024, "Member 'FJackDataTableKaziAction::Kaisin_Percentage' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziAction, SortIndex) == 0x000028, "Member 'FJackDataTableKaziAction::SortIndex' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziAction, ActionType) == 0x000030, "Member 'FJackDataTableKaziAction::ActionType' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziAction, NeedCP) == 0x000038, "Member 'FJackDataTableKaziAction::NeedCP' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziAction, NumData_01) == 0x00003C, "Member 'FJackDataTableKaziAction::NumData_01' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziAction, NumData_02) == 0x000040, "Member 'FJackDataTableKaziAction::NumData_02' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziAction, NumData_03) == 0x000044, "Member 'FJackDataTableKaziAction::NumData_03' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziAction, IconTexture) == 0x000048, "Member 'FJackDataTableKaziAction::IconTexture' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_CoinShopTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_CoinShopTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_CoinShopTable) == 0x000008, "Wrong alignment on FJackLDT_CoinShopTable");
static_assert(sizeof(FJackLDT_CoinShopTable) == 0x000010, "Wrong size on FJackLDT_CoinShopTable");

// ScriptStruct JackGame.JackGameFlagDefGameProgress
// 0x0001 (0x0001 - 0x0000)
struct FJackGameFlagDefGameProgress final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackGameFlagDefGameProgress) == 0x000001, "Wrong alignment on FJackGameFlagDefGameProgress");
static_assert(sizeof(FJackGameFlagDefGameProgress) == 0x000001, "Wrong size on FJackGameFlagDefGameProgress");

// ScriptStruct JackGame.JackPhotoModeCharaSettingCommon
// 0x0010 (0x0010 - 0x0000)
struct FJackPhotoModeCharaSettingCommon
{
public:
	TArray<EJackPhotoModeEmoteAnim>               LookAtDisableEmote;                                // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackPhotoModeCharaSettingCommon) == 0x000008, "Wrong alignment on FJackPhotoModeCharaSettingCommon");
static_assert(sizeof(FJackPhotoModeCharaSettingCommon) == 0x000010, "Wrong size on FJackPhotoModeCharaSettingCommon");
static_assert(offsetof(FJackPhotoModeCharaSettingCommon, LookAtDisableEmote) == 0x000000, "Member 'FJackPhotoModeCharaSettingCommon::LookAtDisableEmote' has a wrong offset!");

// ScriptStruct JackGame.JackPhotoModeCharaSetting
// 0x0008 (0x0018 - 0x0010)
struct FJackPhotoModeCharaSetting final : public FJackPhotoModeCharaSettingCommon
{
public:
	EJackCharacter                                Character;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackPhotoModeCharaSetting) == 0x000008, "Wrong alignment on FJackPhotoModeCharaSetting");
static_assert(sizeof(FJackPhotoModeCharaSetting) == 0x000018, "Wrong size on FJackPhotoModeCharaSetting");
static_assert(offsetof(FJackPhotoModeCharaSetting, Character) == 0x000010, "Member 'FJackPhotoModeCharaSetting::Character' has a wrong offset!");

// ScriptStruct JackGame.JackCharacterZonePointInfo
// 0x0008 (0x0008 - 0x0000)
struct FJackCharacterZonePointInfo final
{
public:
	EJackCharacter                                CharacterType;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ZonePoint;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackCharacterZonePointInfo) == 0x000004, "Wrong alignment on FJackCharacterZonePointInfo");
static_assert(sizeof(FJackCharacterZonePointInfo) == 0x000008, "Wrong size on FJackCharacterZonePointInfo");
static_assert(offsetof(FJackCharacterZonePointInfo, CharacterType) == 0x000000, "Member 'FJackCharacterZonePointInfo::CharacterType' has a wrong offset!");
static_assert(offsetof(FJackCharacterZonePointInfo, ZonePoint) == 0x000004, "Member 'FJackCharacterZonePointInfo::ZonePoint' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableCutSceneCoordinateAliasInfo
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableCutSceneCoordinateAliasInfo final : public FTableRowBase
{
public:
	class FName                                   AliasCoordinateID;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableCutSceneCoordinateAliasInfo) == 0x000008, "Wrong alignment on FJackDataTableCutSceneCoordinateAliasInfo");
static_assert(sizeof(FJackDataTableCutSceneCoordinateAliasInfo) == 0x000010, "Wrong size on FJackDataTableCutSceneCoordinateAliasInfo");
static_assert(offsetof(FJackDataTableCutSceneCoordinateAliasInfo, AliasCoordinateID) == 0x000008, "Member 'FJackDataTableCutSceneCoordinateAliasInfo::AliasCoordinateID' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_ItemGettable_GmmickDrop
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ItemGettable_GmmickDrop final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ItemGettable_GmmickDrop) == 0x000008, "Wrong alignment on FJackLDT_ItemGettable_GmmickDrop");
static_assert(sizeof(FJackLDT_ItemGettable_GmmickDrop) == 0x000010, "Wrong size on FJackLDT_ItemGettable_GmmickDrop");

// ScriptStruct JackGame.JackZoneStartParameter
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FJackZoneStartParameter final
{
public:
	class FName                                   ActionCameraID;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnimMontage;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalSequenceTime;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Notify_ZoneSet;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Notify_Message;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackZoneStartParameter) == 0x000008, "Wrong alignment on FJackZoneStartParameter");
static_assert(sizeof(FJackZoneStartParameter) == 0x000020, "Wrong size on FJackZoneStartParameter");
static_assert(offsetof(FJackZoneStartParameter, ActionCameraID) == 0x000000, "Member 'FJackZoneStartParameter::ActionCameraID' has a wrong offset!");
static_assert(offsetof(FJackZoneStartParameter, AnimMontage) == 0x000008, "Member 'FJackZoneStartParameter::AnimMontage' has a wrong offset!");
static_assert(offsetof(FJackZoneStartParameter, TotalSequenceTime) == 0x000010, "Member 'FJackZoneStartParameter::TotalSequenceTime' has a wrong offset!");
static_assert(offsetof(FJackZoneStartParameter, Notify_ZoneSet) == 0x000014, "Member 'FJackZoneStartParameter::Notify_ZoneSet' has a wrong offset!");
static_assert(offsetof(FJackZoneStartParameter, Notify_Message) == 0x000018, "Member 'FJackZoneStartParameter::Notify_Message' has a wrong offset!");

// ScriptStruct JackGame.JackForcedLODTrackInstRestoreInfo
// 0x0010 (0x0010 - 0x0000)
struct FJackForcedLODTrackInstRestoreInfo final
{
public:
	class USkeletalMeshComponent*                 SKComponent;                                       // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultLODLevel;                                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackForcedLODTrackInstRestoreInfo) == 0x000008, "Wrong alignment on FJackForcedLODTrackInstRestoreInfo");
static_assert(sizeof(FJackForcedLODTrackInstRestoreInfo) == 0x000010, "Wrong size on FJackForcedLODTrackInstRestoreInfo");
static_assert(offsetof(FJackForcedLODTrackInstRestoreInfo, SKComponent) == 0x000000, "Member 'FJackForcedLODTrackInstRestoreInfo::SKComponent' has a wrong offset!");
static_assert(offsetof(FJackForcedLODTrackInstRestoreInfo, DefaultLODLevel) == 0x000008, "Member 'FJackForcedLODTrackInstRestoreInfo::DefaultLODLevel' has a wrong offset!");

// ScriptStruct JackGame.JackBGMControlTrackKey
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackBGMControlTrackKey final
{
public:
	float                                         TimeVar;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BGMID;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsStackCall;                                      // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrevMusicFOTime;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackBGMControlTrackKey) == 0x000008, "Wrong alignment on FJackBGMControlTrackKey");
static_assert(sizeof(FJackBGMControlTrackKey) == 0x000018, "Wrong size on FJackBGMControlTrackKey");
static_assert(offsetof(FJackBGMControlTrackKey, TimeVar) == 0x000000, "Member 'FJackBGMControlTrackKey::TimeVar' has a wrong offset!");
static_assert(offsetof(FJackBGMControlTrackKey, BGMID) == 0x000008, "Member 'FJackBGMControlTrackKey::BGMID' has a wrong offset!");
static_assert(offsetof(FJackBGMControlTrackKey, bIsStackCall) == 0x000010, "Member 'FJackBGMControlTrackKey::bIsStackCall' has a wrong offset!");
static_assert(offsetof(FJackBGMControlTrackKey, PrevMusicFOTime) == 0x000014, "Member 'FJackBGMControlTrackKey::PrevMusicFOTime' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_EnvSoundTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_EnvSoundTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_EnvSoundTable) == 0x000008, "Wrong alignment on FJackLDT_EnvSoundTable");
static_assert(sizeof(FJackLDT_EnvSoundTable) == 0x000010, "Wrong size on FJackLDT_EnvSoundTable");

// ScriptStruct JackGame.JackLDT_PartyTalkData_A030
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_A030 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_A030) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_A030");
static_assert(sizeof(FJackLDT_PartyTalkData_A030) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_A030");

// ScriptStruct JackGame.JackDataTableMeosiSlotExtraEffect
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableMeosiSlotExtraEffect final : public FTableRowBase
{
public:
	int32                                         ReelLightOff;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChanceCutin_Default;                               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Door;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChanceCutin_StepUp;                                // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireLamp;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotExtraEffect) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotExtraEffect");
static_assert(sizeof(FJackDataTableMeosiSlotExtraEffect) == 0x000020, "Wrong size on FJackDataTableMeosiSlotExtraEffect");
static_assert(offsetof(FJackDataTableMeosiSlotExtraEffect, ReelLightOff) == 0x000008, "Member 'FJackDataTableMeosiSlotExtraEffect::ReelLightOff' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotExtraEffect, ChanceCutin_Default) == 0x00000C, "Member 'FJackDataTableMeosiSlotExtraEffect::ChanceCutin_Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotExtraEffect, Door) == 0x000010, "Member 'FJackDataTableMeosiSlotExtraEffect::Door' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotExtraEffect, ChanceCutin_StepUp) == 0x000014, "Member 'FJackDataTableMeosiSlotExtraEffect::ChanceCutin_StepUp' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotExtraEffect, FireLamp) == 0x000018, "Member 'FJackDataTableMeosiSlotExtraEffect::FireLamp' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Sim_PlayerHair
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_PlayerHair final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_PlayerHair) == 0x000008, "Wrong alignment on FJackLDT_Sim_PlayerHair");
static_assert(sizeof(FJackLDT_Sim_PlayerHair) == 0x000010, "Wrong size on FJackLDT_Sim_PlayerHair");

// ScriptStruct JackGame.JackBlendAnimPlayTrackKey
// 0x0004 (0x0004 - 0x0000)
struct FJackBlendAnimPlayTrackKey final
{
public:
	float                                         AnimInterpSec;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackBlendAnimPlayTrackKey) == 0x000004, "Wrong alignment on FJackBlendAnimPlayTrackKey");
static_assert(sizeof(FJackBlendAnimPlayTrackKey) == 0x000004, "Wrong size on FJackBlendAnimPlayTrackKey");
static_assert(offsetof(FJackBlendAnimPlayTrackKey, AnimInterpSec) == 0x000000, "Member 'FJackBlendAnimPlayTrackKey::AnimInterpSec' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_BattleResultMotion
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_BattleResultMotion final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_BattleResultMotion) == 0x000008, "Wrong alignment on FJackLDT_BattleResultMotion");
static_assert(sizeof(FJackLDT_BattleResultMotion) == 0x000010, "Wrong size on FJackLDT_BattleResultMotion");

// ScriptStruct JackGame.JackCaptionTrackKey
// 0x0088 (0x0088 - 0x0000)
struct FJackCaptionTrackKey final
{
public:
	float                                         TimeVar;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TextID;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloseFlag;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CaptionCloseSec;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoLipSyncEnable;                                // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoLipSyncSec;                                    // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoLipSyncStartOffset;                            // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LipChangeSec;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseVowelLip;                                      // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackVowel                                    StartVowelType;                                    // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartVowelSec;                                     // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackVowel                                    EndVowelType;                                      // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EndVowelSec;                                       // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LipSyncApplyRate;                                  // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPipipiType                               PipipiOverride;                                    // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          NodReaction;                                       // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNodReactionLoop;                                  // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          ManuralLipNodReaction;                             // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bManuralLipNodReactionLoop;                        // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseManuralLipNodReactionApplyRate;                // 0x0059(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NodReactionApplyRate;                              // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NodReactionFOTime;                                 // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TalkerID;                                          // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDynamicTextID;                                    // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DynamicTextLabel;                                  // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpWaitSec;                                       // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackCaptionTrackKey) == 0x000008, "Wrong alignment on FJackCaptionTrackKey");
static_assert(sizeof(FJackCaptionTrackKey) == 0x000088, "Wrong size on FJackCaptionTrackKey");
static_assert(offsetof(FJackCaptionTrackKey, TimeVar) == 0x000000, "Member 'FJackCaptionTrackKey::TimeVar' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, TextID) == 0x000008, "Member 'FJackCaptionTrackKey::TextID' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, bCloseFlag) == 0x000010, "Member 'FJackCaptionTrackKey::bCloseFlag' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, CaptionCloseSec) == 0x000014, "Member 'FJackCaptionTrackKey::CaptionCloseSec' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, bAutoLipSyncEnable) == 0x000018, "Member 'FJackCaptionTrackKey::bAutoLipSyncEnable' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, AutoLipSyncSec) == 0x00001C, "Member 'FJackCaptionTrackKey::AutoLipSyncSec' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, AutoLipSyncStartOffset) == 0x000020, "Member 'FJackCaptionTrackKey::AutoLipSyncStartOffset' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, LipChangeSec) == 0x000024, "Member 'FJackCaptionTrackKey::LipChangeSec' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, bUseVowelLip) == 0x000028, "Member 'FJackCaptionTrackKey::bUseVowelLip' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, StartVowelType) == 0x000029, "Member 'FJackCaptionTrackKey::StartVowelType' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, StartVowelSec) == 0x00002C, "Member 'FJackCaptionTrackKey::StartVowelSec' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, EndVowelType) == 0x000030, "Member 'FJackCaptionTrackKey::EndVowelType' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, EndVowelSec) == 0x000034, "Member 'FJackCaptionTrackKey::EndVowelSec' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, LipSyncApplyRate) == 0x000038, "Member 'FJackCaptionTrackKey::LipSyncApplyRate' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, PipipiOverride) == 0x00003C, "Member 'FJackCaptionTrackKey::PipipiOverride' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, NodReaction) == 0x000040, "Member 'FJackCaptionTrackKey::NodReaction' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, bNodReactionLoop) == 0x000048, "Member 'FJackCaptionTrackKey::bNodReactionLoop' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, ManuralLipNodReaction) == 0x000050, "Member 'FJackCaptionTrackKey::ManuralLipNodReaction' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, bManuralLipNodReactionLoop) == 0x000058, "Member 'FJackCaptionTrackKey::bManuralLipNodReactionLoop' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, bUseManuralLipNodReactionApplyRate) == 0x000059, "Member 'FJackCaptionTrackKey::bUseManuralLipNodReactionApplyRate' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, NodReactionApplyRate) == 0x00005C, "Member 'FJackCaptionTrackKey::NodReactionApplyRate' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, NodReactionFOTime) == 0x000060, "Member 'FJackCaptionTrackKey::NodReactionFOTime' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, TalkerID) == 0x000068, "Member 'FJackCaptionTrackKey::TalkerID' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, bDynamicTextID) == 0x000070, "Member 'FJackCaptionTrackKey::bDynamicTextID' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, DynamicTextLabel) == 0x000078, "Member 'FJackCaptionTrackKey::DynamicTextLabel' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackKey, JumpWaitSec) == 0x000080, "Member 'FJackCaptionTrackKey::JumpWaitSec' has a wrong offset!");

// ScriptStruct JackGame.JackLipSyncController
// 0x0190 (0x0190 - 0x0000)
struct FJackLipSyncController final
{
public:
	uint8                                         Pad_0[0x68];                                       // 0x0000(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USoundBase*>                     VoiceAssets;                                       // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UAudioComponent*                        AudioComponent;                                    // 0x0078(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                             LipPoseDataTable;                                  // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_88[0xD8];                                      // 0x0088(0x00D8)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackVoiceTimelineExecutor             VoiceTimelineExecutor;                             // 0x0160(0x0028)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_188[0x8];                                      // 0x0188(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackLipSyncController) == 0x000008, "Wrong alignment on FJackLipSyncController");
static_assert(sizeof(FJackLipSyncController) == 0x000190, "Wrong size on FJackLipSyncController");
static_assert(offsetof(FJackLipSyncController, VoiceAssets) == 0x000068, "Member 'FJackLipSyncController::VoiceAssets' has a wrong offset!");
static_assert(offsetof(FJackLipSyncController, AudioComponent) == 0x000078, "Member 'FJackLipSyncController::AudioComponent' has a wrong offset!");
static_assert(offsetof(FJackLipSyncController, LipPoseDataTable) == 0x000080, "Member 'FJackLipSyncController::LipPoseDataTable' has a wrong offset!");
static_assert(offsetof(FJackLipSyncController, VoiceTimelineExecutor) == 0x000160, "Member 'FJackLipSyncController::VoiceTimelineExecutor' has a wrong offset!");

// ScriptStruct JackGame.JackBulletWeaponConfig
// 0x0028 (0x0028 - 0x0000)
struct FJackBulletWeaponConfig final
{
public:
	float                                         WeaponSpread;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetingSpreadMod;                                // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FiringSpreadIncrement;                             // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FiringSpreadMax;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponRange;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitDamage;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClientSideHitLeeway;                               // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AllowedViewDotHitDir;                              // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackBulletWeaponConfig) == 0x000008, "Wrong alignment on FJackBulletWeaponConfig");
static_assert(sizeof(FJackBulletWeaponConfig) == 0x000028, "Wrong size on FJackBulletWeaponConfig");
static_assert(offsetof(FJackBulletWeaponConfig, WeaponSpread) == 0x000000, "Member 'FJackBulletWeaponConfig::WeaponSpread' has a wrong offset!");
static_assert(offsetof(FJackBulletWeaponConfig, TargetingSpreadMod) == 0x000004, "Member 'FJackBulletWeaponConfig::TargetingSpreadMod' has a wrong offset!");
static_assert(offsetof(FJackBulletWeaponConfig, FiringSpreadIncrement) == 0x000008, "Member 'FJackBulletWeaponConfig::FiringSpreadIncrement' has a wrong offset!");
static_assert(offsetof(FJackBulletWeaponConfig, FiringSpreadMax) == 0x00000C, "Member 'FJackBulletWeaponConfig::FiringSpreadMax' has a wrong offset!");
static_assert(offsetof(FJackBulletWeaponConfig, WeaponRange) == 0x000010, "Member 'FJackBulletWeaponConfig::WeaponRange' has a wrong offset!");
static_assert(offsetof(FJackBulletWeaponConfig, HitDamage) == 0x000014, "Member 'FJackBulletWeaponConfig::HitDamage' has a wrong offset!");
static_assert(offsetof(FJackBulletWeaponConfig, DamageType) == 0x000018, "Member 'FJackBulletWeaponConfig::DamageType' has a wrong offset!");
static_assert(offsetof(FJackBulletWeaponConfig, ClientSideHitLeeway) == 0x000020, "Member 'FJackBulletWeaponConfig::ClientSideHitLeeway' has a wrong offset!");
static_assert(offsetof(FJackBulletWeaponConfig, AllowedViewDotHitDir) == 0x000024, "Member 'FJackBulletWeaponConfig::AllowedViewDotHitDir' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_UIFukidasiFaceIcon
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UIFukidasiFaceIcon final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UIFukidasiFaceIcon) == 0x000008, "Wrong alignment on FJackLDT_UIFukidasiFaceIcon");
static_assert(sizeof(FJackLDT_UIFukidasiFaceIcon) == 0x000010, "Wrong size on FJackLDT_UIFukidasiFaceIcon");

// ScriptStruct JackGame.JackNodInfo
// 0x0018 (0x0018 - 0x0000)
struct FJackNodInfo final
{
public:
	class UAnimSequence*                          AnimSequence;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseManualLipApplyRate;                            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ApplyRate;                                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOTime;                                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackNodInfo) == 0x000008, "Wrong alignment on FJackNodInfo");
static_assert(sizeof(FJackNodInfo) == 0x000018, "Wrong size on FJackNodInfo");
static_assert(offsetof(FJackNodInfo, AnimSequence) == 0x000000, "Member 'FJackNodInfo::AnimSequence' has a wrong offset!");
static_assert(offsetof(FJackNodInfo, bLoop) == 0x000008, "Member 'FJackNodInfo::bLoop' has a wrong offset!");
static_assert(offsetof(FJackNodInfo, bUseManualLipApplyRate) == 0x000009, "Member 'FJackNodInfo::bUseManualLipApplyRate' has a wrong offset!");
static_assert(offsetof(FJackNodInfo, ApplyRate) == 0x00000C, "Member 'FJackNodInfo::ApplyRate' has a wrong offset!");
static_assert(offsetof(FJackNodInfo, FOTime) == 0x000010, "Member 'FJackNodInfo::FOTime' has a wrong offset!");

// ScriptStruct JackGame.JackCaptionTrackShowSerifuInfo
// 0x00B8 (0x00B8 - 0x0000)
struct FJackCaptionTrackShowSerifuInfo final
{
public:
	TWeakObjectPtr<class AMatineeActor>           RequestMatinee;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x20];                                       // 0x0008(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackCaptionLipInfo                    LipSyncInfo;                                       // 0x0028(0x0048)(NativeAccessSpecifierPublic)
	struct FJackNodInfo                           NodInfo;                                           // 0x0070(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x30];                                      // 0x0088(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackCaptionTrackShowSerifuInfo) == 0x000008, "Wrong alignment on FJackCaptionTrackShowSerifuInfo");
static_assert(sizeof(FJackCaptionTrackShowSerifuInfo) == 0x0000B8, "Wrong size on FJackCaptionTrackShowSerifuInfo");
static_assert(offsetof(FJackCaptionTrackShowSerifuInfo, RequestMatinee) == 0x000000, "Member 'FJackCaptionTrackShowSerifuInfo::RequestMatinee' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackShowSerifuInfo, LipSyncInfo) == 0x000028, "Member 'FJackCaptionTrackShowSerifuInfo::LipSyncInfo' has a wrong offset!");
static_assert(offsetof(FJackCaptionTrackShowSerifuInfo, NodInfo) == 0x000070, "Member 'FJackCaptionTrackShowSerifuInfo::NodInfo' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Sim_MantleC_N014_up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_MantleC_N014_up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_MantleC_N014_up) == 0x000008, "Wrong alignment on FJackLDT_Sim_MantleC_N014_up");
static_assert(sizeof(FJackLDT_Sim_MantleC_N014_up) == 0x000010, "Wrong size on FJackLDT_Sim_MantleC_N014_up");

// ScriptStruct JackGame.JackDataTableTenseiParams
// 0x0030 (0x0038 - 0x0008)
struct FJackDataTableTenseiParams final : public FTableRowBase
{
public:
	EJackTenseiOperationType                      Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Value;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Arg1;                                              // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Arg2;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Cmds;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableTenseiParams) == 0x000008, "Wrong alignment on FJackDataTableTenseiParams");
static_assert(sizeof(FJackDataTableTenseiParams) == 0x000038, "Wrong size on FJackDataTableTenseiParams");
static_assert(offsetof(FJackDataTableTenseiParams, Type) == 0x000008, "Member 'FJackDataTableTenseiParams::Type' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiParams, Value) == 0x000010, "Member 'FJackDataTableTenseiParams::Value' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiParams, Arg1) == 0x000018, "Member 'FJackDataTableTenseiParams::Arg1' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiParams, Arg2) == 0x000020, "Member 'FJackDataTableTenseiParams::Arg2' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiParams, Cmds) == 0x000028, "Member 'FJackDataTableTenseiParams::Cmds' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotLowestFeedNumberProbability
// 0x0040 (0x0048 - 0x0008)
struct FJackDataTableMeosiSlotLowestFeedNumberProbability final : public FTableRowBase
{
public:
	int32                                         Feed_Stock_0;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Feed_Stock_1;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Feed_Stock_2;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Feed_Stock_3;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Feed_Stock_4;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Feed_Stock_5;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Feed_Stock_6;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Feed_Stock_7;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Feed_NoStock_0;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Feed_NoStock_1;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Feed_NoStock_2;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Feed_NoStock_3;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Feed_NoStock_4;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Feed_NoStock_5;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Feed_NoStock_6;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Feed_NoStock_7;                                    // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotLowestFeedNumberProbability) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotLowestFeedNumberProbability");
static_assert(sizeof(FJackDataTableMeosiSlotLowestFeedNumberProbability) == 0x000048, "Wrong size on FJackDataTableMeosiSlotLowestFeedNumberProbability");
static_assert(offsetof(FJackDataTableMeosiSlotLowestFeedNumberProbability, Feed_Stock_0) == 0x000008, "Member 'FJackDataTableMeosiSlotLowestFeedNumberProbability::Feed_Stock_0' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotLowestFeedNumberProbability, Feed_Stock_1) == 0x00000C, "Member 'FJackDataTableMeosiSlotLowestFeedNumberProbability::Feed_Stock_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotLowestFeedNumberProbability, Feed_Stock_2) == 0x000010, "Member 'FJackDataTableMeosiSlotLowestFeedNumberProbability::Feed_Stock_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotLowestFeedNumberProbability, Feed_Stock_3) == 0x000014, "Member 'FJackDataTableMeosiSlotLowestFeedNumberProbability::Feed_Stock_3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotLowestFeedNumberProbability, Feed_Stock_4) == 0x000018, "Member 'FJackDataTableMeosiSlotLowestFeedNumberProbability::Feed_Stock_4' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotLowestFeedNumberProbability, Feed_Stock_5) == 0x00001C, "Member 'FJackDataTableMeosiSlotLowestFeedNumberProbability::Feed_Stock_5' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotLowestFeedNumberProbability, Feed_Stock_6) == 0x000020, "Member 'FJackDataTableMeosiSlotLowestFeedNumberProbability::Feed_Stock_6' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotLowestFeedNumberProbability, Feed_Stock_7) == 0x000024, "Member 'FJackDataTableMeosiSlotLowestFeedNumberProbability::Feed_Stock_7' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotLowestFeedNumberProbability, Feed_NoStock_0) == 0x000028, "Member 'FJackDataTableMeosiSlotLowestFeedNumberProbability::Feed_NoStock_0' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotLowestFeedNumberProbability, Feed_NoStock_1) == 0x00002C, "Member 'FJackDataTableMeosiSlotLowestFeedNumberProbability::Feed_NoStock_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotLowestFeedNumberProbability, Feed_NoStock_2) == 0x000030, "Member 'FJackDataTableMeosiSlotLowestFeedNumberProbability::Feed_NoStock_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotLowestFeedNumberProbability, Feed_NoStock_3) == 0x000034, "Member 'FJackDataTableMeosiSlotLowestFeedNumberProbability::Feed_NoStock_3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotLowestFeedNumberProbability, Feed_NoStock_4) == 0x000038, "Member 'FJackDataTableMeosiSlotLowestFeedNumberProbability::Feed_NoStock_4' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotLowestFeedNumberProbability, Feed_NoStock_5) == 0x00003C, "Member 'FJackDataTableMeosiSlotLowestFeedNumberProbability::Feed_NoStock_5' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotLowestFeedNumberProbability, Feed_NoStock_6) == 0x000040, "Member 'FJackDataTableMeosiSlotLowestFeedNumberProbability::Feed_NoStock_6' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotLowestFeedNumberProbability, Feed_NoStock_7) == 0x000044, "Member 'FJackDataTableMeosiSlotLowestFeedNumberProbability::Feed_NoStock_7' has a wrong offset!");

// ScriptStruct JackGame.JackCaptureCharacterInfo
// 0x00B0 (0x00B0 - 0x0000)
struct alignas(0x10) FJackCaptureCharacterInfo final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CharacterClass;                                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AJackCharacter*                         Character;                                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x70];                                      // 0x0040(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackCaptureCharacterInfo) == 0x000010, "Wrong alignment on FJackCaptureCharacterInfo");
static_assert(sizeof(FJackCaptureCharacterInfo) == 0x0000B0, "Wrong size on FJackCaptureCharacterInfo");
static_assert(offsetof(FJackCaptureCharacterInfo, CharacterClass) == 0x000030, "Member 'FJackCaptureCharacterInfo::CharacterClass' has a wrong offset!");
static_assert(offsetof(FJackCaptureCharacterInfo, Character) == 0x000038, "Member 'FJackCaptureCharacterInfo::Character' has a wrong offset!");

// ScriptStruct JackGame.JackCharacterCoordinateLODInfo
// 0x0010 (0x0010 - 0x0000)
struct FJackCharacterCoordinateLODInfo final
{
public:
	TArray<struct FSkeletalMeshOverrideLODInfo>   LODInfo;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackCharacterCoordinateLODInfo) == 0x000008, "Wrong alignment on FJackCharacterCoordinateLODInfo");
static_assert(sizeof(FJackCharacterCoordinateLODInfo) == 0x000010, "Wrong size on FJackCharacterCoordinateLODInfo");
static_assert(offsetof(FJackCharacterCoordinateLODInfo, LODInfo) == 0x000000, "Member 'FJackCharacterCoordinateLODInfo::LODInfo' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotShimohuriRefundSetting
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotShimohuriRefundSetting final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotShimohuriRefundSetting) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotShimohuriRefundSetting");
static_assert(sizeof(FJackLDT_MeosiSlotShimohuriRefundSetting) == 0x000010, "Wrong size on FJackLDT_MeosiSlotShimohuriRefundSetting");

// ScriptStruct JackGame.JackLDT_VoicePreset
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_VoicePreset final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_VoicePreset) == 0x000008, "Wrong alignment on FJackLDT_VoicePreset");
static_assert(sizeof(FJackLDT_VoicePreset) == 0x000010, "Wrong size on FJackLDT_VoicePreset");

// ScriptStruct JackGame.JackDataTableMonsterZukanMemo
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMonsterZukanMemo final : public FTableRowBase
{
public:
	class FName                                   Memo;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMonsterZukanMemo) == 0x000008, "Wrong alignment on FJackDataTableMonsterZukanMemo");
static_assert(sizeof(FJackDataTableMonsterZukanMemo) == 0x000010, "Wrong size on FJackDataTableMonsterZukanMemo");
static_assert(offsetof(FJackDataTableMonsterZukanMemo, Memo) == 0x000008, "Member 'FJackDataTableMonsterZukanMemo::Memo' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_ActionTag
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ActionTag final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ActionTag) == 0x000008, "Wrong alignment on FJackLDT_ActionTag");
static_assert(sizeof(FJackLDT_ActionTag) == 0x000010, "Wrong size on FJackLDT_ActionTag");

// ScriptStruct JackGame.JackCharacterDisplayLimitSetting
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackCharacterDisplayLimitSetting final
{
public:
	class FName                                   PersistentLevelName;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayNum;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackCharacterDisplayLimitSetting) == 0x000008, "Wrong alignment on FJackCharacterDisplayLimitSetting");
static_assert(sizeof(FJackCharacterDisplayLimitSetting) == 0x000010, "Wrong size on FJackCharacterDisplayLimitSetting");
static_assert(offsetof(FJackCharacterDisplayLimitSetting, PersistentLevelName) == 0x000000, "Member 'FJackCharacterDisplayLimitSetting::PersistentLevelName' has a wrong offset!");
static_assert(offsetof(FJackCharacterDisplayLimitSetting, DisplayNum) == 0x000008, "Member 'FJackCharacterDisplayLimitSetting::DisplayNum' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableRouletteJackPotProbability
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableRouletteJackPotProbability final : public FTableRowBase
{
public:
	int32                                         BasePercent;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fraction;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableRouletteJackPotProbability) == 0x000008, "Wrong alignment on FJackDataTableRouletteJackPotProbability");
static_assert(sizeof(FJackDataTableRouletteJackPotProbability) == 0x000010, "Wrong size on FJackDataTableRouletteJackPotProbability");
static_assert(offsetof(FJackDataTableRouletteJackPotProbability, BasePercent) == 0x000008, "Member 'FJackDataTableRouletteJackPotProbability::BasePercent' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteJackPotProbability, Fraction) == 0x00000C, "Member 'FJackDataTableRouletteJackPotProbability::Fraction' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableUIActionSort
// 0x0068 (0x0070 - 0x0008)
struct FJackDataTableUIActionSort final : public FTableRowBase
{
public:
	class FString                                 DisplayName;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         P001Field_1;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         P001Battle_1;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         P002Field_1;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         P002Battle_1;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         P002Field_2;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         P002Battle_2;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         P003Field_1;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         P003Battle_1;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         P004Field_1;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         P004Battle_1;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         P004Field_2;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         P004Battle_2;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         P005Field_1;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         P005Battle_1;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         P006Field_1;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         P006Battle_1;                                      // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         P007Field_1;                                       // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         P007Battle_1;                                      // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         P008Field_1;                                       // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         P008Battle_1;                                      // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGFieldActionSoundType                  FieldActionSE;                                     // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableUIActionSort) == 0x000008, "Wrong alignment on FJackDataTableUIActionSort");
static_assert(sizeof(FJackDataTableUIActionSort) == 0x000070, "Wrong size on FJackDataTableUIActionSort");
static_assert(offsetof(FJackDataTableUIActionSort, DisplayName) == 0x000008, "Member 'FJackDataTableUIActionSort::DisplayName' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIActionSort, P001Field_1) == 0x000018, "Member 'FJackDataTableUIActionSort::P001Field_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIActionSort, P001Battle_1) == 0x00001C, "Member 'FJackDataTableUIActionSort::P001Battle_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIActionSort, P002Field_1) == 0x000020, "Member 'FJackDataTableUIActionSort::P002Field_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIActionSort, P002Battle_1) == 0x000024, "Member 'FJackDataTableUIActionSort::P002Battle_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIActionSort, P002Field_2) == 0x000028, "Member 'FJackDataTableUIActionSort::P002Field_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIActionSort, P002Battle_2) == 0x00002C, "Member 'FJackDataTableUIActionSort::P002Battle_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIActionSort, P003Field_1) == 0x000030, "Member 'FJackDataTableUIActionSort::P003Field_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIActionSort, P003Battle_1) == 0x000034, "Member 'FJackDataTableUIActionSort::P003Battle_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIActionSort, P004Field_1) == 0x000038, "Member 'FJackDataTableUIActionSort::P004Field_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIActionSort, P004Battle_1) == 0x00003C, "Member 'FJackDataTableUIActionSort::P004Battle_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIActionSort, P004Field_2) == 0x000040, "Member 'FJackDataTableUIActionSort::P004Field_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIActionSort, P004Battle_2) == 0x000044, "Member 'FJackDataTableUIActionSort::P004Battle_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIActionSort, P005Field_1) == 0x000048, "Member 'FJackDataTableUIActionSort::P005Field_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIActionSort, P005Battle_1) == 0x00004C, "Member 'FJackDataTableUIActionSort::P005Battle_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIActionSort, P006Field_1) == 0x000050, "Member 'FJackDataTableUIActionSort::P006Field_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIActionSort, P006Battle_1) == 0x000054, "Member 'FJackDataTableUIActionSort::P006Battle_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIActionSort, P007Field_1) == 0x000058, "Member 'FJackDataTableUIActionSort::P007Field_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIActionSort, P007Battle_1) == 0x00005C, "Member 'FJackDataTableUIActionSort::P007Battle_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIActionSort, P008Field_1) == 0x000060, "Member 'FJackDataTableUIActionSort::P008Field_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIActionSort, P008Battle_1) == 0x000064, "Member 'FJackDataTableUIActionSort::P008Battle_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIActionSort, FieldActionSE) == 0x000068, "Member 'FJackDataTableUIActionSort::FieldActionSE' has a wrong offset!");

// ScriptStruct JackGame.JackMapJourneyInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FJackMapJourneyInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMapJourneyInfo) == 0x000008, "Wrong alignment on FJackMapJourneyInfo");
static_assert(sizeof(FJackMapJourneyInfo) == 0x000020, "Wrong size on FJackMapJourneyInfo");

// ScriptStruct JackGame.JackCharacterTickIntervalSetting
// 0x0008 (0x0008 - 0x0000)
struct FJackCharacterTickIntervalSetting final
{
public:
	float                                         CameraDistance;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TickInterval;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackCharacterTickIntervalSetting) == 0x000004, "Wrong alignment on FJackCharacterTickIntervalSetting");
static_assert(sizeof(FJackCharacterTickIntervalSetting) == 0x000008, "Wrong size on FJackCharacterTickIntervalSetting");
static_assert(offsetof(FJackCharacterTickIntervalSetting, CameraDistance) == 0x000000, "Member 'FJackCharacterTickIntervalSetting::CameraDistance' has a wrong offset!");
static_assert(offsetof(FJackCharacterTickIntervalSetting, TickInterval) == 0x000004, "Member 'FJackCharacterTickIntervalSetting::TickInterval' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_UIActionFieldText
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UIActionFieldText final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UIActionFieldText) == 0x000008, "Wrong alignment on FJackLDT_UIActionFieldText");
static_assert(sizeof(FJackLDT_UIActionFieldText) == 0x000010, "Wrong size on FJackLDT_UIActionFieldText");

// ScriptStruct JackGame.JackDataTableMeosiSlotScenarioMamono
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMeosiSlotScenarioMamono final : public FTableRowBase
{
public:
	EJackMeosiSlotScenarioMamonoKind              ScenarioKind;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotScenarioSubAct                  SubAct;                                            // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Probability;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotKeySeType                       KeySeType;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         KeySeProb;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotScenarioMamono) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotScenarioMamono");
static_assert(sizeof(FJackDataTableMeosiSlotScenarioMamono) == 0x000018, "Wrong size on FJackDataTableMeosiSlotScenarioMamono");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioMamono, ScenarioKind) == 0x000008, "Member 'FJackDataTableMeosiSlotScenarioMamono::ScenarioKind' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioMamono, SubAct) == 0x000009, "Member 'FJackDataTableMeosiSlotScenarioMamono::SubAct' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioMamono, Probability) == 0x00000C, "Member 'FJackDataTableMeosiSlotScenarioMamono::Probability' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioMamono, KeySeType) == 0x000010, "Member 'FJackDataTableMeosiSlotScenarioMamono::KeySeType' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioMamono, KeySeProb) == 0x000014, "Member 'FJackDataTableMeosiSlotScenarioMamono::KeySeProb' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotMonsterList
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMeosiSlotMonsterList final : public FTableRowBase
{
public:
	class FName                                   Key;                                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Probability;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotMonsterList) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotMonsterList");
static_assert(sizeof(FJackDataTableMeosiSlotMonsterList) == 0x000018, "Wrong size on FJackDataTableMeosiSlotMonsterList");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterList, Key) == 0x000008, "Member 'FJackDataTableMeosiSlotMonsterList::Key' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterList, Probability) == 0x000010, "Member 'FJackDataTableMeosiSlotMonsterList::Probability' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_G381
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_G381 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_G381) == 0x000008, "Wrong alignment on FJackLDT_G381");
static_assert(sizeof(FJackLDT_G381) == 0x000010, "Wrong size on FJackLDT_G381");

// ScriptStruct JackGame.JackCoin_ExchageItem
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackCoin_ExchageItem final
{
public:
	class FName                                   PrizeId;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExchangeNumber;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExchange;                                         // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSoldOut;                                          // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackCoin_ExchageItem) == 0x000008, "Wrong alignment on FJackCoin_ExchageItem");
static_assert(sizeof(FJackCoin_ExchageItem) == 0x000018, "Wrong size on FJackCoin_ExchageItem");
static_assert(offsetof(FJackCoin_ExchageItem, PrizeId) == 0x000000, "Member 'FJackCoin_ExchageItem::PrizeId' has a wrong offset!");
static_assert(offsetof(FJackCoin_ExchageItem, ItemID) == 0x000008, "Member 'FJackCoin_ExchageItem::ItemID' has a wrong offset!");
static_assert(offsetof(FJackCoin_ExchageItem, ExchangeNumber) == 0x000010, "Member 'FJackCoin_ExchageItem::ExchangeNumber' has a wrong offset!");
static_assert(offsetof(FJackCoin_ExchageItem, bExchange) == 0x000014, "Member 'FJackCoin_ExchageItem::bExchange' has a wrong offset!");
static_assert(offsetof(FJackCoin_ExchageItem, bSoldOut) == 0x000015, "Member 'FJackCoin_ExchageItem::bSoldOut' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1S_P001
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1S_P001 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1S_P001) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1S_P001");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1S_P001) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1S_P001");

// ScriptStruct JackGame.JackCrossFadeTrackKey
// 0x000C (0x000C - 0x0000)
struct FJackCrossFadeTrackKey final
{
public:
	float                                         TimeVar;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartWait;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeSec;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackCrossFadeTrackKey) == 0x000004, "Wrong alignment on FJackCrossFadeTrackKey");
static_assert(sizeof(FJackCrossFadeTrackKey) == 0x00000C, "Wrong size on FJackCrossFadeTrackKey");
static_assert(offsetof(FJackCrossFadeTrackKey, TimeVar) == 0x000000, "Member 'FJackCrossFadeTrackKey::TimeVar' has a wrong offset!");
static_assert(offsetof(FJackCrossFadeTrackKey, StartWait) == 0x000004, "Member 'FJackCrossFadeTrackKey::StartWait' has a wrong offset!");
static_assert(offsetof(FJackCrossFadeTrackKey, FadeSec) == 0x000008, "Member 'FJackCrossFadeTrackKey::FadeSec' has a wrong offset!");

// ScriptStruct JackGame.JackDataTablePartyTalkVoice
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTablePartyTalkVoice final : public FTableRowBase
{
public:
	TArray<TSoftObjectPtr<class USoundBase>>      VoiceAsset;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTablePartyTalkVoice) == 0x000008, "Wrong alignment on FJackDataTablePartyTalkVoice");
static_assert(sizeof(FJackDataTablePartyTalkVoice) == 0x000018, "Wrong size on FJackDataTablePartyTalkVoice");
static_assert(offsetof(FJackDataTablePartyTalkVoice, VoiceAsset) == 0x000008, "Member 'FJackDataTablePartyTalkVoice::VoiceAsset' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableTenseiFlags
// 0x0030 (0x0038 - 0x0008)
struct FJackDataTableTenseiFlags final : public FTableRowBase
{
public:
	EJackGameFlagCategory                         Category;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FlagId;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Arg1;                                              // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Arg2;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Cmds;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableTenseiFlags) == 0x000008, "Wrong alignment on FJackDataTableTenseiFlags");
static_assert(sizeof(FJackDataTableTenseiFlags) == 0x000038, "Wrong size on FJackDataTableTenseiFlags");
static_assert(offsetof(FJackDataTableTenseiFlags, Category) == 0x000008, "Member 'FJackDataTableTenseiFlags::Category' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiFlags, FlagId) == 0x000010, "Member 'FJackDataTableTenseiFlags::FlagId' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiFlags, Arg1) == 0x000018, "Member 'FJackDataTableTenseiFlags::Arg1' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiFlags, Arg2) == 0x000020, "Member 'FJackDataTableTenseiFlags::Arg2' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiFlags, Cmds) == 0x000028, "Member 'FJackDataTableTenseiFlags::Cmds' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_P004_Skirt
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_P004_Skirt final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_P004_Skirt) == 0x000008, "Wrong alignment on FJackLDT_RtEx_P004_Skirt");
static_assert(sizeof(FJackLDT_RtEx_P004_Skirt) == 0x000010, "Wrong size on FJackLDT_RtEx_P004_Skirt");

// ScriptStruct JackGame.JackActionModuleDamageEvent
// 0x0018 (0x0028 - 0x0010)
struct FJackActionModuleDamageEvent final : public FDamageEvent
{
public:
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackActionModuleDamageEvent) == 0x000008, "Wrong alignment on FJackActionModuleDamageEvent");
static_assert(sizeof(FJackActionModuleDamageEvent) == 0x000028, "Wrong size on FJackActionModuleDamageEvent");

// ScriptStruct JackGame.JackDataTableSyuurenjouRewardInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FJackDataTableSyuurenjouRewardInfo final
{
public:
	class FName                                   AcquiredFlagName;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Conditions;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemEventGetId;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HiddenName;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableSyuurenjouRewardInfo) == 0x000008, "Wrong alignment on FJackDataTableSyuurenjouRewardInfo");
static_assert(sizeof(FJackDataTableSyuurenjouRewardInfo) == 0x000020, "Wrong size on FJackDataTableSyuurenjouRewardInfo");
static_assert(offsetof(FJackDataTableSyuurenjouRewardInfo, AcquiredFlagName) == 0x000000, "Member 'FJackDataTableSyuurenjouRewardInfo::AcquiredFlagName' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjouRewardInfo, Conditions) == 0x000008, "Member 'FJackDataTableSyuurenjouRewardInfo::Conditions' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjouRewardInfo, ItemEventGetId) == 0x000010, "Member 'FJackDataTableSyuurenjouRewardInfo::ItemEventGetId' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjouRewardInfo, HiddenName) == 0x000018, "Member 'FJackDataTableSyuurenjouRewardInfo::HiddenName' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotMonsterParam
// 0x00D0 (0x00D8 - 0x0008)
struct FJackDataTableMeosiSlotMonsterParam final : public FTableRowBase
{
public:
	class FString                                 NameText;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RareFlag;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterBehaviorPattern          Pattern;                                           // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Attack1_Damage;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotAttackClass                     Attack1_Class;                                     // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotAttackEffect                    Attack1_Effect;                                    // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Attack1_TextID;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attack2_Damage;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotAttackClass                     Attack2_Class;                                     // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotAttackEffect                    Attack2_Effect;                                    // 0x0035(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Attack2_TextID;                                    // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attack3_Damage;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotAttackClass                     Attack3_Class;                                     // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotAttackEffect                    Attack3_Effect;                                    // 0x0045(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Attack3_TextID;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attack4_Damage;                                    // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotAttackClass                     Attack4_Class;                                     // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotAttackEffect                    Attack4_Effect;                                    // 0x0055(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Attack4_TextID;                                    // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Avoidance;                                         // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Avoidance_TextID;                                  // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseHp;                                            // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HpRange;                                           // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPhysicalResistance;                               // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMagicalResistance;                                // 0x0079(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterRank                     Rank;                                              // 0x007A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B[0x1];                                       // 0x007B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LvUp;                                              // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterSize                     Size;                                              // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                PartyTexture;                                      // 0x0088(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                EnemyTexture;                                      // 0x00A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                IconTexture;                                       // 0x00B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterID                       MonsterID;                                         // 0x00D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotMonsterParam) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotMonsterParam");
static_assert(sizeof(FJackDataTableMeosiSlotMonsterParam) == 0x0000D8, "Wrong size on FJackDataTableMeosiSlotMonsterParam");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, NameText) == 0x000008, "Member 'FJackDataTableMeosiSlotMonsterParam::NameText' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, RareFlag) == 0x000018, "Member 'FJackDataTableMeosiSlotMonsterParam::RareFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, Pattern) == 0x000019, "Member 'FJackDataTableMeosiSlotMonsterParam::Pattern' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, Attack1_Damage) == 0x00001C, "Member 'FJackDataTableMeosiSlotMonsterParam::Attack1_Damage' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, Attack1_Class) == 0x000020, "Member 'FJackDataTableMeosiSlotMonsterParam::Attack1_Class' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, Attack1_Effect) == 0x000021, "Member 'FJackDataTableMeosiSlotMonsterParam::Attack1_Effect' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, Attack1_TextID) == 0x000028, "Member 'FJackDataTableMeosiSlotMonsterParam::Attack1_TextID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, Attack2_Damage) == 0x000030, "Member 'FJackDataTableMeosiSlotMonsterParam::Attack2_Damage' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, Attack2_Class) == 0x000034, "Member 'FJackDataTableMeosiSlotMonsterParam::Attack2_Class' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, Attack2_Effect) == 0x000035, "Member 'FJackDataTableMeosiSlotMonsterParam::Attack2_Effect' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, Attack2_TextID) == 0x000038, "Member 'FJackDataTableMeosiSlotMonsterParam::Attack2_TextID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, Attack3_Damage) == 0x000040, "Member 'FJackDataTableMeosiSlotMonsterParam::Attack3_Damage' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, Attack3_Class) == 0x000044, "Member 'FJackDataTableMeosiSlotMonsterParam::Attack3_Class' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, Attack3_Effect) == 0x000045, "Member 'FJackDataTableMeosiSlotMonsterParam::Attack3_Effect' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, Attack3_TextID) == 0x000048, "Member 'FJackDataTableMeosiSlotMonsterParam::Attack3_TextID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, Attack4_Damage) == 0x000050, "Member 'FJackDataTableMeosiSlotMonsterParam::Attack4_Damage' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, Attack4_Class) == 0x000054, "Member 'FJackDataTableMeosiSlotMonsterParam::Attack4_Class' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, Attack4_Effect) == 0x000055, "Member 'FJackDataTableMeosiSlotMonsterParam::Attack4_Effect' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, Attack4_TextID) == 0x000058, "Member 'FJackDataTableMeosiSlotMonsterParam::Attack4_TextID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, Avoidance) == 0x000060, "Member 'FJackDataTableMeosiSlotMonsterParam::Avoidance' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, Avoidance_TextID) == 0x000068, "Member 'FJackDataTableMeosiSlotMonsterParam::Avoidance_TextID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, BaseHp) == 0x000070, "Member 'FJackDataTableMeosiSlotMonsterParam::BaseHp' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, HpRange) == 0x000074, "Member 'FJackDataTableMeosiSlotMonsterParam::HpRange' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, bPhysicalResistance) == 0x000078, "Member 'FJackDataTableMeosiSlotMonsterParam::bPhysicalResistance' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, bMagicalResistance) == 0x000079, "Member 'FJackDataTableMeosiSlotMonsterParam::bMagicalResistance' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, Rank) == 0x00007A, "Member 'FJackDataTableMeosiSlotMonsterParam::Rank' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, LvUp) == 0x00007C, "Member 'FJackDataTableMeosiSlotMonsterParam::LvUp' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, Size) == 0x000080, "Member 'FJackDataTableMeosiSlotMonsterParam::Size' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, PartyTexture) == 0x000088, "Member 'FJackDataTableMeosiSlotMonsterParam::PartyTexture' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, EnemyTexture) == 0x0000A0, "Member 'FJackDataTableMeosiSlotMonsterParam::EnemyTexture' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, IconTexture) == 0x0000B8, "Member 'FJackDataTableMeosiSlotMonsterParam::IconTexture' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterParam, MonsterID) == 0x0000D0, "Member 'FJackDataTableMeosiSlotMonsterParam::MonsterID' has a wrong offset!");

// ScriptStruct JackGame.JackActionDamageEvent
// 0x0198 (0x01A8 - 0x0010)
struct FJackActionDamageEvent final : public FDamageEvent
{
public:
	uint8                                         Pad_10[0x198];                                     // 0x0010(0x0198)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackActionDamageEvent) == 0x000008, "Wrong alignment on FJackActionDamageEvent");
static_assert(sizeof(FJackActionDamageEvent) == 0x0001A8, "Wrong size on FJackActionDamageEvent");

// ScriptStruct JackGame.JackDataTableMiniGameJackPotState
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableMiniGameJackPotState final : public FTableRowBase
{
public:
	float                                         SlotFraction;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RouletteFraction;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JPLevel1;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JPLevel2;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JPLevel3;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JPLevel4;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JPLevel5;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMiniGameJackPotState) == 0x000008, "Wrong alignment on FJackDataTableMiniGameJackPotState");
static_assert(sizeof(FJackDataTableMiniGameJackPotState) == 0x000028, "Wrong size on FJackDataTableMiniGameJackPotState");
static_assert(offsetof(FJackDataTableMiniGameJackPotState, SlotFraction) == 0x000008, "Member 'FJackDataTableMiniGameJackPotState::SlotFraction' has a wrong offset!");
static_assert(offsetof(FJackDataTableMiniGameJackPotState, RouletteFraction) == 0x00000C, "Member 'FJackDataTableMiniGameJackPotState::RouletteFraction' has a wrong offset!");
static_assert(offsetof(FJackDataTableMiniGameJackPotState, JPLevel1) == 0x000010, "Member 'FJackDataTableMiniGameJackPotState::JPLevel1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMiniGameJackPotState, JPLevel2) == 0x000014, "Member 'FJackDataTableMiniGameJackPotState::JPLevel2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMiniGameJackPotState, JPLevel3) == 0x000018, "Member 'FJackDataTableMiniGameJackPotState::JPLevel3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMiniGameJackPotState, JPLevel4) == 0x00001C, "Member 'FJackDataTableMiniGameJackPotState::JPLevel4' has a wrong offset!");
static_assert(offsetof(FJackDataTableMiniGameJackPotState, JPLevel5) == 0x000020, "Member 'FJackDataTableMiniGameJackPotState::JPLevel5' has a wrong offset!");

// ScriptStruct JackGame.JackPoisonDamageEvent
// 0x0008 (0x0018 - 0x0010)
struct FJackPoisonDamageEvent final : public FDamageEvent
{
public:
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackPoisonDamageEvent) == 0x000008, "Wrong alignment on FJackPoisonDamageEvent");
static_assert(sizeof(FJackPoisonDamageEvent) == 0x000018, "Wrong size on FJackPoisonDamageEvent");

// ScriptStruct JackGame.JackDataTableOddEffectFacial
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableOddEffectFacial final : public FTableRowBase
{
public:
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FacialStatusID;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  Flags;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableOddEffectFacial) == 0x000008, "Wrong alignment on FJackDataTableOddEffectFacial");
static_assert(sizeof(FJackDataTableOddEffectFacial) == 0x000028, "Wrong size on FJackDataTableOddEffectFacial");
static_assert(offsetof(FJackDataTableOddEffectFacial, Priority) == 0x000008, "Member 'FJackDataTableOddEffectFacial::Priority' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectFacial, FacialStatusID) == 0x000010, "Member 'FJackDataTableOddEffectFacial::FacialStatusID' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectFacial, Flags) == 0x000018, "Member 'FJackDataTableOddEffectFacial::Flags' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_Lerp2BonesAndClamp
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_Lerp2BonesAndClamp final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_Lerp2BonesAndClamp) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_Lerp2BonesAndClamp");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_Lerp2BonesAndClamp) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_Lerp2BonesAndClamp");

// ScriptStruct JackGame.JackDataTableFootIKSetting
// 0x0058 (0x0060 - 0x0008)
struct FJackDataTableFootIKSetting final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USkeletalMesh>           MasterPoseMesh;                                    // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSeparateRotationRangeElements;                    // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               MinSeparateRotation;                               // 0x0024(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               MaxSeparateRotation;                               // 0x0030(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SeparateRotationApplyHeight;                       // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   SeparateRotationApplyEasingFunc;                   // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CalcAdjustHeightBlendWeight_MovementSpeedMax;      // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalcAdjustHeigthBlendWeight_MovementSpeedBlendWeightMax; // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   CalcAdjustHeightBlendWeight_MovementSpeedBlendCurve; // 0x004C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CalcAdjustHeightBlendWeight_GroundDegreeMax;       // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalcAdjustHeigthBlendWeight_GroundDegreeBlendWeightMax; // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   CalcAdjustHeightBlendWeight_GroundDegreeBlendCurve; // 0x0058(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableFootIKSetting) == 0x000008, "Wrong alignment on FJackDataTableFootIKSetting");
static_assert(sizeof(FJackDataTableFootIKSetting) == 0x000060, "Wrong size on FJackDataTableFootIKSetting");
static_assert(offsetof(FJackDataTableFootIKSetting, MasterPoseMesh) == 0x000008, "Member 'FJackDataTableFootIKSetting::MasterPoseMesh' has a wrong offset!");
static_assert(offsetof(FJackDataTableFootIKSetting, bSeparateRotationRangeElements) == 0x000020, "Member 'FJackDataTableFootIKSetting::bSeparateRotationRangeElements' has a wrong offset!");
static_assert(offsetof(FJackDataTableFootIKSetting, MinSeparateRotation) == 0x000024, "Member 'FJackDataTableFootIKSetting::MinSeparateRotation' has a wrong offset!");
static_assert(offsetof(FJackDataTableFootIKSetting, MaxSeparateRotation) == 0x000030, "Member 'FJackDataTableFootIKSetting::MaxSeparateRotation' has a wrong offset!");
static_assert(offsetof(FJackDataTableFootIKSetting, SeparateRotationApplyHeight) == 0x00003C, "Member 'FJackDataTableFootIKSetting::SeparateRotationApplyHeight' has a wrong offset!");
static_assert(offsetof(FJackDataTableFootIKSetting, SeparateRotationApplyEasingFunc) == 0x000040, "Member 'FJackDataTableFootIKSetting::SeparateRotationApplyEasingFunc' has a wrong offset!");
static_assert(offsetof(FJackDataTableFootIKSetting, CalcAdjustHeightBlendWeight_MovementSpeedMax) == 0x000044, "Member 'FJackDataTableFootIKSetting::CalcAdjustHeightBlendWeight_MovementSpeedMax' has a wrong offset!");
static_assert(offsetof(FJackDataTableFootIKSetting, CalcAdjustHeigthBlendWeight_MovementSpeedBlendWeightMax) == 0x000048, "Member 'FJackDataTableFootIKSetting::CalcAdjustHeigthBlendWeight_MovementSpeedBlendWeightMax' has a wrong offset!");
static_assert(offsetof(FJackDataTableFootIKSetting, CalcAdjustHeightBlendWeight_MovementSpeedBlendCurve) == 0x00004C, "Member 'FJackDataTableFootIKSetting::CalcAdjustHeightBlendWeight_MovementSpeedBlendCurve' has a wrong offset!");
static_assert(offsetof(FJackDataTableFootIKSetting, CalcAdjustHeightBlendWeight_GroundDegreeMax) == 0x000050, "Member 'FJackDataTableFootIKSetting::CalcAdjustHeightBlendWeight_GroundDegreeMax' has a wrong offset!");
static_assert(offsetof(FJackDataTableFootIKSetting, CalcAdjustHeigthBlendWeight_GroundDegreeBlendWeightMax) == 0x000054, "Member 'FJackDataTableFootIKSetting::CalcAdjustHeigthBlendWeight_GroundDegreeBlendWeightMax' has a wrong offset!");
static_assert(offsetof(FJackDataTableFootIKSetting, CalcAdjustHeightBlendWeight_GroundDegreeBlendCurve) == 0x000058, "Member 'FJackDataTableFootIKSetting::CalcAdjustHeightBlendWeight_GroundDegreeBlendCurve' has a wrong offset!");

// ScriptStruct JackGame.JackRadialDamageEvent
// 0x0090 (0x00D0 - 0x0040)
struct FJackRadialDamageEvent final : public FRadialDamageEvent
{
public:
	uint8                                         Pad_40[0x90];                                      // 0x0040(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackRadialDamageEvent) == 0x000008, "Wrong alignment on FJackRadialDamageEvent");
static_assert(sizeof(FJackRadialDamageEvent) == 0x0000D0, "Wrong size on FJackRadialDamageEvent");

// ScriptStruct JackGame.JackDataTableActionTargetIcon
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableActionTargetIcon final : public FTableRowBase
{
public:
	TArray<class FName>                           OddEffectStatusList;                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableActionTargetIcon) == 0x000008, "Wrong alignment on FJackDataTableActionTargetIcon");
static_assert(sizeof(FJackDataTableActionTargetIcon) == 0x000018, "Wrong size on FJackDataTableActionTargetIcon");
static_assert(offsetof(FJackDataTableActionTargetIcon, OddEffectStatusList) == 0x000008, "Member 'FJackDataTableActionTargetIcon::OddEffectStatusList' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MedalStampTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MedalStampTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MedalStampTable) == 0x000008, "Wrong alignment on FJackLDT_MedalStampTable");
static_assert(sizeof(FJackLDT_MedalStampTable) == 0x000010, "Wrong size on FJackLDT_MedalStampTable");

// ScriptStruct JackGame.JackDataTableActionOddEffect
// 0x0080 (0x0088 - 0x0008)
struct FJackDataTableActionOddEffect final : public FTableRowBase
{
public:
	TArray<class FName>                           TempOddEffectIDs;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   SetSelfOddEffectID;                                // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJackReferenceParamInfo                SuccessPer;                                        // 0x0020(0x001C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SetOddEffectIDs;                                   // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<EJackOddEffectCategoryType>            ClearOddEffectCategories;                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           ClearOddEffectStatusIDs;                           // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           ClearOddEffectIDs;                                 // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bClearOddEffectConditionGood;                      // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearOddEffectConditionBad;                       // 0x0081(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableActionOddEffect) == 0x000008, "Wrong alignment on FJackDataTableActionOddEffect");
static_assert(sizeof(FJackDataTableActionOddEffect) == 0x000088, "Wrong size on FJackDataTableActionOddEffect");
static_assert(offsetof(FJackDataTableActionOddEffect, TempOddEffectIDs) == 0x000008, "Member 'FJackDataTableActionOddEffect::TempOddEffectIDs' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionOddEffect, SetSelfOddEffectID) == 0x000018, "Member 'FJackDataTableActionOddEffect::SetSelfOddEffectID' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionOddEffect, SuccessPer) == 0x000020, "Member 'FJackDataTableActionOddEffect::SuccessPer' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionOddEffect, SetOddEffectIDs) == 0x000040, "Member 'FJackDataTableActionOddEffect::SetOddEffectIDs' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionOddEffect, ClearOddEffectCategories) == 0x000050, "Member 'FJackDataTableActionOddEffect::ClearOddEffectCategories' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionOddEffect, ClearOddEffectStatusIDs) == 0x000060, "Member 'FJackDataTableActionOddEffect::ClearOddEffectStatusIDs' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionOddEffect, ClearOddEffectIDs) == 0x000070, "Member 'FJackDataTableActionOddEffect::ClearOddEffectIDs' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionOddEffect, bClearOddEffectConditionGood) == 0x000080, "Member 'FJackDataTableActionOddEffect::bClearOddEffectConditionGood' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionOddEffect, bClearOddEffectConditionBad) == 0x000081, "Member 'FJackDataTableActionOddEffect::bClearOddEffectConditionBad' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotRouteNum
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMeosiSlotRouteNum final : public FTableRowBase
{
public:
	int32                                         RouteNum;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotRouteNum) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotRouteNum");
static_assert(sizeof(FJackDataTableMeosiSlotRouteNum) == 0x000010, "Wrong size on FJackDataTableMeosiSlotRouteNum");
static_assert(offsetof(FJackDataTableMeosiSlotRouteNum, RouteNum) == 0x000008, "Member 'FJackDataTableMeosiSlotRouteNum::RouteNum' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_AnimDynamics_M043
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AnimDynamics_M043 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AnimDynamics_M043) == 0x000008, "Wrong alignment on FJackLDT_AnimDynamics_M043");
static_assert(sizeof(FJackLDT_AnimDynamics_M043) == 0x000010, "Wrong size on FJackLDT_AnimDynamics_M043");

// ScriptStruct JackGame.JackDataTableActionDamage
// 0x0050 (0x0058 - 0x0008)
struct FJackDataTableActionDamage final : public FTableRowBase
{
public:
	EJackActionDamageType                         DamageType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionDamageCalcType                     DamageCalcType;                                    // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamageCalcParam;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageCalcParamRandom;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageCalcHand;                                   // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DamageMonster;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageMin;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageMax;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackReferenceParam                           DamageReferenceParam;                              // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DamageReferenceParam_Min;                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageReferenceParam_Max;                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageRandom;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageSibariHosei;                                 // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageLimit;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitPer;                                            // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKabauEnable;                                      // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCounterEnable;                                    // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMikawasiEnable;                                   // 0x0042(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTateGuardEnable;                                  // 0x0043(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBukiGuardEnable;                                  // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKougekiAttributeEnable;                           // 0x0045(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMetalEnable;                                      // 0x0046(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bButuriDamageKeigenEnable;                         // 0x0047(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBreathDamageKeigenEnable;                         // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOddEffectClearDamageEnable;                       // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKantuYaminokoromo;                                // 0x004A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGuardMukouEnable;                                 // 0x004B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixDamageEnable;                                  // 0x004C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionMonsterRaceTokkouType              MonsterRaceTokkouType;                             // 0x004D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionTuikaKoukaType                     KougekiHPMPKyuusyuuEnable;                         // 0x004E(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bYoDamageEnable;                                   // 0x004F(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageSetOddEffectEnable;                         // 0x0050(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMetalTokkouEnable;                                // 0x0051(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKougekiJumonHenkaEnable;                          // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKaifukuJumonHenkaEnable;                          // 0x0053(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageKeigenEnable;                               // 0x0054(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionTuikaKoukaType                     WeaponTuikaKoukaType;                              // 0x0055(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionTuikaKoukaType                     TuikaDamageType;                                   // 0x0056(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionDamageBlowState                    DamageBlowState;                                   // 0x0057(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableActionDamage) == 0x000008, "Wrong alignment on FJackDataTableActionDamage");
static_assert(sizeof(FJackDataTableActionDamage) == 0x000058, "Wrong size on FJackDataTableActionDamage");
static_assert(offsetof(FJackDataTableActionDamage, DamageType) == 0x000008, "Member 'FJackDataTableActionDamage::DamageType' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, DamageCalcType) == 0x000009, "Member 'FJackDataTableActionDamage::DamageCalcType' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, DamageCalcParam) == 0x00000C, "Member 'FJackDataTableActionDamage::DamageCalcParam' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, DamageCalcParamRandom) == 0x000010, "Member 'FJackDataTableActionDamage::DamageCalcParamRandom' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, bDamageCalcHand) == 0x000014, "Member 'FJackDataTableActionDamage::bDamageCalcHand' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, DamageMonster) == 0x000018, "Member 'FJackDataTableActionDamage::DamageMonster' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, DamageMin) == 0x00001C, "Member 'FJackDataTableActionDamage::DamageMin' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, DamageMax) == 0x000020, "Member 'FJackDataTableActionDamage::DamageMax' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, DamageReferenceParam) == 0x000024, "Member 'FJackDataTableActionDamage::DamageReferenceParam' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, DamageReferenceParam_Min) == 0x000028, "Member 'FJackDataTableActionDamage::DamageReferenceParam_Min' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, DamageReferenceParam_Max) == 0x00002C, "Member 'FJackDataTableActionDamage::DamageReferenceParam_Max' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, DamageRandom) == 0x000030, "Member 'FJackDataTableActionDamage::DamageRandom' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, DamageSibariHosei) == 0x000034, "Member 'FJackDataTableActionDamage::DamageSibariHosei' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, DamageLimit) == 0x000038, "Member 'FJackDataTableActionDamage::DamageLimit' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, HitPer) == 0x00003C, "Member 'FJackDataTableActionDamage::HitPer' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, bKabauEnable) == 0x000040, "Member 'FJackDataTableActionDamage::bKabauEnable' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, bCounterEnable) == 0x000041, "Member 'FJackDataTableActionDamage::bCounterEnable' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, bMikawasiEnable) == 0x000042, "Member 'FJackDataTableActionDamage::bMikawasiEnable' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, bTateGuardEnable) == 0x000043, "Member 'FJackDataTableActionDamage::bTateGuardEnable' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, bBukiGuardEnable) == 0x000044, "Member 'FJackDataTableActionDamage::bBukiGuardEnable' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, bKougekiAttributeEnable) == 0x000045, "Member 'FJackDataTableActionDamage::bKougekiAttributeEnable' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, bMetalEnable) == 0x000046, "Member 'FJackDataTableActionDamage::bMetalEnable' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, bButuriDamageKeigenEnable) == 0x000047, "Member 'FJackDataTableActionDamage::bButuriDamageKeigenEnable' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, bBreathDamageKeigenEnable) == 0x000048, "Member 'FJackDataTableActionDamage::bBreathDamageKeigenEnable' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, bOddEffectClearDamageEnable) == 0x000049, "Member 'FJackDataTableActionDamage::bOddEffectClearDamageEnable' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, bKantuYaminokoromo) == 0x00004A, "Member 'FJackDataTableActionDamage::bKantuYaminokoromo' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, bGuardMukouEnable) == 0x00004B, "Member 'FJackDataTableActionDamage::bGuardMukouEnable' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, bFixDamageEnable) == 0x00004C, "Member 'FJackDataTableActionDamage::bFixDamageEnable' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, MonsterRaceTokkouType) == 0x00004D, "Member 'FJackDataTableActionDamage::MonsterRaceTokkouType' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, KougekiHPMPKyuusyuuEnable) == 0x00004E, "Member 'FJackDataTableActionDamage::KougekiHPMPKyuusyuuEnable' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, bYoDamageEnable) == 0x00004F, "Member 'FJackDataTableActionDamage::bYoDamageEnable' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, bDamageSetOddEffectEnable) == 0x000050, "Member 'FJackDataTableActionDamage::bDamageSetOddEffectEnable' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, bMetalTokkouEnable) == 0x000051, "Member 'FJackDataTableActionDamage::bMetalTokkouEnable' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, bKougekiJumonHenkaEnable) == 0x000052, "Member 'FJackDataTableActionDamage::bKougekiJumonHenkaEnable' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, bKaifukuJumonHenkaEnable) == 0x000053, "Member 'FJackDataTableActionDamage::bKaifukuJumonHenkaEnable' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, bDamageKeigenEnable) == 0x000054, "Member 'FJackDataTableActionDamage::bDamageKeigenEnable' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, WeaponTuikaKoukaType) == 0x000055, "Member 'FJackDataTableActionDamage::WeaponTuikaKoukaType' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, TuikaDamageType) == 0x000056, "Member 'FJackDataTableActionDamage::TuikaDamageType' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionDamage, DamageBlowState) == 0x000057, "Member 'FJackDataTableActionDamage::DamageBlowState' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotStockNumber
// 0x0090 (0x0098 - 0x0008)
struct FJackDataTableMeosiSlotStockNumber final : public FTableRowBase
{
public:
	int32                                         WaterMelon_Weak_1;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaterMelon_Weak_2;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaterMelon_Weak_3;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaterMelon_Strong_1;                               // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaterMelon_Strong_2;                               // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaterMelon_Strong_3;                               // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Weak_1;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Weak_2;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Weak_3;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Strong_1;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Strong_2;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Strong_3;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Triple_1;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Triple_2;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Triple_3;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Center_1;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Center_2;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Center_3;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chance_Weak_1;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chance_Weak_2;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chance_Weak_3;                                     // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chance_Strong_1;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chance_Strong_2;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chance_Strong_3;                                   // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chance_Most_Strong_1;                              // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chance_Most_Strong_2;                              // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chance_Most_Strong_3;                              // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChanceSpot_Weak_1;                                 // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChanceSpot_Weak_2;                                 // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChanceSpot_Weak_3;                                 // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChanceSpot_Strong_1;                               // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChanceSpot_Strong_2;                               // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChanceSpot_Strong_3;                               // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reach_1;                                           // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reach_2;                                           // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reach_3;                                           // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotStockNumber) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotStockNumber");
static_assert(sizeof(FJackDataTableMeosiSlotStockNumber) == 0x000098, "Wrong size on FJackDataTableMeosiSlotStockNumber");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, WaterMelon_Weak_1) == 0x000008, "Member 'FJackDataTableMeosiSlotStockNumber::WaterMelon_Weak_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, WaterMelon_Weak_2) == 0x00000C, "Member 'FJackDataTableMeosiSlotStockNumber::WaterMelon_Weak_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, WaterMelon_Weak_3) == 0x000010, "Member 'FJackDataTableMeosiSlotStockNumber::WaterMelon_Weak_3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, WaterMelon_Strong_1) == 0x000014, "Member 'FJackDataTableMeosiSlotStockNumber::WaterMelon_Strong_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, WaterMelon_Strong_2) == 0x000018, "Member 'FJackDataTableMeosiSlotStockNumber::WaterMelon_Strong_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, WaterMelon_Strong_3) == 0x00001C, "Member 'FJackDataTableMeosiSlotStockNumber::WaterMelon_Strong_3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, Cherry_Weak_1) == 0x000020, "Member 'FJackDataTableMeosiSlotStockNumber::Cherry_Weak_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, Cherry_Weak_2) == 0x000024, "Member 'FJackDataTableMeosiSlotStockNumber::Cherry_Weak_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, Cherry_Weak_3) == 0x000028, "Member 'FJackDataTableMeosiSlotStockNumber::Cherry_Weak_3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, Cherry_Strong_1) == 0x00002C, "Member 'FJackDataTableMeosiSlotStockNumber::Cherry_Strong_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, Cherry_Strong_2) == 0x000030, "Member 'FJackDataTableMeosiSlotStockNumber::Cherry_Strong_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, Cherry_Strong_3) == 0x000034, "Member 'FJackDataTableMeosiSlotStockNumber::Cherry_Strong_3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, Cherry_Triple_1) == 0x000038, "Member 'FJackDataTableMeosiSlotStockNumber::Cherry_Triple_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, Cherry_Triple_2) == 0x00003C, "Member 'FJackDataTableMeosiSlotStockNumber::Cherry_Triple_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, Cherry_Triple_3) == 0x000040, "Member 'FJackDataTableMeosiSlotStockNumber::Cherry_Triple_3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, Cherry_Center_1) == 0x000044, "Member 'FJackDataTableMeosiSlotStockNumber::Cherry_Center_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, Cherry_Center_2) == 0x000048, "Member 'FJackDataTableMeosiSlotStockNumber::Cherry_Center_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, Cherry_Center_3) == 0x00004C, "Member 'FJackDataTableMeosiSlotStockNumber::Cherry_Center_3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, Chance_Weak_1) == 0x000050, "Member 'FJackDataTableMeosiSlotStockNumber::Chance_Weak_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, Chance_Weak_2) == 0x000054, "Member 'FJackDataTableMeosiSlotStockNumber::Chance_Weak_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, Chance_Weak_3) == 0x000058, "Member 'FJackDataTableMeosiSlotStockNumber::Chance_Weak_3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, Chance_Strong_1) == 0x00005C, "Member 'FJackDataTableMeosiSlotStockNumber::Chance_Strong_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, Chance_Strong_2) == 0x000060, "Member 'FJackDataTableMeosiSlotStockNumber::Chance_Strong_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, Chance_Strong_3) == 0x000064, "Member 'FJackDataTableMeosiSlotStockNumber::Chance_Strong_3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, Chance_Most_Strong_1) == 0x000068, "Member 'FJackDataTableMeosiSlotStockNumber::Chance_Most_Strong_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, Chance_Most_Strong_2) == 0x00006C, "Member 'FJackDataTableMeosiSlotStockNumber::Chance_Most_Strong_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, Chance_Most_Strong_3) == 0x000070, "Member 'FJackDataTableMeosiSlotStockNumber::Chance_Most_Strong_3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, ChanceSpot_Weak_1) == 0x000074, "Member 'FJackDataTableMeosiSlotStockNumber::ChanceSpot_Weak_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, ChanceSpot_Weak_2) == 0x000078, "Member 'FJackDataTableMeosiSlotStockNumber::ChanceSpot_Weak_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, ChanceSpot_Weak_3) == 0x00007C, "Member 'FJackDataTableMeosiSlotStockNumber::ChanceSpot_Weak_3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, ChanceSpot_Strong_1) == 0x000080, "Member 'FJackDataTableMeosiSlotStockNumber::ChanceSpot_Strong_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, ChanceSpot_Strong_2) == 0x000084, "Member 'FJackDataTableMeosiSlotStockNumber::ChanceSpot_Strong_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, ChanceSpot_Strong_3) == 0x000088, "Member 'FJackDataTableMeosiSlotStockNumber::ChanceSpot_Strong_3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, Reach_1) == 0x00008C, "Member 'FJackDataTableMeosiSlotStockNumber::Reach_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, Reach_2) == 0x000090, "Member 'FJackDataTableMeosiSlotStockNumber::Reach_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotStockNumber, Reach_3) == 0x000094, "Member 'FJackDataTableMeosiSlotStockNumber::Reach_3' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Facial_M206
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Facial_M206 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Facial_M206) == 0x000008, "Wrong alignment on FJackLDT_Facial_M206");
static_assert(sizeof(FJackLDT_Facial_M206) == 0x000010, "Wrong size on FJackLDT_Facial_M206");

// ScriptStruct JackGame.JackLDT_RtEx_P002_Loin_Up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_P002_Loin_Up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_P002_Loin_Up) == 0x000008, "Wrong alignment on FJackLDT_RtEx_P002_Loin_Up");
static_assert(sizeof(FJackLDT_RtEx_P002_Loin_Up) == 0x000010, "Wrong size on FJackLDT_RtEx_P002_Loin_Up");

// ScriptStruct JackGame.JackDataTableAction
// 0x01B0 (0x01B8 - 0x0008)
struct FJackDataTableAction final : public FTableRowBase
{
public:
	class FName                                   DisplayName;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionDamageID;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionOddEffectID;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionMultiAttackID;                               // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionHitOrderID;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionNakamaYobiID;                                // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionSecondCheckID_Baka;                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionSecondCheckID_Ningen;                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionSecondCheckID_Kami;                          // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionTextID;                                      // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortNo;                                            // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionCategory                           ActionCategory;                                    // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteField;                                     // 0x005D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteBattle;                                    // 0x005E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteWeaponNot;                                 // 0x005F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteWeaponSwd;                                 // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteWeaponDgr;                                 // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteWeaponAxe;                                 // 0x0062(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteWeaponStk;                                 // 0x0063(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteWeaponBoo;                                 // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteWeaponTsw;                                 // 0x0065(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteWeaponSpr;                                 // 0x0066(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteWeaponRod;                                 // 0x0067(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteWeaponClw;                                 // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteWeaponWhp;                                 // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteWeaponShi;                                 // 0x006A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B[0x1];                                       // 0x006B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UseMP;                                             // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddZonePoint;                                      // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceToTarget;                                  // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssistFowardJump;                                 // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotationToTarget;                                 // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotationDurationTimeByFreeCamera;                  // 0x007C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShotReservedMoveDistanceToTarget;                  // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenWeaponByActionCamera;                       // 0x0084(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalidBackJumpBySimpleCamera;                    // 0x0085(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionTargetType                         Target;                                            // 0x0086(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionExtentTargetType                   ExtentTarget;                                      // 0x0087(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionExtentType                         Extent;                                            // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExtentParam1;                                      // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtentParam2;                                      // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomHit;                                        // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceTargetSelect;                                // 0x0095(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_96[0x2];                                       // 0x0096(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Motion_Cast;                                       // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Motion_Shot;                                       // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Motion_Extensions;                                 // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         Motion_Cast_LoopTime;                              // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Motion_Shot_LoopTime;                              // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionWaitType                           ActionWaitType;                                    // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActionWaitTimeByFreeCamera;                        // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActionWaitTimeBySimpleCamera;                      // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionCriticalType                       CriticalType;                                      // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CriticalHosei;                                     // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackHitStopPresetType                        HitStopPresetType;                                 // 0x00D4(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackHitCameraShakePresetType                 HitCameraShakePresetType;                          // 0x00D5(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6[0x2];                                       // 0x00D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   HitEffectClass;                                    // 0x00D8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              OverlapDamageSE;                                   // 0x00F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ActionEffectClass;                                 // 0x0108(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ActionEffectClass2;                                // 0x0120(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttributeEffectOff;                               // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionCameraID_Player;                             // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionCameraID_Monster;                            // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionIconType                           ActionIconType;                                    // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionTargetIconID;                                // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MonsterRenkeiID;                                   // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalidExecute_Miryou;                            // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMPSyouhiZeroMukou;                                // 0x0169(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMahosute;                                         // 0x016A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJumonHansya;                                      // 0x016B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bYamabiko;                                         // 0x016C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNitouDamage;                                      // 0x016D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionSoundType                          ActionSoundType;                                   // 0x016E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16F[0x1];                                      // 0x016F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EJackActionConsumeCondition>           ActionConsumeConditions;                           // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x0180(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           ReferenceClasses;                                  // 0x0190(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ActionExecClass;                                   // 0x01A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableAction) == 0x000008, "Wrong alignment on FJackDataTableAction");
static_assert(sizeof(FJackDataTableAction) == 0x0001B8, "Wrong size on FJackDataTableAction");
static_assert(offsetof(FJackDataTableAction, DisplayName) == 0x000008, "Member 'FJackDataTableAction::DisplayName' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ActionDamageID) == 0x000010, "Member 'FJackDataTableAction::ActionDamageID' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ActionOddEffectID) == 0x000018, "Member 'FJackDataTableAction::ActionOddEffectID' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ActionMultiAttackID) == 0x000020, "Member 'FJackDataTableAction::ActionMultiAttackID' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ActionHitOrderID) == 0x000028, "Member 'FJackDataTableAction::ActionHitOrderID' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ActionNakamaYobiID) == 0x000030, "Member 'FJackDataTableAction::ActionNakamaYobiID' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ActionSecondCheckID_Baka) == 0x000038, "Member 'FJackDataTableAction::ActionSecondCheckID_Baka' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ActionSecondCheckID_Ningen) == 0x000040, "Member 'FJackDataTableAction::ActionSecondCheckID_Ningen' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ActionSecondCheckID_Kami) == 0x000048, "Member 'FJackDataTableAction::ActionSecondCheckID_Kami' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ActionTextID) == 0x000050, "Member 'FJackDataTableAction::ActionTextID' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, SortNo) == 0x000058, "Member 'FJackDataTableAction::SortNo' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ActionCategory) == 0x00005C, "Member 'FJackDataTableAction::ActionCategory' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bExecuteField) == 0x00005D, "Member 'FJackDataTableAction::bExecuteField' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bExecuteBattle) == 0x00005E, "Member 'FJackDataTableAction::bExecuteBattle' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bExecuteWeaponNot) == 0x00005F, "Member 'FJackDataTableAction::bExecuteWeaponNot' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bExecuteWeaponSwd) == 0x000060, "Member 'FJackDataTableAction::bExecuteWeaponSwd' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bExecuteWeaponDgr) == 0x000061, "Member 'FJackDataTableAction::bExecuteWeaponDgr' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bExecuteWeaponAxe) == 0x000062, "Member 'FJackDataTableAction::bExecuteWeaponAxe' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bExecuteWeaponStk) == 0x000063, "Member 'FJackDataTableAction::bExecuteWeaponStk' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bExecuteWeaponBoo) == 0x000064, "Member 'FJackDataTableAction::bExecuteWeaponBoo' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bExecuteWeaponTsw) == 0x000065, "Member 'FJackDataTableAction::bExecuteWeaponTsw' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bExecuteWeaponSpr) == 0x000066, "Member 'FJackDataTableAction::bExecuteWeaponSpr' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bExecuteWeaponRod) == 0x000067, "Member 'FJackDataTableAction::bExecuteWeaponRod' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bExecuteWeaponClw) == 0x000068, "Member 'FJackDataTableAction::bExecuteWeaponClw' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bExecuteWeaponWhp) == 0x000069, "Member 'FJackDataTableAction::bExecuteWeaponWhp' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bExecuteWeaponShi) == 0x00006A, "Member 'FJackDataTableAction::bExecuteWeaponShi' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, UseMP) == 0x00006C, "Member 'FJackDataTableAction::UseMP' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, AddZonePoint) == 0x000070, "Member 'FJackDataTableAction::AddZonePoint' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, DistanceToTarget) == 0x000074, "Member 'FJackDataTableAction::DistanceToTarget' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bAssistFowardJump) == 0x000078, "Member 'FJackDataTableAction::bAssistFowardJump' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bRotationToTarget) == 0x000079, "Member 'FJackDataTableAction::bRotationToTarget' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, RotationDurationTimeByFreeCamera) == 0x00007C, "Member 'FJackDataTableAction::RotationDurationTimeByFreeCamera' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ShotReservedMoveDistanceToTarget) == 0x000080, "Member 'FJackDataTableAction::ShotReservedMoveDistanceToTarget' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bHiddenWeaponByActionCamera) == 0x000084, "Member 'FJackDataTableAction::bHiddenWeaponByActionCamera' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bInvalidBackJumpBySimpleCamera) == 0x000085, "Member 'FJackDataTableAction::bInvalidBackJumpBySimpleCamera' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, Target) == 0x000086, "Member 'FJackDataTableAction::Target' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ExtentTarget) == 0x000087, "Member 'FJackDataTableAction::ExtentTarget' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, Extent) == 0x000088, "Member 'FJackDataTableAction::Extent' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ExtentParam1) == 0x00008C, "Member 'FJackDataTableAction::ExtentParam1' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ExtentParam2) == 0x000090, "Member 'FJackDataTableAction::ExtentParam2' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bRandomHit) == 0x000094, "Member 'FJackDataTableAction::bRandomHit' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bForceTargetSelect) == 0x000095, "Member 'FJackDataTableAction::bForceTargetSelect' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, Motion_Cast) == 0x000098, "Member 'FJackDataTableAction::Motion_Cast' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, Motion_Shot) == 0x0000A0, "Member 'FJackDataTableAction::Motion_Shot' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, Motion_Extensions) == 0x0000A8, "Member 'FJackDataTableAction::Motion_Extensions' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, Motion_Cast_LoopTime) == 0x0000B8, "Member 'FJackDataTableAction::Motion_Cast_LoopTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, Motion_Shot_LoopTime) == 0x0000BC, "Member 'FJackDataTableAction::Motion_Shot_LoopTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ActionWaitType) == 0x0000C0, "Member 'FJackDataTableAction::ActionWaitType' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ActionWaitTimeByFreeCamera) == 0x0000C4, "Member 'FJackDataTableAction::ActionWaitTimeByFreeCamera' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ActionWaitTimeBySimpleCamera) == 0x0000C8, "Member 'FJackDataTableAction::ActionWaitTimeBySimpleCamera' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, CriticalType) == 0x0000CC, "Member 'FJackDataTableAction::CriticalType' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, CriticalHosei) == 0x0000D0, "Member 'FJackDataTableAction::CriticalHosei' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, HitStopPresetType) == 0x0000D4, "Member 'FJackDataTableAction::HitStopPresetType' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, HitCameraShakePresetType) == 0x0000D5, "Member 'FJackDataTableAction::HitCameraShakePresetType' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, HitEffectClass) == 0x0000D8, "Member 'FJackDataTableAction::HitEffectClass' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, OverlapDamageSE) == 0x0000F0, "Member 'FJackDataTableAction::OverlapDamageSE' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ActionEffectClass) == 0x000108, "Member 'FJackDataTableAction::ActionEffectClass' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ActionEffectClass2) == 0x000120, "Member 'FJackDataTableAction::ActionEffectClass2' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bAttributeEffectOff) == 0x000138, "Member 'FJackDataTableAction::bAttributeEffectOff' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ActionCameraID_Player) == 0x000140, "Member 'FJackDataTableAction::ActionCameraID_Player' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ActionCameraID_Monster) == 0x000148, "Member 'FJackDataTableAction::ActionCameraID_Monster' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ActionIconType) == 0x000150, "Member 'FJackDataTableAction::ActionIconType' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ActionTargetIconID) == 0x000158, "Member 'FJackDataTableAction::ActionTargetIconID' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, MonsterRenkeiID) == 0x000160, "Member 'FJackDataTableAction::MonsterRenkeiID' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bInvalidExecute_Miryou) == 0x000168, "Member 'FJackDataTableAction::bInvalidExecute_Miryou' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bMPSyouhiZeroMukou) == 0x000169, "Member 'FJackDataTableAction::bMPSyouhiZeroMukou' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bMahosute) == 0x00016A, "Member 'FJackDataTableAction::bMahosute' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bJumonHansya) == 0x00016B, "Member 'FJackDataTableAction::bJumonHansya' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bYamabiko) == 0x00016C, "Member 'FJackDataTableAction::bYamabiko' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, bNitouDamage) == 0x00016D, "Member 'FJackDataTableAction::bNitouDamage' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ActionSoundType) == 0x00016E, "Member 'FJackDataTableAction::ActionSoundType' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ActionConsumeConditions) == 0x000170, "Member 'FJackDataTableAction::ActionConsumeConditions' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, Tags) == 0x000180, "Member 'FJackDataTableAction::Tags' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ReferenceClasses) == 0x000190, "Member 'FJackDataTableAction::ReferenceClasses' has a wrong offset!");
static_assert(offsetof(FJackDataTableAction, ActionExecClass) == 0x0001A0, "Member 'FJackDataTableAction::ActionExecClass' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableActionAI
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableActionAI final : public FTableRowBase
{
public:
	class FName                                   ActionID;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RenkeiID;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPlayerAIActionCategory                   CategoryType;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPlayerAIActionControl                    ControlType;                                       // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StrategyFlagGangan;                                // 0x001A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StrategyFlagBattiri;                               // 0x001B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StrategyFlagIroiro;                                // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StrategyFlagInoti;                                 // 0x001D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StrategyFlagMPTukauna;                             // 0x001E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScoreCorrectionFactor;                             // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableActionAI) == 0x000008, "Wrong alignment on FJackDataTableActionAI");
static_assert(sizeof(FJackDataTableActionAI) == 0x000028, "Wrong size on FJackDataTableActionAI");
static_assert(offsetof(FJackDataTableActionAI, ActionID) == 0x000008, "Member 'FJackDataTableActionAI::ActionID' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionAI, RenkeiID) == 0x000010, "Member 'FJackDataTableActionAI::RenkeiID' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionAI, CategoryType) == 0x000018, "Member 'FJackDataTableActionAI::CategoryType' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionAI, ControlType) == 0x000019, "Member 'FJackDataTableActionAI::ControlType' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionAI, StrategyFlagGangan) == 0x00001A, "Member 'FJackDataTableActionAI::StrategyFlagGangan' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionAI, StrategyFlagBattiri) == 0x00001B, "Member 'FJackDataTableActionAI::StrategyFlagBattiri' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionAI, StrategyFlagIroiro) == 0x00001C, "Member 'FJackDataTableActionAI::StrategyFlagIroiro' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionAI, StrategyFlagInoti) == 0x00001D, "Member 'FJackDataTableActionAI::StrategyFlagInoti' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionAI, StrategyFlagMPTukauna) == 0x00001E, "Member 'FJackDataTableActionAI::StrategyFlagMPTukauna' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionAI, ScoreCorrectionFactor) == 0x000020, "Member 'FJackDataTableActionAI::ScoreCorrectionFactor' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotRareHandBonusLottery
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotRareHandBonusLottery final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotRareHandBonusLottery) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotRareHandBonusLottery");
static_assert(sizeof(FJackLDT_MeosiSlotRareHandBonusLottery) == 0x000010, "Wrong size on FJackLDT_MeosiSlotRareHandBonusLottery");

// ScriptStruct JackGame.JackDataTableActionAIEvaluateScoreCheck
// 0x0028 (0x0030 - 0x0008)
struct FJackDataTableActionAIEvaluateScoreCheck final : public FTableRowBase
{
public:
	class FName                                   FunctionName;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param0;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param1;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param2;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param3;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param4;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param5;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param6;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param7;                                            // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableActionAIEvaluateScoreCheck) == 0x000008, "Wrong alignment on FJackDataTableActionAIEvaluateScoreCheck");
static_assert(sizeof(FJackDataTableActionAIEvaluateScoreCheck) == 0x000030, "Wrong size on FJackDataTableActionAIEvaluateScoreCheck");
static_assert(offsetof(FJackDataTableActionAIEvaluateScoreCheck, FunctionName) == 0x000008, "Member 'FJackDataTableActionAIEvaluateScoreCheck::FunctionName' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionAIEvaluateScoreCheck, Param0) == 0x000010, "Member 'FJackDataTableActionAIEvaluateScoreCheck::Param0' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionAIEvaluateScoreCheck, Param1) == 0x000014, "Member 'FJackDataTableActionAIEvaluateScoreCheck::Param1' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionAIEvaluateScoreCheck, Param2) == 0x000018, "Member 'FJackDataTableActionAIEvaluateScoreCheck::Param2' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionAIEvaluateScoreCheck, Param3) == 0x00001C, "Member 'FJackDataTableActionAIEvaluateScoreCheck::Param3' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionAIEvaluateScoreCheck, Param4) == 0x000020, "Member 'FJackDataTableActionAIEvaluateScoreCheck::Param4' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionAIEvaluateScoreCheck, Param5) == 0x000024, "Member 'FJackDataTableActionAIEvaluateScoreCheck::Param5' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionAIEvaluateScoreCheck, Param6) == 0x000028, "Member 'FJackDataTableActionAIEvaluateScoreCheck::Param6' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionAIEvaluateScoreCheck, Param7) == 0x00002C, "Member 'FJackDataTableActionAIEvaluateScoreCheck::Param7' has a wrong offset!");

// ScriptStruct JackGame.JackRigidBodyPhysicsBlendWeightInfo
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x10) FJackRigidBodyPhysicsBlendWeightInfo final
{
public:
	class FName                                   BaseBoneName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseBoneBlendWeight;                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IncrementalBlendWeight;                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x70];                                      // 0x0010(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackRigidBodyPhysicsBlendWeightInfo) == 0x000010, "Wrong alignment on FJackRigidBodyPhysicsBlendWeightInfo");
static_assert(sizeof(FJackRigidBodyPhysicsBlendWeightInfo) == 0x000080, "Wrong size on FJackRigidBodyPhysicsBlendWeightInfo");
static_assert(offsetof(FJackRigidBodyPhysicsBlendWeightInfo, BaseBoneName) == 0x000000, "Member 'FJackRigidBodyPhysicsBlendWeightInfo::BaseBoneName' has a wrong offset!");
static_assert(offsetof(FJackRigidBodyPhysicsBlendWeightInfo, BaseBoneBlendWeight) == 0x000008, "Member 'FJackRigidBodyPhysicsBlendWeightInfo::BaseBoneBlendWeight' has a wrong offset!");
static_assert(offsetof(FJackRigidBodyPhysicsBlendWeightInfo, IncrementalBlendWeight) == 0x00000C, "Member 'FJackRigidBodyPhysicsBlendWeightInfo::IncrementalBlendWeight' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotUnionChallengeState
// 0x0028 (0x0028 - 0x0000)
struct FJackMeosiSlotUnionChallengeState final
{
public:
	EJackMeosiSlotUnionSlime                      UnionSlimeID;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UnionSlimeGameCnt;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnionSlimeFirstNum;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 UnionSlimeKeyTime;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         UnionSlimeNum;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotUnionGameResult                 UnionResult;                                       // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMeosiSlotUnionChallengeState) == 0x000008, "Wrong alignment on FJackMeosiSlotUnionChallengeState");
static_assert(sizeof(FJackMeosiSlotUnionChallengeState) == 0x000028, "Wrong size on FJackMeosiSlotUnionChallengeState");
static_assert(offsetof(FJackMeosiSlotUnionChallengeState, UnionSlimeID) == 0x000000, "Member 'FJackMeosiSlotUnionChallengeState::UnionSlimeID' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotUnionChallengeState, UnionSlimeGameCnt) == 0x000004, "Member 'FJackMeosiSlotUnionChallengeState::UnionSlimeGameCnt' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotUnionChallengeState, UnionSlimeFirstNum) == 0x000008, "Member 'FJackMeosiSlotUnionChallengeState::UnionSlimeFirstNum' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotUnionChallengeState, UnionSlimeKeyTime) == 0x000010, "Member 'FJackMeosiSlotUnionChallengeState::UnionSlimeKeyTime' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotUnionChallengeState, UnionSlimeNum) == 0x000020, "Member 'FJackMeosiSlotUnionChallengeState::UnionSlimeNum' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotUnionChallengeState, UnionResult) == 0x000024, "Member 'FJackMeosiSlotUnionChallengeState::UnionResult' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_ResidentParticle
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ResidentParticle final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ResidentParticle) == 0x000008, "Wrong alignment on FJackLDT_ResidentParticle");
static_assert(sizeof(FJackLDT_ResidentParticle) == 0x000010, "Wrong size on FJackLDT_ResidentParticle");

// ScriptStruct JackGame.JackDataTableFriendCharacterPreset
// 0x00D8 (0x00E0 - 0x0008)
struct FJackDataTableFriendCharacterPreset final : public FTableRowBase
{
public:
	EJackCharacter                                CharacterType;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRejoin;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnorePresetItems;                                // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipRevive;                                       // 0x0012(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipClearZoneInfo;                                // 0x0013(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipClearOddEffect;                               // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipFullRecoverHP;                                // 0x0015(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipFullRecoverMP;                                // 0x0016(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideGambit;                                   // 0x0017(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackGambit                                   OverrideGambit;                                    // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CoordinateID;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Handedness;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Hand;                                              // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Head;                                              // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Body;                                              // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Accessory1;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Accessory2;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Item1;                                             // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Item2;                                             // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Item3;                                             // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Item4;                                             // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Item5;                                             // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Item6;                                             // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TokugiPanelNames;                                  // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           TokugiNames;                                       // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bSScenarioSettings;                                // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSScenario_OverrideGold;                           // 0x00A9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SScenario_Gold;                                    // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SScenario_Items;                                   // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           SScenario_Soubis;                                  // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           SScenario_Daizis;                                  // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableFriendCharacterPreset) == 0x000008, "Wrong alignment on FJackDataTableFriendCharacterPreset");
static_assert(sizeof(FJackDataTableFriendCharacterPreset) == 0x0000E0, "Wrong size on FJackDataTableFriendCharacterPreset");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, CharacterType) == 0x000008, "Member 'FJackDataTableFriendCharacterPreset::CharacterType' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, Level) == 0x00000C, "Member 'FJackDataTableFriendCharacterPreset::Level' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, bRejoin) == 0x000010, "Member 'FJackDataTableFriendCharacterPreset::bRejoin' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, bIgnorePresetItems) == 0x000011, "Member 'FJackDataTableFriendCharacterPreset::bIgnorePresetItems' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, bSkipRevive) == 0x000012, "Member 'FJackDataTableFriendCharacterPreset::bSkipRevive' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, bSkipClearZoneInfo) == 0x000013, "Member 'FJackDataTableFriendCharacterPreset::bSkipClearZoneInfo' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, bSkipClearOddEffect) == 0x000014, "Member 'FJackDataTableFriendCharacterPreset::bSkipClearOddEffect' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, bSkipFullRecoverHP) == 0x000015, "Member 'FJackDataTableFriendCharacterPreset::bSkipFullRecoverHP' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, bSkipFullRecoverMP) == 0x000016, "Member 'FJackDataTableFriendCharacterPreset::bSkipFullRecoverMP' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, bOverrideGambit) == 0x000017, "Member 'FJackDataTableFriendCharacterPreset::bOverrideGambit' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, OverrideGambit) == 0x000018, "Member 'FJackDataTableFriendCharacterPreset::OverrideGambit' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, CoordinateID) == 0x000020, "Member 'FJackDataTableFriendCharacterPreset::CoordinateID' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, Handedness) == 0x000028, "Member 'FJackDataTableFriendCharacterPreset::Handedness' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, Hand) == 0x000030, "Member 'FJackDataTableFriendCharacterPreset::Hand' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, Head) == 0x000038, "Member 'FJackDataTableFriendCharacterPreset::Head' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, Body) == 0x000040, "Member 'FJackDataTableFriendCharacterPreset::Body' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, Accessory1) == 0x000048, "Member 'FJackDataTableFriendCharacterPreset::Accessory1' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, Accessory2) == 0x000050, "Member 'FJackDataTableFriendCharacterPreset::Accessory2' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, Item1) == 0x000058, "Member 'FJackDataTableFriendCharacterPreset::Item1' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, Item2) == 0x000060, "Member 'FJackDataTableFriendCharacterPreset::Item2' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, Item3) == 0x000068, "Member 'FJackDataTableFriendCharacterPreset::Item3' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, Item4) == 0x000070, "Member 'FJackDataTableFriendCharacterPreset::Item4' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, Item5) == 0x000078, "Member 'FJackDataTableFriendCharacterPreset::Item5' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, Item6) == 0x000080, "Member 'FJackDataTableFriendCharacterPreset::Item6' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, TokugiPanelNames) == 0x000088, "Member 'FJackDataTableFriendCharacterPreset::TokugiPanelNames' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, TokugiNames) == 0x000098, "Member 'FJackDataTableFriendCharacterPreset::TokugiNames' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, bSScenarioSettings) == 0x0000A8, "Member 'FJackDataTableFriendCharacterPreset::bSScenarioSettings' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, bSScenario_OverrideGold) == 0x0000A9, "Member 'FJackDataTableFriendCharacterPreset::bSScenario_OverrideGold' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, SScenario_Gold) == 0x0000AC, "Member 'FJackDataTableFriendCharacterPreset::SScenario_Gold' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, SScenario_Items) == 0x0000B0, "Member 'FJackDataTableFriendCharacterPreset::SScenario_Items' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, SScenario_Soubis) == 0x0000C0, "Member 'FJackDataTableFriendCharacterPreset::SScenario_Soubis' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacterPreset, SScenario_Daizis) == 0x0000D0, "Member 'FJackDataTableFriendCharacterPreset::SScenario_Daizis' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotPseudoContinuation
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotPseudoContinuation final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotPseudoContinuation) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotPseudoContinuation");
static_assert(sizeof(FJackLDT_MeosiSlotPseudoContinuation) == 0x000010, "Wrong size on FJackLDT_MeosiSlotPseudoContinuation");

// ScriptStruct JackGame.JackDataTableActionCameraData
// 0x00F0 (0x00F8 - 0x0008)
struct FJackDataTableActionCameraData final : public FTableRowBase
{
public:
	EJackBattleActionCameraAtCategory             AttackerTarget;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionCameraAtCategory             DefenderTarget;                                    // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionCameraTimingCategory         TrackingStopCategory;                              // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TrackingStopTime;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionCameraHiddenCharacterCategory HiddenCharacterCategory;                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionCameraLengthAdjustCategory   LengthAdjustCategory;                              // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LimitSelection;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                SelectCharacter;                                   // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SelectMonsterID;                                   // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelectLengthAdjust;                                // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionCameraEyeLocationCategory    EyeLocationCategory;                               // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttackerSocketName;                                // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefenderSocketName;                                // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeInterpTime;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AtInterpTime;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OtherInterpTime;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionCameraLoopCategory           LoopParam;                                         // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSystemUse;                                        // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NextCamera1;                                       // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EJackBattleActionCameraPlayConditions         PlayConditions1;                                   // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NextCameraStartTime1;                              // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextCameraInterpTime1;                             // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ActionCameraInfos1;                                // 0x0078(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActionCameraInfos2;                                // 0x0088(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActionCameraInfos3;                                // 0x0098(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActionCameraInfos4;                                // 0x00A8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActionCameraInfos5;                                // 0x00B8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActionCameraInfos6;                                // 0x00C8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActionCameraInfos7;                                // 0x00D8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActionCameraInfos8;                                // 0x00E8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableActionCameraData) == 0x000008, "Wrong alignment on FJackDataTableActionCameraData");
static_assert(sizeof(FJackDataTableActionCameraData) == 0x0000F8, "Wrong size on FJackDataTableActionCameraData");
static_assert(offsetof(FJackDataTableActionCameraData, AttackerTarget) == 0x000008, "Member 'FJackDataTableActionCameraData::AttackerTarget' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, DefenderTarget) == 0x000009, "Member 'FJackDataTableActionCameraData::DefenderTarget' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, TrackingStopCategory) == 0x00000A, "Member 'FJackDataTableActionCameraData::TrackingStopCategory' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, TrackingStopTime) == 0x00000C, "Member 'FJackDataTableActionCameraData::TrackingStopTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, HiddenCharacterCategory) == 0x000010, "Member 'FJackDataTableActionCameraData::HiddenCharacterCategory' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, LengthAdjustCategory) == 0x000011, "Member 'FJackDataTableActionCameraData::LengthAdjustCategory' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, LimitSelection) == 0x000014, "Member 'FJackDataTableActionCameraData::LimitSelection' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, SelectCharacter) == 0x000018, "Member 'FJackDataTableActionCameraData::SelectCharacter' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, SelectMonsterID) == 0x000020, "Member 'FJackDataTableActionCameraData::SelectMonsterID' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, SelectLengthAdjust) == 0x000028, "Member 'FJackDataTableActionCameraData::SelectLengthAdjust' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, EyeLocationCategory) == 0x00002C, "Member 'FJackDataTableActionCameraData::EyeLocationCategory' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, AttackerSocketName) == 0x000030, "Member 'FJackDataTableActionCameraData::AttackerSocketName' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, DefenderSocketName) == 0x000038, "Member 'FJackDataTableActionCameraData::DefenderSocketName' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, EyeInterpTime) == 0x000040, "Member 'FJackDataTableActionCameraData::EyeInterpTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, AtInterpTime) == 0x000044, "Member 'FJackDataTableActionCameraData::AtInterpTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, OtherInterpTime) == 0x000048, "Member 'FJackDataTableActionCameraData::OtherInterpTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, EndTime) == 0x00004C, "Member 'FJackDataTableActionCameraData::EndTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, LoopParam) == 0x000050, "Member 'FJackDataTableActionCameraData::LoopParam' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, bSystemUse) == 0x000051, "Member 'FJackDataTableActionCameraData::bSystemUse' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, NextCamera1) == 0x000058, "Member 'FJackDataTableActionCameraData::NextCamera1' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, PlayConditions1) == 0x000068, "Member 'FJackDataTableActionCameraData::PlayConditions1' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, NextCameraStartTime1) == 0x00006C, "Member 'FJackDataTableActionCameraData::NextCameraStartTime1' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, NextCameraInterpTime1) == 0x000070, "Member 'FJackDataTableActionCameraData::NextCameraInterpTime1' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, ActionCameraInfos1) == 0x000078, "Member 'FJackDataTableActionCameraData::ActionCameraInfos1' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, ActionCameraInfos2) == 0x000088, "Member 'FJackDataTableActionCameraData::ActionCameraInfos2' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, ActionCameraInfos3) == 0x000098, "Member 'FJackDataTableActionCameraData::ActionCameraInfos3' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, ActionCameraInfos4) == 0x0000A8, "Member 'FJackDataTableActionCameraData::ActionCameraInfos4' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, ActionCameraInfos5) == 0x0000B8, "Member 'FJackDataTableActionCameraData::ActionCameraInfos5' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, ActionCameraInfos6) == 0x0000C8, "Member 'FJackDataTableActionCameraData::ActionCameraInfos6' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, ActionCameraInfos7) == 0x0000D8, "Member 'FJackDataTableActionCameraData::ActionCameraInfos7' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionCameraData, ActionCameraInfos8) == 0x0000E8, "Member 'FJackDataTableActionCameraData::ActionCameraInfos8' has a wrong offset!");

// ScriptStruct JackGame.JackFieldAICommand_Raid
// 0x0008 (0x0018 - 0x0010)
struct FJackFieldAICommand_Raid final : public FJackCommand
{
public:
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackFieldAICommand_Raid) == 0x000008, "Wrong alignment on FJackFieldAICommand_Raid");
static_assert(sizeof(FJackFieldAICommand_Raid) == 0x000018, "Wrong size on FJackFieldAICommand_Raid");

// ScriptStruct JackGame.JackDataTableActionHitOrder
// 0x0028 (0x0030 - 0x0008)
struct FJackDataTableActionHitOrder final : public FTableRowBase
{
public:
	EJackActionHitOrderType                       HitOrderType;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPriorityTarget;                                   // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Interval_01;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval_02;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval_03;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval_04;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval_05;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval_06;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval_07;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval_08;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableActionHitOrder) == 0x000008, "Wrong alignment on FJackDataTableActionHitOrder");
static_assert(sizeof(FJackDataTableActionHitOrder) == 0x000030, "Wrong size on FJackDataTableActionHitOrder");
static_assert(offsetof(FJackDataTableActionHitOrder, HitOrderType) == 0x000008, "Member 'FJackDataTableActionHitOrder::HitOrderType' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionHitOrder, bPriorityTarget) == 0x000009, "Member 'FJackDataTableActionHitOrder::bPriorityTarget' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionHitOrder, Interval_01) == 0x00000C, "Member 'FJackDataTableActionHitOrder::Interval_01' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionHitOrder, Interval_02) == 0x000010, "Member 'FJackDataTableActionHitOrder::Interval_02' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionHitOrder, Interval_03) == 0x000014, "Member 'FJackDataTableActionHitOrder::Interval_03' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionHitOrder, Interval_04) == 0x000018, "Member 'FJackDataTableActionHitOrder::Interval_04' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionHitOrder, Interval_05) == 0x00001C, "Member 'FJackDataTableActionHitOrder::Interval_05' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionHitOrder, Interval_06) == 0x000020, "Member 'FJackDataTableActionHitOrder::Interval_06' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionHitOrder, Interval_07) == 0x000024, "Member 'FJackDataTableActionHitOrder::Interval_07' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionHitOrder, Interval_08) == 0x000028, "Member 'FJackDataTableActionHitOrder::Interval_08' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableActionNakamaYobi
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableActionNakamaYobi final : public FTableRowBase
{
public:
	EJackNakamaYobiSpawnLocationType              SpawnLocationType;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SpawnLocationParameter;                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJackActionNakamaYobiInfo>      ZouenMonsterInfos;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableActionNakamaYobi) == 0x000008, "Wrong alignment on FJackDataTableActionNakamaYobi");
static_assert(sizeof(FJackDataTableActionNakamaYobi) == 0x000028, "Wrong size on FJackDataTableActionNakamaYobi");
static_assert(offsetof(FJackDataTableActionNakamaYobi, SpawnLocationType) == 0x000008, "Member 'FJackDataTableActionNakamaYobi::SpawnLocationType' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionNakamaYobi, SpawnLocationParameter) == 0x000010, "Member 'FJackDataTableActionNakamaYobi::SpawnLocationParameter' has a wrong offset!");
static_assert(offsetof(FJackDataTableActionNakamaYobi, ZouenMonsterInfos) == 0x000018, "Member 'FJackDataTableActionNakamaYobi::ZouenMonsterInfos' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_PartyTalkData_A130
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_A130 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_A130) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_A130");
static_assert(sizeof(FJackLDT_PartyTalkData_A130) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_A130");

// ScriptStruct JackGame.JackDataTableAnimMontage
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableAnimMontage final : public FTableRowBase
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslationMultiplier;                             // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableAnimMontage) == 0x000008, "Wrong alignment on FJackDataTableAnimMontage");
static_assert(sizeof(FJackDataTableAnimMontage) == 0x000020, "Wrong size on FJackDataTableAnimMontage");
static_assert(offsetof(FJackDataTableAnimMontage, AnimMontage) == 0x000008, "Member 'FJackDataTableAnimMontage::AnimMontage' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimMontage, BlendInTime) == 0x000010, "Member 'FJackDataTableAnimMontage::BlendInTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimMontage, BlendOutTime) == 0x000014, "Member 'FJackDataTableAnimMontage::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimMontage, TranslationMultiplier) == 0x000018, "Member 'FJackDataTableAnimMontage::TranslationMultiplier' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_PartyTalkData_B020
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_B020 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_B020) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_B020");
static_assert(sizeof(FJackLDT_PartyTalkData_B020) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_B020");

// ScriptStruct JackGame.JackDataTableAnimMontageDynamic
// 0x0028 (0x0030 - 0x0008)
struct FJackDataTableAnimMontageDynamic final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UAnimMontage>            AnimMontage;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslationMultiplier;                             // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableAnimMontageDynamic) == 0x000008, "Wrong alignment on FJackDataTableAnimMontageDynamic");
static_assert(sizeof(FJackDataTableAnimMontageDynamic) == 0x000030, "Wrong size on FJackDataTableAnimMontageDynamic");
static_assert(offsetof(FJackDataTableAnimMontageDynamic, AnimMontage) == 0x000008, "Member 'FJackDataTableAnimMontageDynamic::AnimMontage' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimMontageDynamic, BlendInTime) == 0x000020, "Member 'FJackDataTableAnimMontageDynamic::BlendInTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimMontageDynamic, BlendOutTime) == 0x000024, "Member 'FJackDataTableAnimMontageDynamic::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableAnimMontageDynamic, TranslationMultiplier) == 0x000028, "Member 'FJackDataTableAnimMontageDynamic::TranslationMultiplier' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotSimulationCount
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotSimulationCount final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotSimulationCount) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotSimulationCount");
static_assert(sizeof(FJackLDT_MeosiSlotSimulationCount) == 0x000010, "Wrong size on FJackLDT_MeosiSlotSimulationCount");

// ScriptStruct JackGame.JackDataTableArasuzi
// 0x0138 (0x0140 - 0x0008)
struct FJackDataTableArasuzi final : public FTableRowBase
{
public:
	EJackScenarioID                               ScenarioID;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         No;                                                // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScenarioFlag;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackGameFlagCategory                         SubFlagCategory;                                   // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SubFlagName;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BGMID;                                             // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Play1_Pages;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Play1_Text1;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                Play1_BG1;                                         // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Play1_Text2;                                       // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                Play1_BG2;                                         // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Play1_Text3;                                       // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                Play1_BG3;                                         // 0x0080(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Play1_Text4;                                       // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                Play1_BG4;                                         // 0x00A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Play2_Pages;                                       // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Play2_Text1;                                       // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                Play2_BG1;                                         // 0x00C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Play2_Text2;                                       // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                Play2_BG2;                                         // 0x00E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Play2_Text3;                                       // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                Play2_BG3;                                         // 0x0108(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Play2_Text4;                                       // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                Play2_BG4;                                         // 0x0128(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableArasuzi) == 0x000008, "Wrong alignment on FJackDataTableArasuzi");
static_assert(sizeof(FJackDataTableArasuzi) == 0x000140, "Wrong size on FJackDataTableArasuzi");
static_assert(offsetof(FJackDataTableArasuzi, ScenarioID) == 0x000008, "Member 'FJackDataTableArasuzi::ScenarioID' has a wrong offset!");
static_assert(offsetof(FJackDataTableArasuzi, No) == 0x00000C, "Member 'FJackDataTableArasuzi::No' has a wrong offset!");
static_assert(offsetof(FJackDataTableArasuzi, ScenarioFlag) == 0x000010, "Member 'FJackDataTableArasuzi::ScenarioFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableArasuzi, SubFlagCategory) == 0x000018, "Member 'FJackDataTableArasuzi::SubFlagCategory' has a wrong offset!");
static_assert(offsetof(FJackDataTableArasuzi, SubFlagName) == 0x000020, "Member 'FJackDataTableArasuzi::SubFlagName' has a wrong offset!");
static_assert(offsetof(FJackDataTableArasuzi, BGMID) == 0x000028, "Member 'FJackDataTableArasuzi::BGMID' has a wrong offset!");
static_assert(offsetof(FJackDataTableArasuzi, Play1_Pages) == 0x000030, "Member 'FJackDataTableArasuzi::Play1_Pages' has a wrong offset!");
static_assert(offsetof(FJackDataTableArasuzi, Play1_Text1) == 0x000038, "Member 'FJackDataTableArasuzi::Play1_Text1' has a wrong offset!");
static_assert(offsetof(FJackDataTableArasuzi, Play1_BG1) == 0x000040, "Member 'FJackDataTableArasuzi::Play1_BG1' has a wrong offset!");
static_assert(offsetof(FJackDataTableArasuzi, Play1_Text2) == 0x000058, "Member 'FJackDataTableArasuzi::Play1_Text2' has a wrong offset!");
static_assert(offsetof(FJackDataTableArasuzi, Play1_BG2) == 0x000060, "Member 'FJackDataTableArasuzi::Play1_BG2' has a wrong offset!");
static_assert(offsetof(FJackDataTableArasuzi, Play1_Text3) == 0x000078, "Member 'FJackDataTableArasuzi::Play1_Text3' has a wrong offset!");
static_assert(offsetof(FJackDataTableArasuzi, Play1_BG3) == 0x000080, "Member 'FJackDataTableArasuzi::Play1_BG3' has a wrong offset!");
static_assert(offsetof(FJackDataTableArasuzi, Play1_Text4) == 0x000098, "Member 'FJackDataTableArasuzi::Play1_Text4' has a wrong offset!");
static_assert(offsetof(FJackDataTableArasuzi, Play1_BG4) == 0x0000A0, "Member 'FJackDataTableArasuzi::Play1_BG4' has a wrong offset!");
static_assert(offsetof(FJackDataTableArasuzi, Play2_Pages) == 0x0000B8, "Member 'FJackDataTableArasuzi::Play2_Pages' has a wrong offset!");
static_assert(offsetof(FJackDataTableArasuzi, Play2_Text1) == 0x0000C0, "Member 'FJackDataTableArasuzi::Play2_Text1' has a wrong offset!");
static_assert(offsetof(FJackDataTableArasuzi, Play2_BG1) == 0x0000C8, "Member 'FJackDataTableArasuzi::Play2_BG1' has a wrong offset!");
static_assert(offsetof(FJackDataTableArasuzi, Play2_Text2) == 0x0000E0, "Member 'FJackDataTableArasuzi::Play2_Text2' has a wrong offset!");
static_assert(offsetof(FJackDataTableArasuzi, Play2_BG2) == 0x0000E8, "Member 'FJackDataTableArasuzi::Play2_BG2' has a wrong offset!");
static_assert(offsetof(FJackDataTableArasuzi, Play2_Text3) == 0x000100, "Member 'FJackDataTableArasuzi::Play2_Text3' has a wrong offset!");
static_assert(offsetof(FJackDataTableArasuzi, Play2_BG3) == 0x000108, "Member 'FJackDataTableArasuzi::Play2_BG3' has a wrong offset!");
static_assert(offsetof(FJackDataTableArasuzi, Play2_Text4) == 0x000120, "Member 'FJackDataTableArasuzi::Play2_Text4' has a wrong offset!");
static_assert(offsetof(FJackDataTableArasuzi, Play2_BG4) == 0x000128, "Member 'FJackDataTableArasuzi::Play2_BG4' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotVariableStateParam
// 0x0068 (0x0068 - 0x0000)
struct FJackMeosiSlotVariableStateParam final
{
public:
	EJackMeosiSlotSettingValue                    SettingValue;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBonusEstablished;                               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSpecialBonusRising;                             // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLatent;                                         // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LatentPeriod;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotInternalProbabilityStatus       InternalProbabilityStatus;                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumGame;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumTotalGame;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumKilledEnemy;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CeilingValue;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumOrb;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumFeed;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBonusStock;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBigBonusTimes;                                  // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSpecialBonusTimes;                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 PartyMonsterId;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 LotteriedHsHandCount;                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 StopedHsHandCount;                                 // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMeosiSlotVariableStateParam) == 0x000008, "Wrong alignment on FJackMeosiSlotVariableStateParam");
static_assert(sizeof(FJackMeosiSlotVariableStateParam) == 0x000068, "Wrong size on FJackMeosiSlotVariableStateParam");
static_assert(offsetof(FJackMeosiSlotVariableStateParam, SettingValue) == 0x000000, "Member 'FJackMeosiSlotVariableStateParam::SettingValue' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotVariableStateParam, bIsBonusEstablished) == 0x000001, "Member 'FJackMeosiSlotVariableStateParam::bIsBonusEstablished' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotVariableStateParam, bIsSpecialBonusRising) == 0x000002, "Member 'FJackMeosiSlotVariableStateParam::bIsSpecialBonusRising' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotVariableStateParam, bIsLatent) == 0x000003, "Member 'FJackMeosiSlotVariableStateParam::bIsLatent' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotVariableStateParam, LatentPeriod) == 0x000004, "Member 'FJackMeosiSlotVariableStateParam::LatentPeriod' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotVariableStateParam, InternalProbabilityStatus) == 0x000008, "Member 'FJackMeosiSlotVariableStateParam::InternalProbabilityStatus' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotVariableStateParam, NumGame) == 0x00000C, "Member 'FJackMeosiSlotVariableStateParam::NumGame' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotVariableStateParam, NumTotalGame) == 0x000010, "Member 'FJackMeosiSlotVariableStateParam::NumTotalGame' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotVariableStateParam, NumKilledEnemy) == 0x000014, "Member 'FJackMeosiSlotVariableStateParam::NumKilledEnemy' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotVariableStateParam, CeilingValue) == 0x000018, "Member 'FJackMeosiSlotVariableStateParam::CeilingValue' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotVariableStateParam, Level) == 0x00001C, "Member 'FJackMeosiSlotVariableStateParam::Level' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotVariableStateParam, NumOrb) == 0x000020, "Member 'FJackMeosiSlotVariableStateParam::NumOrb' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotVariableStateParam, NumFeed) == 0x000024, "Member 'FJackMeosiSlotVariableStateParam::NumFeed' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotVariableStateParam, NumBonusStock) == 0x000028, "Member 'FJackMeosiSlotVariableStateParam::NumBonusStock' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotVariableStateParam, NumBigBonusTimes) == 0x00002C, "Member 'FJackMeosiSlotVariableStateParam::NumBigBonusTimes' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotVariableStateParam, NumSpecialBonusTimes) == 0x000030, "Member 'FJackMeosiSlotVariableStateParam::NumSpecialBonusTimes' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotVariableStateParam, PartyMonsterId) == 0x000038, "Member 'FJackMeosiSlotVariableStateParam::PartyMonsterId' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotVariableStateParam, LotteriedHsHandCount) == 0x000048, "Member 'FJackMeosiSlotVariableStateParam::LotteriedHsHandCount' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotVariableStateParam, StopedHsHandCount) == 0x000058, "Member 'FJackMeosiSlotVariableStateParam::StopedHsHandCount' has a wrong offset!");

// ScriptStruct JackGame.JackArasuziPageData
// 0x0028 (0x0028 - 0x0000)
struct FJackArasuziPageData final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                BG;                                                // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackArasuziPageData) == 0x000008, "Wrong alignment on FJackArasuziPageData");
static_assert(sizeof(FJackArasuziPageData) == 0x000028, "Wrong size on FJackArasuziPageData");
static_assert(offsetof(FJackArasuziPageData, Text) == 0x000000, "Member 'FJackArasuziPageData::Text' has a wrong offset!");
static_assert(offsetof(FJackArasuziPageData, BG) == 0x000010, "Member 'FJackArasuziPageData::BG' has a wrong offset!");

// ScriptStruct JackGame.JackArasuziData
// 0x0028 (0x0028 - 0x0000)
struct FJackArasuziData final
{
public:
	class FName                                   ArasuziDataID;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BGMID;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackScenarioPlaythrough                      Playthrough;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackArasuziPageData>           PageDataList;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackArasuziData) == 0x000008, "Wrong alignment on FJackArasuziData");
static_assert(sizeof(FJackArasuziData) == 0x000028, "Wrong size on FJackArasuziData");
static_assert(offsetof(FJackArasuziData, ArasuziDataID) == 0x000000, "Member 'FJackArasuziData::ArasuziDataID' has a wrong offset!");
static_assert(offsetof(FJackArasuziData, BGMID) == 0x000008, "Member 'FJackArasuziData::BGMID' has a wrong offset!");
static_assert(offsetof(FJackArasuziData, Playthrough) == 0x000010, "Member 'FJackArasuziData::Playthrough' has a wrong offset!");
static_assert(offsetof(FJackArasuziData, PageDataList) == 0x000018, "Member 'FJackArasuziData::PageDataList' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_LevelUp_P011
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_LevelUp_P011 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_LevelUp_P011) == 0x000008, "Wrong alignment on FJackLDT_LevelUp_P011");
static_assert(sizeof(FJackLDT_LevelUp_P011) == 0x000010, "Wrong size on FJackLDT_LevelUp_P011");

// ScriptStruct JackGame.JackLDT_MiniGameJackPotTowerRate
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MiniGameJackPotTowerRate final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MiniGameJackPotTowerRate) == 0x000008, "Wrong alignment on FJackLDT_MiniGameJackPotTowerRate");
static_assert(sizeof(FJackLDT_MiniGameJackPotTowerRate) == 0x000010, "Wrong size on FJackLDT_MiniGameJackPotTowerRate");

// ScriptStruct JackGame.JackDataTableItemArticleInfo
// 0x0008 (0x0098 - 0x0090)
struct FJackDataTableItemArticleInfo final : public FJackDataTableArticleInfo
{
public:
	int32                                         PhoneticNo;                                        // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableItemArticleInfo) == 0x000008, "Wrong alignment on FJackDataTableItemArticleInfo");
static_assert(sizeof(FJackDataTableItemArticleInfo) == 0x000098, "Wrong size on FJackDataTableItemArticleInfo");
static_assert(offsetof(FJackDataTableItemArticleInfo, PhoneticNo) == 0x000090, "Member 'FJackDataTableItemArticleInfo::PhoneticNo' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableOddEffect
// 0x00C8 (0x00D0 - 0x0008)
struct FJackDataTableOddEffect final : public FTableRowBase
{
public:
	class FName                                   DisplayName;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleTextName;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SubOddEffectIDs;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   OddEffectTextID;                                   // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackOddEffectCategoryType                    CategoryType;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CategoryPriority;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackOddEffectOverwriteType                   OverwriteType;                                     // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackOddEffectCalcType                        CalcType;                                          // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OddEffectStatusID;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackAttributeParam                           AttributeParamType;                                // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackAttributeParam                           KougekiAttributeParamType;                         // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         KougekiAttributePriority;                          // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackOddEffectApply                           ApplyType;                                         // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackStatusParam                              ApplyStatusParamType;                              // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ApplyValue;                                        // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InvokeParameter_01;                                // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InvokeParameter_02;                                // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InvokeParameter_String;                            // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterRace                              InvokeMonsterRace;                                 // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackOddEffectInvokeTiming                    InvokeTiming;                                      // 0x0069(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InvokeOddEffectID;                                 // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayInvokeParameter;                            // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackReferenceParamTarget                     ReferenceParam_Target;                             // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReferenceParam_BaseMonster;                        // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReferenceParam_BaseMin;                            // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReferenceParam_BaseMax;                            // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackReferenceParam                           ReferenceParam_Reference;                          // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReferenceParam_ReferenceHoseiMin;                  // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReferenceParam_ReferenceHoseiMax;                  // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReferenceParam_Random;                             // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SlideChangeTargetOddEffectSlideID;                 // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlideChangeRank;                                   // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DurationTurn_Min;                                  // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DurationTurn_Max;                                  // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDurationTurn_ClearTurnStart;                      // 0x00B4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDurationTurn_ClearTurnStart_SkipTurn;             // 0x00B5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRootTurnOnly;                                     // 0x00B6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B7[0x1];                                       // 0x00B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExecPriority;                                      // 0x00B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeaponTuikaKouka;                                 // 0x00BC(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultipleEnable;                                   // 0x00BD(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackOddEffectTuyosaDisplayType               TuyosaDisplayType;                                 // 0x00BE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackOddEffectParameterDisplayType            InvokeParameterDisplayType;                        // 0x00BF(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x00C0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableOddEffect) == 0x000008, "Wrong alignment on FJackDataTableOddEffect");
static_assert(sizeof(FJackDataTableOddEffect) == 0x0000D0, "Wrong size on FJackDataTableOddEffect");
static_assert(offsetof(FJackDataTableOddEffect, DisplayName) == 0x000008, "Member 'FJackDataTableOddEffect::DisplayName' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, BattleTextName) == 0x000010, "Member 'FJackDataTableOddEffect::BattleTextName' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, SubOddEffectIDs) == 0x000018, "Member 'FJackDataTableOddEffect::SubOddEffectIDs' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, OddEffectTextID) == 0x000028, "Member 'FJackDataTableOddEffect::OddEffectTextID' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, CategoryType) == 0x000030, "Member 'FJackDataTableOddEffect::CategoryType' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, CategoryPriority) == 0x000034, "Member 'FJackDataTableOddEffect::CategoryPriority' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, OverwriteType) == 0x000038, "Member 'FJackDataTableOddEffect::OverwriteType' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, CalcType) == 0x000039, "Member 'FJackDataTableOddEffect::CalcType' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, OddEffectStatusID) == 0x000040, "Member 'FJackDataTableOddEffect::OddEffectStatusID' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, AttributeParamType) == 0x000048, "Member 'FJackDataTableOddEffect::AttributeParamType' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, KougekiAttributeParamType) == 0x000049, "Member 'FJackDataTableOddEffect::KougekiAttributeParamType' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, KougekiAttributePriority) == 0x00004C, "Member 'FJackDataTableOddEffect::KougekiAttributePriority' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, ApplyType) == 0x000050, "Member 'FJackDataTableOddEffect::ApplyType' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, ApplyStatusParamType) == 0x000051, "Member 'FJackDataTableOddEffect::ApplyStatusParamType' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, ApplyValue) == 0x000054, "Member 'FJackDataTableOddEffect::ApplyValue' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, InvokeParameter_01) == 0x000058, "Member 'FJackDataTableOddEffect::InvokeParameter_01' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, InvokeParameter_02) == 0x00005C, "Member 'FJackDataTableOddEffect::InvokeParameter_02' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, InvokeParameter_String) == 0x000060, "Member 'FJackDataTableOddEffect::InvokeParameter_String' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, InvokeMonsterRace) == 0x000068, "Member 'FJackDataTableOddEffect::InvokeMonsterRace' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, InvokeTiming) == 0x000069, "Member 'FJackDataTableOddEffect::InvokeTiming' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, InvokeOddEffectID) == 0x000070, "Member 'FJackDataTableOddEffect::InvokeOddEffectID' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, DisplayInvokeParameter) == 0x000078, "Member 'FJackDataTableOddEffect::DisplayInvokeParameter' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, ReferenceParam_Target) == 0x00007C, "Member 'FJackDataTableOddEffect::ReferenceParam_Target' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, ReferenceParam_BaseMonster) == 0x000080, "Member 'FJackDataTableOddEffect::ReferenceParam_BaseMonster' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, ReferenceParam_BaseMin) == 0x000084, "Member 'FJackDataTableOddEffect::ReferenceParam_BaseMin' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, ReferenceParam_BaseMax) == 0x000088, "Member 'FJackDataTableOddEffect::ReferenceParam_BaseMax' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, ReferenceParam_Reference) == 0x00008C, "Member 'FJackDataTableOddEffect::ReferenceParam_Reference' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, ReferenceParam_ReferenceHoseiMin) == 0x000090, "Member 'FJackDataTableOddEffect::ReferenceParam_ReferenceHoseiMin' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, ReferenceParam_ReferenceHoseiMax) == 0x000094, "Member 'FJackDataTableOddEffect::ReferenceParam_ReferenceHoseiMax' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, ReferenceParam_Random) == 0x000098, "Member 'FJackDataTableOddEffect::ReferenceParam_Random' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, SlideChangeTargetOddEffectSlideID) == 0x0000A0, "Member 'FJackDataTableOddEffect::SlideChangeTargetOddEffectSlideID' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, SlideChangeRank) == 0x0000A8, "Member 'FJackDataTableOddEffect::SlideChangeRank' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, DurationTurn_Min) == 0x0000AC, "Member 'FJackDataTableOddEffect::DurationTurn_Min' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, DurationTurn_Max) == 0x0000B0, "Member 'FJackDataTableOddEffect::DurationTurn_Max' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, bDurationTurn_ClearTurnStart) == 0x0000B4, "Member 'FJackDataTableOddEffect::bDurationTurn_ClearTurnStart' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, bDurationTurn_ClearTurnStart_SkipTurn) == 0x0000B5, "Member 'FJackDataTableOddEffect::bDurationTurn_ClearTurnStart_SkipTurn' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, bRootTurnOnly) == 0x0000B6, "Member 'FJackDataTableOddEffect::bRootTurnOnly' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, ExecPriority) == 0x0000B8, "Member 'FJackDataTableOddEffect::ExecPriority' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, bWeaponTuikaKouka) == 0x0000BC, "Member 'FJackDataTableOddEffect::bWeaponTuikaKouka' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, bMultipleEnable) == 0x0000BD, "Member 'FJackDataTableOddEffect::bMultipleEnable' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, TuyosaDisplayType) == 0x0000BE, "Member 'FJackDataTableOddEffect::TuyosaDisplayType' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, InvokeParameterDisplayType) == 0x0000BF, "Member 'FJackDataTableOddEffect::InvokeParameterDisplayType' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffect, Tags) == 0x0000C0, "Member 'FJackDataTableOddEffect::Tags' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMiniGameJackPotProbability2
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMiniGameJackPotProbability2 final : public FTableRowBase
{
public:
	float                                         Percent;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMiniGameJackPotProbability2) == 0x000008, "Wrong alignment on FJackDataTableMiniGameJackPotProbability2");
static_assert(sizeof(FJackDataTableMiniGameJackPotProbability2) == 0x000010, "Wrong size on FJackDataTableMiniGameJackPotProbability2");
static_assert(offsetof(FJackDataTableMiniGameJackPotProbability2, Percent) == 0x000008, "Member 'FJackDataTableMiniGameJackPotProbability2::Percent' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_V004_Hair
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_V004_Hair final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_V004_Hair) == 0x000008, "Wrong alignment on FJackLDT_V004_Hair");
static_assert(sizeof(FJackLDT_V004_Hair) == 0x000010, "Wrong size on FJackLDT_V004_Hair");

// ScriptStruct JackGame.JackDataTableAttachedProps
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableAttachedProps final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   Class;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableAttachedProps) == 0x000008, "Wrong alignment on FJackDataTableAttachedProps");
static_assert(sizeof(FJackDataTableAttachedProps) == 0x000028, "Wrong size on FJackDataTableAttachedProps");
static_assert(offsetof(FJackDataTableAttachedProps, Class) == 0x000008, "Member 'FJackDataTableAttachedProps::Class' has a wrong offset!");
static_assert(offsetof(FJackDataTableAttachedProps, SocketName) == 0x000020, "Member 'FJackDataTableAttachedProps::SocketName' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_TextPackDebug
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextPackDebug final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextPackDebug) == 0x000008, "Wrong alignment on FJackLDT_TextPackDebug");
static_assert(sizeof(FJackLDT_TextPackDebug) == 0x000010, "Wrong size on FJackLDT_TextPackDebug");

// ScriptStruct JackGame.JackDataTableFukkatunojumonSettingTable2D
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableFukkatunojumonSettingTable2D final : public FTableRowBase
{
public:
	class FName                                   Category;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value1;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value2;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Cmds;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableFukkatunojumonSettingTable2D) == 0x000008, "Wrong alignment on FJackDataTableFukkatunojumonSettingTable2D");
static_assert(sizeof(FJackDataTableFukkatunojumonSettingTable2D) == 0x000028, "Wrong size on FJackDataTableFukkatunojumonSettingTable2D");
static_assert(offsetof(FJackDataTableFukkatunojumonSettingTable2D, Category) == 0x000008, "Member 'FJackDataTableFukkatunojumonSettingTable2D::Category' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonSettingTable2D, Value1) == 0x000010, "Member 'FJackDataTableFukkatunojumonSettingTable2D::Value1' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonSettingTable2D, Value2) == 0x000014, "Member 'FJackDataTableFukkatunojumonSettingTable2D::Value2' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonSettingTable2D, Cmds) == 0x000018, "Member 'FJackDataTableFukkatunojumonSettingTable2D::Cmds' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableBattleFukidasiText
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableBattleFukidasiText final : public FTableRowBase
{
public:
	TArray<struct FJackBattleFukidasiText>        BattleFukidasiTexts;                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableBattleFukidasiText) == 0x000008, "Wrong alignment on FJackDataTableBattleFukidasiText");
static_assert(sizeof(FJackDataTableBattleFukidasiText) == 0x000018, "Wrong size on FJackDataTableBattleFukidasiText");
static_assert(offsetof(FJackDataTableBattleFukidasiText, BattleFukidasiTexts) == 0x000008, "Member 'FJackDataTableBattleFukidasiText::BattleFukidasiTexts' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableBattleResultMotion
// 0x0040 (0x0048 - 0x0008)
struct FJackDataTableBattleResultMotion final : public FTableRowBase
{
public:
	class FName                                   Start_Flg;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   End_Flg;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                Target;                                            // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                Who1;                                              // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AnimMontage1;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                Who2;                                              // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AnimMontage2;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                Who3;                                              // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AnimMontage3;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableBattleResultMotion) == 0x000008, "Wrong alignment on FJackDataTableBattleResultMotion");
static_assert(sizeof(FJackDataTableBattleResultMotion) == 0x000048, "Wrong size on FJackDataTableBattleResultMotion");
static_assert(offsetof(FJackDataTableBattleResultMotion, Start_Flg) == 0x000008, "Member 'FJackDataTableBattleResultMotion::Start_Flg' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleResultMotion, End_Flg) == 0x000010, "Member 'FJackDataTableBattleResultMotion::End_Flg' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleResultMotion, Target) == 0x000018, "Member 'FJackDataTableBattleResultMotion::Target' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleResultMotion, Who1) == 0x000019, "Member 'FJackDataTableBattleResultMotion::Who1' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleResultMotion, AnimMontage1) == 0x000020, "Member 'FJackDataTableBattleResultMotion::AnimMontage1' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleResultMotion, Who2) == 0x000028, "Member 'FJackDataTableBattleResultMotion::Who2' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleResultMotion, AnimMontage2) == 0x000030, "Member 'FJackDataTableBattleResultMotion::AnimMontage2' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleResultMotion, Who3) == 0x000038, "Member 'FJackDataTableBattleResultMotion::Who3' has a wrong offset!");
static_assert(offsetof(FJackDataTableBattleResultMotion, AnimMontage3) == 0x000040, "Member 'FJackDataTableBattleResultMotion::AnimMontage3' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableBookShelf
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableBookShelf final : public FTableRowBase
{
public:
	class FName                                   CommonGettableItemID;                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableBookShelf) == 0x000008, "Wrong alignment on FJackDataTableBookShelf");
static_assert(sizeof(FJackDataTableBookShelf) == 0x000018, "Wrong size on FJackDataTableBookShelf");
static_assert(offsetof(FJackDataTableBookShelf, CommonGettableItemID) == 0x000008, "Member 'FJackDataTableBookShelf::CommonGettableItemID' has a wrong offset!");
static_assert(offsetof(FJackDataTableBookShelf, TextID) == 0x000010, "Member 'FJackDataTableBookShelf::TextID' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Sim_P005_ParadeFeatherBlack
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_P005_ParadeFeatherBlack final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_P005_ParadeFeatherBlack) == 0x000008, "Wrong alignment on FJackLDT_Sim_P005_ParadeFeatherBlack");
static_assert(sizeof(FJackLDT_Sim_P005_ParadeFeatherBlack) == 0x000010, "Wrong size on FJackLDT_Sim_P005_ParadeFeatherBlack");

// ScriptStruct JackGame.JackDataTableBoukenGuide
// 0x0070 (0x0078 - 0x0008)
struct FJackDataTableBoukenGuide final : public FTableRowBase
{
public:
	EJackScenarioID                               ScenarioID;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         No;                                                // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScenarioFlag;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EJackGameFlagCategory>                 SubFlagCategory;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           SubFlagName;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           Item;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<EJackMapIDType>                        MapIDType;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           MapId;                                             // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EJackMapConditionType                         MapCondition;                                      // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomCondition;                                  // 0x0069(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GuideText;                                         // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableBoukenGuide) == 0x000008, "Wrong alignment on FJackDataTableBoukenGuide");
static_assert(sizeof(FJackDataTableBoukenGuide) == 0x000078, "Wrong size on FJackDataTableBoukenGuide");
static_assert(offsetof(FJackDataTableBoukenGuide, ScenarioID) == 0x000008, "Member 'FJackDataTableBoukenGuide::ScenarioID' has a wrong offset!");
static_assert(offsetof(FJackDataTableBoukenGuide, No) == 0x00000C, "Member 'FJackDataTableBoukenGuide::No' has a wrong offset!");
static_assert(offsetof(FJackDataTableBoukenGuide, ScenarioFlag) == 0x000010, "Member 'FJackDataTableBoukenGuide::ScenarioFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableBoukenGuide, SubFlagCategory) == 0x000018, "Member 'FJackDataTableBoukenGuide::SubFlagCategory' has a wrong offset!");
static_assert(offsetof(FJackDataTableBoukenGuide, SubFlagName) == 0x000028, "Member 'FJackDataTableBoukenGuide::SubFlagName' has a wrong offset!");
static_assert(offsetof(FJackDataTableBoukenGuide, Item) == 0x000038, "Member 'FJackDataTableBoukenGuide::Item' has a wrong offset!");
static_assert(offsetof(FJackDataTableBoukenGuide, MapIDType) == 0x000048, "Member 'FJackDataTableBoukenGuide::MapIDType' has a wrong offset!");
static_assert(offsetof(FJackDataTableBoukenGuide, MapId) == 0x000058, "Member 'FJackDataTableBoukenGuide::MapId' has a wrong offset!");
static_assert(offsetof(FJackDataTableBoukenGuide, MapCondition) == 0x000068, "Member 'FJackDataTableBoukenGuide::MapCondition' has a wrong offset!");
static_assert(offsetof(FJackDataTableBoukenGuide, bCustomCondition) == 0x000069, "Member 'FJackDataTableBoukenGuide::bCustomCondition' has a wrong offset!");
static_assert(offsetof(FJackDataTableBoukenGuide, GuideText) == 0x000070, "Member 'FJackDataTableBoukenGuide::GuideText' has a wrong offset!");

// ScriptStruct JackGame.JackEventBattleMonsterInfo
// 0x0024 (0x0024 - 0x0000)
struct FJackEventBattleMonsterInfo final
{
public:
	int32                                         MonsterIndex;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BattleStartLocation;                               // 0x0004(0x000C)(Edit, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BattleStartDirection;                              // 0x0010(0x000C)(Edit, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x8];                                       // 0x001C(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackEventBattleMonsterInfo) == 0x000004, "Wrong alignment on FJackEventBattleMonsterInfo");
static_assert(sizeof(FJackEventBattleMonsterInfo) == 0x000024, "Wrong size on FJackEventBattleMonsterInfo");
static_assert(offsetof(FJackEventBattleMonsterInfo, MonsterIndex) == 0x000000, "Member 'FJackEventBattleMonsterInfo::MonsterIndex' has a wrong offset!");
static_assert(offsetof(FJackEventBattleMonsterInfo, BattleStartLocation) == 0x000004, "Member 'FJackEventBattleMonsterInfo::BattleStartLocation' has a wrong offset!");
static_assert(offsetof(FJackEventBattleMonsterInfo, BattleStartDirection) == 0x000010, "Member 'FJackEventBattleMonsterInfo::BattleStartDirection' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_N001_MaxOrMinRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_N001_MaxOrMinRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_N001_MaxOrMinRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_N001_MaxOrMinRot");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_N001_MaxOrMinRot) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_N001_MaxOrMinRot");

// ScriptStruct JackGame.JackDataTableCharacterMaterialUpdater
// 0x00C0 (0x00C8 - 0x0008)
struct FJackDataTableCharacterMaterialUpdater final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UCurveBase>              CurveAsset;                                        // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveTimeScale;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UCurveBase>              LoopCurveAsset;                                    // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopCurveTimeScale;                                // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UCurveBase>              EndCurveAsset;                                     // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndCurveTimeScale;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OriginalEmissiveColorR;                            // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OriginalEmissiveColorG;                            // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OriginalEmissiveColorB;                            // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveEmissiveColorR;                            // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveEmissiveColorG;                            // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveEmissiveColorB;                            // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveEmissiveFalloff;                           // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveEmissiveScale;                             // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseColorR;                                        // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseColorG;                                        // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseColorB;                                        // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LitColorR;                                         // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LitColorG;                                         // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LitColorB;                                         // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LitDirectionX;                                     // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LitDirectionY;                                     // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LitDirectionZ;                                     // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LitFalloff;                                        // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LitScale;                                          // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOriginalEmissiveColorR;                           // 0x00B4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOriginalEmissiveColorG;                           // 0x00B5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOriginalEmissiveColorB;                           // 0x00B6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdditiveEmissiveColorR;                           // 0x00B7(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdditiveEmissiveColorG;                           // 0x00B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdditiveEmissiveColorB;                           // 0x00B9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdditiveEmissiveFalloff;                          // 0x00BA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdditiveEmissiveScale;                            // 0x00BB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBaseColorR;                                       // 0x00BC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBaseColorG;                                       // 0x00BD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBaseColorB;                                       // 0x00BE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLitColorR;                                        // 0x00BF(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLitColorG;                                        // 0x00C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLitColorB;                                        // 0x00C1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLitDirectionX;                                    // 0x00C2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLitDirectionY;                                    // 0x00C3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLitDirectionZ;                                    // 0x00C4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLitFalloff;                                       // 0x00C5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLitScale;                                         // 0x00C6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C7[0x1];                                       // 0x00C7(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableCharacterMaterialUpdater) == 0x000008, "Wrong alignment on FJackDataTableCharacterMaterialUpdater");
static_assert(sizeof(FJackDataTableCharacterMaterialUpdater) == 0x0000C8, "Wrong size on FJackDataTableCharacterMaterialUpdater");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, CurveAsset) == 0x000008, "Member 'FJackDataTableCharacterMaterialUpdater::CurveAsset' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, CurveTimeScale) == 0x000020, "Member 'FJackDataTableCharacterMaterialUpdater::CurveTimeScale' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, LoopCurveAsset) == 0x000028, "Member 'FJackDataTableCharacterMaterialUpdater::LoopCurveAsset' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, LoopCurveTimeScale) == 0x000040, "Member 'FJackDataTableCharacterMaterialUpdater::LoopCurveTimeScale' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, EndCurveAsset) == 0x000048, "Member 'FJackDataTableCharacterMaterialUpdater::EndCurveAsset' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, EndCurveTimeScale) == 0x000060, "Member 'FJackDataTableCharacterMaterialUpdater::EndCurveTimeScale' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, Priority) == 0x000064, "Member 'FJackDataTableCharacterMaterialUpdater::Priority' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, OriginalEmissiveColorR) == 0x000068, "Member 'FJackDataTableCharacterMaterialUpdater::OriginalEmissiveColorR' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, OriginalEmissiveColorG) == 0x00006C, "Member 'FJackDataTableCharacterMaterialUpdater::OriginalEmissiveColorG' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, OriginalEmissiveColorB) == 0x000070, "Member 'FJackDataTableCharacterMaterialUpdater::OriginalEmissiveColorB' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, AdditiveEmissiveColorR) == 0x000074, "Member 'FJackDataTableCharacterMaterialUpdater::AdditiveEmissiveColorR' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, AdditiveEmissiveColorG) == 0x000078, "Member 'FJackDataTableCharacterMaterialUpdater::AdditiveEmissiveColorG' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, AdditiveEmissiveColorB) == 0x00007C, "Member 'FJackDataTableCharacterMaterialUpdater::AdditiveEmissiveColorB' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, AdditiveEmissiveFalloff) == 0x000080, "Member 'FJackDataTableCharacterMaterialUpdater::AdditiveEmissiveFalloff' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, AdditiveEmissiveScale) == 0x000084, "Member 'FJackDataTableCharacterMaterialUpdater::AdditiveEmissiveScale' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, BaseColorR) == 0x000088, "Member 'FJackDataTableCharacterMaterialUpdater::BaseColorR' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, BaseColorG) == 0x00008C, "Member 'FJackDataTableCharacterMaterialUpdater::BaseColorG' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, BaseColorB) == 0x000090, "Member 'FJackDataTableCharacterMaterialUpdater::BaseColorB' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, LitColorR) == 0x000094, "Member 'FJackDataTableCharacterMaterialUpdater::LitColorR' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, LitColorG) == 0x000098, "Member 'FJackDataTableCharacterMaterialUpdater::LitColorG' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, LitColorB) == 0x00009C, "Member 'FJackDataTableCharacterMaterialUpdater::LitColorB' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, LitDirectionX) == 0x0000A0, "Member 'FJackDataTableCharacterMaterialUpdater::LitDirectionX' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, LitDirectionY) == 0x0000A4, "Member 'FJackDataTableCharacterMaterialUpdater::LitDirectionY' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, LitDirectionZ) == 0x0000A8, "Member 'FJackDataTableCharacterMaterialUpdater::LitDirectionZ' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, LitFalloff) == 0x0000AC, "Member 'FJackDataTableCharacterMaterialUpdater::LitFalloff' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, LitScale) == 0x0000B0, "Member 'FJackDataTableCharacterMaterialUpdater::LitScale' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, bOriginalEmissiveColorR) == 0x0000B4, "Member 'FJackDataTableCharacterMaterialUpdater::bOriginalEmissiveColorR' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, bOriginalEmissiveColorG) == 0x0000B5, "Member 'FJackDataTableCharacterMaterialUpdater::bOriginalEmissiveColorG' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, bOriginalEmissiveColorB) == 0x0000B6, "Member 'FJackDataTableCharacterMaterialUpdater::bOriginalEmissiveColorB' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, bAdditiveEmissiveColorR) == 0x0000B7, "Member 'FJackDataTableCharacterMaterialUpdater::bAdditiveEmissiveColorR' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, bAdditiveEmissiveColorG) == 0x0000B8, "Member 'FJackDataTableCharacterMaterialUpdater::bAdditiveEmissiveColorG' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, bAdditiveEmissiveColorB) == 0x0000B9, "Member 'FJackDataTableCharacterMaterialUpdater::bAdditiveEmissiveColorB' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, bAdditiveEmissiveFalloff) == 0x0000BA, "Member 'FJackDataTableCharacterMaterialUpdater::bAdditiveEmissiveFalloff' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, bAdditiveEmissiveScale) == 0x0000BB, "Member 'FJackDataTableCharacterMaterialUpdater::bAdditiveEmissiveScale' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, bBaseColorR) == 0x0000BC, "Member 'FJackDataTableCharacterMaterialUpdater::bBaseColorR' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, bBaseColorG) == 0x0000BD, "Member 'FJackDataTableCharacterMaterialUpdater::bBaseColorG' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, bBaseColorB) == 0x0000BE, "Member 'FJackDataTableCharacterMaterialUpdater::bBaseColorB' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, bLitColorR) == 0x0000BF, "Member 'FJackDataTableCharacterMaterialUpdater::bLitColorR' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, bLitColorG) == 0x0000C0, "Member 'FJackDataTableCharacterMaterialUpdater::bLitColorG' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, bLitColorB) == 0x0000C1, "Member 'FJackDataTableCharacterMaterialUpdater::bLitColorB' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, bLitDirectionX) == 0x0000C2, "Member 'FJackDataTableCharacterMaterialUpdater::bLitDirectionX' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, bLitDirectionY) == 0x0000C3, "Member 'FJackDataTableCharacterMaterialUpdater::bLitDirectionY' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, bLitDirectionZ) == 0x0000C4, "Member 'FJackDataTableCharacterMaterialUpdater::bLitDirectionZ' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, bLitFalloff) == 0x0000C5, "Member 'FJackDataTableCharacterMaterialUpdater::bLitFalloff' has a wrong offset!");
static_assert(offsetof(FJackDataTableCharacterMaterialUpdater, bLitScale) == 0x0000C6, "Member 'FJackDataTableCharacterMaterialUpdater::bLitScale' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableCoinShop
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableCoinShop final : public FTableRowBase
{
public:
	class FString                                 TalkTypeID;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExchangeGold;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableCoinShop) == 0x000008, "Wrong alignment on FJackDataTableCoinShop");
static_assert(sizeof(FJackDataTableCoinShop) == 0x000020, "Wrong size on FJackDataTableCoinShop");
static_assert(offsetof(FJackDataTableCoinShop, TalkTypeID) == 0x000008, "Member 'FJackDataTableCoinShop::TalkTypeID' has a wrong offset!");
static_assert(offsetof(FJackDataTableCoinShop, ExchangeGold) == 0x000018, "Member 'FJackDataTableCoinShop::ExchangeGold' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableCollideSoundTable
// 0x0360 (0x0368 - 0x0008)
struct FJackDataTableCollideSoundTable final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USoundBase>              Default;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Earth;                                             // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              EarthDry;                                          // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Mud;                                               // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Stone;                                             // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Wood;                                              // 0x0080(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              WoodBoard;                                         // 0x0098(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              WoodDamaged;                                       // 0x00B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              WoodThick;                                         // 0x00C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SuspensionBridge;                                  // 0x00E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SandStone;                                         // 0x00F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Sand;                                              // 0x0110(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Gravel;                                            // 0x0128(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              BurntSand;                                         // 0x0140(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Water;                                             // 0x0158(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Shallow;                                           // 0x0170(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              OceanFloor;                                        // 0x0188(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Snow;                                              // 0x01A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Ice;                                               // 0x01B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Grass;                                             // 0x01D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Leaf;                                              // 0x01E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Straw;                                             // 0x0200(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              BrownGrass;                                        // 0x0218(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Cloth;                                             // 0x0230(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              ClothThick;                                        // 0x0248(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Metal;                                             // 0x0260(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Coin;                                              // 0x0278(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Flesh;                                             // 0x0290(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Ladder;                                            // 0x02A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Rope;                                              // 0x02C0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Poison;                                            // 0x02D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Lava;                                              // 0x02F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Ivy;                                               // 0x0308(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Barrier;                                           // 0x0320(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              ColdLava;                                          // 0x0338(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              CleftLava;                                         // 0x0350(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableCollideSoundTable) == 0x000008, "Wrong alignment on FJackDataTableCollideSoundTable");
static_assert(sizeof(FJackDataTableCollideSoundTable) == 0x000368, "Wrong size on FJackDataTableCollideSoundTable");
static_assert(offsetof(FJackDataTableCollideSoundTable, Default) == 0x000008, "Member 'FJackDataTableCollideSoundTable::Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, Earth) == 0x000020, "Member 'FJackDataTableCollideSoundTable::Earth' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, EarthDry) == 0x000038, "Member 'FJackDataTableCollideSoundTable::EarthDry' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, Mud) == 0x000050, "Member 'FJackDataTableCollideSoundTable::Mud' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, Stone) == 0x000068, "Member 'FJackDataTableCollideSoundTable::Stone' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, Wood) == 0x000080, "Member 'FJackDataTableCollideSoundTable::Wood' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, WoodBoard) == 0x000098, "Member 'FJackDataTableCollideSoundTable::WoodBoard' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, WoodDamaged) == 0x0000B0, "Member 'FJackDataTableCollideSoundTable::WoodDamaged' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, WoodThick) == 0x0000C8, "Member 'FJackDataTableCollideSoundTable::WoodThick' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, SuspensionBridge) == 0x0000E0, "Member 'FJackDataTableCollideSoundTable::SuspensionBridge' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, SandStone) == 0x0000F8, "Member 'FJackDataTableCollideSoundTable::SandStone' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, Sand) == 0x000110, "Member 'FJackDataTableCollideSoundTable::Sand' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, Gravel) == 0x000128, "Member 'FJackDataTableCollideSoundTable::Gravel' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, BurntSand) == 0x000140, "Member 'FJackDataTableCollideSoundTable::BurntSand' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, Water) == 0x000158, "Member 'FJackDataTableCollideSoundTable::Water' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, Shallow) == 0x000170, "Member 'FJackDataTableCollideSoundTable::Shallow' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, OceanFloor) == 0x000188, "Member 'FJackDataTableCollideSoundTable::OceanFloor' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, Snow) == 0x0001A0, "Member 'FJackDataTableCollideSoundTable::Snow' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, Ice) == 0x0001B8, "Member 'FJackDataTableCollideSoundTable::Ice' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, Grass) == 0x0001D0, "Member 'FJackDataTableCollideSoundTable::Grass' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, Leaf) == 0x0001E8, "Member 'FJackDataTableCollideSoundTable::Leaf' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, Straw) == 0x000200, "Member 'FJackDataTableCollideSoundTable::Straw' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, BrownGrass) == 0x000218, "Member 'FJackDataTableCollideSoundTable::BrownGrass' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, Cloth) == 0x000230, "Member 'FJackDataTableCollideSoundTable::Cloth' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, ClothThick) == 0x000248, "Member 'FJackDataTableCollideSoundTable::ClothThick' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, Metal) == 0x000260, "Member 'FJackDataTableCollideSoundTable::Metal' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, Coin) == 0x000278, "Member 'FJackDataTableCollideSoundTable::Coin' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, Flesh) == 0x000290, "Member 'FJackDataTableCollideSoundTable::Flesh' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, Ladder) == 0x0002A8, "Member 'FJackDataTableCollideSoundTable::Ladder' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, Rope) == 0x0002C0, "Member 'FJackDataTableCollideSoundTable::Rope' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, Poison) == 0x0002D8, "Member 'FJackDataTableCollideSoundTable::Poison' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, Lava) == 0x0002F0, "Member 'FJackDataTableCollideSoundTable::Lava' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, Ivy) == 0x000308, "Member 'FJackDataTableCollideSoundTable::Ivy' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, Barrier) == 0x000320, "Member 'FJackDataTableCollideSoundTable::Barrier' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, ColdLava) == 0x000338, "Member 'FJackDataTableCollideSoundTable::ColdLava' has a wrong offset!");
static_assert(offsetof(FJackDataTableCollideSoundTable, CleftLava) == 0x000350, "Member 'FJackDataTableCollideSoundTable::CleftLava' has a wrong offset!");

// ScriptStruct JackGame.JackRenkeiFormation
// 0x0008 (0x0008 - 0x0000)
struct FJackRenkeiFormation final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackRenkeiFormation) == 0x000004, "Wrong alignment on FJackRenkeiFormation");
static_assert(sizeof(FJackRenkeiFormation) == 0x000008, "Wrong size on FJackRenkeiFormation");
static_assert(offsetof(FJackRenkeiFormation, X) == 0x000000, "Member 'FJackRenkeiFormation::X' has a wrong offset!");
static_assert(offsetof(FJackRenkeiFormation, Y) == 0x000004, "Member 'FJackRenkeiFormation::Y' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_Skirt_SBSkirt_AverageRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_Skirt_SBSkirt_AverageRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_Skirt_SBSkirt_AverageRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_Skirt_SBSkirt_AverageRot");
static_assert(sizeof(FJackLDT_RtEx_Skirt_SBSkirt_AverageRot) == 0x000010, "Wrong size on FJackLDT_RtEx_Skirt_SBSkirt_AverageRot");

// ScriptStruct JackGame.JackDataTableFukkatunojumonGameResumeSettingItemZukan
// 0x0028 (0x0030 - 0x0008)
struct FJackDataTableFukkatunojumonGameResumeSettingItemZukan final : public FTableRowBase
{
public:
	class FName                                   Category;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Value1;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Value2;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Cmds;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableFukkatunojumonGameResumeSettingItemZukan) == 0x000008, "Wrong alignment on FJackDataTableFukkatunojumonGameResumeSettingItemZukan");
static_assert(sizeof(FJackDataTableFukkatunojumonGameResumeSettingItemZukan) == 0x000030, "Wrong size on FJackDataTableFukkatunojumonGameResumeSettingItemZukan");
static_assert(offsetof(FJackDataTableFukkatunojumonGameResumeSettingItemZukan, Category) == 0x000008, "Member 'FJackDataTableFukkatunojumonGameResumeSettingItemZukan::Category' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonGameResumeSettingItemZukan, Value1) == 0x000010, "Member 'FJackDataTableFukkatunojumonGameResumeSettingItemZukan::Value1' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonGameResumeSettingItemZukan, Value2) == 0x000018, "Member 'FJackDataTableFukkatunojumonGameResumeSettingItemZukan::Value2' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonGameResumeSettingItemZukan, Cmds) == 0x000020, "Member 'FJackDataTableFukkatunojumonGameResumeSettingItemZukan::Cmds' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableParameter
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableParameter final : public FTableRowBase
{
public:
	float                                         X;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Text;                                              // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableParameter) == 0x000008, "Wrong alignment on FJackDataTableParameter");
static_assert(sizeof(FJackDataTableParameter) == 0x000020, "Wrong size on FJackDataTableParameter");
static_assert(offsetof(FJackDataTableParameter, X) == 0x000008, "Member 'FJackDataTableParameter::X' has a wrong offset!");
static_assert(offsetof(FJackDataTableParameter, Y) == 0x00000C, "Member 'FJackDataTableParameter::Y' has a wrong offset!");
static_assert(offsetof(FJackDataTableParameter, Z) == 0x000010, "Member 'FJackDataTableParameter::Z' has a wrong offset!");
static_assert(offsetof(FJackDataTableParameter, Text) == 0x000018, "Member 'FJackDataTableParameter::Text' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableBlueprintClass
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableBlueprintClass final : public FTableRowBase
{
public:
	class UClass*                                 BlueprintClass;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableBlueprintClass) == 0x000008, "Wrong alignment on FJackDataTableBlueprintClass");
static_assert(sizeof(FJackDataTableBlueprintClass) == 0x000010, "Wrong size on FJackDataTableBlueprintClass");
static_assert(offsetof(FJackDataTableBlueprintClass, BlueprintClass) == 0x000008, "Member 'FJackDataTableBlueprintClass::BlueprintClass' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_SlotPayoutDataTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_SlotPayoutDataTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_SlotPayoutDataTable) == 0x000008, "Wrong alignment on FJackLDT_SlotPayoutDataTable");
static_assert(sizeof(FJackLDT_SlotPayoutDataTable) == 0x000010, "Wrong size on FJackLDT_SlotPayoutDataTable");

// ScriptStruct JackGame.JackDataTableSlotReel
// 0x0028 (0x0030 - 0x0008)
struct FJackDataTableSlotReel final : public FTableRowBase
{
public:
	class FName                                   R1;                                                // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   R2;                                                // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   R3;                                                // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   R4;                                                // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   R5;                                                // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableSlotReel) == 0x000008, "Wrong alignment on FJackDataTableSlotReel");
static_assert(sizeof(FJackDataTableSlotReel) == 0x000030, "Wrong size on FJackDataTableSlotReel");
static_assert(offsetof(FJackDataTableSlotReel, R1) == 0x000008, "Member 'FJackDataTableSlotReel::R1' has a wrong offset!");
static_assert(offsetof(FJackDataTableSlotReel, R2) == 0x000010, "Member 'FJackDataTableSlotReel::R2' has a wrong offset!");
static_assert(offsetof(FJackDataTableSlotReel, R3) == 0x000018, "Member 'FJackDataTableSlotReel::R3' has a wrong offset!");
static_assert(offsetof(FJackDataTableSlotReel, R4) == 0x000020, "Member 'FJackDataTableSlotReel::R4' has a wrong offset!");
static_assert(offsetof(FJackDataTableSlotReel, R5) == 0x000028, "Member 'FJackDataTableSlotReel::R5' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableCollideEffect
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableCollideEffect final : public FTableRowBase
{
public:
	TSubclassOf<class UJackCollideEffect>         CollideEffect;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableCollideEffect) == 0x000008, "Wrong alignment on FJackDataTableCollideEffect");
static_assert(sizeof(FJackDataTableCollideEffect) == 0x000010, "Wrong size on FJackDataTableCollideEffect");
static_assert(offsetof(FJackDataTableCollideEffect, CollideEffect) == 0x000008, "Member 'FJackDataTableCollideEffect::CollideEffect' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMaterialParameterCollection
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMaterialParameterCollection final : public FTableRowBase
{
public:
	class UMaterialParameterCollection*           MaterialParameterCollection;                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMaterialParameterCollection) == 0x000008, "Wrong alignment on FJackDataTableMaterialParameterCollection");
static_assert(sizeof(FJackDataTableMaterialParameterCollection) == 0x000010, "Wrong size on FJackDataTableMaterialParameterCollection");
static_assert(offsetof(FJackDataTableMaterialParameterCollection, MaterialParameterCollection) == 0x000008, "Member 'FJackDataTableMaterialParameterCollection::MaterialParameterCollection' has a wrong offset!");

// ScriptStruct JackGame.JackTenseiRespawnData2D
// 0x0008 (0x0008 - 0x0000)
struct FJackTenseiRespawnData2D final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ShipPointId;                                       // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MapJumpLocatorId;                                  // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EventType;                                         // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackTenseiRespawnData2D) == 0x000004, "Wrong alignment on FJackTenseiRespawnData2D");
static_assert(sizeof(FJackTenseiRespawnData2D) == 0x000008, "Wrong size on FJackTenseiRespawnData2D");
static_assert(offsetof(FJackTenseiRespawnData2D, MapId) == 0x000000, "Member 'FJackTenseiRespawnData2D::MapId' has a wrong offset!");
static_assert(offsetof(FJackTenseiRespawnData2D, ShipPointId) == 0x000004, "Member 'FJackTenseiRespawnData2D::ShipPointId' has a wrong offset!");
static_assert(offsetof(FJackTenseiRespawnData2D, MapJumpLocatorId) == 0x000005, "Member 'FJackTenseiRespawnData2D::MapJumpLocatorId' has a wrong offset!");
static_assert(offsetof(FJackTenseiRespawnData2D, EventType) == 0x000006, "Member 'FJackTenseiRespawnData2D::EventType' has a wrong offset!");

// ScriptStruct JackGame.JackBulletData
// 0x0018 (0x0018 - 0x0000)
struct FJackBulletData final
{
public:
	bool                                          bInfiniteAmmo;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInfiniteClip;                                     // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxAmmo;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmmoPerClip;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialClips;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeBetweenShots;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoAnimReloadDuration;                              // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackBulletData) == 0x000004, "Wrong alignment on FJackBulletData");
static_assert(sizeof(FJackBulletData) == 0x000018, "Wrong size on FJackBulletData");
static_assert(offsetof(FJackBulletData, bInfiniteAmmo) == 0x000000, "Member 'FJackBulletData::bInfiniteAmmo' has a wrong offset!");
static_assert(offsetof(FJackBulletData, bInfiniteClip) == 0x000001, "Member 'FJackBulletData::bInfiniteClip' has a wrong offset!");
static_assert(offsetof(FJackBulletData, MaxAmmo) == 0x000004, "Member 'FJackBulletData::MaxAmmo' has a wrong offset!");
static_assert(offsetof(FJackBulletData, AmmoPerClip) == 0x000008, "Member 'FJackBulletData::AmmoPerClip' has a wrong offset!");
static_assert(offsetof(FJackBulletData, InitialClips) == 0x00000C, "Member 'FJackBulletData::InitialClips' has a wrong offset!");
static_assert(offsetof(FJackBulletData, TimeBetweenShots) == 0x000010, "Member 'FJackBulletData::TimeBetweenShots' has a wrong offset!");
static_assert(offsetof(FJackBulletData, NoAnimReloadDuration) == 0x000014, "Member 'FJackBulletData::NoAnimReloadDuration' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotMonsterBehaviorProbability
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMeosiSlotMonsterBehaviorProbability final : public FTableRowBase
{
public:
	int32                                         Attack_1;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attack_2;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attack_3;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotMonsterBehaviorProbability) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotMonsterBehaviorProbability");
static_assert(sizeof(FJackDataTableMeosiSlotMonsterBehaviorProbability) == 0x000018, "Wrong size on FJackDataTableMeosiSlotMonsterBehaviorProbability");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterBehaviorProbability, Attack_1) == 0x000008, "Member 'FJackDataTableMeosiSlotMonsterBehaviorProbability::Attack_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterBehaviorProbability, Attack_2) == 0x00000C, "Member 'FJackDataTableMeosiSlotMonsterBehaviorProbability::Attack_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterBehaviorProbability, Attack_3) == 0x000010, "Member 'FJackDataTableMeosiSlotMonsterBehaviorProbability::Attack_3' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableForceFeedback
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableForceFeedback final : public FTableRowBase
{
public:
	class UForceFeedbackEffect*                   ForceFeedback;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableForceFeedback) == 0x000008, "Wrong alignment on FJackDataTableForceFeedback");
static_assert(sizeof(FJackDataTableForceFeedback) == 0x000010, "Wrong size on FJackDataTableForceFeedback");
static_assert(offsetof(FJackDataTableForceFeedback, ForceFeedback) == 0x000008, "Member 'FJackDataTableForceFeedback::ForceFeedback' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_P008_AR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_P008_AR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_P008_AR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_P008_AR");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_P008_AR) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_P008_AR");

// ScriptStruct JackGame.JackDataTableCameraShake
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableCameraShake final : public FTableRowBase
{
public:
	TSubclassOf<class UCameraShake>               CameraShakeClass;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableCameraShake) == 0x000008, "Wrong alignment on FJackDataTableCameraShake");
static_assert(sizeof(FJackDataTableCameraShake) == 0x000010, "Wrong size on FJackDataTableCameraShake");
static_assert(offsetof(FJackDataTableCameraShake, CameraShakeClass) == 0x000008, "Member 'FJackDataTableCameraShake::CameraShakeClass' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableCameraAnim
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableCameraAnim final : public FTableRowBase
{
public:
	class UCameraAnim*                            CameraAnim;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableCameraAnim) == 0x000008, "Wrong alignment on FJackDataTableCameraAnim");
static_assert(sizeof(FJackDataTableCameraAnim) == 0x000010, "Wrong size on FJackDataTableCameraAnim");
static_assert(offsetof(FJackDataTableCameraAnim, CameraAnim) == 0x000008, "Member 'FJackDataTableCameraAnim::CameraAnim' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotLongFreeze
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMeosiSlotLongFreeze final : public FTableRowBase
{
public:
	float                                         Probability;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotLongFreeze) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotLongFreeze");
static_assert(sizeof(FJackDataTableMeosiSlotLongFreeze) == 0x000010, "Wrong size on FJackDataTableMeosiSlotLongFreeze");
static_assert(offsetof(FJackDataTableMeosiSlotLongFreeze, Probability) == 0x000008, "Member 'FJackDataTableMeosiSlotLongFreeze::Probability' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableCutSceneInfo
// 0x0188 (0x0190 - 0x0008)
struct FJackDataTableCutSceneInfo final : public FTableRowBase
{
public:
	class FName                                   CSLevel;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Title;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FlagName;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FirstFlagName;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NPCVisibility;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FogVisibility;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MeshVisibilityTag;                                 // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackFadeColor                                StartFadeColor;                                    // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartFadeTime;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackFadeColor                                EndFadeColor;                                      // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EndFadeTime;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   JumpMapStartID;                                    // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   JumpStartCSID;                                     // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndTimeReturnFlag;                                 // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndWeatherReturnFlag;                              // 0x0061(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndLocationTitleShowFlag;                          // 0x0062(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EndEventBattleID;                                  // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndPlayableFlag;                                   // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MemoriesShowFlag;                                  // 0x0071(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ChapterTitleID;                                    // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChapterID;                                         // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartMapStartID;                                   // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerWeaponID;                                    // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BGMID;                                             // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ElevenCosID;                                       // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CamuCosID;                                         // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VeronicaCosID;                                     // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SenaCosID;                                         // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SylviaCosID;                                       // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RouCosID;                                          // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MartinaCosID;                                      // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GraigCosID;                                        // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceTime;                                         // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           ForceWeather;                                      // 0x00C4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ForceWindControl;                                  // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PreLoadMapJumpTag;                                 // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BGLODTag;                                          // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RefreshStatus;                                     // 0x00E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HiddenGuestNPC;                                    // 0x00E1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DisableCullDistanceVolume;                         // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisableCullDistanceVolumeForActor;                 // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Achievement;                                       // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HiddenWeatherEffect;                               // 0x0100(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeAfterWaitTime;                                 // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PartyRecoverFlag;                                  // 0x0108(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EnvironmentLevelName;                              // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChangeDefaultCoordinate;                           // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoadingScreenType;                                 // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InroomFlag;                                        // 0x0124(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HiddenLightTag;                                    // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CameraLightEnable;                                 // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseInGameReduction;                                // 0x0131(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0x6];                                      // 0x0132(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HighQualityTextureTag;                             // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WaitLoadTextureTag;                                // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoadSoundType;                                     // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLensFlare;                                   // 0x014C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HoukaiClearSky;                                    // 0x014D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MemoriesSeqCSFlag;                                 // 0x014E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14F[0x1];                                      // 0x014F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CSStartDelayTime;                                  // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CSStartDelayTimeForMemories;                       // 0x0154(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisableInactiveTag;                                // 0x0158(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipFlushStreamingForLoadingAfter;                 // 0x0160(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndEnvSoundReturnFlag;                             // 0x0161(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableDynamicResolution;                          // 0x0162(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_163[0x1];                                      // 0x0163(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DynamicResolution_ScreenPercentage;                // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicResolution_DecreasesResolutionMaxCount_ConsoleMode; // 0x0168(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicResolution_DecreasesResolutionMaxCount_HandheldMode; // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicResolution_WaitFramesToUpperResolution;     // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicResolution_WaitFramesToLowerResolution;     // 0x0174(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicResolution_DecreasesResolution;             // 0x0178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicResolution_MaxTimeBudget;                   // 0x017C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicResolution_MinTimeBudget;                   // 0x0180(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WaitNPCLoadComplete;                               // 0x0184(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableHLOD;                                       // 0x0185(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_186[0x2];                                      // 0x0186(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ShowSkipFlag;                                      // 0x0188(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableCutSceneInfo) == 0x000008, "Wrong alignment on FJackDataTableCutSceneInfo");
static_assert(sizeof(FJackDataTableCutSceneInfo) == 0x000190, "Wrong size on FJackDataTableCutSceneInfo");
static_assert(offsetof(FJackDataTableCutSceneInfo, CSLevel) == 0x000008, "Member 'FJackDataTableCutSceneInfo::CSLevel' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, Title) == 0x000010, "Member 'FJackDataTableCutSceneInfo::Title' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, FlagName) == 0x000018, "Member 'FJackDataTableCutSceneInfo::FlagName' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, FirstFlagName) == 0x000020, "Member 'FJackDataTableCutSceneInfo::FirstFlagName' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, NPCVisibility) == 0x000028, "Member 'FJackDataTableCutSceneInfo::NPCVisibility' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, FogVisibility) == 0x000030, "Member 'FJackDataTableCutSceneInfo::FogVisibility' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, MeshVisibilityTag) == 0x000038, "Member 'FJackDataTableCutSceneInfo::MeshVisibilityTag' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, StartFadeColor) == 0x000040, "Member 'FJackDataTableCutSceneInfo::StartFadeColor' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, StartFadeTime) == 0x000044, "Member 'FJackDataTableCutSceneInfo::StartFadeTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, EndFadeColor) == 0x000048, "Member 'FJackDataTableCutSceneInfo::EndFadeColor' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, EndFadeTime) == 0x00004C, "Member 'FJackDataTableCutSceneInfo::EndFadeTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, JumpMapStartID) == 0x000050, "Member 'FJackDataTableCutSceneInfo::JumpMapStartID' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, JumpStartCSID) == 0x000058, "Member 'FJackDataTableCutSceneInfo::JumpStartCSID' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, EndTimeReturnFlag) == 0x000060, "Member 'FJackDataTableCutSceneInfo::EndTimeReturnFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, EndWeatherReturnFlag) == 0x000061, "Member 'FJackDataTableCutSceneInfo::EndWeatherReturnFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, EndLocationTitleShowFlag) == 0x000062, "Member 'FJackDataTableCutSceneInfo::EndLocationTitleShowFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, EndEventBattleID) == 0x000068, "Member 'FJackDataTableCutSceneInfo::EndEventBattleID' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, EndPlayableFlag) == 0x000070, "Member 'FJackDataTableCutSceneInfo::EndPlayableFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, MemoriesShowFlag) == 0x000071, "Member 'FJackDataTableCutSceneInfo::MemoriesShowFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, ChapterTitleID) == 0x000078, "Member 'FJackDataTableCutSceneInfo::ChapterTitleID' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, ChapterID) == 0x000080, "Member 'FJackDataTableCutSceneInfo::ChapterID' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, StartMapStartID) == 0x000088, "Member 'FJackDataTableCutSceneInfo::StartMapStartID' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, PlayerWeaponID) == 0x000090, "Member 'FJackDataTableCutSceneInfo::PlayerWeaponID' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, BGMID) == 0x000098, "Member 'FJackDataTableCutSceneInfo::BGMID' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, ElevenCosID) == 0x0000A0, "Member 'FJackDataTableCutSceneInfo::ElevenCosID' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, CamuCosID) == 0x0000A4, "Member 'FJackDataTableCutSceneInfo::CamuCosID' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, VeronicaCosID) == 0x0000A8, "Member 'FJackDataTableCutSceneInfo::VeronicaCosID' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, SenaCosID) == 0x0000AC, "Member 'FJackDataTableCutSceneInfo::SenaCosID' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, SylviaCosID) == 0x0000B0, "Member 'FJackDataTableCutSceneInfo::SylviaCosID' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, RouCosID) == 0x0000B4, "Member 'FJackDataTableCutSceneInfo::RouCosID' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, MartinaCosID) == 0x0000B8, "Member 'FJackDataTableCutSceneInfo::MartinaCosID' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, GraigCosID) == 0x0000BC, "Member 'FJackDataTableCutSceneInfo::GraigCosID' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, ForceTime) == 0x0000C0, "Member 'FJackDataTableCutSceneInfo::ForceTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, ForceWeather) == 0x0000C4, "Member 'FJackDataTableCutSceneInfo::ForceWeather' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, ForceWindControl) == 0x0000C8, "Member 'FJackDataTableCutSceneInfo::ForceWindControl' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, PreLoadMapJumpTag) == 0x0000D0, "Member 'FJackDataTableCutSceneInfo::PreLoadMapJumpTag' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, BGLODTag) == 0x0000D8, "Member 'FJackDataTableCutSceneInfo::BGLODTag' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, RefreshStatus) == 0x0000E0, "Member 'FJackDataTableCutSceneInfo::RefreshStatus' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, HiddenGuestNPC) == 0x0000E1, "Member 'FJackDataTableCutSceneInfo::HiddenGuestNPC' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, DisableCullDistanceVolume) == 0x0000E8, "Member 'FJackDataTableCutSceneInfo::DisableCullDistanceVolume' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, DisableCullDistanceVolumeForActor) == 0x0000F0, "Member 'FJackDataTableCutSceneInfo::DisableCullDistanceVolumeForActor' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, Achievement) == 0x0000F8, "Member 'FJackDataTableCutSceneInfo::Achievement' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, HiddenWeatherEffect) == 0x000100, "Member 'FJackDataTableCutSceneInfo::HiddenWeatherEffect' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, FadeAfterWaitTime) == 0x000104, "Member 'FJackDataTableCutSceneInfo::FadeAfterWaitTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, PartyRecoverFlag) == 0x000108, "Member 'FJackDataTableCutSceneInfo::PartyRecoverFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, EnvironmentLevelName) == 0x000110, "Member 'FJackDataTableCutSceneInfo::EnvironmentLevelName' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, ChangeDefaultCoordinate) == 0x000118, "Member 'FJackDataTableCutSceneInfo::ChangeDefaultCoordinate' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, LoadingScreenType) == 0x000120, "Member 'FJackDataTableCutSceneInfo::LoadingScreenType' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, InroomFlag) == 0x000124, "Member 'FJackDataTableCutSceneInfo::InroomFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, HiddenLightTag) == 0x000128, "Member 'FJackDataTableCutSceneInfo::HiddenLightTag' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, CameraLightEnable) == 0x000130, "Member 'FJackDataTableCutSceneInfo::CameraLightEnable' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, UseInGameReduction) == 0x000131, "Member 'FJackDataTableCutSceneInfo::UseInGameReduction' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, HighQualityTextureTag) == 0x000138, "Member 'FJackDataTableCutSceneInfo::HighQualityTextureTag' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, WaitLoadTextureTag) == 0x000140, "Member 'FJackDataTableCutSceneInfo::WaitLoadTextureTag' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, LoadSoundType) == 0x000148, "Member 'FJackDataTableCutSceneInfo::LoadSoundType' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, EnableLensFlare) == 0x00014C, "Member 'FJackDataTableCutSceneInfo::EnableLensFlare' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, HoukaiClearSky) == 0x00014D, "Member 'FJackDataTableCutSceneInfo::HoukaiClearSky' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, MemoriesSeqCSFlag) == 0x00014E, "Member 'FJackDataTableCutSceneInfo::MemoriesSeqCSFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, CSStartDelayTime) == 0x000150, "Member 'FJackDataTableCutSceneInfo::CSStartDelayTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, CSStartDelayTimeForMemories) == 0x000154, "Member 'FJackDataTableCutSceneInfo::CSStartDelayTimeForMemories' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, DisableInactiveTag) == 0x000158, "Member 'FJackDataTableCutSceneInfo::DisableInactiveTag' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, SkipFlushStreamingForLoadingAfter) == 0x000160, "Member 'FJackDataTableCutSceneInfo::SkipFlushStreamingForLoadingAfter' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, EndEnvSoundReturnFlag) == 0x000161, "Member 'FJackDataTableCutSceneInfo::EndEnvSoundReturnFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, DisableDynamicResolution) == 0x000162, "Member 'FJackDataTableCutSceneInfo::DisableDynamicResolution' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, DynamicResolution_ScreenPercentage) == 0x000164, "Member 'FJackDataTableCutSceneInfo::DynamicResolution_ScreenPercentage' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, DynamicResolution_DecreasesResolutionMaxCount_ConsoleMode) == 0x000168, "Member 'FJackDataTableCutSceneInfo::DynamicResolution_DecreasesResolutionMaxCount_ConsoleMode' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, DynamicResolution_DecreasesResolutionMaxCount_HandheldMode) == 0x00016C, "Member 'FJackDataTableCutSceneInfo::DynamicResolution_DecreasesResolutionMaxCount_HandheldMode' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, DynamicResolution_WaitFramesToUpperResolution) == 0x000170, "Member 'FJackDataTableCutSceneInfo::DynamicResolution_WaitFramesToUpperResolution' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, DynamicResolution_WaitFramesToLowerResolution) == 0x000174, "Member 'FJackDataTableCutSceneInfo::DynamicResolution_WaitFramesToLowerResolution' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, DynamicResolution_DecreasesResolution) == 0x000178, "Member 'FJackDataTableCutSceneInfo::DynamicResolution_DecreasesResolution' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, DynamicResolution_MaxTimeBudget) == 0x00017C, "Member 'FJackDataTableCutSceneInfo::DynamicResolution_MaxTimeBudget' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, DynamicResolution_MinTimeBudget) == 0x000180, "Member 'FJackDataTableCutSceneInfo::DynamicResolution_MinTimeBudget' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, WaitNPCLoadComplete) == 0x000184, "Member 'FJackDataTableCutSceneInfo::WaitNPCLoadComplete' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, DisableHLOD) == 0x000185, "Member 'FJackDataTableCutSceneInfo::DisableHLOD' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneInfo, ShowSkipFlag) == 0x000188, "Member 'FJackDataTableCutSceneInfo::ShowSkipFlag' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_V006_BodyEx
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_V006_BodyEx final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_V006_BodyEx) == 0x000008, "Wrong alignment on FJackLDT_V006_BodyEx");
static_assert(sizeof(FJackLDT_V006_BodyEx) == 0x000010, "Wrong size on FJackLDT_V006_BodyEx");

// ScriptStruct JackGame.JackMedal_StampPress
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackMedal_StampPress final
{
public:
	int32                                         StampNumber;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMedal_StampPage                          CompletePageType;                                  // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMedal_StampPress) == 0x000008, "Wrong alignment on FJackMedal_StampPress");
static_assert(sizeof(FJackMedal_StampPress) == 0x000018, "Wrong size on FJackMedal_StampPress");
static_assert(offsetof(FJackMedal_StampPress, StampNumber) == 0x000000, "Member 'FJackMedal_StampPress::StampNumber' has a wrong offset!");
static_assert(offsetof(FJackMedal_StampPress, ItemID) == 0x000008, "Member 'FJackMedal_StampPress::ItemID' has a wrong offset!");
static_assert(offsetof(FJackMedal_StampPress, CompletePageType) == 0x000010, "Member 'FJackMedal_StampPress::CompletePageType' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableScenarioFlagInfo
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableScenarioFlagInfo final : public FTableRowBase
{
public:
	EJackScenarioID                               ScenarioID;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Order;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FlagNameOfLatestScenarioFlag;                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FlagNameOfArasuziFlag;                             // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableScenarioFlagInfo) == 0x000008, "Wrong alignment on FJackDataTableScenarioFlagInfo");
static_assert(sizeof(FJackDataTableScenarioFlagInfo) == 0x000020, "Wrong size on FJackDataTableScenarioFlagInfo");
static_assert(offsetof(FJackDataTableScenarioFlagInfo, ScenarioID) == 0x000008, "Member 'FJackDataTableScenarioFlagInfo::ScenarioID' has a wrong offset!");
static_assert(offsetof(FJackDataTableScenarioFlagInfo, Order) == 0x00000C, "Member 'FJackDataTableScenarioFlagInfo::Order' has a wrong offset!");
static_assert(offsetof(FJackDataTableScenarioFlagInfo, FlagNameOfLatestScenarioFlag) == 0x000010, "Member 'FJackDataTableScenarioFlagInfo::FlagNameOfLatestScenarioFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableScenarioFlagInfo, FlagNameOfArasuziFlag) == 0x000018, "Member 'FJackDataTableScenarioFlagInfo::FlagNameOfArasuziFlag' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotBGMProbability
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotBGMProbability final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotBGMProbability) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotBGMProbability");
static_assert(sizeof(FJackLDT_MeosiSlotBGMProbability) == 0x000010, "Wrong size on FJackLDT_MeosiSlotBGMProbability");

// ScriptStruct JackGame.JackDataTableMeosiSlotBossMonsterSelectProbability
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableMeosiSlotBossMonsterSelectProbability final : public FTableRowBase
{
public:
	int32                                         Stock;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         No_Stock;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BGMProb_Stock;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BGMProb_No_Stock;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattlePeriodRange;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotBossMonsterSelectProbability) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotBossMonsterSelectProbability");
static_assert(sizeof(FJackDataTableMeosiSlotBossMonsterSelectProbability) == 0x000020, "Wrong size on FJackDataTableMeosiSlotBossMonsterSelectProbability");
static_assert(offsetof(FJackDataTableMeosiSlotBossMonsterSelectProbability, Stock) == 0x000008, "Member 'FJackDataTableMeosiSlotBossMonsterSelectProbability::Stock' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotBossMonsterSelectProbability, No_Stock) == 0x00000C, "Member 'FJackDataTableMeosiSlotBossMonsterSelectProbability::No_Stock' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotBossMonsterSelectProbability, BGMProb_Stock) == 0x000010, "Member 'FJackDataTableMeosiSlotBossMonsterSelectProbability::BGMProb_Stock' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotBossMonsterSelectProbability, BGMProb_No_Stock) == 0x000014, "Member 'FJackDataTableMeosiSlotBossMonsterSelectProbability::BGMProb_No_Stock' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotBossMonsterSelectProbability, BattlePeriodRange) == 0x000018, "Member 'FJackDataTableMeosiSlotBossMonsterSelectProbability::BattlePeriodRange' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableProjectileClass
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableProjectileClass final : public FTableRowBase
{
public:
	TSubclassOf<class AJackProjectile>            ProjectileClass;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableProjectileClass) == 0x000008, "Wrong alignment on FJackDataTableProjectileClass");
static_assert(sizeof(FJackDataTableProjectileClass) == 0x000010, "Wrong size on FJackDataTableProjectileClass");
static_assert(offsetof(FJackDataTableProjectileClass, ProjectileClass) == 0x000008, "Member 'FJackDataTableProjectileClass::ProjectileClass' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_TextRuby
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextRuby final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextRuby) == 0x000008, "Wrong alignment on FJackLDT_TextRuby");
static_assert(sizeof(FJackLDT_TextRuby) == 0x000010, "Wrong size on FJackLDT_TextRuby");

// ScriptStruct JackGame.JackLDT_MeosiSlotLowestFeedNumberProbability
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotLowestFeedNumberProbability final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotLowestFeedNumberProbability) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotLowestFeedNumberProbability");
static_assert(sizeof(FJackLDT_MeosiSlotLowestFeedNumberProbability) == 0x000010, "Wrong size on FJackLDT_MeosiSlotLowestFeedNumberProbability");

// ScriptStruct JackGame.JackDataTableSound
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableSound final : public FTableRowBase
{
public:
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableSound) == 0x000008, "Wrong alignment on FJackDataTableSound");
static_assert(sizeof(FJackDataTableSound) == 0x000010, "Wrong size on FJackDataTableSound");
static_assert(offsetof(FJackDataTableSound, Sound) == 0x000008, "Member 'FJackDataTableSound::Sound' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Pose_LR_SideHairL1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_LR_SideHairL1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_LR_SideHairL1) == 0x000008, "Wrong alignment on FJackLDT_Pose_LR_SideHairL1");
static_assert(sizeof(FJackLDT_Pose_LR_SideHairL1) == 0x000010, "Wrong size on FJackLDT_Pose_LR_SideHairL1");

// ScriptStruct JackGame.JackDataTableCutSceneAnimationInfo
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableCutSceneAnimationInfo final : public FTableRowBase
{
public:
	float                                         ApplyRate;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableCutSceneAnimationInfo) == 0x000008, "Wrong alignment on FJackDataTableCutSceneAnimationInfo");
static_assert(sizeof(FJackDataTableCutSceneAnimationInfo) == 0x000010, "Wrong size on FJackDataTableCutSceneAnimationInfo");
static_assert(offsetof(FJackDataTableCutSceneAnimationInfo, ApplyRate) == 0x000008, "Member 'FJackDataTableCutSceneAnimationInfo::ApplyRate' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_F15
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_F15 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_F15) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_F15");
static_assert(sizeof(FJackLDT_MonsterDeploy_F15) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_F15");

// ScriptStruct JackGame.JackDataTableCutSceneAutomaticFeedOfSpeechInfo
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableCutSceneAutomaticFeedOfSpeechInfo final : public FTableRowBase
{
public:
	float                                         InVoice;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLoopVoice;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InText;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OneLetter;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableCutSceneAutomaticFeedOfSpeechInfo) == 0x000008, "Wrong alignment on FJackDataTableCutSceneAutomaticFeedOfSpeechInfo");
static_assert(sizeof(FJackDataTableCutSceneAutomaticFeedOfSpeechInfo) == 0x000018, "Wrong size on FJackDataTableCutSceneAutomaticFeedOfSpeechInfo");
static_assert(offsetof(FJackDataTableCutSceneAutomaticFeedOfSpeechInfo, InVoice) == 0x000008, "Member 'FJackDataTableCutSceneAutomaticFeedOfSpeechInfo::InVoice' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneAutomaticFeedOfSpeechInfo, InLoopVoice) == 0x00000C, "Member 'FJackDataTableCutSceneAutomaticFeedOfSpeechInfo::InLoopVoice' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneAutomaticFeedOfSpeechInfo, InText) == 0x000010, "Member 'FJackDataTableCutSceneAutomaticFeedOfSpeechInfo::InText' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneAutomaticFeedOfSpeechInfo, OneLetter) == 0x000014, "Member 'FJackDataTableCutSceneAutomaticFeedOfSpeechInfo::OneLetter' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_ModeChangeType
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ModeChangeType final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ModeChangeType) == 0x000008, "Wrong alignment on FJackLDT_ModeChangeType");
static_assert(sizeof(FJackLDT_ModeChangeType) == 0x000010, "Wrong size on FJackLDT_ModeChangeType");

// ScriptStruct JackGame.JackLDT_Pose_BeardE1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_BeardE1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_BeardE1) == 0x000008, "Wrong alignment on FJackLDT_Pose_BeardE1");
static_assert(sizeof(FJackLDT_Pose_BeardE1) == 0x000010, "Wrong size on FJackLDT_Pose_BeardE1");

// ScriptStruct JackGame.JackDataTableCutSceneDuplicationTalkerInfo
// 0x0080 (0x0088 - 0x0008)
struct FJackDataTableCutSceneDuplicationTalkerInfo final : public FTableRowBase
{
public:
	class FName                                   OriginalTalkerID0;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OriginalTalkerID1;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OriginalTalkerID2;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OriginalTalkerID3;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OriginalTalkerID4;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OriginalTalkerID5;                                 // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OriginalTalkerID6;                                 // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OriginalTalkerID7;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OriginalTalkerID8;                                 // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OriginalTalkerID9;                                 // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OriginalTalkerID10;                                // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OriginalTalkerID11;                                // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OriginalTalkerID12;                                // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OriginalTalkerID13;                                // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OriginalTalkerID14;                                // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OriginalTalkerID15;                                // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableCutSceneDuplicationTalkerInfo) == 0x000008, "Wrong alignment on FJackDataTableCutSceneDuplicationTalkerInfo");
static_assert(sizeof(FJackDataTableCutSceneDuplicationTalkerInfo) == 0x000088, "Wrong size on FJackDataTableCutSceneDuplicationTalkerInfo");
static_assert(offsetof(FJackDataTableCutSceneDuplicationTalkerInfo, OriginalTalkerID0) == 0x000008, "Member 'FJackDataTableCutSceneDuplicationTalkerInfo::OriginalTalkerID0' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneDuplicationTalkerInfo, OriginalTalkerID1) == 0x000010, "Member 'FJackDataTableCutSceneDuplicationTalkerInfo::OriginalTalkerID1' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneDuplicationTalkerInfo, OriginalTalkerID2) == 0x000018, "Member 'FJackDataTableCutSceneDuplicationTalkerInfo::OriginalTalkerID2' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneDuplicationTalkerInfo, OriginalTalkerID3) == 0x000020, "Member 'FJackDataTableCutSceneDuplicationTalkerInfo::OriginalTalkerID3' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneDuplicationTalkerInfo, OriginalTalkerID4) == 0x000028, "Member 'FJackDataTableCutSceneDuplicationTalkerInfo::OriginalTalkerID4' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneDuplicationTalkerInfo, OriginalTalkerID5) == 0x000030, "Member 'FJackDataTableCutSceneDuplicationTalkerInfo::OriginalTalkerID5' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneDuplicationTalkerInfo, OriginalTalkerID6) == 0x000038, "Member 'FJackDataTableCutSceneDuplicationTalkerInfo::OriginalTalkerID6' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneDuplicationTalkerInfo, OriginalTalkerID7) == 0x000040, "Member 'FJackDataTableCutSceneDuplicationTalkerInfo::OriginalTalkerID7' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneDuplicationTalkerInfo, OriginalTalkerID8) == 0x000048, "Member 'FJackDataTableCutSceneDuplicationTalkerInfo::OriginalTalkerID8' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneDuplicationTalkerInfo, OriginalTalkerID9) == 0x000050, "Member 'FJackDataTableCutSceneDuplicationTalkerInfo::OriginalTalkerID9' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneDuplicationTalkerInfo, OriginalTalkerID10) == 0x000058, "Member 'FJackDataTableCutSceneDuplicationTalkerInfo::OriginalTalkerID10' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneDuplicationTalkerInfo, OriginalTalkerID11) == 0x000060, "Member 'FJackDataTableCutSceneDuplicationTalkerInfo::OriginalTalkerID11' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneDuplicationTalkerInfo, OriginalTalkerID12) == 0x000068, "Member 'FJackDataTableCutSceneDuplicationTalkerInfo::OriginalTalkerID12' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneDuplicationTalkerInfo, OriginalTalkerID13) == 0x000070, "Member 'FJackDataTableCutSceneDuplicationTalkerInfo::OriginalTalkerID13' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneDuplicationTalkerInfo, OriginalTalkerID14) == 0x000078, "Member 'FJackDataTableCutSceneDuplicationTalkerInfo::OriginalTalkerID14' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneDuplicationTalkerInfo, OriginalTalkerID15) == 0x000080, "Member 'FJackDataTableCutSceneDuplicationTalkerInfo::OriginalTalkerID15' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_BookShelf
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_BookShelf final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_BookShelf) == 0x000008, "Wrong alignment on FJackLDT_BookShelf");
static_assert(sizeof(FJackLDT_BookShelf) == 0x000010, "Wrong size on FJackLDT_BookShelf");

// ScriptStruct JackGame.JackDataTableCutSceneSerifuInfo
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableCutSceneSerifuInfo final : public FTableRowBase
{
public:
	class FName                                   OverrideCloseFlag;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideNPCID;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableCutSceneSerifuInfo) == 0x000008, "Wrong alignment on FJackDataTableCutSceneSerifuInfo");
static_assert(sizeof(FJackDataTableCutSceneSerifuInfo) == 0x000018, "Wrong size on FJackDataTableCutSceneSerifuInfo");
static_assert(offsetof(FJackDataTableCutSceneSerifuInfo, OverrideCloseFlag) == 0x000008, "Member 'FJackDataTableCutSceneSerifuInfo::OverrideCloseFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableCutSceneSerifuInfo, OverrideNPCID) == 0x000010, "Member 'FJackDataTableCutSceneSerifuInfo::OverrideNPCID' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMatineeRenkei
// 0x0150 (0x0158 - 0x0008)
struct FJackDataTableMatineeRenkei final : public FTableRowBase
{
public:
	class FName                                   MachineLevelName;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MachineLevelPass;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MachineName;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   DamageEffect;                                      // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DoActionID_A;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackRenkeiMember                             Target_A;                                          // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DoActionID_B;                                      // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackRenkeiMember                             Target_B;                                          // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DoActionID_C;                                      // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackRenkeiMember                             Target_C;                                          // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DoActionID_D;                                      // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackRenkeiMember                             Target_D;                                          // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLOD_ON;                                           // 0x0071(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DamageCameraID;                                    // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamageFormationID;                                 // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageTime;                                        // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   DamageCameraShake;                                 // 0x0090(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageCameraShakeTime;                             // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UParticleSystem>         Damage_Particle1;                                  // 0x00B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage_ParticleTime1;                              // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UParticleSystem>         Damage_Particle2;                                  // 0x00D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage_ParticleTime2;                              // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundBase>              Damage_Sound;                                      // 0x00F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage_SoundTime;                                  // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   Target_ActionEffect;                               // 0x0110(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageBalloonTimeA;                                // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageHitCountA;                                   // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageHitIntervalA;                                // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageBalloonTimeB;                                // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageHitCountB;                                   // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageHitIntervalB;                                // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageBalloonTimeC;                                // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageHitCountC;                                   // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageHitIntervalC;                                // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageBalloonTimeD;                                // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageHitCountD;                                   // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageHitIntervalD;                                // 0x0154(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMatineeRenkei) == 0x000008, "Wrong alignment on FJackDataTableMatineeRenkei");
static_assert(sizeof(FJackDataTableMatineeRenkei) == 0x000158, "Wrong size on FJackDataTableMatineeRenkei");
static_assert(offsetof(FJackDataTableMatineeRenkei, MachineLevelName) == 0x000008, "Member 'FJackDataTableMatineeRenkei::MachineLevelName' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, MachineLevelPass) == 0x000010, "Member 'FJackDataTableMatineeRenkei::MachineLevelPass' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, MachineName) == 0x000018, "Member 'FJackDataTableMatineeRenkei::MachineName' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, DamageEffect) == 0x000020, "Member 'FJackDataTableMatineeRenkei::DamageEffect' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, DoActionID_A) == 0x000038, "Member 'FJackDataTableMatineeRenkei::DoActionID_A' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, Target_A) == 0x000040, "Member 'FJackDataTableMatineeRenkei::Target_A' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, DoActionID_B) == 0x000048, "Member 'FJackDataTableMatineeRenkei::DoActionID_B' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, Target_B) == 0x000050, "Member 'FJackDataTableMatineeRenkei::Target_B' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, DoActionID_C) == 0x000058, "Member 'FJackDataTableMatineeRenkei::DoActionID_C' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, Target_C) == 0x000060, "Member 'FJackDataTableMatineeRenkei::Target_C' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, DoActionID_D) == 0x000068, "Member 'FJackDataTableMatineeRenkei::DoActionID_D' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, Target_D) == 0x000070, "Member 'FJackDataTableMatineeRenkei::Target_D' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, bLOD_ON) == 0x000071, "Member 'FJackDataTableMatineeRenkei::bLOD_ON' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, DamageCameraID) == 0x000078, "Member 'FJackDataTableMatineeRenkei::DamageCameraID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, DamageFormationID) == 0x000080, "Member 'FJackDataTableMatineeRenkei::DamageFormationID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, DamageTime) == 0x000088, "Member 'FJackDataTableMatineeRenkei::DamageTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, DamageCameraShake) == 0x000090, "Member 'FJackDataTableMatineeRenkei::DamageCameraShake' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, DamageCameraShakeTime) == 0x0000A8, "Member 'FJackDataTableMatineeRenkei::DamageCameraShakeTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, Damage_Particle1) == 0x0000B0, "Member 'FJackDataTableMatineeRenkei::Damage_Particle1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, Damage_ParticleTime1) == 0x0000C8, "Member 'FJackDataTableMatineeRenkei::Damage_ParticleTime1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, Damage_Particle2) == 0x0000D0, "Member 'FJackDataTableMatineeRenkei::Damage_Particle2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, Damage_ParticleTime2) == 0x0000E8, "Member 'FJackDataTableMatineeRenkei::Damage_ParticleTime2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, Damage_Sound) == 0x0000F0, "Member 'FJackDataTableMatineeRenkei::Damage_Sound' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, Damage_SoundTime) == 0x000108, "Member 'FJackDataTableMatineeRenkei::Damage_SoundTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, Target_ActionEffect) == 0x000110, "Member 'FJackDataTableMatineeRenkei::Target_ActionEffect' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, DamageBalloonTimeA) == 0x000128, "Member 'FJackDataTableMatineeRenkei::DamageBalloonTimeA' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, DamageHitCountA) == 0x00012C, "Member 'FJackDataTableMatineeRenkei::DamageHitCountA' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, DamageHitIntervalA) == 0x000130, "Member 'FJackDataTableMatineeRenkei::DamageHitIntervalA' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, DamageBalloonTimeB) == 0x000134, "Member 'FJackDataTableMatineeRenkei::DamageBalloonTimeB' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, DamageHitCountB) == 0x000138, "Member 'FJackDataTableMatineeRenkei::DamageHitCountB' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, DamageHitIntervalB) == 0x00013C, "Member 'FJackDataTableMatineeRenkei::DamageHitIntervalB' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, DamageBalloonTimeC) == 0x000140, "Member 'FJackDataTableMatineeRenkei::DamageBalloonTimeC' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, DamageHitCountC) == 0x000144, "Member 'FJackDataTableMatineeRenkei::DamageHitCountC' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, DamageHitIntervalC) == 0x000148, "Member 'FJackDataTableMatineeRenkei::DamageHitIntervalC' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, DamageBalloonTimeD) == 0x00014C, "Member 'FJackDataTableMatineeRenkei::DamageBalloonTimeD' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, DamageHitCountD) == 0x000150, "Member 'FJackDataTableMatineeRenkei::DamageHitCountD' has a wrong offset!");
static_assert(offsetof(FJackDataTableMatineeRenkei, DamageHitIntervalD) == 0x000154, "Member 'FJackDataTableMatineeRenkei::DamageHitIntervalD' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_ScenarioFlagInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ScenarioFlagInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ScenarioFlagInfo) == 0x000008, "Wrong alignment on FJackLDT_ScenarioFlagInfo");
static_assert(sizeof(FJackLDT_ScenarioFlagInfo) == 0x000010, "Wrong size on FJackLDT_ScenarioFlagInfo");

// ScriptStruct JackGame.JackMeosiSlotStateInitialParam
// 0x0070 (0x0070 - 0x0000)
struct FJackMeosiSlotStateInitialParam final
{
public:
	EJackMiniGameTableCoinType                    TableType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumCoin;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJackMeosiSlotVariableStateParam       VariableParam;                                     // 0x0008(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMeosiSlotStateInitialParam) == 0x000008, "Wrong alignment on FJackMeosiSlotStateInitialParam");
static_assert(sizeof(FJackMeosiSlotStateInitialParam) == 0x000070, "Wrong size on FJackMeosiSlotStateInitialParam");
static_assert(offsetof(FJackMeosiSlotStateInitialParam, TableType) == 0x000000, "Member 'FJackMeosiSlotStateInitialParam::TableType' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotStateInitialParam, NumCoin) == 0x000004, "Member 'FJackMeosiSlotStateInitialParam::NumCoin' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotStateInitialParam, VariableParam) == 0x000008, "Member 'FJackMeosiSlotStateInitialParam::VariableParam' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotPercentLottery
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMeosiSlotPercentLottery final : public FTableRowBase
{
public:
	int32                                         Percent;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotPercentLottery) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotPercentLottery");
static_assert(sizeof(FJackDataTableMeosiSlotPercentLottery) == 0x000010, "Wrong size on FJackDataTableMeosiSlotPercentLottery");
static_assert(offsetof(FJackDataTableMeosiSlotPercentLottery, Percent) == 0x000008, "Member 'FJackDataTableMeosiSlotPercentLottery::Percent' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotBreakOffRefundSetting
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotBreakOffRefundSetting final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotBreakOffRefundSetting) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotBreakOffRefundSetting");
static_assert(sizeof(FJackLDT_MeosiSlotBreakOffRefundSetting) == 0x000010, "Wrong size on FJackLDT_MeosiSlotBreakOffRefundSetting");

// ScriptStruct JackGame.JackDataTableDamageAttributeEffect
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableDamageAttributeEffect final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   EffectBP;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableDamageAttributeEffect) == 0x000008, "Wrong alignment on FJackDataTableDamageAttributeEffect");
static_assert(sizeof(FJackDataTableDamageAttributeEffect) == 0x000020, "Wrong size on FJackDataTableDamageAttributeEffect");
static_assert(offsetof(FJackDataTableDamageAttributeEffect, EffectBP) == 0x000008, "Member 'FJackDataTableDamageAttributeEffect::EffectBP' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Facial_M036
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Facial_M036 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Facial_M036) == 0x000008, "Wrong alignment on FJackLDT_Facial_M036");
static_assert(sizeof(FJackLDT_Facial_M036) == 0x000010, "Wrong size on FJackLDT_Facial_M036");

// ScriptStruct JackGame.JackDamageEffect
// 0x0060 (0x0060 - 0x0000)
struct FJackDamageEffect final
{
public:
	TSoftClassPtr<class UClass>                   DamageNormal;                                      // 0x0000(0x0018)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   DamageCritical;                                    // 0x0018(0x0018)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   DamageGuard;                                       // 0x0030(0x0018)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   DamageMiss;                                        // 0x0048(0x0018)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDamageEffect) == 0x000008, "Wrong alignment on FJackDamageEffect");
static_assert(sizeof(FJackDamageEffect) == 0x000060, "Wrong size on FJackDamageEffect");
static_assert(offsetof(FJackDamageEffect, DamageNormal) == 0x000000, "Member 'FJackDamageEffect::DamageNormal' has a wrong offset!");
static_assert(offsetof(FJackDamageEffect, DamageCritical) == 0x000018, "Member 'FJackDamageEffect::DamageCritical' has a wrong offset!");
static_assert(offsetof(FJackDamageEffect, DamageGuard) == 0x000030, "Member 'FJackDamageEffect::DamageGuard' has a wrong offset!");
static_assert(offsetof(FJackDamageEffect, DamageMiss) == 0x000048, "Member 'FJackDamageEffect::DamageMiss' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableDamageEffectTable
// 0x0600 (0x0608 - 0x0008)
struct FJackDataTableDamageEffectTable final : public FTableRowBase
{
public:
	struct FJackDamageEffect                      NOT;                                               // 0x0008(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageEffect                      SWD;                                               // 0x0068(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageEffect                      DGR;                                               // 0x00C8(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageEffect                      AXE;                                               // 0x0128(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageEffect                      STK;                                               // 0x0188(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageEffect                      BOO;                                               // 0x01E8(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageEffect                      TSW;                                               // 0x0248(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageEffect                      SPR;                                               // 0x02A8(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageEffect                      ROD;                                               // 0x0308(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageEffect                      CLW;                                               // 0x0368(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageEffect                      WHP;                                               // 0x03C8(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageEffect                      DSW;                                               // 0x0428(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageEffect                      DDG;                                               // 0x0488(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageEffect                      DAX;                                               // 0x04E8(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageEffect                      DST;                                               // 0x0548(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJackDamageEffect                      DBO;                                               // 0x05A8(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableDamageEffectTable) == 0x000008, "Wrong alignment on FJackDataTableDamageEffectTable");
static_assert(sizeof(FJackDataTableDamageEffectTable) == 0x000608, "Wrong size on FJackDataTableDamageEffectTable");
static_assert(offsetof(FJackDataTableDamageEffectTable, NOT) == 0x000008, "Member 'FJackDataTableDamageEffectTable::NOT' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageEffectTable, SWD) == 0x000068, "Member 'FJackDataTableDamageEffectTable::SWD' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageEffectTable, DGR) == 0x0000C8, "Member 'FJackDataTableDamageEffectTable::DGR' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageEffectTable, AXE) == 0x000128, "Member 'FJackDataTableDamageEffectTable::AXE' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageEffectTable, STK) == 0x000188, "Member 'FJackDataTableDamageEffectTable::STK' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageEffectTable, BOO) == 0x0001E8, "Member 'FJackDataTableDamageEffectTable::BOO' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageEffectTable, TSW) == 0x000248, "Member 'FJackDataTableDamageEffectTable::TSW' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageEffectTable, SPR) == 0x0002A8, "Member 'FJackDataTableDamageEffectTable::SPR' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageEffectTable, ROD) == 0x000308, "Member 'FJackDataTableDamageEffectTable::ROD' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageEffectTable, CLW) == 0x000368, "Member 'FJackDataTableDamageEffectTable::CLW' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageEffectTable, WHP) == 0x0003C8, "Member 'FJackDataTableDamageEffectTable::WHP' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageEffectTable, DSW) == 0x000428, "Member 'FJackDataTableDamageEffectTable::DSW' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageEffectTable, DDG) == 0x000488, "Member 'FJackDataTableDamageEffectTable::DDG' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageEffectTable, DAX) == 0x0004E8, "Member 'FJackDataTableDamageEffectTable::DAX' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageEffectTable, DST) == 0x000548, "Member 'FJackDataTableDamageEffectTable::DST' has a wrong offset!");
static_assert(offsetof(FJackDataTableDamageEffectTable, DBO) == 0x0005A8, "Member 'FJackDataTableDamageEffectTable::DBO' has a wrong offset!");

// ScriptStruct JackGame.JackDataTablePokerHand
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTablePokerHand final : public FTableRowBase
{
public:
	int32                                         Dividend;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Probability;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTablePokerHand) == 0x000008, "Wrong alignment on FJackDataTablePokerHand");
static_assert(sizeof(FJackDataTablePokerHand) == 0x000010, "Wrong size on FJackDataTablePokerHand");
static_assert(offsetof(FJackDataTablePokerHand, Dividend) == 0x000008, "Member 'FJackDataTablePokerHand::Dividend' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerHand, Probability) == 0x00000C, "Member 'FJackDataTablePokerHand::Probability' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Facial_M014
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Facial_M014 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Facial_M014) == 0x000008, "Wrong alignment on FJackLDT_Facial_M014");
static_assert(sizeof(FJackLDT_Facial_M014) == 0x000010, "Wrong size on FJackLDT_Facial_M014");

// ScriptStruct JackGame.JackLDT_TextDataGuide
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextDataGuide final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextDataGuide) == 0x000008, "Wrong alignment on FJackLDT_TextDataGuide");
static_assert(sizeof(FJackLDT_TextDataGuide) == 0x000010, "Wrong size on FJackLDT_TextDataGuide");

// ScriptStruct JackGame.JackLDT_MeosiSlotReelLamp_Anim08
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotReelLamp_Anim08 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotReelLamp_Anim08) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotReelLamp_Anim08");
static_assert(sizeof(FJackLDT_MeosiSlotReelLamp_Anim08) == 0x000010, "Wrong size on FJackLDT_MeosiSlotReelLamp_Anim08");

// ScriptStruct JackGame.JackLDT_AttachedProps_P008
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AttachedProps_P008 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AttachedProps_P008) == 0x000008, "Wrong alignment on FJackLDT_AttachedProps_P008");
static_assert(sizeof(FJackLDT_AttachedProps_P008) == 0x000010, "Wrong size on FJackLDT_AttachedProps_P008");

// ScriptStruct JackGame.JackLDT_Facial_M005
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Facial_M005 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Facial_M005) == 0x000008, "Wrong alignment on FJackLDT_Facial_M005");
static_assert(sizeof(FJackLDT_Facial_M005) == 0x000010, "Wrong size on FJackLDT_Facial_M005");

// ScriptStruct JackGame.JackLDT_SlotMEMamono
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_SlotMEMamono final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_SlotMEMamono) == 0x000008, "Wrong alignment on FJackLDT_SlotMEMamono");
static_assert(sizeof(FJackLDT_SlotMEMamono) == 0x000010, "Wrong size on FJackLDT_SlotMEMamono");

// ScriptStruct JackGame.JackDataTableDebugCommandMacro
// 0x0058 (0x0060 - 0x0008)
struct FJackDataTableDebugCommandMacro final : public FTableRowBase
{
public:
	class FName                                   BasePath;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubCategory;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CommandList;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddMenu;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DisplayName;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShortCut;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CategoryEnglish;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubCategoryEnglish;                                // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisplayNameEnglish;                                // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableDebugCommandMacro) == 0x000008, "Wrong alignment on FJackDataTableDebugCommandMacro");
static_assert(sizeof(FJackDataTableDebugCommandMacro) == 0x000060, "Wrong size on FJackDataTableDebugCommandMacro");
static_assert(offsetof(FJackDataTableDebugCommandMacro, BasePath) == 0x000008, "Member 'FJackDataTableDebugCommandMacro::BasePath' has a wrong offset!");
static_assert(offsetof(FJackDataTableDebugCommandMacro, Category) == 0x000010, "Member 'FJackDataTableDebugCommandMacro::Category' has a wrong offset!");
static_assert(offsetof(FJackDataTableDebugCommandMacro, SubCategory) == 0x000018, "Member 'FJackDataTableDebugCommandMacro::SubCategory' has a wrong offset!");
static_assert(offsetof(FJackDataTableDebugCommandMacro, CommandList) == 0x000020, "Member 'FJackDataTableDebugCommandMacro::CommandList' has a wrong offset!");
static_assert(offsetof(FJackDataTableDebugCommandMacro, bAddMenu) == 0x000030, "Member 'FJackDataTableDebugCommandMacro::bAddMenu' has a wrong offset!");
static_assert(offsetof(FJackDataTableDebugCommandMacro, DisplayName) == 0x000038, "Member 'FJackDataTableDebugCommandMacro::DisplayName' has a wrong offset!");
static_assert(offsetof(FJackDataTableDebugCommandMacro, ShortCut) == 0x000040, "Member 'FJackDataTableDebugCommandMacro::ShortCut' has a wrong offset!");
static_assert(offsetof(FJackDataTableDebugCommandMacro, CategoryEnglish) == 0x000048, "Member 'FJackDataTableDebugCommandMacro::CategoryEnglish' has a wrong offset!");
static_assert(offsetof(FJackDataTableDebugCommandMacro, SubCategoryEnglish) == 0x000050, "Member 'FJackDataTableDebugCommandMacro::SubCategoryEnglish' has a wrong offset!");
static_assert(offsetof(FJackDataTableDebugCommandMacro, DisplayNameEnglish) == 0x000058, "Member 'FJackDataTableDebugCommandMacro::DisplayNameEnglish' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_RCSkirt_Length4
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_RCSkirt_Length4 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_RCSkirt_Length4) == 0x000008, "Wrong alignment on FJackLDT_RtEx_RCSkirt_Length4");
static_assert(sizeof(FJackLDT_RtEx_RCSkirt_Length4) == 0x000010, "Wrong size on FJackLDT_RtEx_RCSkirt_Length4");

// ScriptStruct JackGame.JackDataTableItem_Present
// 0x0048 (0x0050 - 0x0008)
struct FJackDataTableItem_Present final : public FTableRowBase
{
public:
	int32                                         Gold;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemId_01;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount_01;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemId_02;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount_02;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemId_03;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount_03;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemId_04;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount_04;                                      // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TripleDlcNo;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableItem_Present) == 0x000008, "Wrong alignment on FJackDataTableItem_Present");
static_assert(sizeof(FJackDataTableItem_Present) == 0x000050, "Wrong size on FJackDataTableItem_Present");
static_assert(offsetof(FJackDataTableItem_Present, Gold) == 0x000008, "Member 'FJackDataTableItem_Present::Gold' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_Present, ItemId_01) == 0x000010, "Member 'FJackDataTableItem_Present::ItemId_01' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_Present, ItemCount_01) == 0x000018, "Member 'FJackDataTableItem_Present::ItemCount_01' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_Present, ItemId_02) == 0x000020, "Member 'FJackDataTableItem_Present::ItemId_02' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_Present, ItemCount_02) == 0x000028, "Member 'FJackDataTableItem_Present::ItemCount_02' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_Present, ItemId_03) == 0x000030, "Member 'FJackDataTableItem_Present::ItemId_03' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_Present, ItemCount_03) == 0x000038, "Member 'FJackDataTableItem_Present::ItemCount_03' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_Present, ItemId_04) == 0x000040, "Member 'FJackDataTableItem_Present::ItemId_04' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_Present, ItemCount_04) == 0x000048, "Member 'FJackDataTableItem_Present::ItemCount_04' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_Present, TripleDlcNo) == 0x00004C, "Member 'FJackDataTableItem_Present::TripleDlcNo' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotMachineConditionOrbMsg
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMachineConditionOrbMsg final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMachineConditionOrbMsg) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMachineConditionOrbMsg");
static_assert(sizeof(FJackLDT_MeosiSlotMachineConditionOrbMsg) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMachineConditionOrbMsg");

// ScriptStruct JackGame.JackDataTableEquipmentCoordinate
// 0x0088 (0x0090 - 0x0008)
struct FJackDataTableEquipmentCoordinate final : public FTableRowBase
{
public:
	class FName                                   Equipment_Body;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Equipment_Head;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Equipment_Accessory1;                              // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Equipment_Accessory2;                              // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Equipment_OptionalAccessory1;                      // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CoordinateID_P001;                                 // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CoordinateID_P002;                                 // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CoordinateID_P003;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CoordinateID_P004;                                 // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CoordinateID_P004_ShortHair;                       // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CoordinateID_P005;                                 // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CoordinateID_P006;                                 // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CoordinateID_P007;                                 // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CoordinateID_P008;                                 // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAsEquipmentCoordinate;                         // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAsDressupCoordinate;                           // 0x0079(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DisplayPriority;                                   // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID_DisplayName;                                // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID_DisplayDescription;                         // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableEquipmentCoordinate) == 0x000008, "Wrong alignment on FJackDataTableEquipmentCoordinate");
static_assert(sizeof(FJackDataTableEquipmentCoordinate) == 0x000090, "Wrong size on FJackDataTableEquipmentCoordinate");
static_assert(offsetof(FJackDataTableEquipmentCoordinate, Equipment_Body) == 0x000008, "Member 'FJackDataTableEquipmentCoordinate::Equipment_Body' has a wrong offset!");
static_assert(offsetof(FJackDataTableEquipmentCoordinate, Equipment_Head) == 0x000010, "Member 'FJackDataTableEquipmentCoordinate::Equipment_Head' has a wrong offset!");
static_assert(offsetof(FJackDataTableEquipmentCoordinate, Equipment_Accessory1) == 0x000018, "Member 'FJackDataTableEquipmentCoordinate::Equipment_Accessory1' has a wrong offset!");
static_assert(offsetof(FJackDataTableEquipmentCoordinate, Equipment_Accessory2) == 0x000020, "Member 'FJackDataTableEquipmentCoordinate::Equipment_Accessory2' has a wrong offset!");
static_assert(offsetof(FJackDataTableEquipmentCoordinate, Equipment_OptionalAccessory1) == 0x000028, "Member 'FJackDataTableEquipmentCoordinate::Equipment_OptionalAccessory1' has a wrong offset!");
static_assert(offsetof(FJackDataTableEquipmentCoordinate, CoordinateID_P001) == 0x000030, "Member 'FJackDataTableEquipmentCoordinate::CoordinateID_P001' has a wrong offset!");
static_assert(offsetof(FJackDataTableEquipmentCoordinate, CoordinateID_P002) == 0x000038, "Member 'FJackDataTableEquipmentCoordinate::CoordinateID_P002' has a wrong offset!");
static_assert(offsetof(FJackDataTableEquipmentCoordinate, CoordinateID_P003) == 0x000040, "Member 'FJackDataTableEquipmentCoordinate::CoordinateID_P003' has a wrong offset!");
static_assert(offsetof(FJackDataTableEquipmentCoordinate, CoordinateID_P004) == 0x000048, "Member 'FJackDataTableEquipmentCoordinate::CoordinateID_P004' has a wrong offset!");
static_assert(offsetof(FJackDataTableEquipmentCoordinate, CoordinateID_P004_ShortHair) == 0x000050, "Member 'FJackDataTableEquipmentCoordinate::CoordinateID_P004_ShortHair' has a wrong offset!");
static_assert(offsetof(FJackDataTableEquipmentCoordinate, CoordinateID_P005) == 0x000058, "Member 'FJackDataTableEquipmentCoordinate::CoordinateID_P005' has a wrong offset!");
static_assert(offsetof(FJackDataTableEquipmentCoordinate, CoordinateID_P006) == 0x000060, "Member 'FJackDataTableEquipmentCoordinate::CoordinateID_P006' has a wrong offset!");
static_assert(offsetof(FJackDataTableEquipmentCoordinate, CoordinateID_P007) == 0x000068, "Member 'FJackDataTableEquipmentCoordinate::CoordinateID_P007' has a wrong offset!");
static_assert(offsetof(FJackDataTableEquipmentCoordinate, CoordinateID_P008) == 0x000070, "Member 'FJackDataTableEquipmentCoordinate::CoordinateID_P008' has a wrong offset!");
static_assert(offsetof(FJackDataTableEquipmentCoordinate, bUseAsEquipmentCoordinate) == 0x000078, "Member 'FJackDataTableEquipmentCoordinate::bUseAsEquipmentCoordinate' has a wrong offset!");
static_assert(offsetof(FJackDataTableEquipmentCoordinate, bUseAsDressupCoordinate) == 0x000079, "Member 'FJackDataTableEquipmentCoordinate::bUseAsDressupCoordinate' has a wrong offset!");
static_assert(offsetof(FJackDataTableEquipmentCoordinate, DisplayPriority) == 0x00007C, "Member 'FJackDataTableEquipmentCoordinate::DisplayPriority' has a wrong offset!");
static_assert(offsetof(FJackDataTableEquipmentCoordinate, TextID_DisplayName) == 0x000080, "Member 'FJackDataTableEquipmentCoordinate::TextID_DisplayName' has a wrong offset!");
static_assert(offsetof(FJackDataTableEquipmentCoordinate, TextID_DisplayDescription) == 0x000088, "Member 'FJackDataTableEquipmentCoordinate::TextID_DisplayDescription' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotRareMonsterRecluit
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotRareMonsterRecluit final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotRareMonsterRecluit) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotRareMonsterRecluit");
static_assert(sizeof(FJackLDT_MeosiSlotRareMonsterRecluit) == 0x000010, "Wrong size on FJackLDT_MeosiSlotRareMonsterRecluit");

// ScriptStruct JackGame.JackEventBattleMonsterDeployInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackEventBattleMonsterDeployInfo final
{
public:
	class FName                                   MonsterID;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsKeyMonster;                                     // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTextureMipLevelsToBeResident;                     // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackEventBattleMonsterDeployInfo) == 0x000008, "Wrong alignment on FJackEventBattleMonsterDeployInfo");
static_assert(sizeof(FJackEventBattleMonsterDeployInfo) == 0x000010, "Wrong size on FJackEventBattleMonsterDeployInfo");
static_assert(offsetof(FJackEventBattleMonsterDeployInfo, MonsterID) == 0x000000, "Member 'FJackEventBattleMonsterDeployInfo::MonsterID' has a wrong offset!");
static_assert(offsetof(FJackEventBattleMonsterDeployInfo, bIsKeyMonster) == 0x000008, "Member 'FJackEventBattleMonsterDeployInfo::bIsKeyMonster' has a wrong offset!");
static_assert(offsetof(FJackEventBattleMonsterDeployInfo, bTextureMipLevelsToBeResident) == 0x000009, "Member 'FJackEventBattleMonsterDeployInfo::bTextureMipLevelsToBeResident' has a wrong offset!");

// ScriptStruct JackGame.JackBattleResultOverrideVoiceInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackBattleResultOverrideVoiceInfo final
{
public:
	EJackCharacter                                CharacterType;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   VoiceID;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackBattleResultOverrideVoiceInfo) == 0x000008, "Wrong alignment on FJackBattleResultOverrideVoiceInfo");
static_assert(sizeof(FJackBattleResultOverrideVoiceInfo) == 0x000010, "Wrong size on FJackBattleResultOverrideVoiceInfo");
static_assert(offsetof(FJackBattleResultOverrideVoiceInfo, CharacterType) == 0x000000, "Member 'FJackBattleResultOverrideVoiceInfo::CharacterType' has a wrong offset!");
static_assert(offsetof(FJackBattleResultOverrideVoiceInfo, VoiceID) == 0x000008, "Member 'FJackBattleResultOverrideVoiceInfo::VoiceID' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableEventBattle
// 0x0140 (0x0148 - 0x0008)
struct FJackDataTableEventBattle final : public FTableRowBase
{
public:
	TArray<struct FJackEventBattleMonsterDeployInfo> MonsterDeployInfos;                                // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         BattleFieldRadius;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleNigeruConditionType                NigeruConditionType;                               // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBattleFieldNigeruInvalid;                         // 0x001D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackEventBattleRaidState                     RaidState;                                         // 0x001E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipCrashEffect;                                  // 0x001F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              CrashEffectSe;                                     // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipMonsterAppear;                                // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipResult;                                       // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipResultZenmetu;                                // 0x003A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackFadeColor                                StartFadeColor;                                    // 0x003B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartFadeTime;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackFadeColor                                EndFadeColor;                                      // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EndFadeTime;                                       // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AppearDisplayName;                                 // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AppearDisplayName2;                                // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AppearDisplayName3;                                // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AppearDisplayName4;                                // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AppearDisplayName5;                                // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AppearOverwriteMessages;                           // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AppearAddMessages;                                 // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackEventBattleAppearLine                    AppearLineState;                                   // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AppearCameraStartWaitTime;                         // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearPlayTime;                                    // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppearAccompanyingAnimationDelayTime;              // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreparationCameraAngle_Roll;                       // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreparationCameraAngle_Pitch;                      // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreparationCameraAngle_Yaw;                        // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstCameraAngle_Roll;                             // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstCameraAngle_Pitch;                            // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstCameraAngle_Yaw;                              // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndRoundCount;                                     // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToubatuEffectEnable;                              // 0x00AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OverrideToubatuTextID;                             // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NerusenActionCount;                                // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackBattleResultOverrideVoiceInfo> BattleResultOverrideVoiceInfos;                    // 0x00C0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   HiddenExclusionTag;                                // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CameraDataClass;                                   // 0x00D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CameraDataClass_Simple;                            // 0x00F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CameraDataClass_PreparationView;                   // 0x0108(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideBattleFieldInfoRadius;                     // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreFastModeByMonsterAppear;                    // 0x0124(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MapJumpInfo;                                       // 0x0128(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartEventInfo;                                    // 0x0138(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableEventBattle) == 0x000008, "Wrong alignment on FJackDataTableEventBattle");
static_assert(sizeof(FJackDataTableEventBattle) == 0x000148, "Wrong size on FJackDataTableEventBattle");
static_assert(offsetof(FJackDataTableEventBattle, MonsterDeployInfos) == 0x000008, "Member 'FJackDataTableEventBattle::MonsterDeployInfos' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, BattleFieldRadius) == 0x000018, "Member 'FJackDataTableEventBattle::BattleFieldRadius' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, NigeruConditionType) == 0x00001C, "Member 'FJackDataTableEventBattle::NigeruConditionType' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, bBattleFieldNigeruInvalid) == 0x00001D, "Member 'FJackDataTableEventBattle::bBattleFieldNigeruInvalid' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, RaidState) == 0x00001E, "Member 'FJackDataTableEventBattle::RaidState' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, bSkipCrashEffect) == 0x00001F, "Member 'FJackDataTableEventBattle::bSkipCrashEffect' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, CrashEffectSe) == 0x000020, "Member 'FJackDataTableEventBattle::CrashEffectSe' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, bSkipMonsterAppear) == 0x000038, "Member 'FJackDataTableEventBattle::bSkipMonsterAppear' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, bSkipResult) == 0x000039, "Member 'FJackDataTableEventBattle::bSkipResult' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, bSkipResultZenmetu) == 0x00003A, "Member 'FJackDataTableEventBattle::bSkipResultZenmetu' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, StartFadeColor) == 0x00003B, "Member 'FJackDataTableEventBattle::StartFadeColor' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, StartFadeTime) == 0x00003C, "Member 'FJackDataTableEventBattle::StartFadeTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, EndFadeColor) == 0x000040, "Member 'FJackDataTableEventBattle::EndFadeColor' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, EndFadeTime) == 0x000044, "Member 'FJackDataTableEventBattle::EndFadeTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, AppearDisplayName) == 0x000048, "Member 'FJackDataTableEventBattle::AppearDisplayName' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, AppearDisplayName2) == 0x000050, "Member 'FJackDataTableEventBattle::AppearDisplayName2' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, AppearDisplayName3) == 0x000058, "Member 'FJackDataTableEventBattle::AppearDisplayName3' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, AppearDisplayName4) == 0x000060, "Member 'FJackDataTableEventBattle::AppearDisplayName4' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, AppearDisplayName5) == 0x000068, "Member 'FJackDataTableEventBattle::AppearDisplayName5' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, AppearOverwriteMessages) == 0x000070, "Member 'FJackDataTableEventBattle::AppearOverwriteMessages' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, AppearAddMessages) == 0x000078, "Member 'FJackDataTableEventBattle::AppearAddMessages' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, AppearLineState) == 0x000080, "Member 'FJackDataTableEventBattle::AppearLineState' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, AppearCameraStartWaitTime) == 0x000084, "Member 'FJackDataTableEventBattle::AppearCameraStartWaitTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, AppearPlayTime) == 0x000088, "Member 'FJackDataTableEventBattle::AppearPlayTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, AppearAccompanyingAnimationDelayTime) == 0x00008C, "Member 'FJackDataTableEventBattle::AppearAccompanyingAnimationDelayTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, PreparationCameraAngle_Roll) == 0x000090, "Member 'FJackDataTableEventBattle::PreparationCameraAngle_Roll' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, PreparationCameraAngle_Pitch) == 0x000094, "Member 'FJackDataTableEventBattle::PreparationCameraAngle_Pitch' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, PreparationCameraAngle_Yaw) == 0x000098, "Member 'FJackDataTableEventBattle::PreparationCameraAngle_Yaw' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, FirstCameraAngle_Roll) == 0x00009C, "Member 'FJackDataTableEventBattle::FirstCameraAngle_Roll' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, FirstCameraAngle_Pitch) == 0x0000A0, "Member 'FJackDataTableEventBattle::FirstCameraAngle_Pitch' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, FirstCameraAngle_Yaw) == 0x0000A4, "Member 'FJackDataTableEventBattle::FirstCameraAngle_Yaw' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, EndRoundCount) == 0x0000A8, "Member 'FJackDataTableEventBattle::EndRoundCount' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, bToubatuEffectEnable) == 0x0000AC, "Member 'FJackDataTableEventBattle::bToubatuEffectEnable' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, OverrideToubatuTextID) == 0x0000B0, "Member 'FJackDataTableEventBattle::OverrideToubatuTextID' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, NerusenActionCount) == 0x0000B8, "Member 'FJackDataTableEventBattle::NerusenActionCount' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, BattleResultOverrideVoiceInfos) == 0x0000C0, "Member 'FJackDataTableEventBattle::BattleResultOverrideVoiceInfos' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, HiddenExclusionTag) == 0x0000D0, "Member 'FJackDataTableEventBattle::HiddenExclusionTag' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, CameraDataClass) == 0x0000D8, "Member 'FJackDataTableEventBattle::CameraDataClass' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, CameraDataClass_Simple) == 0x0000F0, "Member 'FJackDataTableEventBattle::CameraDataClass_Simple' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, CameraDataClass_PreparationView) == 0x000108, "Member 'FJackDataTableEventBattle::CameraDataClass_PreparationView' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, OverrideBattleFieldInfoRadius) == 0x000120, "Member 'FJackDataTableEventBattle::OverrideBattleFieldInfoRadius' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, bIgnoreFastModeByMonsterAppear) == 0x000124, "Member 'FJackDataTableEventBattle::bIgnoreFastModeByMonsterAppear' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, MapJumpInfo) == 0x000128, "Member 'FJackDataTableEventBattle::MapJumpInfo' has a wrong offset!");
static_assert(offsetof(FJackDataTableEventBattle, StartEventInfo) == 0x000138, "Member 'FJackDataTableEventBattle::StartEventInfo' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotUnionMonsterProb
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotUnionMonsterProb final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotUnionMonsterProb) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotUnionMonsterProb");
static_assert(sizeof(FJackLDT_MeosiSlotUnionMonsterProb) == 0x000010, "Wrong size on FJackLDT_MeosiSlotUnionMonsterProb");

// ScriptStruct JackGame.JackLDT_VoiceDrama_V_080
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_VoiceDrama_V_080 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_VoiceDrama_V_080) == 0x000008, "Wrong alignment on FJackLDT_VoiceDrama_V_080");
static_assert(sizeof(FJackLDT_VoiceDrama_V_080) == 0x000010, "Wrong size on FJackLDT_VoiceDrama_V_080");

// ScriptStruct JackGame.JackLDT_MeosiSlotReelLightOff
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotReelLightOff final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotReelLightOff) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotReelLightOff");
static_assert(sizeof(FJackLDT_MeosiSlotReelLightOff) == 0x000010, "Wrong size on FJackLDT_MeosiSlotReelLightOff");

// ScriptStruct JackGame.JackLDT_VehicleList
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_VehicleList final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_VehicleList) == 0x000008, "Wrong alignment on FJackLDT_VehicleList");
static_assert(sizeof(FJackLDT_VehicleList) == 0x000010, "Wrong size on FJackLDT_VehicleList");

// ScriptStruct JackGame.JackLDT_ZukanMotion
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ZukanMotion final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ZukanMotion) == 0x000008, "Wrong alignment on FJackLDT_ZukanMotion");
static_assert(sizeof(FJackLDT_ZukanMotion) == 0x000010, "Wrong size on FJackLDT_ZukanMotion");

// ScriptStruct JackGame.JackVoiceDramaData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FJackVoiceDramaData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackVoiceDramaData) == 0x000004, "Wrong alignment on FJackVoiceDramaData");
static_assert(sizeof(FJackVoiceDramaData) == 0x000018, "Wrong size on FJackVoiceDramaData");

// ScriptStruct JackGame.JackDataTableFacialAnimCurve
// 0x0038 (0x0040 - 0x0008)
struct FJackDataTableFacialAnimCurve final : public FTableRowBase
{
public:
	class FName                                   CurveName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankingPriority;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         L_EyeFormIndex;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R_EyeFormIndex;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           UnHideBones;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           HideBones;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableFacialAnimCurve) == 0x000008, "Wrong alignment on FJackDataTableFacialAnimCurve");
static_assert(sizeof(FJackDataTableFacialAnimCurve) == 0x000040, "Wrong size on FJackDataTableFacialAnimCurve");
static_assert(offsetof(FJackDataTableFacialAnimCurve, CurveName) == 0x000008, "Member 'FJackDataTableFacialAnimCurve::CurveName' has a wrong offset!");
static_assert(offsetof(FJackDataTableFacialAnimCurve, RankingPriority) == 0x000010, "Member 'FJackDataTableFacialAnimCurve::RankingPriority' has a wrong offset!");
static_assert(offsetof(FJackDataTableFacialAnimCurve, L_EyeFormIndex) == 0x000014, "Member 'FJackDataTableFacialAnimCurve::L_EyeFormIndex' has a wrong offset!");
static_assert(offsetof(FJackDataTableFacialAnimCurve, R_EyeFormIndex) == 0x000018, "Member 'FJackDataTableFacialAnimCurve::R_EyeFormIndex' has a wrong offset!");
static_assert(offsetof(FJackDataTableFacialAnimCurve, UnHideBones) == 0x000020, "Member 'FJackDataTableFacialAnimCurve::UnHideBones' has a wrong offset!");
static_assert(offsetof(FJackDataTableFacialAnimCurve, HideBones) == 0x000030, "Member 'FJackDataTableFacialAnimCurve::HideBones' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_N001_Lerp2BonesAndClamp
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_N001_Lerp2BonesAndClamp final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_N001_Lerp2BonesAndClamp) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_N001_Lerp2BonesAndClamp");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_N001_Lerp2BonesAndClamp) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_N001_Lerp2BonesAndClamp");

// ScriptStruct JackGame.JackDataTableFacialPreset
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableFacialPreset final : public FTableRowBase
{
public:
	class FName                                   UpperFacePose;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   LowerFacePose;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FJackDataTableFacialPreset) == 0x000008, "Wrong alignment on FJackDataTableFacialPreset");
static_assert(sizeof(FJackDataTableFacialPreset) == 0x000018, "Wrong size on FJackDataTableFacialPreset");
static_assert(offsetof(FJackDataTableFacialPreset, UpperFacePose) == 0x000008, "Member 'FJackDataTableFacialPreset::UpperFacePose' has a wrong offset!");
static_assert(offsetof(FJackDataTableFacialPreset, LowerFacePose) == 0x000010, "Member 'FJackDataTableFacialPreset::LowerFacePose' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_TextSerifuFukidasiIE
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextSerifuFukidasiIE final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextSerifuFukidasiIE) == 0x000008, "Wrong alignment on FJackLDT_TextSerifuFukidasiIE");
static_assert(sizeof(FJackLDT_TextSerifuFukidasiIE) == 0x000010, "Wrong size on FJackLDT_TextSerifuFukidasiIE");

// ScriptStruct JackGame.JackAocItem
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FJackAocItem final
{
public:
	uint8                                         Pad_0[0x68];                                       // 0x0000(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAocItem) == 0x000008, "Wrong alignment on FJackAocItem");
static_assert(sizeof(FJackAocItem) == 0x000068, "Wrong size on FJackAocItem");

// ScriptStruct JackGame.JackMonsterSibariChangeParameterInfo
// 0x0008 (0x0008 - 0x0000)
struct FJackMonsterSibariChangeParameterInfo final
{
public:
	EJackMonsterSibariParameterTarget             Target;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterSibariParameterOperator           Operator;                                          // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMonsterSibariChangeParameterInfo) == 0x000004, "Wrong alignment on FJackMonsterSibariChangeParameterInfo");
static_assert(sizeof(FJackMonsterSibariChangeParameterInfo) == 0x000008, "Wrong size on FJackMonsterSibariChangeParameterInfo");
static_assert(offsetof(FJackMonsterSibariChangeParameterInfo, Target) == 0x000000, "Member 'FJackMonsterSibariChangeParameterInfo::Target' has a wrong offset!");
static_assert(offsetof(FJackMonsterSibariChangeParameterInfo, Operator) == 0x000001, "Member 'FJackMonsterSibariChangeParameterInfo::Operator' has a wrong offset!");
static_assert(offsetof(FJackMonsterSibariChangeParameterInfo, Value) == 0x000004, "Member 'FJackMonsterSibariChangeParameterInfo::Value' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMiniGameJackPotTowerCoin
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMiniGameJackPotTowerCoin final : public FTableRowBase
{
public:
	int32                                         Coin;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMiniGameJackPotTowerCoin) == 0x000008, "Wrong alignment on FJackDataTableMiniGameJackPotTowerCoin");
static_assert(sizeof(FJackDataTableMiniGameJackPotTowerCoin) == 0x000010, "Wrong size on FJackDataTableMiniGameJackPotTowerCoin");
static_assert(offsetof(FJackDataTableMiniGameJackPotTowerCoin, Coin) == 0x000008, "Member 'FJackDataTableMiniGameJackPotTowerCoin::Coin' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleB_001
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleB_001 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleB_001) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleB_001");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleB_001) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleB_001");

// ScriptStruct JackGame.JackDataTableMeosiSlotSptContinueProb
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMeosiSlotSptContinueProb final : public FTableRowBase
{
public:
	int32                                         ContProb;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotSptContinueProb) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotSptContinueProb");
static_assert(sizeof(FJackDataTableMeosiSlotSptContinueProb) == 0x000010, "Wrong size on FJackDataTableMeosiSlotSptContinueProb");
static_assert(offsetof(FJackDataTableMeosiSlotSptContinueProb, ContProb) == 0x000008, "Member 'FJackDataTableMeosiSlotSptContinueProb::ContProb' has a wrong offset!");

// ScriptStruct JackGame.JackWeaponStyleAnimMontageTableInfo
// 0x0020 (0x0020 - 0x0000)
struct FJackWeaponStyleAnimMontageTableInfo final
{
public:
	EJackEquippedWeaponStyle                      WeaponStyle;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UDataTable>              AnimMontageTable;                                  // 0x0008(0x0018)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackWeaponStyleAnimMontageTableInfo) == 0x000008, "Wrong alignment on FJackWeaponStyleAnimMontageTableInfo");
static_assert(sizeof(FJackWeaponStyleAnimMontageTableInfo) == 0x000020, "Wrong size on FJackWeaponStyleAnimMontageTableInfo");
static_assert(offsetof(FJackWeaponStyleAnimMontageTableInfo, WeaponStyle) == 0x000000, "Member 'FJackWeaponStyleAnimMontageTableInfo::WeaponStyle' has a wrong offset!");
static_assert(offsetof(FJackWeaponStyleAnimMontageTableInfo, AnimMontageTable) == 0x000008, "Member 'FJackWeaponStyleAnimMontageTableInfo::AnimMontageTable' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableFriendCharacter
// 0x00B0 (0x00B8 - 0x0008)
struct FJackDataTableFriendCharacter final : public FTableRowBase
{
public:
	EJackCharacter                                CharacterType;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackGender                                   Gender;                                            // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackJob                                      Job;                                               // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackGambit                                   DefaultGambit;                                     // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeftHandedness;                                   // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackItem_Bag                                 Bag;                                               // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CharacterBPClass;                                  // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ControlledCharacterBPClass;                        // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   BattleCharacterBPClass;                            // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJackWeaponStyleAnimMontageTableInfo> WeaponStyleAnimMontageTableInfos;                  // 0x0058(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UDataTable*                             DT_LevelUp;                                        // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             DT_ExtraLevelUp;                                   // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   DT_ExtraLevelUp_ReferenceFlagName;                 // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   InitialCoordinateID;                               // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FacialPresetID;                                    // 0x0088(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoicePresetID;                                     // 0x0090(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 AttributeParams;                                   // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   ZoneOddEffectID;                                   // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ZoneUpOddEffectID;                                 // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableFriendCharacter) == 0x000008, "Wrong alignment on FJackDataTableFriendCharacter");
static_assert(sizeof(FJackDataTableFriendCharacter) == 0x0000B8, "Wrong size on FJackDataTableFriendCharacter");
static_assert(offsetof(FJackDataTableFriendCharacter, CharacterType) == 0x000008, "Member 'FJackDataTableFriendCharacter::CharacterType' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacter, Gender) == 0x000009, "Member 'FJackDataTableFriendCharacter::Gender' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacter, Job) == 0x00000A, "Member 'FJackDataTableFriendCharacter::Job' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacter, DefaultGambit) == 0x00000B, "Member 'FJackDataTableFriendCharacter::DefaultGambit' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacter, bLeftHandedness) == 0x00000C, "Member 'FJackDataTableFriendCharacter::bLeftHandedness' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacter, Bag) == 0x00000D, "Member 'FJackDataTableFriendCharacter::Bag' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacter, CharacterBPClass) == 0x000010, "Member 'FJackDataTableFriendCharacter::CharacterBPClass' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacter, ControlledCharacterBPClass) == 0x000028, "Member 'FJackDataTableFriendCharacter::ControlledCharacterBPClass' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacter, BattleCharacterBPClass) == 0x000040, "Member 'FJackDataTableFriendCharacter::BattleCharacterBPClass' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacter, WeaponStyleAnimMontageTableInfos) == 0x000058, "Member 'FJackDataTableFriendCharacter::WeaponStyleAnimMontageTableInfos' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacter, DT_LevelUp) == 0x000068, "Member 'FJackDataTableFriendCharacter::DT_LevelUp' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacter, DT_ExtraLevelUp) == 0x000070, "Member 'FJackDataTableFriendCharacter::DT_ExtraLevelUp' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacter, DT_ExtraLevelUp_ReferenceFlagName) == 0x000078, "Member 'FJackDataTableFriendCharacter::DT_ExtraLevelUp_ReferenceFlagName' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacter, InitialCoordinateID) == 0x000080, "Member 'FJackDataTableFriendCharacter::InitialCoordinateID' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacter, FacialPresetID) == 0x000088, "Member 'FJackDataTableFriendCharacter::FacialPresetID' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacter, VoicePresetID) == 0x000090, "Member 'FJackDataTableFriendCharacter::VoicePresetID' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacter, AttributeParams) == 0x000098, "Member 'FJackDataTableFriendCharacter::AttributeParams' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacter, ZoneOddEffectID) == 0x0000A8, "Member 'FJackDataTableFriendCharacter::ZoneOddEffectID' has a wrong offset!");
static_assert(offsetof(FJackDataTableFriendCharacter, ZoneUpOddEffectID) == 0x0000B0, "Member 'FJackDataTableFriendCharacter::ZoneUpOddEffectID' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableSlotJackPotFractionRange
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableSlotJackPotFractionRange final : public FTableRowBase
{
public:
	float                                         Fraction05;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fraction06;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fraction07;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fraction08;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fraction09;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableSlotJackPotFractionRange) == 0x000008, "Wrong alignment on FJackDataTableSlotJackPotFractionRange");
static_assert(sizeof(FJackDataTableSlotJackPotFractionRange) == 0x000020, "Wrong size on FJackDataTableSlotJackPotFractionRange");
static_assert(offsetof(FJackDataTableSlotJackPotFractionRange, Fraction05) == 0x000008, "Member 'FJackDataTableSlotJackPotFractionRange::Fraction05' has a wrong offset!");
static_assert(offsetof(FJackDataTableSlotJackPotFractionRange, Fraction06) == 0x00000C, "Member 'FJackDataTableSlotJackPotFractionRange::Fraction06' has a wrong offset!");
static_assert(offsetof(FJackDataTableSlotJackPotFractionRange, Fraction07) == 0x000010, "Member 'FJackDataTableSlotJackPotFractionRange::Fraction07' has a wrong offset!");
static_assert(offsetof(FJackDataTableSlotJackPotFractionRange, Fraction08) == 0x000014, "Member 'FJackDataTableSlotJackPotFractionRange::Fraction08' has a wrong offset!");
static_assert(offsetof(FJackDataTableSlotJackPotFractionRange, Fraction09) == 0x000018, "Member 'FJackDataTableSlotJackPotFractionRange::Fraction09' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotFrameLamp
// 0x0002 (0x0002 - 0x0000)
struct FJackMeosiSlotFrameLamp final
{
public:
	EJackMeosiSlotFireLampColor                   Color;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotEffectKeyType                   KeyType;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMeosiSlotFrameLamp) == 0x000001, "Wrong alignment on FJackMeosiSlotFrameLamp");
static_assert(sizeof(FJackMeosiSlotFrameLamp) == 0x000002, "Wrong size on FJackMeosiSlotFrameLamp");
static_assert(offsetof(FJackMeosiSlotFrameLamp, Color) == 0x000000, "Member 'FJackMeosiSlotFrameLamp::Color' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotFrameLamp, KeyType) == 0x000001, "Member 'FJackMeosiSlotFrameLamp::KeyType' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_P004_Skirt_RotCancel
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_P004_Skirt_RotCancel final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_P004_Skirt_RotCancel) == 0x000008, "Wrong alignment on FJackLDT_RtEx_P004_Skirt_RotCancel");
static_assert(sizeof(FJackLDT_RtEx_P004_Skirt_RotCancel) == 0x000010, "Wrong size on FJackLDT_RtEx_P004_Skirt_RotCancel");

// ScriptStruct JackGame.JackDataTableFukkatunojumonGameResumeSettingMonsterZukan
// 0x0028 (0x0030 - 0x0008)
struct FJackDataTableFukkatunojumonGameResumeSettingMonsterZukan final : public FTableRowBase
{
public:
	class FName                                   Category;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Value1;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Value2;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Cmds;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableFukkatunojumonGameResumeSettingMonsterZukan) == 0x000008, "Wrong alignment on FJackDataTableFukkatunojumonGameResumeSettingMonsterZukan");
static_assert(sizeof(FJackDataTableFukkatunojumonGameResumeSettingMonsterZukan) == 0x000030, "Wrong size on FJackDataTableFukkatunojumonGameResumeSettingMonsterZukan");
static_assert(offsetof(FJackDataTableFukkatunojumonGameResumeSettingMonsterZukan, Category) == 0x000008, "Member 'FJackDataTableFukkatunojumonGameResumeSettingMonsterZukan::Category' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonGameResumeSettingMonsterZukan, Value1) == 0x000010, "Member 'FJackDataTableFukkatunojumonGameResumeSettingMonsterZukan::Value1' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonGameResumeSettingMonsterZukan, Value2) == 0x000018, "Member 'FJackDataTableFukkatunojumonGameResumeSettingMonsterZukan::Value2' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonGameResumeSettingMonsterZukan, Cmds) == 0x000020, "Member 'FJackDataTableFukkatunojumonGameResumeSettingMonsterZukan::Cmds' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableFukkatunojumonGameResumeSettingFlag
// 0x0028 (0x0030 - 0x0008)
struct FJackDataTableFukkatunojumonGameResumeSettingFlag final : public FTableRowBase
{
public:
	class FName                                   Category;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Value1;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Value2;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Cmds;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableFukkatunojumonGameResumeSettingFlag) == 0x000008, "Wrong alignment on FJackDataTableFukkatunojumonGameResumeSettingFlag");
static_assert(sizeof(FJackDataTableFukkatunojumonGameResumeSettingFlag) == 0x000030, "Wrong size on FJackDataTableFukkatunojumonGameResumeSettingFlag");
static_assert(offsetof(FJackDataTableFukkatunojumonGameResumeSettingFlag, Category) == 0x000008, "Member 'FJackDataTableFukkatunojumonGameResumeSettingFlag::Category' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonGameResumeSettingFlag, Value1) == 0x000010, "Member 'FJackDataTableFukkatunojumonGameResumeSettingFlag::Value1' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonGameResumeSettingFlag, Value2) == 0x000018, "Member 'FJackDataTableFukkatunojumonGameResumeSettingFlag::Value2' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonGameResumeSettingFlag, Cmds) == 0x000020, "Member 'FJackDataTableFukkatunojumonGameResumeSettingFlag::Cmds' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotMonsterResource
// 0x0030 (0x0038 - 0x0008)
struct FJackDataTableMeosiSlotMonsterResource final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture>                PanelTexture;                                      // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                BattleTexture;                                     // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotMonsterResource) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotMonsterResource");
static_assert(sizeof(FJackDataTableMeosiSlotMonsterResource) == 0x000038, "Wrong size on FJackDataTableMeosiSlotMonsterResource");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterResource, PanelTexture) == 0x000008, "Member 'FJackDataTableMeosiSlotMonsterResource::PanelTexture' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterResource, BattleTexture) == 0x000020, "Member 'FJackDataTableMeosiSlotMonsterResource::BattleTexture' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableFukkatunojumonLevelUpTable
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableFukkatunojumonLevelUpTable final : public FTableRowBase
{
public:
	int32                                         DQ1_RequiredExp;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DQ2_RequiredExp;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableFukkatunojumonLevelUpTable) == 0x000008, "Wrong alignment on FJackDataTableFukkatunojumonLevelUpTable");
static_assert(sizeof(FJackDataTableFukkatunojumonLevelUpTable) == 0x000010, "Wrong size on FJackDataTableFukkatunojumonLevelUpTable");
static_assert(offsetof(FJackDataTableFukkatunojumonLevelUpTable, DQ1_RequiredExp) == 0x000008, "Member 'FJackDataTableFukkatunojumonLevelUpTable::DQ1_RequiredExp' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonLevelUpTable, DQ2_RequiredExp) == 0x00000C, "Member 'FJackDataTableFukkatunojumonLevelUpTable::DQ2_RequiredExp' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableRouletteTreasureCoin
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableRouletteTreasureCoin final : public FTableRowBase
{
public:
	int32                                         Fraction;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Range;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Probability;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableRouletteTreasureCoin) == 0x000008, "Wrong alignment on FJackDataTableRouletteTreasureCoin");
static_assert(sizeof(FJackDataTableRouletteTreasureCoin) == 0x000018, "Wrong size on FJackDataTableRouletteTreasureCoin");
static_assert(offsetof(FJackDataTableRouletteTreasureCoin, Fraction) == 0x000008, "Member 'FJackDataTableRouletteTreasureCoin::Fraction' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteTreasureCoin, Range) == 0x00000C, "Member 'FJackDataTableRouletteTreasureCoin::Range' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteTreasureCoin, Probability) == 0x000010, "Member 'FJackDataTableRouletteTreasureCoin::Probability' has a wrong offset!");

// ScriptStruct JackGame.JackActionFieldTextInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackActionFieldTextInfo final
{
public:
	class FName                                   Message;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionFieldTextType                      Timming;                                           // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackActionFieldTextInfo) == 0x000008, "Wrong alignment on FJackActionFieldTextInfo");
static_assert(sizeof(FJackActionFieldTextInfo) == 0x000010, "Wrong size on FJackActionFieldTextInfo");
static_assert(offsetof(FJackActionFieldTextInfo, Message) == 0x000000, "Member 'FJackActionFieldTextInfo::Message' has a wrong offset!");
static_assert(offsetof(FJackActionFieldTextInfo, Timming) == 0x000008, "Member 'FJackActionFieldTextInfo::Timming' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_SimRearHood
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_SimRearHood final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_SimRearHood) == 0x000008, "Wrong alignment on FJackLDT_SimRearHood");
static_assert(sizeof(FJackLDT_SimRearHood) == 0x000010, "Wrong size on FJackLDT_SimRearHood");

// ScriptStruct JackGame.JackDataTableFukkatunojumonScenarioProgress
// 0x0060 (0x0068 - 0x0008)
struct FJackDataTableFukkatunojumonScenarioProgress final : public FTableRowBase
{
public:
	int32                                         ScenarioProgress;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnScenarioProgress;                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FlagCategory;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FlagId;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RestartPoint;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ScenarioStartFlag;                                 // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ScenarioTitleNameId;                               // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScenarioDescriptionId;                             // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                ScenarioTexture;                                   // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  RestartPoints;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         TripleReturnScenarioProgress;                      // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableFukkatunojumonScenarioProgress) == 0x000008, "Wrong alignment on FJackDataTableFukkatunojumonScenarioProgress");
static_assert(sizeof(FJackDataTableFukkatunojumonScenarioProgress) == 0x000068, "Wrong size on FJackDataTableFukkatunojumonScenarioProgress");
static_assert(offsetof(FJackDataTableFukkatunojumonScenarioProgress, ScenarioProgress) == 0x000008, "Member 'FJackDataTableFukkatunojumonScenarioProgress::ScenarioProgress' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonScenarioProgress, ReturnScenarioProgress) == 0x00000C, "Member 'FJackDataTableFukkatunojumonScenarioProgress::ReturnScenarioProgress' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonScenarioProgress, FlagCategory) == 0x000010, "Member 'FJackDataTableFukkatunojumonScenarioProgress::FlagCategory' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonScenarioProgress, FlagId) == 0x000018, "Member 'FJackDataTableFukkatunojumonScenarioProgress::FlagId' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonScenarioProgress, RestartPoint) == 0x000020, "Member 'FJackDataTableFukkatunojumonScenarioProgress::RestartPoint' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonScenarioProgress, ScenarioStartFlag) == 0x000024, "Member 'FJackDataTableFukkatunojumonScenarioProgress::ScenarioStartFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonScenarioProgress, ScenarioTitleNameId) == 0x000028, "Member 'FJackDataTableFukkatunojumonScenarioProgress::ScenarioTitleNameId' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonScenarioProgress, ScenarioDescriptionId) == 0x000030, "Member 'FJackDataTableFukkatunojumonScenarioProgress::ScenarioDescriptionId' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonScenarioProgress, ScenarioTexture) == 0x000038, "Member 'FJackDataTableFukkatunojumonScenarioProgress::ScenarioTexture' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonScenarioProgress, RestartPoints) == 0x000050, "Member 'FJackDataTableFukkatunojumonScenarioProgress::RestartPoints' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonScenarioProgress, TripleReturnScenarioProgress) == 0x000060, "Member 'FJackDataTableFukkatunojumonScenarioProgress::TripleReturnScenarioProgress' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_CutSceneDynamicResolutionInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_CutSceneDynamicResolutionInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_CutSceneDynamicResolutionInfo) == 0x000008, "Wrong alignment on FJackLDT_CutSceneDynamicResolutionInfo");
static_assert(sizeof(FJackLDT_CutSceneDynamicResolutionInfo) == 0x000010, "Wrong size on FJackLDT_CutSceneDynamicResolutionInfo");

// ScriptStruct JackGame.JackDataTableFukkatunojumonRestartTable2D
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableFukkatunojumonRestartTable2D final : public FTableRowBase
{
public:
	int32                                         EmbarkationMapId;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EmbarkationLocatorId;                              // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EmbarkationAnchorageId;                            // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RespawnShipPointId;                                // 0x000E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RespawnMapId;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RespawnMapJumpLocatorId;                           // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RespawnEventType;                                  // 0x0015(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PrevScenarioId;                                    // 0x0016(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PrevScenarioFlag;                                  // 0x0017(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrevCutSceneId;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableFukkatunojumonRestartTable2D) == 0x000008, "Wrong alignment on FJackDataTableFukkatunojumonRestartTable2D");
static_assert(sizeof(FJackDataTableFukkatunojumonRestartTable2D) == 0x000020, "Wrong size on FJackDataTableFukkatunojumonRestartTable2D");
static_assert(offsetof(FJackDataTableFukkatunojumonRestartTable2D, EmbarkationMapId) == 0x000008, "Member 'FJackDataTableFukkatunojumonRestartTable2D::EmbarkationMapId' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonRestartTable2D, EmbarkationLocatorId) == 0x00000C, "Member 'FJackDataTableFukkatunojumonRestartTable2D::EmbarkationLocatorId' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonRestartTable2D, EmbarkationAnchorageId) == 0x00000D, "Member 'FJackDataTableFukkatunojumonRestartTable2D::EmbarkationAnchorageId' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonRestartTable2D, RespawnShipPointId) == 0x00000E, "Member 'FJackDataTableFukkatunojumonRestartTable2D::RespawnShipPointId' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonRestartTable2D, RespawnMapId) == 0x000010, "Member 'FJackDataTableFukkatunojumonRestartTable2D::RespawnMapId' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonRestartTable2D, RespawnMapJumpLocatorId) == 0x000014, "Member 'FJackDataTableFukkatunojumonRestartTable2D::RespawnMapJumpLocatorId' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonRestartTable2D, RespawnEventType) == 0x000015, "Member 'FJackDataTableFukkatunojumonRestartTable2D::RespawnEventType' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonRestartTable2D, PrevScenarioId) == 0x000016, "Member 'FJackDataTableFukkatunojumonRestartTable2D::PrevScenarioId' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonRestartTable2D, PrevScenarioFlag) == 0x000017, "Member 'FJackDataTableFukkatunojumonRestartTable2D::PrevScenarioFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableFukkatunojumonRestartTable2D, PrevCutSceneId) == 0x000018, "Member 'FJackDataTableFukkatunojumonRestartTable2D::PrevCutSceneId' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Sim_DancerSkirt_low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_DancerSkirt_low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_DancerSkirt_low) == 0x000008, "Wrong alignment on FJackLDT_Sim_DancerSkirt_low");
static_assert(sizeof(FJackLDT_Sim_DancerSkirt_low) == 0x000010, "Wrong size on FJackLDT_Sim_DancerSkirt_low");

// ScriptStruct JackGame.JackLDT_RtEx_FtSkirt_Length3_N010_AverageRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FtSkirt_Length3_N010_AverageRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FtSkirt_Length3_N010_AverageRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FtSkirt_Length3_N010_AverageRot");
static_assert(sizeof(FJackLDT_RtEx_FtSkirt_Length3_N010_AverageRot) == 0x000010, "Wrong size on FJackLDT_RtEx_FtSkirt_Length3_N010_AverageRot");

// ScriptStruct JackGame.JackDataTableGameFlag
// 0x0030 (0x0038 - 0x0008)
struct FJackDataTableGameFlag : public FTableRowBase
{
public:
	EJackGameFlagCategory                         Category;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FlagNo;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackGameFlagDataType                         DataType;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DefaultValue;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bReadOnly : 1;                                     // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCarryOver : 1;                                    // 0x0030(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bResistLoad : 1;                                   // 0x0030(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableGameFlag) == 0x000008, "Wrong alignment on FJackDataTableGameFlag");
static_assert(sizeof(FJackDataTableGameFlag) == 0x000038, "Wrong size on FJackDataTableGameFlag");
static_assert(offsetof(FJackDataTableGameFlag, Category) == 0x000008, "Member 'FJackDataTableGameFlag::Category' has a wrong offset!");
static_assert(offsetof(FJackDataTableGameFlag, FlagNo) == 0x000010, "Member 'FJackDataTableGameFlag::FlagNo' has a wrong offset!");
static_assert(offsetof(FJackDataTableGameFlag, DataType) == 0x000018, "Member 'FJackDataTableGameFlag::DataType' has a wrong offset!");
static_assert(offsetof(FJackDataTableGameFlag, DefaultValue) == 0x000020, "Member 'FJackDataTableGameFlag::DefaultValue' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_FtSkirt_Length2_AverageRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FtSkirt_Length2_AverageRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FtSkirt_Length2_AverageRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FtSkirt_Length2_AverageRot");
static_assert(sizeof(FJackLDT_RtEx_FtSkirt_Length2_AverageRot) == 0x000010, "Wrong size on FJackLDT_RtEx_FtSkirt_Length2_AverageRot");

// ScriptStruct JackGame.JackDataTableGameFlagCutScene
// 0x0008 (0x0040 - 0x0038)
struct FJackDataTableGameFlagCutScene final : public FJackDataTableGameFlag
{
public:
	bool                                          bCutSceneFlag;                                     // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableGameFlagCutScene) == 0x000008, "Wrong alignment on FJackDataTableGameFlagCutScene");
static_assert(sizeof(FJackDataTableGameFlagCutScene) == 0x000040, "Wrong size on FJackDataTableGameFlagCutScene");
static_assert(offsetof(FJackDataTableGameFlagCutScene, bCutSceneFlag) == 0x000038, "Member 'FJackDataTableGameFlagCutScene::bCutSceneFlag' has a wrong offset!");

// ScriptStruct JackGame.JackVoiceTimelineBlinkEnableKey
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FJackVoiceTimelineBlinkEnableKey final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackVoiceTimelineBlinkEnableKey) == 0x000004, "Wrong alignment on FJackVoiceTimelineBlinkEnableKey");
static_assert(sizeof(FJackVoiceTimelineBlinkEnableKey) == 0x000008, "Wrong size on FJackVoiceTimelineBlinkEnableKey");

// ScriptStruct JackGame.JackLDT_RtEx_FBSkirtB1_Lerp2BonesAndClamp
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FBSkirtB1_Lerp2BonesAndClamp final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FBSkirtB1_Lerp2BonesAndClamp) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FBSkirtB1_Lerp2BonesAndClamp");
static_assert(sizeof(FJackLDT_RtEx_FBSkirtB1_Lerp2BonesAndClamp) == 0x000010, "Wrong size on FJackLDT_RtEx_FBSkirtB1_Lerp2BonesAndClamp");

// ScriptStruct JackGame.JackDataTableGameFlagScenario
// 0x0008 (0x0040 - 0x0038)
struct FJackDataTableGameFlagScenario final : public FJackDataTableGameFlag
{
public:
	bool                                          bScenarioFlag;                                     // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScenarioFlagLVD;                                  // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdatesLatestFlag;                                // 0x003A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackScenarioID                               ScenarioID;                                        // 0x003B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScenarioFlagIndex;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableGameFlagScenario) == 0x000008, "Wrong alignment on FJackDataTableGameFlagScenario");
static_assert(sizeof(FJackDataTableGameFlagScenario) == 0x000040, "Wrong size on FJackDataTableGameFlagScenario");
static_assert(offsetof(FJackDataTableGameFlagScenario, bScenarioFlag) == 0x000038, "Member 'FJackDataTableGameFlagScenario::bScenarioFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableGameFlagScenario, bScenarioFlagLVD) == 0x000039, "Member 'FJackDataTableGameFlagScenario::bScenarioFlagLVD' has a wrong offset!");
static_assert(offsetof(FJackDataTableGameFlagScenario, bUpdatesLatestFlag) == 0x00003A, "Member 'FJackDataTableGameFlagScenario::bUpdatesLatestFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableGameFlagScenario, ScenarioID) == 0x00003B, "Member 'FJackDataTableGameFlagScenario::ScenarioID' has a wrong offset!");
static_assert(offsetof(FJackDataTableGameFlagScenario, ScenarioFlagIndex) == 0x00003C, "Member 'FJackDataTableGameFlagScenario::ScenarioFlagIndex' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotDrakeeEffect
// 0x0038 (0x0040 - 0x0008)
struct FJackDataTableMeosiSlotDrakeeEffect final : public FTableRowBase
{
public:
	int32                                         Nothing;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Single;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gust;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Calm;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Double_A;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Double_B;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Double_C;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tripple;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Square;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DogLeg;                                            // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         V_Shaped;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Back_Slash;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minus;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Flock;                                             // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotDrakeeEffect) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotDrakeeEffect");
static_assert(sizeof(FJackDataTableMeosiSlotDrakeeEffect) == 0x000040, "Wrong size on FJackDataTableMeosiSlotDrakeeEffect");
static_assert(offsetof(FJackDataTableMeosiSlotDrakeeEffect, Nothing) == 0x000008, "Member 'FJackDataTableMeosiSlotDrakeeEffect::Nothing' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotDrakeeEffect, Single) == 0x00000C, "Member 'FJackDataTableMeosiSlotDrakeeEffect::Single' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotDrakeeEffect, Gust) == 0x000010, "Member 'FJackDataTableMeosiSlotDrakeeEffect::Gust' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotDrakeeEffect, Calm) == 0x000014, "Member 'FJackDataTableMeosiSlotDrakeeEffect::Calm' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotDrakeeEffect, Double_A) == 0x000018, "Member 'FJackDataTableMeosiSlotDrakeeEffect::Double_A' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotDrakeeEffect, Double_B) == 0x00001C, "Member 'FJackDataTableMeosiSlotDrakeeEffect::Double_B' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotDrakeeEffect, Double_C) == 0x000020, "Member 'FJackDataTableMeosiSlotDrakeeEffect::Double_C' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotDrakeeEffect, Tripple) == 0x000024, "Member 'FJackDataTableMeosiSlotDrakeeEffect::Tripple' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotDrakeeEffect, Square) == 0x000028, "Member 'FJackDataTableMeosiSlotDrakeeEffect::Square' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotDrakeeEffect, DogLeg) == 0x00002C, "Member 'FJackDataTableMeosiSlotDrakeeEffect::DogLeg' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotDrakeeEffect, V_Shaped) == 0x000030, "Member 'FJackDataTableMeosiSlotDrakeeEffect::V_Shaped' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotDrakeeEffect, Back_Slash) == 0x000034, "Member 'FJackDataTableMeosiSlotDrakeeEffect::Back_Slash' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotDrakeeEffect, Minus) == 0x000038, "Member 'FJackDataTableMeosiSlotDrakeeEffect::Minus' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotDrakeeEffect, Flock) == 0x00003C, "Member 'FJackDataTableMeosiSlotDrakeeEffect::Flock' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_V006_Upper
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_V006_Upper final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_V006_Upper) == 0x000008, "Wrong alignment on FJackLDT_V006_Upper");
static_assert(sizeof(FJackLDT_V006_Upper) == 0x000010, "Wrong size on FJackLDT_V006_Upper");

// ScriptStruct JackGame.JackDataTableGuestNPCList
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableGuestNPCList final : public FTableRowBase
{
public:
	EJackCharacter                                JackCharacter;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                NormalizedJackCharacter;                           // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NPCID;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableGuestNPCList) == 0x000008, "Wrong alignment on FJackDataTableGuestNPCList");
static_assert(sizeof(FJackDataTableGuestNPCList) == 0x000020, "Wrong size on FJackDataTableGuestNPCList");
static_assert(offsetof(FJackDataTableGuestNPCList, JackCharacter) == 0x000008, "Member 'FJackDataTableGuestNPCList::JackCharacter' has a wrong offset!");
static_assert(offsetof(FJackDataTableGuestNPCList, NormalizedJackCharacter) == 0x000009, "Member 'FJackDataTableGuestNPCList::NormalizedJackCharacter' has a wrong offset!");
static_assert(offsetof(FJackDataTableGuestNPCList, NPCID) == 0x000010, "Member 'FJackDataTableGuestNPCList::NPCID' has a wrong offset!");
static_assert(offsetof(FJackDataTableGuestNPCList, Height) == 0x000018, "Member 'FJackDataTableGuestNPCList::Height' has a wrong offset!");

// ScriptStruct JackGame.JackPartyTalkRelativePosition
// 0x000C (0x000C - 0x0000)
struct FJackPartyTalkRelativePosition final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackPartyTalkRelativePosition) == 0x000004, "Wrong alignment on FJackPartyTalkRelativePosition");
static_assert(sizeof(FJackPartyTalkRelativePosition) == 0x00000C, "Wrong size on FJackPartyTalkRelativePosition");
static_assert(offsetof(FJackPartyTalkRelativePosition, X) == 0x000000, "Member 'FJackPartyTalkRelativePosition::X' has a wrong offset!");
static_assert(offsetof(FJackPartyTalkRelativePosition, Y) == 0x000004, "Member 'FJackPartyTalkRelativePosition::Y' has a wrong offset!");
static_assert(offsetof(FJackPartyTalkRelativePosition, Yaw) == 0x000008, "Member 'FJackPartyTalkRelativePosition::Yaw' has a wrong offset!");

// ScriptStruct JackGame.JackDataTablePokerInexpensiveCoin
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTablePokerInexpensiveCoin final : public FTableRowBase
{
public:
	int32                                         Fraction;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Range;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTablePokerInexpensiveCoin) == 0x000008, "Wrong alignment on FJackDataTablePokerInexpensiveCoin");
static_assert(sizeof(FJackDataTablePokerInexpensiveCoin) == 0x000010, "Wrong size on FJackDataTablePokerInexpensiveCoin");
static_assert(offsetof(FJackDataTablePokerInexpensiveCoin, Fraction) == 0x000008, "Member 'FJackDataTablePokerInexpensiveCoin::Fraction' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerInexpensiveCoin, Range) == 0x00000C, "Member 'FJackDataTablePokerInexpensiveCoin::Range' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_Skirt_Length3_TransSyncRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_Skirt_Length3_TransSyncRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_Skirt_Length3_TransSyncRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_Skirt_Length3_TransSyncRot");
static_assert(sizeof(FJackLDT_RtEx_Skirt_Length3_TransSyncRot) == 0x000010, "Wrong size on FJackLDT_RtEx_Skirt_Length3_TransSyncRot");

// ScriptStruct JackGame.JackDataTableHiddenBonesDef
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableHiddenBonesDef final : public FTableRowBase
{
public:
	TArray<class FName>                           TargetBones;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FJackDataTableHiddenBonesDef) == 0x000008, "Wrong alignment on FJackDataTableHiddenBonesDef");
static_assert(sizeof(FJackDataTableHiddenBonesDef) == 0x000018, "Wrong size on FJackDataTableHiddenBonesDef");
static_assert(offsetof(FJackDataTableHiddenBonesDef, TargetBones) == 0x000008, "Member 'FJackDataTableHiddenBonesDef::TargetBones' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableItem_Equipment
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableItem_Equipment final : public FTableRowBase
{
public:
	EJackItem_Classification                      Classification;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackEquipmentMultiple                        EquipmentMultiple;                                 // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackEquipmentRegion                          EquipmentRegion;                                   // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackEquipmentRegion                          MultipleEquipmentRegion;                           // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackEquipmentRegion                          ReleaseRegion;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStoreEquipmentBag;                                // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableItem_Equipment) == 0x000008, "Wrong alignment on FJackDataTableItem_Equipment");
static_assert(sizeof(FJackDataTableItem_Equipment) == 0x000010, "Wrong size on FJackDataTableItem_Equipment");
static_assert(offsetof(FJackDataTableItem_Equipment, Classification) == 0x000008, "Member 'FJackDataTableItem_Equipment::Classification' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_Equipment, EquipmentMultiple) == 0x000009, "Member 'FJackDataTableItem_Equipment::EquipmentMultiple' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_Equipment, EquipmentRegion) == 0x00000A, "Member 'FJackDataTableItem_Equipment::EquipmentRegion' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_Equipment, MultipleEquipmentRegion) == 0x00000B, "Member 'FJackDataTableItem_Equipment::MultipleEquipmentRegion' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_Equipment, ReleaseRegion) == 0x00000C, "Member 'FJackDataTableItem_Equipment::ReleaseRegion' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_Equipment, bStoreEquipmentBag) == 0x00000D, "Member 'FJackDataTableItem_Equipment::bStoreEquipmentBag' has a wrong offset!");

// ScriptStruct JackGame.JackMedal_StampPressPage
// 0x0020 (0x0020 - 0x0000)
struct FJackMedal_StampPressPage final
{
public:
	int32                                         StampNumber;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ItemIDList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EJackMedal_StampPage                          PageType;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bComplete;                                         // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMedal_StampPressPage) == 0x000008, "Wrong alignment on FJackMedal_StampPressPage");
static_assert(sizeof(FJackMedal_StampPressPage) == 0x000020, "Wrong size on FJackMedal_StampPressPage");
static_assert(offsetof(FJackMedal_StampPressPage, StampNumber) == 0x000000, "Member 'FJackMedal_StampPressPage::StampNumber' has a wrong offset!");
static_assert(offsetof(FJackMedal_StampPressPage, ItemIDList) == 0x000008, "Member 'FJackMedal_StampPressPage::ItemIDList' has a wrong offset!");
static_assert(offsetof(FJackMedal_StampPressPage, PageType) == 0x000018, "Member 'FJackMedal_StampPressPage::PageType' has a wrong offset!");
static_assert(offsetof(FJackMedal_StampPressPage, bComplete) == 0x000019, "Member 'FJackMedal_StampPressPage::bComplete' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableItem_EventGet
// 0x0048 (0x0050 - 0x0008)
struct FJackDataTableItem_EventGet final : public FTableRowBase
{
public:
	int32                                         Gold;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemID;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNumber;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TextID;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MeId;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SeAsset;                                           // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableItem_EventGet) == 0x000008, "Wrong alignment on FJackDataTableItem_EventGet");
static_assert(sizeof(FJackDataTableItem_EventGet) == 0x000050, "Wrong size on FJackDataTableItem_EventGet");
static_assert(offsetof(FJackDataTableItem_EventGet, Gold) == 0x000008, "Member 'FJackDataTableItem_EventGet::Gold' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_EventGet, ItemID) == 0x000010, "Member 'FJackDataTableItem_EventGet::ItemID' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_EventGet, ItemNumber) == 0x000018, "Member 'FJackDataTableItem_EventGet::ItemNumber' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_EventGet, TextID) == 0x000020, "Member 'FJackDataTableItem_EventGet::TextID' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_EventGet, MeId) == 0x000028, "Member 'FJackDataTableItem_EventGet::MeId' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_EventGet, SeAsset) == 0x000038, "Member 'FJackDataTableItem_EventGet::SeAsset' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_D09
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_D09 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_D09) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_D09");
static_assert(sizeof(FJackLDT_MonsterDeploy_D09) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_D09");

// ScriptStruct JackGame.JackDataTablePokerPayoutProbability
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTablePokerPayoutProbability final : public FTableRowBase
{
public:
	float                                         Win;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Draw;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lose;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTablePokerPayoutProbability) == 0x000008, "Wrong alignment on FJackDataTablePokerPayoutProbability");
static_assert(sizeof(FJackDataTablePokerPayoutProbability) == 0x000018, "Wrong size on FJackDataTablePokerPayoutProbability");
static_assert(offsetof(FJackDataTablePokerPayoutProbability, Win) == 0x000008, "Member 'FJackDataTablePokerPayoutProbability::Win' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerPayoutProbability, Draw) == 0x00000C, "Member 'FJackDataTablePokerPayoutProbability::Draw' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerPayoutProbability, Lose) == 0x000010, "Member 'FJackDataTablePokerPayoutProbability::Lose' has a wrong offset!");

// ScriptStruct JackGame.JackDataTable_MultiVoice
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTable_MultiVoice final : public FTableRowBase
{
public:
	bool                                          bFlag;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTable_MultiVoice) == 0x000008, "Wrong alignment on FJackDataTable_MultiVoice");
static_assert(sizeof(FJackDataTable_MultiVoice) == 0x000010, "Wrong size on FJackDataTable_MultiVoice");
static_assert(offsetof(FJackDataTable_MultiVoice, bFlag) == 0x000008, "Member 'FJackDataTable_MultiVoice::bFlag' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotHandProbability
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotHandProbability final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotHandProbability) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotHandProbability");
static_assert(sizeof(FJackLDT_MeosiSlotHandProbability) == 0x000010, "Wrong size on FJackLDT_MeosiSlotHandProbability");

// ScriptStruct JackGame.JackLDT_UIMessageSpeed
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UIMessageSpeed final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UIMessageSpeed) == 0x000008, "Wrong alignment on FJackLDT_UIMessageSpeed");
static_assert(sizeof(FJackLDT_UIMessageSpeed) == 0x000010, "Wrong size on FJackLDT_UIMessageSpeed");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_P008_Up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_P008_Up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_P008_Up) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_P008_Up");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_P008_Up) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_P008_Up");

// ScriptStruct JackGame.JackDataTableItem_Seed
// 0x0028 (0x0030 - 0x0008)
struct FJackDataTableItem_Seed final : public FTableRowBase
{
public:
	int32                                         ParameterCorrection_Tikara;                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParameterCorrection_Minomamori;                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParameterCorrection_Subayasa;                      // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParameterCorrection_Kiyousa;                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParameterCorrection_Miryoku;                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParameterCorrection_KougekiMaryoku;                // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParameterCorrection_KaifukuMaryoku;                // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParameterCorrection_MaxHP;                         // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParameterCorrection_MaxMP;                         // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParameterCorrection_TokugiPoint;                   // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableItem_Seed) == 0x000008, "Wrong alignment on FJackDataTableItem_Seed");
static_assert(sizeof(FJackDataTableItem_Seed) == 0x000030, "Wrong size on FJackDataTableItem_Seed");
static_assert(offsetof(FJackDataTableItem_Seed, ParameterCorrection_Tikara) == 0x000008, "Member 'FJackDataTableItem_Seed::ParameterCorrection_Tikara' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_Seed, ParameterCorrection_Minomamori) == 0x00000C, "Member 'FJackDataTableItem_Seed::ParameterCorrection_Minomamori' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_Seed, ParameterCorrection_Subayasa) == 0x000010, "Member 'FJackDataTableItem_Seed::ParameterCorrection_Subayasa' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_Seed, ParameterCorrection_Kiyousa) == 0x000014, "Member 'FJackDataTableItem_Seed::ParameterCorrection_Kiyousa' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_Seed, ParameterCorrection_Miryoku) == 0x000018, "Member 'FJackDataTableItem_Seed::ParameterCorrection_Miryoku' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_Seed, ParameterCorrection_KougekiMaryoku) == 0x00001C, "Member 'FJackDataTableItem_Seed::ParameterCorrection_KougekiMaryoku' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_Seed, ParameterCorrection_KaifukuMaryoku) == 0x000020, "Member 'FJackDataTableItem_Seed::ParameterCorrection_KaifukuMaryoku' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_Seed, ParameterCorrection_MaxHP) == 0x000024, "Member 'FJackDataTableItem_Seed::ParameterCorrection_MaxHP' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_Seed, ParameterCorrection_MaxMP) == 0x000028, "Member 'FJackDataTableItem_Seed::ParameterCorrection_MaxMP' has a wrong offset!");
static_assert(offsetof(FJackDataTableItem_Seed, ParameterCorrection_TokugiPoint) == 0x00002C, "Member 'FJackDataTableItem_Seed::ParameterCorrection_TokugiPoint' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableItemGettable_Common
// 0x0060 (0x0068 - 0x0008)
struct FJackDataTableItemGettable_Common final : public FTableRowBase
{
public:
	class FName                                   GetFlag;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackGettableCommonPurpose                    Purpose;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MapVolumeID_001;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapVolumeID_002;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapVolumeID_003;                                   // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold;                                              // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemID_001;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum_001;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemID_002;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum_002;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemID_003;                                        // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum_003;                                       // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableItemGettable_Common) == 0x000008, "Wrong alignment on FJackDataTableItemGettable_Common");
static_assert(sizeof(FJackDataTableItemGettable_Common) == 0x000068, "Wrong size on FJackDataTableItemGettable_Common");
static_assert(offsetof(FJackDataTableItemGettable_Common, GetFlag) == 0x000008, "Member 'FJackDataTableItemGettable_Common::GetFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_Common, Purpose) == 0x000010, "Member 'FJackDataTableItemGettable_Common::Purpose' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_Common, MapVolumeID_001) == 0x000018, "Member 'FJackDataTableItemGettable_Common::MapVolumeID_001' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_Common, MapVolumeID_002) == 0x000020, "Member 'FJackDataTableItemGettable_Common::MapVolumeID_002' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_Common, MapVolumeID_003) == 0x000028, "Member 'FJackDataTableItemGettable_Common::MapVolumeID_003' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_Common, Gold) == 0x000030, "Member 'FJackDataTableItemGettable_Common::Gold' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_Common, ItemID_001) == 0x000038, "Member 'FJackDataTableItemGettable_Common::ItemID_001' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_Common, ItemNum_001) == 0x000040, "Member 'FJackDataTableItemGettable_Common::ItemNum_001' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_Common, ItemID_002) == 0x000048, "Member 'FJackDataTableItemGettable_Common::ItemID_002' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_Common, ItemNum_002) == 0x000050, "Member 'FJackDataTableItemGettable_Common::ItemNum_002' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_Common, ItemID_003) == 0x000058, "Member 'FJackDataTableItemGettable_Common::ItemID_003' has a wrong offset!");
static_assert(offsetof(FJackDataTableItemGettable_Common, ItemNum_003) == 0x000060, "Member 'FJackDataTableItemGettable_Common::ItemNum_003' has a wrong offset!");

// ScriptStruct JackGame.JackUMGSoubiWindowMitameAdjust
// 0x000C (0x000C - 0x0000)
struct FJackUMGSoubiWindowMitameAdjust final
{
public:
	float                                         TitlePanelSizeX;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StatusPanelSizeX;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SetumeiPanelPosX;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGSoubiWindowMitameAdjust) == 0x000004, "Wrong alignment on FJackUMGSoubiWindowMitameAdjust");
static_assert(sizeof(FJackUMGSoubiWindowMitameAdjust) == 0x00000C, "Wrong size on FJackUMGSoubiWindowMitameAdjust");
static_assert(offsetof(FJackUMGSoubiWindowMitameAdjust, TitlePanelSizeX) == 0x000000, "Member 'FJackUMGSoubiWindowMitameAdjust::TitlePanelSizeX' has a wrong offset!");
static_assert(offsetof(FJackUMGSoubiWindowMitameAdjust, StatusPanelSizeX) == 0x000004, "Member 'FJackUMGSoubiWindowMitameAdjust::StatusPanelSizeX' has a wrong offset!");
static_assert(offsetof(FJackUMGSoubiWindowMitameAdjust, SetumeiPanelPosX) == 0x000008, "Member 'FJackUMGSoubiWindowMitameAdjust::SetumeiPanelPosX' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Pose_C_RearHairN1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_C_RearHairN1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_C_RearHairN1) == 0x000008, "Wrong alignment on FJackLDT_Pose_C_RearHairN1");
static_assert(sizeof(FJackLDT_Pose_C_RearHairN1) == 0x000010, "Wrong size on FJackLDT_Pose_C_RearHairN1");

// ScriptStruct JackGame.JackDataTableKaziCategory
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableKaziCategory final : public FTableRowBase
{
public:
	class FName                                   Category;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartsIndex;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableKaziCategory) == 0x000008, "Wrong alignment on FJackDataTableKaziCategory");
static_assert(sizeof(FJackDataTableKaziCategory) == 0x000018, "Wrong size on FJackDataTableKaziCategory");
static_assert(offsetof(FJackDataTableKaziCategory, Category) == 0x000008, "Member 'FJackDataTableKaziCategory::Category' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziCategory, PartsIndex) == 0x000010, "Member 'FJackDataTableKaziCategory::PartsIndex' has a wrong offset!");

// ScriptStruct JackGame.JackSortSymbol
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FJackSortSymbol final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackSortSymbol) == 0x000004, "Wrong alignment on FJackSortSymbol");
static_assert(sizeof(FJackSortSymbol) == 0x000008, "Wrong size on FJackSortSymbol");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_F18
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_F18 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_F18) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_F18");
static_assert(sizeof(FJackLDT_MonsterDeploy_F18) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_F18");

// ScriptStruct JackGame.JackDataTableMiniGameJackPotRate
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMiniGameJackPotRate final : public FTableRowBase
{
public:
	float                                         BetFraction;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MachineFraction;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DividendMax;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DividendMin;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMiniGameJackPotRate) == 0x000008, "Wrong alignment on FJackDataTableMiniGameJackPotRate");
static_assert(sizeof(FJackDataTableMiniGameJackPotRate) == 0x000018, "Wrong size on FJackDataTableMiniGameJackPotRate");
static_assert(offsetof(FJackDataTableMiniGameJackPotRate, BetFraction) == 0x000008, "Member 'FJackDataTableMiniGameJackPotRate::BetFraction' has a wrong offset!");
static_assert(offsetof(FJackDataTableMiniGameJackPotRate, MachineFraction) == 0x00000C, "Member 'FJackDataTableMiniGameJackPotRate::MachineFraction' has a wrong offset!");
static_assert(offsetof(FJackDataTableMiniGameJackPotRate, DividendMax) == 0x000010, "Member 'FJackDataTableMiniGameJackPotRate::DividendMax' has a wrong offset!");
static_assert(offsetof(FJackDataTableMiniGameJackPotRate, DividendMin) == 0x000014, "Member 'FJackDataTableMiniGameJackPotRate::DividendMin' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableKaziQuality
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableKaziQuality final : public FTableRowBase
{
public:
	class FName                                   PartsKind;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRange_Fail;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRange_0;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRange_1;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRange_2;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRange_3;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DaiseikouBonusValue;                               // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableKaziQuality) == 0x000008, "Wrong alignment on FJackDataTableKaziQuality");
static_assert(sizeof(FJackDataTableKaziQuality) == 0x000028, "Wrong size on FJackDataTableKaziQuality");
static_assert(offsetof(FJackDataTableKaziQuality, PartsKind) == 0x000008, "Member 'FJackDataTableKaziQuality::PartsKind' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziQuality, TotalRange_Fail) == 0x000010, "Member 'FJackDataTableKaziQuality::TotalRange_Fail' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziQuality, TotalRange_0) == 0x000014, "Member 'FJackDataTableKaziQuality::TotalRange_0' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziQuality, TotalRange_1) == 0x000018, "Member 'FJackDataTableKaziQuality::TotalRange_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziQuality, TotalRange_2) == 0x00001C, "Member 'FJackDataTableKaziQuality::TotalRange_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziQuality, TotalRange_3) == 0x000020, "Member 'FJackDataTableKaziQuality::TotalRange_3' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziQuality, DaiseikouBonusValue) == 0x000024, "Member 'FJackDataTableKaziQuality::DaiseikouBonusValue' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_HRSkirtA
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HRSkirtA final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HRSkirtA) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HRSkirtA");
static_assert(sizeof(FJackLDT_RtEx_HRSkirtA) == 0x000010, "Wrong size on FJackLDT_RtEx_HRSkirtA");

// ScriptStruct JackGame.JackDataTableKaziSafetyArea
// 0x0040 (0x0048 - 0x0008)
struct FJackDataTableKaziSafetyArea final : public FTableRowBase
{
public:
	int32                                         SafetyArea_1_L_Min;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyArea_1_L_Max;                                // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyArea_1_R_Min;                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyArea_1_R_Max;                                // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyArea_2_L_Min;                                // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyArea_2_L_Max;                                // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyArea_2_R_Min;                                // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyArea_2_R_Max;                                // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyArea_3_L_Min;                                // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyArea_3_L_Max;                                // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyArea_3_R_Min;                                // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyArea_3_R_Max;                                // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyArea_4_L_Min;                                // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyArea_4_L_Max;                                // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyArea_4_R_Min;                                // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyArea_4_R_Max;                                // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableKaziSafetyArea) == 0x000008, "Wrong alignment on FJackDataTableKaziSafetyArea");
static_assert(sizeof(FJackDataTableKaziSafetyArea) == 0x000048, "Wrong size on FJackDataTableKaziSafetyArea");
static_assert(offsetof(FJackDataTableKaziSafetyArea, SafetyArea_1_L_Min) == 0x000008, "Member 'FJackDataTableKaziSafetyArea::SafetyArea_1_L_Min' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziSafetyArea, SafetyArea_1_L_Max) == 0x00000C, "Member 'FJackDataTableKaziSafetyArea::SafetyArea_1_L_Max' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziSafetyArea, SafetyArea_1_R_Min) == 0x000010, "Member 'FJackDataTableKaziSafetyArea::SafetyArea_1_R_Min' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziSafetyArea, SafetyArea_1_R_Max) == 0x000014, "Member 'FJackDataTableKaziSafetyArea::SafetyArea_1_R_Max' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziSafetyArea, SafetyArea_2_L_Min) == 0x000018, "Member 'FJackDataTableKaziSafetyArea::SafetyArea_2_L_Min' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziSafetyArea, SafetyArea_2_L_Max) == 0x00001C, "Member 'FJackDataTableKaziSafetyArea::SafetyArea_2_L_Max' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziSafetyArea, SafetyArea_2_R_Min) == 0x000020, "Member 'FJackDataTableKaziSafetyArea::SafetyArea_2_R_Min' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziSafetyArea, SafetyArea_2_R_Max) == 0x000024, "Member 'FJackDataTableKaziSafetyArea::SafetyArea_2_R_Max' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziSafetyArea, SafetyArea_3_L_Min) == 0x000028, "Member 'FJackDataTableKaziSafetyArea::SafetyArea_3_L_Min' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziSafetyArea, SafetyArea_3_L_Max) == 0x00002C, "Member 'FJackDataTableKaziSafetyArea::SafetyArea_3_L_Max' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziSafetyArea, SafetyArea_3_R_Min) == 0x000030, "Member 'FJackDataTableKaziSafetyArea::SafetyArea_3_R_Min' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziSafetyArea, SafetyArea_3_R_Max) == 0x000034, "Member 'FJackDataTableKaziSafetyArea::SafetyArea_3_R_Max' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziSafetyArea, SafetyArea_4_L_Min) == 0x000038, "Member 'FJackDataTableKaziSafetyArea::SafetyArea_4_L_Min' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziSafetyArea, SafetyArea_4_L_Max) == 0x00003C, "Member 'FJackDataTableKaziSafetyArea::SafetyArea_4_L_Max' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziSafetyArea, SafetyArea_4_R_Min) == 0x000040, "Member 'FJackDataTableKaziSafetyArea::SafetyArea_4_R_Min' has a wrong offset!");
static_assert(offsetof(FJackDataTableKaziSafetyArea, SafetyArea_4_R_Max) == 0x000044, "Member 'FJackDataTableKaziSafetyArea::SafetyArea_4_R_Max' has a wrong offset!");

// ScriptStruct JackGame.JackFusigiKaziMaterialParameter
// 0x0078 (0x0078 - 0x0000)
struct FJackFusigiKaziMaterialParameter final
{
public:
	float                                         Brightness_Base;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HueShift_Base;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BrightnessAdd_Base;                                // 0x0008(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BasePatternColorA;                                 // 0x0014(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BasePatternColorB;                                 // 0x0020(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutlineColor;                                      // 0x002C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutlineColorFinish;                                // 0x0038(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutlineColorOver;                                  // 0x0044(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutlinePower;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutlinePowerFinish;                                // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutlinePowerOver;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OverrideColor;                                     // 0x005C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SubOutlineColor;                                   // 0x0068(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubOutlinePower;                                   // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackFusigiKaziMaterialParameter) == 0x000004, "Wrong alignment on FJackFusigiKaziMaterialParameter");
static_assert(sizeof(FJackFusigiKaziMaterialParameter) == 0x000078, "Wrong size on FJackFusigiKaziMaterialParameter");
static_assert(offsetof(FJackFusigiKaziMaterialParameter, Brightness_Base) == 0x000000, "Member 'FJackFusigiKaziMaterialParameter::Brightness_Base' has a wrong offset!");
static_assert(offsetof(FJackFusigiKaziMaterialParameter, HueShift_Base) == 0x000004, "Member 'FJackFusigiKaziMaterialParameter::HueShift_Base' has a wrong offset!");
static_assert(offsetof(FJackFusigiKaziMaterialParameter, BrightnessAdd_Base) == 0x000008, "Member 'FJackFusigiKaziMaterialParameter::BrightnessAdd_Base' has a wrong offset!");
static_assert(offsetof(FJackFusigiKaziMaterialParameter, BasePatternColorA) == 0x000014, "Member 'FJackFusigiKaziMaterialParameter::BasePatternColorA' has a wrong offset!");
static_assert(offsetof(FJackFusigiKaziMaterialParameter, BasePatternColorB) == 0x000020, "Member 'FJackFusigiKaziMaterialParameter::BasePatternColorB' has a wrong offset!");
static_assert(offsetof(FJackFusigiKaziMaterialParameter, OutlineColor) == 0x00002C, "Member 'FJackFusigiKaziMaterialParameter::OutlineColor' has a wrong offset!");
static_assert(offsetof(FJackFusigiKaziMaterialParameter, OutlineColorFinish) == 0x000038, "Member 'FJackFusigiKaziMaterialParameter::OutlineColorFinish' has a wrong offset!");
static_assert(offsetof(FJackFusigiKaziMaterialParameter, OutlineColorOver) == 0x000044, "Member 'FJackFusigiKaziMaterialParameter::OutlineColorOver' has a wrong offset!");
static_assert(offsetof(FJackFusigiKaziMaterialParameter, OutlinePower) == 0x000050, "Member 'FJackFusigiKaziMaterialParameter::OutlinePower' has a wrong offset!");
static_assert(offsetof(FJackFusigiKaziMaterialParameter, OutlinePowerFinish) == 0x000054, "Member 'FJackFusigiKaziMaterialParameter::OutlinePowerFinish' has a wrong offset!");
static_assert(offsetof(FJackFusigiKaziMaterialParameter, OutlinePowerOver) == 0x000058, "Member 'FJackFusigiKaziMaterialParameter::OutlinePowerOver' has a wrong offset!");
static_assert(offsetof(FJackFusigiKaziMaterialParameter, OverrideColor) == 0x00005C, "Member 'FJackFusigiKaziMaterialParameter::OverrideColor' has a wrong offset!");
static_assert(offsetof(FJackFusigiKaziMaterialParameter, SubOutlineColor) == 0x000068, "Member 'FJackFusigiKaziMaterialParameter::SubOutlineColor' has a wrong offset!");
static_assert(offsetof(FJackFusigiKaziMaterialParameter, SubOutlinePower) == 0x000074, "Member 'FJackFusigiKaziMaterialParameter::SubOutlinePower' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMonsterFieldMovingBounds
// 0x0040 (0x0048 - 0x0008)
struct FJackDataTableMonsterFieldMovingBounds final : public FTableRowBase
{
public:
	float                                         WanderringRadius;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WanderringMoveDistance;                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscapeMoveDistance;                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RushMoveDistance;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChaseRadiusFromFindLocation;                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChaseRadiusFromPopLocation;                        // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChaseRadiusFromFindTargetLocation;                 // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MakikomiCylinderRadius;                            // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MakikomiCylinderHeight;                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProductionCostTotalLimit1;                         // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProductionCostTotalLimit2;                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProductionCostTotalLimit3;                         // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProductionCostTotalLimit4;                         // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProductionCostTotalLimit5;                         // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProductionCostTotalLimit6;                         // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMonsterFieldMovingBounds) == 0x000008, "Wrong alignment on FJackDataTableMonsterFieldMovingBounds");
static_assert(sizeof(FJackDataTableMonsterFieldMovingBounds) == 0x000048, "Wrong size on FJackDataTableMonsterFieldMovingBounds");
static_assert(offsetof(FJackDataTableMonsterFieldMovingBounds, WanderringRadius) == 0x000008, "Member 'FJackDataTableMonsterFieldMovingBounds::WanderringRadius' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldMovingBounds, WanderringMoveDistance) == 0x00000C, "Member 'FJackDataTableMonsterFieldMovingBounds::WanderringMoveDistance' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldMovingBounds, EscapeMoveDistance) == 0x000010, "Member 'FJackDataTableMonsterFieldMovingBounds::EscapeMoveDistance' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldMovingBounds, RushMoveDistance) == 0x000014, "Member 'FJackDataTableMonsterFieldMovingBounds::RushMoveDistance' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldMovingBounds, ChaseRadiusFromFindLocation) == 0x000018, "Member 'FJackDataTableMonsterFieldMovingBounds::ChaseRadiusFromFindLocation' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldMovingBounds, ChaseRadiusFromPopLocation) == 0x00001C, "Member 'FJackDataTableMonsterFieldMovingBounds::ChaseRadiusFromPopLocation' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldMovingBounds, ChaseRadiusFromFindTargetLocation) == 0x000020, "Member 'FJackDataTableMonsterFieldMovingBounds::ChaseRadiusFromFindTargetLocation' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldMovingBounds, MakikomiCylinderRadius) == 0x000024, "Member 'FJackDataTableMonsterFieldMovingBounds::MakikomiCylinderRadius' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldMovingBounds, MakikomiCylinderHeight) == 0x000028, "Member 'FJackDataTableMonsterFieldMovingBounds::MakikomiCylinderHeight' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldMovingBounds, ProductionCostTotalLimit1) == 0x00002C, "Member 'FJackDataTableMonsterFieldMovingBounds::ProductionCostTotalLimit1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldMovingBounds, ProductionCostTotalLimit2) == 0x000030, "Member 'FJackDataTableMonsterFieldMovingBounds::ProductionCostTotalLimit2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldMovingBounds, ProductionCostTotalLimit3) == 0x000034, "Member 'FJackDataTableMonsterFieldMovingBounds::ProductionCostTotalLimit3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldMovingBounds, ProductionCostTotalLimit4) == 0x000038, "Member 'FJackDataTableMonsterFieldMovingBounds::ProductionCostTotalLimit4' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldMovingBounds, ProductionCostTotalLimit5) == 0x00003C, "Member 'FJackDataTableMonsterFieldMovingBounds::ProductionCostTotalLimit5' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterFieldMovingBounds, ProductionCostTotalLimit6) == 0x000040, "Member 'FJackDataTableMonsterFieldMovingBounds::ProductionCostTotalLimit6' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Sim_C_RearHairA_Up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_C_RearHairA_Up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_C_RearHairA_Up) == 0x000008, "Wrong alignment on FJackLDT_Sim_C_RearHairA_Up");
static_assert(sizeof(FJackLDT_Sim_C_RearHairA_Up) == 0x000010, "Wrong size on FJackLDT_Sim_C_RearHairA_Up");

// ScriptStruct JackGame.JackSubLevelStatus
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackSubLevelStatus final
{
public:
	class FName                                   LevelPackageName;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackStreamingStatus                          StreamingStatus;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LODIndex;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerInside;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCharaData;                                        // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterData;                                      // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResidentData;                                     // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackSubLevelStatus) == 0x000008, "Wrong alignment on FJackSubLevelStatus");
static_assert(sizeof(FJackSubLevelStatus) == 0x000018, "Wrong size on FJackSubLevelStatus");
static_assert(offsetof(FJackSubLevelStatus, LevelPackageName) == 0x000000, "Member 'FJackSubLevelStatus::LevelPackageName' has a wrong offset!");
static_assert(offsetof(FJackSubLevelStatus, StreamingStatus) == 0x000008, "Member 'FJackSubLevelStatus::StreamingStatus' has a wrong offset!");
static_assert(offsetof(FJackSubLevelStatus, LODIndex) == 0x00000C, "Member 'FJackSubLevelStatus::LODIndex' has a wrong offset!");
static_assert(offsetof(FJackSubLevelStatus, bPlayerInside) == 0x000010, "Member 'FJackSubLevelStatus::bPlayerInside' has a wrong offset!");
static_assert(offsetof(FJackSubLevelStatus, bCharaData) == 0x000011, "Member 'FJackSubLevelStatus::bCharaData' has a wrong offset!");
static_assert(offsetof(FJackSubLevelStatus, bMonsterData) == 0x000012, "Member 'FJackSubLevelStatus::bMonsterData' has a wrong offset!");
static_assert(offsetof(FJackSubLevelStatus, bResidentData) == 0x000013, "Member 'FJackSubLevelStatus::bResidentData' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableLevelStreamingStatus
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableLevelStreamingStatus final : public FTableRowBase
{
public:
	TArray<struct FJackSubLevelStatus>            LevelStreamingStatus;                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableLevelStreamingStatus) == 0x000008, "Wrong alignment on FJackDataTableLevelStreamingStatus");
static_assert(sizeof(FJackDataTableLevelStreamingStatus) == 0x000018, "Wrong size on FJackDataTableLevelStreamingStatus");
static_assert(offsetof(FJackDataTableLevelStreamingStatus, LevelStreamingStatus) == 0x000008, "Member 'FJackDataTableLevelStreamingStatus::LevelStreamingStatus' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_AnimDynamics_M148
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AnimDynamics_M148 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AnimDynamics_M148) == 0x000008, "Wrong alignment on FJackLDT_AnimDynamics_M148");
static_assert(sizeof(FJackLDT_AnimDynamics_M148) == 0x000010, "Wrong size on FJackLDT_AnimDynamics_M148");

// ScriptStruct JackGame.JackMEControlTrackKey
// 0x0020 (0x0020 - 0x0000)
struct FJackMEControlTrackKey final
{
public:
	float                                         TimeVar;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MeId;                                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsResumeBGM;                                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrevMusicFOTime;                                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SoundAsset;                                        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMEControlTrackKey) == 0x000008, "Wrong alignment on FJackMEControlTrackKey");
static_assert(sizeof(FJackMEControlTrackKey) == 0x000020, "Wrong size on FJackMEControlTrackKey");
static_assert(offsetof(FJackMEControlTrackKey, TimeVar) == 0x000000, "Member 'FJackMEControlTrackKey::TimeVar' has a wrong offset!");
static_assert(offsetof(FJackMEControlTrackKey, MeId) == 0x000008, "Member 'FJackMEControlTrackKey::MeId' has a wrong offset!");
static_assert(offsetof(FJackMEControlTrackKey, bIsResumeBGM) == 0x000010, "Member 'FJackMEControlTrackKey::bIsResumeBGM' has a wrong offset!");
static_assert(offsetof(FJackMEControlTrackKey, PrevMusicFOTime) == 0x000014, "Member 'FJackMEControlTrackKey::PrevMusicFOTime' has a wrong offset!");
static_assert(offsetof(FJackMEControlTrackKey, SoundAsset) == 0x000018, "Member 'FJackMEControlTrackKey::SoundAsset' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableLevelUp
// 0x0048 (0x0050 - 0x0008)
struct FJackDataTableLevelUp final : public FTableRowBase
{
public:
	int32                                         RequiredExp;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tikara;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minomamori;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Subayasa;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Kiyousa;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Miryoku;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KougekiMaryoku;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KaifukuMaryoku;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxHP;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMP;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TokugiPoint;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Jumon0;                                            // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Jumon1;                                            // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Jumon2;                                            // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableLevelUp) == 0x000008, "Wrong alignment on FJackDataTableLevelUp");
static_assert(sizeof(FJackDataTableLevelUp) == 0x000050, "Wrong size on FJackDataTableLevelUp");
static_assert(offsetof(FJackDataTableLevelUp, RequiredExp) == 0x000008, "Member 'FJackDataTableLevelUp::RequiredExp' has a wrong offset!");
static_assert(offsetof(FJackDataTableLevelUp, Tikara) == 0x00000C, "Member 'FJackDataTableLevelUp::Tikara' has a wrong offset!");
static_assert(offsetof(FJackDataTableLevelUp, Minomamori) == 0x000010, "Member 'FJackDataTableLevelUp::Minomamori' has a wrong offset!");
static_assert(offsetof(FJackDataTableLevelUp, Subayasa) == 0x000014, "Member 'FJackDataTableLevelUp::Subayasa' has a wrong offset!");
static_assert(offsetof(FJackDataTableLevelUp, Kiyousa) == 0x000018, "Member 'FJackDataTableLevelUp::Kiyousa' has a wrong offset!");
static_assert(offsetof(FJackDataTableLevelUp, Miryoku) == 0x00001C, "Member 'FJackDataTableLevelUp::Miryoku' has a wrong offset!");
static_assert(offsetof(FJackDataTableLevelUp, KougekiMaryoku) == 0x000020, "Member 'FJackDataTableLevelUp::KougekiMaryoku' has a wrong offset!");
static_assert(offsetof(FJackDataTableLevelUp, KaifukuMaryoku) == 0x000024, "Member 'FJackDataTableLevelUp::KaifukuMaryoku' has a wrong offset!");
static_assert(offsetof(FJackDataTableLevelUp, MaxHP) == 0x000028, "Member 'FJackDataTableLevelUp::MaxHP' has a wrong offset!");
static_assert(offsetof(FJackDataTableLevelUp, MaxMP) == 0x00002C, "Member 'FJackDataTableLevelUp::MaxMP' has a wrong offset!");
static_assert(offsetof(FJackDataTableLevelUp, TokugiPoint) == 0x000030, "Member 'FJackDataTableLevelUp::TokugiPoint' has a wrong offset!");
static_assert(offsetof(FJackDataTableLevelUp, Jumon0) == 0x000038, "Member 'FJackDataTableLevelUp::Jumon0' has a wrong offset!");
static_assert(offsetof(FJackDataTableLevelUp, Jumon1) == 0x000040, "Member 'FJackDataTableLevelUp::Jumon1' has a wrong offset!");
static_assert(offsetof(FJackDataTableLevelUp, Jumon2) == 0x000048, "Member 'FJackDataTableLevelUp::Jumon2' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableLoading
// 0x0040 (0x0048 - 0x0008)
struct FJackDataTableLoading final : public FTableRowBase
{
public:
	class FName                                   Type;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   If;                                                // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IfNum;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IfNum2;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableLoading) == 0x000008, "Wrong alignment on FJackDataTableLoading");
static_assert(sizeof(FJackDataTableLoading) == 0x000048, "Wrong size on FJackDataTableLoading");
static_assert(offsetof(FJackDataTableLoading, Type) == 0x000008, "Member 'FJackDataTableLoading::Type' has a wrong offset!");
static_assert(offsetof(FJackDataTableLoading, If) == 0x000010, "Member 'FJackDataTableLoading::If' has a wrong offset!");
static_assert(offsetof(FJackDataTableLoading, IfNum) == 0x000018, "Member 'FJackDataTableLoading::IfNum' has a wrong offset!");
static_assert(offsetof(FJackDataTableLoading, IfNum2) == 0x000020, "Member 'FJackDataTableLoading::IfNum2' has a wrong offset!");
static_assert(offsetof(FJackDataTableLoading, Title) == 0x000028, "Member 'FJackDataTableLoading::Title' has a wrong offset!");
static_assert(offsetof(FJackDataTableLoading, Text) == 0x000038, "Member 'FJackDataTableLoading::Text' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableTenseiCSWatch
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableTenseiCSWatch final : public FTableRowBase
{
public:
	class FName                                   JackCSFlag;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TripleCSID;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableTenseiCSWatch) == 0x000008, "Wrong alignment on FJackDataTableTenseiCSWatch");
static_assert(sizeof(FJackDataTableTenseiCSWatch) == 0x000018, "Wrong size on FJackDataTableTenseiCSWatch");
static_assert(offsetof(FJackDataTableTenseiCSWatch, JackCSFlag) == 0x000008, "Member 'FJackDataTableTenseiCSWatch::JackCSFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiCSWatch, TripleCSID) == 0x000010, "Member 'FJackDataTableTenseiCSWatch::TripleCSID' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_TextSetCasinoCoin
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextSetCasinoCoin final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextSetCasinoCoin) == 0x000008, "Wrong alignment on FJackLDT_TextSetCasinoCoin");
static_assert(sizeof(FJackLDT_TextSetCasinoCoin) == 0x000010, "Wrong size on FJackLDT_TextSetCasinoCoin");

// ScriptStruct JackGame.JackDataTableMap
// 0x0050 (0x0058 - 0x0008)
struct FJackDataTableMap final : public FTableRowBase
{
public:
	class FName                                   ClassificationID;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BGMID;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RespawnPointID;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapVisitEnabled;                                  // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapVisitAchievement;                              // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHorseCallEnabled;                                 // 0x0022(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather;                                           // 0x0023(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel;                                         // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute;                             // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RegisterRuraID;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShipMoveTag;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID;                                            // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FollowingCharactersMode;                           // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDataListUpBeforeCollapse;                         // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDataListUpAfterTheFall;                           // 0x004D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDataListUpTwoLap;                                 // 0x004E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDataListUpNewStory;                               // 0x004F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DataListSortNo;                                    // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TripleAreaNo;                                      // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMap) == 0x000008, "Wrong alignment on FJackDataTableMap");
static_assert(sizeof(FJackDataTableMap) == 0x000058, "Wrong size on FJackDataTableMap");
static_assert(offsetof(FJackDataTableMap, ClassificationID) == 0x000008, "Member 'FJackDataTableMap::ClassificationID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMap, BGMID) == 0x000010, "Member 'FJackDataTableMap::BGMID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMap, RespawnPointID) == 0x000018, "Member 'FJackDataTableMap::RespawnPointID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMap, bMapVisitEnabled) == 0x000020, "Member 'FJackDataTableMap::bMapVisitEnabled' has a wrong offset!");
static_assert(offsetof(FJackDataTableMap, bMapVisitAchievement) == 0x000021, "Member 'FJackDataTableMap::bMapVisitAchievement' has a wrong offset!");
static_assert(offsetof(FJackDataTableMap, bHorseCallEnabled) == 0x000022, "Member 'FJackDataTableMap::bHorseCallEnabled' has a wrong offset!");
static_assert(offsetof(FJackDataTableMap, Weather) == 0x000023, "Member 'FJackDataTableMap::Weather' has a wrong offset!");
static_assert(offsetof(FJackDataTableMap, WindLevel) == 0x000024, "Member 'FJackDataTableMap::WindLevel' has a wrong offset!");
static_assert(offsetof(FJackDataTableMap, WindAngle) == 0x000028, "Member 'FJackDataTableMap::WindAngle' has a wrong offset!");
static_assert(offsetof(FJackDataTableMap, WindAngleChangeMinute) == 0x00002C, "Member 'FJackDataTableMap::WindAngleChangeMinute' has a wrong offset!");
static_assert(offsetof(FJackDataTableMap, RegisterRuraID) == 0x000030, "Member 'FJackDataTableMap::RegisterRuraID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMap, ShipMoveTag) == 0x000038, "Member 'FJackDataTableMap::ShipMoveTag' has a wrong offset!");
static_assert(offsetof(FJackDataTableMap, ItemID) == 0x000040, "Member 'FJackDataTableMap::ItemID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMap, FollowingCharactersMode) == 0x000048, "Member 'FJackDataTableMap::FollowingCharactersMode' has a wrong offset!");
static_assert(offsetof(FJackDataTableMap, bDataListUpBeforeCollapse) == 0x00004C, "Member 'FJackDataTableMap::bDataListUpBeforeCollapse' has a wrong offset!");
static_assert(offsetof(FJackDataTableMap, bDataListUpAfterTheFall) == 0x00004D, "Member 'FJackDataTableMap::bDataListUpAfterTheFall' has a wrong offset!");
static_assert(offsetof(FJackDataTableMap, bDataListUpTwoLap) == 0x00004E, "Member 'FJackDataTableMap::bDataListUpTwoLap' has a wrong offset!");
static_assert(offsetof(FJackDataTableMap, bDataListUpNewStory) == 0x00004F, "Member 'FJackDataTableMap::bDataListUpNewStory' has a wrong offset!");
static_assert(offsetof(FJackDataTableMap, DataListSortNo) == 0x000050, "Member 'FJackDataTableMap::DataListSortNo' has a wrong offset!");
static_assert(offsetof(FJackDataTableMap, TripleAreaNo) == 0x000054, "Member 'FJackDataTableMap::TripleAreaNo' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotRareHandLottery
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotRareHandLottery final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotRareHandLottery) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotRareHandLottery");
static_assert(sizeof(FJackLDT_MeosiSlotRareHandLottery) == 0x000010, "Wrong size on FJackLDT_MeosiSlotRareHandLottery");

// ScriptStruct JackGame.JackDataTableMedalExchange
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMedalExchange final : public FTableRowBase
{
public:
	class FName                                   ItemID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExchangeNumber;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackExchange                                 ExchangeType;                                      // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMedalExchange) == 0x000008, "Wrong alignment on FJackDataTableMedalExchange");
static_assert(sizeof(FJackDataTableMedalExchange) == 0x000018, "Wrong size on FJackDataTableMedalExchange");
static_assert(offsetof(FJackDataTableMedalExchange, ItemID) == 0x000008, "Member 'FJackDataTableMedalExchange::ItemID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMedalExchange, ExchangeNumber) == 0x000010, "Member 'FJackDataTableMedalExchange::ExchangeNumber' has a wrong offset!");
static_assert(offsetof(FJackDataTableMedalExchange, ExchangeType) == 0x000014, "Member 'FJackDataTableMedalExchange::ExchangeType' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotFakeSptProb
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotFakeSptProb final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotFakeSptProb) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotFakeSptProb");
static_assert(sizeof(FJackLDT_MeosiSlotFakeSptProb) == 0x000010, "Wrong size on FJackLDT_MeosiSlotFakeSptProb");

// ScriptStruct JackGame.JackDataTableMeosiSlotBarChance
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMeosiSlotBarChance final : public FTableRowBase
{
public:
	int32                                         BlueBack;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RedBack;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoldBack;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MeatBack;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotBarChance) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotBarChance");
static_assert(sizeof(FJackDataTableMeosiSlotBarChance) == 0x000018, "Wrong size on FJackDataTableMeosiSlotBarChance");
static_assert(offsetof(FJackDataTableMeosiSlotBarChance, BlueBack) == 0x000008, "Member 'FJackDataTableMeosiSlotBarChance::BlueBack' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotBarChance, RedBack) == 0x00000C, "Member 'FJackDataTableMeosiSlotBarChance::RedBack' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotBarChance, GoldBack) == 0x000010, "Member 'FJackDataTableMeosiSlotBarChance::GoldBack' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotBarChance, MeatBack) == 0x000014, "Member 'FJackDataTableMeosiSlotBarChance::MeatBack' has a wrong offset!");

// ScriptStruct JackGame.JackMonsterBattleAIExceptionInfo
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FJackMonsterBattleAIExceptionInfo final
{
public:
	class FName                                   ActionID;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Motion_Cast;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Motion_Shot;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionTargetType                   Target_Type;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionSelectType                   Select_Type;                                       // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Groupe_Check;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Invoke_Rate;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SecondCheckID;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMonsterBattleAIExceptionInfo) == 0x000008, "Wrong alignment on FJackMonsterBattleAIExceptionInfo");
static_assert(sizeof(FJackMonsterBattleAIExceptionInfo) == 0x000030, "Wrong size on FJackMonsterBattleAIExceptionInfo");
static_assert(offsetof(FJackMonsterBattleAIExceptionInfo, ActionID) == 0x000000, "Member 'FJackMonsterBattleAIExceptionInfo::ActionID' has a wrong offset!");
static_assert(offsetof(FJackMonsterBattleAIExceptionInfo, Motion_Cast) == 0x000008, "Member 'FJackMonsterBattleAIExceptionInfo::Motion_Cast' has a wrong offset!");
static_assert(offsetof(FJackMonsterBattleAIExceptionInfo, Motion_Shot) == 0x000010, "Member 'FJackMonsterBattleAIExceptionInfo::Motion_Shot' has a wrong offset!");
static_assert(offsetof(FJackMonsterBattleAIExceptionInfo, Target_Type) == 0x000018, "Member 'FJackMonsterBattleAIExceptionInfo::Target_Type' has a wrong offset!");
static_assert(offsetof(FJackMonsterBattleAIExceptionInfo, Select_Type) == 0x000019, "Member 'FJackMonsterBattleAIExceptionInfo::Select_Type' has a wrong offset!");
static_assert(offsetof(FJackMonsterBattleAIExceptionInfo, Groupe_Check) == 0x00001C, "Member 'FJackMonsterBattleAIExceptionInfo::Groupe_Check' has a wrong offset!");
static_assert(offsetof(FJackMonsterBattleAIExceptionInfo, Invoke_Rate) == 0x000020, "Member 'FJackMonsterBattleAIExceptionInfo::Invoke_Rate' has a wrong offset!");
static_assert(offsetof(FJackMonsterBattleAIExceptionInfo, SecondCheckID) == 0x000028, "Member 'FJackMonsterBattleAIExceptionInfo::SecondCheckID' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleD_002
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleD_002 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleD_002) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleD_002");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleD_002) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleD_002");

// ScriptStruct JackGame.JackDataTableMeosiSlotConfigurationMain
// 0x00D8 (0x00E0 - 0x0008)
struct FJackDataTableMeosiSlotConfigurationMain final : public FTableRowBase
{
public:
	class FName                                   HandProb_Def;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HandProb_CZ;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BonusProb_Def_Def;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BonusProb_Def_High;                                // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BonusProb_Def_Heven;                               // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BonusProb_CZ_Def;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BonusProb_CZ_High;                                 // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BonusProb_CZ_Heven;                                // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BonusRising;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TransStProb1_Def_Def;                              // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TransStProb1_Def_High;                             // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TransStProb1_Def_Heven;                            // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TransStProb1_CZ_Def;                               // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TransStProb1_CZ_High;                              // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TransStProb1_CZ_Heven;                             // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TransStProb2;                                      // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TransStProb3;                                      // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Ceiling_Def;                                       // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Ceiling_High;                                      // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Ceiling_Heven;                                     // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CeilingAT_Def;                                     // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CeilingAT_High;                                    // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CeilingAT_Heven;                                   // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BonusStock;                                        // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExtraEffect;                                       // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EncountMonsterCnt;                                 // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MonsterRecruitCor;                                 // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotConfigurationMain) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotConfigurationMain");
static_assert(sizeof(FJackDataTableMeosiSlotConfigurationMain) == 0x0000E0, "Wrong size on FJackDataTableMeosiSlotConfigurationMain");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, HandProb_Def) == 0x000008, "Member 'FJackDataTableMeosiSlotConfigurationMain::HandProb_Def' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, HandProb_CZ) == 0x000010, "Member 'FJackDataTableMeosiSlotConfigurationMain::HandProb_CZ' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, BonusProb_Def_Def) == 0x000018, "Member 'FJackDataTableMeosiSlotConfigurationMain::BonusProb_Def_Def' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, BonusProb_Def_High) == 0x000020, "Member 'FJackDataTableMeosiSlotConfigurationMain::BonusProb_Def_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, BonusProb_Def_Heven) == 0x000028, "Member 'FJackDataTableMeosiSlotConfigurationMain::BonusProb_Def_Heven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, BonusProb_CZ_Def) == 0x000030, "Member 'FJackDataTableMeosiSlotConfigurationMain::BonusProb_CZ_Def' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, BonusProb_CZ_High) == 0x000038, "Member 'FJackDataTableMeosiSlotConfigurationMain::BonusProb_CZ_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, BonusProb_CZ_Heven) == 0x000040, "Member 'FJackDataTableMeosiSlotConfigurationMain::BonusProb_CZ_Heven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, BonusRising) == 0x000048, "Member 'FJackDataTableMeosiSlotConfigurationMain::BonusRising' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, TransStProb1_Def_Def) == 0x000050, "Member 'FJackDataTableMeosiSlotConfigurationMain::TransStProb1_Def_Def' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, TransStProb1_Def_High) == 0x000058, "Member 'FJackDataTableMeosiSlotConfigurationMain::TransStProb1_Def_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, TransStProb1_Def_Heven) == 0x000060, "Member 'FJackDataTableMeosiSlotConfigurationMain::TransStProb1_Def_Heven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, TransStProb1_CZ_Def) == 0x000068, "Member 'FJackDataTableMeosiSlotConfigurationMain::TransStProb1_CZ_Def' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, TransStProb1_CZ_High) == 0x000070, "Member 'FJackDataTableMeosiSlotConfigurationMain::TransStProb1_CZ_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, TransStProb1_CZ_Heven) == 0x000078, "Member 'FJackDataTableMeosiSlotConfigurationMain::TransStProb1_CZ_Heven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, TransStProb2) == 0x000080, "Member 'FJackDataTableMeosiSlotConfigurationMain::TransStProb2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, TransStProb3) == 0x000088, "Member 'FJackDataTableMeosiSlotConfigurationMain::TransStProb3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, Ceiling_Def) == 0x000090, "Member 'FJackDataTableMeosiSlotConfigurationMain::Ceiling_Def' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, Ceiling_High) == 0x000098, "Member 'FJackDataTableMeosiSlotConfigurationMain::Ceiling_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, Ceiling_Heven) == 0x0000A0, "Member 'FJackDataTableMeosiSlotConfigurationMain::Ceiling_Heven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, CeilingAT_Def) == 0x0000A8, "Member 'FJackDataTableMeosiSlotConfigurationMain::CeilingAT_Def' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, CeilingAT_High) == 0x0000B0, "Member 'FJackDataTableMeosiSlotConfigurationMain::CeilingAT_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, CeilingAT_Heven) == 0x0000B8, "Member 'FJackDataTableMeosiSlotConfigurationMain::CeilingAT_Heven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, BonusStock) == 0x0000C0, "Member 'FJackDataTableMeosiSlotConfigurationMain::BonusStock' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, ExtraEffect) == 0x0000C8, "Member 'FJackDataTableMeosiSlotConfigurationMain::ExtraEffect' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, EncountMonsterCnt) == 0x0000D0, "Member 'FJackDataTableMeosiSlotConfigurationMain::EncountMonsterCnt' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotConfigurationMain, MonsterRecruitCor) == 0x0000D8, "Member 'FJackDataTableMeosiSlotConfigurationMain::MonsterRecruitCor' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotHandStopRange
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotHandStopRange final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotHandStopRange) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotHandStopRange");
static_assert(sizeof(FJackLDT_MeosiSlotHandStopRange) == 0x000010, "Wrong size on FJackLDT_MeosiSlotHandStopRange");

// ScriptStruct JackGame.JackLDT_TextPackCommon
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextPackCommon final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextPackCommon) == 0x000008, "Wrong alignment on FJackLDT_TextPackCommon");
static_assert(sizeof(FJackLDT_TextPackCommon) == 0x000010, "Wrong size on FJackLDT_TextPackCommon");

// ScriptStruct JackGame.JackDataTableMonsterZukanSeisokuti
// 0x0640 (0x0648 - 0x0008)
struct FJackDataTableMonsterZukanSeisokuti final : public FTableRowBase
{
public:
	class FName                                   Mon_A_01;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_02;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_03;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_04;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_05;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_06;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_07;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_08;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_09;                                          // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_10;                                          // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_11;                                          // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_12;                                          // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_13;                                          // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_14;                                          // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_15;                                          // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_16;                                          // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_17;                                          // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_18;                                          // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_19;                                          // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_20;                                          // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_21;                                          // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_22;                                          // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_23;                                          // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_24;                                          // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_25;                                          // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_26;                                          // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_27;                                          // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_28;                                          // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_29;                                          // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_30;                                          // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_31;                                          // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_32;                                          // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_33;                                          // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_34;                                          // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_35;                                          // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_36;                                          // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_37;                                          // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_38;                                          // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_39;                                          // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_A_40;                                          // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_01;                                          // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_02;                                          // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_03;                                          // 0x0158(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_04;                                          // 0x0160(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_05;                                          // 0x0168(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_06;                                          // 0x0170(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_07;                                          // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_08;                                          // 0x0180(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_09;                                          // 0x0188(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_10;                                          // 0x0190(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_11;                                          // 0x0198(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_12;                                          // 0x01A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_13;                                          // 0x01A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_14;                                          // 0x01B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_15;                                          // 0x01B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_16;                                          // 0x01C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_17;                                          // 0x01C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_18;                                          // 0x01D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_19;                                          // 0x01D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_20;                                          // 0x01E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_21;                                          // 0x01E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_22;                                          // 0x01F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_23;                                          // 0x01F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_24;                                          // 0x0200(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_25;                                          // 0x0208(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_26;                                          // 0x0210(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_27;                                          // 0x0218(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_28;                                          // 0x0220(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_29;                                          // 0x0228(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_30;                                          // 0x0230(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_31;                                          // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_32;                                          // 0x0240(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_33;                                          // 0x0248(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_34;                                          // 0x0250(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_35;                                          // 0x0258(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_36;                                          // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_37;                                          // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_38;                                          // 0x0270(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_39;                                          // 0x0278(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_S_40;                                          // 0x0280(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_01;                                          // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_02;                                          // 0x0290(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_03;                                          // 0x0298(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_04;                                          // 0x02A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_05;                                          // 0x02A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_06;                                          // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_07;                                          // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_08;                                          // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_09;                                          // 0x02C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_10;                                          // 0x02D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_11;                                          // 0x02D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_12;                                          // 0x02E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_13;                                          // 0x02E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_14;                                          // 0x02F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_15;                                          // 0x02F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_16;                                          // 0x0300(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_17;                                          // 0x0308(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_18;                                          // 0x0310(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_19;                                          // 0x0318(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_20;                                          // 0x0320(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_21;                                          // 0x0328(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_22;                                          // 0x0330(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_23;                                          // 0x0338(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_24;                                          // 0x0340(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_25;                                          // 0x0348(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_26;                                          // 0x0350(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_27;                                          // 0x0358(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_28;                                          // 0x0360(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_29;                                          // 0x0368(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_30;                                          // 0x0370(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_31;                                          // 0x0378(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_32;                                          // 0x0380(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_33;                                          // 0x0388(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_34;                                          // 0x0390(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_35;                                          // 0x0398(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_36;                                          // 0x03A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_37;                                          // 0x03A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_38;                                          // 0x03B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_39;                                          // 0x03B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_B_40;                                          // 0x03C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_01;                                          // 0x03C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_02;                                          // 0x03D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_03;                                          // 0x03D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_04;                                          // 0x03E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_05;                                          // 0x03E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_06;                                          // 0x03F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_07;                                          // 0x03F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_08;                                          // 0x0400(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_09;                                          // 0x0408(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_10;                                          // 0x0410(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_11;                                          // 0x0418(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_12;                                          // 0x0420(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_13;                                          // 0x0428(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_14;                                          // 0x0430(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_15;                                          // 0x0438(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_16;                                          // 0x0440(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_17;                                          // 0x0448(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_18;                                          // 0x0450(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_19;                                          // 0x0458(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_20;                                          // 0x0460(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_21;                                          // 0x0468(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_22;                                          // 0x0470(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_23;                                          // 0x0478(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_24;                                          // 0x0480(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_25;                                          // 0x0488(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_26;                                          // 0x0490(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_27;                                          // 0x0498(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_28;                                          // 0x04A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_29;                                          // 0x04A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_30;                                          // 0x04B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_31;                                          // 0x04B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_32;                                          // 0x04C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_33;                                          // 0x04C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_34;                                          // 0x04D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_35;                                          // 0x04D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_36;                                          // 0x04E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_37;                                          // 0x04E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_38;                                          // 0x04F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_39;                                          // 0x04F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_40;                                          // 0x0500(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_41;                                          // 0x0508(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_42;                                          // 0x0510(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_43;                                          // 0x0518(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_44;                                          // 0x0520(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_45;                                          // 0x0528(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_46;                                          // 0x0530(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_47;                                          // 0x0538(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_48;                                          // 0x0540(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_49;                                          // 0x0548(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_50;                                          // 0x0550(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_51;                                          // 0x0558(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_52;                                          // 0x0560(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_53;                                          // 0x0568(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_54;                                          // 0x0570(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_55;                                          // 0x0578(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_56;                                          // 0x0580(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_57;                                          // 0x0588(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_58;                                          // 0x0590(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_59;                                          // 0x0598(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_60;                                          // 0x05A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_61;                                          // 0x05A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_62;                                          // 0x05B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_63;                                          // 0x05B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_64;                                          // 0x05C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_65;                                          // 0x05C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_66;                                          // 0x05D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_67;                                          // 0x05D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_68;                                          // 0x05E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_69;                                          // 0x05E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_70;                                          // 0x05F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_71;                                          // 0x05F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_72;                                          // 0x0600(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_73;                                          // 0x0608(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_74;                                          // 0x0610(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_75;                                          // 0x0618(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_76;                                          // 0x0620(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_77;                                          // 0x0628(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_78;                                          // 0x0630(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_79;                                          // 0x0638(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mon_C_80;                                          // 0x0640(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMonsterZukanSeisokuti) == 0x000008, "Wrong alignment on FJackDataTableMonsterZukanSeisokuti");
static_assert(sizeof(FJackDataTableMonsterZukanSeisokuti) == 0x000648, "Wrong size on FJackDataTableMonsterZukanSeisokuti");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_01) == 0x000008, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_01' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_02) == 0x000010, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_02' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_03) == 0x000018, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_03' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_04) == 0x000020, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_04' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_05) == 0x000028, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_05' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_06) == 0x000030, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_06' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_07) == 0x000038, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_07' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_08) == 0x000040, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_08' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_09) == 0x000048, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_09' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_10) == 0x000050, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_10' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_11) == 0x000058, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_11' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_12) == 0x000060, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_12' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_13) == 0x000068, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_13' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_14) == 0x000070, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_14' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_15) == 0x000078, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_15' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_16) == 0x000080, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_16' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_17) == 0x000088, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_17' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_18) == 0x000090, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_18' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_19) == 0x000098, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_19' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_20) == 0x0000A0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_20' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_21) == 0x0000A8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_21' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_22) == 0x0000B0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_22' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_23) == 0x0000B8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_23' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_24) == 0x0000C0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_24' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_25) == 0x0000C8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_25' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_26) == 0x0000D0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_26' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_27) == 0x0000D8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_27' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_28) == 0x0000E0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_28' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_29) == 0x0000E8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_29' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_30) == 0x0000F0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_30' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_31) == 0x0000F8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_31' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_32) == 0x000100, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_32' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_33) == 0x000108, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_33' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_34) == 0x000110, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_34' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_35) == 0x000118, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_35' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_36) == 0x000120, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_36' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_37) == 0x000128, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_37' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_38) == 0x000130, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_38' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_39) == 0x000138, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_39' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_A_40) == 0x000140, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_A_40' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_01) == 0x000148, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_01' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_02) == 0x000150, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_02' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_03) == 0x000158, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_03' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_04) == 0x000160, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_04' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_05) == 0x000168, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_05' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_06) == 0x000170, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_06' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_07) == 0x000178, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_07' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_08) == 0x000180, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_08' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_09) == 0x000188, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_09' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_10) == 0x000190, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_10' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_11) == 0x000198, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_11' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_12) == 0x0001A0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_12' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_13) == 0x0001A8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_13' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_14) == 0x0001B0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_14' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_15) == 0x0001B8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_15' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_16) == 0x0001C0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_16' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_17) == 0x0001C8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_17' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_18) == 0x0001D0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_18' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_19) == 0x0001D8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_19' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_20) == 0x0001E0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_20' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_21) == 0x0001E8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_21' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_22) == 0x0001F0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_22' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_23) == 0x0001F8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_23' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_24) == 0x000200, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_24' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_25) == 0x000208, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_25' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_26) == 0x000210, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_26' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_27) == 0x000218, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_27' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_28) == 0x000220, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_28' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_29) == 0x000228, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_29' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_30) == 0x000230, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_30' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_31) == 0x000238, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_31' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_32) == 0x000240, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_32' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_33) == 0x000248, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_33' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_34) == 0x000250, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_34' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_35) == 0x000258, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_35' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_36) == 0x000260, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_36' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_37) == 0x000268, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_37' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_38) == 0x000270, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_38' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_39) == 0x000278, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_39' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_S_40) == 0x000280, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_S_40' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_01) == 0x000288, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_01' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_02) == 0x000290, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_02' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_03) == 0x000298, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_03' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_04) == 0x0002A0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_04' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_05) == 0x0002A8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_05' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_06) == 0x0002B0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_06' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_07) == 0x0002B8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_07' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_08) == 0x0002C0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_08' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_09) == 0x0002C8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_09' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_10) == 0x0002D0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_10' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_11) == 0x0002D8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_11' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_12) == 0x0002E0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_12' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_13) == 0x0002E8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_13' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_14) == 0x0002F0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_14' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_15) == 0x0002F8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_15' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_16) == 0x000300, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_16' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_17) == 0x000308, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_17' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_18) == 0x000310, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_18' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_19) == 0x000318, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_19' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_20) == 0x000320, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_20' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_21) == 0x000328, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_21' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_22) == 0x000330, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_22' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_23) == 0x000338, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_23' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_24) == 0x000340, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_24' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_25) == 0x000348, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_25' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_26) == 0x000350, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_26' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_27) == 0x000358, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_27' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_28) == 0x000360, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_28' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_29) == 0x000368, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_29' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_30) == 0x000370, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_30' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_31) == 0x000378, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_31' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_32) == 0x000380, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_32' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_33) == 0x000388, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_33' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_34) == 0x000390, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_34' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_35) == 0x000398, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_35' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_36) == 0x0003A0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_36' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_37) == 0x0003A8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_37' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_38) == 0x0003B0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_38' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_39) == 0x0003B8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_39' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_B_40) == 0x0003C0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_B_40' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_01) == 0x0003C8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_01' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_02) == 0x0003D0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_02' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_03) == 0x0003D8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_03' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_04) == 0x0003E0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_04' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_05) == 0x0003E8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_05' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_06) == 0x0003F0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_06' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_07) == 0x0003F8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_07' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_08) == 0x000400, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_08' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_09) == 0x000408, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_09' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_10) == 0x000410, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_10' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_11) == 0x000418, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_11' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_12) == 0x000420, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_12' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_13) == 0x000428, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_13' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_14) == 0x000430, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_14' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_15) == 0x000438, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_15' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_16) == 0x000440, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_16' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_17) == 0x000448, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_17' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_18) == 0x000450, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_18' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_19) == 0x000458, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_19' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_20) == 0x000460, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_20' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_21) == 0x000468, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_21' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_22) == 0x000470, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_22' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_23) == 0x000478, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_23' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_24) == 0x000480, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_24' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_25) == 0x000488, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_25' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_26) == 0x000490, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_26' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_27) == 0x000498, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_27' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_28) == 0x0004A0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_28' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_29) == 0x0004A8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_29' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_30) == 0x0004B0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_30' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_31) == 0x0004B8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_31' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_32) == 0x0004C0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_32' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_33) == 0x0004C8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_33' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_34) == 0x0004D0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_34' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_35) == 0x0004D8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_35' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_36) == 0x0004E0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_36' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_37) == 0x0004E8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_37' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_38) == 0x0004F0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_38' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_39) == 0x0004F8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_39' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_40) == 0x000500, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_40' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_41) == 0x000508, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_41' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_42) == 0x000510, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_42' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_43) == 0x000518, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_43' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_44) == 0x000520, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_44' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_45) == 0x000528, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_45' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_46) == 0x000530, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_46' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_47) == 0x000538, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_47' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_48) == 0x000540, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_48' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_49) == 0x000548, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_49' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_50) == 0x000550, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_50' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_51) == 0x000558, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_51' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_52) == 0x000560, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_52' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_53) == 0x000568, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_53' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_54) == 0x000570, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_54' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_55) == 0x000578, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_55' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_56) == 0x000580, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_56' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_57) == 0x000588, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_57' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_58) == 0x000590, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_58' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_59) == 0x000598, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_59' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_60) == 0x0005A0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_60' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_61) == 0x0005A8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_61' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_62) == 0x0005B0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_62' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_63) == 0x0005B8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_63' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_64) == 0x0005C0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_64' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_65) == 0x0005C8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_65' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_66) == 0x0005D0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_66' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_67) == 0x0005D8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_67' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_68) == 0x0005E0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_68' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_69) == 0x0005E8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_69' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_70) == 0x0005F0, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_70' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_71) == 0x0005F8, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_71' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_72) == 0x000600, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_72' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_73) == 0x000608, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_73' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_74) == 0x000610, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_74' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_75) == 0x000618, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_75' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_76) == 0x000620, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_76' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_77) == 0x000628, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_77' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_78) == 0x000630, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_78' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_79) == 0x000638, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_79' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterZukanSeisokuti, Mon_C_80) == 0x000640, "Member 'FJackDataTableMonsterZukanSeisokuti::Mon_C_80' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotPseudoContinuation
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableMeosiSlotPseudoContinuation final : public FTableRowBase
{
public:
	int32                                         Game0;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game1;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game2;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game3;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game4;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotPseudoContinuation) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotPseudoContinuation");
static_assert(sizeof(FJackDataTableMeosiSlotPseudoContinuation) == 0x000020, "Wrong size on FJackDataTableMeosiSlotPseudoContinuation");
static_assert(offsetof(FJackDataTableMeosiSlotPseudoContinuation, Game0) == 0x000008, "Member 'FJackDataTableMeosiSlotPseudoContinuation::Game0' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotPseudoContinuation, Game1) == 0x00000C, "Member 'FJackDataTableMeosiSlotPseudoContinuation::Game1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotPseudoContinuation, Game2) == 0x000010, "Member 'FJackDataTableMeosiSlotPseudoContinuation::Game2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotPseudoContinuation, Game3) == 0x000014, "Member 'FJackDataTableMeosiSlotPseudoContinuation::Game3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotPseudoContinuation, Game4) == 0x000018, "Member 'FJackDataTableMeosiSlotPseudoContinuation::Game4' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotShimofuriChance
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMeosiSlotShimofuriChance final : public FTableRowBase
{
public:
	float                                         Probability;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotShimofuriChance) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotShimofuriChance");
static_assert(sizeof(FJackDataTableMeosiSlotShimofuriChance) == 0x000010, "Wrong size on FJackDataTableMeosiSlotShimofuriChance");
static_assert(offsetof(FJackDataTableMeosiSlotShimofuriChance, Probability) == 0x000008, "Member 'FJackDataTableMeosiSlotShimofuriChance::Probability' has a wrong offset!");

// ScriptStruct JackGame.JackGameFlagDefMiniGame
// 0x0001 (0x0001 - 0x0000)
struct FJackGameFlagDefMiniGame final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackGameFlagDefMiniGame) == 0x000001, "Wrong alignment on FJackGameFlagDefMiniGame");
static_assert(sizeof(FJackGameFlagDefMiniGame) == 0x000001, "Wrong size on FJackGameFlagDefMiniGame");

// ScriptStruct JackGame.JackDataTableMeosiSlotFlavorItemKindSelectProbability
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMeosiSlotFlavorItemKindSelectProbability final : public FTableRowBase
{
public:
	int32                                         Probability;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotFlavorItemKindSelectProbability) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotFlavorItemKindSelectProbability");
static_assert(sizeof(FJackDataTableMeosiSlotFlavorItemKindSelectProbability) == 0x000010, "Wrong size on FJackDataTableMeosiSlotFlavorItemKindSelectProbability");
static_assert(offsetof(FJackDataTableMeosiSlotFlavorItemKindSelectProbability, Probability) == 0x000008, "Member 'FJackDataTableMeosiSlotFlavorItemKindSelectProbability::Probability' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotFlavorItemRankSelectProbability
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableMeosiSlotFlavorItemRankSelectProbability final : public FTableRowBase
{
public:
	int32                                         Rank1;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank2;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank3;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank4;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank5;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotFlavorItemRankSelectProbability) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotFlavorItemRankSelectProbability");
static_assert(sizeof(FJackDataTableMeosiSlotFlavorItemRankSelectProbability) == 0x000020, "Wrong size on FJackDataTableMeosiSlotFlavorItemRankSelectProbability");
static_assert(offsetof(FJackDataTableMeosiSlotFlavorItemRankSelectProbability, Rank1) == 0x000008, "Member 'FJackDataTableMeosiSlotFlavorItemRankSelectProbability::Rank1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotFlavorItemRankSelectProbability, Rank2) == 0x00000C, "Member 'FJackDataTableMeosiSlotFlavorItemRankSelectProbability::Rank2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotFlavorItemRankSelectProbability, Rank3) == 0x000010, "Member 'FJackDataTableMeosiSlotFlavorItemRankSelectProbability::Rank3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotFlavorItemRankSelectProbability, Rank4) == 0x000014, "Member 'FJackDataTableMeosiSlotFlavorItemRankSelectProbability::Rank4' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotFlavorItemRankSelectProbability, Rank5) == 0x000018, "Member 'FJackDataTableMeosiSlotFlavorItemRankSelectProbability::Rank5' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableRouletteData
// 0x0060 (0x0068 - 0x0008)
struct FJackDataTableRouletteData final : public FTableRowBase
{
public:
	int32                                         ZOrder;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListNo;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         X;                                                 // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value1;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value2;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value3;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value4;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value5;                                            // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value6;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value7;                                            // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value8;                                            // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value9;                                            // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value10;                                           // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value11;                                           // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value12;                                           // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value13;                                           // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value14;                                           // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value15;                                           // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value16;                                           // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value17;                                           // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value18;                                           // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableRouletteData) == 0x000008, "Wrong alignment on FJackDataTableRouletteData");
static_assert(sizeof(FJackDataTableRouletteData) == 0x000068, "Wrong size on FJackDataTableRouletteData");
static_assert(offsetof(FJackDataTableRouletteData, ZOrder) == 0x000008, "Member 'FJackDataTableRouletteData::ZOrder' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteData, ListNo) == 0x00000C, "Member 'FJackDataTableRouletteData::ListNo' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteData, Num) == 0x000010, "Member 'FJackDataTableRouletteData::Num' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteData, X) == 0x000014, "Member 'FJackDataTableRouletteData::X' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteData, Y) == 0x000018, "Member 'FJackDataTableRouletteData::Y' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteData, Value1) == 0x00001C, "Member 'FJackDataTableRouletteData::Value1' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteData, Value2) == 0x000020, "Member 'FJackDataTableRouletteData::Value2' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteData, Value3) == 0x000024, "Member 'FJackDataTableRouletteData::Value3' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteData, Value4) == 0x000028, "Member 'FJackDataTableRouletteData::Value4' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteData, Value5) == 0x00002C, "Member 'FJackDataTableRouletteData::Value5' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteData, Value6) == 0x000030, "Member 'FJackDataTableRouletteData::Value6' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteData, Value7) == 0x000034, "Member 'FJackDataTableRouletteData::Value7' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteData, Value8) == 0x000038, "Member 'FJackDataTableRouletteData::Value8' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteData, Value9) == 0x00003C, "Member 'FJackDataTableRouletteData::Value9' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteData, Value10) == 0x000040, "Member 'FJackDataTableRouletteData::Value10' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteData, Value11) == 0x000044, "Member 'FJackDataTableRouletteData::Value11' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteData, Value12) == 0x000048, "Member 'FJackDataTableRouletteData::Value12' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteData, Value13) == 0x00004C, "Member 'FJackDataTableRouletteData::Value13' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteData, Value14) == 0x000050, "Member 'FJackDataTableRouletteData::Value14' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteData, Value15) == 0x000054, "Member 'FJackDataTableRouletteData::Value15' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteData, Value16) == 0x000058, "Member 'FJackDataTableRouletteData::Value16' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteData, Value17) == 0x00005C, "Member 'FJackDataTableRouletteData::Value17' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteData, Value18) == 0x000060, "Member 'FJackDataTableRouletteData::Value18' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotSpecialTrainingState
// 0x0010 (0x0010 - 0x0000)
struct FJackMeosiSlotSpecialTrainingState final
{
public:
	EJackMeosiSlotSpTrainingAuraColor             AuraColor;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotSpTrainingAct                   ActType;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotSpTrainingButton                PushButton;                                        // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SetNum;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameNum;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotSpTrainingGameState             GameState;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsChangeAuraColor;                                // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMeosiSlotSpecialTrainingState) == 0x000004, "Wrong alignment on FJackMeosiSlotSpecialTrainingState");
static_assert(sizeof(FJackMeosiSlotSpecialTrainingState) == 0x000010, "Wrong size on FJackMeosiSlotSpecialTrainingState");
static_assert(offsetof(FJackMeosiSlotSpecialTrainingState, AuraColor) == 0x000000, "Member 'FJackMeosiSlotSpecialTrainingState::AuraColor' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotSpecialTrainingState, ActType) == 0x000001, "Member 'FJackMeosiSlotSpecialTrainingState::ActType' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotSpecialTrainingState, PushButton) == 0x000002, "Member 'FJackMeosiSlotSpecialTrainingState::PushButton' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotSpecialTrainingState, SetNum) == 0x000004, "Member 'FJackMeosiSlotSpecialTrainingState::SetNum' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotSpecialTrainingState, GameNum) == 0x000008, "Member 'FJackMeosiSlotSpecialTrainingState::GameNum' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotSpecialTrainingState, GameState) == 0x00000C, "Member 'FJackMeosiSlotSpecialTrainingState::GameState' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotSpecialTrainingState, bIsChangeAuraColor) == 0x00000D, "Member 'FJackMeosiSlotSpecialTrainingState::bIsChangeAuraColor' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotHandStopRange
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMeosiSlotHandStopRange final : public FTableRowBase
{
public:
	TArray<float>                                 StopRange;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotHandStopRange) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotHandStopRange");
static_assert(sizeof(FJackDataTableMeosiSlotHandStopRange) == 0x000018, "Wrong size on FJackDataTableMeosiSlotHandStopRange");
static_assert(offsetof(FJackDataTableMeosiSlotHandStopRange, StopRange) == 0x000008, "Member 'FJackDataTableMeosiSlotHandStopRange::StopRange' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotActNoBase
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotActNoBase final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotActNoBase) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotActNoBase");
static_assert(sizeof(FJackLDT_MeosiSlotActNoBase) == 0x000010, "Wrong size on FJackLDT_MeosiSlotActNoBase");

// ScriptStruct JackGame.JackDataTableMeosiSlotHandStopType
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMeosiSlotHandStopType final : public FTableRowBase
{
public:
	EJackMeosiSlotReelPattern                     StopType;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotHandStopType) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotHandStopType");
static_assert(sizeof(FJackDataTableMeosiSlotHandStopType) == 0x000010, "Wrong size on FJackDataTableMeosiSlotHandStopType");
static_assert(offsetof(FJackDataTableMeosiSlotHandStopType, StopType) == 0x000008, "Member 'FJackDataTableMeosiSlotHandStopType::StopType' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableGermanRating
// 0x0040 (0x0040 - 0x0000)
struct FJackDataTableGermanRating final
{
public:
	class FString                                 NOM_Name;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GEN_Name;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DAT_Name;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ACC_Name;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableGermanRating) == 0x000008, "Wrong alignment on FJackDataTableGermanRating");
static_assert(sizeof(FJackDataTableGermanRating) == 0x000040, "Wrong size on FJackDataTableGermanRating");
static_assert(offsetof(FJackDataTableGermanRating, NOM_Name) == 0x000000, "Member 'FJackDataTableGermanRating::NOM_Name' has a wrong offset!");
static_assert(offsetof(FJackDataTableGermanRating, GEN_Name) == 0x000010, "Member 'FJackDataTableGermanRating::GEN_Name' has a wrong offset!");
static_assert(offsetof(FJackDataTableGermanRating, DAT_Name) == 0x000020, "Member 'FJackDataTableGermanRating::DAT_Name' has a wrong offset!");
static_assert(offsetof(FJackDataTableGermanRating, ACC_Name) == 0x000030, "Member 'FJackDataTableGermanRating::ACC_Name' has a wrong offset!");

// ScriptStruct JackGame.JackSetWorldTimeTrackInfo
// 0x0004 (0x0004 - 0x0000)
struct FJackSetWorldTimeTrackInfo final
{
public:
	float                                         IntrpSec;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackSetWorldTimeTrackInfo) == 0x000004, "Wrong alignment on FJackSetWorldTimeTrackInfo");
static_assert(sizeof(FJackSetWorldTimeTrackInfo) == 0x000004, "Wrong size on FJackSetWorldTimeTrackInfo");
static_assert(offsetof(FJackSetWorldTimeTrackInfo, IntrpSec) == 0x000000, "Member 'FJackSetWorldTimeTrackInfo::IntrpSec' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotSoundEffect
// 0x0008 (0x0008 - 0x0000)
struct FJackMeosiSlotSoundEffect final
{
public:
	EJackMeosiSlotSoundEffect                     Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMeosiSlotSoundEffect) == 0x000004, "Wrong alignment on FJackMeosiSlotSoundEffect");
static_assert(sizeof(FJackMeosiSlotSoundEffect) == 0x000008, "Wrong size on FJackMeosiSlotSoundEffect");
static_assert(offsetof(FJackMeosiSlotSoundEffect, Type) == 0x000000, "Member 'FJackMeosiSlotSoundEffect::Type' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotSoundEffect, Delay) == 0x000004, "Member 'FJackMeosiSlotSoundEffect::Delay' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotHandsOrder
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMeosiSlotHandsOrder final : public FTableRowBase
{
public:
	int32                                         Num;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotReelPattern                     HandName;                                          // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotHandsOrder) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotHandsOrder");
static_assert(sizeof(FJackDataTableMeosiSlotHandsOrder) == 0x000010, "Wrong size on FJackDataTableMeosiSlotHandsOrder");
static_assert(offsetof(FJackDataTableMeosiSlotHandsOrder, Num) == 0x000008, "Member 'FJackDataTableMeosiSlotHandsOrder::Num' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotHandsOrder, HandName) == 0x00000C, "Member 'FJackDataTableMeosiSlotHandsOrder::HandName' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotItemProbability
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableMeosiSlotItemProbability final : public FTableRowBase
{
public:
	int32                                         Orb_Default;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Feed_Default;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mimic_Default;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FlavorText_Default;                                // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Orb_CZ;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Feed_CZ;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mimic_CZ;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FlavorText_CZ;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotItemProbability) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotItemProbability");
static_assert(sizeof(FJackDataTableMeosiSlotItemProbability) == 0x000028, "Wrong size on FJackDataTableMeosiSlotItemProbability");
static_assert(offsetof(FJackDataTableMeosiSlotItemProbability, Orb_Default) == 0x000008, "Member 'FJackDataTableMeosiSlotItemProbability::Orb_Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotItemProbability, Feed_Default) == 0x00000C, "Member 'FJackDataTableMeosiSlotItemProbability::Feed_Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotItemProbability, Mimic_Default) == 0x000010, "Member 'FJackDataTableMeosiSlotItemProbability::Mimic_Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotItemProbability, FlavorText_Default) == 0x000014, "Member 'FJackDataTableMeosiSlotItemProbability::FlavorText_Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotItemProbability, Orb_CZ) == 0x000018, "Member 'FJackDataTableMeosiSlotItemProbability::Orb_CZ' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotItemProbability, Feed_CZ) == 0x00001C, "Member 'FJackDataTableMeosiSlotItemProbability::Feed_CZ' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotItemProbability, Mimic_CZ) == 0x000020, "Member 'FJackDataTableMeosiSlotItemProbability::Mimic_CZ' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotItemProbability, FlavorText_CZ) == 0x000024, "Member 'FJackDataTableMeosiSlotItemProbability::FlavorText_CZ' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotShimohuriResultME
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableMeosiSlotShimohuriResultME final : public FTableRowBase
{
public:
	int32                                         Nums;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MeId;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotShimohuriResultME) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotShimohuriResultME");
static_assert(sizeof(FJackDataTableMeosiSlotShimohuriResultME) == 0x000020, "Wrong size on FJackDataTableMeosiSlotShimohuriResultME");
static_assert(offsetof(FJackDataTableMeosiSlotShimohuriResultME, Nums) == 0x000008, "Member 'FJackDataTableMeosiSlotShimohuriResultME::Nums' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotShimohuriResultME, MeId) == 0x000010, "Member 'FJackDataTableMeosiSlotShimohuriResultME::MeId' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotShimohuriAppearRate
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMeosiSlotShimohuriAppearRate final : public FTableRowBase
{
public:
	int32                                         AppRate;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterID                       MonsterID;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotShimohuriAppearRate) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotShimohuriAppearRate");
static_assert(sizeof(FJackDataTableMeosiSlotShimohuriAppearRate) == 0x000010, "Wrong size on FJackDataTableMeosiSlotShimohuriAppearRate");
static_assert(offsetof(FJackDataTableMeosiSlotShimohuriAppearRate, AppRate) == 0x000008, "Member 'FJackDataTableMeosiSlotShimohuriAppearRate::AppRate' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotShimohuriAppearRate, MonsterID) == 0x00000C, "Member 'FJackDataTableMeosiSlotShimohuriAppearRate::MonsterID' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableNPCReaction
// 0x0150 (0x0158 - 0x0008)
struct FJackDataTableNPCReaction final : public FTableRowBase
{
public:
	bool                                          bOnlyNormalAnimation;                              // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEscapePlayer;                                     // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EscapePlayerFukidasi;                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEscapeObject;                                     // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EscapeObjectFukidasi;                              // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAvoidPlayer;                                      // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AvoidFukidasi;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Animation;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Fukidasi;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowHP_Distance;                                    // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowHP_Angle;                                       // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LowHP_Animation;                                   // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LowHP_Fukidasi;                                    // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowHP_Rate;                                        // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Doku_Distance;                                     // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Doku_Angle;                                        // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Doku_Animation;                                    // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Doku_Fukidasi;                                     // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Noroi_Distance;                                    // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Noroi_Angle;                                       // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Noroi_Animation;                                   // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Noroi_Fukidasi;                                    // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShyCurse_Distance;                                 // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShyCurse_Angle;                                    // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShyCurse_Animation;                                // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShyCurse_Fukidasi;                                 // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrushObject_Distance;                              // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrushObject_Angle;                                 // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CrushObject_Animation;                             // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CrushObject_Fukidasi;                              // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OpenCloset_Distance;                               // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OpenCloset_Angle;                                  // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OpenCloset_Animation;                              // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OpenCloset_Fukidasi;                               // 0x0128(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OpenTreasureBox_Distance;                          // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OpenTreasureBox_Angle;                             // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OpenTreasureBox_Animation;                         // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OpenTreasureBox_Fukidasi;                          // 0x0148(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableNPCReaction) == 0x000008, "Wrong alignment on FJackDataTableNPCReaction");
static_assert(sizeof(FJackDataTableNPCReaction) == 0x000158, "Wrong size on FJackDataTableNPCReaction");
static_assert(offsetof(FJackDataTableNPCReaction, bOnlyNormalAnimation) == 0x000008, "Member 'FJackDataTableNPCReaction::bOnlyNormalAnimation' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, bEscapePlayer) == 0x000009, "Member 'FJackDataTableNPCReaction::bEscapePlayer' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, EscapePlayerFukidasi) == 0x000010, "Member 'FJackDataTableNPCReaction::EscapePlayerFukidasi' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, bEscapeObject) == 0x000020, "Member 'FJackDataTableNPCReaction::bEscapeObject' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, EscapeObjectFukidasi) == 0x000028, "Member 'FJackDataTableNPCReaction::EscapeObjectFukidasi' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, bAvoidPlayer) == 0x000038, "Member 'FJackDataTableNPCReaction::bAvoidPlayer' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, AvoidFukidasi) == 0x000040, "Member 'FJackDataTableNPCReaction::AvoidFukidasi' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, Distance) == 0x000050, "Member 'FJackDataTableNPCReaction::Distance' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, Angle) == 0x000054, "Member 'FJackDataTableNPCReaction::Angle' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, Animation) == 0x000058, "Member 'FJackDataTableNPCReaction::Animation' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, Fukidasi) == 0x000060, "Member 'FJackDataTableNPCReaction::Fukidasi' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, LowHP_Distance) == 0x000070, "Member 'FJackDataTableNPCReaction::LowHP_Distance' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, LowHP_Angle) == 0x000074, "Member 'FJackDataTableNPCReaction::LowHP_Angle' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, LowHP_Animation) == 0x000078, "Member 'FJackDataTableNPCReaction::LowHP_Animation' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, LowHP_Fukidasi) == 0x000080, "Member 'FJackDataTableNPCReaction::LowHP_Fukidasi' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, LowHP_Rate) == 0x000090, "Member 'FJackDataTableNPCReaction::LowHP_Rate' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, Doku_Distance) == 0x000094, "Member 'FJackDataTableNPCReaction::Doku_Distance' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, Doku_Angle) == 0x000098, "Member 'FJackDataTableNPCReaction::Doku_Angle' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, Doku_Animation) == 0x0000A0, "Member 'FJackDataTableNPCReaction::Doku_Animation' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, Doku_Fukidasi) == 0x0000A8, "Member 'FJackDataTableNPCReaction::Doku_Fukidasi' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, Noroi_Distance) == 0x0000B8, "Member 'FJackDataTableNPCReaction::Noroi_Distance' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, Noroi_Angle) == 0x0000BC, "Member 'FJackDataTableNPCReaction::Noroi_Angle' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, Noroi_Animation) == 0x0000C0, "Member 'FJackDataTableNPCReaction::Noroi_Animation' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, Noroi_Fukidasi) == 0x0000C8, "Member 'FJackDataTableNPCReaction::Noroi_Fukidasi' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, ShyCurse_Distance) == 0x0000D8, "Member 'FJackDataTableNPCReaction::ShyCurse_Distance' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, ShyCurse_Angle) == 0x0000DC, "Member 'FJackDataTableNPCReaction::ShyCurse_Angle' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, ShyCurse_Animation) == 0x0000E0, "Member 'FJackDataTableNPCReaction::ShyCurse_Animation' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, ShyCurse_Fukidasi) == 0x0000E8, "Member 'FJackDataTableNPCReaction::ShyCurse_Fukidasi' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, CrushObject_Distance) == 0x0000F8, "Member 'FJackDataTableNPCReaction::CrushObject_Distance' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, CrushObject_Angle) == 0x0000FC, "Member 'FJackDataTableNPCReaction::CrushObject_Angle' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, CrushObject_Animation) == 0x000100, "Member 'FJackDataTableNPCReaction::CrushObject_Animation' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, CrushObject_Fukidasi) == 0x000108, "Member 'FJackDataTableNPCReaction::CrushObject_Fukidasi' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, OpenCloset_Distance) == 0x000118, "Member 'FJackDataTableNPCReaction::OpenCloset_Distance' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, OpenCloset_Angle) == 0x00011C, "Member 'FJackDataTableNPCReaction::OpenCloset_Angle' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, OpenCloset_Animation) == 0x000120, "Member 'FJackDataTableNPCReaction::OpenCloset_Animation' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, OpenCloset_Fukidasi) == 0x000128, "Member 'FJackDataTableNPCReaction::OpenCloset_Fukidasi' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, OpenTreasureBox_Distance) == 0x000138, "Member 'FJackDataTableNPCReaction::OpenTreasureBox_Distance' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, OpenTreasureBox_Angle) == 0x00013C, "Member 'FJackDataTableNPCReaction::OpenTreasureBox_Angle' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, OpenTreasureBox_Animation) == 0x000140, "Member 'FJackDataTableNPCReaction::OpenTreasureBox_Animation' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCReaction, OpenTreasureBox_Fukidasi) == 0x000148, "Member 'FJackDataTableNPCReaction::OpenTreasureBox_Fukidasi' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotEtcConf
// 0x0040 (0x0048 - 0x0008)
struct FJackDataTableMeosiSlotEtcConf final : public FTableRowBase
{
public:
	int32                                         HighProbMin;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusGames;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinFixed;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HintHighSet;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HintOddEven;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceExactly;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FeedPat;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComeBack;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumEndedGame;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimRpm;                                            // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SettingAskGames;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoPlayGames;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoPlayInterval;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimCountLowerRate;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimCountUperRate;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotEtcConf) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotEtcConf");
static_assert(sizeof(FJackDataTableMeosiSlotEtcConf) == 0x000048, "Wrong size on FJackDataTableMeosiSlotEtcConf");
static_assert(offsetof(FJackDataTableMeosiSlotEtcConf, HighProbMin) == 0x000008, "Member 'FJackDataTableMeosiSlotEtcConf::HighProbMin' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotEtcConf, BonusGames) == 0x00000C, "Member 'FJackDataTableMeosiSlotEtcConf::BonusGames' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotEtcConf, WinFixed) == 0x000010, "Member 'FJackDataTableMeosiSlotEtcConf::WinFixed' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotEtcConf, HintHighSet) == 0x000014, "Member 'FJackDataTableMeosiSlotEtcConf::HintHighSet' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotEtcConf, HintOddEven) == 0x000018, "Member 'FJackDataTableMeosiSlotEtcConf::HintOddEven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotEtcConf, ForceExactly) == 0x00001C, "Member 'FJackDataTableMeosiSlotEtcConf::ForceExactly' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotEtcConf, FeedPat) == 0x000020, "Member 'FJackDataTableMeosiSlotEtcConf::FeedPat' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotEtcConf, ComeBack) == 0x000024, "Member 'FJackDataTableMeosiSlotEtcConf::ComeBack' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotEtcConf, NumEndedGame) == 0x000028, "Member 'FJackDataTableMeosiSlotEtcConf::NumEndedGame' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotEtcConf, SimRpm) == 0x00002C, "Member 'FJackDataTableMeosiSlotEtcConf::SimRpm' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotEtcConf, SettingAskGames) == 0x000030, "Member 'FJackDataTableMeosiSlotEtcConf::SettingAskGames' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotEtcConf, AutoPlayGames) == 0x000034, "Member 'FJackDataTableMeosiSlotEtcConf::AutoPlayGames' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotEtcConf, AutoPlayInterval) == 0x000038, "Member 'FJackDataTableMeosiSlotEtcConf::AutoPlayInterval' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotEtcConf, SimCountLowerRate) == 0x00003C, "Member 'FJackDataTableMeosiSlotEtcConf::SimCountLowerRate' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotEtcConf, SimCountUperRate) == 0x000040, "Member 'FJackDataTableMeosiSlotEtcConf::SimCountUperRate' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_PartyTalkData_S020
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_S020 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_S020) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_S020");
static_assert(sizeof(FJackLDT_PartyTalkData_S020) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_S020");

// ScriptStruct JackGame.JackMeosiSlotReelMatrix
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FJackMeosiSlotReelMatrix final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMeosiSlotReelMatrix) == 0x000008, "Wrong alignment on FJackMeosiSlotReelMatrix");
static_assert(sizeof(FJackMeosiSlotReelMatrix) == 0x000030, "Wrong size on FJackMeosiSlotReelMatrix");

// ScriptStruct JackGame.JackDataTableMeosiSlotMissHit
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMeosiSlotMissHit final : public FTableRowBase
{
public:
	int32                                         Miss;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hit;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotMissHit) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotMissHit");
static_assert(sizeof(FJackDataTableMeosiSlotMissHit) == 0x000010, "Wrong size on FJackDataTableMeosiSlotMissHit");
static_assert(offsetof(FJackDataTableMeosiSlotMissHit, Miss) == 0x000008, "Member 'FJackDataTableMeosiSlotMissHit::Miss' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMissHit, Hit) == 0x00000C, "Member 'FJackDataTableMeosiSlotMissHit::Hit' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotHandNmToHs
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMeosiSlotHandNmToHs final : public FTableRowBase
{
public:
	EJackMeosiSlotHsHand                          HsHand;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotHandNmToHs) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotHandNmToHs");
static_assert(sizeof(FJackDataTableMeosiSlotHandNmToHs) == 0x000010, "Wrong size on FJackDataTableMeosiSlotHandNmToHs");
static_assert(offsetof(FJackDataTableMeosiSlotHandNmToHs, HsHand) == 0x000008, "Member 'FJackDataTableMeosiSlotHandNmToHs::HsHand' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotSptAuraPoint
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMeosiSlotSptAuraPoint final : public FTableRowBase
{
public:
	int32                                         LastSucceedProb;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotSpTrainingAuraColor             AuraColor;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotSptAuraPoint) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotSptAuraPoint");
static_assert(sizeof(FJackDataTableMeosiSlotSptAuraPoint) == 0x000010, "Wrong size on FJackDataTableMeosiSlotSptAuraPoint");
static_assert(offsetof(FJackDataTableMeosiSlotSptAuraPoint, LastSucceedProb) == 0x000008, "Member 'FJackDataTableMeosiSlotSptAuraPoint::LastSucceedProb' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotSptAuraPoint, AuraColor) == 0x00000C, "Member 'FJackDataTableMeosiSlotSptAuraPoint::AuraColor' has a wrong offset!");

// ScriptStruct JackGame.JackPreloadDataListLevelStatus
// 0x0030 (0x0030 - 0x0000)
struct FJackPreloadDataListLevelStatus final
{
public:
	class FString                                 Package;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PackageName;                                       // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StreamingStatus;                                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LODIndex;                                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerInside;                                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackPreloadDataListLevelStatus) == 0x000008, "Wrong alignment on FJackPreloadDataListLevelStatus");
static_assert(sizeof(FJackPreloadDataListLevelStatus) == 0x000030, "Wrong size on FJackPreloadDataListLevelStatus");
static_assert(offsetof(FJackPreloadDataListLevelStatus, Package) == 0x000000, "Member 'FJackPreloadDataListLevelStatus::Package' has a wrong offset!");
static_assert(offsetof(FJackPreloadDataListLevelStatus, PackageName) == 0x000010, "Member 'FJackPreloadDataListLevelStatus::PackageName' has a wrong offset!");
static_assert(offsetof(FJackPreloadDataListLevelStatus, StreamingStatus) == 0x000020, "Member 'FJackPreloadDataListLevelStatus::StreamingStatus' has a wrong offset!");
static_assert(offsetof(FJackPreloadDataListLevelStatus, LODIndex) == 0x000024, "Member 'FJackPreloadDataListLevelStatus::LODIndex' has a wrong offset!");
static_assert(offsetof(FJackPreloadDataListLevelStatus, bPlayerInside) == 0x000028, "Member 'FJackPreloadDataListLevelStatus::bPlayerInside' has a wrong offset!");

// ScriptStruct JackGame.JackMonsterData
// 0x00C8 (0x00C8 - 0x0000)
struct alignas(0x08) FJackMonsterData final
{
public:
	uint8                                         Pad_0[0xC8];                                       // 0x0000(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMonsterData) == 0x000008, "Wrong alignment on FJackMonsterData");
static_assert(sizeof(FJackMonsterData) == 0x0000C8, "Wrong size on FJackMonsterData");

// ScriptStruct JackGame.JackDataTableMeosiSlotSptHandsPoint
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMeosiSlotSptHandsPoint final : public FTableRowBase
{
public:
	int32                                         MinPoint;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPoint;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AtAddChgProb;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NoAddChgProb;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotSptHandsPoint) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotSptHandsPoint");
static_assert(sizeof(FJackDataTableMeosiSlotSptHandsPoint) == 0x000018, "Wrong size on FJackDataTableMeosiSlotSptHandsPoint");
static_assert(offsetof(FJackDataTableMeosiSlotSptHandsPoint, MinPoint) == 0x000008, "Member 'FJackDataTableMeosiSlotSptHandsPoint::MinPoint' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotSptHandsPoint, MaxPoint) == 0x00000C, "Member 'FJackDataTableMeosiSlotSptHandsPoint::MaxPoint' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotSptHandsPoint, AtAddChgProb) == 0x000010, "Member 'FJackDataTableMeosiSlotSptHandsPoint::AtAddChgProb' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotSptHandsPoint, NoAddChgProb) == 0x000014, "Member 'FJackDataTableMeosiSlotSptHandsPoint::NoAddChgProb' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableGermanCaseChangeTable
// 0x0028 (0x0030 - 0x0008)
struct FJackDataTableGermanCaseChangeTable final : public FTableRowBase
{
public:
	EJackGermanSectionType                        Section;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DefName;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJackDataTableGermanRating>     Ratings;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableGermanCaseChangeTable) == 0x000008, "Wrong alignment on FJackDataTableGermanCaseChangeTable");
static_assert(sizeof(FJackDataTableGermanCaseChangeTable) == 0x000030, "Wrong size on FJackDataTableGermanCaseChangeTable");
static_assert(offsetof(FJackDataTableGermanCaseChangeTable, Section) == 0x000008, "Member 'FJackDataTableGermanCaseChangeTable::Section' has a wrong offset!");
static_assert(offsetof(FJackDataTableGermanCaseChangeTable, DefName) == 0x000010, "Member 'FJackDataTableGermanCaseChangeTable::DefName' has a wrong offset!");
static_assert(offsetof(FJackDataTableGermanCaseChangeTable, Ratings) == 0x000020, "Member 'FJackDataTableGermanCaseChangeTable::Ratings' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotActControl
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableMeosiSlotActControl final : public FTableRowBase
{
public:
	TArray<bool>                                  RandomTorFArray;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<bool>                                  TorFArray;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotActControl) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotActControl");
static_assert(sizeof(FJackDataTableMeosiSlotActControl) == 0x000028, "Wrong size on FJackDataTableMeosiSlotActControl");
static_assert(offsetof(FJackDataTableMeosiSlotActControl, RandomTorFArray) == 0x000008, "Member 'FJackDataTableMeosiSlotActControl::RandomTorFArray' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotActControl, TorFArray) == 0x000018, "Member 'FJackDataTableMeosiSlotActControl::TorFArray' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotScenarioRandom
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableMeosiSlotScenarioRandom final : public FTableRowBase
{
public:
	TArray<EJackMeosiSlotScenarioActNo>           ActNoArray;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 RatioArray;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotScenarioRandom) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotScenarioRandom");
static_assert(sizeof(FJackDataTableMeosiSlotScenarioRandom) == 0x000028, "Wrong size on FJackDataTableMeosiSlotScenarioRandom");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioRandom, ActNoArray) == 0x000008, "Member 'FJackDataTableMeosiSlotScenarioRandom::ActNoArray' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioRandom, RatioArray) == 0x000018, "Member 'FJackDataTableMeosiSlotScenarioRandom::RatioArray' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotScenarioPatternBlock
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMeosiSlotScenarioPatternBlock final : public FTableRowBase
{
public:
	EJackMeosiSlotScenarioActNo                   ActNo;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GameNum;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotScenarioHint                    Hint;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotScenarioStage                   Stage;                                             // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotScenarioSPTraining              Training;                                          // 0x0012(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotScenarioPatternBlock) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotScenarioPatternBlock");
static_assert(sizeof(FJackDataTableMeosiSlotScenarioPatternBlock) == 0x000018, "Wrong size on FJackDataTableMeosiSlotScenarioPatternBlock");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioPatternBlock, ActNo) == 0x000008, "Member 'FJackDataTableMeosiSlotScenarioPatternBlock::ActNo' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioPatternBlock, GameNum) == 0x00000C, "Member 'FJackDataTableMeosiSlotScenarioPatternBlock::GameNum' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioPatternBlock, Hint) == 0x000010, "Member 'FJackDataTableMeosiSlotScenarioPatternBlock::Hint' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioPatternBlock, Stage) == 0x000011, "Member 'FJackDataTableMeosiSlotScenarioPatternBlock::Stage' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioPatternBlock, Training) == 0x000012, "Member 'FJackDataTableMeosiSlotScenarioPatternBlock::Training' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotScenarioPattern
// 0x0038 (0x0040 - 0x0008)
struct FJackDataTableMeosiSlotScenarioPattern final : public FTableRowBase
{
public:
	int32                                         Route;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Group;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ratio;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OrderInPattern;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OrderInGroup;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  HandTorFArray;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FJackDataTableMeosiSlotScenarioPatternBlock> ActStructArray;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotScenarioPattern) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotScenarioPattern");
static_assert(sizeof(FJackDataTableMeosiSlotScenarioPattern) == 0x000040, "Wrong size on FJackDataTableMeosiSlotScenarioPattern");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioPattern, Route) == 0x000008, "Member 'FJackDataTableMeosiSlotScenarioPattern::Route' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioPattern, Group) == 0x00000C, "Member 'FJackDataTableMeosiSlotScenarioPattern::Group' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioPattern, Ratio) == 0x000010, "Member 'FJackDataTableMeosiSlotScenarioPattern::Ratio' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioPattern, OrderInPattern) == 0x000014, "Member 'FJackDataTableMeosiSlotScenarioPattern::OrderInPattern' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioPattern, OrderInGroup) == 0x000018, "Member 'FJackDataTableMeosiSlotScenarioPattern::OrderInGroup' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioPattern, HandTorFArray) == 0x000020, "Member 'FJackDataTableMeosiSlotScenarioPattern::HandTorFArray' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioPattern, ActStructArray) == 0x000030, "Member 'FJackDataTableMeosiSlotScenarioPattern::ActStructArray' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleB_002_N
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleB_002_N final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleB_002_N) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleB_002_N");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleB_002_N) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleB_002_N");

// ScriptStruct JackGame.JackFacialPresetTrackKey
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FJackFacialPresetTrackKey final
{
public:
	float                                         TimeVar;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PresetName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendSec;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FaceWeight;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDisableState;                                    // 0x0018(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMatineeFacialReferanceState              FacialState;                                       // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackFacialPresetTrackKey) == 0x000008, "Wrong alignment on FJackFacialPresetTrackKey");
static_assert(sizeof(FJackFacialPresetTrackKey) == 0x000020, "Wrong size on FJackFacialPresetTrackKey");
static_assert(offsetof(FJackFacialPresetTrackKey, TimeVar) == 0x000000, "Member 'FJackFacialPresetTrackKey::TimeVar' has a wrong offset!");
static_assert(offsetof(FJackFacialPresetTrackKey, PresetName) == 0x000008, "Member 'FJackFacialPresetTrackKey::PresetName' has a wrong offset!");
static_assert(offsetof(FJackFacialPresetTrackKey, BlendSec) == 0x000010, "Member 'FJackFacialPresetTrackKey::BlendSec' has a wrong offset!");
static_assert(offsetof(FJackFacialPresetTrackKey, FaceWeight) == 0x000014, "Member 'FJackFacialPresetTrackKey::FaceWeight' has a wrong offset!");
static_assert(offsetof(FJackFacialPresetTrackKey, IsDisableState) == 0x000018, "Member 'FJackFacialPresetTrackKey::IsDisableState' has a wrong offset!");
static_assert(offsetof(FJackFacialPresetTrackKey, FacialState) == 0x000019, "Member 'FJackFacialPresetTrackKey::FacialState' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Sim_C_HairTailA1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_C_HairTailA1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_C_HairTailA1) == 0x000008, "Wrong alignment on FJackLDT_Sim_C_HairTailA1");
static_assert(sizeof(FJackLDT_Sim_C_HairTailA1) == 0x000010, "Wrong size on FJackLDT_Sim_C_HairTailA1");

// ScriptStruct JackGame.JackDataTableSlotAnimAsset
// 0x0060 (0x0068 - 0x0008)
struct FJackDataTableSlotAnimAsset final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UAnimSequence>           Stand;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           Reach;                                             // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           Win;                                               // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           WinIn;                                             // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableSlotAnimAsset) == 0x000008, "Wrong alignment on FJackDataTableSlotAnimAsset");
static_assert(sizeof(FJackDataTableSlotAnimAsset) == 0x000068, "Wrong size on FJackDataTableSlotAnimAsset");
static_assert(offsetof(FJackDataTableSlotAnimAsset, Stand) == 0x000008, "Member 'FJackDataTableSlotAnimAsset::Stand' has a wrong offset!");
static_assert(offsetof(FJackDataTableSlotAnimAsset, Reach) == 0x000020, "Member 'FJackDataTableSlotAnimAsset::Reach' has a wrong offset!");
static_assert(offsetof(FJackDataTableSlotAnimAsset, Win) == 0x000038, "Member 'FJackDataTableSlotAnimAsset::Win' has a wrong offset!");
static_assert(offsetof(FJackDataTableSlotAnimAsset, WinIn) == 0x000050, "Member 'FJackDataTableSlotAnimAsset::WinIn' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_UmaRaceMapDataTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceMapDataTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceMapDataTable) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceMapDataTable");
static_assert(sizeof(FJackLDT_UmaRaceMapDataTable) == 0x000010, "Wrong size on FJackLDT_UmaRaceMapDataTable");

// ScriptStruct JackGame.JackDataTableMeosiSlotScenarioSlime
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableMeosiSlotScenarioSlime final : public FTableRowBase
{
public:
	int32                                         Slime;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Peach;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Metal;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotScenarioSubAct                  SubAct;                                            // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Probability;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotKeySeType                       KeySeType;                                         // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         KeySeProb;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotScenarioSlime) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotScenarioSlime");
static_assert(sizeof(FJackDataTableMeosiSlotScenarioSlime) == 0x000028, "Wrong size on FJackDataTableMeosiSlotScenarioSlime");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioSlime, Slime) == 0x000008, "Member 'FJackDataTableMeosiSlotScenarioSlime::Slime' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioSlime, Peach) == 0x00000C, "Member 'FJackDataTableMeosiSlotScenarioSlime::Peach' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioSlime, Metal) == 0x000010, "Member 'FJackDataTableMeosiSlotScenarioSlime::Metal' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioSlime, SubAct) == 0x000014, "Member 'FJackDataTableMeosiSlotScenarioSlime::SubAct' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioSlime, Probability) == 0x000018, "Member 'FJackDataTableMeosiSlotScenarioSlime::Probability' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioSlime, KeySeType) == 0x00001C, "Member 'FJackDataTableMeosiSlotScenarioSlime::KeySeType' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioSlime, KeySeProb) == 0x000020, "Member 'FJackDataTableMeosiSlotScenarioSlime::KeySeProb' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableSyuurenjou
// 0x0128 (0x0130 - 0x0008)
struct FJackDataTableSyuurenjou final : public FTableRowBase
{
public:
	class FName                                   Title;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Description;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScoreGameFlagName;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ClearedFlagName;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisplayConditions0;                                // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisplayConditions1;                                // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OpenConditions0;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OpenConditions1;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedMemberCount;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleCount;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleId0;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleName0;                                       // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleMemberCount0;                                // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BattleId1;                                         // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleName1;                                       // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleMemberCount1;                                // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BattleId2;                                         // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleName2;                                       // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleMemberCount2;                                // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BattleId3;                                         // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleName3;                                       // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleMemberCount3;                                // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackDataTableSyuurenjouRewardInfo     RewardInfo0;                                       // 0x00B0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackDataTableSyuurenjouRewardInfo     RewardInfo1;                                       // 0x00D0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackDataTableSyuurenjouRewardInfo     RewardInfo2;                                       // 0x00F0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackDataTableSyuurenjouRewardInfo     RewardInfo3;                                       // 0x0110(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableSyuurenjou) == 0x000008, "Wrong alignment on FJackDataTableSyuurenjou");
static_assert(sizeof(FJackDataTableSyuurenjou) == 0x000130, "Wrong size on FJackDataTableSyuurenjou");
static_assert(offsetof(FJackDataTableSyuurenjou, Title) == 0x000008, "Member 'FJackDataTableSyuurenjou::Title' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, Description) == 0x000010, "Member 'FJackDataTableSyuurenjou::Description' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, ScoreGameFlagName) == 0x000018, "Member 'FJackDataTableSyuurenjou::ScoreGameFlagName' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, ClearedFlagName) == 0x000020, "Member 'FJackDataTableSyuurenjou::ClearedFlagName' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, DisplayConditions0) == 0x000028, "Member 'FJackDataTableSyuurenjou::DisplayConditions0' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, DisplayConditions1) == 0x000030, "Member 'FJackDataTableSyuurenjou::DisplayConditions1' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, OpenConditions0) == 0x000038, "Member 'FJackDataTableSyuurenjou::OpenConditions0' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, OpenConditions1) == 0x000040, "Member 'FJackDataTableSyuurenjou::OpenConditions1' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, NeedMemberCount) == 0x000048, "Member 'FJackDataTableSyuurenjou::NeedMemberCount' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, BattleCount) == 0x00004C, "Member 'FJackDataTableSyuurenjou::BattleCount' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, BattleId0) == 0x000050, "Member 'FJackDataTableSyuurenjou::BattleId0' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, BattleName0) == 0x000058, "Member 'FJackDataTableSyuurenjou::BattleName0' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, BattleMemberCount0) == 0x000060, "Member 'FJackDataTableSyuurenjou::BattleMemberCount0' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, BattleId1) == 0x000068, "Member 'FJackDataTableSyuurenjou::BattleId1' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, BattleName1) == 0x000070, "Member 'FJackDataTableSyuurenjou::BattleName1' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, BattleMemberCount1) == 0x000078, "Member 'FJackDataTableSyuurenjou::BattleMemberCount1' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, BattleId2) == 0x000080, "Member 'FJackDataTableSyuurenjou::BattleId2' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, BattleName2) == 0x000088, "Member 'FJackDataTableSyuurenjou::BattleName2' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, BattleMemberCount2) == 0x000090, "Member 'FJackDataTableSyuurenjou::BattleMemberCount2' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, BattleId3) == 0x000098, "Member 'FJackDataTableSyuurenjou::BattleId3' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, BattleName3) == 0x0000A0, "Member 'FJackDataTableSyuurenjou::BattleName3' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, BattleMemberCount3) == 0x0000A8, "Member 'FJackDataTableSyuurenjou::BattleMemberCount3' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, RewardInfo0) == 0x0000B0, "Member 'FJackDataTableSyuurenjou::RewardInfo0' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, RewardInfo1) == 0x0000D0, "Member 'FJackDataTableSyuurenjou::RewardInfo1' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, RewardInfo2) == 0x0000F0, "Member 'FJackDataTableSyuurenjou::RewardInfo2' has a wrong offset!");
static_assert(offsetof(FJackDataTableSyuurenjou, RewardInfo3) == 0x000110, "Member 'FJackDataTableSyuurenjou::RewardInfo3' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_PokerItem_100Coin_Gold
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PokerItem_100Coin_Gold final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PokerItem_100Coin_Gold) == 0x000008, "Wrong alignment on FJackLDT_PokerItem_100Coin_Gold");
static_assert(sizeof(FJackLDT_PokerItem_100Coin_Gold) == 0x000010, "Wrong size on FJackLDT_PokerItem_100Coin_Gold");

// ScriptStruct JackGame.JackDataTableMeosiSlotScenarioHazure
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMeosiSlotScenarioHazure final : public FTableRowBase
{
public:
	EJackMeosiSlotScenarioHazureKind              ScenarioKind;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotScenarioSubAct                  SubAct;                                            // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Probability;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotKeySeType                       KeySeType;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         KeySeProb;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotScenarioHazure) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotScenarioHazure");
static_assert(sizeof(FJackDataTableMeosiSlotScenarioHazure) == 0x000018, "Wrong size on FJackDataTableMeosiSlotScenarioHazure");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioHazure, ScenarioKind) == 0x000008, "Member 'FJackDataTableMeosiSlotScenarioHazure::ScenarioKind' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioHazure, SubAct) == 0x000009, "Member 'FJackDataTableMeosiSlotScenarioHazure::SubAct' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioHazure, Probability) == 0x00000C, "Member 'FJackDataTableMeosiSlotScenarioHazure::Probability' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioHazure, KeySeType) == 0x000010, "Member 'FJackDataTableMeosiSlotScenarioHazure::KeySeType' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioHazure, KeySeProb) == 0x000014, "Member 'FJackDataTableMeosiSlotScenarioHazure::KeySeProb' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotScenarioTBox
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableMeosiSlotScenarioTBox final : public FTableRowBase
{
public:
	EJackMeosiSlotScenarioTBoxKind                ScenarioKind;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotScenarioSubAct                  SubAct;                                            // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Probability;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotKeySeType                       KeySeType;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         KeySeProb;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotScenarioTBoxOpenTiming          OpenTiming;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotScenarioTBox) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotScenarioTBox");
static_assert(sizeof(FJackDataTableMeosiSlotScenarioTBox) == 0x000020, "Wrong size on FJackDataTableMeosiSlotScenarioTBox");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioTBox, ScenarioKind) == 0x000008, "Member 'FJackDataTableMeosiSlotScenarioTBox::ScenarioKind' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioTBox, SubAct) == 0x000009, "Member 'FJackDataTableMeosiSlotScenarioTBox::SubAct' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioTBox, Probability) == 0x00000C, "Member 'FJackDataTableMeosiSlotScenarioTBox::Probability' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioTBox, KeySeType) == 0x000010, "Member 'FJackDataTableMeosiSlotScenarioTBox::KeySeType' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioTBox, KeySeProb) == 0x000014, "Member 'FJackDataTableMeosiSlotScenarioTBox::KeySeProb' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenarioTBox, OpenTiming) == 0x000018, "Member 'FJackDataTableMeosiSlotScenarioTBox::OpenTiming' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotScenario
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMeosiSlotScenario final : public FTableRowBase
{
public:
	int32                                         ScenarioKind;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubAct;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Probability;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotScenario) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotScenario");
static_assert(sizeof(FJackDataTableMeosiSlotScenario) == 0x000018, "Wrong size on FJackDataTableMeosiSlotScenario");
static_assert(offsetof(FJackDataTableMeosiSlotScenario, ScenarioKind) == 0x000008, "Member 'FJackDataTableMeosiSlotScenario::ScenarioKind' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenario, SubAct) == 0x00000C, "Member 'FJackDataTableMeosiSlotScenario::SubAct' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotScenario, Probability) == 0x000010, "Member 'FJackDataTableMeosiSlotScenario::Probability' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotLottery
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMeosiSlotLottery final : public FTableRowBase
{
public:
	TArray<int32>                                 EventLottery;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotLottery) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotLottery");
static_assert(sizeof(FJackDataTableMeosiSlotLottery) == 0x000018, "Wrong size on FJackDataTableMeosiSlotLottery");
static_assert(offsetof(FJackDataTableMeosiSlotLottery, EventLottery) == 0x000008, "Member 'FJackDataTableMeosiSlotLottery::EventLottery' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Pose_R_FrontHairE_up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_R_FrontHairE_up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_R_FrontHairE_up) == 0x000008, "Wrong alignment on FJackLDT_Pose_R_FrontHairE_up");
static_assert(sizeof(FJackLDT_Pose_R_FrontHairE_up) == 0x000010, "Wrong size on FJackLDT_Pose_R_FrontHairE_up");

// ScriptStruct JackGame.JackDataTablePartyTalkPositionInfo
// 0x0028 (0x0030 - 0x0008)
struct FJackDataTablePartyTalkPositionInfo final : public FTableRowBase
{
public:
	int32                                         DT_SeatMax;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackPartyTalkRelativePosition> DT_CharacterPos;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FJackPartyTalkRelativePosition> DT_CoffinPos;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTablePartyTalkPositionInfo) == 0x000008, "Wrong alignment on FJackDataTablePartyTalkPositionInfo");
static_assert(sizeof(FJackDataTablePartyTalkPositionInfo) == 0x000030, "Wrong size on FJackDataTablePartyTalkPositionInfo");
static_assert(offsetof(FJackDataTablePartyTalkPositionInfo, DT_SeatMax) == 0x000008, "Member 'FJackDataTablePartyTalkPositionInfo::DT_SeatMax' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkPositionInfo, DT_CharacterPos) == 0x000010, "Member 'FJackDataTablePartyTalkPositionInfo::DT_CharacterPos' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkPositionInfo, DT_CoffinPos) == 0x000020, "Member 'FJackDataTablePartyTalkPositionInfo::DT_CoffinPos' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_PrinSkirt_P006_RC
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_PrinSkirt_P006_RC final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_PrinSkirt_P006_RC) == 0x000008, "Wrong alignment on FJackLDT_RtEx_PrinSkirt_P006_RC");
static_assert(sizeof(FJackLDT_RtEx_PrinSkirt_P006_RC) == 0x000010, "Wrong size on FJackLDT_RtEx_PrinSkirt_P006_RC");

// ScriptStruct JackGame.JackDataTableMeosiSlotRareHandBonusLottery
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMeosiSlotRareHandBonusLottery final : public FTableRowBase
{
public:
	TArray<int32>                                 EventProbability;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotRareHandBonusLottery) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotRareHandBonusLottery");
static_assert(sizeof(FJackDataTableMeosiSlotRareHandBonusLottery) == 0x000018, "Wrong size on FJackDataTableMeosiSlotRareHandBonusLottery");
static_assert(offsetof(FJackDataTableMeosiSlotRareHandBonusLottery, EventProbability) == 0x000008, "Member 'FJackDataTableMeosiSlotRareHandBonusLottery::EventProbability' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableNPCImportanceScenari
// 0x0078 (0x0080 - 0x0008)
struct FJackDataTableNPCImportanceScenari final : public FTableRowBase
{
public:
	class FName                                   NpcId_01;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NpcId_02;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NpcId_03;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NpcId_04;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NpcId_05;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NpcId_06;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NpcId_07;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NpcId_08;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NpcId_09;                                          // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NPCID_10;                                          // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NPCID_11;                                          // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NPCID_12;                                          // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NPCID_13;                                          // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NPCID_14;                                          // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NPCID_15;                                          // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableNPCImportanceScenari) == 0x000008, "Wrong alignment on FJackDataTableNPCImportanceScenari");
static_assert(sizeof(FJackDataTableNPCImportanceScenari) == 0x000080, "Wrong size on FJackDataTableNPCImportanceScenari");
static_assert(offsetof(FJackDataTableNPCImportanceScenari, NpcId_01) == 0x000008, "Member 'FJackDataTableNPCImportanceScenari::NpcId_01' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCImportanceScenari, NpcId_02) == 0x000010, "Member 'FJackDataTableNPCImportanceScenari::NpcId_02' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCImportanceScenari, NpcId_03) == 0x000018, "Member 'FJackDataTableNPCImportanceScenari::NpcId_03' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCImportanceScenari, NpcId_04) == 0x000020, "Member 'FJackDataTableNPCImportanceScenari::NpcId_04' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCImportanceScenari, NpcId_05) == 0x000028, "Member 'FJackDataTableNPCImportanceScenari::NpcId_05' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCImportanceScenari, NpcId_06) == 0x000030, "Member 'FJackDataTableNPCImportanceScenari::NpcId_06' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCImportanceScenari, NpcId_07) == 0x000038, "Member 'FJackDataTableNPCImportanceScenari::NpcId_07' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCImportanceScenari, NpcId_08) == 0x000040, "Member 'FJackDataTableNPCImportanceScenari::NpcId_08' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCImportanceScenari, NpcId_09) == 0x000048, "Member 'FJackDataTableNPCImportanceScenari::NpcId_09' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCImportanceScenari, NPCID_10) == 0x000050, "Member 'FJackDataTableNPCImportanceScenari::NPCID_10' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCImportanceScenari, NPCID_11) == 0x000058, "Member 'FJackDataTableNPCImportanceScenari::NPCID_11' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCImportanceScenari, NPCID_12) == 0x000060, "Member 'FJackDataTableNPCImportanceScenari::NPCID_12' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCImportanceScenari, NPCID_13) == 0x000068, "Member 'FJackDataTableNPCImportanceScenari::NPCID_13' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCImportanceScenari, NPCID_14) == 0x000070, "Member 'FJackDataTableNPCImportanceScenari::NPCID_14' has a wrong offset!");
static_assert(offsetof(FJackDataTableNPCImportanceScenari, NPCID_15) == 0x000078, "Member 'FJackDataTableNPCImportanceScenari::NPCID_15' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableWeather
// 0x0138 (0x0140 - 0x0008)
struct FJackDataTableWeather final : public FTableRowBase
{
public:
	float                                         Probability0;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather0_Morning;                                  // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel0_Morning;                                // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle0_Morning;                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute0_Morning;                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather0_Daytime;                                  // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel0_Daytime;                                // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle0_Daytime;                                // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute0_Daytime;                    // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather0_Evening;                                  // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel0_Evening;                                // 0x0025(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle0_Evening;                                // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute0_Evening;                    // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather0_Night;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel0_Night;                                  // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle0_Night;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute0_Night;                      // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Probability1;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather1_Morning;                                  // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel1_Morning;                                // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle1_Morning;                                // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute1_Morning;                    // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather1_Daytime;                                  // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel1_Daytime;                                // 0x004D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle1_Daytime;                                // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute1_Daytime;                    // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather1_Evening;                                  // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel1_Evening;                                // 0x0059(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle1_Evening;                                // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute1_Evening;                    // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather1_Night;                                    // 0x0064(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel1_Night;                                  // 0x0065(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle1_Night;                                  // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute1_Night;                      // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Probability2;                                      // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather2_Morning;                                  // 0x0074(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel2_Morning;                                // 0x0075(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle2_Morning;                                // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute2_Morning;                    // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather2_Daytime;                                  // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel2_Daytime;                                // 0x0081(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle2_Daytime;                                // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute2_Daytime;                    // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather2_Evening;                                  // 0x008C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel2_Evening;                                // 0x008D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle2_Evening;                                // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute2_Evening;                    // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather2_Night;                                    // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel2_Night;                                  // 0x0099(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle2_Night;                                  // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute2_Night;                      // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Probability3;                                      // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather3_Morning;                                  // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel3_Morning;                                // 0x00A9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle3_Morning;                                // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute3_Morning;                    // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather3_Daytime;                                  // 0x00B4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel3_Daytime;                                // 0x00B5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle3_Daytime;                                // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute3_Daytime;                    // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather3_Evening;                                  // 0x00C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel3_Evening;                                // 0x00C1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x2];                                       // 0x00C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle3_Evening;                                // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute3_Evening;                    // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather3_Night;                                    // 0x00CC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel3_Night;                                  // 0x00CD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CE[0x2];                                       // 0x00CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle3_Night;                                  // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute3_Night;                      // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Probability4;                                      // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather4_Morning;                                  // 0x00DC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel4_Morning;                                // 0x00DD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE[0x2];                                       // 0x00DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle4_Morning;                                // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute4_Morning;                    // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather4_Daytime;                                  // 0x00E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel4_Daytime;                                // 0x00E9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x2];                                       // 0x00EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle4_Daytime;                                // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute4_Daytime;                    // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather4_Evening;                                  // 0x00F4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel4_Evening;                                // 0x00F5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F6[0x2];                                       // 0x00F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle4_Evening;                                // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute4_Evening;                    // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather4_Night;                                    // 0x0100(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel4_Night;                                  // 0x0101(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102[0x2];                                      // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle4_Night;                                  // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute4_Night;                      // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Probability5;                                      // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather5_Morning;                                  // 0x0110(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel5_Morning;                                // 0x0111(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_112[0x2];                                      // 0x0112(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle5_Morning;                                // 0x0114(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute5_Morning;                    // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather5_Daytime;                                  // 0x011C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel5_Daytime;                                // 0x011D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E[0x2];                                      // 0x011E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle5_Daytime;                                // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute5_Daytime;                    // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather5_Evening;                                  // 0x0128(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel5_Evening;                                // 0x0129(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x2];                                      // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle5_Evening;                                // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute5_Evening;                    // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             Weather5_Night;                                    // 0x0134(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           WindLevel5_Night;                                  // 0x0135(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_136[0x2];                                      // 0x0136(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WindAngle5_Night;                                  // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindAngleChangeMinute5_Night;                      // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableWeather) == 0x000008, "Wrong alignment on FJackDataTableWeather");
static_assert(sizeof(FJackDataTableWeather) == 0x000140, "Wrong size on FJackDataTableWeather");
static_assert(offsetof(FJackDataTableWeather, Probability0) == 0x000008, "Member 'FJackDataTableWeather::Probability0' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Weather0_Morning) == 0x00000C, "Member 'FJackDataTableWeather::Weather0_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindLevel0_Morning) == 0x00000D, "Member 'FJackDataTableWeather::WindLevel0_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngle0_Morning) == 0x000010, "Member 'FJackDataTableWeather::WindAngle0_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngleChangeMinute0_Morning) == 0x000014, "Member 'FJackDataTableWeather::WindAngleChangeMinute0_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Weather0_Daytime) == 0x000018, "Member 'FJackDataTableWeather::Weather0_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindLevel0_Daytime) == 0x000019, "Member 'FJackDataTableWeather::WindLevel0_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngle0_Daytime) == 0x00001C, "Member 'FJackDataTableWeather::WindAngle0_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngleChangeMinute0_Daytime) == 0x000020, "Member 'FJackDataTableWeather::WindAngleChangeMinute0_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Weather0_Evening) == 0x000024, "Member 'FJackDataTableWeather::Weather0_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindLevel0_Evening) == 0x000025, "Member 'FJackDataTableWeather::WindLevel0_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngle0_Evening) == 0x000028, "Member 'FJackDataTableWeather::WindAngle0_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngleChangeMinute0_Evening) == 0x00002C, "Member 'FJackDataTableWeather::WindAngleChangeMinute0_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Weather0_Night) == 0x000030, "Member 'FJackDataTableWeather::Weather0_Night' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindLevel0_Night) == 0x000031, "Member 'FJackDataTableWeather::WindLevel0_Night' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngle0_Night) == 0x000034, "Member 'FJackDataTableWeather::WindAngle0_Night' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngleChangeMinute0_Night) == 0x000038, "Member 'FJackDataTableWeather::WindAngleChangeMinute0_Night' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Probability1) == 0x00003C, "Member 'FJackDataTableWeather::Probability1' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Weather1_Morning) == 0x000040, "Member 'FJackDataTableWeather::Weather1_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindLevel1_Morning) == 0x000041, "Member 'FJackDataTableWeather::WindLevel1_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngle1_Morning) == 0x000044, "Member 'FJackDataTableWeather::WindAngle1_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngleChangeMinute1_Morning) == 0x000048, "Member 'FJackDataTableWeather::WindAngleChangeMinute1_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Weather1_Daytime) == 0x00004C, "Member 'FJackDataTableWeather::Weather1_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindLevel1_Daytime) == 0x00004D, "Member 'FJackDataTableWeather::WindLevel1_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngle1_Daytime) == 0x000050, "Member 'FJackDataTableWeather::WindAngle1_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngleChangeMinute1_Daytime) == 0x000054, "Member 'FJackDataTableWeather::WindAngleChangeMinute1_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Weather1_Evening) == 0x000058, "Member 'FJackDataTableWeather::Weather1_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindLevel1_Evening) == 0x000059, "Member 'FJackDataTableWeather::WindLevel1_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngle1_Evening) == 0x00005C, "Member 'FJackDataTableWeather::WindAngle1_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngleChangeMinute1_Evening) == 0x000060, "Member 'FJackDataTableWeather::WindAngleChangeMinute1_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Weather1_Night) == 0x000064, "Member 'FJackDataTableWeather::Weather1_Night' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindLevel1_Night) == 0x000065, "Member 'FJackDataTableWeather::WindLevel1_Night' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngle1_Night) == 0x000068, "Member 'FJackDataTableWeather::WindAngle1_Night' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngleChangeMinute1_Night) == 0x00006C, "Member 'FJackDataTableWeather::WindAngleChangeMinute1_Night' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Probability2) == 0x000070, "Member 'FJackDataTableWeather::Probability2' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Weather2_Morning) == 0x000074, "Member 'FJackDataTableWeather::Weather2_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindLevel2_Morning) == 0x000075, "Member 'FJackDataTableWeather::WindLevel2_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngle2_Morning) == 0x000078, "Member 'FJackDataTableWeather::WindAngle2_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngleChangeMinute2_Morning) == 0x00007C, "Member 'FJackDataTableWeather::WindAngleChangeMinute2_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Weather2_Daytime) == 0x000080, "Member 'FJackDataTableWeather::Weather2_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindLevel2_Daytime) == 0x000081, "Member 'FJackDataTableWeather::WindLevel2_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngle2_Daytime) == 0x000084, "Member 'FJackDataTableWeather::WindAngle2_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngleChangeMinute2_Daytime) == 0x000088, "Member 'FJackDataTableWeather::WindAngleChangeMinute2_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Weather2_Evening) == 0x00008C, "Member 'FJackDataTableWeather::Weather2_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindLevel2_Evening) == 0x00008D, "Member 'FJackDataTableWeather::WindLevel2_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngle2_Evening) == 0x000090, "Member 'FJackDataTableWeather::WindAngle2_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngleChangeMinute2_Evening) == 0x000094, "Member 'FJackDataTableWeather::WindAngleChangeMinute2_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Weather2_Night) == 0x000098, "Member 'FJackDataTableWeather::Weather2_Night' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindLevel2_Night) == 0x000099, "Member 'FJackDataTableWeather::WindLevel2_Night' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngle2_Night) == 0x00009C, "Member 'FJackDataTableWeather::WindAngle2_Night' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngleChangeMinute2_Night) == 0x0000A0, "Member 'FJackDataTableWeather::WindAngleChangeMinute2_Night' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Probability3) == 0x0000A4, "Member 'FJackDataTableWeather::Probability3' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Weather3_Morning) == 0x0000A8, "Member 'FJackDataTableWeather::Weather3_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindLevel3_Morning) == 0x0000A9, "Member 'FJackDataTableWeather::WindLevel3_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngle3_Morning) == 0x0000AC, "Member 'FJackDataTableWeather::WindAngle3_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngleChangeMinute3_Morning) == 0x0000B0, "Member 'FJackDataTableWeather::WindAngleChangeMinute3_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Weather3_Daytime) == 0x0000B4, "Member 'FJackDataTableWeather::Weather3_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindLevel3_Daytime) == 0x0000B5, "Member 'FJackDataTableWeather::WindLevel3_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngle3_Daytime) == 0x0000B8, "Member 'FJackDataTableWeather::WindAngle3_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngleChangeMinute3_Daytime) == 0x0000BC, "Member 'FJackDataTableWeather::WindAngleChangeMinute3_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Weather3_Evening) == 0x0000C0, "Member 'FJackDataTableWeather::Weather3_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindLevel3_Evening) == 0x0000C1, "Member 'FJackDataTableWeather::WindLevel3_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngle3_Evening) == 0x0000C4, "Member 'FJackDataTableWeather::WindAngle3_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngleChangeMinute3_Evening) == 0x0000C8, "Member 'FJackDataTableWeather::WindAngleChangeMinute3_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Weather3_Night) == 0x0000CC, "Member 'FJackDataTableWeather::Weather3_Night' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindLevel3_Night) == 0x0000CD, "Member 'FJackDataTableWeather::WindLevel3_Night' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngle3_Night) == 0x0000D0, "Member 'FJackDataTableWeather::WindAngle3_Night' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngleChangeMinute3_Night) == 0x0000D4, "Member 'FJackDataTableWeather::WindAngleChangeMinute3_Night' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Probability4) == 0x0000D8, "Member 'FJackDataTableWeather::Probability4' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Weather4_Morning) == 0x0000DC, "Member 'FJackDataTableWeather::Weather4_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindLevel4_Morning) == 0x0000DD, "Member 'FJackDataTableWeather::WindLevel4_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngle4_Morning) == 0x0000E0, "Member 'FJackDataTableWeather::WindAngle4_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngleChangeMinute4_Morning) == 0x0000E4, "Member 'FJackDataTableWeather::WindAngleChangeMinute4_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Weather4_Daytime) == 0x0000E8, "Member 'FJackDataTableWeather::Weather4_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindLevel4_Daytime) == 0x0000E9, "Member 'FJackDataTableWeather::WindLevel4_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngle4_Daytime) == 0x0000EC, "Member 'FJackDataTableWeather::WindAngle4_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngleChangeMinute4_Daytime) == 0x0000F0, "Member 'FJackDataTableWeather::WindAngleChangeMinute4_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Weather4_Evening) == 0x0000F4, "Member 'FJackDataTableWeather::Weather4_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindLevel4_Evening) == 0x0000F5, "Member 'FJackDataTableWeather::WindLevel4_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngle4_Evening) == 0x0000F8, "Member 'FJackDataTableWeather::WindAngle4_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngleChangeMinute4_Evening) == 0x0000FC, "Member 'FJackDataTableWeather::WindAngleChangeMinute4_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Weather4_Night) == 0x000100, "Member 'FJackDataTableWeather::Weather4_Night' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindLevel4_Night) == 0x000101, "Member 'FJackDataTableWeather::WindLevel4_Night' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngle4_Night) == 0x000104, "Member 'FJackDataTableWeather::WindAngle4_Night' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngleChangeMinute4_Night) == 0x000108, "Member 'FJackDataTableWeather::WindAngleChangeMinute4_Night' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Probability5) == 0x00010C, "Member 'FJackDataTableWeather::Probability5' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Weather5_Morning) == 0x000110, "Member 'FJackDataTableWeather::Weather5_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindLevel5_Morning) == 0x000111, "Member 'FJackDataTableWeather::WindLevel5_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngle5_Morning) == 0x000114, "Member 'FJackDataTableWeather::WindAngle5_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngleChangeMinute5_Morning) == 0x000118, "Member 'FJackDataTableWeather::WindAngleChangeMinute5_Morning' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Weather5_Daytime) == 0x00011C, "Member 'FJackDataTableWeather::Weather5_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindLevel5_Daytime) == 0x00011D, "Member 'FJackDataTableWeather::WindLevel5_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngle5_Daytime) == 0x000120, "Member 'FJackDataTableWeather::WindAngle5_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngleChangeMinute5_Daytime) == 0x000124, "Member 'FJackDataTableWeather::WindAngleChangeMinute5_Daytime' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Weather5_Evening) == 0x000128, "Member 'FJackDataTableWeather::Weather5_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindLevel5_Evening) == 0x000129, "Member 'FJackDataTableWeather::WindLevel5_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngle5_Evening) == 0x00012C, "Member 'FJackDataTableWeather::WindAngle5_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngleChangeMinute5_Evening) == 0x000130, "Member 'FJackDataTableWeather::WindAngleChangeMinute5_Evening' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, Weather5_Night) == 0x000134, "Member 'FJackDataTableWeather::Weather5_Night' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindLevel5_Night) == 0x000135, "Member 'FJackDataTableWeather::WindLevel5_Night' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngle5_Night) == 0x000138, "Member 'FJackDataTableWeather::WindAngle5_Night' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeather, WindAngleChangeMinute5_Night) == 0x00013C, "Member 'FJackDataTableWeather::WindAngleChangeMinute5_Night' has a wrong offset!");

// ScriptStruct JackGame.JackGameFlagDefinitionTableDic
// 0x0010 (0x0010 - 0x0000)
struct FJackGameFlagDefinitionTableDic final
{
public:
	EJackGameFlagCategory                         Category;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             DefinitionTable;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackGameFlagDefinitionTableDic) == 0x000008, "Wrong alignment on FJackGameFlagDefinitionTableDic");
static_assert(sizeof(FJackGameFlagDefinitionTableDic) == 0x000010, "Wrong size on FJackGameFlagDefinitionTableDic");
static_assert(offsetof(FJackGameFlagDefinitionTableDic, Category) == 0x000000, "Member 'FJackGameFlagDefinitionTableDic::Category' has a wrong offset!");
static_assert(offsetof(FJackGameFlagDefinitionTableDic, DefinitionTable) == 0x000008, "Member 'FJackGameFlagDefinitionTableDic::DefinitionTable' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotHsHandLottery
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMeosiSlotHsHandLottery final : public FTableRowBase
{
public:
	TArray<int32>                                 HsHandProbability;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotHsHandLottery) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotHsHandLottery");
static_assert(sizeof(FJackDataTableMeosiSlotHsHandLottery) == 0x000018, "Wrong size on FJackDataTableMeosiSlotHsHandLottery");
static_assert(offsetof(FJackDataTableMeosiSlotHsHandLottery, HsHandProbability) == 0x000008, "Member 'FJackDataTableMeosiSlotHsHandLottery::HsHandProbability' has a wrong offset!");

// ScriptStruct JackGame.JackMessageSoundTagDict
// 0x0000 (0x0010 - 0x0010)
struct FJackMessageSoundTagDict final : public FJackSoundDict
{
};
static_assert(alignof(FJackMessageSoundTagDict) == 0x000008, "Wrong alignment on FJackMessageSoundTagDict");
static_assert(sizeof(FJackMessageSoundTagDict) == 0x000010, "Wrong size on FJackMessageSoundTagDict");

// ScriptStruct JackGame.JackLDT_SimCollarA
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_SimCollarA final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_SimCollarA) == 0x000008, "Wrong alignment on FJackLDT_SimCollarA");
static_assert(sizeof(FJackLDT_SimCollarA) == 0x000010, "Wrong size on FJackLDT_SimCollarA");

// ScriptStruct JackGame.JackDataTableMeosiSlotSettingValueProbability
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableMeosiSlotSettingValueProbability final : public FTableRowBase
{
public:
	int32                                         SettingValue1;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SettingValue2;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SettingValue3;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SettingValue4;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SettingValue5;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SettingValue6;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SettingValue7;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotSettingValueProbability) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotSettingValueProbability");
static_assert(sizeof(FJackDataTableMeosiSlotSettingValueProbability) == 0x000028, "Wrong size on FJackDataTableMeosiSlotSettingValueProbability");
static_assert(offsetof(FJackDataTableMeosiSlotSettingValueProbability, SettingValue1) == 0x000008, "Member 'FJackDataTableMeosiSlotSettingValueProbability::SettingValue1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotSettingValueProbability, SettingValue2) == 0x00000C, "Member 'FJackDataTableMeosiSlotSettingValueProbability::SettingValue2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotSettingValueProbability, SettingValue3) == 0x000010, "Member 'FJackDataTableMeosiSlotSettingValueProbability::SettingValue3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotSettingValueProbability, SettingValue4) == 0x000014, "Member 'FJackDataTableMeosiSlotSettingValueProbability::SettingValue4' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotSettingValueProbability, SettingValue5) == 0x000018, "Member 'FJackDataTableMeosiSlotSettingValueProbability::SettingValue5' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotSettingValueProbability, SettingValue6) == 0x00001C, "Member 'FJackDataTableMeosiSlotSettingValueProbability::SettingValue6' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotSettingValueProbability, SettingValue7) == 0x000020, "Member 'FJackDataTableMeosiSlotSettingValueProbability::SettingValue7' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableUITokugiPanelScenario
// 0x0038 (0x0040 - 0x0008)
struct FJackDataTableUITokugiPanelScenario final : public FTableRowBase
{
public:
	EJackCharacter                                TargetCharacter;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackTokugiPanelScenario                      TokugiPanelScenario;                               // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                BackgroundTexture;                                 // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PanelPosOffset;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SkillLineEffectPosOffset;                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableUITokugiPanelScenario) == 0x000008, "Wrong alignment on FJackDataTableUITokugiPanelScenario");
static_assert(sizeof(FJackDataTableUITokugiPanelScenario) == 0x000040, "Wrong size on FJackDataTableUITokugiPanelScenario");
static_assert(offsetof(FJackDataTableUITokugiPanelScenario, TargetCharacter) == 0x000008, "Member 'FJackDataTableUITokugiPanelScenario::TargetCharacter' has a wrong offset!");
static_assert(offsetof(FJackDataTableUITokugiPanelScenario, Index) == 0x00000C, "Member 'FJackDataTableUITokugiPanelScenario::Index' has a wrong offset!");
static_assert(offsetof(FJackDataTableUITokugiPanelScenario, TokugiPanelScenario) == 0x000010, "Member 'FJackDataTableUITokugiPanelScenario::TokugiPanelScenario' has a wrong offset!");
static_assert(offsetof(FJackDataTableUITokugiPanelScenario, BackgroundTexture) == 0x000018, "Member 'FJackDataTableUITokugiPanelScenario::BackgroundTexture' has a wrong offset!");
static_assert(offsetof(FJackDataTableUITokugiPanelScenario, PanelPosOffset) == 0x000030, "Member 'FJackDataTableUITokugiPanelScenario::PanelPosOffset' has a wrong offset!");
static_assert(offsetof(FJackDataTableUITokugiPanelScenario, SkillLineEffectPosOffset) == 0x000038, "Member 'FJackDataTableUITokugiPanelScenario::SkillLineEffectPosOffset' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleA_003
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleA_003 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleA_003) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleA_003");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleA_003) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleA_003");

// ScriptStruct JackGame.JackLDT_CoordinateLookAtBoneSettings
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_CoordinateLookAtBoneSettings final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_CoordinateLookAtBoneSettings) == 0x000008, "Wrong alignment on FJackLDT_CoordinateLookAtBoneSettings");
static_assert(sizeof(FJackLDT_CoordinateLookAtBoneSettings) == 0x000010, "Wrong size on FJackLDT_CoordinateLookAtBoneSettings");

// ScriptStruct JackGame.JackDataTableMonsterAppear
// 0x0058 (0x0060 - 0x0008)
struct FJackDataTableMonsterAppear final : public FTableRowBase
{
public:
	float                                         VerticalWidth;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalWidth_Sleep;                               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthAdjustment;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraFOV;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartLength;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartHeight;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartHeight_Sleep;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndHeight;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndHeight_Sleep;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointOfGazeDepth;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartPointOfGazeHeight;                            // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartPointOfGazeHeight_Sleep;                      // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndPointOfGazeHeight;                              // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndPointOfGazeHeight_Sleep;                        // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bException_arrangement;                            // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExceptionLocationX;                                // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExceptionLocationY;                                // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExceptionLocationZ;                                // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExceptionRotateYaw;                                // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExceptionCameraRotateYaw;                          // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMonsterAppear) == 0x000008, "Wrong alignment on FJackDataTableMonsterAppear");
static_assert(sizeof(FJackDataTableMonsterAppear) == 0x000060, "Wrong size on FJackDataTableMonsterAppear");
static_assert(offsetof(FJackDataTableMonsterAppear, VerticalWidth) == 0x000008, "Member 'FJackDataTableMonsterAppear::VerticalWidth' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterAppear, VerticalWidth_Sleep) == 0x00000C, "Member 'FJackDataTableMonsterAppear::VerticalWidth_Sleep' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterAppear, Width) == 0x000010, "Member 'FJackDataTableMonsterAppear::Width' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterAppear, DepthAdjustment) == 0x000014, "Member 'FJackDataTableMonsterAppear::DepthAdjustment' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterAppear, CameraFOV) == 0x000018, "Member 'FJackDataTableMonsterAppear::CameraFOV' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterAppear, StartLength) == 0x00001C, "Member 'FJackDataTableMonsterAppear::StartLength' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterAppear, StartHeight) == 0x000020, "Member 'FJackDataTableMonsterAppear::StartHeight' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterAppear, StartHeight_Sleep) == 0x000024, "Member 'FJackDataTableMonsterAppear::StartHeight_Sleep' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterAppear, EndHeight) == 0x000028, "Member 'FJackDataTableMonsterAppear::EndHeight' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterAppear, EndHeight_Sleep) == 0x00002C, "Member 'FJackDataTableMonsterAppear::EndHeight_Sleep' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterAppear, PointOfGazeDepth) == 0x000030, "Member 'FJackDataTableMonsterAppear::PointOfGazeDepth' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterAppear, StartPointOfGazeHeight) == 0x000034, "Member 'FJackDataTableMonsterAppear::StartPointOfGazeHeight' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterAppear, StartPointOfGazeHeight_Sleep) == 0x000038, "Member 'FJackDataTableMonsterAppear::StartPointOfGazeHeight_Sleep' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterAppear, EndPointOfGazeHeight) == 0x00003C, "Member 'FJackDataTableMonsterAppear::EndPointOfGazeHeight' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterAppear, EndPointOfGazeHeight_Sleep) == 0x000040, "Member 'FJackDataTableMonsterAppear::EndPointOfGazeHeight_Sleep' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterAppear, bException_arrangement) == 0x000044, "Member 'FJackDataTableMonsterAppear::bException_arrangement' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterAppear, ExceptionLocationX) == 0x000048, "Member 'FJackDataTableMonsterAppear::ExceptionLocationX' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterAppear, ExceptionLocationY) == 0x00004C, "Member 'FJackDataTableMonsterAppear::ExceptionLocationY' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterAppear, ExceptionLocationZ) == 0x000050, "Member 'FJackDataTableMonsterAppear::ExceptionLocationZ' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterAppear, ExceptionRotateYaw) == 0x000054, "Member 'FJackDataTableMonsterAppear::ExceptionRotateYaw' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterAppear, ExceptionCameraRotateYaw) == 0x000058, "Member 'FJackDataTableMonsterAppear::ExceptionCameraRotateYaw' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_AverageRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_AverageRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_AverageRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_AverageRot");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_AverageRot) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_AverageRot");

// ScriptStruct JackGame.JackDataTableMeosiSlotMachine
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMeosiSlotMachine final : public FTableRowBase
{
public:
	EJackMeosiSlotMachineGroup                    Group;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotMachine) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotMachine");
static_assert(sizeof(FJackDataTableMeosiSlotMachine) == 0x000010, "Wrong size on FJackDataTableMeosiSlotMachine");
static_assert(offsetof(FJackDataTableMeosiSlotMachine, Group) == 0x000008, "Member 'FJackDataTableMeosiSlotMachine::Group' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_PartyTalkData_S030
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_S030 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_S030) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_S030");
static_assert(sizeof(FJackLDT_PartyTalkData_S030) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_S030");

// ScriptStruct JackGame.JackDataTableMeosiSlotMachineCondition
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableMeosiSlotMachineCondition final : public FTableRowBase
{
public:
	int32                                         Level_1;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level_2;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level_3;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level_4;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level_5;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotMachineCondition) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotMachineCondition");
static_assert(sizeof(FJackDataTableMeosiSlotMachineCondition) == 0x000020, "Wrong size on FJackDataTableMeosiSlotMachineCondition");
static_assert(offsetof(FJackDataTableMeosiSlotMachineCondition, Level_1) == 0x000008, "Member 'FJackDataTableMeosiSlotMachineCondition::Level_1' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMachineCondition, Level_2) == 0x00000C, "Member 'FJackDataTableMeosiSlotMachineCondition::Level_2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMachineCondition, Level_3) == 0x000010, "Member 'FJackDataTableMeosiSlotMachineCondition::Level_3' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMachineCondition, Level_4) == 0x000014, "Member 'FJackDataTableMeosiSlotMachineCondition::Level_4' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMachineCondition, Level_5) == 0x000018, "Member 'FJackDataTableMeosiSlotMachineCondition::Level_5' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1_P008_MOMR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1_P008_MOMR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1_P008_MOMR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1_P008_MOMR");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1_P008_MOMR) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1_P008_MOMR");

// ScriptStruct JackGame.JackDataTableMeosiSlotMachineConditionMessage
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMeosiSlotMachineConditionMessage final : public FTableRowBase
{
public:
	int32                                         Percent;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TextID;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotMachineConditionMessage) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotMachineConditionMessage");
static_assert(sizeof(FJackDataTableMeosiSlotMachineConditionMessage) == 0x000018, "Wrong size on FJackDataTableMeosiSlotMachineConditionMessage");
static_assert(offsetof(FJackDataTableMeosiSlotMachineConditionMessage, Percent) == 0x000008, "Member 'FJackDataTableMeosiSlotMachineConditionMessage::Percent' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotMachineConditionMessage, TextID) == 0x000010, "Member 'FJackDataTableMeosiSlotMachineConditionMessage::TextID' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotMonsterRankSelectProbability
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMeosiSlotMonsterRankSelectProbability final : public FTableRowBase
{
public:
	int32                                         Probability;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotMonsterRankSelectProbability) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotMonsterRankSelectProbability");
static_assert(sizeof(FJackDataTableMeosiSlotMonsterRankSelectProbability) == 0x000010, "Wrong size on FJackDataTableMeosiSlotMonsterRankSelectProbability");
static_assert(offsetof(FJackDataTableMeosiSlotMonsterRankSelectProbability, Probability) == 0x000008, "Member 'FJackDataTableMeosiSlotMonsterRankSelectProbability::Probability' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableGermanCheckLastIsS
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableGermanCheckLastIsS final : public FTableRowBase
{
public:
	class FString                                 LastIsS;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableGermanCheckLastIsS) == 0x000008, "Wrong alignment on FJackDataTableGermanCheckLastIsS");
static_assert(sizeof(FJackDataTableGermanCheckLastIsS) == 0x000018, "Wrong size on FJackDataTableGermanCheckLastIsS");
static_assert(offsetof(FJackDataTableGermanCheckLastIsS, LastIsS) == 0x000008, "Member 'FJackDataTableGermanCheckLastIsS::LastIsS' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_F03
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_F03 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_F03) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_F03");
static_assert(sizeof(FJackLDT_MonsterDeploy_F03) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_F03");

// ScriptStruct JackGame.JackDataTableMeosiSlotPayingOut
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMeosiSlotPayingOut final : public FTableRowBase
{
public:
	int32                                         Rate001;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rate010;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rate100;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotFireLampColor                   LampColor;                                         // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotPayingOut) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotPayingOut");
static_assert(sizeof(FJackDataTableMeosiSlotPayingOut) == 0x000018, "Wrong size on FJackDataTableMeosiSlotPayingOut");
static_assert(offsetof(FJackDataTableMeosiSlotPayingOut, Rate001) == 0x000008, "Member 'FJackDataTableMeosiSlotPayingOut::Rate001' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotPayingOut, Rate010) == 0x00000C, "Member 'FJackDataTableMeosiSlotPayingOut::Rate010' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotPayingOut, Rate100) == 0x000010, "Member 'FJackDataTableMeosiSlotPayingOut::Rate100' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotPayingOut, LampColor) == 0x000014, "Member 'FJackDataTableMeosiSlotPayingOut::LampColor' has a wrong offset!");

// ScriptStruct JackGame.JackResetAnimDynamicsTrackKey
// 0x0004 (0x0004 - 0x0000)
struct FJackResetAnimDynamicsTrackKey final
{
public:
	float                                         TimeVar;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackResetAnimDynamicsTrackKey) == 0x000004, "Wrong alignment on FJackResetAnimDynamicsTrackKey");
static_assert(sizeof(FJackResetAnimDynamicsTrackKey) == 0x000004, "Wrong size on FJackResetAnimDynamicsTrackKey");
static_assert(offsetof(FJackResetAnimDynamicsTrackKey, TimeVar) == 0x000000, "Member 'FJackResetAnimDynamicsTrackKey::TimeVar' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_P008_L2BAC
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_P008_L2BAC final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_P008_L2BAC) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_P008_L2BAC");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_P008_L2BAC) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_P008_L2BAC");

// ScriptStruct JackGame.JackDataTableMeosiSlotProbability
// 0x0048 (0x0050 - 0x0008)
struct FJackDataTableMeosiSlotProbability final : public FTableRowBase
{
public:
	int32                                         Replay;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Plum_Weak;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Plum_Strong;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaterMelon_Weak;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaterMelon_Strong;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Weak;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Strong;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Triple;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Center;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bel;                                               // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chance_Weak;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chance_Strong;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chance_Most_Strong;                                // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChanceSpot_Weak;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChanceSpot_Strong;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reach;                                             // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BigBonus;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialBonus;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotProbability) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotProbability");
static_assert(sizeof(FJackDataTableMeosiSlotProbability) == 0x000050, "Wrong size on FJackDataTableMeosiSlotProbability");
static_assert(offsetof(FJackDataTableMeosiSlotProbability, Replay) == 0x000008, "Member 'FJackDataTableMeosiSlotProbability::Replay' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotProbability, Plum_Weak) == 0x00000C, "Member 'FJackDataTableMeosiSlotProbability::Plum_Weak' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotProbability, Plum_Strong) == 0x000010, "Member 'FJackDataTableMeosiSlotProbability::Plum_Strong' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotProbability, WaterMelon_Weak) == 0x000014, "Member 'FJackDataTableMeosiSlotProbability::WaterMelon_Weak' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotProbability, WaterMelon_Strong) == 0x000018, "Member 'FJackDataTableMeosiSlotProbability::WaterMelon_Strong' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotProbability, Cherry_Weak) == 0x00001C, "Member 'FJackDataTableMeosiSlotProbability::Cherry_Weak' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotProbability, Cherry_Strong) == 0x000020, "Member 'FJackDataTableMeosiSlotProbability::Cherry_Strong' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotProbability, Cherry_Triple) == 0x000024, "Member 'FJackDataTableMeosiSlotProbability::Cherry_Triple' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotProbability, Cherry_Center) == 0x000028, "Member 'FJackDataTableMeosiSlotProbability::Cherry_Center' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotProbability, Bel) == 0x00002C, "Member 'FJackDataTableMeosiSlotProbability::Bel' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotProbability, Chance_Weak) == 0x000030, "Member 'FJackDataTableMeosiSlotProbability::Chance_Weak' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotProbability, Chance_Strong) == 0x000034, "Member 'FJackDataTableMeosiSlotProbability::Chance_Strong' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotProbability, Chance_Most_Strong) == 0x000038, "Member 'FJackDataTableMeosiSlotProbability::Chance_Most_Strong' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotProbability, ChanceSpot_Weak) == 0x00003C, "Member 'FJackDataTableMeosiSlotProbability::ChanceSpot_Weak' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotProbability, ChanceSpot_Strong) == 0x000040, "Member 'FJackDataTableMeosiSlotProbability::ChanceSpot_Strong' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotProbability, Reach) == 0x000044, "Member 'FJackDataTableMeosiSlotProbability::Reach' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotProbability, BigBonus) == 0x000048, "Member 'FJackDataTableMeosiSlotProbability::BigBonus' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotProbability, SpecialBonus) == 0x00004C, "Member 'FJackDataTableMeosiSlotProbability::SpecialBonus' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotReelLamp
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMeosiSlotReelLamp final : public FTableRowBase
{
public:
	bool                                          LT;                                                // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CT;                                                // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RT;                                                // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LM;                                                // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CM;                                                // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RM;                                                // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LB;                                                // 0x000E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CB;                                                // 0x000F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RB;                                                // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotReelLamp) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotReelLamp");
static_assert(sizeof(FJackDataTableMeosiSlotReelLamp) == 0x000018, "Wrong size on FJackDataTableMeosiSlotReelLamp");
static_assert(offsetof(FJackDataTableMeosiSlotReelLamp, LT) == 0x000008, "Member 'FJackDataTableMeosiSlotReelLamp::LT' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotReelLamp, CT) == 0x000009, "Member 'FJackDataTableMeosiSlotReelLamp::CT' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotReelLamp, RT) == 0x00000A, "Member 'FJackDataTableMeosiSlotReelLamp::RT' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotReelLamp, LM) == 0x00000B, "Member 'FJackDataTableMeosiSlotReelLamp::LM' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotReelLamp, CM) == 0x00000C, "Member 'FJackDataTableMeosiSlotReelLamp::CM' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotReelLamp, RM) == 0x00000D, "Member 'FJackDataTableMeosiSlotReelLamp::RM' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotReelLamp, LB) == 0x00000E, "Member 'FJackDataTableMeosiSlotReelLamp::LB' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotReelLamp, CB) == 0x00000F, "Member 'FJackDataTableMeosiSlotReelLamp::CB' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotReelLamp, RB) == 0x000010, "Member 'FJackDataTableMeosiSlotReelLamp::RB' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotReelLamp, Time) == 0x000014, "Member 'FJackDataTableMeosiSlotReelLamp::Time' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotReelTexture
// 0x0030 (0x0038 - 0x0008)
struct FJackDataTableMeosiSlotReelTexture final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture>                BaseTexture;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                MaskTexture;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotReelTexture) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotReelTexture");
static_assert(sizeof(FJackDataTableMeosiSlotReelTexture) == 0x000038, "Wrong size on FJackDataTableMeosiSlotReelTexture");
static_assert(offsetof(FJackDataTableMeosiSlotReelTexture, BaseTexture) == 0x000008, "Member 'FJackDataTableMeosiSlotReelTexture::BaseTexture' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotReelTexture, MaskTexture) == 0x000020, "Member 'FJackDataTableMeosiSlotReelTexture::MaskTexture' has a wrong offset!");

// ScriptStruct JackGame.JackOddEffect_OnTurnStartResult
// 0x0028 (0x0028 - 0x0000)
struct FJackOddEffect_OnTurnStartResult final
{
public:
	TArray<class FName>                           ClearOddEffectIDArray;                             // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FJackActionModule>              ActionModules;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	bool                                          bSkipTurn;                                         // 0x0020(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackOddEffect_OnTurnStartResult) == 0x000008, "Wrong alignment on FJackOddEffect_OnTurnStartResult");
static_assert(sizeof(FJackOddEffect_OnTurnStartResult) == 0x000028, "Wrong size on FJackOddEffect_OnTurnStartResult");
static_assert(offsetof(FJackOddEffect_OnTurnStartResult, ClearOddEffectIDArray) == 0x000000, "Member 'FJackOddEffect_OnTurnStartResult::ClearOddEffectIDArray' has a wrong offset!");
static_assert(offsetof(FJackOddEffect_OnTurnStartResult, ActionModules) == 0x000010, "Member 'FJackOddEffect_OnTurnStartResult::ActionModules' has a wrong offset!");
static_assert(offsetof(FJackOddEffect_OnTurnStartResult, bSkipTurn) == 0x000020, "Member 'FJackOddEffect_OnTurnStartResult::bSkipTurn' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotSE
// 0x0048 (0x0050 - 0x0008)
struct FJackDataTableMeosiSlotSE final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USoundBase>              SeJapan;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SeAsia;                                            // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SeOthers;                                          // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotSE) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotSE");
static_assert(sizeof(FJackDataTableMeosiSlotSE) == 0x000050, "Wrong size on FJackDataTableMeosiSlotSE");
static_assert(offsetof(FJackDataTableMeosiSlotSE, SeJapan) == 0x000008, "Member 'FJackDataTableMeosiSlotSE::SeJapan' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotSE, SeAsia) == 0x000020, "Member 'FJackDataTableMeosiSlotSE::SeAsia' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotSE, SeOthers) == 0x000038, "Member 'FJackDataTableMeosiSlotSE::SeOthers' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_GermanCaseChangeTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_GermanCaseChangeTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_GermanCaseChangeTable) == 0x000008, "Wrong alignment on FJackLDT_GermanCaseChangeTable");
static_assert(sizeof(FJackLDT_GermanCaseChangeTable) == 0x000010, "Wrong size on FJackLDT_GermanCaseChangeTable");

// ScriptStruct JackGame.JackDataTableMeosiSlotSpecialBonusRisingProbability
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMeosiSlotSpecialBonusRisingProbability final : public FTableRowBase
{
public:
	int32                                         Bonus;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExactlyPress;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotSpecialBonusRisingProbability) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotSpecialBonusRisingProbability");
static_assert(sizeof(FJackDataTableMeosiSlotSpecialBonusRisingProbability) == 0x000010, "Wrong size on FJackDataTableMeosiSlotSpecialBonusRisingProbability");
static_assert(offsetof(FJackDataTableMeosiSlotSpecialBonusRisingProbability, Bonus) == 0x000008, "Member 'FJackDataTableMeosiSlotSpecialBonusRisingProbability::Bonus' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotSpecialBonusRisingProbability, ExactlyPress) == 0x00000C, "Member 'FJackDataTableMeosiSlotSpecialBonusRisingProbability::ExactlyPress' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotTransitionProbability_Hand
// 0x00E8 (0x00F0 - 0x0008)
struct FJackDataTableMeosiSlotTransitionProbability_Hand final : public FTableRowBase
{
public:
	int32                                         Miss_Default;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Miss_High;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Miss_Heaven;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Replay_Default;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Replay_High;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Replay_Heaven;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Plum_Weak_Default;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Plum_Weak_High;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Plum_Weak_Heaven;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Plum_Strong_Default;                               // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Plum_Strong_High;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Plum_Strong_Heaven;                                // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaterMelon_Weak_Default;                           // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaterMelon_Weak_High;                              // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaterMelon_Weak_Heaven;                            // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaterMelon_Strong_Default;                         // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaterMelon_Strong_High;                            // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaterMelon_Strong_Heaven;                          // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Weak_Default;                               // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Weak_High;                                  // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Weak_Heaven;                                // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Strong_Default;                             // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Strong_High;                                // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Strong_Heaven;                              // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Triple_Default;                             // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Triple_High;                                // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Triple_Heaven;                              // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Center_Default;                             // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Center_High;                                // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cherry_Center_Heaven;                              // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bel_Default;                                       // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bel_High;                                          // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bel_Heaven;                                        // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chance_Weak_Default;                               // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chance_Weak_High;                                  // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chance_Weak_Heaven;                                // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chance_Strong_Default;                             // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chance_Strong_High;                                // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chance_Strong_Heaven;                              // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chance_Most_Strong_Default;                        // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chance_Most_Strong_High;                           // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chance_Most_Strong_Heaven;                         // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChanceSpot_Weak_Default;                           // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChanceSpot_Weak_High;                              // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChanceSpot_Weak_Heaven;                            // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChanceSpot_Strong_Default;                         // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChanceSpot_Strong_High;                            // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChanceSpot_Strong_Heaven;                          // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reach_Default;                                     // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reach_High;                                        // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reach_Heaven;                                      // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BigBonus_Default;                                  // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BigBonus_High;                                     // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BigBonus_Heaven;                                   // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialBonus_Default;                              // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialBonus_High;                                 // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialBonus_Heaven;                               // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotTransitionProbability_Hand) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotTransitionProbability_Hand");
static_assert(sizeof(FJackDataTableMeosiSlotTransitionProbability_Hand) == 0x0000F0, "Wrong size on FJackDataTableMeosiSlotTransitionProbability_Hand");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Miss_Default) == 0x000008, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Miss_Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Miss_High) == 0x00000C, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Miss_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Miss_Heaven) == 0x000010, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Miss_Heaven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Replay_Default) == 0x000014, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Replay_Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Replay_High) == 0x000018, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Replay_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Replay_Heaven) == 0x00001C, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Replay_Heaven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Plum_Weak_Default) == 0x000020, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Plum_Weak_Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Plum_Weak_High) == 0x000024, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Plum_Weak_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Plum_Weak_Heaven) == 0x000028, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Plum_Weak_Heaven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Plum_Strong_Default) == 0x00002C, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Plum_Strong_Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Plum_Strong_High) == 0x000030, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Plum_Strong_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Plum_Strong_Heaven) == 0x000034, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Plum_Strong_Heaven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, WaterMelon_Weak_Default) == 0x000038, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::WaterMelon_Weak_Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, WaterMelon_Weak_High) == 0x00003C, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::WaterMelon_Weak_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, WaterMelon_Weak_Heaven) == 0x000040, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::WaterMelon_Weak_Heaven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, WaterMelon_Strong_Default) == 0x000044, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::WaterMelon_Strong_Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, WaterMelon_Strong_High) == 0x000048, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::WaterMelon_Strong_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, WaterMelon_Strong_Heaven) == 0x00004C, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::WaterMelon_Strong_Heaven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Cherry_Weak_Default) == 0x000050, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Cherry_Weak_Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Cherry_Weak_High) == 0x000054, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Cherry_Weak_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Cherry_Weak_Heaven) == 0x000058, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Cherry_Weak_Heaven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Cherry_Strong_Default) == 0x00005C, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Cherry_Strong_Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Cherry_Strong_High) == 0x000060, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Cherry_Strong_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Cherry_Strong_Heaven) == 0x000064, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Cherry_Strong_Heaven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Cherry_Triple_Default) == 0x000068, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Cherry_Triple_Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Cherry_Triple_High) == 0x00006C, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Cherry_Triple_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Cherry_Triple_Heaven) == 0x000070, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Cherry_Triple_Heaven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Cherry_Center_Default) == 0x000074, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Cherry_Center_Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Cherry_Center_High) == 0x000078, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Cherry_Center_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Cherry_Center_Heaven) == 0x00007C, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Cherry_Center_Heaven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Bel_Default) == 0x000080, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Bel_Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Bel_High) == 0x000084, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Bel_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Bel_Heaven) == 0x000088, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Bel_Heaven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Chance_Weak_Default) == 0x00008C, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Chance_Weak_Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Chance_Weak_High) == 0x000090, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Chance_Weak_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Chance_Weak_Heaven) == 0x000094, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Chance_Weak_Heaven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Chance_Strong_Default) == 0x000098, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Chance_Strong_Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Chance_Strong_High) == 0x00009C, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Chance_Strong_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Chance_Strong_Heaven) == 0x0000A0, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Chance_Strong_Heaven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Chance_Most_Strong_Default) == 0x0000A4, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Chance_Most_Strong_Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Chance_Most_Strong_High) == 0x0000A8, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Chance_Most_Strong_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Chance_Most_Strong_Heaven) == 0x0000AC, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Chance_Most_Strong_Heaven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, ChanceSpot_Weak_Default) == 0x0000B0, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::ChanceSpot_Weak_Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, ChanceSpot_Weak_High) == 0x0000B4, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::ChanceSpot_Weak_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, ChanceSpot_Weak_Heaven) == 0x0000B8, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::ChanceSpot_Weak_Heaven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, ChanceSpot_Strong_Default) == 0x0000BC, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::ChanceSpot_Strong_Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, ChanceSpot_Strong_High) == 0x0000C0, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::ChanceSpot_Strong_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, ChanceSpot_Strong_Heaven) == 0x0000C4, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::ChanceSpot_Strong_Heaven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Reach_Default) == 0x0000C8, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Reach_Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Reach_High) == 0x0000CC, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Reach_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, Reach_Heaven) == 0x0000D0, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::Reach_Heaven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, BigBonus_Default) == 0x0000D4, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::BigBonus_Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, BigBonus_High) == 0x0000D8, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::BigBonus_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, BigBonus_Heaven) == 0x0000DC, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::BigBonus_Heaven' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, SpecialBonus_Default) == 0x0000E0, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::SpecialBonus_Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, SpecialBonus_High) == 0x0000E4, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::SpecialBonus_High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_Hand, SpecialBonus_Heaven) == 0x0000E8, "Member 'FJackDataTableMeosiSlotTransitionProbability_Hand::SpecialBonus_Heaven' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_SlideSkirt_low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SlideSkirt_low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SlideSkirt_low) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SlideSkirt_low");
static_assert(sizeof(FJackLDT_RtEx_SlideSkirt_low) == 0x000010, "Wrong size on FJackLDT_RtEx_SlideSkirt_low");

// ScriptStruct JackGame.JackDataTableMeosiSlotTransitionProbability_SettingValue
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMeosiSlotTransitionProbability_SettingValue final : public FTableRowBase
{
public:
	int32                                         Default;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         High;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Heaven;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotTransitionProbability_SettingValue) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotTransitionProbability_SettingValue");
static_assert(sizeof(FJackDataTableMeosiSlotTransitionProbability_SettingValue) == 0x000018, "Wrong size on FJackDataTableMeosiSlotTransitionProbability_SettingValue");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_SettingValue, Default) == 0x000008, "Member 'FJackDataTableMeosiSlotTransitionProbability_SettingValue::Default' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_SettingValue, High) == 0x00000C, "Member 'FJackDataTableMeosiSlotTransitionProbability_SettingValue::High' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTransitionProbability_SettingValue, Heaven) == 0x000010, "Member 'FJackDataTableMeosiSlotTransitionProbability_SettingValue::Heaven' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_N_D04
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_N_D04 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_N_D04) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_N_D04");
static_assert(sizeof(FJackLDT_MonsterDeploy_N_D04) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_N_D04");

// ScriptStruct JackGame.JackDataTableMeosiSlotTreasureBoxSelectProbability
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableMeosiSlotTreasureBoxSelectProbability final : public FTableRowBase
{
public:
	int32                                         Pot;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Wood;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Black;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMeosiSlotTreasureBoxSelectProbability) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotTreasureBoxSelectProbability");
static_assert(sizeof(FJackDataTableMeosiSlotTreasureBoxSelectProbability) == 0x000020, "Wrong size on FJackDataTableMeosiSlotTreasureBoxSelectProbability");
static_assert(offsetof(FJackDataTableMeosiSlotTreasureBoxSelectProbability, Pot) == 0x000008, "Member 'FJackDataTableMeosiSlotTreasureBoxSelectProbability::Pot' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTreasureBoxSelectProbability, Wood) == 0x00000C, "Member 'FJackDataTableMeosiSlotTreasureBoxSelectProbability::Wood' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTreasureBoxSelectProbability, Red) == 0x000010, "Member 'FJackDataTableMeosiSlotTreasureBoxSelectProbability::Red' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTreasureBoxSelectProbability, Black) == 0x000014, "Member 'FJackDataTableMeosiSlotTreasureBoxSelectProbability::Black' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotTreasureBoxSelectProbability, Gold) == 0x000018, "Member 'FJackDataTableMeosiSlotTreasureBoxSelectProbability::Gold' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMeosiSlotVariableCeiling
// 0x0028 (0x0030 - 0x0008)
struct FJackDataTableMeosiSlotVariableCeiling final : public FTableRowBase
{
public:
	int32                                         Val10;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Val20;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Val30;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Val40;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Val50;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Val60;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Val70;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Val80;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Val90;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Val99;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMeosiSlotVariableCeiling) == 0x000008, "Wrong alignment on FJackDataTableMeosiSlotVariableCeiling");
static_assert(sizeof(FJackDataTableMeosiSlotVariableCeiling) == 0x000030, "Wrong size on FJackDataTableMeosiSlotVariableCeiling");
static_assert(offsetof(FJackDataTableMeosiSlotVariableCeiling, Val10) == 0x000008, "Member 'FJackDataTableMeosiSlotVariableCeiling::Val10' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotVariableCeiling, Val20) == 0x00000C, "Member 'FJackDataTableMeosiSlotVariableCeiling::Val20' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotVariableCeiling, Val30) == 0x000010, "Member 'FJackDataTableMeosiSlotVariableCeiling::Val30' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotVariableCeiling, Val40) == 0x000014, "Member 'FJackDataTableMeosiSlotVariableCeiling::Val40' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotVariableCeiling, Val50) == 0x000018, "Member 'FJackDataTableMeosiSlotVariableCeiling::Val50' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotVariableCeiling, Val60) == 0x00001C, "Member 'FJackDataTableMeosiSlotVariableCeiling::Val60' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotVariableCeiling, Val70) == 0x000020, "Member 'FJackDataTableMeosiSlotVariableCeiling::Val70' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotVariableCeiling, Val80) == 0x000024, "Member 'FJackDataTableMeosiSlotVariableCeiling::Val80' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotVariableCeiling, Val90) == 0x000028, "Member 'FJackDataTableMeosiSlotVariableCeiling::Val90' has a wrong offset!");
static_assert(offsetof(FJackDataTableMeosiSlotVariableCeiling, Val99) == 0x00002C, "Member 'FJackDataTableMeosiSlotVariableCeiling::Val99' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMiniGameJackPotTowerSelectRate
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMiniGameJackPotTowerSelectRate final : public FTableRowBase
{
public:
	int32                                         Slot;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Roulette;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMiniGameJackPotTowerSelectRate) == 0x000008, "Wrong alignment on FJackDataTableMiniGameJackPotTowerSelectRate");
static_assert(sizeof(FJackDataTableMiniGameJackPotTowerSelectRate) == 0x000010, "Wrong size on FJackDataTableMiniGameJackPotTowerSelectRate");
static_assert(offsetof(FJackDataTableMiniGameJackPotTowerSelectRate, Slot) == 0x000008, "Member 'FJackDataTableMiniGameJackPotTowerSelectRate::Slot' has a wrong offset!");
static_assert(offsetof(FJackDataTableMiniGameJackPotTowerSelectRate, Roulette) == 0x00000C, "Member 'FJackDataTableMiniGameJackPotTowerSelectRate::Roulette' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleD_003
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleD_003 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleD_003) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleD_003");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleD_003) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleD_003");

// ScriptStruct JackGame.JackLDT_ActionDamage
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ActionDamage final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ActionDamage) == 0x000008, "Wrong alignment on FJackLDT_ActionDamage");
static_assert(sizeof(FJackLDT_ActionDamage) == 0x000010, "Wrong size on FJackLDT_ActionDamage");

// ScriptStruct JackGame.JackDataTableMiniGameJackPotTowerRate
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMiniGameJackPotTowerRate final : public FTableRowBase
{
public:
	int32                                         OneCoin;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TenCoin;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandredCoin;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMiniGameJackPotTowerRate) == 0x000008, "Wrong alignment on FJackDataTableMiniGameJackPotTowerRate");
static_assert(sizeof(FJackDataTableMiniGameJackPotTowerRate) == 0x000018, "Wrong size on FJackDataTableMiniGameJackPotTowerRate");
static_assert(offsetof(FJackDataTableMiniGameJackPotTowerRate, OneCoin) == 0x000008, "Member 'FJackDataTableMiniGameJackPotTowerRate::OneCoin' has a wrong offset!");
static_assert(offsetof(FJackDataTableMiniGameJackPotTowerRate, TenCoin) == 0x00000C, "Member 'FJackDataTableMiniGameJackPotTowerRate::TenCoin' has a wrong offset!");
static_assert(offsetof(FJackDataTableMiniGameJackPotTowerRate, HandredCoin) == 0x000010, "Member 'FJackDataTableMiniGameJackPotTowerRate::HandredCoin' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableUmaRaceResultCamera
// 0x0028 (0x0030 - 0x0008)
struct FJackDataTableUmaRaceResultCamera final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UCameraAnim>             CameraAnim;                                        // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayTime;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOrbitRotation;                                  // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTime;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableUmaRaceResultCamera) == 0x000008, "Wrong alignment on FJackDataTableUmaRaceResultCamera");
static_assert(sizeof(FJackDataTableUmaRaceResultCamera) == 0x000030, "Wrong size on FJackDataTableUmaRaceResultCamera");
static_assert(offsetof(FJackDataTableUmaRaceResultCamera, CameraAnim) == 0x000008, "Member 'FJackDataTableUmaRaceResultCamera::CameraAnim' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceResultCamera, PlayTime) == 0x000020, "Member 'FJackDataTableUmaRaceResultCamera::PlayTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceResultCamera, PlayRate) == 0x000024, "Member 'FJackDataTableUmaRaceResultCamera::PlayRate' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceResultCamera, bIsOrbitRotation) == 0x000028, "Member 'FJackDataTableUmaRaceResultCamera::bIsOrbitRotation' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceResultCamera, StartTime) == 0x00002C, "Member 'FJackDataTableUmaRaceResultCamera::StartTime' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_ActionAI
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ActionAI final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ActionAI) == 0x000008, "Wrong alignment on FJackLDT_ActionAI");
static_assert(sizeof(FJackLDT_ActionAI) == 0x000010, "Wrong size on FJackLDT_ActionAI");

// ScriptStruct JackGame.JackDataTableMiniGameJackPotNPC
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMiniGameJackPotNPC final : public FTableRowBase
{
public:
	float                                         Percent;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMiniGameJackPotNPC) == 0x000008, "Wrong alignment on FJackDataTableMiniGameJackPotNPC");
static_assert(sizeof(FJackDataTableMiniGameJackPotNPC) == 0x000010, "Wrong size on FJackDataTableMiniGameJackPotNPC");
static_assert(offsetof(FJackDataTableMiniGameJackPotNPC, Percent) == 0x000008, "Member 'FJackDataTableMiniGameJackPotNPC::Percent' has a wrong offset!");

// ScriptStruct JackGame.JackAIStateStructs
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FJackAIStateStructs final
{
public:
	class FName                                   CurrentState;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSensingPlayer;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMovementStrong;                                 // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDepopping;                                      // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFreeWanderring;                                   // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSleeping;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAwake;                                            // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageHit;                                        // 0x000E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAngry;                                            // 0x000F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFeelOugonNoTsume;                                 // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinishPatrol;                                     // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEncountEnable;                                    // 0x0012(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInteractingBySword;                               // 0x0013(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreMakikomi;                                   // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepSymbolWhenRoundSweep;                         // 0x0015(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x22];                                      // 0x0016(0x0022)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAIStateStructs) == 0x000008, "Wrong alignment on FJackAIStateStructs");
static_assert(sizeof(FJackAIStateStructs) == 0x000038, "Wrong size on FJackAIStateStructs");
static_assert(offsetof(FJackAIStateStructs, CurrentState) == 0x000000, "Member 'FJackAIStateStructs::CurrentState' has a wrong offset!");
static_assert(offsetof(FJackAIStateStructs, bIsSensingPlayer) == 0x000008, "Member 'FJackAIStateStructs::bIsSensingPlayer' has a wrong offset!");
static_assert(offsetof(FJackAIStateStructs, bIsMovementStrong) == 0x000009, "Member 'FJackAIStateStructs::bIsMovementStrong' has a wrong offset!");
static_assert(offsetof(FJackAIStateStructs, bIsDepopping) == 0x00000A, "Member 'FJackAIStateStructs::bIsDepopping' has a wrong offset!");
static_assert(offsetof(FJackAIStateStructs, bFreeWanderring) == 0x00000B, "Member 'FJackAIStateStructs::bFreeWanderring' has a wrong offset!");
static_assert(offsetof(FJackAIStateStructs, bSleeping) == 0x00000C, "Member 'FJackAIStateStructs::bSleeping' has a wrong offset!");
static_assert(offsetof(FJackAIStateStructs, bAwake) == 0x00000D, "Member 'FJackAIStateStructs::bAwake' has a wrong offset!");
static_assert(offsetof(FJackAIStateStructs, bDamageHit) == 0x00000E, "Member 'FJackAIStateStructs::bDamageHit' has a wrong offset!");
static_assert(offsetof(FJackAIStateStructs, bAngry) == 0x00000F, "Member 'FJackAIStateStructs::bAngry' has a wrong offset!");
static_assert(offsetof(FJackAIStateStructs, bFeelOugonNoTsume) == 0x000010, "Member 'FJackAIStateStructs::bFeelOugonNoTsume' has a wrong offset!");
static_assert(offsetof(FJackAIStateStructs, bFinishPatrol) == 0x000011, "Member 'FJackAIStateStructs::bFinishPatrol' has a wrong offset!");
static_assert(offsetof(FJackAIStateStructs, bEncountEnable) == 0x000012, "Member 'FJackAIStateStructs::bEncountEnable' has a wrong offset!");
static_assert(offsetof(FJackAIStateStructs, bInteractingBySword) == 0x000013, "Member 'FJackAIStateStructs::bInteractingBySword' has a wrong offset!");
static_assert(offsetof(FJackAIStateStructs, bIgnoreMakikomi) == 0x000014, "Member 'FJackAIStateStructs::bIgnoreMakikomi' has a wrong offset!");
static_assert(offsetof(FJackAIStateStructs, bKeepSymbolWhenRoundSweep) == 0x000015, "Member 'FJackAIStateStructs::bKeepSymbolWhenRoundSweep' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableUserDefinedTag
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableUserDefinedTag final : public FTableRowBase
{
public:
	bool                                          bInUse;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableUserDefinedTag) == 0x000008, "Wrong alignment on FJackDataTableUserDefinedTag");
static_assert(sizeof(FJackDataTableUserDefinedTag) == 0x000010, "Wrong size on FJackDataTableUserDefinedTag");
static_assert(offsetof(FJackDataTableUserDefinedTag, bInUse) == 0x000008, "Member 'FJackDataTableUserDefinedTag::bInUse' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_UmaRaceEDT_RankD_H
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceEDT_RankD_H final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceEDT_RankD_H) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceEDT_RankD_H");
static_assert(sizeof(FJackLDT_UmaRaceEDT_RankD_H) == 0x000010, "Wrong size on FJackLDT_UmaRaceEDT_RankD_H");

// ScriptStruct JackGame.JackDataTableMiniGameJackPotRouletteBetFraction
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableMiniGameJackPotRouletteBetFraction final : public FTableRowBase
{
public:
	float                                         BetFraction;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Coin;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMiniGameJackPotRouletteBetFraction) == 0x000008, "Wrong alignment on FJackDataTableMiniGameJackPotRouletteBetFraction");
static_assert(sizeof(FJackDataTableMiniGameJackPotRouletteBetFraction) == 0x000010, "Wrong size on FJackDataTableMiniGameJackPotRouletteBetFraction");
static_assert(offsetof(FJackDataTableMiniGameJackPotRouletteBetFraction, BetFraction) == 0x000008, "Member 'FJackDataTableMiniGameJackPotRouletteBetFraction::BetFraction' has a wrong offset!");
static_assert(offsetof(FJackDataTableMiniGameJackPotRouletteBetFraction, Coin) == 0x00000C, "Member 'FJackDataTableMiniGameJackPotRouletteBetFraction::Coin' has a wrong offset!");

// ScriptStruct JackGame.JackUMGRecipeParam
// 0x0058 (0x0058 - 0x0000)
struct FJackUMGRecipeParam final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ParamNumber;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackItem_ParameterType                       ParamEnumType;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ParamName;                                         // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Param0;                                            // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param0Float;                                       // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPercent0;                                        // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param1;                                            // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param1Float;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPercent1;                                        // 0x003C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param2;                                            // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param2Float;                                       // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPercent2;                                        // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param3;                                            // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param3Float;                                       // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPercent3;                                        // 0x0054(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGRecipeParam) == 0x000008, "Wrong alignment on FJackUMGRecipeParam");
static_assert(sizeof(FJackUMGRecipeParam) == 0x000058, "Wrong size on FJackUMGRecipeParam");
static_assert(offsetof(FJackUMGRecipeParam, Valid) == 0x000000, "Member 'FJackUMGRecipeParam::Valid' has a wrong offset!");
static_assert(offsetof(FJackUMGRecipeParam, ParamNumber) == 0x000004, "Member 'FJackUMGRecipeParam::ParamNumber' has a wrong offset!");
static_assert(offsetof(FJackUMGRecipeParam, ParamEnumType) == 0x000008, "Member 'FJackUMGRecipeParam::ParamEnumType' has a wrong offset!");
static_assert(offsetof(FJackUMGRecipeParam, ParamName) == 0x000010, "Member 'FJackUMGRecipeParam::ParamName' has a wrong offset!");
static_assert(offsetof(FJackUMGRecipeParam, Param0) == 0x000028, "Member 'FJackUMGRecipeParam::Param0' has a wrong offset!");
static_assert(offsetof(FJackUMGRecipeParam, Param0Float) == 0x00002C, "Member 'FJackUMGRecipeParam::Param0Float' has a wrong offset!");
static_assert(offsetof(FJackUMGRecipeParam, IsPercent0) == 0x000030, "Member 'FJackUMGRecipeParam::IsPercent0' has a wrong offset!");
static_assert(offsetof(FJackUMGRecipeParam, Param1) == 0x000034, "Member 'FJackUMGRecipeParam::Param1' has a wrong offset!");
static_assert(offsetof(FJackUMGRecipeParam, Param1Float) == 0x000038, "Member 'FJackUMGRecipeParam::Param1Float' has a wrong offset!");
static_assert(offsetof(FJackUMGRecipeParam, IsPercent1) == 0x00003C, "Member 'FJackUMGRecipeParam::IsPercent1' has a wrong offset!");
static_assert(offsetof(FJackUMGRecipeParam, Param2) == 0x000040, "Member 'FJackUMGRecipeParam::Param2' has a wrong offset!");
static_assert(offsetof(FJackUMGRecipeParam, Param2Float) == 0x000044, "Member 'FJackUMGRecipeParam::Param2Float' has a wrong offset!");
static_assert(offsetof(FJackUMGRecipeParam, IsPercent2) == 0x000048, "Member 'FJackUMGRecipeParam::IsPercent2' has a wrong offset!");
static_assert(offsetof(FJackUMGRecipeParam, Param3) == 0x00004C, "Member 'FJackUMGRecipeParam::Param3' has a wrong offset!");
static_assert(offsetof(FJackUMGRecipeParam, Param3Float) == 0x000050, "Member 'FJackUMGRecipeParam::Param3Float' has a wrong offset!");
static_assert(offsetof(FJackUMGRecipeParam, IsPercent3) == 0x000054, "Member 'FJackUMGRecipeParam::IsPercent3' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMonsterDrop
// 0x0030 (0x0038 - 0x0008)
struct FJackDataTableMonsterDrop final : public FTableRowBase
{
public:
	int32                                         Exp;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SibariExpHosei;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NormalItem;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NormalProbability;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RareItem;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RareProbability;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotSteal;                                         // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayItemSyousai;                               // 0x0035(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMonsterDrop) == 0x000008, "Wrong alignment on FJackDataTableMonsterDrop");
static_assert(sizeof(FJackDataTableMonsterDrop) == 0x000038, "Wrong size on FJackDataTableMonsterDrop");
static_assert(offsetof(FJackDataTableMonsterDrop, Exp) == 0x000008, "Member 'FJackDataTableMonsterDrop::Exp' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDrop, SibariExpHosei) == 0x00000C, "Member 'FJackDataTableMonsterDrop::SibariExpHosei' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDrop, Gold) == 0x000010, "Member 'FJackDataTableMonsterDrop::Gold' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDrop, NormalItem) == 0x000018, "Member 'FJackDataTableMonsterDrop::NormalItem' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDrop, NormalProbability) == 0x000020, "Member 'FJackDataTableMonsterDrop::NormalProbability' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDrop, RareItem) == 0x000028, "Member 'FJackDataTableMonsterDrop::RareItem' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDrop, RareProbability) == 0x000030, "Member 'FJackDataTableMonsterDrop::RareProbability' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDrop, bNotSteal) == 0x000034, "Member 'FJackDataTableMonsterDrop::bNotSteal' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterDrop, bDisplayItemSyousai) == 0x000035, "Member 'FJackDataTableMonsterDrop::bDisplayItemSyousai' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMonster
// 0x0100 (0x0108 - 0x0008)
struct FJackDataTableMonster final : public FTableRowBase
{
public:
	class FName                                   DisplayName;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MonsterPhysicalPropertyID;                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MonsterDropID;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MonsterFieldAIID;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SibariMonsterFieldAIID;                            // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MonsterBattleAIID;                                 // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SibariMonsterBattleAIID;                           // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MonsterAppearID;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MonsterZukanID;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MonsterZukanMemoID;                                // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterRace                              MonsterRace;                                       // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Lv;                                                // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SibariLv;                                          // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SibariLvHosei;                                     // 0x0064(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxHP;                                             // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMP;                                             // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Subayasa;                                          // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Kiyousa;                                           // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Miryoku;                                           // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Kougekiryoku;                                      // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Syubiryoku;                                        // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KougekiMaryoku;                                    // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KaifukuMaryoku;                                    // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Omosa;                                             // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SibariParameterID;                                 // 0x0090(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 AttributeParams;                                   // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   ZoneOddEffectID;                                   // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialZonePointMin;                               // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialZonePointMax;                               // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleInitOddEffectID;                             // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoss;                                             // 0x00C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMetal;                                            // 0x00C1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFly;                                              // 0x00C2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMugenHP;                                          // 0x00C3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMugenMP;                                          // 0x00C4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyMonster;                                      // 0x00C5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCopyTarget;                                 // 0x00C6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C7[0x1];                                       // 0x00C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HpRateMin;                                         // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HpRateMax;                                         // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReincarnationMonsterId;                            // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReincarnationRate;                                 // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   MonsterClass;                                      // 0x00E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 TripleMonsters;                                    // 0x00F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMonster) == 0x000008, "Wrong alignment on FJackDataTableMonster");
static_assert(sizeof(FJackDataTableMonster) == 0x000108, "Wrong size on FJackDataTableMonster");
static_assert(offsetof(FJackDataTableMonster, DisplayName) == 0x000008, "Member 'FJackDataTableMonster::DisplayName' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, MonsterPhysicalPropertyID) == 0x000010, "Member 'FJackDataTableMonster::MonsterPhysicalPropertyID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, MonsterDropID) == 0x000018, "Member 'FJackDataTableMonster::MonsterDropID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, MonsterFieldAIID) == 0x000020, "Member 'FJackDataTableMonster::MonsterFieldAIID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, SibariMonsterFieldAIID) == 0x000028, "Member 'FJackDataTableMonster::SibariMonsterFieldAIID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, MonsterBattleAIID) == 0x000030, "Member 'FJackDataTableMonster::MonsterBattleAIID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, SibariMonsterBattleAIID) == 0x000038, "Member 'FJackDataTableMonster::SibariMonsterBattleAIID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, MonsterAppearID) == 0x000040, "Member 'FJackDataTableMonster::MonsterAppearID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, MonsterZukanID) == 0x000048, "Member 'FJackDataTableMonster::MonsterZukanID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, MonsterZukanMemoID) == 0x000050, "Member 'FJackDataTableMonster::MonsterZukanMemoID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, MonsterRace) == 0x000058, "Member 'FJackDataTableMonster::MonsterRace' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, Lv) == 0x00005C, "Member 'FJackDataTableMonster::Lv' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, SibariLv) == 0x000060, "Member 'FJackDataTableMonster::SibariLv' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, SibariLvHosei) == 0x000064, "Member 'FJackDataTableMonster::SibariLvHosei' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, MaxHP) == 0x000068, "Member 'FJackDataTableMonster::MaxHP' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, MaxMP) == 0x00006C, "Member 'FJackDataTableMonster::MaxMP' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, Subayasa) == 0x000070, "Member 'FJackDataTableMonster::Subayasa' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, Kiyousa) == 0x000074, "Member 'FJackDataTableMonster::Kiyousa' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, Miryoku) == 0x000078, "Member 'FJackDataTableMonster::Miryoku' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, Kougekiryoku) == 0x00007C, "Member 'FJackDataTableMonster::Kougekiryoku' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, Syubiryoku) == 0x000080, "Member 'FJackDataTableMonster::Syubiryoku' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, KougekiMaryoku) == 0x000084, "Member 'FJackDataTableMonster::KougekiMaryoku' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, KaifukuMaryoku) == 0x000088, "Member 'FJackDataTableMonster::KaifukuMaryoku' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, Omosa) == 0x00008C, "Member 'FJackDataTableMonster::Omosa' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, SibariParameterID) == 0x000090, "Member 'FJackDataTableMonster::SibariParameterID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, AttributeParams) == 0x000098, "Member 'FJackDataTableMonster::AttributeParams' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, ZoneOddEffectID) == 0x0000A8, "Member 'FJackDataTableMonster::ZoneOddEffectID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, InitialZonePointMin) == 0x0000B0, "Member 'FJackDataTableMonster::InitialZonePointMin' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, InitialZonePointMax) == 0x0000B4, "Member 'FJackDataTableMonster::InitialZonePointMax' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, BattleInitOddEffectID) == 0x0000B8, "Member 'FJackDataTableMonster::BattleInitOddEffectID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, bBoss) == 0x0000C0, "Member 'FJackDataTableMonster::bBoss' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, bMetal) == 0x0000C1, "Member 'FJackDataTableMonster::bMetal' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, bFly) == 0x0000C2, "Member 'FJackDataTableMonster::bFly' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, bMugenHP) == 0x0000C3, "Member 'FJackDataTableMonster::bMugenHP' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, bMugenMP) == 0x0000C4, "Member 'FJackDataTableMonster::bMugenMP' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, bCopyMonster) == 0x0000C5, "Member 'FJackDataTableMonster::bCopyMonster' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, bIgnoreCopyTarget) == 0x0000C6, "Member 'FJackDataTableMonster::bIgnoreCopyTarget' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, HpRateMin) == 0x0000C8, "Member 'FJackDataTableMonster::HpRateMin' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, HpRateMax) == 0x0000CC, "Member 'FJackDataTableMonster::HpRateMax' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, ReincarnationMonsterId) == 0x0000D0, "Member 'FJackDataTableMonster::ReincarnationMonsterId' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, ReincarnationRate) == 0x0000D8, "Member 'FJackDataTableMonster::ReincarnationRate' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, MonsterClass) == 0x0000E0, "Member 'FJackDataTableMonster::MonsterClass' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonster, TripleMonsters) == 0x0000F8, "Member 'FJackDataTableMonster::TripleMonsters' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotSptPushProb
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotSptPushProb final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotSptPushProb) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotSptPushProb");
static_assert(sizeof(FJackLDT_MeosiSlotSptPushProb) == 0x000010, "Wrong size on FJackLDT_MeosiSlotSptPushProb");

// ScriptStruct JackGame.JackLDT_VoiceDrama_V_040
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_VoiceDrama_V_040 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_VoiceDrama_V_040) == 0x000008, "Wrong alignment on FJackLDT_VoiceDrama_V_040");
static_assert(sizeof(FJackLDT_VoiceDrama_V_040) == 0x000010, "Wrong size on FJackLDT_VoiceDrama_V_040");

// ScriptStruct JackGame.JackDataTableMonsterBattleAI
// 0x00F0 (0x00F8 - 0x0008)
struct FJackDataTableMonsterBattleAI final : public FTableRowBase
{
public:
	EJackBattleIntelligenceType                   IntelligenceType;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionPatternType                  ActionPatternType;                                 // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleMoreActionType                     MoreActionType;                                    // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultActionSlotID;                               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Action_01_ActionID;                                // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Action_01_Motion_Cast;                             // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Action_01_Motion_Shot;                             // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionTargetType                   Action_01_Target_Type;                             // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionSelectType                   Action_01_Select_Type;                             // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Action_01_Groupe_Check;                            // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Action_02_ActionID;                                // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Action_02_Motion_Cast;                             // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Action_02_Motion_Shot;                             // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionTargetType                   Action_02_Target_Type;                             // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionSelectType                   Action_02_Select_Type;                             // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Action_02_Groupe_Check;                            // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Action_03_ActionID;                                // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Action_03_Motion_Cast;                             // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Action_03_Motion_Shot;                             // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionTargetType                   Action_03_Target_Type;                             // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionSelectType                   Action_03_Select_Type;                             // 0x0069(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Action_03_Groupe_Check;                            // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Action_04_ActionID;                                // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Action_04_Motion_Cast;                             // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Action_04_Motion_Shot;                             // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionTargetType                   Action_04_Target_Type;                             // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionSelectType                   Action_04_Select_Type;                             // 0x0089(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Action_04_Groupe_Check;                            // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Action_05_ActionID;                                // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Action_05_Motion_Cast;                             // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Action_05_Motion_Shot;                             // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionTargetType                   Action_05_Target_Type;                             // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionSelectType                   Action_05_Select_Type;                             // 0x00A9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Action_05_Groupe_Check;                            // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Action_06_ActionID;                                // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Action_06_Motion_Cast;                             // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Action_06_Motion_Shot;                             // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionTargetType                   Action_06_Target_Type;                             // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleActionSelectType                   Action_06_Select_Type;                             // 0x00C9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x2];                                       // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Action_06_Groupe_Check;                            // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJackMonsterBattleAIExceptionInfo> ExceptionAction;                                   // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   BattleCommandAIClass;                              // 0x00E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMonsterBattleAI) == 0x000008, "Wrong alignment on FJackDataTableMonsterBattleAI");
static_assert(sizeof(FJackDataTableMonsterBattleAI) == 0x0000F8, "Wrong size on FJackDataTableMonsterBattleAI");
static_assert(offsetof(FJackDataTableMonsterBattleAI, IntelligenceType) == 0x000008, "Member 'FJackDataTableMonsterBattleAI::IntelligenceType' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, ActionPatternType) == 0x000009, "Member 'FJackDataTableMonsterBattleAI::ActionPatternType' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, MoreActionType) == 0x00000A, "Member 'FJackDataTableMonsterBattleAI::MoreActionType' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, DefaultActionSlotID) == 0x00000C, "Member 'FJackDataTableMonsterBattleAI::DefaultActionSlotID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_01_ActionID) == 0x000010, "Member 'FJackDataTableMonsterBattleAI::Action_01_ActionID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_01_Motion_Cast) == 0x000018, "Member 'FJackDataTableMonsterBattleAI::Action_01_Motion_Cast' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_01_Motion_Shot) == 0x000020, "Member 'FJackDataTableMonsterBattleAI::Action_01_Motion_Shot' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_01_Target_Type) == 0x000028, "Member 'FJackDataTableMonsterBattleAI::Action_01_Target_Type' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_01_Select_Type) == 0x000029, "Member 'FJackDataTableMonsterBattleAI::Action_01_Select_Type' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_01_Groupe_Check) == 0x00002C, "Member 'FJackDataTableMonsterBattleAI::Action_01_Groupe_Check' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_02_ActionID) == 0x000030, "Member 'FJackDataTableMonsterBattleAI::Action_02_ActionID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_02_Motion_Cast) == 0x000038, "Member 'FJackDataTableMonsterBattleAI::Action_02_Motion_Cast' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_02_Motion_Shot) == 0x000040, "Member 'FJackDataTableMonsterBattleAI::Action_02_Motion_Shot' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_02_Target_Type) == 0x000048, "Member 'FJackDataTableMonsterBattleAI::Action_02_Target_Type' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_02_Select_Type) == 0x000049, "Member 'FJackDataTableMonsterBattleAI::Action_02_Select_Type' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_02_Groupe_Check) == 0x00004C, "Member 'FJackDataTableMonsterBattleAI::Action_02_Groupe_Check' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_03_ActionID) == 0x000050, "Member 'FJackDataTableMonsterBattleAI::Action_03_ActionID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_03_Motion_Cast) == 0x000058, "Member 'FJackDataTableMonsterBattleAI::Action_03_Motion_Cast' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_03_Motion_Shot) == 0x000060, "Member 'FJackDataTableMonsterBattleAI::Action_03_Motion_Shot' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_03_Target_Type) == 0x000068, "Member 'FJackDataTableMonsterBattleAI::Action_03_Target_Type' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_03_Select_Type) == 0x000069, "Member 'FJackDataTableMonsterBattleAI::Action_03_Select_Type' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_03_Groupe_Check) == 0x00006C, "Member 'FJackDataTableMonsterBattleAI::Action_03_Groupe_Check' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_04_ActionID) == 0x000070, "Member 'FJackDataTableMonsterBattleAI::Action_04_ActionID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_04_Motion_Cast) == 0x000078, "Member 'FJackDataTableMonsterBattleAI::Action_04_Motion_Cast' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_04_Motion_Shot) == 0x000080, "Member 'FJackDataTableMonsterBattleAI::Action_04_Motion_Shot' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_04_Target_Type) == 0x000088, "Member 'FJackDataTableMonsterBattleAI::Action_04_Target_Type' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_04_Select_Type) == 0x000089, "Member 'FJackDataTableMonsterBattleAI::Action_04_Select_Type' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_04_Groupe_Check) == 0x00008C, "Member 'FJackDataTableMonsterBattleAI::Action_04_Groupe_Check' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_05_ActionID) == 0x000090, "Member 'FJackDataTableMonsterBattleAI::Action_05_ActionID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_05_Motion_Cast) == 0x000098, "Member 'FJackDataTableMonsterBattleAI::Action_05_Motion_Cast' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_05_Motion_Shot) == 0x0000A0, "Member 'FJackDataTableMonsterBattleAI::Action_05_Motion_Shot' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_05_Target_Type) == 0x0000A8, "Member 'FJackDataTableMonsterBattleAI::Action_05_Target_Type' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_05_Select_Type) == 0x0000A9, "Member 'FJackDataTableMonsterBattleAI::Action_05_Select_Type' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_05_Groupe_Check) == 0x0000AC, "Member 'FJackDataTableMonsterBattleAI::Action_05_Groupe_Check' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_06_ActionID) == 0x0000B0, "Member 'FJackDataTableMonsterBattleAI::Action_06_ActionID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_06_Motion_Cast) == 0x0000B8, "Member 'FJackDataTableMonsterBattleAI::Action_06_Motion_Cast' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_06_Motion_Shot) == 0x0000C0, "Member 'FJackDataTableMonsterBattleAI::Action_06_Motion_Shot' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_06_Target_Type) == 0x0000C8, "Member 'FJackDataTableMonsterBattleAI::Action_06_Target_Type' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_06_Select_Type) == 0x0000C9, "Member 'FJackDataTableMonsterBattleAI::Action_06_Select_Type' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, Action_06_Groupe_Check) == 0x0000CC, "Member 'FJackDataTableMonsterBattleAI::Action_06_Groupe_Check' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, ExceptionAction) == 0x0000D0, "Member 'FJackDataTableMonsterBattleAI::ExceptionAction' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterBattleAI, BattleCommandAIClass) == 0x0000E0, "Member 'FJackDataTableMonsterBattleAI::BattleCommandAIClass' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotYakumonoFlash
// 0x0001 (0x0001 - 0x0000)
struct FJackMeosiSlotYakumonoFlash final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMeosiSlotYakumonoFlash) == 0x000001, "Wrong alignment on FJackMeosiSlotYakumonoFlash");
static_assert(sizeof(FJackMeosiSlotYakumonoFlash) == 0x000001, "Wrong size on FJackMeosiSlotYakumonoFlash");
static_assert(offsetof(FJackMeosiSlotYakumonoFlash, bIsValid) == 0x000000, "Member 'FJackMeosiSlotYakumonoFlash::bIsValid' has a wrong offset!");

// ScriptStruct JackGame.JackMonsterMetalEncountInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackMonsterMetalEncountInfo final
{
public:
	class FName                                   PartyMonsterId;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyMonsterMin;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyMonsterMax;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMonsterMetalEncountInfo) == 0x000008, "Wrong alignment on FJackMonsterMetalEncountInfo");
static_assert(sizeof(FJackMonsterMetalEncountInfo) == 0x000010, "Wrong size on FJackMonsterMetalEncountInfo");
static_assert(offsetof(FJackMonsterMetalEncountInfo, PartyMonsterId) == 0x000000, "Member 'FJackMonsterMetalEncountInfo::PartyMonsterId' has a wrong offset!");
static_assert(offsetof(FJackMonsterMetalEncountInfo, PartyMonsterMin) == 0x000008, "Member 'FJackMonsterMetalEncountInfo::PartyMonsterMin' has a wrong offset!");
static_assert(offsetof(FJackMonsterMetalEncountInfo, PartyMonsterMax) == 0x00000C, "Member 'FJackMonsterMetalEncountInfo::PartyMonsterMax' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMonsterMetalEncount
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableMonsterMetalEncount final : public FTableRowBase
{
public:
	float                                         EncountRate;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackMonsterMetalEncountInfo>   PartyMonsters;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMonsterMetalEncount) == 0x000008, "Wrong alignment on FJackDataTableMonsterMetalEncount");
static_assert(sizeof(FJackDataTableMonsterMetalEncount) == 0x000020, "Wrong size on FJackDataTableMonsterMetalEncount");
static_assert(offsetof(FJackDataTableMonsterMetalEncount, EncountRate) == 0x000008, "Member 'FJackDataTableMonsterMetalEncount::EncountRate' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterMetalEncount, PartyMonsters) == 0x000010, "Member 'FJackDataTableMonsterMetalEncount::PartyMonsters' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMonsterPhysicalProperty
// 0x0128 (0x0130 - 0x0008)
struct FJackDataTableMonsterPhysicalProperty final : public FTableRowBase
{
public:
	float                                         ScaleX;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleY;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleZ;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacterEffectSize                      CharacterEffectSize;                               // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacterEffectSize                      CharacterEffectSizeByActionCast;                   // 0x0015(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacterEffectSize                      CharacterEffectSizeByActionEffect;                 // 0x0016(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LODBoundsID;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LODLimitInBattle;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FacialPresetID;                                    // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoicePresetID;                                     // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockCamera;                                      // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVariantForm;                                      // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ProductionCost;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BasicSpeed;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterMoveSpeed                         RunSpeed;                                          // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BackBasicSpeed;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterMoveSpeed                         BackRunSpeed;                                      // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AcceptanceRadius;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreTakePosition;                               // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreTurnWhenLookAt;                             // 0x0055(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreDamageDirection;                            // 0x0056(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreActionDirection;                            // 0x0057(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseBackWalk;                                      // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BackWalkAngleThreshold;                            // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackWalkDistanceThreshold;                         // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroupRadius;                                       // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageS_BlendRate;                                 // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageS_BlendRate2;                                // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdleToRunDuration;                                 // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunningTurnRate;                                   // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscapeTurnSpeedMultiplier;                         // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Motion_EncountByNakamaYobi;                        // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysNavWalking;                                 // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NavWalkingDistance;                                // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootIKDisableDistance;                             // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttitudeDisableDistance;                           // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimDynamicsDisableDistance;                       // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlwaysUpdatePoseAndRefreshBoneDistance;            // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeaveMeshWhenDead;                                // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeaveCollisionWhenDead;                           // 0x00A1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AppealStartTimeMin;                                // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppealStartTimeMax;                                // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMonsterBodyAttribute                     BodyAttribute;                                     // 0x00AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BodyMonsterId;                                     // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetLengthOf3dWidget;                            // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreAlphabetOrder;                              // 0x00BC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActionCameraLengthAdjust;                          // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelativePosition;                                 // 0x00C4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMatineeRenkeiMonsterSize                 MatineeRenkeiMonsterSize;                          // 0x00C5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KnockBackSmallRate;                                // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockBackNormalRate;                               // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScoreRectRedSocket;                                // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRectRedW;                                     // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRectRedH;                                     // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRectRedOffsetZ;                               // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ScoreRectBlueSocket;                               // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRectBlueW;                                    // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRectBlueH;                                    // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRectBlueOffsetZ;                              // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ScoreRectGreenSocket;                              // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRectGreenW;                                   // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRectGreenH;                                   // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRectGreenOffsetZ;                             // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ScoreRectYellowSocket;                             // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRectYellowW;                                  // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRectYellowH;                                  // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRectYellowOffsetZ;                            // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMonsterPhysicalProperty) == 0x000008, "Wrong alignment on FJackDataTableMonsterPhysicalProperty");
static_assert(sizeof(FJackDataTableMonsterPhysicalProperty) == 0x000130, "Wrong size on FJackDataTableMonsterPhysicalProperty");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, ScaleX) == 0x000008, "Member 'FJackDataTableMonsterPhysicalProperty::ScaleX' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, ScaleY) == 0x00000C, "Member 'FJackDataTableMonsterPhysicalProperty::ScaleY' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, ScaleZ) == 0x000010, "Member 'FJackDataTableMonsterPhysicalProperty::ScaleZ' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, CharacterEffectSize) == 0x000014, "Member 'FJackDataTableMonsterPhysicalProperty::CharacterEffectSize' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, CharacterEffectSizeByActionCast) == 0x000015, "Member 'FJackDataTableMonsterPhysicalProperty::CharacterEffectSizeByActionCast' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, CharacterEffectSizeByActionEffect) == 0x000016, "Member 'FJackDataTableMonsterPhysicalProperty::CharacterEffectSizeByActionEffect' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, LODBoundsID) == 0x000018, "Member 'FJackDataTableMonsterPhysicalProperty::LODBoundsID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, LODLimitInBattle) == 0x000020, "Member 'FJackDataTableMonsterPhysicalProperty::LODLimitInBattle' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, FacialPresetID) == 0x000028, "Member 'FJackDataTableMonsterPhysicalProperty::FacialPresetID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, VoicePresetID) == 0x000030, "Member 'FJackDataTableMonsterPhysicalProperty::VoicePresetID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, bBlockCamera) == 0x000038, "Member 'FJackDataTableMonsterPhysicalProperty::bBlockCamera' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, bVariantForm) == 0x000039, "Member 'FJackDataTableMonsterPhysicalProperty::bVariantForm' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, ProductionCost) == 0x00003C, "Member 'FJackDataTableMonsterPhysicalProperty::ProductionCost' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, BasicSpeed) == 0x000040, "Member 'FJackDataTableMonsterPhysicalProperty::BasicSpeed' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, RunSpeed) == 0x000044, "Member 'FJackDataTableMonsterPhysicalProperty::RunSpeed' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, BackBasicSpeed) == 0x000048, "Member 'FJackDataTableMonsterPhysicalProperty::BackBasicSpeed' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, BackRunSpeed) == 0x00004C, "Member 'FJackDataTableMonsterPhysicalProperty::BackRunSpeed' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, AcceptanceRadius) == 0x000050, "Member 'FJackDataTableMonsterPhysicalProperty::AcceptanceRadius' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, bIgnoreTakePosition) == 0x000054, "Member 'FJackDataTableMonsterPhysicalProperty::bIgnoreTakePosition' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, bIgnoreTurnWhenLookAt) == 0x000055, "Member 'FJackDataTableMonsterPhysicalProperty::bIgnoreTurnWhenLookAt' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, bIgnoreDamageDirection) == 0x000056, "Member 'FJackDataTableMonsterPhysicalProperty::bIgnoreDamageDirection' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, bIgnoreActionDirection) == 0x000057, "Member 'FJackDataTableMonsterPhysicalProperty::bIgnoreActionDirection' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, bUseBackWalk) == 0x000058, "Member 'FJackDataTableMonsterPhysicalProperty::bUseBackWalk' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, BackWalkAngleThreshold) == 0x00005C, "Member 'FJackDataTableMonsterPhysicalProperty::BackWalkAngleThreshold' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, BackWalkDistanceThreshold) == 0x000060, "Member 'FJackDataTableMonsterPhysicalProperty::BackWalkDistanceThreshold' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, GroupRadius) == 0x000064, "Member 'FJackDataTableMonsterPhysicalProperty::GroupRadius' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, DamageS_BlendRate) == 0x000068, "Member 'FJackDataTableMonsterPhysicalProperty::DamageS_BlendRate' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, DamageS_BlendRate2) == 0x00006C, "Member 'FJackDataTableMonsterPhysicalProperty::DamageS_BlendRate2' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, IdleToRunDuration) == 0x000070, "Member 'FJackDataTableMonsterPhysicalProperty::IdleToRunDuration' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, RunningTurnRate) == 0x000074, "Member 'FJackDataTableMonsterPhysicalProperty::RunningTurnRate' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, EscapeTurnSpeedMultiplier) == 0x000078, "Member 'FJackDataTableMonsterPhysicalProperty::EscapeTurnSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, Motion_EncountByNakamaYobi) == 0x000080, "Member 'FJackDataTableMonsterPhysicalProperty::Motion_EncountByNakamaYobi' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, bAlwaysNavWalking) == 0x000088, "Member 'FJackDataTableMonsterPhysicalProperty::bAlwaysNavWalking' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, NavWalkingDistance) == 0x00008C, "Member 'FJackDataTableMonsterPhysicalProperty::NavWalkingDistance' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, FootIKDisableDistance) == 0x000090, "Member 'FJackDataTableMonsterPhysicalProperty::FootIKDisableDistance' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, AttitudeDisableDistance) == 0x000094, "Member 'FJackDataTableMonsterPhysicalProperty::AttitudeDisableDistance' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, AnimDynamicsDisableDistance) == 0x000098, "Member 'FJackDataTableMonsterPhysicalProperty::AnimDynamicsDisableDistance' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, AlwaysUpdatePoseAndRefreshBoneDistance) == 0x00009C, "Member 'FJackDataTableMonsterPhysicalProperty::AlwaysUpdatePoseAndRefreshBoneDistance' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, bLeaveMeshWhenDead) == 0x0000A0, "Member 'FJackDataTableMonsterPhysicalProperty::bLeaveMeshWhenDead' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, bLeaveCollisionWhenDead) == 0x0000A1, "Member 'FJackDataTableMonsterPhysicalProperty::bLeaveCollisionWhenDead' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, AppealStartTimeMin) == 0x0000A4, "Member 'FJackDataTableMonsterPhysicalProperty::AppealStartTimeMin' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, AppealStartTimeMax) == 0x0000A8, "Member 'FJackDataTableMonsterPhysicalProperty::AppealStartTimeMax' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, BodyAttribute) == 0x0000AC, "Member 'FJackDataTableMonsterPhysicalProperty::BodyAttribute' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, BodyMonsterId) == 0x0000B0, "Member 'FJackDataTableMonsterPhysicalProperty::BodyMonsterId' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, OffsetLengthOf3dWidget) == 0x0000B8, "Member 'FJackDataTableMonsterPhysicalProperty::OffsetLengthOf3dWidget' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, bIgnoreAlphabetOrder) == 0x0000BC, "Member 'FJackDataTableMonsterPhysicalProperty::bIgnoreAlphabetOrder' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, ActionCameraLengthAdjust) == 0x0000C0, "Member 'FJackDataTableMonsterPhysicalProperty::ActionCameraLengthAdjust' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, bRelativePosition) == 0x0000C4, "Member 'FJackDataTableMonsterPhysicalProperty::bRelativePosition' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, MatineeRenkeiMonsterSize) == 0x0000C5, "Member 'FJackDataTableMonsterPhysicalProperty::MatineeRenkeiMonsterSize' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, KnockBackSmallRate) == 0x0000C8, "Member 'FJackDataTableMonsterPhysicalProperty::KnockBackSmallRate' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, KnockBackNormalRate) == 0x0000CC, "Member 'FJackDataTableMonsterPhysicalProperty::KnockBackNormalRate' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, ScoreRectRedSocket) == 0x0000D0, "Member 'FJackDataTableMonsterPhysicalProperty::ScoreRectRedSocket' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, ScoreRectRedW) == 0x0000D8, "Member 'FJackDataTableMonsterPhysicalProperty::ScoreRectRedW' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, ScoreRectRedH) == 0x0000DC, "Member 'FJackDataTableMonsterPhysicalProperty::ScoreRectRedH' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, ScoreRectRedOffsetZ) == 0x0000E0, "Member 'FJackDataTableMonsterPhysicalProperty::ScoreRectRedOffsetZ' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, ScoreRectBlueSocket) == 0x0000E8, "Member 'FJackDataTableMonsterPhysicalProperty::ScoreRectBlueSocket' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, ScoreRectBlueW) == 0x0000F0, "Member 'FJackDataTableMonsterPhysicalProperty::ScoreRectBlueW' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, ScoreRectBlueH) == 0x0000F4, "Member 'FJackDataTableMonsterPhysicalProperty::ScoreRectBlueH' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, ScoreRectBlueOffsetZ) == 0x0000F8, "Member 'FJackDataTableMonsterPhysicalProperty::ScoreRectBlueOffsetZ' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, ScoreRectGreenSocket) == 0x000100, "Member 'FJackDataTableMonsterPhysicalProperty::ScoreRectGreenSocket' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, ScoreRectGreenW) == 0x000108, "Member 'FJackDataTableMonsterPhysicalProperty::ScoreRectGreenW' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, ScoreRectGreenH) == 0x00010C, "Member 'FJackDataTableMonsterPhysicalProperty::ScoreRectGreenH' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, ScoreRectGreenOffsetZ) == 0x000110, "Member 'FJackDataTableMonsterPhysicalProperty::ScoreRectGreenOffsetZ' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, ScoreRectYellowSocket) == 0x000118, "Member 'FJackDataTableMonsterPhysicalProperty::ScoreRectYellowSocket' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, ScoreRectYellowW) == 0x000120, "Member 'FJackDataTableMonsterPhysicalProperty::ScoreRectYellowW' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, ScoreRectYellowH) == 0x000124, "Member 'FJackDataTableMonsterPhysicalProperty::ScoreRectYellowH' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterPhysicalProperty, ScoreRectYellowOffsetZ) == 0x000128, "Member 'FJackDataTableMonsterPhysicalProperty::ScoreRectYellowOffsetZ' has a wrong offset!");

// ScriptStruct JackGame.JackLipSyncEnableTrackInfo
// 0x0004 (0x0004 - 0x0000)
struct FJackLipSyncEnableTrackInfo final
{
public:
	float                                         LipChangeSec;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackLipSyncEnableTrackInfo) == 0x000004, "Wrong alignment on FJackLipSyncEnableTrackInfo");
static_assert(sizeof(FJackLipSyncEnableTrackInfo) == 0x000004, "Wrong size on FJackLipSyncEnableTrackInfo");
static_assert(offsetof(FJackLipSyncEnableTrackInfo, LipChangeSec) == 0x000000, "Member 'FJackLipSyncEnableTrackInfo::LipChangeSec' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableMonsterSibariParameter
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableMonsterSibariParameter final : public FTableRowBase
{
public:
	TArray<struct FJackMonsterSibariChangeParameterInfo> ChangeParameters;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMonsterSibariParameter) == 0x000008, "Wrong alignment on FJackDataTableMonsterSibariParameter");
static_assert(sizeof(FJackDataTableMonsterSibariParameter) == 0x000018, "Wrong size on FJackDataTableMonsterSibariParameter");
static_assert(offsetof(FJackDataTableMonsterSibariParameter, ChangeParameters) == 0x000008, "Member 'FJackDataTableMonsterSibariParameter::ChangeParameters' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Sim_KtAcce
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_KtAcce final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_KtAcce) == 0x000008, "Wrong alignment on FJackLDT_Sim_KtAcce");
static_assert(sizeof(FJackLDT_Sim_KtAcce) == 0x000010, "Wrong size on FJackLDT_Sim_KtAcce");

// ScriptStruct JackGame.JackLDT_VoiceDrama_Sample
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_VoiceDrama_Sample final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_VoiceDrama_Sample) == 0x000008, "Wrong alignment on FJackLDT_VoiceDrama_Sample");
static_assert(sizeof(FJackLDT_VoiceDrama_Sample) == 0x000010, "Wrong size on FJackLDT_VoiceDrama_Sample");

// ScriptStruct JackGame.JackLDT_MiniGameJackPotTowerAdditional
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MiniGameJackPotTowerAdditional final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MiniGameJackPotTowerAdditional) == 0x000008, "Wrong alignment on FJackLDT_MiniGameJackPotTowerAdditional");
static_assert(sizeof(FJackLDT_MiniGameJackPotTowerAdditional) == 0x000010, "Wrong size on FJackLDT_MiniGameJackPotTowerAdditional");

// ScriptStruct JackGame.JackLDT_UIActionSort
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UIActionSort final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UIActionSort) == 0x000008, "Wrong alignment on FJackLDT_UIActionSort");
static_assert(sizeof(FJackLDT_UIActionSort) == 0x000010, "Wrong size on FJackLDT_UIActionSort");

// ScriptStruct JackGame.JackDataTableOddEffectClearDamagePer
// 0x0030 (0x0038 - 0x0008)
struct FJackDataTableOddEffectClearDamagePer final : public FTableRowBase
{
public:
	TArray<float>                                 ClearDamagePerPC;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<float>                                 ClearDamagePerMonster;                             // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<float>                                 ClearDamagePerBoss;                                // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableOddEffectClearDamagePer) == 0x000008, "Wrong alignment on FJackDataTableOddEffectClearDamagePer");
static_assert(sizeof(FJackDataTableOddEffectClearDamagePer) == 0x000038, "Wrong size on FJackDataTableOddEffectClearDamagePer");
static_assert(offsetof(FJackDataTableOddEffectClearDamagePer, ClearDamagePerPC) == 0x000008, "Member 'FJackDataTableOddEffectClearDamagePer::ClearDamagePerPC' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectClearDamagePer, ClearDamagePerMonster) == 0x000018, "Member 'FJackDataTableOddEffectClearDamagePer::ClearDamagePerMonster' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectClearDamagePer, ClearDamagePerBoss) == 0x000028, "Member 'FJackDataTableOddEffectClearDamagePer::ClearDamagePerBoss' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableOddEffectBattleText
// 0x0000 (0x0018 - 0x0018)
struct FJackDataTableOddEffectBattleText final : public FJackDataTableActionBattleText
{
};
static_assert(alignof(FJackDataTableOddEffectBattleText) == 0x000008, "Wrong alignment on FJackDataTableOddEffectBattleText");
static_assert(sizeof(FJackDataTableOddEffectBattleText) == 0x000018, "Wrong size on FJackDataTableOddEffectBattleText");

// ScriptStruct JackGame.JackLDT_MeosiSlotReelLamp_Anim03
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotReelLamp_Anim03 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotReelLamp_Anim03) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotReelLamp_Anim03");
static_assert(sizeof(FJackLDT_MeosiSlotReelLamp_Anim03) == 0x000010, "Wrong size on FJackLDT_MeosiSlotReelLamp_Anim03");

// ScriptStruct JackGame.JackLDT_Rura
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Rura final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Rura) == 0x000008, "Wrong alignment on FJackLDT_Rura");
static_assert(sizeof(FJackLDT_Rura) == 0x000010, "Wrong size on FJackLDT_Rura");

// ScriptStruct JackGame.JackLDT_Sim_CapeMantle_N002
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_CapeMantle_N002 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_CapeMantle_N002) == 0x000008, "Wrong alignment on FJackLDT_Sim_CapeMantle_N002");
static_assert(sizeof(FJackLDT_Sim_CapeMantle_N002) == 0x000010, "Wrong size on FJackLDT_Sim_CapeMantle_N002");

// ScriptStruct JackGame.JackDataTableOddEffectStatus
// 0x00A0 (0x00A8 - 0x0008)
struct FJackDataTableOddEffectStatus final : public FTableRowBase
{
public:
	class FName                                   OddEffectSlideID;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OddEffectMotionID;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OddEffectFacialID;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OddEffectEffectID;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ClearDamagePerID;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoiceID;                                           // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ClearVoiceID;                                      // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalidMove;                                      // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalidCommand;                                   // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalidMemberChange;                              // 0x0042(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalidCounter;                                   // 0x0043(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalidMikawasi;                                  // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalidTateGuard;                                 // 0x0045(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalidBukiGuard;                                 // 0x0046(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalidKnockBack;                                 // 0x0047(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalidFirstTarget;                               // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalidSecondTarget;                              // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKougekiFriendsFirstTarget;                        // 0x004A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFriendsSecondTarget;                              // 0x004B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClear_BattleEnd;                                  // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClear_RoundEnd;                                   // 0x004D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClear_Standby;                                    // 0x004E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClear_NextFirstAttack;                            // 0x004F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClear_Dead;                                       // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClear_Zone;                                       // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClear_Nemuri;                                     // 0x0052(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClear_Mahi;                                       // 0x0053(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClear_Konran;                                     // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClear_Miryou;                                     // 0x0055(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClear_MouDoku;                                    // 0x0056(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClear_Yasumi;                                     // 0x0057(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClear_Asutoron;                                   // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClear_Fuzai;                                      // 0x0059(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClear_Fuuin_Jumon;                                // 0x005A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClear_Fuuin_Tokugi;                               // 0x005B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalid_Nemuri;                                   // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalid_Mahi;                                     // 0x005D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalid_Konran;                                   // 0x005E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalid_Miryou;                                   // 0x005F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalid_Yasumi;                                   // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalid_Asutoron;                                 // 0x0061(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalid_Kirapon;                                  // 0x0062(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShareFromBody;                                    // 0x0063(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClear_ConditionGood;                              // 0x0064(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClear_ConditionBad;                               // 0x0065(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackOddEffectConditionType                   ConditionType;                                     // 0x0066(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteClearFlag;                                 // 0x0067(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCameraWhenExecute;                             // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                OddEffectIcon;                                     // 0x0070(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OddEffectIconDisplayPriority;                      // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   OddEffectExecClass;                                // 0x0090(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableOddEffectStatus) == 0x000008, "Wrong alignment on FJackDataTableOddEffectStatus");
static_assert(sizeof(FJackDataTableOddEffectStatus) == 0x0000A8, "Wrong size on FJackDataTableOddEffectStatus");
static_assert(offsetof(FJackDataTableOddEffectStatus, OddEffectSlideID) == 0x000008, "Member 'FJackDataTableOddEffectStatus::OddEffectSlideID' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, OddEffectMotionID) == 0x000010, "Member 'FJackDataTableOddEffectStatus::OddEffectMotionID' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, OddEffectFacialID) == 0x000018, "Member 'FJackDataTableOddEffectStatus::OddEffectFacialID' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, OddEffectEffectID) == 0x000020, "Member 'FJackDataTableOddEffectStatus::OddEffectEffectID' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, ClearDamagePerID) == 0x000028, "Member 'FJackDataTableOddEffectStatus::ClearDamagePerID' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, VoiceID) == 0x000030, "Member 'FJackDataTableOddEffectStatus::VoiceID' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, ClearVoiceID) == 0x000038, "Member 'FJackDataTableOddEffectStatus::ClearVoiceID' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bInvalidMove) == 0x000040, "Member 'FJackDataTableOddEffectStatus::bInvalidMove' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bInvalidCommand) == 0x000041, "Member 'FJackDataTableOddEffectStatus::bInvalidCommand' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bInvalidMemberChange) == 0x000042, "Member 'FJackDataTableOddEffectStatus::bInvalidMemberChange' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bInvalidCounter) == 0x000043, "Member 'FJackDataTableOddEffectStatus::bInvalidCounter' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bInvalidMikawasi) == 0x000044, "Member 'FJackDataTableOddEffectStatus::bInvalidMikawasi' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bInvalidTateGuard) == 0x000045, "Member 'FJackDataTableOddEffectStatus::bInvalidTateGuard' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bInvalidBukiGuard) == 0x000046, "Member 'FJackDataTableOddEffectStatus::bInvalidBukiGuard' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bInvalidKnockBack) == 0x000047, "Member 'FJackDataTableOddEffectStatus::bInvalidKnockBack' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bInvalidFirstTarget) == 0x000048, "Member 'FJackDataTableOddEffectStatus::bInvalidFirstTarget' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bInvalidSecondTarget) == 0x000049, "Member 'FJackDataTableOddEffectStatus::bInvalidSecondTarget' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bKougekiFriendsFirstTarget) == 0x00004A, "Member 'FJackDataTableOddEffectStatus::bKougekiFriendsFirstTarget' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bFriendsSecondTarget) == 0x00004B, "Member 'FJackDataTableOddEffectStatus::bFriendsSecondTarget' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bClear_BattleEnd) == 0x00004C, "Member 'FJackDataTableOddEffectStatus::bClear_BattleEnd' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bClear_RoundEnd) == 0x00004D, "Member 'FJackDataTableOddEffectStatus::bClear_RoundEnd' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bClear_Standby) == 0x00004E, "Member 'FJackDataTableOddEffectStatus::bClear_Standby' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bClear_NextFirstAttack) == 0x00004F, "Member 'FJackDataTableOddEffectStatus::bClear_NextFirstAttack' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bClear_Dead) == 0x000050, "Member 'FJackDataTableOddEffectStatus::bClear_Dead' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bClear_Zone) == 0x000051, "Member 'FJackDataTableOddEffectStatus::bClear_Zone' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bClear_Nemuri) == 0x000052, "Member 'FJackDataTableOddEffectStatus::bClear_Nemuri' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bClear_Mahi) == 0x000053, "Member 'FJackDataTableOddEffectStatus::bClear_Mahi' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bClear_Konran) == 0x000054, "Member 'FJackDataTableOddEffectStatus::bClear_Konran' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bClear_Miryou) == 0x000055, "Member 'FJackDataTableOddEffectStatus::bClear_Miryou' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bClear_MouDoku) == 0x000056, "Member 'FJackDataTableOddEffectStatus::bClear_MouDoku' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bClear_Yasumi) == 0x000057, "Member 'FJackDataTableOddEffectStatus::bClear_Yasumi' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bClear_Asutoron) == 0x000058, "Member 'FJackDataTableOddEffectStatus::bClear_Asutoron' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bClear_Fuzai) == 0x000059, "Member 'FJackDataTableOddEffectStatus::bClear_Fuzai' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bClear_Fuuin_Jumon) == 0x00005A, "Member 'FJackDataTableOddEffectStatus::bClear_Fuuin_Jumon' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bClear_Fuuin_Tokugi) == 0x00005B, "Member 'FJackDataTableOddEffectStatus::bClear_Fuuin_Tokugi' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bInvalid_Nemuri) == 0x00005C, "Member 'FJackDataTableOddEffectStatus::bInvalid_Nemuri' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bInvalid_Mahi) == 0x00005D, "Member 'FJackDataTableOddEffectStatus::bInvalid_Mahi' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bInvalid_Konran) == 0x00005E, "Member 'FJackDataTableOddEffectStatus::bInvalid_Konran' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bInvalid_Miryou) == 0x00005F, "Member 'FJackDataTableOddEffectStatus::bInvalid_Miryou' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bInvalid_Yasumi) == 0x000060, "Member 'FJackDataTableOddEffectStatus::bInvalid_Yasumi' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bInvalid_Asutoron) == 0x000061, "Member 'FJackDataTableOddEffectStatus::bInvalid_Asutoron' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bInvalid_Kirapon) == 0x000062, "Member 'FJackDataTableOddEffectStatus::bInvalid_Kirapon' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bShareFromBody) == 0x000063, "Member 'FJackDataTableOddEffectStatus::bShareFromBody' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bClear_ConditionGood) == 0x000064, "Member 'FJackDataTableOddEffectStatus::bClear_ConditionGood' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bClear_ConditionBad) == 0x000065, "Member 'FJackDataTableOddEffectStatus::bClear_ConditionBad' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, ConditionType) == 0x000066, "Member 'FJackDataTableOddEffectStatus::ConditionType' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bExecuteClearFlag) == 0x000067, "Member 'FJackDataTableOddEffectStatus::bExecuteClearFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, bUseCameraWhenExecute) == 0x000068, "Member 'FJackDataTableOddEffectStatus::bUseCameraWhenExecute' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, OddEffectIcon) == 0x000070, "Member 'FJackDataTableOddEffectStatus::OddEffectIcon' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, OddEffectIconDisplayPriority) == 0x000088, "Member 'FJackDataTableOddEffectStatus::OddEffectIconDisplayPriority' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectStatus, OddEffectExecClass) == 0x000090, "Member 'FJackDataTableOddEffectStatus::OddEffectExecClass' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableOddEffectEffect
// 0x0038 (0x0040 - 0x0008)
struct FJackDataTableOddEffectEffect final : public FTableRowBase
{
public:
	bool                                          bResidentResource;                                 // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MaterialUpdaterID;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PcPowerupMaterialID;                               // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GeneralNameParameter;                              // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GeneralValueParameter;                             // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           EffectClasses;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableOddEffectEffect) == 0x000008, "Wrong alignment on FJackDataTableOddEffectEffect");
static_assert(sizeof(FJackDataTableOddEffectEffect) == 0x000040, "Wrong size on FJackDataTableOddEffectEffect");
static_assert(offsetof(FJackDataTableOddEffectEffect, bResidentResource) == 0x000008, "Member 'FJackDataTableOddEffectEffect::bResidentResource' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectEffect, MaterialUpdaterID) == 0x000010, "Member 'FJackDataTableOddEffectEffect::MaterialUpdaterID' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectEffect, PcPowerupMaterialID) == 0x000018, "Member 'FJackDataTableOddEffectEffect::PcPowerupMaterialID' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectEffect, GeneralNameParameter) == 0x000020, "Member 'FJackDataTableOddEffectEffect::GeneralNameParameter' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectEffect, GeneralValueParameter) == 0x000028, "Member 'FJackDataTableOddEffectEffect::GeneralValueParameter' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectEffect, EffectClasses) == 0x000030, "Member 'FJackDataTableOddEffectEffect::EffectClasses' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableOddEffectMotion
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableOddEffectMotion final : public FTableRowBase
{
public:
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Motion;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  Flags;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableOddEffectMotion) == 0x000008, "Wrong alignment on FJackDataTableOddEffectMotion");
static_assert(sizeof(FJackDataTableOddEffectMotion) == 0x000028, "Wrong size on FJackDataTableOddEffectMotion");
static_assert(offsetof(FJackDataTableOddEffectMotion, Priority) == 0x000008, "Member 'FJackDataTableOddEffectMotion::Priority' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectMotion, Motion) == 0x000010, "Member 'FJackDataTableOddEffectMotion::Motion' has a wrong offset!");
static_assert(offsetof(FJackDataTableOddEffectMotion, Flags) == 0x000018, "Member 'FJackDataTableOddEffectMotion::Flags' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableOverrideText
// 0x0008 (0x0038 - 0x0030)
struct FJackDataTableOverrideText final : public FJackDataTableText
{
public:
	bool                                          bOverridesText;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverridesType;                                    // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverridesTalkerID;                                // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverridesNoTurn;                                  // 0x0033(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverridesNoTalkStartEvent;                        // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverridesResetByMapJump;                          // 0x0035(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverridesScenarioGuide;                           // 0x0036(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverridesQuestGuide;                              // 0x0037(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableOverrideText) == 0x000008, "Wrong alignment on FJackDataTableOverrideText");
static_assert(sizeof(FJackDataTableOverrideText) == 0x000038, "Wrong size on FJackDataTableOverrideText");
static_assert(offsetof(FJackDataTableOverrideText, bOverridesText) == 0x000030, "Member 'FJackDataTableOverrideText::bOverridesText' has a wrong offset!");
static_assert(offsetof(FJackDataTableOverrideText, bOverridesType) == 0x000031, "Member 'FJackDataTableOverrideText::bOverridesType' has a wrong offset!");
static_assert(offsetof(FJackDataTableOverrideText, bOverridesTalkerID) == 0x000032, "Member 'FJackDataTableOverrideText::bOverridesTalkerID' has a wrong offset!");
static_assert(offsetof(FJackDataTableOverrideText, bOverridesNoTurn) == 0x000033, "Member 'FJackDataTableOverrideText::bOverridesNoTurn' has a wrong offset!");
static_assert(offsetof(FJackDataTableOverrideText, bOverridesNoTalkStartEvent) == 0x000034, "Member 'FJackDataTableOverrideText::bOverridesNoTalkStartEvent' has a wrong offset!");
static_assert(offsetof(FJackDataTableOverrideText, bOverridesResetByMapJump) == 0x000035, "Member 'FJackDataTableOverrideText::bOverridesResetByMapJump' has a wrong offset!");
static_assert(offsetof(FJackDataTableOverrideText, bOverridesScenarioGuide) == 0x000036, "Member 'FJackDataTableOverrideText::bOverridesScenarioGuide' has a wrong offset!");
static_assert(offsetof(FJackDataTableOverrideText, bOverridesQuestGuide) == 0x000037, "Member 'FJackDataTableOverrideText::bOverridesQuestGuide' has a wrong offset!");

// ScriptStruct JackGame.JackTenseiDisplayCondition2D
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackTenseiDisplayCondition2D final
{
public:
	class FName                                   FlagCategory;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ScenarioID;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FlagId;                                            // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackTenseiDisplayCondition2D) == 0x000008, "Wrong alignment on FJackTenseiDisplayCondition2D");
static_assert(sizeof(FJackTenseiDisplayCondition2D) == 0x000010, "Wrong size on FJackTenseiDisplayCondition2D");
static_assert(offsetof(FJackTenseiDisplayCondition2D, FlagCategory) == 0x000000, "Member 'FJackTenseiDisplayCondition2D::FlagCategory' has a wrong offset!");
static_assert(offsetof(FJackTenseiDisplayCondition2D, ScenarioID) == 0x000008, "Member 'FJackTenseiDisplayCondition2D::ScenarioID' has a wrong offset!");
static_assert(offsetof(FJackTenseiDisplayCondition2D, FlagId) == 0x000009, "Member 'FJackTenseiDisplayCondition2D::FlagId' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableOverrideTranslationText
// 0x0088 (0x0090 - 0x0008)
struct FJackDataTableOverrideTranslationText final : public FTableRowBase
{
public:
	struct FJackArticleInfo                       ArticleInfo;                                       // 0x0008(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableOverrideTranslationText) == 0x000008, "Wrong alignment on FJackDataTableOverrideTranslationText");
static_assert(sizeof(FJackDataTableOverrideTranslationText) == 0x000090, "Wrong size on FJackDataTableOverrideTranslationText");
static_assert(offsetof(FJackDataTableOverrideTranslationText, ArticleInfo) == 0x000008, "Member 'FJackDataTableOverrideTranslationText::ArticleInfo' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableParticleSlotEffect
// 0x0150 (0x0158 - 0x0008)
struct FJackDataTableParticleSlotEffect final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   DefaultDamageEffect;                               // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   DefaultDamageEffect2;                              // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              OverlapDamageSE;                                   // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              OverlapDamageSE2;                                  // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         Slot01;                                            // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         Slot02;                                            // 0x0080(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         Slot03;                                            // 0x0098(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         Slot04;                                            // 0x00B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         Slot05;                                            // 0x00C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         Slot06;                                            // 0x00E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         Slot07;                                            // 0x00F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         Slot08;                                            // 0x0110(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         Slot09;                                            // 0x0128(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         Slot10;                                            // 0x0140(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableParticleSlotEffect) == 0x000008, "Wrong alignment on FJackDataTableParticleSlotEffect");
static_assert(sizeof(FJackDataTableParticleSlotEffect) == 0x000158, "Wrong size on FJackDataTableParticleSlotEffect");
static_assert(offsetof(FJackDataTableParticleSlotEffect, DefaultDamageEffect) == 0x000008, "Member 'FJackDataTableParticleSlotEffect::DefaultDamageEffect' has a wrong offset!");
static_assert(offsetof(FJackDataTableParticleSlotEffect, DefaultDamageEffect2) == 0x000020, "Member 'FJackDataTableParticleSlotEffect::DefaultDamageEffect2' has a wrong offset!");
static_assert(offsetof(FJackDataTableParticleSlotEffect, OverlapDamageSE) == 0x000038, "Member 'FJackDataTableParticleSlotEffect::OverlapDamageSE' has a wrong offset!");
static_assert(offsetof(FJackDataTableParticleSlotEffect, OverlapDamageSE2) == 0x000050, "Member 'FJackDataTableParticleSlotEffect::OverlapDamageSE2' has a wrong offset!");
static_assert(offsetof(FJackDataTableParticleSlotEffect, Slot01) == 0x000068, "Member 'FJackDataTableParticleSlotEffect::Slot01' has a wrong offset!");
static_assert(offsetof(FJackDataTableParticleSlotEffect, Slot02) == 0x000080, "Member 'FJackDataTableParticleSlotEffect::Slot02' has a wrong offset!");
static_assert(offsetof(FJackDataTableParticleSlotEffect, Slot03) == 0x000098, "Member 'FJackDataTableParticleSlotEffect::Slot03' has a wrong offset!");
static_assert(offsetof(FJackDataTableParticleSlotEffect, Slot04) == 0x0000B0, "Member 'FJackDataTableParticleSlotEffect::Slot04' has a wrong offset!");
static_assert(offsetof(FJackDataTableParticleSlotEffect, Slot05) == 0x0000C8, "Member 'FJackDataTableParticleSlotEffect::Slot05' has a wrong offset!");
static_assert(offsetof(FJackDataTableParticleSlotEffect, Slot06) == 0x0000E0, "Member 'FJackDataTableParticleSlotEffect::Slot06' has a wrong offset!");
static_assert(offsetof(FJackDataTableParticleSlotEffect, Slot07) == 0x0000F8, "Member 'FJackDataTableParticleSlotEffect::Slot07' has a wrong offset!");
static_assert(offsetof(FJackDataTableParticleSlotEffect, Slot08) == 0x000110, "Member 'FJackDataTableParticleSlotEffect::Slot08' has a wrong offset!");
static_assert(offsetof(FJackDataTableParticleSlotEffect, Slot09) == 0x000128, "Member 'FJackDataTableParticleSlotEffect::Slot09' has a wrong offset!");
static_assert(offsetof(FJackDataTableParticleSlotEffect, Slot10) == 0x000140, "Member 'FJackDataTableParticleSlotEffect::Slot10' has a wrong offset!");

// ScriptStruct JackGame.JackDataTablePartyTalk
// 0x0248 (0x0250 - 0x0008)
struct FJackDataTablePartyTalk final : public FTableRowBase
{
public:
	EJackScenarioID                               ScenarioID;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MapId;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScenarioFlag;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackGameFlagCategory                         SubFlagCategory;                                   // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SubFlagName;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackScenarioWeather                          Flag_Weather;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackScenarioTimeZone                         Flag_TimeZone;                                     // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Flag_Item;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Flag_TalkCount;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                PriorityCharacter;                                 // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Member1_Serifu;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPartyTalkIdleMotion                      Member1_IdleMotion;                                // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Member1_Serifu_Camp;                               // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Member2_Serifu;                                    // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPartyTalkIdleMotion                      Member2_IdleMotion;                                // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Member2_Serifu_Camp;                               // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Member3_Serifu;                                    // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPartyTalkIdleMotion                      Member3_IdleMotion;                                // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Member3_Serifu_Camp;                               // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Member4_Serifu;                                    // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPartyTalkIdleMotion                      Member4_IdleMotion;                                // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Member4_Serifu_Camp;                               // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Member5_Serifu;                                    // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPartyTalkIdleMotion                      Member5_IdleMotion;                                // 0x00B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Member5_Serifu_Camp;                               // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Member6_Serifu;                                    // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPartyTalkIdleMotion                      Member6_IdleMotion;                                // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Member6_Serifu_Camp;                               // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Member7_Serifu;                                    // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPartyTalkIdleMotion                      Member7_IdleMotion;                                // 0x00E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Member7_Serifu_Camp;                               // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                Guest1_Character;                                  // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Guest1_Serifu;                                     // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPartyTalkIdleMotion                      Guest1_IdleMotion;                                 // 0x0100(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Guest1_Serifu_Camp;                                // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                Guest2_Character;                                  // 0x0110(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Guest2_Serifu;                                     // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPartyTalkIdleMotion                      Guest2_IdleMotion;                                 // 0x0120(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Guest2_Serifu_Camp;                                // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                Guest3_Character;                                  // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Guest3_Serifu;                                     // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPartyTalkIdleMotion                      Guest3_IdleMotion;                                 // 0x0140(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Guest3_Serifu_Camp;                                // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                Guest4_Character;                                  // 0x0150(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Guest4_Serifu;                                     // 0x0158(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPartyTalkIdleMotion                      Guest4_IdleMotion;                                 // 0x0160(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Guest4_Serifu_Camp;                                // 0x0168(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                Guest5_Character;                                  // 0x0170(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Guest5_Serifu;                                     // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPartyTalkIdleMotion                      Guest5_IdleMotion;                                 // 0x0180(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Guest5_Serifu_Camp;                                // 0x0188(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                Guest6_Character;                                  // 0x0190(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Guest6_Serifu;                                     // 0x0198(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPartyTalkIdleMotion                      Guest6_IdleMotion;                                 // 0x01A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Guest6_Serifu_Camp;                                // 0x01A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                Guest7_Character;                                  // 0x01B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Guest7_Serifu;                                     // 0x01B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPartyTalkIdleMotion                      Guest7_IdleMotion;                                 // 0x01C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1[0x7];                                      // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Guest7_Serifu_Camp;                                // 0x01C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                Guest8_Character;                                  // 0x01D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Guest8_Serifu;                                     // 0x01D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPartyTalkIdleMotion                      Guest8_IdleMotion;                                 // 0x01E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1[0x7];                                      // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Guest8_Serifu_Camp;                                // 0x01E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                Guest9_Character;                                  // 0x01F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Guest9_Serifu;                                     // 0x01F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPartyTalkIdleMotion                      Guest9_IdleMotion;                                 // 0x0200(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Guest9_Serifu_Camp;                                // 0x0208(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                Guest10_Character;                                 // 0x0210(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Guest10_Serifu;                                    // 0x0218(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPartyTalkIdleMotion                      Guest10_IdleMotion;                                // 0x0220(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Guest10_Serifu_Camp;                               // 0x0228(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                Guest11_Character;                                 // 0x0230(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Guest11_Serifu;                                    // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPartyTalkIdleMotion                      Guest11_IdleMotion;                                // 0x0240(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Guest11_Serifu_Camp;                               // 0x0248(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTablePartyTalk) == 0x000008, "Wrong alignment on FJackDataTablePartyTalk");
static_assert(sizeof(FJackDataTablePartyTalk) == 0x000250, "Wrong size on FJackDataTablePartyTalk");
static_assert(offsetof(FJackDataTablePartyTalk, ScenarioID) == 0x000008, "Member 'FJackDataTablePartyTalk::ScenarioID' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, MapId) == 0x000010, "Member 'FJackDataTablePartyTalk::MapId' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, ScenarioFlag) == 0x000018, "Member 'FJackDataTablePartyTalk::ScenarioFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, SubFlagCategory) == 0x000020, "Member 'FJackDataTablePartyTalk::SubFlagCategory' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, SubFlagName) == 0x000028, "Member 'FJackDataTablePartyTalk::SubFlagName' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Flag_Weather) == 0x000030, "Member 'FJackDataTablePartyTalk::Flag_Weather' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Flag_TimeZone) == 0x000031, "Member 'FJackDataTablePartyTalk::Flag_TimeZone' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Flag_Item) == 0x000038, "Member 'FJackDataTablePartyTalk::Flag_Item' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Flag_TalkCount) == 0x000040, "Member 'FJackDataTablePartyTalk::Flag_TalkCount' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, PriorityCharacter) == 0x000044, "Member 'FJackDataTablePartyTalk::PriorityCharacter' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Member1_Serifu) == 0x000048, "Member 'FJackDataTablePartyTalk::Member1_Serifu' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Member1_IdleMotion) == 0x000050, "Member 'FJackDataTablePartyTalk::Member1_IdleMotion' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Member1_Serifu_Camp) == 0x000058, "Member 'FJackDataTablePartyTalk::Member1_Serifu_Camp' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Member2_Serifu) == 0x000060, "Member 'FJackDataTablePartyTalk::Member2_Serifu' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Member2_IdleMotion) == 0x000068, "Member 'FJackDataTablePartyTalk::Member2_IdleMotion' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Member2_Serifu_Camp) == 0x000070, "Member 'FJackDataTablePartyTalk::Member2_Serifu_Camp' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Member3_Serifu) == 0x000078, "Member 'FJackDataTablePartyTalk::Member3_Serifu' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Member3_IdleMotion) == 0x000080, "Member 'FJackDataTablePartyTalk::Member3_IdleMotion' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Member3_Serifu_Camp) == 0x000088, "Member 'FJackDataTablePartyTalk::Member3_Serifu_Camp' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Member4_Serifu) == 0x000090, "Member 'FJackDataTablePartyTalk::Member4_Serifu' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Member4_IdleMotion) == 0x000098, "Member 'FJackDataTablePartyTalk::Member4_IdleMotion' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Member4_Serifu_Camp) == 0x0000A0, "Member 'FJackDataTablePartyTalk::Member4_Serifu_Camp' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Member5_Serifu) == 0x0000A8, "Member 'FJackDataTablePartyTalk::Member5_Serifu' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Member5_IdleMotion) == 0x0000B0, "Member 'FJackDataTablePartyTalk::Member5_IdleMotion' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Member5_Serifu_Camp) == 0x0000B8, "Member 'FJackDataTablePartyTalk::Member5_Serifu_Camp' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Member6_Serifu) == 0x0000C0, "Member 'FJackDataTablePartyTalk::Member6_Serifu' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Member6_IdleMotion) == 0x0000C8, "Member 'FJackDataTablePartyTalk::Member6_IdleMotion' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Member6_Serifu_Camp) == 0x0000D0, "Member 'FJackDataTablePartyTalk::Member6_Serifu_Camp' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Member7_Serifu) == 0x0000D8, "Member 'FJackDataTablePartyTalk::Member7_Serifu' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Member7_IdleMotion) == 0x0000E0, "Member 'FJackDataTablePartyTalk::Member7_IdleMotion' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Member7_Serifu_Camp) == 0x0000E8, "Member 'FJackDataTablePartyTalk::Member7_Serifu_Camp' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest1_Character) == 0x0000F0, "Member 'FJackDataTablePartyTalk::Guest1_Character' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest1_Serifu) == 0x0000F8, "Member 'FJackDataTablePartyTalk::Guest1_Serifu' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest1_IdleMotion) == 0x000100, "Member 'FJackDataTablePartyTalk::Guest1_IdleMotion' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest1_Serifu_Camp) == 0x000108, "Member 'FJackDataTablePartyTalk::Guest1_Serifu_Camp' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest2_Character) == 0x000110, "Member 'FJackDataTablePartyTalk::Guest2_Character' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest2_Serifu) == 0x000118, "Member 'FJackDataTablePartyTalk::Guest2_Serifu' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest2_IdleMotion) == 0x000120, "Member 'FJackDataTablePartyTalk::Guest2_IdleMotion' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest2_Serifu_Camp) == 0x000128, "Member 'FJackDataTablePartyTalk::Guest2_Serifu_Camp' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest3_Character) == 0x000130, "Member 'FJackDataTablePartyTalk::Guest3_Character' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest3_Serifu) == 0x000138, "Member 'FJackDataTablePartyTalk::Guest3_Serifu' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest3_IdleMotion) == 0x000140, "Member 'FJackDataTablePartyTalk::Guest3_IdleMotion' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest3_Serifu_Camp) == 0x000148, "Member 'FJackDataTablePartyTalk::Guest3_Serifu_Camp' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest4_Character) == 0x000150, "Member 'FJackDataTablePartyTalk::Guest4_Character' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest4_Serifu) == 0x000158, "Member 'FJackDataTablePartyTalk::Guest4_Serifu' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest4_IdleMotion) == 0x000160, "Member 'FJackDataTablePartyTalk::Guest4_IdleMotion' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest4_Serifu_Camp) == 0x000168, "Member 'FJackDataTablePartyTalk::Guest4_Serifu_Camp' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest5_Character) == 0x000170, "Member 'FJackDataTablePartyTalk::Guest5_Character' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest5_Serifu) == 0x000178, "Member 'FJackDataTablePartyTalk::Guest5_Serifu' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest5_IdleMotion) == 0x000180, "Member 'FJackDataTablePartyTalk::Guest5_IdleMotion' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest5_Serifu_Camp) == 0x000188, "Member 'FJackDataTablePartyTalk::Guest5_Serifu_Camp' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest6_Character) == 0x000190, "Member 'FJackDataTablePartyTalk::Guest6_Character' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest6_Serifu) == 0x000198, "Member 'FJackDataTablePartyTalk::Guest6_Serifu' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest6_IdleMotion) == 0x0001A0, "Member 'FJackDataTablePartyTalk::Guest6_IdleMotion' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest6_Serifu_Camp) == 0x0001A8, "Member 'FJackDataTablePartyTalk::Guest6_Serifu_Camp' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest7_Character) == 0x0001B0, "Member 'FJackDataTablePartyTalk::Guest7_Character' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest7_Serifu) == 0x0001B8, "Member 'FJackDataTablePartyTalk::Guest7_Serifu' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest7_IdleMotion) == 0x0001C0, "Member 'FJackDataTablePartyTalk::Guest7_IdleMotion' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest7_Serifu_Camp) == 0x0001C8, "Member 'FJackDataTablePartyTalk::Guest7_Serifu_Camp' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest8_Character) == 0x0001D0, "Member 'FJackDataTablePartyTalk::Guest8_Character' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest8_Serifu) == 0x0001D8, "Member 'FJackDataTablePartyTalk::Guest8_Serifu' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest8_IdleMotion) == 0x0001E0, "Member 'FJackDataTablePartyTalk::Guest8_IdleMotion' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest8_Serifu_Camp) == 0x0001E8, "Member 'FJackDataTablePartyTalk::Guest8_Serifu_Camp' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest9_Character) == 0x0001F0, "Member 'FJackDataTablePartyTalk::Guest9_Character' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest9_Serifu) == 0x0001F8, "Member 'FJackDataTablePartyTalk::Guest9_Serifu' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest9_IdleMotion) == 0x000200, "Member 'FJackDataTablePartyTalk::Guest9_IdleMotion' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest9_Serifu_Camp) == 0x000208, "Member 'FJackDataTablePartyTalk::Guest9_Serifu_Camp' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest10_Character) == 0x000210, "Member 'FJackDataTablePartyTalk::Guest10_Character' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest10_Serifu) == 0x000218, "Member 'FJackDataTablePartyTalk::Guest10_Serifu' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest10_IdleMotion) == 0x000220, "Member 'FJackDataTablePartyTalk::Guest10_IdleMotion' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest10_Serifu_Camp) == 0x000228, "Member 'FJackDataTablePartyTalk::Guest10_Serifu_Camp' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest11_Character) == 0x000230, "Member 'FJackDataTablePartyTalk::Guest11_Character' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest11_Serifu) == 0x000238, "Member 'FJackDataTablePartyTalk::Guest11_Serifu' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest11_IdleMotion) == 0x000240, "Member 'FJackDataTablePartyTalk::Guest11_IdleMotion' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalk, Guest11_Serifu_Camp) == 0x000248, "Member 'FJackDataTablePartyTalk::Guest11_Serifu_Camp' has a wrong offset!");

// ScriptStruct JackGame.JackDataTablePartyTalkBehaviorState
// 0x0050 (0x0058 - 0x0008)
struct FJackDataTablePartyTalkBehaviorState final : public FTableRowBase
{
public:
	class FName                                   BranchID;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Behavior;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SC_Start;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SC_End;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PreLoadMapID;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFieldDisp;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSubjectOfAttack;                                // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGetExp;                                         // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMenuDisp;                                       // 0x0033(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPartyTalk;                                      // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReturnToBag;                                    // 0x0035(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReturnToBagExceptEquip;                         // 0x0036(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNotGuestDisp;                                   // 0x0037(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleAI_ID;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GambitRate;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackGambit                                   Gambit;                                            // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BaseParameterID;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkSituation;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTablePartyTalkBehaviorState) == 0x000008, "Wrong alignment on FJackDataTablePartyTalkBehaviorState");
static_assert(sizeof(FJackDataTablePartyTalkBehaviorState) == 0x000058, "Wrong size on FJackDataTablePartyTalkBehaviorState");
static_assert(offsetof(FJackDataTablePartyTalkBehaviorState, BranchID) == 0x000008, "Member 'FJackDataTablePartyTalkBehaviorState::BranchID' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkBehaviorState, Behavior) == 0x000010, "Member 'FJackDataTablePartyTalkBehaviorState::Behavior' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkBehaviorState, SC_Start) == 0x000018, "Member 'FJackDataTablePartyTalkBehaviorState::SC_Start' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkBehaviorState, SC_End) == 0x000020, "Member 'FJackDataTablePartyTalkBehaviorState::SC_End' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkBehaviorState, PreLoadMapID) == 0x000028, "Member 'FJackDataTablePartyTalkBehaviorState::PreLoadMapID' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkBehaviorState, bIsFieldDisp) == 0x000030, "Member 'FJackDataTablePartyTalkBehaviorState::bIsFieldDisp' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkBehaviorState, bIsSubjectOfAttack) == 0x000031, "Member 'FJackDataTablePartyTalkBehaviorState::bIsSubjectOfAttack' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkBehaviorState, bIsGetExp) == 0x000032, "Member 'FJackDataTablePartyTalkBehaviorState::bIsGetExp' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkBehaviorState, bIsMenuDisp) == 0x000033, "Member 'FJackDataTablePartyTalkBehaviorState::bIsMenuDisp' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkBehaviorState, bIsPartyTalk) == 0x000034, "Member 'FJackDataTablePartyTalkBehaviorState::bIsPartyTalk' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkBehaviorState, bIsReturnToBag) == 0x000035, "Member 'FJackDataTablePartyTalkBehaviorState::bIsReturnToBag' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkBehaviorState, bIsReturnToBagExceptEquip) == 0x000036, "Member 'FJackDataTablePartyTalkBehaviorState::bIsReturnToBagExceptEquip' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkBehaviorState, bIsNotGuestDisp) == 0x000037, "Member 'FJackDataTablePartyTalkBehaviorState::bIsNotGuestDisp' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkBehaviorState, BattleAI_ID) == 0x000038, "Member 'FJackDataTablePartyTalkBehaviorState::BattleAI_ID' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkBehaviorState, GambitRate) == 0x000040, "Member 'FJackDataTablePartyTalkBehaviorState::GambitRate' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkBehaviorState, Gambit) == 0x000044, "Member 'FJackDataTablePartyTalkBehaviorState::Gambit' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkBehaviorState, BaseParameterID) == 0x000048, "Member 'FJackDataTablePartyTalkBehaviorState::BaseParameterID' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkBehaviorState, TalkSituation) == 0x000050, "Member 'FJackDataTablePartyTalkBehaviorState::TalkSituation' has a wrong offset!");

// ScriptStruct JackGame.JackDataTablePartyTalkCharacter
// 0x0158 (0x0160 - 0x0008)
struct FJackDataTablePartyTalkCharacter final : public FTableRowBase
{
public:
	EJackCharacter                                CharacterType;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                PlayerType;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharaHeight;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CharacterBP;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   BattleCharacterBP;                                 // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   TalkCharacterBP;                                   // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CoffinCharacterBP;                                 // 0x0058(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CoffinPartyTalkCharacterBP;                        // 0x0070(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefaultCoordinate;                                 // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FacialPresetID;                                    // 0x0090(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoicePresetID;                                     // 0x0098(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Handedness;                                        // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Hand;                                              // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Head;                                              // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Body;                                              // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Accessory1;                                        // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Accessory2;                                        // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Item1;                                             // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Item2;                                             // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Item3;                                             // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Item4;                                             // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Item5;                                             // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Item6;                                             // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNoTalk;                                         // 0x0100(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBattle;                                         // 0x0101(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFixedArea;                                      // 0x0102(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSubjectOfAttack;                                // 0x0103(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BaseParameterID;                                   // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleAI_ID;                                       // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GambitRate;                                        // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackGambit                                   Gambit;                                            // 0x011C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PoseIdleMin;                                       // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoseIdleMax;                                       // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PoseNormal01;                                      // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PoseSerious01;                                     // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PoseBlackout01;                                    // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PoseHappy01;                                       // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PoseAngry01;                                       // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PoseThinking01;                                    // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PoseSpecial01;                                     // 0x0158(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTablePartyTalkCharacter) == 0x000008, "Wrong alignment on FJackDataTablePartyTalkCharacter");
static_assert(sizeof(FJackDataTablePartyTalkCharacter) == 0x000160, "Wrong size on FJackDataTablePartyTalkCharacter");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, CharacterType) == 0x000008, "Member 'FJackDataTablePartyTalkCharacter::CharacterType' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, PlayerType) == 0x000009, "Member 'FJackDataTablePartyTalkCharacter::PlayerType' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, CharaHeight) == 0x00000C, "Member 'FJackDataTablePartyTalkCharacter::CharaHeight' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, CharacterBP) == 0x000010, "Member 'FJackDataTablePartyTalkCharacter::CharacterBP' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, BattleCharacterBP) == 0x000028, "Member 'FJackDataTablePartyTalkCharacter::BattleCharacterBP' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, TalkCharacterBP) == 0x000040, "Member 'FJackDataTablePartyTalkCharacter::TalkCharacterBP' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, CoffinCharacterBP) == 0x000058, "Member 'FJackDataTablePartyTalkCharacter::CoffinCharacterBP' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, CoffinPartyTalkCharacterBP) == 0x000070, "Member 'FJackDataTablePartyTalkCharacter::CoffinPartyTalkCharacterBP' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, DefaultCoordinate) == 0x000088, "Member 'FJackDataTablePartyTalkCharacter::DefaultCoordinate' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, FacialPresetID) == 0x000090, "Member 'FJackDataTablePartyTalkCharacter::FacialPresetID' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, VoicePresetID) == 0x000098, "Member 'FJackDataTablePartyTalkCharacter::VoicePresetID' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, Handedness) == 0x0000A0, "Member 'FJackDataTablePartyTalkCharacter::Handedness' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, Hand) == 0x0000A8, "Member 'FJackDataTablePartyTalkCharacter::Hand' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, Head) == 0x0000B0, "Member 'FJackDataTablePartyTalkCharacter::Head' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, Body) == 0x0000B8, "Member 'FJackDataTablePartyTalkCharacter::Body' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, Accessory1) == 0x0000C0, "Member 'FJackDataTablePartyTalkCharacter::Accessory1' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, Accessory2) == 0x0000C8, "Member 'FJackDataTablePartyTalkCharacter::Accessory2' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, Item1) == 0x0000D0, "Member 'FJackDataTablePartyTalkCharacter::Item1' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, Item2) == 0x0000D8, "Member 'FJackDataTablePartyTalkCharacter::Item2' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, Item3) == 0x0000E0, "Member 'FJackDataTablePartyTalkCharacter::Item3' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, Item4) == 0x0000E8, "Member 'FJackDataTablePartyTalkCharacter::Item4' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, Item5) == 0x0000F0, "Member 'FJackDataTablePartyTalkCharacter::Item5' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, Item6) == 0x0000F8, "Member 'FJackDataTablePartyTalkCharacter::Item6' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, bIsNoTalk) == 0x000100, "Member 'FJackDataTablePartyTalkCharacter::bIsNoTalk' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, bIsBattle) == 0x000101, "Member 'FJackDataTablePartyTalkCharacter::bIsBattle' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, bIsFixedArea) == 0x000102, "Member 'FJackDataTablePartyTalkCharacter::bIsFixedArea' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, bIsSubjectOfAttack) == 0x000103, "Member 'FJackDataTablePartyTalkCharacter::bIsSubjectOfAttack' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, BaseParameterID) == 0x000108, "Member 'FJackDataTablePartyTalkCharacter::BaseParameterID' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, BattleAI_ID) == 0x000110, "Member 'FJackDataTablePartyTalkCharacter::BattleAI_ID' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, GambitRate) == 0x000118, "Member 'FJackDataTablePartyTalkCharacter::GambitRate' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, Gambit) == 0x00011C, "Member 'FJackDataTablePartyTalkCharacter::Gambit' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, PoseIdleMin) == 0x000120, "Member 'FJackDataTablePartyTalkCharacter::PoseIdleMin' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, PoseIdleMax) == 0x000124, "Member 'FJackDataTablePartyTalkCharacter::PoseIdleMax' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, PoseNormal01) == 0x000128, "Member 'FJackDataTablePartyTalkCharacter::PoseNormal01' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, PoseSerious01) == 0x000130, "Member 'FJackDataTablePartyTalkCharacter::PoseSerious01' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, PoseBlackout01) == 0x000138, "Member 'FJackDataTablePartyTalkCharacter::PoseBlackout01' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, PoseHappy01) == 0x000140, "Member 'FJackDataTablePartyTalkCharacter::PoseHappy01' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, PoseAngry01) == 0x000148, "Member 'FJackDataTablePartyTalkCharacter::PoseAngry01' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, PoseThinking01) == 0x000150, "Member 'FJackDataTablePartyTalkCharacter::PoseThinking01' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCharacter, PoseSpecial01) == 0x000158, "Member 'FJackDataTablePartyTalkCharacter::PoseSpecial01' has a wrong offset!");

// ScriptStruct JackGame.JackDataTablePartyTalkCutSceneFlags
// 0x0050 (0x0058 - 0x0008)
struct FJackDataTablePartyTalkCutSceneFlags final : public FTableRowBase
{
public:
	TArray<float>                                 DT_TARGETDISTANCE;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<float>                                 DT_WIDEDISTANCE;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         DT_AccBase;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DT_MinSpeed;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DT_MinWalkSpeed;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DT_SLen;                                           // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DT_RLen;                                           // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DT_AccMul;                                         // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DT_BrakeMul;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DT_FollowMargin;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DT_TrackSamplingDistanceMax;                       // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DT_TrackStraightLength;                            // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DT_TrackStraightMargin;                            // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTablePartyTalkCutSceneFlags) == 0x000008, "Wrong alignment on FJackDataTablePartyTalkCutSceneFlags");
static_assert(sizeof(FJackDataTablePartyTalkCutSceneFlags) == 0x000058, "Wrong size on FJackDataTablePartyTalkCutSceneFlags");
static_assert(offsetof(FJackDataTablePartyTalkCutSceneFlags, DT_TARGETDISTANCE) == 0x000008, "Member 'FJackDataTablePartyTalkCutSceneFlags::DT_TARGETDISTANCE' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCutSceneFlags, DT_WIDEDISTANCE) == 0x000018, "Member 'FJackDataTablePartyTalkCutSceneFlags::DT_WIDEDISTANCE' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCutSceneFlags, DT_AccBase) == 0x000028, "Member 'FJackDataTablePartyTalkCutSceneFlags::DT_AccBase' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCutSceneFlags, DT_MinSpeed) == 0x00002C, "Member 'FJackDataTablePartyTalkCutSceneFlags::DT_MinSpeed' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCutSceneFlags, DT_MinWalkSpeed) == 0x000030, "Member 'FJackDataTablePartyTalkCutSceneFlags::DT_MinWalkSpeed' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCutSceneFlags, DT_SLen) == 0x000034, "Member 'FJackDataTablePartyTalkCutSceneFlags::DT_SLen' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCutSceneFlags, DT_RLen) == 0x000038, "Member 'FJackDataTablePartyTalkCutSceneFlags::DT_RLen' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCutSceneFlags, DT_AccMul) == 0x00003C, "Member 'FJackDataTablePartyTalkCutSceneFlags::DT_AccMul' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCutSceneFlags, DT_BrakeMul) == 0x000040, "Member 'FJackDataTablePartyTalkCutSceneFlags::DT_BrakeMul' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCutSceneFlags, DT_FollowMargin) == 0x000044, "Member 'FJackDataTablePartyTalkCutSceneFlags::DT_FollowMargin' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCutSceneFlags, DT_TrackSamplingDistanceMax) == 0x000048, "Member 'FJackDataTablePartyTalkCutSceneFlags::DT_TrackSamplingDistanceMax' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCutSceneFlags, DT_TrackStraightLength) == 0x00004C, "Member 'FJackDataTablePartyTalkCutSceneFlags::DT_TrackStraightLength' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkCutSceneFlags, DT_TrackStraightMargin) == 0x000050, "Member 'FJackDataTablePartyTalkCutSceneFlags::DT_TrackStraightMargin' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Vehicle_V102_E001_Sync
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Vehicle_V102_E001_Sync final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Vehicle_V102_E001_Sync) == 0x000008, "Wrong alignment on FJackLDT_Vehicle_V102_E001_Sync");
static_assert(sizeof(FJackLDT_Vehicle_V102_E001_Sync) == 0x000010, "Wrong size on FJackLDT_Vehicle_V102_E001_Sync");

// ScriptStruct JackGame.JackDataTablePartyTalkMotionTag
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTablePartyTalkMotionTag final : public FTableRowBase
{
public:
	class FName                                   DT_Motion;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DT_FacialUpper;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DT_FacialLower;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DT_VoiceType;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTablePartyTalkMotionTag) == 0x000008, "Wrong alignment on FJackDataTablePartyTalkMotionTag");
static_assert(sizeof(FJackDataTablePartyTalkMotionTag) == 0x000028, "Wrong size on FJackDataTablePartyTalkMotionTag");
static_assert(offsetof(FJackDataTablePartyTalkMotionTag, DT_Motion) == 0x000008, "Member 'FJackDataTablePartyTalkMotionTag::DT_Motion' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkMotionTag, DT_FacialUpper) == 0x000010, "Member 'FJackDataTablePartyTalkMotionTag::DT_FacialUpper' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkMotionTag, DT_FacialLower) == 0x000018, "Member 'FJackDataTablePartyTalkMotionTag::DT_FacialLower' has a wrong offset!");
static_assert(offsetof(FJackDataTablePartyTalkMotionTag, DT_VoiceType) == 0x000020, "Member 'FJackDataTablePartyTalkMotionTag::DT_VoiceType' has a wrong offset!");

// ScriptStruct JackGame.JackDataTablePassiveTokugi
// 0x0040 (0x0048 - 0x0008)
struct FJackDataTablePassiveTokugi final : public FTableRowBase
{
public:
	class FName                                   PassiveNameID;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPassiveTokugiType                        EffectType;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EffectParameter;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EffectOddEffectID;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteWeaponBareHands;                           // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteWeaponSword;                               // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteWeaponDagger;                              // 0x0022(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteWeaponAx;                                  // 0x0023(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteWeaponStick;                               // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteWeaponBoomerang;                           // 0x0025(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteWeaponDoubleSword;                         // 0x0026(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteWeaponSpear;                               // 0x0027(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteWeaponStaff;                               // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteWeaponClaw;                                // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteWeaponWhip;                                // 0x002A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteShield;                                    // 0x002B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DescriptionID1;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DescriptionID2;                                    // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DescriptionID3;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTablePassiveTokugi) == 0x000008, "Wrong alignment on FJackDataTablePassiveTokugi");
static_assert(sizeof(FJackDataTablePassiveTokugi) == 0x000048, "Wrong size on FJackDataTablePassiveTokugi");
static_assert(offsetof(FJackDataTablePassiveTokugi, PassiveNameID) == 0x000008, "Member 'FJackDataTablePassiveTokugi::PassiveNameID' has a wrong offset!");
static_assert(offsetof(FJackDataTablePassiveTokugi, EffectType) == 0x000010, "Member 'FJackDataTablePassiveTokugi::EffectType' has a wrong offset!");
static_assert(offsetof(FJackDataTablePassiveTokugi, EffectParameter) == 0x000014, "Member 'FJackDataTablePassiveTokugi::EffectParameter' has a wrong offset!");
static_assert(offsetof(FJackDataTablePassiveTokugi, EffectOddEffectID) == 0x000018, "Member 'FJackDataTablePassiveTokugi::EffectOddEffectID' has a wrong offset!");
static_assert(offsetof(FJackDataTablePassiveTokugi, bExecuteWeaponBareHands) == 0x000020, "Member 'FJackDataTablePassiveTokugi::bExecuteWeaponBareHands' has a wrong offset!");
static_assert(offsetof(FJackDataTablePassiveTokugi, bExecuteWeaponSword) == 0x000021, "Member 'FJackDataTablePassiveTokugi::bExecuteWeaponSword' has a wrong offset!");
static_assert(offsetof(FJackDataTablePassiveTokugi, bExecuteWeaponDagger) == 0x000022, "Member 'FJackDataTablePassiveTokugi::bExecuteWeaponDagger' has a wrong offset!");
static_assert(offsetof(FJackDataTablePassiveTokugi, bExecuteWeaponAx) == 0x000023, "Member 'FJackDataTablePassiveTokugi::bExecuteWeaponAx' has a wrong offset!");
static_assert(offsetof(FJackDataTablePassiveTokugi, bExecuteWeaponStick) == 0x000024, "Member 'FJackDataTablePassiveTokugi::bExecuteWeaponStick' has a wrong offset!");
static_assert(offsetof(FJackDataTablePassiveTokugi, bExecuteWeaponBoomerang) == 0x000025, "Member 'FJackDataTablePassiveTokugi::bExecuteWeaponBoomerang' has a wrong offset!");
static_assert(offsetof(FJackDataTablePassiveTokugi, bExecuteWeaponDoubleSword) == 0x000026, "Member 'FJackDataTablePassiveTokugi::bExecuteWeaponDoubleSword' has a wrong offset!");
static_assert(offsetof(FJackDataTablePassiveTokugi, bExecuteWeaponSpear) == 0x000027, "Member 'FJackDataTablePassiveTokugi::bExecuteWeaponSpear' has a wrong offset!");
static_assert(offsetof(FJackDataTablePassiveTokugi, bExecuteWeaponStaff) == 0x000028, "Member 'FJackDataTablePassiveTokugi::bExecuteWeaponStaff' has a wrong offset!");
static_assert(offsetof(FJackDataTablePassiveTokugi, bExecuteWeaponClaw) == 0x000029, "Member 'FJackDataTablePassiveTokugi::bExecuteWeaponClaw' has a wrong offset!");
static_assert(offsetof(FJackDataTablePassiveTokugi, bExecuteWeaponWhip) == 0x00002A, "Member 'FJackDataTablePassiveTokugi::bExecuteWeaponWhip' has a wrong offset!");
static_assert(offsetof(FJackDataTablePassiveTokugi, bExecuteShield) == 0x00002B, "Member 'FJackDataTablePassiveTokugi::bExecuteShield' has a wrong offset!");
static_assert(offsetof(FJackDataTablePassiveTokugi, DescriptionID1) == 0x000030, "Member 'FJackDataTablePassiveTokugi::DescriptionID1' has a wrong offset!");
static_assert(offsetof(FJackDataTablePassiveTokugi, DescriptionID2) == 0x000038, "Member 'FJackDataTablePassiveTokugi::DescriptionID2' has a wrong offset!");
static_assert(offsetof(FJackDataTablePassiveTokugi, DescriptionID3) == 0x000040, "Member 'FJackDataTablePassiveTokugi::DescriptionID3' has a wrong offset!");

// ScriptStruct JackGame.JackDataTablePhoneticNo
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTablePhoneticNo final : public FTableRowBase
{
public:
	int32                                         PhoneticNo;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTablePhoneticNo) == 0x000008, "Wrong alignment on FJackDataTablePhoneticNo");
static_assert(sizeof(FJackDataTablePhoneticNo) == 0x000010, "Wrong size on FJackDataTablePhoneticNo");
static_assert(offsetof(FJackDataTablePhoneticNo, PhoneticNo) == 0x000008, "Member 'FJackDataTablePhoneticNo::PhoneticNo' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_AnimDynamics_M172
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AnimDynamics_M172 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AnimDynamics_M172) == 0x000008, "Wrong alignment on FJackLDT_AnimDynamics_M172");
static_assert(sizeof(FJackLDT_AnimDynamics_M172) == 0x000010, "Wrong size on FJackLDT_AnimDynamics_M172");

// ScriptStruct JackGame.JackDataTablePokerDoublieUpBaseCardRate
// 0x0038 (0x0040 - 0x0008)
struct FJackDataTablePokerDoublieUpBaseCardRate final : public FTableRowBase
{
public:
	float                                         Two;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Three;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Four;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Five;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Six;                                               // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seven;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Eight;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Nine;                                              // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ten;                                               // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Jack;                                              // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Queen;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         King;                                              // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ace;                                               // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTablePokerDoublieUpBaseCardRate) == 0x000008, "Wrong alignment on FJackDataTablePokerDoublieUpBaseCardRate");
static_assert(sizeof(FJackDataTablePokerDoublieUpBaseCardRate) == 0x000040, "Wrong size on FJackDataTablePokerDoublieUpBaseCardRate");
static_assert(offsetof(FJackDataTablePokerDoublieUpBaseCardRate, Two) == 0x000008, "Member 'FJackDataTablePokerDoublieUpBaseCardRate::Two' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerDoublieUpBaseCardRate, Three) == 0x00000C, "Member 'FJackDataTablePokerDoublieUpBaseCardRate::Three' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerDoublieUpBaseCardRate, Four) == 0x000010, "Member 'FJackDataTablePokerDoublieUpBaseCardRate::Four' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerDoublieUpBaseCardRate, Five) == 0x000014, "Member 'FJackDataTablePokerDoublieUpBaseCardRate::Five' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerDoublieUpBaseCardRate, Six) == 0x000018, "Member 'FJackDataTablePokerDoublieUpBaseCardRate::Six' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerDoublieUpBaseCardRate, Seven) == 0x00001C, "Member 'FJackDataTablePokerDoublieUpBaseCardRate::Seven' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerDoublieUpBaseCardRate, Eight) == 0x000020, "Member 'FJackDataTablePokerDoublieUpBaseCardRate::Eight' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerDoublieUpBaseCardRate, Nine) == 0x000024, "Member 'FJackDataTablePokerDoublieUpBaseCardRate::Nine' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerDoublieUpBaseCardRate, Ten) == 0x000028, "Member 'FJackDataTablePokerDoublieUpBaseCardRate::Ten' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerDoublieUpBaseCardRate, Jack) == 0x00002C, "Member 'FJackDataTablePokerDoublieUpBaseCardRate::Jack' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerDoublieUpBaseCardRate, Queen) == 0x000030, "Member 'FJackDataTablePokerDoublieUpBaseCardRate::Queen' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerDoublieUpBaseCardRate, King) == 0x000034, "Member 'FJackDataTablePokerDoublieUpBaseCardRate::King' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerDoublieUpBaseCardRate, Ace) == 0x000038, "Member 'FJackDataTablePokerDoublieUpBaseCardRate::Ace' has a wrong offset!");

// ScriptStruct JackGame.JackOptionData
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FJackOptionData final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackOptionData) == 0x000008, "Wrong alignment on FJackOptionData");
static_assert(sizeof(FJackOptionData) == 0x000040, "Wrong size on FJackOptionData");

// ScriptStruct JackGame.JackLDT_Syuurenjou
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Syuurenjou final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Syuurenjou) == 0x000008, "Wrong alignment on FJackLDT_Syuurenjou");
static_assert(sizeof(FJackLDT_Syuurenjou) == 0x000010, "Wrong size on FJackLDT_Syuurenjou");

// ScriptStruct JackGame.JackDataTablePokerTakaraBakoProbability
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTablePokerTakaraBakoProbability final : public FTableRowBase
{
public:
	float                                         ProbabilityOne;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProbabilityTen;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProbabilityHundred;                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTablePokerTakaraBakoProbability) == 0x000008, "Wrong alignment on FJackDataTablePokerTakaraBakoProbability");
static_assert(sizeof(FJackDataTablePokerTakaraBakoProbability) == 0x000018, "Wrong size on FJackDataTablePokerTakaraBakoProbability");
static_assert(offsetof(FJackDataTablePokerTakaraBakoProbability, ProbabilityOne) == 0x000008, "Member 'FJackDataTablePokerTakaraBakoProbability::ProbabilityOne' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerTakaraBakoProbability, ProbabilityTen) == 0x00000C, "Member 'FJackDataTablePokerTakaraBakoProbability::ProbabilityTen' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerTakaraBakoProbability, ProbabilityHundred) == 0x000010, "Member 'FJackDataTablePokerTakaraBakoProbability::ProbabilityHundred' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_OddEffectBattleText
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_OddEffectBattleText final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_OddEffectBattleText) == 0x000008, "Wrong alignment on FJackLDT_OddEffectBattleText");
static_assert(sizeof(FJackLDT_OddEffectBattleText) == 0x000010, "Wrong size on FJackLDT_OddEffectBattleText");

// ScriptStruct JackGame.JackDataTablePokerTakaraBakoCoin
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTablePokerTakaraBakoCoin final : public FTableRowBase
{
public:
	float                                         ProbabilityOne;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProbabilityTen;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProbabilityHundred;                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Fraction;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Range;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTablePokerTakaraBakoCoin) == 0x000008, "Wrong alignment on FJackDataTablePokerTakaraBakoCoin");
static_assert(sizeof(FJackDataTablePokerTakaraBakoCoin) == 0x000020, "Wrong size on FJackDataTablePokerTakaraBakoCoin");
static_assert(offsetof(FJackDataTablePokerTakaraBakoCoin, ProbabilityOne) == 0x000008, "Member 'FJackDataTablePokerTakaraBakoCoin::ProbabilityOne' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerTakaraBakoCoin, ProbabilityTen) == 0x00000C, "Member 'FJackDataTablePokerTakaraBakoCoin::ProbabilityTen' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerTakaraBakoCoin, ProbabilityHundred) == 0x000010, "Member 'FJackDataTablePokerTakaraBakoCoin::ProbabilityHundred' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerTakaraBakoCoin, Fraction) == 0x000014, "Member 'FJackDataTablePokerTakaraBakoCoin::Fraction' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerTakaraBakoCoin, Range) == 0x000018, "Member 'FJackDataTablePokerTakaraBakoCoin::Range' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_OddEffectEffect
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_OddEffectEffect final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_OddEffectEffect) == 0x000008, "Wrong alignment on FJackLDT_OddEffectEffect");
static_assert(sizeof(FJackLDT_OddEffectEffect) == 0x000010, "Wrong size on FJackLDT_OddEffectEffect");

// ScriptStruct JackGame.JackDataTablePokerDoubleUp
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTablePokerDoubleUp final : public FTableRowBase
{
public:
	int32                                         Win;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Draw;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lose;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTablePokerDoubleUp) == 0x000008, "Wrong alignment on FJackDataTablePokerDoubleUp");
static_assert(sizeof(FJackDataTablePokerDoubleUp) == 0x000018, "Wrong size on FJackDataTablePokerDoubleUp");
static_assert(offsetof(FJackDataTablePokerDoubleUp, Win) == 0x000008, "Member 'FJackDataTablePokerDoubleUp::Win' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerDoubleUp, Draw) == 0x00000C, "Member 'FJackDataTablePokerDoubleUp::Draw' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerDoubleUp, Lose) == 0x000010, "Member 'FJackDataTablePokerDoubleUp::Lose' has a wrong offset!");

// ScriptStruct JackGame.JackDataTablePokerWinningRate
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTablePokerWinningRate final : public FTableRowBase
{
public:
	int32                                         WinningRate;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTablePokerWinningRate) == 0x000008, "Wrong alignment on FJackDataTablePokerWinningRate");
static_assert(sizeof(FJackDataTablePokerWinningRate) == 0x000010, "Wrong size on FJackDataTablePokerWinningRate");
static_assert(offsetof(FJackDataTablePokerWinningRate, WinningRate) == 0x000008, "Member 'FJackDataTablePokerWinningRate::WinningRate' has a wrong offset!");

// ScriptStruct JackGame.JackDataTablePokerWBP
// 0x0048 (0x0050 - 0x0008)
struct FJackDataTablePokerWBP final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   Japanese;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   TraditionalChinese;                                // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Others;                                            // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTablePokerWBP) == 0x000008, "Wrong alignment on FJackDataTablePokerWBP");
static_assert(sizeof(FJackDataTablePokerWBP) == 0x000050, "Wrong size on FJackDataTablePokerWBP");
static_assert(offsetof(FJackDataTablePokerWBP, Japanese) == 0x000008, "Member 'FJackDataTablePokerWBP::Japanese' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerWBP, TraditionalChinese) == 0x000020, "Member 'FJackDataTablePokerWBP::TraditionalChinese' has a wrong offset!");
static_assert(offsetof(FJackDataTablePokerWBP, Others) == 0x000038, "Member 'FJackDataTablePokerWBP::Others' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableQuest
// 0x00C8 (0x00D0 - 0x0008)
struct FJackDataTableQuest final : public FTableRowBase
{
public:
	class FName                                   Title;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestFlag;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestDisplayFlag;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestUiDisplayFlag;                                // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Order;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackAchievement                              AchievementType;                                   // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AchievementConditions;                             // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   StartDescription;                                  // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           StartMapVolumeIDs;                                 // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   OrderDescription;                                  // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProgressDescription;                               // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ProgressMapVolumeIDs;                              // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   ProgressDescriptionK1;                             // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProgressDescriptionK2;                             // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProgressDescriptionK3;                             // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CompleteDescription;                               // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           CompleteMapVolumeIDs;                              // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   EndDescription;                                    // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NPCID;                                             // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJackQuestReward>               Reward;                                            // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         TripleQuestNo;                                     // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableQuest) == 0x000008, "Wrong alignment on FJackDataTableQuest");
static_assert(sizeof(FJackDataTableQuest) == 0x0000D0, "Wrong size on FJackDataTableQuest");
static_assert(offsetof(FJackDataTableQuest, Title) == 0x000008, "Member 'FJackDataTableQuest::Title' has a wrong offset!");
static_assert(offsetof(FJackDataTableQuest, QuestFlag) == 0x000010, "Member 'FJackDataTableQuest::QuestFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableQuest, QuestDisplayFlag) == 0x000018, "Member 'FJackDataTableQuest::QuestDisplayFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableQuest, QuestUiDisplayFlag) == 0x000020, "Member 'FJackDataTableQuest::QuestUiDisplayFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableQuest, Order) == 0x000028, "Member 'FJackDataTableQuest::Order' has a wrong offset!");
static_assert(offsetof(FJackDataTableQuest, AchievementType) == 0x00002C, "Member 'FJackDataTableQuest::AchievementType' has a wrong offset!");
static_assert(offsetof(FJackDataTableQuest, AchievementConditions) == 0x000030, "Member 'FJackDataTableQuest::AchievementConditions' has a wrong offset!");
static_assert(offsetof(FJackDataTableQuest, StartDescription) == 0x000040, "Member 'FJackDataTableQuest::StartDescription' has a wrong offset!");
static_assert(offsetof(FJackDataTableQuest, StartMapVolumeIDs) == 0x000048, "Member 'FJackDataTableQuest::StartMapVolumeIDs' has a wrong offset!");
static_assert(offsetof(FJackDataTableQuest, OrderDescription) == 0x000058, "Member 'FJackDataTableQuest::OrderDescription' has a wrong offset!");
static_assert(offsetof(FJackDataTableQuest, ProgressDescription) == 0x000060, "Member 'FJackDataTableQuest::ProgressDescription' has a wrong offset!");
static_assert(offsetof(FJackDataTableQuest, ProgressMapVolumeIDs) == 0x000068, "Member 'FJackDataTableQuest::ProgressMapVolumeIDs' has a wrong offset!");
static_assert(offsetof(FJackDataTableQuest, ProgressDescriptionK1) == 0x000078, "Member 'FJackDataTableQuest::ProgressDescriptionK1' has a wrong offset!");
static_assert(offsetof(FJackDataTableQuest, ProgressDescriptionK2) == 0x000080, "Member 'FJackDataTableQuest::ProgressDescriptionK2' has a wrong offset!");
static_assert(offsetof(FJackDataTableQuest, ProgressDescriptionK3) == 0x000088, "Member 'FJackDataTableQuest::ProgressDescriptionK3' has a wrong offset!");
static_assert(offsetof(FJackDataTableQuest, CompleteDescription) == 0x000090, "Member 'FJackDataTableQuest::CompleteDescription' has a wrong offset!");
static_assert(offsetof(FJackDataTableQuest, CompleteMapVolumeIDs) == 0x000098, "Member 'FJackDataTableQuest::CompleteMapVolumeIDs' has a wrong offset!");
static_assert(offsetof(FJackDataTableQuest, EndDescription) == 0x0000A8, "Member 'FJackDataTableQuest::EndDescription' has a wrong offset!");
static_assert(offsetof(FJackDataTableQuest, NPCID) == 0x0000B0, "Member 'FJackDataTableQuest::NPCID' has a wrong offset!");
static_assert(offsetof(FJackDataTableQuest, Reward) == 0x0000B8, "Member 'FJackDataTableQuest::Reward' has a wrong offset!");
static_assert(offsetof(FJackDataTableQuest, TripleQuestNo) == 0x0000C8, "Member 'FJackDataTableQuest::TripleQuestNo' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Vehicle_V106_E001_Sync
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Vehicle_V106_E001_Sync final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Vehicle_V106_E001_Sync) == 0x000008, "Wrong alignment on FJackLDT_Vehicle_V106_E001_Sync");
static_assert(sizeof(FJackLDT_Vehicle_V106_E001_Sync) == 0x000010, "Wrong size on FJackLDT_Vehicle_V106_E001_Sync");

// ScriptStruct JackGame.JackDataTableRelationalGameFlagConfig
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableRelationalGameFlagConfig final : public FTableRowBase
{
public:
	TArray<struct FJackGameFlagKeyValueSet>       ConfigFlagList;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableRelationalGameFlagConfig) == 0x000008, "Wrong alignment on FJackDataTableRelationalGameFlagConfig");
static_assert(sizeof(FJackDataTableRelationalGameFlagConfig) == 0x000018, "Wrong size on FJackDataTableRelationalGameFlagConfig");
static_assert(offsetof(FJackDataTableRelationalGameFlagConfig, ConfigFlagList) == 0x000008, "Member 'FJackDataTableRelationalGameFlagConfig::ConfigFlagList' has a wrong offset!");

// ScriptStruct JackGame.JackSetUpperFacePoseKeyValue
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FJackSetUpperFacePoseKeyValue final
{
public:
	float                                         TimeVar;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FacialName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendSec;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FaceWeight;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDisableState;                                    // 0x0018(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMatineeFacialReferanceState              FacialState;                                       // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackSetUpperFacePoseKeyValue) == 0x000008, "Wrong alignment on FJackSetUpperFacePoseKeyValue");
static_assert(sizeof(FJackSetUpperFacePoseKeyValue) == 0x000020, "Wrong size on FJackSetUpperFacePoseKeyValue");
static_assert(offsetof(FJackSetUpperFacePoseKeyValue, TimeVar) == 0x000000, "Member 'FJackSetUpperFacePoseKeyValue::TimeVar' has a wrong offset!");
static_assert(offsetof(FJackSetUpperFacePoseKeyValue, FacialName) == 0x000008, "Member 'FJackSetUpperFacePoseKeyValue::FacialName' has a wrong offset!");
static_assert(offsetof(FJackSetUpperFacePoseKeyValue, BlendSec) == 0x000010, "Member 'FJackSetUpperFacePoseKeyValue::BlendSec' has a wrong offset!");
static_assert(offsetof(FJackSetUpperFacePoseKeyValue, FaceWeight) == 0x000014, "Member 'FJackSetUpperFacePoseKeyValue::FaceWeight' has a wrong offset!");
static_assert(offsetof(FJackSetUpperFacePoseKeyValue, IsDisableState) == 0x000018, "Member 'FJackSetUpperFacePoseKeyValue::IsDisableState' has a wrong offset!");
static_assert(offsetof(FJackSetUpperFacePoseKeyValue, FacialState) == 0x000019, "Member 'FJackSetUpperFacePoseKeyValue::FacialState' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_C_FacialPreset
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_C_FacialPreset final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_C_FacialPreset) == 0x000008, "Wrong alignment on FJackLDT_C_FacialPreset");
static_assert(sizeof(FJackLDT_C_FacialPreset) == 0x000010, "Wrong size on FJackLDT_C_FacialPreset");

// ScriptStruct JackGame.JackDataTableMonsterRenkei
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableMonsterRenkei final : public FTableRowBase
{
public:
	class FName                                   RenkeiID;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Member;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableMonsterRenkei) == 0x000008, "Wrong alignment on FJackDataTableMonsterRenkei");
static_assert(sizeof(FJackDataTableMonsterRenkei) == 0x000020, "Wrong size on FJackDataTableMonsterRenkei");
static_assert(offsetof(FJackDataTableMonsterRenkei, RenkeiID) == 0x000008, "Member 'FJackDataTableMonsterRenkei::RenkeiID' has a wrong offset!");
static_assert(offsetof(FJackDataTableMonsterRenkei, Member) == 0x000010, "Member 'FJackDataTableMonsterRenkei::Member' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_KaziActionTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_KaziActionTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_KaziActionTable) == 0x000008, "Wrong alignment on FJackLDT_KaziActionTable");
static_assert(sizeof(FJackLDT_KaziActionTable) == 0x000010, "Wrong size on FJackLDT_KaziActionTable");

// ScriptStruct JackGame.JackDataTableProgRenkei
// 0x0088 (0x0090 - 0x0008)
struct FJackDataTableProgRenkei final : public FTableRowBase
{
public:
	class FName                                   FormationID;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DoActionID_A;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPendingDead_A;                                    // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackRenkeiMember                             Target_A;                                          // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleRenkeiTiming                       ActionStartTiming_A;                               // 0x001A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackRenkeiMember                             ActionStartTimingLookChara_A;                      // 0x001B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActionStartTime_A;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DoActionID_B;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPendingDead_B;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackRenkeiMember                             Target_B;                                          // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleRenkeiTiming                       ActionStartTiming_B;                               // 0x002A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackRenkeiMember                             ActionStartTimingLookChara_B;                      // 0x002B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActionStartTime_B;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionCameraID;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TextID;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<EJackBattleRenkeiTiming>               TextID_StartTiming;                                // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<EJackRenkeiMember>                     TextID_StartTimingLookChara;                       // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<float>                                 TextID_StartTime;                                  // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   PlayAnimMontage;                                   // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackRenkeiMember                             PlayAnimMontage_Target;                            // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleRenkeiTiming                       PlayAnimMontage_StartTiming;                       // 0x0081(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackRenkeiMember                             PlayAnimMontage_LookChara;                         // 0x0082(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_83[0x1];                                       // 0x0083(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayAnimMontage_StartTime;                         // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBattleRenkeiTiming                       RenkeiEndTiming;                                   // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackRenkeiMember                             RenkeiEndTimingLookChara;                          // 0x0089(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenkeiEndTimingTime;                               // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableProgRenkei) == 0x000008, "Wrong alignment on FJackDataTableProgRenkei");
static_assert(sizeof(FJackDataTableProgRenkei) == 0x000090, "Wrong size on FJackDataTableProgRenkei");
static_assert(offsetof(FJackDataTableProgRenkei, FormationID) == 0x000008, "Member 'FJackDataTableProgRenkei::FormationID' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, DoActionID_A) == 0x000010, "Member 'FJackDataTableProgRenkei::DoActionID_A' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, bPendingDead_A) == 0x000018, "Member 'FJackDataTableProgRenkei::bPendingDead_A' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, Target_A) == 0x000019, "Member 'FJackDataTableProgRenkei::Target_A' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, ActionStartTiming_A) == 0x00001A, "Member 'FJackDataTableProgRenkei::ActionStartTiming_A' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, ActionStartTimingLookChara_A) == 0x00001B, "Member 'FJackDataTableProgRenkei::ActionStartTimingLookChara_A' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, ActionStartTime_A) == 0x00001C, "Member 'FJackDataTableProgRenkei::ActionStartTime_A' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, DoActionID_B) == 0x000020, "Member 'FJackDataTableProgRenkei::DoActionID_B' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, bPendingDead_B) == 0x000028, "Member 'FJackDataTableProgRenkei::bPendingDead_B' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, Target_B) == 0x000029, "Member 'FJackDataTableProgRenkei::Target_B' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, ActionStartTiming_B) == 0x00002A, "Member 'FJackDataTableProgRenkei::ActionStartTiming_B' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, ActionStartTimingLookChara_B) == 0x00002B, "Member 'FJackDataTableProgRenkei::ActionStartTimingLookChara_B' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, ActionStartTime_B) == 0x00002C, "Member 'FJackDataTableProgRenkei::ActionStartTime_B' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, ActionCameraID) == 0x000030, "Member 'FJackDataTableProgRenkei::ActionCameraID' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, TextID) == 0x000038, "Member 'FJackDataTableProgRenkei::TextID' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, TextID_StartTiming) == 0x000048, "Member 'FJackDataTableProgRenkei::TextID_StartTiming' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, TextID_StartTimingLookChara) == 0x000058, "Member 'FJackDataTableProgRenkei::TextID_StartTimingLookChara' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, TextID_StartTime) == 0x000068, "Member 'FJackDataTableProgRenkei::TextID_StartTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, PlayAnimMontage) == 0x000078, "Member 'FJackDataTableProgRenkei::PlayAnimMontage' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, PlayAnimMontage_Target) == 0x000080, "Member 'FJackDataTableProgRenkei::PlayAnimMontage_Target' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, PlayAnimMontage_StartTiming) == 0x000081, "Member 'FJackDataTableProgRenkei::PlayAnimMontage_StartTiming' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, PlayAnimMontage_LookChara) == 0x000082, "Member 'FJackDataTableProgRenkei::PlayAnimMontage_LookChara' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, PlayAnimMontage_StartTime) == 0x000084, "Member 'FJackDataTableProgRenkei::PlayAnimMontage_StartTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, RenkeiEndTiming) == 0x000088, "Member 'FJackDataTableProgRenkei::RenkeiEndTiming' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, RenkeiEndTimingLookChara) == 0x000089, "Member 'FJackDataTableProgRenkei::RenkeiEndTimingLookChara' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkei, RenkeiEndTimingTime) == 0x00008C, "Member 'FJackDataTableProgRenkei::RenkeiEndTimingTime' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableProgRenkeiFormation
// 0x0030 (0x0038 - 0x0008)
struct FJackDataTableProgRenkeiFormation final : public FTableRowBase
{
public:
	TArray<struct FVector>                        AttackerLocations;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<EJackBattleRenkeiFormationDirection>   AttackerDirections;                                // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EJackBattleRenkeiFormationGroupDirection      DefenderDirections;                                // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DefenderCenterLocation;                            // 0x002C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableProgRenkeiFormation) == 0x000008, "Wrong alignment on FJackDataTableProgRenkeiFormation");
static_assert(sizeof(FJackDataTableProgRenkeiFormation) == 0x000038, "Wrong size on FJackDataTableProgRenkeiFormation");
static_assert(offsetof(FJackDataTableProgRenkeiFormation, AttackerLocations) == 0x000008, "Member 'FJackDataTableProgRenkeiFormation::AttackerLocations' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkeiFormation, AttackerDirections) == 0x000018, "Member 'FJackDataTableProgRenkeiFormation::AttackerDirections' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkeiFormation, DefenderDirections) == 0x000028, "Member 'FJackDataTableProgRenkeiFormation::DefenderDirections' has a wrong offset!");
static_assert(offsetof(FJackDataTableProgRenkeiFormation, DefenderCenterLocation) == 0x00002C, "Member 'FJackDataTableProgRenkeiFormation::DefenderCenterLocation' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_ProgRenkeiFormation
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ProgRenkeiFormation final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ProgRenkeiFormation) == 0x000008, "Wrong alignment on FJackLDT_ProgRenkeiFormation");
static_assert(sizeof(FJackLDT_ProgRenkeiFormation) == 0x000010, "Wrong size on FJackLDT_ProgRenkeiFormation");

// ScriptStruct JackGame.JackDataTableRouletteTextureAsset
// 0x0030 (0x0038 - 0x0008)
struct FJackDataTableRouletteTextureAsset final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              TextureBg;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              TextureLine;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableRouletteTextureAsset) == 0x000008, "Wrong alignment on FJackDataTableRouletteTextureAsset");
static_assert(sizeof(FJackDataTableRouletteTextureAsset) == 0x000038, "Wrong size on FJackDataTableRouletteTextureAsset");
static_assert(offsetof(FJackDataTableRouletteTextureAsset, TextureBg) == 0x000008, "Member 'FJackDataTableRouletteTextureAsset::TextureBg' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteTextureAsset, TextureLine) == 0x000020, "Member 'FJackDataTableRouletteTextureAsset::TextureLine' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableRouletteNPCDistribution
// 0x0038 (0x0040 - 0x0008)
struct FJackDataTableRouletteNPCDistribution final : public FTableRowBase
{
public:
	int32                                         Bet1Coin;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bet10Coin;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bet100Coin;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinNum1;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinNum2;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinNum3;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinNum4;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinNum5;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinNum6;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinNum7;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinNum8;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinNum9;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinNum10;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableRouletteNPCDistribution) == 0x000008, "Wrong alignment on FJackDataTableRouletteNPCDistribution");
static_assert(sizeof(FJackDataTableRouletteNPCDistribution) == 0x000040, "Wrong size on FJackDataTableRouletteNPCDistribution");
static_assert(offsetof(FJackDataTableRouletteNPCDistribution, Bet1Coin) == 0x000008, "Member 'FJackDataTableRouletteNPCDistribution::Bet1Coin' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteNPCDistribution, Bet10Coin) == 0x00000C, "Member 'FJackDataTableRouletteNPCDistribution::Bet10Coin' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteNPCDistribution, Bet100Coin) == 0x000010, "Member 'FJackDataTableRouletteNPCDistribution::Bet100Coin' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteNPCDistribution, CoinNum1) == 0x000014, "Member 'FJackDataTableRouletteNPCDistribution::CoinNum1' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteNPCDistribution, CoinNum2) == 0x000018, "Member 'FJackDataTableRouletteNPCDistribution::CoinNum2' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteNPCDistribution, CoinNum3) == 0x00001C, "Member 'FJackDataTableRouletteNPCDistribution::CoinNum3' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteNPCDistribution, CoinNum4) == 0x000020, "Member 'FJackDataTableRouletteNPCDistribution::CoinNum4' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteNPCDistribution, CoinNum5) == 0x000024, "Member 'FJackDataTableRouletteNPCDistribution::CoinNum5' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteNPCDistribution, CoinNum6) == 0x000028, "Member 'FJackDataTableRouletteNPCDistribution::CoinNum6' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteNPCDistribution, CoinNum7) == 0x00002C, "Member 'FJackDataTableRouletteNPCDistribution::CoinNum7' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteNPCDistribution, CoinNum8) == 0x000030, "Member 'FJackDataTableRouletteNPCDistribution::CoinNum8' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteNPCDistribution, CoinNum9) == 0x000034, "Member 'FJackDataTableRouletteNPCDistribution::CoinNum9' has a wrong offset!");
static_assert(offsetof(FJackDataTableRouletteNPCDistribution, CoinNum10) == 0x000038, "Member 'FJackDataTableRouletteNPCDistribution::CoinNum10' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_UILoadingTips
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UILoadingTips final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UILoadingTips) == 0x000008, "Wrong alignment on FJackLDT_UILoadingTips");
static_assert(sizeof(FJackLDT_UILoadingTips) == 0x000010, "Wrong size on FJackLDT_UILoadingTips");

// ScriptStruct JackGame.JackDataTableRura
// 0x0058 (0x0060 - 0x0008)
struct FJackDataTableRura final : public FTableRowBase
{
public:
	class FName                                   SelectNameID;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   JumpTag;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IdoJumpTag;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DescriptionID;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TouchFlag;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OpenFlag;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WorldMapPoint;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WorldMapArea;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBukiShopFlag;                                     // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBouguShopFlag;                                    // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInnFlag;                                          // 0x004A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDouguShopFlag;                                    // 0x004B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bYorozuShopFlag;                                   // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChurchFlag;                                       // 0x004D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBankFlag;                                         // 0x004E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlacksmithFlag;                                   // 0x004F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCasinoFlag;                                       // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUmaRaceFlag;                                      // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ShipMoveTag;                                       // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableRura) == 0x000008, "Wrong alignment on FJackDataTableRura");
static_assert(sizeof(FJackDataTableRura) == 0x000060, "Wrong size on FJackDataTableRura");
static_assert(offsetof(FJackDataTableRura, SelectNameID) == 0x000008, "Member 'FJackDataTableRura::SelectNameID' has a wrong offset!");
static_assert(offsetof(FJackDataTableRura, JumpTag) == 0x000010, "Member 'FJackDataTableRura::JumpTag' has a wrong offset!");
static_assert(offsetof(FJackDataTableRura, IdoJumpTag) == 0x000018, "Member 'FJackDataTableRura::IdoJumpTag' has a wrong offset!");
static_assert(offsetof(FJackDataTableRura, DescriptionID) == 0x000020, "Member 'FJackDataTableRura::DescriptionID' has a wrong offset!");
static_assert(offsetof(FJackDataTableRura, TouchFlag) == 0x000028, "Member 'FJackDataTableRura::TouchFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableRura, OpenFlag) == 0x000030, "Member 'FJackDataTableRura::OpenFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableRura, WorldMapPoint) == 0x000038, "Member 'FJackDataTableRura::WorldMapPoint' has a wrong offset!");
static_assert(offsetof(FJackDataTableRura, WorldMapArea) == 0x000040, "Member 'FJackDataTableRura::WorldMapArea' has a wrong offset!");
static_assert(offsetof(FJackDataTableRura, bBukiShopFlag) == 0x000048, "Member 'FJackDataTableRura::bBukiShopFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableRura, bBouguShopFlag) == 0x000049, "Member 'FJackDataTableRura::bBouguShopFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableRura, bInnFlag) == 0x00004A, "Member 'FJackDataTableRura::bInnFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableRura, bDouguShopFlag) == 0x00004B, "Member 'FJackDataTableRura::bDouguShopFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableRura, bYorozuShopFlag) == 0x00004C, "Member 'FJackDataTableRura::bYorozuShopFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableRura, bChurchFlag) == 0x00004D, "Member 'FJackDataTableRura::bChurchFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableRura, bBankFlag) == 0x00004E, "Member 'FJackDataTableRura::bBankFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableRura, bBlacksmithFlag) == 0x00004F, "Member 'FJackDataTableRura::bBlacksmithFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableRura, bCasinoFlag) == 0x000050, "Member 'FJackDataTableRura::bCasinoFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableRura, bUmaRaceFlag) == 0x000051, "Member 'FJackDataTableRura::bUmaRaceFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableRura, ShipMoveTag) == 0x000058, "Member 'FJackDataTableRura::ShipMoveTag' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableRuraRestriction
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableRuraRestriction final : public FTableRowBase
{
public:
	class FName                                   BanStartFlag;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BanEndFlag;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableRuraRestriction) == 0x000008, "Wrong alignment on FJackDataTableRuraRestriction");
static_assert(sizeof(FJackDataTableRuraRestriction) == 0x000018, "Wrong size on FJackDataTableRuraRestriction");
static_assert(offsetof(FJackDataTableRuraRestriction, BanStartFlag) == 0x000008, "Member 'FJackDataTableRuraRestriction::BanStartFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableRuraRestriction, BanEndFlag) == 0x000010, "Member 'FJackDataTableRuraRestriction::BanEndFlag' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_PartyTalkData_A060
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_A060 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_A060) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_A060");
static_assert(sizeof(FJackLDT_PartyTalkData_A060) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_A060");

// ScriptStruct JackGame.JackDataTableSlotME
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableSlotME final : public FTableRowBase
{
public:
	class FName                                   ME_FiveLine;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ME_FourLine;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ME_ThreeLine;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableSlotME) == 0x000008, "Wrong alignment on FJackDataTableSlotME");
static_assert(sizeof(FJackDataTableSlotME) == 0x000020, "Wrong size on FJackDataTableSlotME");
static_assert(offsetof(FJackDataTableSlotME, ME_FiveLine) == 0x000008, "Member 'FJackDataTableSlotME::ME_FiveLine' has a wrong offset!");
static_assert(offsetof(FJackDataTableSlotME, ME_FourLine) == 0x000010, "Member 'FJackDataTableSlotME::ME_FourLine' has a wrong offset!");
static_assert(offsetof(FJackDataTableSlotME, ME_ThreeLine) == 0x000018, "Member 'FJackDataTableSlotME::ME_ThreeLine' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_PartyTalkData_A180
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_A180 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_A180) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_A180");
static_assert(sizeof(FJackLDT_PartyTalkData_A180) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_A180");

// ScriptStruct JackGame.JackDataTableSlotAsset
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableSlotAsset final : public FTableRowBase
{
public:
	TSoftObjectPtr<class AActor>                  MeshClass;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableSlotAsset) == 0x000008, "Wrong alignment on FJackDataTableSlotAsset");
static_assert(sizeof(FJackDataTableSlotAsset) == 0x000020, "Wrong size on FJackDataTableSlotAsset");
static_assert(offsetof(FJackDataTableSlotAsset, MeshClass) == 0x000008, "Member 'FJackDataTableSlotAsset::MeshClass' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableSlotRole
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableSlotRole final : public FTableRowBase
{
public:
	int32                                         Five;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Four;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Three;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableSlotRole) == 0x000008, "Wrong alignment on FJackDataTableSlotRole");
static_assert(sizeof(FJackDataTableSlotRole) == 0x000018, "Wrong size on FJackDataTableSlotRole");
static_assert(offsetof(FJackDataTableSlotRole, Five) == 0x000008, "Member 'FJackDataTableSlotRole::Five' has a wrong offset!");
static_assert(offsetof(FJackDataTableSlotRole, Four) == 0x00000C, "Member 'FJackDataTableSlotRole::Four' has a wrong offset!");
static_assert(offsetof(FJackDataTableSlotRole, Three) == 0x000010, "Member 'FJackDataTableSlotRole::Three' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableSlotPaymentsPercent
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableSlotPaymentsPercent final : public FTableRowBase
{
public:
	int32                                         PayPercent;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinPercent;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableSlotPaymentsPercent) == 0x000008, "Wrong alignment on FJackDataTableSlotPaymentsPercent");
static_assert(sizeof(FJackDataTableSlotPaymentsPercent) == 0x000010, "Wrong size on FJackDataTableSlotPaymentsPercent");
static_assert(offsetof(FJackDataTableSlotPaymentsPercent, PayPercent) == 0x000008, "Member 'FJackDataTableSlotPaymentsPercent::PayPercent' has a wrong offset!");
static_assert(offsetof(FJackDataTableSlotPaymentsPercent, WinPercent) == 0x00000C, "Member 'FJackDataTableSlotPaymentsPercent::WinPercent' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableSlotHitLine
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableSlotHitLine final : public FTableRowBase
{
public:
	int32                                         Percent;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableSlotHitLine) == 0x000008, "Wrong alignment on FJackDataTableSlotHitLine");
static_assert(sizeof(FJackDataTableSlotHitLine) == 0x000010, "Wrong size on FJackDataTableSlotHitLine");
static_assert(offsetof(FJackDataTableSlotHitLine, Percent) == 0x000008, "Member 'FJackDataTableSlotHitLine::Percent' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableParticleSound
// 0x0048 (0x0050 - 0x0008)
struct FJackDataTableParticleSound final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USoundBase>              Sound0;                                            // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Sound1;                                            // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Sound2;                                            // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableParticleSound) == 0x000008, "Wrong alignment on FJackDataTableParticleSound");
static_assert(sizeof(FJackDataTableParticleSound) == 0x000050, "Wrong size on FJackDataTableParticleSound");
static_assert(offsetof(FJackDataTableParticleSound, Sound0) == 0x000008, "Member 'FJackDataTableParticleSound::Sound0' has a wrong offset!");
static_assert(offsetof(FJackDataTableParticleSound, Sound1) == 0x000020, "Member 'FJackDataTableParticleSound::Sound1' has a wrong offset!");
static_assert(offsetof(FJackDataTableParticleSound, Sound2) == 0x000038, "Member 'FJackDataTableParticleSound::Sound2' has a wrong offset!");

// ScriptStruct JackGame.JackTenseiDisplayCondition
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackTenseiDisplayCondition final
{
public:
	EJackGameFlagCategory                         FlagCategory;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FlagId;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackTenseiDisplayCondition) == 0x000008, "Wrong alignment on FJackTenseiDisplayCondition");
static_assert(sizeof(FJackTenseiDisplayCondition) == 0x000010, "Wrong size on FJackTenseiDisplayCondition");
static_assert(offsetof(FJackTenseiDisplayCondition, FlagCategory) == 0x000000, "Member 'FJackTenseiDisplayCondition::FlagCategory' has a wrong offset!");
static_assert(offsetof(FJackTenseiDisplayCondition, FlagId) == 0x000008, "Member 'FJackTenseiDisplayCondition::FlagId' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableTenseiSelect
// 0x0058 (0x0060 - 0x0008)
struct FJackDataTableTenseiSelect final : public FTableRowBase
{
public:
	EJackScenarioGroup                            ScenarioGroup;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ScenarioTitleNameId;                               // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapStart;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProgressNo;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackTenseiDisplayCondition>    DisplayCondition;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   ScenarioDescriptionId;                             // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                ScenarioTexture;                                   // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TripleMapStart;                                    // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableTenseiSelect) == 0x000008, "Wrong alignment on FJackDataTableTenseiSelect");
static_assert(sizeof(FJackDataTableTenseiSelect) == 0x000060, "Wrong size on FJackDataTableTenseiSelect");
static_assert(offsetof(FJackDataTableTenseiSelect, ScenarioGroup) == 0x000008, "Member 'FJackDataTableTenseiSelect::ScenarioGroup' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiSelect, ScenarioTitleNameId) == 0x000010, "Member 'FJackDataTableTenseiSelect::ScenarioTitleNameId' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiSelect, MapStart) == 0x000018, "Member 'FJackDataTableTenseiSelect::MapStart' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiSelect, ProgressNo) == 0x000020, "Member 'FJackDataTableTenseiSelect::ProgressNo' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiSelect, DisplayCondition) == 0x000028, "Member 'FJackDataTableTenseiSelect::DisplayCondition' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiSelect, ScenarioDescriptionId) == 0x000038, "Member 'FJackDataTableTenseiSelect::ScenarioDescriptionId' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiSelect, ScenarioTexture) == 0x000040, "Member 'FJackDataTableTenseiSelect::ScenarioTexture' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiSelect, TripleMapStart) == 0x000058, "Member 'FJackDataTableTenseiSelect::TripleMapStart' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableBGMVolume
// 0x0028 (0x0030 - 0x0008)
struct FJackDataTableBGMVolume final : public FTableRowBase
{
public:
	class FString                                 Title;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JP3DGold;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JP3DOrche;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NE3DGold;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NE3DOrche;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoOrche;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableBGMVolume) == 0x000008, "Wrong alignment on FJackDataTableBGMVolume");
static_assert(sizeof(FJackDataTableBGMVolume) == 0x000030, "Wrong size on FJackDataTableBGMVolume");
static_assert(offsetof(FJackDataTableBGMVolume, Title) == 0x000008, "Member 'FJackDataTableBGMVolume::Title' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMVolume, JP3DGold) == 0x000018, "Member 'FJackDataTableBGMVolume::JP3DGold' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMVolume, JP3DOrche) == 0x00001C, "Member 'FJackDataTableBGMVolume::JP3DOrche' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMVolume, NE3DGold) == 0x000020, "Member 'FJackDataTableBGMVolume::NE3DGold' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMVolume, NE3DOrche) == 0x000024, "Member 'FJackDataTableBGMVolume::NE3DOrche' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGMVolume, bNoOrche) == 0x000028, "Member 'FJackDataTableBGMVolume::bNoOrche' has a wrong offset!");

// ScriptStruct JackGame.JackUMGTokugiPanelAdjoinData
// 0x0008 (0x0008 - 0x0000)
struct FJackUMGTokugiPanelAdjoinData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGTokugiPanelAdjoinData) == 0x000001, "Wrong alignment on FJackUMGTokugiPanelAdjoinData");
static_assert(sizeof(FJackUMGTokugiPanelAdjoinData) == 0x000008, "Wrong size on FJackUMGTokugiPanelAdjoinData");

// ScriptStruct JackGame.JackUMGTokugiPanelAnimData
// 0x0040 (0x0040 - 0x0000)
struct FJackUMGTokugiPanelAnimData final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	EJackTokugiPanelAnimCategory                  AnimCategory;                                      // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackTokugiPanelAnimFlag                      AnimFlag;                                          // 0x0005(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGTokugiPanelData*                PanelData;                                         // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJackUMGTokugiPanelSkillLineData*       SkillLineData;                                     // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJackUMGTokugiPanelAdjoinData          AdjoinData;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 AnimIndexList;                                     // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ChangeCanOpenState;                                // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaitTime;                                          // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackTokugiPanelMessageAnimFlag               MessageType;                                       // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGTokugiPanelAnimData) == 0x000008, "Wrong alignment on FJackUMGTokugiPanelAnimData");
static_assert(sizeof(FJackUMGTokugiPanelAnimData) == 0x000040, "Wrong size on FJackUMGTokugiPanelAnimData");
static_assert(offsetof(FJackUMGTokugiPanelAnimData, AnimCategory) == 0x000004, "Member 'FJackUMGTokugiPanelAnimData::AnimCategory' has a wrong offset!");
static_assert(offsetof(FJackUMGTokugiPanelAnimData, AnimFlag) == 0x000005, "Member 'FJackUMGTokugiPanelAnimData::AnimFlag' has a wrong offset!");
static_assert(offsetof(FJackUMGTokugiPanelAnimData, PanelData) == 0x000008, "Member 'FJackUMGTokugiPanelAnimData::PanelData' has a wrong offset!");
static_assert(offsetof(FJackUMGTokugiPanelAnimData, SkillLineData) == 0x000010, "Member 'FJackUMGTokugiPanelAnimData::SkillLineData' has a wrong offset!");
static_assert(offsetof(FJackUMGTokugiPanelAnimData, AdjoinData) == 0x000018, "Member 'FJackUMGTokugiPanelAnimData::AdjoinData' has a wrong offset!");
static_assert(offsetof(FJackUMGTokugiPanelAnimData, AnimIndexList) == 0x000020, "Member 'FJackUMGTokugiPanelAnimData::AnimIndexList' has a wrong offset!");
static_assert(offsetof(FJackUMGTokugiPanelAnimData, ChangeCanOpenState) == 0x000030, "Member 'FJackUMGTokugiPanelAnimData::ChangeCanOpenState' has a wrong offset!");
static_assert(offsetof(FJackUMGTokugiPanelAnimData, WaitTime) == 0x000034, "Member 'FJackUMGTokugiPanelAnimData::WaitTime' has a wrong offset!");
static_assert(offsetof(FJackUMGTokugiPanelAnimData, MessageType) == 0x000038, "Member 'FJackUMGTokugiPanelAnimData::MessageType' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableBGM
// 0x0078 (0x0080 - 0x0008)
struct FJackDataTableBGM final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USoundBase>              DayBGM;                                            // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              NightBGM;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              OrcheDayBGM;                                       // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              OrcheNightBGM;                                     // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBGMControl                               DayBGMControl;                                     // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBGMControl                               NightBGMControl;                                   // 0x0069(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBGMControl                               BeginCS_BGMControl;                                // 0x006A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackBGMControl                               EndCS_BGMControl;                                  // 0x006B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NextSceneBGMID;                                    // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeoutTimePreviousBGM;                            // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableBGM) == 0x000008, "Wrong alignment on FJackDataTableBGM");
static_assert(sizeof(FJackDataTableBGM) == 0x000080, "Wrong size on FJackDataTableBGM");
static_assert(offsetof(FJackDataTableBGM, DayBGM) == 0x000008, "Member 'FJackDataTableBGM::DayBGM' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGM, NightBGM) == 0x000020, "Member 'FJackDataTableBGM::NightBGM' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGM, OrcheDayBGM) == 0x000038, "Member 'FJackDataTableBGM::OrcheDayBGM' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGM, OrcheNightBGM) == 0x000050, "Member 'FJackDataTableBGM::OrcheNightBGM' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGM, DayBGMControl) == 0x000068, "Member 'FJackDataTableBGM::DayBGMControl' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGM, NightBGMControl) == 0x000069, "Member 'FJackDataTableBGM::NightBGMControl' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGM, BeginCS_BGMControl) == 0x00006A, "Member 'FJackDataTableBGM::BeginCS_BGMControl' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGM, EndCS_BGMControl) == 0x00006B, "Member 'FJackDataTableBGM::EndCS_BGMControl' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGM, NextSceneBGMID) == 0x000070, "Member 'FJackDataTableBGM::NextSceneBGMID' has a wrong offset!");
static_assert(offsetof(FJackDataTableBGM, FadeoutTimePreviousBGM) == 0x000078, "Member 'FJackDataTableBGM::FadeoutTimePreviousBGM' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableTemporaryMaterialCoordinate
// 0x0060 (0x0068 - 0x0008)
struct FJackDataTableTemporaryMaterialCoordinate final : public FTableRowBase
{
public:
	float                                         EvilOriginalColorFalloff;                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvilOriginalColorScale;                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvilMaterialLightScale;                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvilRimColorR;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvilRimColorG;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvilRimColorB;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvilRimColorScale;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvilRimFalloff;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvilOutlineColorR;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvilOutlineColorG;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvilOutlineColorB;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvilOutlineColorScale;                             // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvilColorR;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvilColorG;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvilColorB;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvilColorScale;                                    // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvilMapScale;                                      // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x004C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEvilOriginalColorFalloff;                         // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEvilOriginalColorScale;                           // 0x0055(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEvilMaterialLightScale;                           // 0x0056(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEvilRimColorR;                                    // 0x0057(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEvilRimColorG;                                    // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEvilRimColorB;                                    // 0x0059(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEvilRimColorScale;                                // 0x005A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEvilRimFalloff;                                   // 0x005B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEvilOutlineColorR;                                // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEvilOutlineColorG;                                // 0x005D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEvilOutlineColorB;                                // 0x005E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEvilOutlineColorScale;                            // 0x005F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEvilColorR;                                       // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEvilColorG;                                       // 0x0061(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEvilColorB;                                       // 0x0062(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEvilColorScale;                                   // 0x0063(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEvilMapScale;                                     // 0x0064(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableTemporaryMaterialCoordinate) == 0x000008, "Wrong alignment on FJackDataTableTemporaryMaterialCoordinate");
static_assert(sizeof(FJackDataTableTemporaryMaterialCoordinate) == 0x000068, "Wrong size on FJackDataTableTemporaryMaterialCoordinate");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, EvilOriginalColorFalloff) == 0x000008, "Member 'FJackDataTableTemporaryMaterialCoordinate::EvilOriginalColorFalloff' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, EvilOriginalColorScale) == 0x00000C, "Member 'FJackDataTableTemporaryMaterialCoordinate::EvilOriginalColorScale' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, EvilMaterialLightScale) == 0x000010, "Member 'FJackDataTableTemporaryMaterialCoordinate::EvilMaterialLightScale' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, EvilRimColorR) == 0x000014, "Member 'FJackDataTableTemporaryMaterialCoordinate::EvilRimColorR' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, EvilRimColorG) == 0x000018, "Member 'FJackDataTableTemporaryMaterialCoordinate::EvilRimColorG' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, EvilRimColorB) == 0x00001C, "Member 'FJackDataTableTemporaryMaterialCoordinate::EvilRimColorB' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, EvilRimColorScale) == 0x000020, "Member 'FJackDataTableTemporaryMaterialCoordinate::EvilRimColorScale' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, EvilRimFalloff) == 0x000024, "Member 'FJackDataTableTemporaryMaterialCoordinate::EvilRimFalloff' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, EvilOutlineColorR) == 0x000028, "Member 'FJackDataTableTemporaryMaterialCoordinate::EvilOutlineColorR' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, EvilOutlineColorG) == 0x00002C, "Member 'FJackDataTableTemporaryMaterialCoordinate::EvilOutlineColorG' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, EvilOutlineColorB) == 0x000030, "Member 'FJackDataTableTemporaryMaterialCoordinate::EvilOutlineColorB' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, EvilOutlineColorScale) == 0x000034, "Member 'FJackDataTableTemporaryMaterialCoordinate::EvilOutlineColorScale' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, EvilColorR) == 0x000038, "Member 'FJackDataTableTemporaryMaterialCoordinate::EvilColorR' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, EvilColorG) == 0x00003C, "Member 'FJackDataTableTemporaryMaterialCoordinate::EvilColorG' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, EvilColorB) == 0x000040, "Member 'FJackDataTableTemporaryMaterialCoordinate::EvilColorB' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, EvilColorScale) == 0x000044, "Member 'FJackDataTableTemporaryMaterialCoordinate::EvilColorScale' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, EvilMapScale) == 0x000048, "Member 'FJackDataTableTemporaryMaterialCoordinate::EvilMapScale' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, FadeInTime) == 0x00004C, "Member 'FJackDataTableTemporaryMaterialCoordinate::FadeInTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, FadeOutTime) == 0x000050, "Member 'FJackDataTableTemporaryMaterialCoordinate::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, bEvilOriginalColorFalloff) == 0x000054, "Member 'FJackDataTableTemporaryMaterialCoordinate::bEvilOriginalColorFalloff' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, bEvilOriginalColorScale) == 0x000055, "Member 'FJackDataTableTemporaryMaterialCoordinate::bEvilOriginalColorScale' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, bEvilMaterialLightScale) == 0x000056, "Member 'FJackDataTableTemporaryMaterialCoordinate::bEvilMaterialLightScale' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, bEvilRimColorR) == 0x000057, "Member 'FJackDataTableTemporaryMaterialCoordinate::bEvilRimColorR' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, bEvilRimColorG) == 0x000058, "Member 'FJackDataTableTemporaryMaterialCoordinate::bEvilRimColorG' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, bEvilRimColorB) == 0x000059, "Member 'FJackDataTableTemporaryMaterialCoordinate::bEvilRimColorB' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, bEvilRimColorScale) == 0x00005A, "Member 'FJackDataTableTemporaryMaterialCoordinate::bEvilRimColorScale' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, bEvilRimFalloff) == 0x00005B, "Member 'FJackDataTableTemporaryMaterialCoordinate::bEvilRimFalloff' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, bEvilOutlineColorR) == 0x00005C, "Member 'FJackDataTableTemporaryMaterialCoordinate::bEvilOutlineColorR' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, bEvilOutlineColorG) == 0x00005D, "Member 'FJackDataTableTemporaryMaterialCoordinate::bEvilOutlineColorG' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, bEvilOutlineColorB) == 0x00005E, "Member 'FJackDataTableTemporaryMaterialCoordinate::bEvilOutlineColorB' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, bEvilOutlineColorScale) == 0x00005F, "Member 'FJackDataTableTemporaryMaterialCoordinate::bEvilOutlineColorScale' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, bEvilColorR) == 0x000060, "Member 'FJackDataTableTemporaryMaterialCoordinate::bEvilColorR' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, bEvilColorG) == 0x000061, "Member 'FJackDataTableTemporaryMaterialCoordinate::bEvilColorG' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, bEvilColorB) == 0x000062, "Member 'FJackDataTableTemporaryMaterialCoordinate::bEvilColorB' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, bEvilColorScale) == 0x000063, "Member 'FJackDataTableTemporaryMaterialCoordinate::bEvilColorScale' has a wrong offset!");
static_assert(offsetof(FJackDataTableTemporaryMaterialCoordinate, bEvilMapScale) == 0x000064, "Member 'FJackDataTableTemporaryMaterialCoordinate::bEvilMapScale' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_KaziLvTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_KaziLvTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_KaziLvTable) == 0x000008, "Wrong alignment on FJackLDT_KaziLvTable");
static_assert(sizeof(FJackLDT_KaziLvTable) == 0x000010, "Wrong size on FJackLDT_KaziLvTable");

// ScriptStruct JackGame.JackDataTableTenseiScenarioFlags
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableTenseiScenarioFlags final : public FTableRowBase
{
public:
	int32                                         ScenarioNo;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ScenarioFlags;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableTenseiScenarioFlags) == 0x000008, "Wrong alignment on FJackDataTableTenseiScenarioFlags");
static_assert(sizeof(FJackDataTableTenseiScenarioFlags) == 0x000020, "Wrong size on FJackDataTableTenseiScenarioFlags");
static_assert(offsetof(FJackDataTableTenseiScenarioFlags, ScenarioNo) == 0x000008, "Member 'FJackDataTableTenseiScenarioFlags::ScenarioNo' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiScenarioFlags, ScenarioFlags) == 0x000010, "Member 'FJackDataTableTenseiScenarioFlags::ScenarioFlags' has a wrong offset!");

// ScriptStruct JackGame.JackLevelUpTableDict
// 0x0010 (0x0010 - 0x0000)
struct FJackLevelUpTableDict final
{
public:
	EJackCharacter                                Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             DataTable;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackLevelUpTableDict) == 0x000008, "Wrong alignment on FJackLevelUpTableDict");
static_assert(sizeof(FJackLevelUpTableDict) == 0x000010, "Wrong size on FJackLevelUpTableDict");
static_assert(offsetof(FJackLevelUpTableDict, Type) == 0x000000, "Member 'FJackLevelUpTableDict::Type' has a wrong offset!");
static_assert(offsetof(FJackLevelUpTableDict, DataTable) == 0x000008, "Member 'FJackLevelUpTableDict::DataTable' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_OddEffect
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_OddEffect final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_OddEffect) == 0x000008, "Wrong alignment on FJackLDT_OddEffect");
static_assert(sizeof(FJackLDT_OddEffect) == 0x000010, "Wrong size on FJackLDT_OddEffect");

// ScriptStruct JackGame.JackLDT_RtEx_P001_Skirt_low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_P001_Skirt_low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_P001_Skirt_low) == 0x000008, "Wrong alignment on FJackLDT_RtEx_P001_Skirt_low");
static_assert(sizeof(FJackLDT_RtEx_P001_Skirt_low) == 0x000010, "Wrong size on FJackLDT_RtEx_P001_Skirt_low");

// ScriptStruct JackGame.JackLDT_ResidentStaticMesh
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ResidentStaticMesh final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ResidentStaticMesh) == 0x000008, "Wrong alignment on FJackLDT_ResidentStaticMesh");
static_assert(sizeof(FJackLDT_ResidentStaticMesh) == 0x000010, "Wrong size on FJackLDT_ResidentStaticMesh");

// ScriptStruct JackGame.JackDataTableTenseiSelect2D
// 0x0060 (0x0068 - 0x0008)
struct FJackDataTableTenseiSelect2D final : public FTableRowBase
{
public:
	uint8                                         ScenarioGroup;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ScenarioTitleNameId;                               // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProgressNo;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapId;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ScenarioJump;                                      // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RiremitoPointId;                                   // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EmbarkationMapId;                                  // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EmbarkationLocatorId;                              // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EmbarkationAnchorageId;                            // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackTenseiRespawnData2D               RespawnData;                                       // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         PrevScenarioId;                                    // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PrevScenarioFlag;                                  // 0x003D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PrevCutSceneId;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackTenseiDisplayCondition2D>  DisplayCondition;                                  // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 ScenarioDescriptionId;                             // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableTenseiSelect2D) == 0x000008, "Wrong alignment on FJackDataTableTenseiSelect2D");
static_assert(sizeof(FJackDataTableTenseiSelect2D) == 0x000068, "Wrong size on FJackDataTableTenseiSelect2D");
static_assert(offsetof(FJackDataTableTenseiSelect2D, ScenarioGroup) == 0x000008, "Member 'FJackDataTableTenseiSelect2D::ScenarioGroup' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiSelect2D, ScenarioTitleNameId) == 0x000010, "Member 'FJackDataTableTenseiSelect2D::ScenarioTitleNameId' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiSelect2D, ProgressNo) == 0x000020, "Member 'FJackDataTableTenseiSelect2D::ProgressNo' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiSelect2D, MapId) == 0x000024, "Member 'FJackDataTableTenseiSelect2D::MapId' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiSelect2D, ScenarioJump) == 0x000028, "Member 'FJackDataTableTenseiSelect2D::ScenarioJump' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiSelect2D, RiremitoPointId) == 0x000029, "Member 'FJackDataTableTenseiSelect2D::RiremitoPointId' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiSelect2D, EmbarkationMapId) == 0x00002C, "Member 'FJackDataTableTenseiSelect2D::EmbarkationMapId' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiSelect2D, EmbarkationLocatorId) == 0x000030, "Member 'FJackDataTableTenseiSelect2D::EmbarkationLocatorId' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiSelect2D, EmbarkationAnchorageId) == 0x000031, "Member 'FJackDataTableTenseiSelect2D::EmbarkationAnchorageId' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiSelect2D, RespawnData) == 0x000034, "Member 'FJackDataTableTenseiSelect2D::RespawnData' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiSelect2D, PrevScenarioId) == 0x00003C, "Member 'FJackDataTableTenseiSelect2D::PrevScenarioId' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiSelect2D, PrevScenarioFlag) == 0x00003D, "Member 'FJackDataTableTenseiSelect2D::PrevScenarioFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiSelect2D, PrevCutSceneId) == 0x000040, "Member 'FJackDataTableTenseiSelect2D::PrevCutSceneId' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiSelect2D, DisplayCondition) == 0x000048, "Member 'FJackDataTableTenseiSelect2D::DisplayCondition' has a wrong offset!");
static_assert(offsetof(FJackDataTableTenseiSelect2D, ScenarioDescriptionId) == 0x000058, "Member 'FJackDataTableTenseiSelect2D::ScenarioDescriptionId' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableDebugLongestValue
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableDebugLongestValue final : public FTableRowBase
{
public:
	int32                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackTagCategory                              TagCategory;                                       // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableDebugLongestValue) == 0x000008, "Wrong alignment on FJackDataTableDebugLongestValue");
static_assert(sizeof(FJackDataTableDebugLongestValue) == 0x000010, "Wrong size on FJackDataTableDebugLongestValue");
static_assert(offsetof(FJackDataTableDebugLongestValue, Value) == 0x000008, "Member 'FJackDataTableDebugLongestValue::Value' has a wrong offset!");
static_assert(offsetof(FJackDataTableDebugLongestValue, TagCategory) == 0x00000C, "Member 'FJackDataTableDebugLongestValue::TagCategory' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_F13
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_F13 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_F13) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_F13");
static_assert(sizeof(FJackLDT_MonsterDeploy_F13) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_F13");

// ScriptStruct JackGame.JackLDT_MonsterPhysicalProperty
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterPhysicalProperty final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterPhysicalProperty) == 0x000008, "Wrong alignment on FJackLDT_MonsterPhysicalProperty");
static_assert(sizeof(FJackLDT_MonsterPhysicalProperty) == 0x000010, "Wrong size on FJackLDT_MonsterPhysicalProperty");

// ScriptStruct JackGame.JackDataTableDebugLongestArticleInfo
// 0x0090 (0x0098 - 0x0008)
struct FJackDataTableDebugLongestArticleInfo final : public FTableRowBase
{
public:
	struct FJackArticleInfo                       ArticleInfo;                                       // 0x0008(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EJackTagCategory                              TagCategory;                                       // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableDebugLongestArticleInfo) == 0x000008, "Wrong alignment on FJackDataTableDebugLongestArticleInfo");
static_assert(sizeof(FJackDataTableDebugLongestArticleInfo) == 0x000098, "Wrong size on FJackDataTableDebugLongestArticleInfo");
static_assert(offsetof(FJackDataTableDebugLongestArticleInfo, ArticleInfo) == 0x000008, "Member 'FJackDataTableDebugLongestArticleInfo::ArticleInfo' has a wrong offset!");
static_assert(offsetof(FJackDataTableDebugLongestArticleInfo, TagCategory) == 0x000090, "Member 'FJackDataTableDebugLongestArticleInfo::TagCategory' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableFrenchCheckVowel
// 0x0030 (0x0038 - 0x0008)
struct FJackDataTableFrenchCheckVowel final : public FTableRowBase
{
public:
	class FString                                 UpStr;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LowStr;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CheckStr;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableFrenchCheckVowel) == 0x000008, "Wrong alignment on FJackDataTableFrenchCheckVowel");
static_assert(sizeof(FJackDataTableFrenchCheckVowel) == 0x000038, "Wrong size on FJackDataTableFrenchCheckVowel");
static_assert(offsetof(FJackDataTableFrenchCheckVowel, UpStr) == 0x000008, "Member 'FJackDataTableFrenchCheckVowel::UpStr' has a wrong offset!");
static_assert(offsetof(FJackDataTableFrenchCheckVowel, LowStr) == 0x000018, "Member 'FJackDataTableFrenchCheckVowel::LowStr' has a wrong offset!");
static_assert(offsetof(FJackDataTableFrenchCheckVowel, CheckStr) == 0x000028, "Member 'FJackDataTableFrenchCheckVowel::CheckStr' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableTagInfo
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableTagInfo final : public FTableRowBase
{
public:
	class FString                                 TagName;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackTagReferType                             Refer;                                             // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackTagCategory                              Category;                                          // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableTagInfo) == 0x000008, "Wrong alignment on FJackDataTableTagInfo");
static_assert(sizeof(FJackDataTableTagInfo) == 0x000020, "Wrong size on FJackDataTableTagInfo");
static_assert(offsetof(FJackDataTableTagInfo, TagName) == 0x000008, "Member 'FJackDataTableTagInfo::TagName' has a wrong offset!");
static_assert(offsetof(FJackDataTableTagInfo, Refer) == 0x000018, "Member 'FJackDataTableTagInfo::Refer' has a wrong offset!");
static_assert(offsetof(FJackDataTableTagInfo, Category) == 0x000019, "Member 'FJackDataTableTagInfo::Category' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_P004_Up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_P004_Up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_P004_Up) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_P004_Up");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_P004_Up) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_P004_Up");

// ScriptStruct JackGame.JackDataTableMacroInfo
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableMacroInfo final : public FTableRowBase
{
public:
	class FString                                 DefName;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackProcessType                              Process;                                           // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackHangType                                 Hang;                                              // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackTagReferType                             Refer;                                             // 0x001A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ArgumentNum;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachTagName;                                    // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableMacroInfo) == 0x000008, "Wrong alignment on FJackDataTableMacroInfo");
static_assert(sizeof(FJackDataTableMacroInfo) == 0x000028, "Wrong size on FJackDataTableMacroInfo");
static_assert(offsetof(FJackDataTableMacroInfo, DefName) == 0x000008, "Member 'FJackDataTableMacroInfo::DefName' has a wrong offset!");
static_assert(offsetof(FJackDataTableMacroInfo, Process) == 0x000018, "Member 'FJackDataTableMacroInfo::Process' has a wrong offset!");
static_assert(offsetof(FJackDataTableMacroInfo, Hang) == 0x000019, "Member 'FJackDataTableMacroInfo::Hang' has a wrong offset!");
static_assert(offsetof(FJackDataTableMacroInfo, Refer) == 0x00001A, "Member 'FJackDataTableMacroInfo::Refer' has a wrong offset!");
static_assert(offsetof(FJackDataTableMacroInfo, ArgumentNum) == 0x00001C, "Member 'FJackDataTableMacroInfo::ArgumentNum' has a wrong offset!");
static_assert(offsetof(FJackDataTableMacroInfo, bAttachTagName) == 0x000020, "Member 'FJackDataTableMacroInfo::bAttachTagName' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_TextDataBattle
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextDataBattle final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextDataBattle) == 0x000008, "Wrong alignment on FJackLDT_TextDataBattle");
static_assert(sizeof(FJackLDT_TextDataBattle) == 0x000010, "Wrong size on FJackLDT_TextDataBattle");

// ScriptStruct JackGame.JackDataTableTokugiPanelInfo
// 0x0078 (0x0080 - 0x0008)
struct FJackDataTableTokugiPanelInfo final : public FTableRowBase
{
public:
	EJackCharacter                                TargetCharacter;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Order;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackTokugiType                               Type;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ID;                                                // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ConfirmMessage;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LearnedMessage;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SingleLearnedMessage;                              // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConsumePoint;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PanelPos;                                          // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockPanel;                                        // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtariPanel;                                       // 0x0045(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFuuinPanel;                                       // 0x0046(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47[0x1];                                       // 0x0047(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IconType;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EJackSkillLine>                        SkillLineTypeList;                                 // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EJackItem_Classification                      ConfirmWeaponType;                                 // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EJackTokugiPanelScenario>              ScenarioFlagList;                                  // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         ResetAnimTiming;                                   // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TripleTokugiPanelNo;                               // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableTokugiPanelInfo) == 0x000008, "Wrong alignment on FJackDataTableTokugiPanelInfo");
static_assert(sizeof(FJackDataTableTokugiPanelInfo) == 0x000080, "Wrong size on FJackDataTableTokugiPanelInfo");
static_assert(offsetof(FJackDataTableTokugiPanelInfo, TargetCharacter) == 0x000008, "Member 'FJackDataTableTokugiPanelInfo::TargetCharacter' has a wrong offset!");
static_assert(offsetof(FJackDataTableTokugiPanelInfo, Order) == 0x00000C, "Member 'FJackDataTableTokugiPanelInfo::Order' has a wrong offset!");
static_assert(offsetof(FJackDataTableTokugiPanelInfo, Type) == 0x000010, "Member 'FJackDataTableTokugiPanelInfo::Type' has a wrong offset!");
static_assert(offsetof(FJackDataTableTokugiPanelInfo, ID) == 0x000018, "Member 'FJackDataTableTokugiPanelInfo::ID' has a wrong offset!");
static_assert(offsetof(FJackDataTableTokugiPanelInfo, ConfirmMessage) == 0x000020, "Member 'FJackDataTableTokugiPanelInfo::ConfirmMessage' has a wrong offset!");
static_assert(offsetof(FJackDataTableTokugiPanelInfo, LearnedMessage) == 0x000028, "Member 'FJackDataTableTokugiPanelInfo::LearnedMessage' has a wrong offset!");
static_assert(offsetof(FJackDataTableTokugiPanelInfo, SingleLearnedMessage) == 0x000030, "Member 'FJackDataTableTokugiPanelInfo::SingleLearnedMessage' has a wrong offset!");
static_assert(offsetof(FJackDataTableTokugiPanelInfo, ConsumePoint) == 0x000038, "Member 'FJackDataTableTokugiPanelInfo::ConsumePoint' has a wrong offset!");
static_assert(offsetof(FJackDataTableTokugiPanelInfo, PanelPos) == 0x00003C, "Member 'FJackDataTableTokugiPanelInfo::PanelPos' has a wrong offset!");
static_assert(offsetof(FJackDataTableTokugiPanelInfo, bLockPanel) == 0x000044, "Member 'FJackDataTableTokugiPanelInfo::bLockPanel' has a wrong offset!");
static_assert(offsetof(FJackDataTableTokugiPanelInfo, bAtariPanel) == 0x000045, "Member 'FJackDataTableTokugiPanelInfo::bAtariPanel' has a wrong offset!");
static_assert(offsetof(FJackDataTableTokugiPanelInfo, bFuuinPanel) == 0x000046, "Member 'FJackDataTableTokugiPanelInfo::bFuuinPanel' has a wrong offset!");
static_assert(offsetof(FJackDataTableTokugiPanelInfo, IconType) == 0x000048, "Member 'FJackDataTableTokugiPanelInfo::IconType' has a wrong offset!");
static_assert(offsetof(FJackDataTableTokugiPanelInfo, SkillLineTypeList) == 0x000050, "Member 'FJackDataTableTokugiPanelInfo::SkillLineTypeList' has a wrong offset!");
static_assert(offsetof(FJackDataTableTokugiPanelInfo, ConfirmWeaponType) == 0x000060, "Member 'FJackDataTableTokugiPanelInfo::ConfirmWeaponType' has a wrong offset!");
static_assert(offsetof(FJackDataTableTokugiPanelInfo, ScenarioFlagList) == 0x000068, "Member 'FJackDataTableTokugiPanelInfo::ScenarioFlagList' has a wrong offset!");
static_assert(offsetof(FJackDataTableTokugiPanelInfo, ResetAnimTiming) == 0x000078, "Member 'FJackDataTableTokugiPanelInfo::ResetAnimTiming' has a wrong offset!");
static_assert(offsetof(FJackDataTableTokugiPanelInfo, TripleTokugiPanelNo) == 0x00007C, "Member 'FJackDataTableTokugiPanelInfo::TripleTokugiPanelNo' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Other_Up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Other_Up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Other_Up) == 0x000008, "Wrong alignment on FJackLDT_Other_Up");
static_assert(sizeof(FJackLDT_Other_Up) == 0x000010, "Wrong size on FJackLDT_Other_Up");

// ScriptStruct JackGame.JackLDT_OverrideTranslationText
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_OverrideTranslationText final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_OverrideTranslationText) == 0x000008, "Wrong alignment on FJackLDT_OverrideTranslationText");
static_assert(sizeof(FJackLDT_OverrideTranslationText) == 0x000010, "Wrong size on FJackLDT_OverrideTranslationText");

// ScriptStruct JackGame.JackDataTableUIActionFieldText
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableUIActionFieldText final : public FTableRowBase
{
public:
	TArray<struct FJackActionFieldTextInfo>       TextInfoList;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableUIActionFieldText) == 0x000008, "Wrong alignment on FJackDataTableUIActionFieldText");
static_assert(sizeof(FJackDataTableUIActionFieldText) == 0x000018, "Wrong size on FJackDataTableUIActionFieldText");
static_assert(offsetof(FJackDataTableUIActionFieldText, TextInfoList) == 0x000008, "Member 'FJackDataTableUIActionFieldText::TextInfoList' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_TemporaryMaterialCoordinate
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TemporaryMaterialCoordinate final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TemporaryMaterialCoordinate) == 0x000008, "Wrong alignment on FJackLDT_TemporaryMaterialCoordinate");
static_assert(sizeof(FJackLDT_TemporaryMaterialCoordinate) == 0x000010, "Wrong size on FJackLDT_TemporaryMaterialCoordinate");

// ScriptStruct JackGame.JackDataTableUIFaceIcon
// 0x0098 (0x00A0 - 0x0008)
struct FJackDataTableUIFaceIcon final : public FTableRowBase
{
public:
	EJackCharacter                                CharType;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                AliveTexture;                                      // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                DeadTexture;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                ZoneTexture;                                       // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                BustTexture;                                       // 0x0058(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                EyeTexture;                                        // 0x0070(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                FaceTexture;                                       // 0x0088(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableUIFaceIcon) == 0x000008, "Wrong alignment on FJackDataTableUIFaceIcon");
static_assert(sizeof(FJackDataTableUIFaceIcon) == 0x0000A0, "Wrong size on FJackDataTableUIFaceIcon");
static_assert(offsetof(FJackDataTableUIFaceIcon, CharType) == 0x000008, "Member 'FJackDataTableUIFaceIcon::CharType' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIFaceIcon, AliveTexture) == 0x000010, "Member 'FJackDataTableUIFaceIcon::AliveTexture' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIFaceIcon, DeadTexture) == 0x000028, "Member 'FJackDataTableUIFaceIcon::DeadTexture' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIFaceIcon, ZoneTexture) == 0x000040, "Member 'FJackDataTableUIFaceIcon::ZoneTexture' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIFaceIcon, BustTexture) == 0x000058, "Member 'FJackDataTableUIFaceIcon::BustTexture' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIFaceIcon, EyeTexture) == 0x000070, "Member 'FJackDataTableUIFaceIcon::EyeTexture' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIFaceIcon, FaceTexture) == 0x000088, "Member 'FJackDataTableUIFaceIcon::FaceTexture' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Facial_M506
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Facial_M506 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Facial_M506) == 0x000008, "Wrong alignment on FJackLDT_Facial_M506");
static_assert(sizeof(FJackLDT_Facial_M506) == 0x000010, "Wrong size on FJackLDT_Facial_M506");

// ScriptStruct JackGame.JackDataTableUIFukidasiFaceIcon
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableUIFukidasiFaceIcon final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture>                FaceIconAsset;                                     // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableUIFukidasiFaceIcon) == 0x000008, "Wrong alignment on FJackDataTableUIFukidasiFaceIcon");
static_assert(sizeof(FJackDataTableUIFukidasiFaceIcon) == 0x000020, "Wrong size on FJackDataTableUIFukidasiFaceIcon");
static_assert(offsetof(FJackDataTableUIFukidasiFaceIcon, FaceIconAsset) == 0x000008, "Member 'FJackDataTableUIFukidasiFaceIcon::FaceIconAsset' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Facial_M068
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Facial_M068 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Facial_M068) == 0x000008, "Wrong alignment on FJackLDT_Facial_M068");
static_assert(sizeof(FJackLDT_Facial_M068) == 0x000010, "Wrong size on FJackLDT_Facial_M068");

// ScriptStruct JackGame.JackMeosiSlotAttack
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackMeosiSlotAttack final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotAttackClass                     Class;                                             // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotAttackEffect                    Effect;                                            // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TextID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDeadly;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMeosiSlotAttack) == 0x000008, "Wrong alignment on FJackMeosiSlotAttack");
static_assert(sizeof(FJackMeosiSlotAttack) == 0x000018, "Wrong size on FJackMeosiSlotAttack");
static_assert(offsetof(FJackMeosiSlotAttack, Damage) == 0x000000, "Member 'FJackMeosiSlotAttack::Damage' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotAttack, Class) == 0x000004, "Member 'FJackMeosiSlotAttack::Class' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotAttack, Effect) == 0x000005, "Member 'FJackMeosiSlotAttack::Effect' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotAttack, TextID) == 0x000008, "Member 'FJackMeosiSlotAttack::TextID' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotAttack, bIsDeadly) == 0x000010, "Member 'FJackMeosiSlotAttack::bIsDeadly' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableUIMapInfo
// 0x00C0 (0x00C8 - 0x0008)
struct FJackDataTableUIMapInfo final : public FTableRowBase
{
public:
	class FName                                   MapId;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentVolumeID;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMiniMapEnabled;                                   // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJourney;                                          // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearFootmark;                                    // 0x001A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMapChangeEffect;                               // 0x001B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMapPCMarkerDisplayMethod                 PCMarkerDisplayMethod;                             // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMapFieldType                             FieldType;                                         // 0x001D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackFloorLevel                               FloorLevel;                                        // 0x001E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackFloorArea                                FloorArea;                                         // 0x001F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackFloorGroup                               FloorGroup;                                        // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MapOpenFlag;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WorldMapTitleTextID;                               // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WorldMapTitleTextOpenFlag;                         // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MLocationTextID;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MLocationTextOpenFlag;                             // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SLocationTextID;                                   // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SLocationTextOpenFlag;                             // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MiniMapDisplayDiameter;                            // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldMapZoomFactorMax;                             // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   MapTextWBP;                                        // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              MapOpenTexture;                                    // 0x0080(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              MapMaskTexture;                                    // 0x0098(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              MiniMapTexture;                                    // 0x00B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableUIMapInfo) == 0x000008, "Wrong alignment on FJackDataTableUIMapInfo");
static_assert(sizeof(FJackDataTableUIMapInfo) == 0x0000C8, "Wrong size on FJackDataTableUIMapInfo");
static_assert(offsetof(FJackDataTableUIMapInfo, MapId) == 0x000008, "Member 'FJackDataTableUIMapInfo::MapId' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapInfo, ParentVolumeID) == 0x000010, "Member 'FJackDataTableUIMapInfo::ParentVolumeID' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapInfo, bMiniMapEnabled) == 0x000018, "Member 'FJackDataTableUIMapInfo::bMiniMapEnabled' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapInfo, bJourney) == 0x000019, "Member 'FJackDataTableUIMapInfo::bJourney' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapInfo, bClearFootmark) == 0x00001A, "Member 'FJackDataTableUIMapInfo::bClearFootmark' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapInfo, bUseMapChangeEffect) == 0x00001B, "Member 'FJackDataTableUIMapInfo::bUseMapChangeEffect' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapInfo, PCMarkerDisplayMethod) == 0x00001C, "Member 'FJackDataTableUIMapInfo::PCMarkerDisplayMethod' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapInfo, FieldType) == 0x00001D, "Member 'FJackDataTableUIMapInfo::FieldType' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapInfo, FloorLevel) == 0x00001E, "Member 'FJackDataTableUIMapInfo::FloorLevel' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapInfo, FloorArea) == 0x00001F, "Member 'FJackDataTableUIMapInfo::FloorArea' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapInfo, FloorGroup) == 0x000020, "Member 'FJackDataTableUIMapInfo::FloorGroup' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapInfo, MapOpenFlag) == 0x000028, "Member 'FJackDataTableUIMapInfo::MapOpenFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapInfo, WorldMapTitleTextID) == 0x000030, "Member 'FJackDataTableUIMapInfo::WorldMapTitleTextID' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapInfo, WorldMapTitleTextOpenFlag) == 0x000038, "Member 'FJackDataTableUIMapInfo::WorldMapTitleTextOpenFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapInfo, MLocationTextID) == 0x000040, "Member 'FJackDataTableUIMapInfo::MLocationTextID' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapInfo, MLocationTextOpenFlag) == 0x000048, "Member 'FJackDataTableUIMapInfo::MLocationTextOpenFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapInfo, SLocationTextID) == 0x000050, "Member 'FJackDataTableUIMapInfo::SLocationTextID' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapInfo, SLocationTextOpenFlag) == 0x000058, "Member 'FJackDataTableUIMapInfo::SLocationTextOpenFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapInfo, MiniMapDisplayDiameter) == 0x000060, "Member 'FJackDataTableUIMapInfo::MiniMapDisplayDiameter' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapInfo, WorldMapZoomFactorMax) == 0x000064, "Member 'FJackDataTableUIMapInfo::WorldMapZoomFactorMax' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapInfo, MapTextWBP) == 0x000068, "Member 'FJackDataTableUIMapInfo::MapTextWBP' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapInfo, MapOpenTexture) == 0x000080, "Member 'FJackDataTableUIMapInfo::MapOpenTexture' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapInfo, MapMaskTexture) == 0x000098, "Member 'FJackDataTableUIMapInfo::MapMaskTexture' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapInfo, MiniMapTexture) == 0x0000B0, "Member 'FJackDataTableUIMapInfo::MiniMapTexture' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_YochiList
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_YochiList final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_YochiList) == 0x000008, "Wrong alignment on FJackLDT_YochiList");
static_assert(sizeof(FJackLDT_YochiList) == 0x000010, "Wrong size on FJackLDT_YochiList");

// ScriptStruct JackGame.JackDataTableUIMapTextConfig
// 0x0030 (0x0038 - 0x0008)
struct FJackDataTableUIMapTextConfig final : public FTableRowBase
{
public:
	class FName                                   MapId;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LocationNameTextID;                                // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OpenMapTextCondition_VisitFlag;                    // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackGameFlagCategory                         OpenMapTextCondition_FlagCategory;                 // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OpenMapTextCondition_FlagName;                     // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackLocationNameDisplayMethod                LocationNameDisplayMethod;                         // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableUIMapTextConfig) == 0x000008, "Wrong alignment on FJackDataTableUIMapTextConfig");
static_assert(sizeof(FJackDataTableUIMapTextConfig) == 0x000038, "Wrong size on FJackDataTableUIMapTextConfig");
static_assert(offsetof(FJackDataTableUIMapTextConfig, MapId) == 0x000008, "Member 'FJackDataTableUIMapTextConfig::MapId' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapTextConfig, LocationNameTextID) == 0x000010, "Member 'FJackDataTableUIMapTextConfig::LocationNameTextID' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapTextConfig, OpenMapTextCondition_VisitFlag) == 0x000018, "Member 'FJackDataTableUIMapTextConfig::OpenMapTextCondition_VisitFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapTextConfig, OpenMapTextCondition_FlagCategory) == 0x000020, "Member 'FJackDataTableUIMapTextConfig::OpenMapTextCondition_FlagCategory' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapTextConfig, OpenMapTextCondition_FlagName) == 0x000028, "Member 'FJackDataTableUIMapTextConfig::OpenMapTextCondition_FlagName' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMapTextConfig, LocationNameDisplayMethod) == 0x000030, "Member 'FJackDataTableUIMapTextConfig::LocationNameDisplayMethod' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_PartyTalkData_B110
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_B110 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_B110) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_B110");
static_assert(sizeof(FJackLDT_PartyTalkData_B110) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_B110");

// ScriptStruct JackGame.JackDataTableUIMessageSpeed
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableUIMessageSpeed final : public FTableRowBase
{
public:
	EJackSpeed                                    Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaitSecondsPerCharacter;                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FastModeMultiplier;                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableUIMessageSpeed) == 0x000008, "Wrong alignment on FJackDataTableUIMessageSpeed");
static_assert(sizeof(FJackDataTableUIMessageSpeed) == 0x000018, "Wrong size on FJackDataTableUIMessageSpeed");
static_assert(offsetof(FJackDataTableUIMessageSpeed, Type) == 0x000008, "Member 'FJackDataTableUIMessageSpeed::Type' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMessageSpeed, WaitSecondsPerCharacter) == 0x00000C, "Member 'FJackDataTableUIMessageSpeed::WaitSecondsPerCharacter' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIMessageSpeed, FastModeMultiplier) == 0x000010, "Member 'FJackDataTableUIMessageSpeed::FastModeMultiplier' has a wrong offset!");

// ScriptStruct JackGame.JackEffects
// 0x0040 (0x0040 - 0x0000)
struct FJackEffects
{
public:
	class UParticleSystem*                        Effect;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttached;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               AttachLocationType;                                // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OffsetLocation;                                    // 0x0024(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRotation;                                    // 0x0030(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackEffects) == 0x000008, "Wrong alignment on FJackEffects");
static_assert(sizeof(FJackEffects) == 0x000040, "Wrong size on FJackEffects");
static_assert(offsetof(FJackEffects, Effect) == 0x000000, "Member 'FJackEffects::Effect' has a wrong offset!");
static_assert(offsetof(FJackEffects, Sound) == 0x000008, "Member 'FJackEffects::Sound' has a wrong offset!");
static_assert(offsetof(FJackEffects, bAttached) == 0x000010, "Member 'FJackEffects::bAttached' has a wrong offset!");
static_assert(offsetof(FJackEffects, SocketName) == 0x000018, "Member 'FJackEffects::SocketName' has a wrong offset!");
static_assert(offsetof(FJackEffects, AttachLocationType) == 0x000020, "Member 'FJackEffects::AttachLocationType' has a wrong offset!");
static_assert(offsetof(FJackEffects, OffsetLocation) == 0x000024, "Member 'FJackEffects::OffsetLocation' has a wrong offset!");
static_assert(offsetof(FJackEffects, OffsetRotation) == 0x000030, "Member 'FJackEffects::OffsetRotation' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableUINeighborMapInfo
// 0x0070 (0x0078 - 0x0008)
struct FJackDataTableUINeighborMapInfo final : public FTableRowBase
{
public:
	TArray<class FName>                           SameAreaMapVolumeIDList;                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   OverrideLocationNameTextID;                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackLocationNameDisplayMethod                DefaultDisplayMethod;                              // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackGameFlagCategory                         DisplayControlFlagCategory;                        // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DisplayControlFlagName;                            // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackGameFlagOperator                         DisplayControlFlagCondition;                       // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackLocationNameDisplayMethod                DisplayControlMethod;                              // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NeighborMapVolumeIDListA;                          // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           NeighborMapVolumeIDListS;                          // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           NeighborMapVolumeIDListB;                          // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           NeighborMapVolumeIDListC;                          // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableUINeighborMapInfo) == 0x000008, "Wrong alignment on FJackDataTableUINeighborMapInfo");
static_assert(sizeof(FJackDataTableUINeighborMapInfo) == 0x000078, "Wrong size on FJackDataTableUINeighborMapInfo");
static_assert(offsetof(FJackDataTableUINeighborMapInfo, SameAreaMapVolumeIDList) == 0x000008, "Member 'FJackDataTableUINeighborMapInfo::SameAreaMapVolumeIDList' has a wrong offset!");
static_assert(offsetof(FJackDataTableUINeighborMapInfo, OverrideLocationNameTextID) == 0x000018, "Member 'FJackDataTableUINeighborMapInfo::OverrideLocationNameTextID' has a wrong offset!");
static_assert(offsetof(FJackDataTableUINeighborMapInfo, DefaultDisplayMethod) == 0x000020, "Member 'FJackDataTableUINeighborMapInfo::DefaultDisplayMethod' has a wrong offset!");
static_assert(offsetof(FJackDataTableUINeighborMapInfo, DisplayControlFlagCategory) == 0x000021, "Member 'FJackDataTableUINeighborMapInfo::DisplayControlFlagCategory' has a wrong offset!");
static_assert(offsetof(FJackDataTableUINeighborMapInfo, DisplayControlFlagName) == 0x000028, "Member 'FJackDataTableUINeighborMapInfo::DisplayControlFlagName' has a wrong offset!");
static_assert(offsetof(FJackDataTableUINeighborMapInfo, DisplayControlFlagCondition) == 0x000030, "Member 'FJackDataTableUINeighborMapInfo::DisplayControlFlagCondition' has a wrong offset!");
static_assert(offsetof(FJackDataTableUINeighborMapInfo, DisplayControlMethod) == 0x000031, "Member 'FJackDataTableUINeighborMapInfo::DisplayControlMethod' has a wrong offset!");
static_assert(offsetof(FJackDataTableUINeighborMapInfo, NeighborMapVolumeIDListA) == 0x000038, "Member 'FJackDataTableUINeighborMapInfo::NeighborMapVolumeIDListA' has a wrong offset!");
static_assert(offsetof(FJackDataTableUINeighborMapInfo, NeighborMapVolumeIDListS) == 0x000048, "Member 'FJackDataTableUINeighborMapInfo::NeighborMapVolumeIDListS' has a wrong offset!");
static_assert(offsetof(FJackDataTableUINeighborMapInfo, NeighborMapVolumeIDListB) == 0x000058, "Member 'FJackDataTableUINeighborMapInfo::NeighborMapVolumeIDListB' has a wrong offset!");
static_assert(offsetof(FJackDataTableUINeighborMapInfo, NeighborMapVolumeIDListC) == 0x000068, "Member 'FJackDataTableUINeighborMapInfo::NeighborMapVolumeIDListC' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableUIPlatformSpecificText
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableUIPlatformSpecificText final : public FTableRowBase
{
public:
	class FString                                 Text;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExchangeTag;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableUIPlatformSpecificText) == 0x000008, "Wrong alignment on FJackDataTableUIPlatformSpecificText");
static_assert(sizeof(FJackDataTableUIPlatformSpecificText) == 0x000020, "Wrong size on FJackDataTableUIPlatformSpecificText");
static_assert(offsetof(FJackDataTableUIPlatformSpecificText, Text) == 0x000008, "Member 'FJackDataTableUIPlatformSpecificText::Text' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIPlatformSpecificText, ExchangeTag) == 0x000018, "Member 'FJackDataTableUIPlatformSpecificText::ExchangeTag' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_AnimDynamics_M022
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AnimDynamics_M022 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AnimDynamics_M022) == 0x000008, "Wrong alignment on FJackLDT_AnimDynamics_M022");
static_assert(sizeof(FJackLDT_AnimDynamics_M022) == 0x000010, "Wrong size on FJackLDT_AnimDynamics_M022");

// ScriptStruct JackGame.JackDataTableUIStaffRoll
// 0x00A0 (0x00A8 - 0x0008)
struct FJackDataTableUIStaffRoll final : public FTableRowBase
{
public:
	EJackStaffRollEventType                       EventType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTime;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime2;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime2;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayTime;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime2;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayTime2;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime2;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FontTypeKey;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextPosY;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextPosX;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextMain;                                          // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ThreeRowsTextLeft;                                 // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ThreeRowsTextCenter;                               // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ThreeRowsTextRight;                                // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TwoRowsTextLeft;                                   // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TwoRowsTextRight;                                  // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextCompany;                                       // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UTexture2D>>      Image;                                             // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      ImageOffset;                                       // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bDontUseFirst;                                     // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableUIStaffRoll) == 0x000008, "Wrong alignment on FJackDataTableUIStaffRoll");
static_assert(sizeof(FJackDataTableUIStaffRoll) == 0x0000A8, "Wrong size on FJackDataTableUIStaffRoll");
static_assert(offsetof(FJackDataTableUIStaffRoll, EventType) == 0x000008, "Member 'FJackDataTableUIStaffRoll::EventType' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIStaffRoll, StartTime) == 0x00000C, "Member 'FJackDataTableUIStaffRoll::StartTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIStaffRoll, StartTime2) == 0x000010, "Member 'FJackDataTableUIStaffRoll::StartTime2' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIStaffRoll, EndTime) == 0x000014, "Member 'FJackDataTableUIStaffRoll::EndTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIStaffRoll, EndTime2) == 0x000018, "Member 'FJackDataTableUIStaffRoll::EndTime2' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIStaffRoll, FadeInTime) == 0x00001C, "Member 'FJackDataTableUIStaffRoll::FadeInTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIStaffRoll, DisplayTime) == 0x000020, "Member 'FJackDataTableUIStaffRoll::DisplayTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIStaffRoll, FadeOutTime) == 0x000024, "Member 'FJackDataTableUIStaffRoll::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIStaffRoll, FadeInTime2) == 0x000028, "Member 'FJackDataTableUIStaffRoll::FadeInTime2' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIStaffRoll, DisplayTime2) == 0x00002C, "Member 'FJackDataTableUIStaffRoll::DisplayTime2' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIStaffRoll, FadeOutTime2) == 0x000030, "Member 'FJackDataTableUIStaffRoll::FadeOutTime2' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIStaffRoll, FontTypeKey) == 0x000038, "Member 'FJackDataTableUIStaffRoll::FontTypeKey' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIStaffRoll, TextPosY) == 0x000040, "Member 'FJackDataTableUIStaffRoll::TextPosY' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIStaffRoll, TextPosX) == 0x000044, "Member 'FJackDataTableUIStaffRoll::TextPosX' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIStaffRoll, TextMain) == 0x000048, "Member 'FJackDataTableUIStaffRoll::TextMain' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIStaffRoll, ThreeRowsTextLeft) == 0x000050, "Member 'FJackDataTableUIStaffRoll::ThreeRowsTextLeft' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIStaffRoll, ThreeRowsTextCenter) == 0x000058, "Member 'FJackDataTableUIStaffRoll::ThreeRowsTextCenter' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIStaffRoll, ThreeRowsTextRight) == 0x000060, "Member 'FJackDataTableUIStaffRoll::ThreeRowsTextRight' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIStaffRoll, TwoRowsTextLeft) == 0x000068, "Member 'FJackDataTableUIStaffRoll::TwoRowsTextLeft' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIStaffRoll, TwoRowsTextRight) == 0x000070, "Member 'FJackDataTableUIStaffRoll::TwoRowsTextRight' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIStaffRoll, TextCompany) == 0x000078, "Member 'FJackDataTableUIStaffRoll::TextCompany' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIStaffRoll, Image) == 0x000080, "Member 'FJackDataTableUIStaffRoll::Image' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIStaffRoll, ImageOffset) == 0x000090, "Member 'FJackDataTableUIStaffRoll::ImageOffset' has a wrong offset!");
static_assert(offsetof(FJackDataTableUIStaffRoll, bDontUseFirst) == 0x0000A0, "Member 'FJackDataTableUIStaffRoll::bDontUseFirst' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MiniGameJackPotTowerCoin
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MiniGameJackPotTowerCoin final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MiniGameJackPotTowerCoin) == 0x000008, "Wrong alignment on FJackLDT_MiniGameJackPotTowerCoin");
static_assert(sizeof(FJackLDT_MiniGameJackPotTowerCoin) == 0x000010, "Wrong size on FJackLDT_MiniGameJackPotTowerCoin");

// ScriptStruct JackGame.JackDataTableUITabiNoKokoroe
// 0x0060 (0x0068 - 0x0008)
struct FJackDataTableUITabiNoKokoroe final : public FTableRowBase
{
public:
	class FName                                   TitleText;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FullTitleText;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MainText;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowInTabiNoKokoroe;                              // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackTutorialCategory                         Category;                                          // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayTexture;                                   // 0x0022(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                TopTexture;                                        // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubPageKey1;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubPageKey2;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubPageKey3;                                       // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubPageKey4;                                       // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GameFlag;                                          // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableUITabiNoKokoroe) == 0x000008, "Wrong alignment on FJackDataTableUITabiNoKokoroe");
static_assert(sizeof(FJackDataTableUITabiNoKokoroe) == 0x000068, "Wrong size on FJackDataTableUITabiNoKokoroe");
static_assert(offsetof(FJackDataTableUITabiNoKokoroe, TitleText) == 0x000008, "Member 'FJackDataTableUITabiNoKokoroe::TitleText' has a wrong offset!");
static_assert(offsetof(FJackDataTableUITabiNoKokoroe, FullTitleText) == 0x000010, "Member 'FJackDataTableUITabiNoKokoroe::FullTitleText' has a wrong offset!");
static_assert(offsetof(FJackDataTableUITabiNoKokoroe, MainText) == 0x000018, "Member 'FJackDataTableUITabiNoKokoroe::MainText' has a wrong offset!");
static_assert(offsetof(FJackDataTableUITabiNoKokoroe, bShowInTabiNoKokoroe) == 0x000020, "Member 'FJackDataTableUITabiNoKokoroe::bShowInTabiNoKokoroe' has a wrong offset!");
static_assert(offsetof(FJackDataTableUITabiNoKokoroe, Category) == 0x000021, "Member 'FJackDataTableUITabiNoKokoroe::Category' has a wrong offset!");
static_assert(offsetof(FJackDataTableUITabiNoKokoroe, bDisplayTexture) == 0x000022, "Member 'FJackDataTableUITabiNoKokoroe::bDisplayTexture' has a wrong offset!");
static_assert(offsetof(FJackDataTableUITabiNoKokoroe, TopTexture) == 0x000028, "Member 'FJackDataTableUITabiNoKokoroe::TopTexture' has a wrong offset!");
static_assert(offsetof(FJackDataTableUITabiNoKokoroe, SubPageKey1) == 0x000040, "Member 'FJackDataTableUITabiNoKokoroe::SubPageKey1' has a wrong offset!");
static_assert(offsetof(FJackDataTableUITabiNoKokoroe, SubPageKey2) == 0x000048, "Member 'FJackDataTableUITabiNoKokoroe::SubPageKey2' has a wrong offset!");
static_assert(offsetof(FJackDataTableUITabiNoKokoroe, SubPageKey3) == 0x000050, "Member 'FJackDataTableUITabiNoKokoroe::SubPageKey3' has a wrong offset!");
static_assert(offsetof(FJackDataTableUITabiNoKokoroe, SubPageKey4) == 0x000058, "Member 'FJackDataTableUITabiNoKokoroe::SubPageKey4' has a wrong offset!");
static_assert(offsetof(FJackDataTableUITabiNoKokoroe, GameFlag) == 0x000060, "Member 'FJackDataTableUITabiNoKokoroe::GameFlag' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableUITokugiPanelSkillLine
// 0x0030 (0x0038 - 0x0008)
struct FJackDataTableUITokugiPanelSkillLine final : public FTableRowBase
{
public:
	EJackCharacter                                TargetCharacter;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackSkillLine                                SkillLineType;                                     // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Description;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StartPoint;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              FlashEffectPos;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EJackTokugiPanelScenario>              ScenarioFlagList;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableUITokugiPanelSkillLine) == 0x000008, "Wrong alignment on FJackDataTableUITokugiPanelSkillLine");
static_assert(sizeof(FJackDataTableUITokugiPanelSkillLine) == 0x000038, "Wrong size on FJackDataTableUITokugiPanelSkillLine");
static_assert(offsetof(FJackDataTableUITokugiPanelSkillLine, TargetCharacter) == 0x000008, "Member 'FJackDataTableUITokugiPanelSkillLine::TargetCharacter' has a wrong offset!");
static_assert(offsetof(FJackDataTableUITokugiPanelSkillLine, SkillLineType) == 0x000009, "Member 'FJackDataTableUITokugiPanelSkillLine::SkillLineType' has a wrong offset!");
static_assert(offsetof(FJackDataTableUITokugiPanelSkillLine, Description) == 0x000010, "Member 'FJackDataTableUITokugiPanelSkillLine::Description' has a wrong offset!");
static_assert(offsetof(FJackDataTableUITokugiPanelSkillLine, StartPoint) == 0x000018, "Member 'FJackDataTableUITokugiPanelSkillLine::StartPoint' has a wrong offset!");
static_assert(offsetof(FJackDataTableUITokugiPanelSkillLine, FlashEffectPos) == 0x000020, "Member 'FJackDataTableUITokugiPanelSkillLine::FlashEffectPos' has a wrong offset!");
static_assert(offsetof(FJackDataTableUITokugiPanelSkillLine, ScenarioFlagList) == 0x000028, "Member 'FJackDataTableUITokugiPanelSkillLine::ScenarioFlagList' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableUmaRaceVehicleEntry
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableUmaRaceVehicleEntry final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   VehicleClass;                                      // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUmaRaceHorseType                         HorseType;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRandomEntry;                                    // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableUmaRaceVehicleEntry) == 0x000008, "Wrong alignment on FJackDataTableUmaRaceVehicleEntry");
static_assert(sizeof(FJackDataTableUmaRaceVehicleEntry) == 0x000028, "Wrong size on FJackDataTableUmaRaceVehicleEntry");
static_assert(offsetof(FJackDataTableUmaRaceVehicleEntry, VehicleClass) == 0x000008, "Member 'FJackDataTableUmaRaceVehicleEntry::VehicleClass' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceVehicleEntry, HorseType) == 0x000020, "Member 'FJackDataTableUmaRaceVehicleEntry::HorseType' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceVehicleEntry, bIsRandomEntry) == 0x000021, "Member 'FJackDataTableUmaRaceVehicleEntry::bIsRandomEntry' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableUmaRaceTimeSchedule
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableUmaRaceTimeSchedule final : public FTableRowBase
{
public:
	bool                                          bIsEnable;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LapCount;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ratio;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeRange;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableUmaRaceTimeSchedule) == 0x000008, "Wrong alignment on FJackDataTableUmaRaceTimeSchedule");
static_assert(sizeof(FJackDataTableUmaRaceTimeSchedule) == 0x000020, "Wrong size on FJackDataTableUmaRaceTimeSchedule");
static_assert(offsetof(FJackDataTableUmaRaceTimeSchedule, bIsEnable) == 0x000008, "Member 'FJackDataTableUmaRaceTimeSchedule::bIsEnable' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceTimeSchedule, LapCount) == 0x00000C, "Member 'FJackDataTableUmaRaceTimeSchedule::LapCount' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceTimeSchedule, Ratio) == 0x000010, "Member 'FJackDataTableUmaRaceTimeSchedule::Ratio' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceTimeSchedule, Time) == 0x000014, "Member 'FJackDataTableUmaRaceTimeSchedule::Time' has a wrong offset!");
static_assert(offsetof(FJackDataTableUmaRaceTimeSchedule, TimeRange) == 0x000018, "Member 'FJackDataTableUmaRaceTimeSchedule::TimeRange' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_PartyTalkData_B170
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_B170 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_B170) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_B170");
static_assert(sizeof(FJackLDT_PartyTalkData_B170) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_B170");

// ScriptStruct JackGame.JackDataTableVehicleList
// 0x0038 (0x0040 - 0x0008)
struct FJackDataTableVehicleList final : public FTableRowBase
{
public:
	class FName                                   MonsterID;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisplayName;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LODBoundsName;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeakActionMonsterAddLevel;                         // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   VehicleAsset;                                      // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableVehicleList) == 0x000008, "Wrong alignment on FJackDataTableVehicleList");
static_assert(sizeof(FJackDataTableVehicleList) == 0x000040, "Wrong size on FJackDataTableVehicleList");
static_assert(offsetof(FJackDataTableVehicleList, MonsterID) == 0x000008, "Member 'FJackDataTableVehicleList::MonsterID' has a wrong offset!");
static_assert(offsetof(FJackDataTableVehicleList, DisplayName) == 0x000010, "Member 'FJackDataTableVehicleList::DisplayName' has a wrong offset!");
static_assert(offsetof(FJackDataTableVehicleList, LODBoundsName) == 0x000018, "Member 'FJackDataTableVehicleList::LODBoundsName' has a wrong offset!");
static_assert(offsetof(FJackDataTableVehicleList, WeakActionMonsterAddLevel) == 0x000020, "Member 'FJackDataTableVehicleList::WeakActionMonsterAddLevel' has a wrong offset!");
static_assert(offsetof(FJackDataTableVehicleList, VehicleAsset) == 0x000028, "Member 'FJackDataTableVehicleList::VehicleAsset' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleB_003
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleB_003 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleB_003) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleB_003");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleB_003) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleB_003");

// ScriptStruct JackGame.JackDataTableVehicleRiderSyncAnimationTable
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableVehicleRiderSyncAnimationTable final : public FTableRowBase
{
public:
	class FName                                   RiderAnimation;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VehicleAnimation;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableVehicleRiderSyncAnimationTable) == 0x000008, "Wrong alignment on FJackDataTableVehicleRiderSyncAnimationTable");
static_assert(sizeof(FJackDataTableVehicleRiderSyncAnimationTable) == 0x000018, "Wrong size on FJackDataTableVehicleRiderSyncAnimationTable");
static_assert(offsetof(FJackDataTableVehicleRiderSyncAnimationTable, RiderAnimation) == 0x000008, "Member 'FJackDataTableVehicleRiderSyncAnimationTable::RiderAnimation' has a wrong offset!");
static_assert(offsetof(FJackDataTableVehicleRiderSyncAnimationTable, VehicleAnimation) == 0x000010, "Member 'FJackDataTableVehicleRiderSyncAnimationTable::VehicleAnimation' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_UmaRaceEDT_RankC_H
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceEDT_RankC_H final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceEDT_RankC_H) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceEDT_RankC_H");
static_assert(sizeof(FJackLDT_UmaRaceEDT_RankC_H) == 0x000010, "Wrong size on FJackLDT_UmaRaceEDT_RankC_H");

// ScriptStruct JackGame.JackRotationInfo
// 0x002C (0x002C - 0x0000)
struct FJackRotationInfo final
{
public:
	EJackRotationLayer                            RotationLayer;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackRotationProcessType                      RotationProcessType;                               // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotationRequest;                                  // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotationPlaying;                                  // 0x0003(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RotationTargetLocation;                            // 0x0004(0x000C)(Edit, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  RotationTargetActor;                               // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationDurationTime;                              // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationParameter1;                                // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationParameter2;                                // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   RotationParameterEasing;                           // 0x0024(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentTime;                                       // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackRotationInfo) == 0x000004, "Wrong alignment on FJackRotationInfo");
static_assert(sizeof(FJackRotationInfo) == 0x00002C, "Wrong size on FJackRotationInfo");
static_assert(offsetof(FJackRotationInfo, RotationLayer) == 0x000000, "Member 'FJackRotationInfo::RotationLayer' has a wrong offset!");
static_assert(offsetof(FJackRotationInfo, RotationProcessType) == 0x000001, "Member 'FJackRotationInfo::RotationProcessType' has a wrong offset!");
static_assert(offsetof(FJackRotationInfo, bRotationRequest) == 0x000002, "Member 'FJackRotationInfo::bRotationRequest' has a wrong offset!");
static_assert(offsetof(FJackRotationInfo, bRotationPlaying) == 0x000003, "Member 'FJackRotationInfo::bRotationPlaying' has a wrong offset!");
static_assert(offsetof(FJackRotationInfo, RotationTargetLocation) == 0x000004, "Member 'FJackRotationInfo::RotationTargetLocation' has a wrong offset!");
static_assert(offsetof(FJackRotationInfo, RotationTargetActor) == 0x000010, "Member 'FJackRotationInfo::RotationTargetActor' has a wrong offset!");
static_assert(offsetof(FJackRotationInfo, RotationDurationTime) == 0x000018, "Member 'FJackRotationInfo::RotationDurationTime' has a wrong offset!");
static_assert(offsetof(FJackRotationInfo, RotationParameter1) == 0x00001C, "Member 'FJackRotationInfo::RotationParameter1' has a wrong offset!");
static_assert(offsetof(FJackRotationInfo, RotationParameter2) == 0x000020, "Member 'FJackRotationInfo::RotationParameter2' has a wrong offset!");
static_assert(offsetof(FJackRotationInfo, RotationParameterEasing) == 0x000024, "Member 'FJackRotationInfo::RotationParameterEasing' has a wrong offset!");
static_assert(offsetof(FJackRotationInfo, CurrentTime) == 0x000028, "Member 'FJackRotationInfo::CurrentTime' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableVoiceDramaDLCInfo
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableVoiceDramaDLCInfo final : public FTableRowBase
{
public:
	class FString                                 ScenarioMinute;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ScenarioSecond;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableVoiceDramaDLCInfo) == 0x000008, "Wrong alignment on FJackDataTableVoiceDramaDLCInfo");
static_assert(sizeof(FJackDataTableVoiceDramaDLCInfo) == 0x000028, "Wrong size on FJackDataTableVoiceDramaDLCInfo");
static_assert(offsetof(FJackDataTableVoiceDramaDLCInfo, ScenarioMinute) == 0x000008, "Member 'FJackDataTableVoiceDramaDLCInfo::ScenarioMinute' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDramaDLCInfo, ScenarioSecond) == 0x000018, "Member 'FJackDataTableVoiceDramaDLCInfo::ScenarioSecond' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableVoiceDramaHDPafuPafu
// 0x0160 (0x0168 - 0x0008)
struct FJackDataTableVoiceDramaHDPafuPafu final : public FTableRowBase
{
public:
	int32                                         RoundNum;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LeftRight;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Health;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FacialChange1;                                     // 0x0024(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FacialChange2;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FacialChange3;                                     // 0x002C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                FacialAsset1;                                      // 0x0030(0x0018)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                FacialAsset2;                                      // 0x0048(0x0018)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                FacialAsset3;                                      // 0x0060(0x0018)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                FacialAsset4;                                      // 0x0078(0x0018)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                FacialAsset5;                                      // 0x0090(0x0018)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                BackgroundAsset;                                   // 0x00A8(0x0018)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                VoiceDramaBackgroundAsset;                         // 0x00C0(0x0018)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              StartVoice;                                        // 0x00D8(0x0018)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              PafuPafuVoice1;                                    // 0x00F0(0x0018)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              PafuPafuVoice2;                                    // 0x0108(0x0018)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              PafuPafuVoice3;                                    // 0x0120(0x0018)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              KnockoutVoice;                                     // 0x0138(0x0018)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              WaitVoice;                                         // 0x0150(0x0018)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableVoiceDramaHDPafuPafu) == 0x000008, "Wrong alignment on FJackDataTableVoiceDramaHDPafuPafu");
static_assert(sizeof(FJackDataTableVoiceDramaHDPafuPafu) == 0x000168, "Wrong size on FJackDataTableVoiceDramaHDPafuPafu");
static_assert(offsetof(FJackDataTableVoiceDramaHDPafuPafu, RoundNum) == 0x000008, "Member 'FJackDataTableVoiceDramaHDPafuPafu::RoundNum' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDramaHDPafuPafu, LeftRight) == 0x000010, "Member 'FJackDataTableVoiceDramaHDPafuPafu::LeftRight' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDramaHDPafuPafu, Health) == 0x000020, "Member 'FJackDataTableVoiceDramaHDPafuPafu::Health' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDramaHDPafuPafu, FacialChange1) == 0x000024, "Member 'FJackDataTableVoiceDramaHDPafuPafu::FacialChange1' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDramaHDPafuPafu, FacialChange2) == 0x000028, "Member 'FJackDataTableVoiceDramaHDPafuPafu::FacialChange2' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDramaHDPafuPafu, FacialChange3) == 0x00002C, "Member 'FJackDataTableVoiceDramaHDPafuPafu::FacialChange3' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDramaHDPafuPafu, FacialAsset1) == 0x000030, "Member 'FJackDataTableVoiceDramaHDPafuPafu::FacialAsset1' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDramaHDPafuPafu, FacialAsset2) == 0x000048, "Member 'FJackDataTableVoiceDramaHDPafuPafu::FacialAsset2' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDramaHDPafuPafu, FacialAsset3) == 0x000060, "Member 'FJackDataTableVoiceDramaHDPafuPafu::FacialAsset3' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDramaHDPafuPafu, FacialAsset4) == 0x000078, "Member 'FJackDataTableVoiceDramaHDPafuPafu::FacialAsset4' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDramaHDPafuPafu, FacialAsset5) == 0x000090, "Member 'FJackDataTableVoiceDramaHDPafuPafu::FacialAsset5' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDramaHDPafuPafu, BackgroundAsset) == 0x0000A8, "Member 'FJackDataTableVoiceDramaHDPafuPafu::BackgroundAsset' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDramaHDPafuPafu, VoiceDramaBackgroundAsset) == 0x0000C0, "Member 'FJackDataTableVoiceDramaHDPafuPafu::VoiceDramaBackgroundAsset' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDramaHDPafuPafu, StartVoice) == 0x0000D8, "Member 'FJackDataTableVoiceDramaHDPafuPafu::StartVoice' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDramaHDPafuPafu, PafuPafuVoice1) == 0x0000F0, "Member 'FJackDataTableVoiceDramaHDPafuPafu::PafuPafuVoice1' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDramaHDPafuPafu, PafuPafuVoice2) == 0x000108, "Member 'FJackDataTableVoiceDramaHDPafuPafu::PafuPafuVoice2' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDramaHDPafuPafu, PafuPafuVoice3) == 0x000120, "Member 'FJackDataTableVoiceDramaHDPafuPafu::PafuPafuVoice3' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDramaHDPafuPafu, KnockoutVoice) == 0x000138, "Member 'FJackDataTableVoiceDramaHDPafuPafu::KnockoutVoice' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDramaHDPafuPafu, WaitVoice) == 0x000150, "Member 'FJackDataTableVoiceDramaHDPafuPafu::WaitVoice' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RouletteDataTableTexture
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RouletteDataTableTexture final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RouletteDataTableTexture) == 0x000008, "Wrong alignment on FJackLDT_RouletteDataTableTexture");
static_assert(sizeof(FJackLDT_RouletteDataTableTexture) == 0x000010, "Wrong size on FJackLDT_RouletteDataTableTexture");

// ScriptStruct JackGame.JackDataTableVoiceDramaHDPafuPafuSoundEffect
// 0x0018 (0x0020 - 0x0008)
struct FJackDataTableVoiceDramaHDPafuPafuSoundEffect final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USoundBase>              SoundAsset;                                        // 0x0008(0x0018)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableVoiceDramaHDPafuPafuSoundEffect) == 0x000008, "Wrong alignment on FJackDataTableVoiceDramaHDPafuPafuSoundEffect");
static_assert(sizeof(FJackDataTableVoiceDramaHDPafuPafuSoundEffect) == 0x000020, "Wrong size on FJackDataTableVoiceDramaHDPafuPafuSoundEffect");
static_assert(offsetof(FJackDataTableVoiceDramaHDPafuPafuSoundEffect, SoundAsset) == 0x000008, "Member 'FJackDataTableVoiceDramaHDPafuPafuSoundEffect::SoundAsset' has a wrong offset!");

// ScriptStruct JackGame.JackOmakeTextData
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FJackOmakeTextData final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackOmakeTextData) == 0x000008, "Wrong alignment on FJackOmakeTextData");
static_assert(sizeof(FJackOmakeTextData) == 0x000028, "Wrong size on FJackOmakeTextData");

// ScriptStruct JackGame.JackDataTableVoiceDramaInfo
// 0x0060 (0x0068 - 0x0008)
struct FJackDataTableVoiceDramaInfo final : public FTableRowBase
{
public:
	int32                                         ScenarioNo;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ScenarioTitle;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OverviewText;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                OverviewTexture;                                   // 0x0030(0x0018)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ScenarioMinute;                                    // 0x0048(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ScenarioSecond;                                    // 0x0058(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableVoiceDramaInfo) == 0x000008, "Wrong alignment on FJackDataTableVoiceDramaInfo");
static_assert(sizeof(FJackDataTableVoiceDramaInfo) == 0x000068, "Wrong size on FJackDataTableVoiceDramaInfo");
static_assert(offsetof(FJackDataTableVoiceDramaInfo, ScenarioNo) == 0x000008, "Member 'FJackDataTableVoiceDramaInfo::ScenarioNo' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDramaInfo, ScenarioTitle) == 0x000010, "Member 'FJackDataTableVoiceDramaInfo::ScenarioTitle' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDramaInfo, OverviewText) == 0x000020, "Member 'FJackDataTableVoiceDramaInfo::OverviewText' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDramaInfo, OverviewTexture) == 0x000030, "Member 'FJackDataTableVoiceDramaInfo::OverviewTexture' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDramaInfo, ScenarioMinute) == 0x000048, "Member 'FJackDataTableVoiceDramaInfo::ScenarioMinute' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceDramaInfo, ScenarioSecond) == 0x000058, "Member 'FJackDataTableVoiceDramaInfo::ScenarioSecond' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_TextPackScenario
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextPackScenario final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextPackScenario) == 0x000008, "Wrong alignment on FJackLDT_TextPackScenario");
static_assert(sizeof(FJackLDT_TextPackScenario) == 0x000010, "Wrong size on FJackLDT_TextPackScenario");

// ScriptStruct JackGame.JackDataTableVoiceLabel
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableVoiceLabel final : public FTableRowBase
{
public:
	bool                                          bResidentResource;                                 // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCondition_Nemuri;                                 // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCondition_Mahi;                                   // 0x000A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCondition_Konran;                                 // 0x000B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCondition_Miryou;                                 // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDataTableVoiceLabel) == 0x000008, "Wrong alignment on FJackDataTableVoiceLabel");
static_assert(sizeof(FJackDataTableVoiceLabel) == 0x000010, "Wrong size on FJackDataTableVoiceLabel");
static_assert(offsetof(FJackDataTableVoiceLabel, bResidentResource) == 0x000008, "Member 'FJackDataTableVoiceLabel::bResidentResource' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceLabel, bCondition_Nemuri) == 0x000009, "Member 'FJackDataTableVoiceLabel::bCondition_Nemuri' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceLabel, bCondition_Mahi) == 0x00000A, "Member 'FJackDataTableVoiceLabel::bCondition_Mahi' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceLabel, bCondition_Konran) == 0x00000B, "Member 'FJackDataTableVoiceLabel::bCondition_Konran' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoiceLabel, bCondition_Miryou) == 0x00000C, "Member 'FJackDataTableVoiceLabel::bCondition_Miryou' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableVoicePreset
// 0x0048 (0x0050 - 0x0008)
struct FJackDataTableVoicePreset final : public FTableRowBase
{
public:
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DelayTime;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Flags;                                             // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundBase>              VoiceAsset;                                        // 0x0018(0x0018)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DelayTimeEN;                                       // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         FlagsEN;                                           // 0x0034(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundBase>              VoiceAssetEN;                                      // 0x0038(0x0018)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FJackDataTableVoicePreset) == 0x000008, "Wrong alignment on FJackDataTableVoicePreset");
static_assert(sizeof(FJackDataTableVoicePreset) == 0x000050, "Wrong size on FJackDataTableVoicePreset");
static_assert(offsetof(FJackDataTableVoicePreset, Priority) == 0x000008, "Member 'FJackDataTableVoicePreset::Priority' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoicePreset, DelayTime) == 0x00000C, "Member 'FJackDataTableVoicePreset::DelayTime' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoicePreset, Flags) == 0x000010, "Member 'FJackDataTableVoicePreset::Flags' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoicePreset, VoiceAsset) == 0x000018, "Member 'FJackDataTableVoicePreset::VoiceAsset' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoicePreset, DelayTimeEN) == 0x000030, "Member 'FJackDataTableVoicePreset::DelayTimeEN' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoicePreset, FlagsEN) == 0x000034, "Member 'FJackDataTableVoicePreset::FlagsEN' has a wrong offset!");
static_assert(offsetof(FJackDataTableVoicePreset, VoiceAssetEN) == 0x000038, "Member 'FJackDataTableVoicePreset::VoiceAssetEN' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableWeaponHiddenCoordinate
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableWeaponHiddenCoordinate final : public FTableRowBase
{
public:
	TArray<class FName>                           WeaponHiddenSocketNames;                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           WeaponHiddenSocketNamesForBattle;                  // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableWeaponHiddenCoordinate) == 0x000008, "Wrong alignment on FJackDataTableWeaponHiddenCoordinate");
static_assert(sizeof(FJackDataTableWeaponHiddenCoordinate) == 0x000028, "Wrong size on FJackDataTableWeaponHiddenCoordinate");
static_assert(offsetof(FJackDataTableWeaponHiddenCoordinate, WeaponHiddenSocketNames) == 0x000008, "Member 'FJackDataTableWeaponHiddenCoordinate::WeaponHiddenSocketNames' has a wrong offset!");
static_assert(offsetof(FJackDataTableWeaponHiddenCoordinate, WeaponHiddenSocketNamesForBattle) == 0x000018, "Member 'FJackDataTableWeaponHiddenCoordinate::WeaponHiddenSocketNamesForBattle' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_V001_Hair
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_V001_Hair final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_V001_Hair) == 0x000008, "Wrong alignment on FJackLDT_V001_Hair");
static_assert(sizeof(FJackLDT_V001_Hair) == 0x000010, "Wrong size on FJackLDT_V001_Hair");

// ScriptStruct JackGame.JackDataTableYochiList
// 0x0020 (0x0028 - 0x0008)
struct FJackDataTableYochiList final : public FTableRowBase
{
public:
	class FName                                   MapVisitID;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapNameID;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpecialFlag;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CheckMarkFlag;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableYochiList) == 0x000008, "Wrong alignment on FJackDataTableYochiList");
static_assert(sizeof(FJackDataTableYochiList) == 0x000028, "Wrong size on FJackDataTableYochiList");
static_assert(offsetof(FJackDataTableYochiList, MapVisitID) == 0x000008, "Member 'FJackDataTableYochiList::MapVisitID' has a wrong offset!");
static_assert(offsetof(FJackDataTableYochiList, MapNameID) == 0x000010, "Member 'FJackDataTableYochiList::MapNameID' has a wrong offset!");
static_assert(offsetof(FJackDataTableYochiList, bSpecialFlag) == 0x000018, "Member 'FJackDataTableYochiList::bSpecialFlag' has a wrong offset!");
static_assert(offsetof(FJackDataTableYochiList, CheckMarkFlag) == 0x000020, "Member 'FJackDataTableYochiList::CheckMarkFlag' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_N008_SamaCoat_AR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_N008_SamaCoat_AR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_N008_SamaCoat_AR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_N008_SamaCoat_AR");
static_assert(sizeof(FJackLDT_RtEx_N008_SamaCoat_AR) == 0x000010, "Wrong size on FJackLDT_RtEx_N008_SamaCoat_AR");

// ScriptStruct JackGame.JackCutSceneDistributionExponentInfo
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FJackCutSceneDistributionExponentInfo final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackCutSceneDistributionExponentInfo) == 0x000004, "Wrong alignment on FJackCutSceneDistributionExponentInfo");
static_assert(sizeof(FJackCutSceneDistributionExponentInfo) == 0x00000C, "Wrong size on FJackCutSceneDistributionExponentInfo");

// ScriptStruct JackGame.JackMeosiSlotMonster
// 0x0048 (0x0048 - 0x0000)
struct FJackMeosiSlotMonster final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               PartyTexture;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               EnemyTexture;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               IconTexture;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRare;                                           // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxHP;                                             // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HP;                                                // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPhysicalResistance;                               // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMagicalResistance;                                // 0x003D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterRank                     Rank;                                              // 0x003E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LvUp;                                              // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterSize                     Size;                                              // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHero;                                           // 0x0045(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterID                       ID;                                                // 0x0046(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47[0x1];                                       // 0x0047(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMeosiSlotMonster) == 0x000008, "Wrong alignment on FJackMeosiSlotMonster");
static_assert(sizeof(FJackMeosiSlotMonster) == 0x000048, "Wrong size on FJackMeosiSlotMonster");
static_assert(offsetof(FJackMeosiSlotMonster, Key) == 0x000000, "Member 'FJackMeosiSlotMonster::Key' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotMonster, Name) == 0x000008, "Member 'FJackMeosiSlotMonster::Name' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotMonster, PartyTexture) == 0x000018, "Member 'FJackMeosiSlotMonster::PartyTexture' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotMonster, EnemyTexture) == 0x000020, "Member 'FJackMeosiSlotMonster::EnemyTexture' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotMonster, IconTexture) == 0x000028, "Member 'FJackMeosiSlotMonster::IconTexture' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotMonster, bIsRare) == 0x000030, "Member 'FJackMeosiSlotMonster::bIsRare' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotMonster, MaxHP) == 0x000034, "Member 'FJackMeosiSlotMonster::MaxHP' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotMonster, HP) == 0x000038, "Member 'FJackMeosiSlotMonster::HP' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotMonster, bPhysicalResistance) == 0x00003C, "Member 'FJackMeosiSlotMonster::bPhysicalResistance' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotMonster, bMagicalResistance) == 0x00003D, "Member 'FJackMeosiSlotMonster::bMagicalResistance' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotMonster, Rank) == 0x00003E, "Member 'FJackMeosiSlotMonster::Rank' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotMonster, LvUp) == 0x000040, "Member 'FJackMeosiSlotMonster::LvUp' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotMonster, Size) == 0x000044, "Member 'FJackMeosiSlotMonster::Size' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotMonster, bIsHero) == 0x000045, "Member 'FJackMeosiSlotMonster::bIsHero' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotMonster, ID) == 0x000046, "Member 'FJackMeosiSlotMonster::ID' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotShimofuriChance
// 0x0028 (0x0028 - 0x0000)
struct FJackMeosiSlotShimofuriChance final
{
public:
	bool                                          bIsSuper;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSuccess;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBound;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotCutinColor                      Color;                                             // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWinning;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackMeosiSlotMonster>          AppearMonsters;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 MeId;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMeosiSlotShimofuriChance) == 0x000008, "Wrong alignment on FJackMeosiSlotShimofuriChance");
static_assert(sizeof(FJackMeosiSlotShimofuriChance) == 0x000028, "Wrong size on FJackMeosiSlotShimofuriChance");
static_assert(offsetof(FJackMeosiSlotShimofuriChance, bIsSuper) == 0x000000, "Member 'FJackMeosiSlotShimofuriChance::bIsSuper' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotShimofuriChance, bIsSuccess) == 0x000001, "Member 'FJackMeosiSlotShimofuriChance::bIsSuccess' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotShimofuriChance, bIsBound) == 0x000002, "Member 'FJackMeosiSlotShimofuriChance::bIsBound' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotShimofuriChance, Color) == 0x000003, "Member 'FJackMeosiSlotShimofuriChance::Color' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotShimofuriChance, bIsWinning) == 0x000004, "Member 'FJackMeosiSlotShimofuriChance::bIsWinning' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotShimofuriChance, AppearMonsters) == 0x000008, "Member 'FJackMeosiSlotShimofuriChance::AppearMonsters' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotShimofuriChance, MeId) == 0x000018, "Member 'FJackMeosiSlotShimofuriChance::MeId' has a wrong offset!");

// ScriptStruct JackGame.JackCutSceneDynamicShadowDistanceMovableLightInfo
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FJackCutSceneDynamicShadowDistanceMovableLightInfo final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackCutSceneDynamicShadowDistanceMovableLightInfo) == 0x000004, "Wrong alignment on FJackCutSceneDynamicShadowDistanceMovableLightInfo");
static_assert(sizeof(FJackCutSceneDynamicShadowDistanceMovableLightInfo) == 0x00000C, "Wrong size on FJackCutSceneDynamicShadowDistanceMovableLightInfo");

// ScriptStruct JackGame.JackEquipmentClassificationInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FJackEquipmentClassificationInfo final
{
public:
	class FName                                   HandednessUnsheathedSocketName;                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HandednessSheathedSocketName;                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HandUnsheathedSocketName;                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HandSheathedSocketName;                            // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackEquipmentClassificationInfo) == 0x000008, "Wrong alignment on FJackEquipmentClassificationInfo");
static_assert(sizeof(FJackEquipmentClassificationInfo) == 0x000020, "Wrong size on FJackEquipmentClassificationInfo");
static_assert(offsetof(FJackEquipmentClassificationInfo, HandednessUnsheathedSocketName) == 0x000000, "Member 'FJackEquipmentClassificationInfo::HandednessUnsheathedSocketName' has a wrong offset!");
static_assert(offsetof(FJackEquipmentClassificationInfo, HandednessSheathedSocketName) == 0x000008, "Member 'FJackEquipmentClassificationInfo::HandednessSheathedSocketName' has a wrong offset!");
static_assert(offsetof(FJackEquipmentClassificationInfo, HandUnsheathedSocketName) == 0x000010, "Member 'FJackEquipmentClassificationInfo::HandUnsheathedSocketName' has a wrong offset!");
static_assert(offsetof(FJackEquipmentClassificationInfo, HandSheathedSocketName) == 0x000018, "Member 'FJackEquipmentClassificationInfo::HandSheathedSocketName' has a wrong offset!");

// ScriptStruct JackGame.JackEquipmentClassificationInfoDict
// 0x0050 (0x0050 - 0x0000)
struct FJackEquipmentClassificationInfoDict final
{
public:
	EJackItem_Classification                      ClassificationType;                                // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MeshScale;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenInField;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackEquipmentClassificationInfo       BodyInfo;                                          // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackEquipmentClassificationInfo       CaseInfo;                                          // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackEquipmentClassificationInfoDict) == 0x000008, "Wrong alignment on FJackEquipmentClassificationInfoDict");
static_assert(sizeof(FJackEquipmentClassificationInfoDict) == 0x000050, "Wrong size on FJackEquipmentClassificationInfoDict");
static_assert(offsetof(FJackEquipmentClassificationInfoDict, ClassificationType) == 0x000000, "Member 'FJackEquipmentClassificationInfoDict::ClassificationType' has a wrong offset!");
static_assert(offsetof(FJackEquipmentClassificationInfoDict, MeshScale) == 0x000004, "Member 'FJackEquipmentClassificationInfoDict::MeshScale' has a wrong offset!");
static_assert(offsetof(FJackEquipmentClassificationInfoDict, bHiddenInField) == 0x000008, "Member 'FJackEquipmentClassificationInfoDict::bHiddenInField' has a wrong offset!");
static_assert(offsetof(FJackEquipmentClassificationInfoDict, BodyInfo) == 0x000010, "Member 'FJackEquipmentClassificationInfoDict::BodyInfo' has a wrong offset!");
static_assert(offsetof(FJackEquipmentClassificationInfoDict, CaseInfo) == 0x000030, "Member 'FJackEquipmentClassificationInfoDict::CaseInfo' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_HipsSideArmor_AverageRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsSideArmor_AverageRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsSideArmor_AverageRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsSideArmor_AverageRot");
static_assert(sizeof(FJackLDT_RtEx_HipsSideArmor_AverageRot) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsSideArmor_AverageRot");

// ScriptStruct JackGame.JackLDT_SimCollarA_N008
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_SimCollarA_N008 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_SimCollarA_N008) == 0x000008, "Wrong alignment on FJackLDT_SimCollarA_N008");
static_assert(sizeof(FJackLDT_SimCollarA_N008) == 0x000010, "Wrong size on FJackLDT_SimCollarA_N008");

// ScriptStruct JackGame.JackEventBattlePlayerInfo
// 0x001C (0x001C - 0x0000)
struct FJackEventBattlePlayerInfo final
{
public:
	bool                                          bBattleStartLocationDirectionValid;                // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BattleStartLocation;                               // 0x0004(0x000C)(Edit, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BattleStartDirection;                              // 0x0010(0x000C)(Edit, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackEventBattlePlayerInfo) == 0x000004, "Wrong alignment on FJackEventBattlePlayerInfo");
static_assert(sizeof(FJackEventBattlePlayerInfo) == 0x00001C, "Wrong size on FJackEventBattlePlayerInfo");
static_assert(offsetof(FJackEventBattlePlayerInfo, bBattleStartLocationDirectionValid) == 0x000000, "Member 'FJackEventBattlePlayerInfo::bBattleStartLocationDirectionValid' has a wrong offset!");
static_assert(offsetof(FJackEventBattlePlayerInfo, BattleStartLocation) == 0x000004, "Member 'FJackEventBattlePlayerInfo::BattleStartLocation' has a wrong offset!");
static_assert(offsetof(FJackEventBattlePlayerInfo, BattleStartDirection) == 0x000010, "Member 'FJackEventBattlePlayerInfo::BattleStartDirection' has a wrong offset!");

// ScriptStruct JackGame.JackMapSymbolTextureDic
// 0x0018 (0x0018 - 0x0000)
struct FJackMapSymbolTextureDic final
{
public:
	EJackMapSymbol                                Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DrawPriority;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMapSymbolTextureDic) == 0x000008, "Wrong alignment on FJackMapSymbolTextureDic");
static_assert(sizeof(FJackMapSymbolTextureDic) == 0x000018, "Wrong size on FJackMapSymbolTextureDic");
static_assert(offsetof(FJackMapSymbolTextureDic, Type) == 0x000000, "Member 'FJackMapSymbolTextureDic::Type' has a wrong offset!");
static_assert(offsetof(FJackMapSymbolTextureDic, Texture) == 0x000008, "Member 'FJackMapSymbolTextureDic::Texture' has a wrong offset!");
static_assert(offsetof(FJackMapSymbolTextureDic, DrawPriority) == 0x000010, "Member 'FJackMapSymbolTextureDic::DrawPriority' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Sim_MantleC_N013_low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_MantleC_N013_low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_MantleC_N013_low) == 0x000008, "Wrong alignment on FJackLDT_Sim_MantleC_N013_low");
static_assert(sizeof(FJackLDT_Sim_MantleC_N013_low) == 0x000010, "Wrong size on FJackLDT_Sim_MantleC_N013_low");

// ScriptStruct JackGame.JackEyeLookAtTrackInfo
// 0x0008 (0x0008 - 0x0000)
struct FJackEyeLookAtTrackInfo final
{
public:
	float                                         IntrpSpeed;                                        // 0x0000(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntrpSec;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackEyeLookAtTrackInfo) == 0x000004, "Wrong alignment on FJackEyeLookAtTrackInfo");
static_assert(sizeof(FJackEyeLookAtTrackInfo) == 0x000008, "Wrong size on FJackEyeLookAtTrackInfo");
static_assert(offsetof(FJackEyeLookAtTrackInfo, IntrpSpeed) == 0x000000, "Member 'FJackEyeLookAtTrackInfo::IntrpSpeed' has a wrong offset!");
static_assert(offsetof(FJackEyeLookAtTrackInfo, IntrpSec) == 0x000004, "Member 'FJackEyeLookAtTrackInfo::IntrpSec' has a wrong offset!");

// ScriptStruct JackGame.JackEyeCloseFacialPose
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackEyeCloseFacialPose final
{
public:
	class FName                                   PoseName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLeftEyeClose;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRightEyeClose;                                  // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackEyeCloseFacialPose) == 0x000008, "Wrong alignment on FJackEyeCloseFacialPose");
static_assert(sizeof(FJackEyeCloseFacialPose) == 0x000010, "Wrong size on FJackEyeCloseFacialPose");
static_assert(offsetof(FJackEyeCloseFacialPose, PoseName) == 0x000000, "Member 'FJackEyeCloseFacialPose::PoseName' has a wrong offset!");
static_assert(offsetof(FJackEyeCloseFacialPose, bIsLeftEyeClose) == 0x000008, "Member 'FJackEyeCloseFacialPose::bIsLeftEyeClose' has a wrong offset!");
static_assert(offsetof(FJackEyeCloseFacialPose, bIsRightEyeClose) == 0x000009, "Member 'FJackEyeCloseFacialPose::bIsRightEyeClose' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotVariableReelParam
// 0x000C (0x000C - 0x0000)
struct FJackMeosiSlotVariableReelParam final
{
public:
	int32                                         InitPos_Left;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitPos_Center;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitPos_Right;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMeosiSlotVariableReelParam) == 0x000004, "Wrong alignment on FJackMeosiSlotVariableReelParam");
static_assert(sizeof(FJackMeosiSlotVariableReelParam) == 0x00000C, "Wrong size on FJackMeosiSlotVariableReelParam");
static_assert(offsetof(FJackMeosiSlotVariableReelParam, InitPos_Left) == 0x000000, "Member 'FJackMeosiSlotVariableReelParam::InitPos_Left' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotVariableReelParam, InitPos_Center) == 0x000004, "Member 'FJackMeosiSlotVariableReelParam::InitPos_Center' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotVariableReelParam, InitPos_Right) == 0x000008, "Member 'FJackMeosiSlotVariableReelParam::InitPos_Right' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotReelInitialParam
// 0x000C (0x000C - 0x0000)
struct FJackMeosiSlotReelInitialParam final
{
public:
	struct FJackMeosiSlotVariableReelParam        Variable;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMeosiSlotReelInitialParam) == 0x000004, "Wrong alignment on FJackMeosiSlotReelInitialParam");
static_assert(sizeof(FJackMeosiSlotReelInitialParam) == 0x00000C, "Wrong size on FJackMeosiSlotReelInitialParam");
static_assert(offsetof(FJackMeosiSlotReelInitialParam, Variable) == 0x000000, "Member 'FJackMeosiSlotReelInitialParam::Variable' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_ItemTable_EventGet
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ItemTable_EventGet final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ItemTable_EventGet) == 0x000008, "Wrong alignment on FJackLDT_ItemTable_EventGet");
static_assert(sizeof(FJackLDT_ItemTable_EventGet) == 0x000010, "Wrong size on FJackLDT_ItemTable_EventGet");

// ScriptStruct JackGame.JackVowelSetting
// 0x0018 (0x0018 - 0x0000)
struct FJackVowelSetting final
{
public:
	TArray<EJackVowel>                            NotFollowVowels;                                   // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         SecondNoteOffsetTime;                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondNoteBlendTime;                               // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackVowelSetting) == 0x000008, "Wrong alignment on FJackVowelSetting");
static_assert(sizeof(FJackVowelSetting) == 0x000018, "Wrong size on FJackVowelSetting");
static_assert(offsetof(FJackVowelSetting, NotFollowVowels) == 0x000000, "Member 'FJackVowelSetting::NotFollowVowels' has a wrong offset!");
static_assert(offsetof(FJackVowelSetting, SecondNoteOffsetTime) == 0x000010, "Member 'FJackVowelSetting::SecondNoteOffsetTime' has a wrong offset!");
static_assert(offsetof(FJackVowelSetting, SecondNoteBlendTime) == 0x000014, "Member 'FJackVowelSetting::SecondNoteBlendTime' has a wrong offset!");

// ScriptStruct JackGame.JackFacialAnimationBlendInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FJackFacialAnimationBlendInfo final
{
public:
	class FName                                   CurveName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x18];                                       // 0x0008(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackFacialAnimationBlendInfo) == 0x000008, "Wrong alignment on FJackFacialAnimationBlendInfo");
static_assert(sizeof(FJackFacialAnimationBlendInfo) == 0x000020, "Wrong size on FJackFacialAnimationBlendInfo");
static_assert(offsetof(FJackFacialAnimationBlendInfo, CurveName) == 0x000000, "Member 'FJackFacialAnimationBlendInfo::CurveName' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_TenseiFlagsTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TenseiFlagsTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TenseiFlagsTable) == 0x000008, "Wrong alignment on FJackLDT_TenseiFlagsTable");
static_assert(sizeof(FJackLDT_TenseiFlagsTable) == 0x000010, "Wrong size on FJackLDT_TenseiFlagsTable");

// ScriptStruct JackGame.JackFacialInfo_Mouth
// 0x0008 (0x0008 - 0x0000)
struct FJackFacialInfo_Mouth final
{
public:
	TWeakObjectPtr<class UAnimMontage>            Animation;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackFacialInfo_Mouth) == 0x000004, "Wrong alignment on FJackFacialInfo_Mouth");
static_assert(sizeof(FJackFacialInfo_Mouth) == 0x000008, "Wrong size on FJackFacialInfo_Mouth");
static_assert(offsetof(FJackFacialInfo_Mouth, Animation) == 0x000000, "Member 'FJackFacialInfo_Mouth::Animation' has a wrong offset!");

// ScriptStruct JackGame.JackSynchroCaptionTrackKey
// 0x0008 (0x0008 - 0x0000)
struct FJackSynchroCaptionTrackKey final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayToEnd;                                         // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackSynchroCaptionTrackKey) == 0x000004, "Wrong alignment on FJackSynchroCaptionTrackKey");
static_assert(sizeof(FJackSynchroCaptionTrackKey) == 0x000008, "Wrong size on FJackSynchroCaptionTrackKey");
static_assert(offsetof(FJackSynchroCaptionTrackKey, Time) == 0x000000, "Member 'FJackSynchroCaptionTrackKey::Time' has a wrong offset!");
static_assert(offsetof(FJackSynchroCaptionTrackKey, PlayToEnd) == 0x000004, "Member 'FJackSynchroCaptionTrackKey::PlayToEnd' has a wrong offset!");

// ScriptStruct JackGame.JackFacialInfo_Eye
// 0x0010 (0x0010 - 0x0000)
struct FJackFacialInfo_Eye final
{
public:
	TWeakObjectPtr<class UAnimMontage>            Animation;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlinkCycleMinSec;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlinkCycleMaxSec;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackFacialInfo_Eye) == 0x000004, "Wrong alignment on FJackFacialInfo_Eye");
static_assert(sizeof(FJackFacialInfo_Eye) == 0x000010, "Wrong size on FJackFacialInfo_Eye");
static_assert(offsetof(FJackFacialInfo_Eye, Animation) == 0x000000, "Member 'FJackFacialInfo_Eye::Animation' has a wrong offset!");
static_assert(offsetof(FJackFacialInfo_Eye, BlinkCycleMinSec) == 0x000008, "Member 'FJackFacialInfo_Eye::BlinkCycleMinSec' has a wrong offset!");
static_assert(offsetof(FJackFacialInfo_Eye, BlinkCycleMaxSec) == 0x00000C, "Member 'FJackFacialInfo_Eye::BlinkCycleMaxSec' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableFacialPresetInfo
// 0x0010 (0x0018 - 0x0008)
struct FJackDataTableFacialPresetInfo final : public FTableRowBase
{
public:
	class FName                                   UpperFaceName;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LowerFaceName;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableFacialPresetInfo) == 0x000008, "Wrong alignment on FJackDataTableFacialPresetInfo");
static_assert(sizeof(FJackDataTableFacialPresetInfo) == 0x000018, "Wrong size on FJackDataTableFacialPresetInfo");
static_assert(offsetof(FJackDataTableFacialPresetInfo, UpperFaceName) == 0x000008, "Member 'FJackDataTableFacialPresetInfo::UpperFaceName' has a wrong offset!");
static_assert(offsetof(FJackDataTableFacialPresetInfo, LowerFaceName) == 0x000010, "Member 'FJackDataTableFacialPresetInfo::LowerFaceName' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_NorthSkirtS1_AverageRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_NorthSkirtS1_AverageRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_NorthSkirtS1_AverageRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_NorthSkirtS1_AverageRot");
static_assert(sizeof(FJackLDT_RtEx_NorthSkirtS1_AverageRot) == 0x000010, "Wrong size on FJackLDT_RtEx_NorthSkirtS1_AverageRot");

// ScriptStruct JackGame.JackFlagJumperKeyValue
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackFlagJumperKeyValue final
{
public:
	float                                         TimeVar;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FlagName;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   JumpLabelName;                                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackFlagJumperKeyValue) == 0x000008, "Wrong alignment on FJackFlagJumperKeyValue");
static_assert(sizeof(FJackFlagJumperKeyValue) == 0x000018, "Wrong size on FJackFlagJumperKeyValue");
static_assert(offsetof(FJackFlagJumperKeyValue, TimeVar) == 0x000000, "Member 'FJackFlagJumperKeyValue::TimeVar' has a wrong offset!");
static_assert(offsetof(FJackFlagJumperKeyValue, FlagName) == 0x000008, "Member 'FJackFlagJumperKeyValue::FlagName' has a wrong offset!");
static_assert(offsetof(FJackFlagJumperKeyValue, JumpLabelName) == 0x000010, "Member 'FJackFlagJumperKeyValue::JumpLabelName' has a wrong offset!");

// ScriptStruct JackGame.JackFootSoundTrackKey
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackFootSoundTrackKey final
{
public:
	float                                         TimeVar;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacterFootstepType                    FootstepType;                                      // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketBoneName;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackFootSoundTrackKey) == 0x000008, "Wrong alignment on FJackFootSoundTrackKey");
static_assert(sizeof(FJackFootSoundTrackKey) == 0x000018, "Wrong size on FJackFootSoundTrackKey");
static_assert(offsetof(FJackFootSoundTrackKey, TimeVar) == 0x000000, "Member 'FJackFootSoundTrackKey::TimeVar' has a wrong offset!");
static_assert(offsetof(FJackFootSoundTrackKey, FootstepType) == 0x000004, "Member 'FJackFootSoundTrackKey::FootstepType' has a wrong offset!");
static_assert(offsetof(FJackFootSoundTrackKey, SocketBoneName) == 0x000008, "Member 'FJackFootSoundTrackKey::SocketBoneName' has a wrong offset!");
static_assert(offsetof(FJackFootSoundTrackKey, Volume) == 0x000010, "Member 'FJackFootSoundTrackKey::Volume' has a wrong offset!");

// ScriptStruct JackGame.JackScenarioTitleInfo
// 0x0028 (0x0028 - 0x0000)
struct FJackScenarioTitleInfo final
{
public:
	bool                                          bScenarioStartFlag;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ScenarioTitleName;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RestartPoint;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScenarioProgress;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScenarioID;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackScenarioTitleInfo) == 0x000008, "Wrong alignment on FJackScenarioTitleInfo");
static_assert(sizeof(FJackScenarioTitleInfo) == 0x000028, "Wrong size on FJackScenarioTitleInfo");
static_assert(offsetof(FJackScenarioTitleInfo, bScenarioStartFlag) == 0x000000, "Member 'FJackScenarioTitleInfo::bScenarioStartFlag' has a wrong offset!");
static_assert(offsetof(FJackScenarioTitleInfo, ScenarioTitleName) == 0x000008, "Member 'FJackScenarioTitleInfo::ScenarioTitleName' has a wrong offset!");
static_assert(offsetof(FJackScenarioTitleInfo, RestartPoint) == 0x000018, "Member 'FJackScenarioTitleInfo::RestartPoint' has a wrong offset!");
static_assert(offsetof(FJackScenarioTitleInfo, ScenarioProgress) == 0x00001C, "Member 'FJackScenarioTitleInfo::ScenarioProgress' has a wrong offset!");
static_assert(offsetof(FJackScenarioTitleInfo, ScenarioID) == 0x000020, "Member 'FJackScenarioTitleInfo::ScenarioID' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_ResidentProjectileClass
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ResidentProjectileClass final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ResidentProjectileClass) == 0x000008, "Wrong alignment on FJackLDT_ResidentProjectileClass");
static_assert(sizeof(FJackLDT_ResidentProjectileClass) == 0x000010, "Wrong size on FJackLDT_ResidentProjectileClass");

// ScriptStruct JackGame.JackGameResumeCommandInfo
// 0x0028 (0x0028 - 0x0000)
struct FJackGameResumeCommandInfo final
{
public:
	class FName                                   Category;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Value1;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Value2;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Cmds;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackGameResumeCommandInfo) == 0x000008, "Wrong alignment on FJackGameResumeCommandInfo");
static_assert(sizeof(FJackGameResumeCommandInfo) == 0x000028, "Wrong size on FJackGameResumeCommandInfo");
static_assert(offsetof(FJackGameResumeCommandInfo, Category) == 0x000000, "Member 'FJackGameResumeCommandInfo::Category' has a wrong offset!");
static_assert(offsetof(FJackGameResumeCommandInfo, Value1) == 0x000008, "Member 'FJackGameResumeCommandInfo::Value1' has a wrong offset!");
static_assert(offsetof(FJackGameResumeCommandInfo, Value2) == 0x000010, "Member 'FJackGameResumeCommandInfo::Value2' has a wrong offset!");
static_assert(offsetof(FJackGameResumeCommandInfo, Cmds) == 0x000018, "Member 'FJackGameResumeCommandInfo::Cmds' has a wrong offset!");

// ScriptStruct JackGame.JackGameCharacterSeedCorrectParameters
// 0x0028 (0x0028 - 0x0000)
struct FJackGameCharacterSeedCorrectParameters final
{
public:
	int32                                         Tikara;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minomamori;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Subayasa;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Kiyousa;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Miryoku;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KougekiMaryoku;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KaifukuMaryoku;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxHP;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMP;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TokugiPoint;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackGameCharacterSeedCorrectParameters) == 0x000004, "Wrong alignment on FJackGameCharacterSeedCorrectParameters");
static_assert(sizeof(FJackGameCharacterSeedCorrectParameters) == 0x000028, "Wrong size on FJackGameCharacterSeedCorrectParameters");
static_assert(offsetof(FJackGameCharacterSeedCorrectParameters, Tikara) == 0x000000, "Member 'FJackGameCharacterSeedCorrectParameters::Tikara' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterSeedCorrectParameters, Minomamori) == 0x000004, "Member 'FJackGameCharacterSeedCorrectParameters::Minomamori' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterSeedCorrectParameters, Subayasa) == 0x000008, "Member 'FJackGameCharacterSeedCorrectParameters::Subayasa' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterSeedCorrectParameters, Kiyousa) == 0x00000C, "Member 'FJackGameCharacterSeedCorrectParameters::Kiyousa' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterSeedCorrectParameters, Miryoku) == 0x000010, "Member 'FJackGameCharacterSeedCorrectParameters::Miryoku' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterSeedCorrectParameters, KougekiMaryoku) == 0x000014, "Member 'FJackGameCharacterSeedCorrectParameters::KougekiMaryoku' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterSeedCorrectParameters, KaifukuMaryoku) == 0x000018, "Member 'FJackGameCharacterSeedCorrectParameters::KaifukuMaryoku' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterSeedCorrectParameters, MaxHP) == 0x00001C, "Member 'FJackGameCharacterSeedCorrectParameters::MaxHP' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterSeedCorrectParameters, MaxMP) == 0x000020, "Member 'FJackGameCharacterSeedCorrectParameters::MaxMP' has a wrong offset!");
static_assert(offsetof(FJackGameCharacterSeedCorrectParameters, TokugiPoint) == 0x000024, "Member 'FJackGameCharacterSeedCorrectParameters::TokugiPoint' has a wrong offset!");

// ScriptStruct JackGame.JackGameFlagDefCutScene
// 0x0001 (0x0001 - 0x0000)
struct FJackGameFlagDefCutScene final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackGameFlagDefCutScene) == 0x000001, "Wrong alignment on FJackGameFlagDefCutScene");
static_assert(sizeof(FJackGameFlagDefCutScene) == 0x000001, "Wrong size on FJackGameFlagDefCutScene");

// ScriptStruct JackGame.JackGameFlagDefGimmick
// 0x0001 (0x0001 - 0x0000)
struct FJackGameFlagDefGimmick final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackGameFlagDefGimmick) == 0x000001, "Wrong alignment on FJackGameFlagDefGimmick");
static_assert(sizeof(FJackGameFlagDefGimmick) == 0x000001, "Wrong size on FJackGameFlagDefGimmick");

// ScriptStruct JackGame.JackLDT_BankTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_BankTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_BankTable) == 0x000008, "Wrong alignment on FJackLDT_BankTable");
static_assert(sizeof(FJackLDT_BankTable) == 0x000010, "Wrong size on FJackLDT_BankTable");

// ScriptStruct JackGame.JackGameFlagDefQuest
// 0x0001 (0x0001 - 0x0000)
struct FJackGameFlagDefQuest final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackGameFlagDefQuest) == 0x000001, "Wrong alignment on FJackGameFlagDefQuest");
static_assert(sizeof(FJackGameFlagDefQuest) == 0x000001, "Wrong size on FJackGameFlagDefQuest");

// ScriptStruct JackGame.JackGameFlagDefTemporary
// 0x0001 (0x0001 - 0x0000)
struct FJackGameFlagDefTemporary final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackGameFlagDefTemporary) == 0x000001, "Wrong alignment on FJackGameFlagDefTemporary");
static_assert(sizeof(FJackGameFlagDefTemporary) == 0x000001, "Wrong size on FJackGameFlagDefTemporary");

// ScriptStruct JackGame.JackMiniGameUmaRaceData
// 0x00F0 (0x00F0 - 0x0000)
struct alignas(0x04) FJackMiniGameUmaRaceData final
{
public:
	uint8                                         Pad_0[0xF0];                                       // 0x0000(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMiniGameUmaRaceData) == 0x000004, "Wrong alignment on FJackMiniGameUmaRaceData");
static_assert(sizeof(FJackMiniGameUmaRaceData) == 0x0000F0, "Wrong size on FJackMiniGameUmaRaceData");

// ScriptStruct JackGame.JackLDT_DamageEffectTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_DamageEffectTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_DamageEffectTable) == 0x000008, "Wrong alignment on FJackLDT_DamageEffectTable");
static_assert(sizeof(FJackLDT_DamageEffectTable) == 0x000010, "Wrong size on FJackLDT_DamageEffectTable");

// ScriptStruct JackGame.JackHitStopData
// 0x0010 (0x0010 - 0x0000)
struct FJackHitStopData final
{
public:
	class UCurveFloat*                            SlomoCurve;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSlomoWorld;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackHitStopData) == 0x000008, "Wrong alignment on FJackHitStopData");
static_assert(sizeof(FJackHitStopData) == 0x000010, "Wrong size on FJackHitStopData");
static_assert(offsetof(FJackHitStopData, SlomoCurve) == 0x000000, "Member 'FJackHitStopData::SlomoCurve' has a wrong offset!");
static_assert(offsetof(FJackHitStopData, bSlomoWorld) == 0x000008, "Member 'FJackHitStopData::bSlomoWorld' has a wrong offset!");

// ScriptStruct JackGame.JackNameTrackKey
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackNameTrackKey final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeVar;                                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackNameTrackKey) == 0x000008, "Wrong alignment on FJackNameTrackKey");
static_assert(sizeof(FJackNameTrackKey) == 0x000010, "Wrong size on FJackNameTrackKey");
static_assert(offsetof(FJackNameTrackKey, Name) == 0x000000, "Member 'FJackNameTrackKey::Name' has a wrong offset!");
static_assert(offsetof(FJackNameTrackKey, TimeVar) == 0x000008, "Member 'FJackNameTrackKey::TimeVar' has a wrong offset!");

// ScriptStruct JackGame.JackDlcInformation
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FJackDlcInformation final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDlcInformation) == 0x000008, "Wrong alignment on FJackDlcInformation");
static_assert(sizeof(FJackDlcInformation) == 0x000028, "Wrong size on FJackDlcInformation");

// ScriptStruct JackGame.JackLightChangeInfo
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FJackLightChangeInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackLightChangeInfo) == 0x000004, "Wrong alignment on FJackLightChangeInfo");
static_assert(sizeof(FJackLightChangeInfo) == 0x000008, "Wrong size on FJackLightChangeInfo");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_N004_MaxOrMinRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_N004_MaxOrMinRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_N004_MaxOrMinRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_N004_MaxOrMinRot");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_N004_MaxOrMinRot) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_N004_MaxOrMinRot");

// ScriptStruct JackGame.JackLipDataTableParser
// 0x00B8 (0x00B8 - 0x0000)
struct alignas(0x08) FJackLipDataTableParser final
{
public:
	uint8                                         Pad_0[0xB8];                                       // 0x0000(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackLipDataTableParser) == 0x000008, "Wrong alignment on FJackLipDataTableParser");
static_assert(sizeof(FJackLipDataTableParser) == 0x0000B8, "Wrong size on FJackLipDataTableParser");

// ScriptStruct JackGame.JackLDT_TextSerifuCS
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextSerifuCS final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextSerifuCS) == 0x000008, "Wrong alignment on FJackLDT_TextSerifuCS");
static_assert(sizeof(FJackLDT_TextSerifuCS) == 0x000010, "Wrong size on FJackLDT_TextSerifuCS");

// ScriptStruct JackGame.JackLDT_PartyTalkData_S050
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_S050 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_S050) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_S050");
static_assert(sizeof(FJackLDT_PartyTalkData_S050) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_S050");

// ScriptStruct JackGame.JackLDT_PartyTalkData_C010
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_C010 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_C010) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_C010");
static_assert(sizeof(FJackLDT_PartyTalkData_C010) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_C010");

// ScriptStruct JackGame.JackLDT_PartyTalkData_B160
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_B160 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_B160) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_B160");
static_assert(sizeof(FJackLDT_PartyTalkData_B160) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_B160");

// ScriptStruct JackGame.JackLDT_PartyTalkData_B120
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_B120 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_B120) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_B120");
static_assert(sizeof(FJackLDT_PartyTalkData_B120) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_B120");

// ScriptStruct JackGame.JackLDT_PartyTalkData_B100
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_B100 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_B100) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_B100");
static_assert(sizeof(FJackLDT_PartyTalkData_B100) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_B100");

// ScriptStruct JackGame.JackLDT_Sim_DancerSkirt_Lerp2BonesAndClamp
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_DancerSkirt_Lerp2BonesAndClamp final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_DancerSkirt_Lerp2BonesAndClamp) == 0x000008, "Wrong alignment on FJackLDT_Sim_DancerSkirt_Lerp2BonesAndClamp");
static_assert(sizeof(FJackLDT_Sim_DancerSkirt_Lerp2BonesAndClamp) == 0x000010, "Wrong size on FJackLDT_Sim_DancerSkirt_Lerp2BonesAndClamp");

// ScriptStruct JackGame.JackLDT_PartyTalkData_B090
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_B090 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_B090) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_B090");
static_assert(sizeof(FJackLDT_PartyTalkData_B090) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_B090");

// ScriptStruct JackGame.JackLDT_PartyTalkData_B060
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_B060 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_B060) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_B060");
static_assert(sizeof(FJackLDT_PartyTalkData_B060) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_B060");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtQ1_AverageRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtQ1_AverageRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtQ1_AverageRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtQ1_AverageRot");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtQ1_AverageRot) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtQ1_AverageRot");

// ScriptStruct JackGame.JackLDT_PartyTalkData_B040
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_B040 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_B040) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_B040");
static_assert(sizeof(FJackLDT_PartyTalkData_B040) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_B040");

// ScriptStruct JackGame.JackLDT_PartyTalkData_B030
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_B030 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_B030) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_B030");
static_assert(sizeof(FJackLDT_PartyTalkData_B030) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_B030");

// ScriptStruct JackGame.JackLDT_GameFlagDataTemporary
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_GameFlagDataTemporary final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_GameFlagDataTemporary) == 0x000008, "Wrong alignment on FJackLDT_GameFlagDataTemporary");
static_assert(sizeof(FJackLDT_GameFlagDataTemporary) == 0x000010, "Wrong size on FJackLDT_GameFlagDataTemporary");

// ScriptStruct JackGame.JackLDT_PartyTalkData_A170
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_A170 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_A170) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_A170");
static_assert(sizeof(FJackLDT_PartyTalkData_A170) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_A170");

// ScriptStruct JackGame.JackMantanActionResult
// 0x0010 (0x0010 - 0x0000)
struct FJackMantanActionResult final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackGameCharacter*                     Target;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMantanActionResult) == 0x000008, "Wrong alignment on FJackMantanActionResult");
static_assert(sizeof(FJackMantanActionResult) == 0x000010, "Wrong size on FJackMantanActionResult");
static_assert(offsetof(FJackMantanActionResult, Target) == 0x000008, "Member 'FJackMantanActionResult::Target' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_N004_Up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_N004_Up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_N004_Up) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_N004_Up");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_N004_Up) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_N004_Up");

// ScriptStruct JackGame.JackLDT_PartyTalkData_A150
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_A150 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_A150) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_A150");
static_assert(sizeof(FJackLDT_PartyTalkData_A150) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_A150");

// ScriptStruct JackGame.JackMeosiSlotReelLightOff
// 0x0010 (0x0010 - 0x0000)
struct FJackMeosiSlotReelLightOff final
{
public:
	TArray<bool>                                  LightOffTimes;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMeosiSlotReelLightOff) == 0x000008, "Wrong alignment on FJackMeosiSlotReelLightOff");
static_assert(sizeof(FJackMeosiSlotReelLightOff) == 0x000010, "Wrong size on FJackMeosiSlotReelLightOff");
static_assert(offsetof(FJackMeosiSlotReelLightOff, LightOffTimes) == 0x000000, "Member 'FJackMeosiSlotReelLightOff::LightOffTimes' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_PartyTalkData_A110
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_A110 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_A110) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_A110");
static_assert(sizeof(FJackLDT_PartyTalkData_A110) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_A110");

// ScriptStruct JackGame.JackOddEffectAttachedParticle
// 0x0038 (0x0038 - 0x0000)
struct FJackOddEffectAttachedParticle final
{
public:
	class UParticleSystem*                        Particle;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldSetActor;                                   // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TranslucencySortPriority;                          // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeAffectedByMaterialAnimation;                    // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttach;                                           // 0x0021(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               AttachLocationType;                                // 0x0022(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAbsoluteLocation;                                 // 0x0023(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAbsoluteRotation;                                 // 0x0024(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAbsoluteScale;                                    // 0x0025(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCameraLocation;                                   // 0x0026(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkelVertSurf;                                     // 0x0027(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJackCameraShakeParam>          CameraShakes;                                      // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackOddEffectAttachedParticle) == 0x000008, "Wrong alignment on FJackOddEffectAttachedParticle");
static_assert(sizeof(FJackOddEffectAttachedParticle) == 0x000038, "Wrong size on FJackOddEffectAttachedParticle");
static_assert(offsetof(FJackOddEffectAttachedParticle, Particle) == 0x000000, "Member 'FJackOddEffectAttachedParticle::Particle' has a wrong offset!");
static_assert(offsetof(FJackOddEffectAttachedParticle, Sound) == 0x000008, "Member 'FJackOddEffectAttachedParticle::Sound' has a wrong offset!");
static_assert(offsetof(FJackOddEffectAttachedParticle, SocketName) == 0x000010, "Member 'FJackOddEffectAttachedParticle::SocketName' has a wrong offset!");
static_assert(offsetof(FJackOddEffectAttachedParticle, bShouldSetActor) == 0x000018, "Member 'FJackOddEffectAttachedParticle::bShouldSetActor' has a wrong offset!");
static_assert(offsetof(FJackOddEffectAttachedParticle, TranslucencySortPriority) == 0x00001C, "Member 'FJackOddEffectAttachedParticle::TranslucencySortPriority' has a wrong offset!");
static_assert(offsetof(FJackOddEffectAttachedParticle, bBeAffectedByMaterialAnimation) == 0x000020, "Member 'FJackOddEffectAttachedParticle::bBeAffectedByMaterialAnimation' has a wrong offset!");
static_assert(offsetof(FJackOddEffectAttachedParticle, bAttach) == 0x000021, "Member 'FJackOddEffectAttachedParticle::bAttach' has a wrong offset!");
static_assert(offsetof(FJackOddEffectAttachedParticle, AttachLocationType) == 0x000022, "Member 'FJackOddEffectAttachedParticle::AttachLocationType' has a wrong offset!");
static_assert(offsetof(FJackOddEffectAttachedParticle, bAbsoluteLocation) == 0x000023, "Member 'FJackOddEffectAttachedParticle::bAbsoluteLocation' has a wrong offset!");
static_assert(offsetof(FJackOddEffectAttachedParticle, bAbsoluteRotation) == 0x000024, "Member 'FJackOddEffectAttachedParticle::bAbsoluteRotation' has a wrong offset!");
static_assert(offsetof(FJackOddEffectAttachedParticle, bAbsoluteScale) == 0x000025, "Member 'FJackOddEffectAttachedParticle::bAbsoluteScale' has a wrong offset!");
static_assert(offsetof(FJackOddEffectAttachedParticle, bCameraLocation) == 0x000026, "Member 'FJackOddEffectAttachedParticle::bCameraLocation' has a wrong offset!");
static_assert(offsetof(FJackOddEffectAttachedParticle, bSkelVertSurf) == 0x000027, "Member 'FJackOddEffectAttachedParticle::bSkelVertSurf' has a wrong offset!");
static_assert(offsetof(FJackOddEffectAttachedParticle, CameraShakes) == 0x000028, "Member 'FJackOddEffectAttachedParticle::CameraShakes' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_PartyTalkData_A080
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_A080 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_A080) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_A080");
static_assert(sizeof(FJackLDT_PartyTalkData_A080) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_A080");

// ScriptStruct JackGame.JackLDT_ShopTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ShopTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ShopTable) == 0x000008, "Wrong alignment on FJackLDT_ShopTable");
static_assert(sizeof(FJackLDT_ShopTable) == 0x000010, "Wrong size on FJackLDT_ShopTable");

// ScriptStruct JackGame.JackLDT_PartyTalkData_A050
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_A050 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_A050) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_A050");
static_assert(sizeof(FJackLDT_PartyTalkData_A050) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_A050");

// ScriptStruct JackGame.JackLDT_PartyTalkData_A020
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkData_A020 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkData_A020) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkData_A020");
static_assert(sizeof(FJackLDT_PartyTalkData_A020) == 0x000010, "Wrong size on FJackLDT_PartyTalkData_A020");

// ScriptStruct JackGame.JackLDT_ScenarioArasuzi
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ScenarioArasuzi final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ScenarioArasuzi) == 0x000008, "Wrong alignment on FJackLDT_ScenarioArasuzi");
static_assert(sizeof(FJackLDT_ScenarioArasuzi) == 0x000010, "Wrong size on FJackLDT_ScenarioArasuzi");

// ScriptStruct JackGame.JackLDT_Weather
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Weather final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Weather) == 0x000008, "Wrong alignment on FJackLDT_Weather");
static_assert(sizeof(FJackLDT_Weather) == 0x000010, "Wrong size on FJackLDT_Weather");

// ScriptStruct JackGame.JackLDT_ActionAIEvaluateScoreCheck
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ActionAIEvaluateScoreCheck final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ActionAIEvaluateScoreCheck) == 0x000008, "Wrong alignment on FJackLDT_ActionAIEvaluateScoreCheck");
static_assert(sizeof(FJackLDT_ActionAIEvaluateScoreCheck) == 0x000010, "Wrong size on FJackLDT_ActionAIEvaluateScoreCheck");

// ScriptStruct JackGame.JackLDT_RuraRestriction
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RuraRestriction final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RuraRestriction) == 0x000008, "Wrong alignment on FJackLDT_RuraRestriction");
static_assert(sizeof(FJackLDT_RuraRestriction) == 0x000010, "Wrong size on FJackLDT_RuraRestriction");

// ScriptStruct JackGame.JackLDT_Restart
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Restart final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Restart) == 0x000008, "Wrong alignment on FJackLDT_Restart");
static_assert(sizeof(FJackLDT_Restart) == 0x000010, "Wrong size on FJackLDT_Restart");

// ScriptStruct JackGame.JackLDT_MapStart
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MapStart final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MapStart) == 0x000008, "Wrong alignment on FJackLDT_MapStart");
static_assert(sizeof(FJackLDT_MapStart) == 0x000010, "Wrong size on FJackLDT_MapStart");

// ScriptStruct JackGame.JackLDT_MeosiSlotReelArray
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotReelArray final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotReelArray) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotReelArray");
static_assert(sizeof(FJackLDT_MeosiSlotReelArray) == 0x000010, "Wrong size on FJackLDT_MeosiSlotReelArray");

// ScriptStruct JackGame.JackLDT_Map
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Map final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Map) == 0x000008, "Wrong alignment on FJackLDT_Map");
static_assert(sizeof(FJackLDT_Map) == 0x000010, "Wrong size on FJackLDT_Map");

// ScriptStruct JackGame.JackLDT_ItemGettable_TreasureBox
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ItemGettable_TreasureBox final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ItemGettable_TreasureBox) == 0x000008, "Wrong alignment on FJackLDT_ItemGettable_TreasureBox");
static_assert(sizeof(FJackLDT_ItemGettable_TreasureBox) == 0x000010, "Wrong size on FJackLDT_ItemGettable_TreasureBox");

// ScriptStruct JackGame.JackLDT_MeosiSlotPseudoContinuation_Stock
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotPseudoContinuation_Stock final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotPseudoContinuation_Stock) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotPseudoContinuation_Stock");
static_assert(sizeof(FJackLDT_MeosiSlotPseudoContinuation_Stock) == 0x000010, "Wrong size on FJackLDT_MeosiSlotPseudoContinuation_Stock");

// ScriptStruct JackGame.JackLDT_ItemGettable_Common
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ItemGettable_Common final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ItemGettable_Common) == 0x000008, "Wrong alignment on FJackLDT_ItemGettable_Common");
static_assert(sizeof(FJackLDT_ItemGettable_Common) == 0x000010, "Wrong size on FJackLDT_ItemGettable_Common");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_N001_Low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_N001_Low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_N001_Low) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_N001_Low");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_N001_Low) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_N001_Low");

// ScriptStruct JackGame.JackLDT_BattleAutoCameraCollision
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_BattleAutoCameraCollision final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_BattleAutoCameraCollision) == 0x000008, "Wrong alignment on FJackLDT_BattleAutoCameraCollision");
static_assert(sizeof(FJackLDT_BattleAutoCameraCollision) == 0x000010, "Wrong size on FJackLDT_BattleAutoCameraCollision");

// ScriptStruct JackGame.JackLDT_VoiceDrama_V_130
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_VoiceDrama_V_130 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_VoiceDrama_V_130) == 0x000008, "Wrong alignment on FJackLDT_VoiceDrama_V_130");
static_assert(sizeof(FJackLDT_VoiceDrama_V_130) == 0x000010, "Wrong size on FJackLDT_VoiceDrama_V_130");

// ScriptStruct JackGame.JackLDT_Pose_C_RearHairG1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_C_RearHairG1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_C_RearHairG1) == 0x000008, "Wrong alignment on FJackLDT_Pose_C_RearHairG1");
static_assert(sizeof(FJackLDT_Pose_C_RearHairG1) == 0x000010, "Wrong size on FJackLDT_Pose_C_RearHairG1");

// ScriptStruct JackGame.JackLDT_MeosiSlotMonsterRefundRate
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMonsterRefundRate final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMonsterRefundRate) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMonsterRefundRate");
static_assert(sizeof(FJackLDT_MeosiSlotMonsterRefundRate) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMonsterRefundRate");

// ScriptStruct JackGame.JackLDT_VoiceDrama_V_120
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_VoiceDrama_V_120 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_VoiceDrama_V_120) == 0x000008, "Wrong alignment on FJackLDT_VoiceDrama_V_120");
static_assert(sizeof(FJackLDT_VoiceDrama_V_120) == 0x000010, "Wrong size on FJackLDT_VoiceDrama_V_120");

// ScriptStruct JackGame.JackLDT_VoiceDrama_V_110
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_VoiceDrama_V_110 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_VoiceDrama_V_110) == 0x000008, "Wrong alignment on FJackLDT_VoiceDrama_V_110");
static_assert(sizeof(FJackLDT_VoiceDrama_V_110) == 0x000010, "Wrong size on FJackLDT_VoiceDrama_V_110");

// ScriptStruct JackGame.JackLDT_VoiceDrama_V_100
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_VoiceDrama_V_100 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_VoiceDrama_V_100) == 0x000008, "Wrong alignment on FJackLDT_VoiceDrama_V_100");
static_assert(sizeof(FJackLDT_VoiceDrama_V_100) == 0x000010, "Wrong size on FJackLDT_VoiceDrama_V_100");

// ScriptStruct JackGame.JackLDT_RtEx_NmSkirtA1_low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_NmSkirtA1_low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_NmSkirtA1_low) == 0x000008, "Wrong alignment on FJackLDT_RtEx_NmSkirtA1_low");
static_assert(sizeof(FJackLDT_RtEx_NmSkirtA1_low) == 0x000010, "Wrong size on FJackLDT_RtEx_NmSkirtA1_low");

// ScriptStruct JackGame.JackLDT_VoiceDrama_V_090
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_VoiceDrama_V_090 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_VoiceDrama_V_090) == 0x000008, "Wrong alignment on FJackLDT_VoiceDrama_V_090");
static_assert(sizeof(FJackLDT_VoiceDrama_V_090) == 0x000010, "Wrong size on FJackLDT_VoiceDrama_V_090");

// ScriptStruct JackGame.JackLDT_VoiceDrama_V_060
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_VoiceDrama_V_060 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_VoiceDrama_V_060) == 0x000008, "Wrong alignment on FJackLDT_VoiceDrama_V_060");
static_assert(sizeof(FJackLDT_VoiceDrama_V_060) == 0x000010, "Wrong size on FJackLDT_VoiceDrama_V_060");

// ScriptStruct JackGame.JackLDT_VoiceDrama_V_030
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_VoiceDrama_V_030 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_VoiceDrama_V_030) == 0x000008, "Wrong alignment on FJackLDT_VoiceDrama_V_030");
static_assert(sizeof(FJackLDT_VoiceDrama_V_030) == 0x000010, "Wrong size on FJackLDT_VoiceDrama_V_030");

// ScriptStruct JackGame.JackLDT_VoiceDrama_V_020
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_VoiceDrama_V_020 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_VoiceDrama_V_020) == 0x000008, "Wrong alignment on FJackLDT_VoiceDrama_V_020");
static_assert(sizeof(FJackLDT_VoiceDrama_V_020) == 0x000010, "Wrong size on FJackLDT_VoiceDrama_V_020");

// ScriptStruct JackGame.JackLDT_MeosiSlotSptHandsPoint
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotSptHandsPoint final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotSptHandsPoint) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotSptHandsPoint");
static_assert(sizeof(FJackLDT_MeosiSlotSptHandsPoint) == 0x000010, "Wrong size on FJackLDT_MeosiSlotSptHandsPoint");

// ScriptStruct JackGame.JackLDT_VoiceDrama_V_000
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_VoiceDrama_V_000 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_VoiceDrama_V_000) == 0x000008, "Wrong alignment on FJackLDT_VoiceDrama_V_000");
static_assert(sizeof(FJackLDT_VoiceDrama_V_000) == 0x000010, "Wrong size on FJackLDT_VoiceDrama_V_000");

// ScriptStruct JackGame.JackLDT_VoiceDrama_HDPafuPafu_SoundEffect
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_VoiceDrama_HDPafuPafu_SoundEffect final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_VoiceDrama_HDPafuPafu_SoundEffect) == 0x000008, "Wrong alignment on FJackLDT_VoiceDrama_HDPafuPafu_SoundEffect");
static_assert(sizeof(FJackLDT_VoiceDrama_HDPafuPafu_SoundEffect) == 0x000010, "Wrong size on FJackLDT_VoiceDrama_HDPafuPafu_SoundEffect");

// ScriptStruct JackGame.JackLDT_RtEx_FBSkirtB1_low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FBSkirtB1_low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FBSkirtB1_low) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FBSkirtB1_low");
static_assert(sizeof(FJackLDT_RtEx_FBSkirtB1_low) == 0x000010, "Wrong size on FJackLDT_RtEx_FBSkirtB1_low");

// ScriptStruct JackGame.JackLDT_MeosiSlotSptAuraPoint
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotSptAuraPoint final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotSptAuraPoint) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotSptAuraPoint");
static_assert(sizeof(FJackLDT_MeosiSlotSptAuraPoint) == 0x000010, "Wrong size on FJackLDT_MeosiSlotSptAuraPoint");

// ScriptStruct JackGame.JackLDT_VoiceDramaInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_VoiceDramaInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_VoiceDramaInfo) == 0x000008, "Wrong alignment on FJackLDT_VoiceDramaInfo");
static_assert(sizeof(FJackLDT_VoiceDramaInfo) == 0x000010, "Wrong size on FJackLDT_VoiceDramaInfo");

// ScriptStruct JackGame.JackLDT_VoiceDramaDLCInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_VoiceDramaDLCInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_VoiceDramaDLCInfo) == 0x000008, "Wrong alignment on FJackLDT_VoiceDramaDLCInfo");
static_assert(sizeof(FJackLDT_VoiceDramaDLCInfo) == 0x000010, "Wrong size on FJackLDT_VoiceDramaDLCInfo");

// ScriptStruct JackGame.JackLDT_Sim_TailSkirtA1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_TailSkirtA1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_TailSkirtA1) == 0x000008, "Wrong alignment on FJackLDT_Sim_TailSkirtA1");
static_assert(sizeof(FJackLDT_Sim_TailSkirtA1) == 0x000010, "Wrong size on FJackLDT_Sim_TailSkirtA1");

// ScriptStruct JackGame.JackLDT_V004_BodyEx
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_V004_BodyEx final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_V004_BodyEx) == 0x000008, "Wrong alignment on FJackLDT_V004_BodyEx");
static_assert(sizeof(FJackLDT_V004_BodyEx) == 0x000010, "Wrong size on FJackLDT_V004_BodyEx");

// ScriptStruct JackGame.JackLDT_MeosiSlotMonsterRecruitProbability
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMonsterRecruitProbability final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMonsterRecruitProbability) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMonsterRecruitProbability");
static_assert(sizeof(FJackLDT_MeosiSlotMonsterRecruitProbability) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMonsterRecruitProbability");

// ScriptStruct JackGame.JackLDT_V002_BodyEx
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_V002_BodyEx final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_V002_BodyEx) == 0x000008, "Wrong alignment on FJackLDT_V002_BodyEx");
static_assert(sizeof(FJackLDT_V002_BodyEx) == 0x000010, "Wrong size on FJackLDT_V002_BodyEx");

// ScriptStruct JackGame.JackLDT_Sim_MantleC_N002_low_Cs1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_MantleC_N002_low_Cs1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_MantleC_N002_low_Cs1) == 0x000008, "Wrong alignment on FJackLDT_Sim_MantleC_N002_low_Cs1");
static_assert(sizeof(FJackLDT_Sim_MantleC_N002_low_Cs1) == 0x000010, "Wrong size on FJackLDT_Sim_MantleC_N002_low_Cs1");

// ScriptStruct JackGame.JackLDT_G377E007_Up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_G377E007_Up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_G377E007_Up) == 0x000008, "Wrong alignment on FJackLDT_G377E007_Up");
static_assert(sizeof(FJackLDT_G377E007_Up) == 0x000010, "Wrong size on FJackLDT_G377E007_Up");

// ScriptStruct JackGame.JackLDT_MeosiSlotMonsterList_Rank_SS
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMonsterList_Rank_SS final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMonsterList_Rank_SS) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMonsterList_Rank_SS");
static_assert(sizeof(FJackLDT_MeosiSlotMonsterList_Rank_SS) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMonsterList_Rank_SS");

// ScriptStruct JackGame.JackLDT_G377E007_Low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_G377E007_Low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_G377E007_Low) == 0x000008, "Wrong alignment on FJackLDT_G377E007_Low");
static_assert(sizeof(FJackLDT_G377E007_Low) == 0x000010, "Wrong size on FJackLDT_G377E007_Low");

// ScriptStruct JackGame.JackLDT_G377E005
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_G377E005 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_G377E005) == 0x000008, "Wrong alignment on FJackLDT_G377E005");
static_assert(sizeof(FJackLDT_G377E005) == 0x000010, "Wrong size on FJackLDT_G377E005");

// ScriptStruct JackGame.JackLDT_Vehicle_V205_E001_Sync
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Vehicle_V205_E001_Sync final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Vehicle_V205_E001_Sync) == 0x000008, "Wrong alignment on FJackLDT_Vehicle_V205_E001_Sync");
static_assert(sizeof(FJackLDT_Vehicle_V205_E001_Sync) == 0x000010, "Wrong size on FJackLDT_Vehicle_V205_E001_Sync");

// ScriptStruct JackGame.JackLDT_Vehicle_V204_E001_Sync
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Vehicle_V204_E001_Sync final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Vehicle_V204_E001_Sync) == 0x000008, "Wrong alignment on FJackLDT_Vehicle_V204_E001_Sync");
static_assert(sizeof(FJackLDT_Vehicle_V204_E001_Sync) == 0x000010, "Wrong size on FJackLDT_Vehicle_V204_E001_Sync");

// ScriptStruct JackGame.JackLDT_MeosiSlotMonsterList_Rank_D
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMonsterList_Rank_D final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMonsterList_Rank_D) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMonsterList_Rank_D");
static_assert(sizeof(FJackLDT_MeosiSlotMonsterList_Rank_D) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMonsterList_Rank_D");

// ScriptStruct JackGame.JackLDT_Vehicle_V203_E001_Sync
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Vehicle_V203_E001_Sync final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Vehicle_V203_E001_Sync) == 0x000008, "Wrong alignment on FJackLDT_Vehicle_V203_E001_Sync");
static_assert(sizeof(FJackLDT_Vehicle_V203_E001_Sync) == 0x000010, "Wrong size on FJackLDT_Vehicle_V203_E001_Sync");

// ScriptStruct JackGame.JackLDT_Vehicle_V202_E001_Sync
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Vehicle_V202_E001_Sync final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Vehicle_V202_E001_Sync) == 0x000008, "Wrong alignment on FJackLDT_Vehicle_V202_E001_Sync");
static_assert(sizeof(FJackLDT_Vehicle_V202_E001_Sync) == 0x000010, "Wrong size on FJackLDT_Vehicle_V202_E001_Sync");

// ScriptStruct JackGame.JackLDT_Vehicle_V201_E001_Sync
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Vehicle_V201_E001_Sync final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Vehicle_V201_E001_Sync) == 0x000008, "Wrong alignment on FJackLDT_Vehicle_V201_E001_Sync");
static_assert(sizeof(FJackLDT_Vehicle_V201_E001_Sync) == 0x000010, "Wrong size on FJackLDT_Vehicle_V201_E001_Sync");

// ScriptStruct JackGame.JackLDT_RtEx_P004_Skirt_low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_P004_Skirt_low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_P004_Skirt_low) == 0x000008, "Wrong alignment on FJackLDT_RtEx_P004_Skirt_low");
static_assert(sizeof(FJackLDT_RtEx_P004_Skirt_low) == 0x000010, "Wrong size on FJackLDT_RtEx_P004_Skirt_low");

// ScriptStruct JackGame.JackLDT_MeosiSlotScenarioMamono
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotScenarioMamono final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotScenarioMamono) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotScenarioMamono");
static_assert(sizeof(FJackLDT_MeosiSlotScenarioMamono) == 0x000010, "Wrong size on FJackLDT_MeosiSlotScenarioMamono");

// ScriptStruct JackGame.JackLDT_Vehicle_V101_E001_Sync
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Vehicle_V101_E001_Sync final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Vehicle_V101_E001_Sync) == 0x000008, "Wrong alignment on FJackLDT_Vehicle_V101_E001_Sync");
static_assert(sizeof(FJackLDT_Vehicle_V101_E001_Sync) == 0x000010, "Wrong size on FJackLDT_Vehicle_V101_E001_Sync");

// ScriptStruct JackGame.JackLDT_Vehicle_V012_E001_Sync
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Vehicle_V012_E001_Sync final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Vehicle_V012_E001_Sync) == 0x000008, "Wrong alignment on FJackLDT_Vehicle_V012_E001_Sync");
static_assert(sizeof(FJackLDT_Vehicle_V012_E001_Sync) == 0x000010, "Wrong size on FJackLDT_Vehicle_V012_E001_Sync");

// ScriptStruct JackGame.JackLDT_Vehicle_V001_E001_Sync
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Vehicle_V001_E001_Sync final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Vehicle_V001_E001_Sync) == 0x000008, "Wrong alignment on FJackLDT_Vehicle_V001_E001_Sync");
static_assert(sizeof(FJackLDT_Vehicle_V001_E001_Sync) == 0x000010, "Wrong size on FJackLDT_Vehicle_V001_E001_Sync");

// ScriptStruct JackGame.JackLocatorDict
// 0x0010 (0x0010 - 0x0000)
struct FJackLocatorDict final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AJackLocator*                           Locator;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackLocatorDict) == 0x000008, "Wrong alignment on FJackLocatorDict");
static_assert(sizeof(FJackLocatorDict) == 0x000010, "Wrong size on FJackLocatorDict");
static_assert(offsetof(FJackLocatorDict, Key) == 0x000000, "Member 'FJackLocatorDict::Key' has a wrong offset!");
static_assert(offsetof(FJackLocatorDict, Locator) == 0x000008, "Member 'FJackLocatorDict::Locator' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_UITokugiPanelScenario
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UITokugiPanelScenario final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UITokugiPanelScenario) == 0x000008, "Wrong alignment on FJackLDT_UITokugiPanelScenario");
static_assert(sizeof(FJackLDT_UITokugiPanelScenario) == 0x000010, "Wrong size on FJackLDT_UITokugiPanelScenario");

// ScriptStruct JackGame.JackLDT_MeosiSlotReelLamp_Anim07
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotReelLamp_Anim07 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotReelLamp_Anim07) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotReelLamp_Anim07");
static_assert(sizeof(FJackLDT_MeosiSlotReelLamp_Anim07) == 0x000010, "Wrong size on FJackLDT_MeosiSlotReelLamp_Anim07");

// ScriptStruct JackGame.JackLDT_UIStaffRoll
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UIStaffRoll final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UIStaffRoll) == 0x000008, "Wrong alignment on FJackLDT_UIStaffRoll");
static_assert(sizeof(FJackLDT_UIStaffRoll) == 0x000010, "Wrong size on FJackLDT_UIStaffRoll");

// ScriptStruct JackGame.JackLDT_UIShipHarborInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UIShipHarborInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UIShipHarborInfo) == 0x000008, "Wrong alignment on FJackLDT_UIShipHarborInfo");
static_assert(sizeof(FJackLDT_UIShipHarborInfo) == 0x000010, "Wrong size on FJackLDT_UIShipHarborInfo");

// ScriptStruct JackGame.JackLDT_UIPlatformSpecificText
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UIPlatformSpecificText final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UIPlatformSpecificText) == 0x000008, "Wrong alignment on FJackLDT_UIPlatformSpecificText");
static_assert(sizeof(FJackLDT_UIPlatformSpecificText) == 0x000010, "Wrong size on FJackLDT_UIPlatformSpecificText");

// ScriptStruct JackGame.JackLDT_UINeighborMapInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UINeighborMapInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UINeighborMapInfo) == 0x000008, "Wrong alignment on FJackLDT_UINeighborMapInfo");
static_assert(sizeof(FJackLDT_UINeighborMapInfo) == 0x000010, "Wrong size on FJackLDT_UINeighborMapInfo");

// ScriptStruct JackGame.JackLDT_UIMapTextConfig
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UIMapTextConfig final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UIMapTextConfig) == 0x000008, "Wrong alignment on FJackLDT_UIMapTextConfig");
static_assert(sizeof(FJackLDT_UIMapTextConfig) == 0x000010, "Wrong size on FJackLDT_UIMapTextConfig");

// ScriptStruct JackGame.JackLDT_UIMapInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UIMapInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UIMapInfo) == 0x000008, "Wrong alignment on FJackLDT_UIMapInfo");
static_assert(sizeof(FJackLDT_UIMapInfo) == 0x000010, "Wrong size on FJackLDT_UIMapInfo");

// ScriptStruct JackGame.JackLDT_UIFaceIcon
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UIFaceIcon final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UIFaceIcon) == 0x000008, "Wrong alignment on FJackLDT_UIFaceIcon");
static_assert(sizeof(FJackLDT_UIFaceIcon) == 0x000010, "Wrong size on FJackLDT_UIFaceIcon");

// ScriptStruct JackGame.JackLDT_PassiveTokugiTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PassiveTokugiTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PassiveTokugiTable) == 0x000008, "Wrong alignment on FJackLDT_PassiveTokugiTable");
static_assert(sizeof(FJackLDT_PassiveTokugiTable) == 0x000010, "Wrong size on FJackLDT_PassiveTokugiTable");

// ScriptStruct JackGame.JackLDT_MiniGameJackPotSlotFluctuations
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MiniGameJackPotSlotFluctuations final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MiniGameJackPotSlotFluctuations) == 0x000008, "Wrong alignment on FJackLDT_MiniGameJackPotSlotFluctuations");
static_assert(sizeof(FJackLDT_MiniGameJackPotSlotFluctuations) == 0x000010, "Wrong size on FJackLDT_MiniGameJackPotSlotFluctuations");

// ScriptStruct JackGame.JackLDT_TextSetYadoya
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextSetYadoya final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextSetYadoya) == 0x000008, "Wrong alignment on FJackLDT_TextSetYadoya");
static_assert(sizeof(FJackLDT_TextSetYadoya) == 0x000010, "Wrong size on FJackLDT_TextSetYadoya");

// ScriptStruct JackGame.JackLDT_TextSetShop
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextSetShop final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextSetShop) == 0x000008, "Wrong alignment on FJackLDT_TextSetShop");
static_assert(sizeof(FJackLDT_TextSetShop) == 0x000010, "Wrong size on FJackLDT_TextSetShop");

// ScriptStruct JackGame.JackLDT_TextSetMedal
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextSetMedal final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextSetMedal) == 0x000008, "Wrong alignment on FJackLDT_TextSetMedal");
static_assert(sizeof(FJackLDT_TextSetMedal) == 0x000010, "Wrong size on FJackLDT_TextSetMedal");

// ScriptStruct JackGame.JackLDT_Sim_C_RearHairA_low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_C_RearHairA_low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_C_RearHairA_low) == 0x000008, "Wrong alignment on FJackLDT_Sim_C_RearHairA_low");
static_assert(sizeof(FJackLDT_Sim_C_RearHairA_low) == 0x000010, "Wrong size on FJackLDT_Sim_C_RearHairA_low");

// ScriptStruct JackGame.JackLDT_TextSetKyoukai
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextSetKyoukai final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextSetKyoukai) == 0x000008, "Wrong alignment on FJackLDT_TextSetKyoukai");
static_assert(sizeof(FJackLDT_TextSetKyoukai) == 0x000010, "Wrong size on FJackLDT_TextSetKyoukai");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleB_001_N
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleB_001_N final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleB_001_N) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleB_001_N");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleB_001_N) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleB_001_N");

// ScriptStruct JackGame.JackLDT_MeosiSlotMachineGrotta
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMachineGrotta final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMachineGrotta) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMachineGrotta");
static_assert(sizeof(FJackLDT_MeosiSlotMachineGrotta) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMachineGrotta");

// ScriptStruct JackGame.JackLDT_TextSetGinkou
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextSetGinkou final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextSetGinkou) == 0x000008, "Wrong alignment on FJackLDT_TextSetGinkou");
static_assert(sizeof(FJackLDT_TextSetGinkou) == 0x000010, "Wrong size on FJackLDT_TextSetGinkou");

// ScriptStruct JackGame.JackSibariSettings
// 0x000B (0x000B - 0x0000)
struct FJackSibariSettings final
{
public:
	uint8                                         Pad_0[0xB];                                        // 0x0000(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackSibariSettings) == 0x000001, "Wrong alignment on FJackSibariSettings");
static_assert(sizeof(FJackSibariSettings) == 0x00000B, "Wrong size on FJackSibariSettings");

// ScriptStruct JackGame.JackLDT_TextPackMiniGame
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextPackMiniGame final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextPackMiniGame) == 0x000008, "Wrong alignment on FJackLDT_TextPackMiniGame");
static_assert(sizeof(FJackLDT_TextPackMiniGame) == 0x000010, "Wrong size on FJackLDT_TextPackMiniGame");

// ScriptStruct JackGame.JackLDT_TextPackItem
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextPackItem final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextPackItem) == 0x000008, "Wrong alignment on FJackLDT_TextPackItem");
static_assert(sizeof(FJackLDT_TextPackItem) == 0x000010, "Wrong size on FJackLDT_TextPackItem");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleA_001_N
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleA_001_N final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleA_001_N) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleA_001_N");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleA_001_N) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleA_001_N");

// ScriptStruct JackGame.JackLDT_TextDataTest
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextDataTest final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextDataTest) == 0x000008, "Wrong alignment on FJackLDT_TextDataTest");
static_assert(sizeof(FJackLDT_TextDataTest) == 0x000010, "Wrong size on FJackLDT_TextDataTest");

// ScriptStruct JackGame.JackLDT_UmaRaceVehicleEntryDataTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceVehicleEntryDataTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceVehicleEntryDataTable) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceVehicleEntryDataTable");
static_assert(sizeof(FJackLDT_UmaRaceVehicleEntryDataTable) == 0x000010, "Wrong size on FJackLDT_UmaRaceVehicleEntryDataTable");

// ScriptStruct JackGame.JackLDT_TextDataSystem
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextDataSystem final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextDataSystem) == 0x000008, "Wrong alignment on FJackLDT_TextDataSystem");
static_assert(sizeof(FJackLDT_TextDataSystem) == 0x000010, "Wrong size on FJackLDT_TextDataSystem");

// ScriptStruct JackGame.JackLDT_TextDataMenu
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextDataMenu final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextDataMenu) == 0x000008, "Wrong alignment on FJackLDT_TextDataMenu");
static_assert(sizeof(FJackLDT_TextDataMenu) == 0x000010, "Wrong size on FJackLDT_TextDataMenu");

// ScriptStruct JackGame.JackMiniGameMeosiSlotData
// 0xAD04 (0xAD04 - 0x0000)
struct alignas(0x04) FJackMiniGameMeosiSlotData final
{
public:
	uint8                                         Pad_0[0xAD04];                                     // 0x0000(0xAD04)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMiniGameMeosiSlotData) == 0x000004, "Wrong alignment on FJackMiniGameMeosiSlotData");
static_assert(sizeof(FJackMiniGameMeosiSlotData) == 0x00AD04, "Wrong size on FJackMiniGameMeosiSlotData");

// ScriptStruct JackGame.JackLDT_TextDataLocalization
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextDataLocalization final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextDataLocalization) == 0x000008, "Wrong alignment on FJackLDT_TextDataLocalization");
static_assert(sizeof(FJackLDT_TextDataLocalization) == 0x000010, "Wrong size on FJackLDT_TextDataLocalization");

// ScriptStruct JackGame.JackLDT_MeosiSlotSimulation
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotSimulation final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotSimulation) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotSimulation");
static_assert(sizeof(FJackLDT_MeosiSlotSimulation) == 0x000010, "Wrong size on FJackLDT_MeosiSlotSimulation");

// ScriptStruct JackGame.JackLDT_TextDataGame
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextDataGame final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextDataGame) == 0x000008, "Wrong alignment on FJackLDT_TextDataGame");
static_assert(sizeof(FJackLDT_TextDataGame) == 0x000010, "Wrong size on FJackLDT_TextDataGame");

// ScriptStruct JackGame.JackLDT_TextDataFukidasi
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextDataFukidasi final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextDataFukidasi) == 0x000008, "Wrong alignment on FJackLDT_TextDataFukidasi");
static_assert(sizeof(FJackLDT_TextDataFukidasi) == 0x000010, "Wrong size on FJackLDT_TextDataFukidasi");

// ScriptStruct JackGame.JackLDT_OverrideText
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_OverrideText final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_OverrideText) == 0x000008, "Wrong alignment on FJackLDT_OverrideText");
static_assert(sizeof(FJackLDT_OverrideText) == 0x000010, "Wrong size on FJackLDT_OverrideText");

// ScriptStruct JackGame.JackLDT_VoiceLabel
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_VoiceLabel final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_VoiceLabel) == 0x000008, "Wrong alignment on FJackLDT_VoiceLabel");
static_assert(sizeof(FJackLDT_VoiceLabel) == 0x000010, "Wrong size on FJackLDT_VoiceLabel");

// ScriptStruct JackGame.JackLDT_RtEx_NmSkirtD1_low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_NmSkirtD1_low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_NmSkirtD1_low) == 0x000008, "Wrong alignment on FJackLDT_RtEx_NmSkirtD1_low");
static_assert(sizeof(FJackLDT_RtEx_NmSkirtD1_low) == 0x000010, "Wrong size on FJackLDT_RtEx_NmSkirtD1_low");

// ScriptStruct JackGame.JackLDT_ParticleSound
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ParticleSound final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ParticleSound) == 0x000008, "Wrong alignment on FJackLDT_ParticleSound");
static_assert(sizeof(FJackLDT_ParticleSound) == 0x000010, "Wrong size on FJackLDT_ParticleSound");

// ScriptStruct JackGame.JackLDT_MeosiSlotShimofuriChanceMonsterRankSelect
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotShimofuriChanceMonsterRankSelect final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotShimofuriChanceMonsterRankSelect) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotShimofuriChanceMonsterRankSelect");
static_assert(sizeof(FJackLDT_MeosiSlotShimofuriChanceMonsterRankSelect) == 0x000010, "Wrong size on FJackLDT_MeosiSlotShimofuriChanceMonsterRankSelect");

// ScriptStruct JackGame.JackLDT_ME
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ME final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ME) == 0x000008, "Wrong alignment on FJackLDT_ME");
static_assert(sizeof(FJackLDT_ME) == 0x000010, "Wrong size on FJackLDT_ME");

// ScriptStruct JackGame.JackLDT_DamageSoundTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_DamageSoundTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_DamageSoundTable) == 0x000008, "Wrong alignment on FJackLDT_DamageSoundTable");
static_assert(sizeof(FJackLDT_DamageSoundTable) == 0x000010, "Wrong size on FJackLDT_DamageSoundTable");

// ScriptStruct JackGame.JackLDT_MeosiSlotScenarioTBoxOrbProb
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotScenarioTBoxOrbProb final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotScenarioTBoxOrbProb) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotScenarioTBoxOrbProb");
static_assert(sizeof(FJackLDT_MeosiSlotScenarioTBoxOrbProb) == 0x000010, "Wrong size on FJackLDT_MeosiSlotScenarioTBoxOrbProb");

// ScriptStruct JackGame.JackLDT_CollideSoundTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_CollideSoundTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_CollideSoundTable) == 0x000008, "Wrong alignment on FJackLDT_CollideSoundTable");
static_assert(sizeof(FJackLDT_CollideSoundTable) == 0x000010, "Wrong size on FJackLDT_CollideSoundTable");

// ScriptStruct JackGame.JackSoundMiscControlTrackKey
// 0x0008 (0x0008 - 0x0000)
struct FJackSoundMiscControlTrackKey final
{
public:
	float                                         TimeVar;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseEnableAnimNotifyFootstepSound;                 // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAnimNotifyFootstepSound;                    // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackSoundMiscControlTrackKey) == 0x000004, "Wrong alignment on FJackSoundMiscControlTrackKey");
static_assert(sizeof(FJackSoundMiscControlTrackKey) == 0x000008, "Wrong size on FJackSoundMiscControlTrackKey");
static_assert(offsetof(FJackSoundMiscControlTrackKey, TimeVar) == 0x000000, "Member 'FJackSoundMiscControlTrackKey::TimeVar' has a wrong offset!");
static_assert(offsetof(FJackSoundMiscControlTrackKey, bUseEnableAnimNotifyFootstepSound) == 0x000004, "Member 'FJackSoundMiscControlTrackKey::bUseEnableAnimNotifyFootstepSound' has a wrong offset!");
static_assert(offsetof(FJackSoundMiscControlTrackKey, bEnableAnimNotifyFootstepSound) == 0x000005, "Member 'FJackSoundMiscControlTrackKey::bEnableAnimNotifyFootstepSound' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_BGMVolume2D
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_BGMVolume2D final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_BGMVolume2D) == 0x000008, "Wrong alignment on FJackLDT_BGMVolume2D");
static_assert(sizeof(FJackLDT_BGMVolume2D) == 0x000010, "Wrong size on FJackLDT_BGMVolume2D");

// ScriptStruct JackGame.JackLDT_BGMVolume
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_BGMVolume final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_BGMVolume) == 0x000008, "Wrong alignment on FJackLDT_BGMVolume");
static_assert(sizeof(FJackLDT_BGMVolume) == 0x000010, "Wrong size on FJackLDT_BGMVolume");

// ScriptStruct JackGame.JackLDT_RtEx_Bt_NimaSkirt_Up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_Bt_NimaSkirt_Up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_Bt_NimaSkirt_Up) == 0x000008, "Wrong alignment on FJackLDT_RtEx_Bt_NimaSkirt_Up");
static_assert(sizeof(FJackLDT_RtEx_Bt_NimaSkirt_Up) == 0x000010, "Wrong size on FJackLDT_RtEx_Bt_NimaSkirt_Up");

// ScriptStruct JackGame.JackLDT_MeosiSlotBattleBackGround
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotBattleBackGround final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotBattleBackGround) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotBattleBackGround");
static_assert(sizeof(FJackLDT_MeosiSlotBattleBackGround) == 0x000010, "Wrong size on FJackLDT_MeosiSlotBattleBackGround");

// ScriptStruct JackGame.JackLDT_Renkei
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Renkei final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Renkei) == 0x000008, "Wrong alignment on FJackLDT_Renkei");
static_assert(sizeof(FJackLDT_Renkei) == 0x000010, "Wrong size on FJackLDT_Renkei");

// ScriptStruct JackGame.JackLDT_ProgRenkei
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ProgRenkei final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ProgRenkei) == 0x000008, "Wrong alignment on FJackLDT_ProgRenkei");
static_assert(sizeof(FJackLDT_ProgRenkei) == 0x000010, "Wrong size on FJackLDT_ProgRenkei");

// ScriptStruct JackGame.JackLDT_MonsterRenkei
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterRenkei final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterRenkei) == 0x000008, "Wrong alignment on FJackLDT_MonsterRenkei");
static_assert(sizeof(FJackLDT_MonsterRenkei) == 0x000010, "Wrong size on FJackLDT_MonsterRenkei");

// ScriptStruct JackGame.JackLDT_MeosiSlotVariableCeiling_AT
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotVariableCeiling_AT final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotVariableCeiling_AT) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotVariableCeiling_AT");
static_assert(sizeof(FJackLDT_MeosiSlotVariableCeiling_AT) == 0x000010, "Wrong size on FJackLDT_MeosiSlotVariableCeiling_AT");

// ScriptStruct JackGame.JackLDT_MatineeRenkei
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MatineeRenkei final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MatineeRenkei) == 0x000008, "Wrong alignment on FJackLDT_MatineeRenkei");
static_assert(sizeof(FJackLDT_MatineeRenkei) == 0x000010, "Wrong size on FJackLDT_MatineeRenkei");

// ScriptStruct JackGame.JackLDT_MatineelevelRenkeiDivision
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MatineelevelRenkeiDivision final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MatineelevelRenkeiDivision) == 0x000008, "Wrong alignment on FJackLDT_MatineelevelRenkeiDivision");
static_assert(sizeof(FJackLDT_MatineelevelRenkeiDivision) == 0x000010, "Wrong size on FJackLDT_MatineelevelRenkeiDivision");

// ScriptStruct JackGame.JackLDT_QuestTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_QuestTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_QuestTable) == 0x000008, "Wrong alignment on FJackLDT_QuestTable");
static_assert(sizeof(FJackLDT_QuestTable) == 0x000010, "Wrong size on FJackLDT_QuestTable");

// ScriptStruct JackGame.JackLDT_LevelUp_P008
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_LevelUp_P008 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_LevelUp_P008) == 0x000008, "Wrong alignment on FJackLDT_LevelUp_P008");
static_assert(sizeof(FJackLDT_LevelUp_P008) == 0x000010, "Wrong size on FJackLDT_LevelUp_P008");

// ScriptStruct JackGame.JackLDT_LevelUp_P007
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_LevelUp_P007 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_LevelUp_P007) == 0x000008, "Wrong alignment on FJackLDT_LevelUp_P007");
static_assert(sizeof(FJackLDT_LevelUp_P007) == 0x000010, "Wrong size on FJackLDT_LevelUp_P007");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleD_001_N
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleD_001_N final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleD_001_N) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleD_001_N");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleD_001_N) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleD_001_N");

// ScriptStruct JackGame.JackLDT_LevelUp_P006
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_LevelUp_P006 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_LevelUp_P006) == 0x000008, "Wrong alignment on FJackLDT_LevelUp_P006");
static_assert(sizeof(FJackLDT_LevelUp_P006) == 0x000010, "Wrong size on FJackLDT_LevelUp_P006");

// ScriptStruct JackGame.JackLDT_Sim_MantleA
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_MantleA final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_MantleA) == 0x000008, "Wrong alignment on FJackLDT_Sim_MantleA");
static_assert(sizeof(FJackLDT_Sim_MantleA) == 0x000010, "Wrong size on FJackLDT_Sim_MantleA");

// ScriptStruct JackGame.JackLDT_LevelUp_P005
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_LevelUp_P005 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_LevelUp_P005) == 0x000008, "Wrong alignment on FJackLDT_LevelUp_P005");
static_assert(sizeof(FJackLDT_LevelUp_P005) == 0x000010, "Wrong size on FJackLDT_LevelUp_P005");

// ScriptStruct JackGame.JackLDT_LevelUp_P004
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_LevelUp_P004 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_LevelUp_P004) == 0x000008, "Wrong alignment on FJackLDT_LevelUp_P004");
static_assert(sizeof(FJackLDT_LevelUp_P004) == 0x000010, "Wrong size on FJackLDT_LevelUp_P004");

// ScriptStruct JackGame.JackLDT_LevelUp_P003
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_LevelUp_P003 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_LevelUp_P003) == 0x000008, "Wrong alignment on FJackLDT_LevelUp_P003");
static_assert(sizeof(FJackLDT_LevelUp_P003) == 0x000010, "Wrong size on FJackLDT_LevelUp_P003");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleC_003_N
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleC_003_N final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleC_003_N) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleC_003_N");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleC_003_N) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleC_003_N");

// ScriptStruct JackGame.JackLDT_LevelUp_P001
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_LevelUp_P001 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_LevelUp_P001) == 0x000008, "Wrong alignment on FJackLDT_LevelUp_P001");
static_assert(sizeof(FJackLDT_LevelUp_P001) == 0x000010, "Wrong size on FJackLDT_LevelUp_P001");

// ScriptStruct JackGame.JackLDT_FriendCharacterPreset
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_FriendCharacterPreset final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_FriendCharacterPreset) == 0x000008, "Wrong alignment on FJackLDT_FriendCharacterPreset");
static_assert(sizeof(FJackLDT_FriendCharacterPreset) == 0x000010, "Wrong size on FJackLDT_FriendCharacterPreset");

// ScriptStruct JackGame.JackLDT_FriendCharacter
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_FriendCharacter final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_FriendCharacter) == 0x000008, "Wrong alignment on FJackLDT_FriendCharacter");
static_assert(sizeof(FJackLDT_FriendCharacter) == 0x000010, "Wrong size on FJackLDT_FriendCharacter");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleC_001_N
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleC_001_N final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleC_001_N) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleC_001_N");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleC_001_N) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleC_001_N");

// ScriptStruct JackGame.JackLDT_PartyTalkPositionInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkPositionInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkPositionInfo) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkPositionInfo");
static_assert(sizeof(FJackLDT_PartyTalkPositionInfo) == 0x000010, "Wrong size on FJackLDT_PartyTalkPositionInfo");

// ScriptStruct JackGame.JackLDT_BattleFukidasi
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_BattleFukidasi final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_BattleFukidasi) == 0x000008, "Wrong alignment on FJackLDT_BattleFukidasi");
static_assert(sizeof(FJackLDT_BattleFukidasi) == 0x000010, "Wrong size on FJackLDT_BattleFukidasi");

// ScriptStruct JackGame.JackLDT_PartyTalkCutSceneFlags
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkCutSceneFlags final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkCutSceneFlags) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkCutSceneFlags");
static_assert(sizeof(FJackLDT_PartyTalkCutSceneFlags) == 0x000010, "Wrong size on FJackLDT_PartyTalkCutSceneFlags");

// ScriptStruct JackGame.JackLDT_PartyTalkCharacter
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkCharacter final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkCharacter) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkCharacter");
static_assert(sizeof(FJackLDT_PartyTalkCharacter) == 0x000010, "Wrong size on FJackLDT_PartyTalkCharacter");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleB_003_N
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleB_003_N final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleB_003_N) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleB_003_N");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleB_003_N) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleB_003_N");

// ScriptStruct JackGame.JackLDT_PartyTalkBehaviorState
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PartyTalkBehaviorState final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PartyTalkBehaviorState) == 0x000008, "Wrong alignment on FJackLDT_PartyTalkBehaviorState");
static_assert(sizeof(FJackLDT_PartyTalkBehaviorState) == 0x000010, "Wrong size on FJackLDT_PartyTalkBehaviorState");

// ScriptStruct JackGame.JackLDT_OddEffectTag
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_OddEffectTag final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_OddEffectTag) == 0x000008, "Wrong alignment on FJackLDT_OddEffectTag");
static_assert(sizeof(FJackLDT_OddEffectTag) == 0x000010, "Wrong size on FJackLDT_OddEffectTag");

// ScriptStruct JackGame.JackLDT_OddEffectStatus
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_OddEffectStatus final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_OddEffectStatus) == 0x000008, "Wrong alignment on FJackLDT_OddEffectStatus");
static_assert(sizeof(FJackLDT_OddEffectStatus) == 0x000010, "Wrong size on FJackLDT_OddEffectStatus");

// ScriptStruct JackGame.JackLDT_AttachedProps_NPC
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AttachedProps_NPC final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AttachedProps_NPC) == 0x000008, "Wrong alignment on FJackLDT_AttachedProps_NPC");
static_assert(sizeof(FJackLDT_AttachedProps_NPC) == 0x000010, "Wrong size on FJackLDT_AttachedProps_NPC");

// ScriptStruct JackGame.JackLDT_MeosiSlotMonsterList_CZ1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMonsterList_CZ1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMonsterList_CZ1) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMonsterList_CZ1");
static_assert(sizeof(FJackLDT_MeosiSlotMonsterList_CZ1) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMonsterList_CZ1");

// ScriptStruct JackGame.JackLDT_OddEffectSlide
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_OddEffectSlide final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_OddEffectSlide) == 0x000008, "Wrong alignment on FJackLDT_OddEffectSlide");
static_assert(sizeof(FJackLDT_OddEffectSlide) == 0x000010, "Wrong size on FJackLDT_OddEffectSlide");

// ScriptStruct JackGame.JackVoiceTrackInfo
// 0x000C (0x000C - 0x0000)
struct FJackVoiceTrackInfo final
{
public:
	bool                                          bIsUseRandomLipSync;                               // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LipChangeSec;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LipApplyRate;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackVoiceTrackInfo) == 0x000004, "Wrong alignment on FJackVoiceTrackInfo");
static_assert(sizeof(FJackVoiceTrackInfo) == 0x00000C, "Wrong size on FJackVoiceTrackInfo");
static_assert(offsetof(FJackVoiceTrackInfo, bIsUseRandomLipSync) == 0x000000, "Member 'FJackVoiceTrackInfo::bIsUseRandomLipSync' has a wrong offset!");
static_assert(offsetof(FJackVoiceTrackInfo, LipChangeSec) == 0x000004, "Member 'FJackVoiceTrackInfo::LipChangeSec' has a wrong offset!");
static_assert(offsetof(FJackVoiceTrackInfo, LipApplyRate) == 0x000008, "Member 'FJackVoiceTrackInfo::LipApplyRate' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_OddEffectFacial
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_OddEffectFacial final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_OddEffectFacial) == 0x000008, "Wrong alignment on FJackLDT_OddEffectFacial");
static_assert(sizeof(FJackLDT_OddEffectFacial) == 0x000010, "Wrong size on FJackLDT_OddEffectFacial");

// ScriptStruct JackGame.JackLDT_MeosiSlotBossMonsterSelectProbability
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotBossMonsterSelectProbability final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotBossMonsterSelectProbability) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotBossMonsterSelectProbability");
static_assert(sizeof(FJackLDT_MeosiSlotBossMonsterSelectProbability) == 0x000010, "Wrong size on FJackLDT_MeosiSlotBossMonsterSelectProbability");

// ScriptStruct JackGame.JackLDT_OddEffectClearDamagePer
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_OddEffectClearDamagePer final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_OddEffectClearDamagePer) == 0x000008, "Wrong alignment on FJackLDT_OddEffectClearDamagePer");
static_assert(sizeof(FJackLDT_OddEffectClearDamagePer) == 0x000010, "Wrong size on FJackLDT_OddEffectClearDamagePer");

// ScriptStruct JackGame.JackLDT_NPCUsoTalk
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_NPCUsoTalk final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_NPCUsoTalk) == 0x000008, "Wrong alignment on FJackLDT_NPCUsoTalk");
static_assert(sizeof(FJackLDT_NPCUsoTalk) == 0x000010, "Wrong size on FJackLDT_NPCUsoTalk");

// ScriptStruct JackGame.JackLDT_NPCReaction
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_NPCReaction final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_NPCReaction) == 0x000008, "Wrong alignment on FJackLDT_NPCReaction");
static_assert(sizeof(FJackLDT_NPCReaction) == 0x000010, "Wrong size on FJackLDT_NPCReaction");

// ScriptStruct JackGame.JackLDT_Action
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Action final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Action) == 0x000008, "Wrong alignment on FJackLDT_Action");
static_assert(sizeof(FJackLDT_Action) == 0x000010, "Wrong size on FJackLDT_Action");

// ScriptStruct JackGame.JackLDT_NPCInterruptControl
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_NPCInterruptControl final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_NPCInterruptControl) == 0x000008, "Wrong alignment on FJackLDT_NPCInterruptControl");
static_assert(sizeof(FJackLDT_NPCInterruptControl) == 0x000010, "Wrong size on FJackLDT_NPCInterruptControl");

// ScriptStruct JackGame.JackLDT_NPCImportanceScenari
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_NPCImportanceScenari final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_NPCImportanceScenari) == 0x000008, "Wrong alignment on FJackLDT_NPCImportanceScenari");
static_assert(sizeof(FJackLDT_NPCImportanceScenari) == 0x000010, "Wrong size on FJackLDT_NPCImportanceScenari");

// ScriptStruct JackGame.JackLDT_MeosiSlotTreasureBoxSelectProbability
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotTreasureBoxSelectProbability final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotTreasureBoxSelectProbability) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotTreasureBoxSelectProbability");
static_assert(sizeof(FJackLDT_MeosiSlotTreasureBoxSelectProbability) == 0x000010, "Wrong size on FJackLDT_MeosiSlotTreasureBoxSelectProbability");

// ScriptStruct JackGame.JackLDT_GuestNPCList
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_GuestNPCList final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_GuestNPCList) == 0x000008, "Wrong alignment on FJackLDT_GuestNPCList");
static_assert(sizeof(FJackLDT_GuestNPCList) == 0x000010, "Wrong size on FJackLDT_GuestNPCList");

// ScriptStruct JackGame.JackLDT_Facial_M568
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Facial_M568 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Facial_M568) == 0x000008, "Wrong alignment on FJackLDT_Facial_M568");
static_assert(sizeof(FJackLDT_Facial_M568) == 0x000010, "Wrong size on FJackLDT_Facial_M568");

// ScriptStruct JackGame.JackLDT_Facial_M562
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Facial_M562 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Facial_M562) == 0x000008, "Wrong alignment on FJackLDT_Facial_M562");
static_assert(sizeof(FJackLDT_Facial_M562) == 0x000010, "Wrong size on FJackLDT_Facial_M562");

// ScriptStruct JackGame.JackLDT_SlotReelDataTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_SlotReelDataTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_SlotReelDataTable) == 0x000008, "Wrong alignment on FJackLDT_SlotReelDataTable");
static_assert(sizeof(FJackLDT_SlotReelDataTable) == 0x000010, "Wrong size on FJackLDT_SlotReelDataTable");

// ScriptStruct JackGame.JackLDT_Facial_M547
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Facial_M547 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Facial_M547) == 0x000008, "Wrong alignment on FJackLDT_Facial_M547");
static_assert(sizeof(FJackLDT_Facial_M547) == 0x000010, "Wrong size on FJackLDT_Facial_M547");

// ScriptStruct JackGame.JackLDT_MeosiSlotDrakeeEffectApProb
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotDrakeeEffectApProb final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotDrakeeEffectApProb) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotDrakeeEffectApProb");
static_assert(sizeof(FJackLDT_MeosiSlotDrakeeEffectApProb) == 0x000010, "Wrong size on FJackLDT_MeosiSlotDrakeeEffectApProb");

// ScriptStruct JackGame.JackLDT_Facial_M530
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Facial_M530 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Facial_M530) == 0x000008, "Wrong alignment on FJackLDT_Facial_M530");
static_assert(sizeof(FJackLDT_Facial_M530) == 0x000010, "Wrong size on FJackLDT_Facial_M530");

// ScriptStruct JackGame.JackLDT_Facial_M520
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Facial_M520 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Facial_M520) == 0x000008, "Wrong alignment on FJackLDT_Facial_M520");
static_assert(sizeof(FJackLDT_Facial_M520) == 0x000010, "Wrong size on FJackLDT_Facial_M520");

// ScriptStruct JackGame.JackLDT_Facial_M229
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Facial_M229 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Facial_M229) == 0x000008, "Wrong alignment on FJackLDT_Facial_M229");
static_assert(sizeof(FJackLDT_Facial_M229) == 0x000010, "Wrong size on FJackLDT_Facial_M229");

// ScriptStruct JackGame.JackLDT_lower
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_lower final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_lower) == 0x000008, "Wrong alignment on FJackLDT_lower");
static_assert(sizeof(FJackLDT_lower) == 0x000010, "Wrong size on FJackLDT_lower");

// ScriptStruct JackGame.JackLDT_SlotMamonoMetalSpinRoleDataTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_SlotMamonoMetalSpinRoleDataTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_SlotMamonoMetalSpinRoleDataTable) == 0x000008, "Wrong alignment on FJackLDT_SlotMamonoMetalSpinRoleDataTable");
static_assert(sizeof(FJackLDT_SlotMamonoMetalSpinRoleDataTable) == 0x000010, "Wrong size on FJackLDT_SlotMamonoMetalSpinRoleDataTable");

// ScriptStruct JackGame.JackLDT_Facial_M148
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Facial_M148 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Facial_M148) == 0x000008, "Wrong alignment on FJackLDT_Facial_M148");
static_assert(sizeof(FJackLDT_Facial_M148) == 0x000010, "Wrong size on FJackLDT_Facial_M148");

// ScriptStruct JackGame.JackLDT_MeosiSlotCutinStepupProb
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotCutinStepupProb final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotCutinStepupProb) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotCutinStepupProb");
static_assert(sizeof(FJackLDT_MeosiSlotCutinStepupProb) == 0x000010, "Wrong size on FJackLDT_MeosiSlotCutinStepupProb");

// ScriptStruct JackGame.JackLDT_Facial_M123
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Facial_M123 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Facial_M123) == 0x000008, "Wrong alignment on FJackLDT_Facial_M123");
static_assert(sizeof(FJackLDT_Facial_M123) == 0x000010, "Wrong size on FJackLDT_Facial_M123");

// ScriptStruct JackGame.JackLDT_Facial_M085
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Facial_M085 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Facial_M085) == 0x000008, "Wrong alignment on FJackLDT_Facial_M085");
static_assert(sizeof(FJackLDT_Facial_M085) == 0x000010, "Wrong size on FJackLDT_Facial_M085");

// ScriptStruct JackGame.JackLDT_RouletteTrasureCoinDataTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RouletteTrasureCoinDataTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RouletteTrasureCoinDataTable) == 0x000008, "Wrong alignment on FJackLDT_RouletteTrasureCoinDataTable");
static_assert(sizeof(FJackLDT_RouletteTrasureCoinDataTable) == 0x000010, "Wrong size on FJackLDT_RouletteTrasureCoinDataTable");

// ScriptStruct JackGame.JackLDT_Facial_M067
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Facial_M067 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Facial_M067) == 0x000008, "Wrong alignment on FJackLDT_Facial_M067");
static_assert(sizeof(FJackLDT_Facial_M067) == 0x000010, "Wrong size on FJackLDT_Facial_M067");

// ScriptStruct JackGame.JackLDT_Facial_M034
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Facial_M034 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Facial_M034) == 0x000008, "Wrong alignment on FJackLDT_Facial_M034");
static_assert(sizeof(FJackLDT_Facial_M034) == 0x000010, "Wrong size on FJackLDT_Facial_M034");

// ScriptStruct JackGame.JackLDT_Facial_M006
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Facial_M006 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Facial_M006) == 0x000008, "Wrong alignment on FJackLDT_Facial_M006");
static_assert(sizeof(FJackLDT_Facial_M006) == 0x000010, "Wrong size on FJackLDT_Facial_M006");

// ScriptStruct JackGame.JackLDT_Sim_MantleC_P008_low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_MantleC_P008_low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_MantleC_P008_low) == 0x000008, "Wrong alignment on FJackLDT_Sim_MantleC_P008_low");
static_assert(sizeof(FJackLDT_Sim_MantleC_P008_low) == 0x000010, "Wrong size on FJackLDT_Sim_MantleC_P008_low");

// ScriptStruct JackGame.JackLDT_AnimDynamics_M614
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AnimDynamics_M614 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AnimDynamics_M614) == 0x000008, "Wrong alignment on FJackLDT_AnimDynamics_M614");
static_assert(sizeof(FJackLDT_AnimDynamics_M614) == 0x000010, "Wrong size on FJackLDT_AnimDynamics_M614");

// ScriptStruct JackGame.JackLDT_CharaLookByMaps
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_CharaLookByMaps final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_CharaLookByMaps) == 0x000008, "Wrong alignment on FJackLDT_CharaLookByMaps");
static_assert(sizeof(FJackLDT_CharaLookByMaps) == 0x000010, "Wrong size on FJackLDT_CharaLookByMaps");

// ScriptStruct JackGame.JackLDT_AnimDynamics_M607
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AnimDynamics_M607 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AnimDynamics_M607) == 0x000008, "Wrong alignment on FJackLDT_AnimDynamics_M607");
static_assert(sizeof(FJackLDT_AnimDynamics_M607) == 0x000010, "Wrong size on FJackLDT_AnimDynamics_M607");

// ScriptStruct JackGame.JackLDT_AnimDynamics_M601
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AnimDynamics_M601 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AnimDynamics_M601) == 0x000008, "Wrong alignment on FJackLDT_AnimDynamics_M601");
static_assert(sizeof(FJackLDT_AnimDynamics_M601) == 0x000010, "Wrong size on FJackLDT_AnimDynamics_M601");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1L_P001_up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1L_P001_up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1L_P001_up) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1L_P001_up");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1L_P001_up) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1L_P001_up");

// ScriptStruct JackGame.JackLDT_AnimDynamics_M542
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AnimDynamics_M542 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AnimDynamics_M542) == 0x000008, "Wrong alignment on FJackLDT_AnimDynamics_M542");
static_assert(sizeof(FJackLDT_AnimDynamics_M542) == 0x000010, "Wrong size on FJackLDT_AnimDynamics_M542");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleF_003
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleF_003 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleF_003) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleF_003");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleF_003) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleF_003");

// ScriptStruct JackGame.JackLDT_AnimDynamics_M216
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AnimDynamics_M216 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AnimDynamics_M216) == 0x000008, "Wrong alignment on FJackLDT_AnimDynamics_M216");
static_assert(sizeof(FJackLDT_AnimDynamics_M216) == 0x000010, "Wrong size on FJackLDT_AnimDynamics_M216");

// ScriptStruct JackGame.JackLDT_AnimDynamics_M207
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AnimDynamics_M207 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AnimDynamics_M207) == 0x000008, "Wrong alignment on FJackLDT_AnimDynamics_M207");
static_assert(sizeof(FJackLDT_AnimDynamics_M207) == 0x000010, "Wrong size on FJackLDT_AnimDynamics_M207");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleD_003_N
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleD_003_N final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleD_003_N) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleD_003_N");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleD_003_N) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleD_003_N");

// ScriptStruct JackGame.JackLDT_AnimDynamics_M206
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AnimDynamics_M206 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AnimDynamics_M206) == 0x000008, "Wrong alignment on FJackLDT_AnimDynamics_M206");
static_assert(sizeof(FJackLDT_AnimDynamics_M206) == 0x000010, "Wrong size on FJackLDT_AnimDynamics_M206");

// ScriptStruct JackGame.JackLDT_AnimDynamics_M203
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AnimDynamics_M203 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AnimDynamics_M203) == 0x000008, "Wrong alignment on FJackLDT_AnimDynamics_M203");
static_assert(sizeof(FJackLDT_AnimDynamics_M203) == 0x000010, "Wrong size on FJackLDT_AnimDynamics_M203");

// ScriptStruct JackGame.JackLDT_PokerDoubleUpDataTable1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PokerDoubleUpDataTable1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PokerDoubleUpDataTable1) == 0x000008, "Wrong alignment on FJackLDT_PokerDoubleUpDataTable1");
static_assert(sizeof(FJackLDT_PokerDoubleUpDataTable1) == 0x000010, "Wrong size on FJackLDT_PokerDoubleUpDataTable1");

// ScriptStruct JackGame.JackLDT_AnimDynamics_M158
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AnimDynamics_M158 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AnimDynamics_M158) == 0x000008, "Wrong alignment on FJackLDT_AnimDynamics_M158");
static_assert(sizeof(FJackLDT_AnimDynamics_M158) == 0x000010, "Wrong size on FJackLDT_AnimDynamics_M158");

// ScriptStruct JackGame.JackLDT_RtEx_HipsSideArmor
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsSideArmor final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsSideArmor) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsSideArmor");
static_assert(sizeof(FJackLDT_RtEx_HipsSideArmor) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsSideArmor");

// ScriptStruct JackGame.JackLDT_AnimDynamics_M131
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AnimDynamics_M131 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AnimDynamics_M131) == 0x000008, "Wrong alignment on FJackLDT_AnimDynamics_M131");
static_assert(sizeof(FJackLDT_AnimDynamics_M131) == 0x000010, "Wrong size on FJackLDT_AnimDynamics_M131");

// ScriptStruct JackGame.JackLDT_AnimDynamics_M126
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AnimDynamics_M126 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AnimDynamics_M126) == 0x000008, "Wrong alignment on FJackLDT_AnimDynamics_M126");
static_assert(sizeof(FJackLDT_AnimDynamics_M126) == 0x000010, "Wrong size on FJackLDT_AnimDynamics_M126");

// ScriptStruct JackGame.JackLDT_MeosiSlotMonsterRankSelectProbability
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMonsterRankSelectProbability final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMonsterRankSelectProbability) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMonsterRankSelectProbability");
static_assert(sizeof(FJackLDT_MeosiSlotMonsterRankSelectProbability) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMonsterRankSelectProbability");

// ScriptStruct JackGame.JackLDT_AnimDynamics_M125
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AnimDynamics_M125 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AnimDynamics_M125) == 0x000008, "Wrong alignment on FJackLDT_AnimDynamics_M125");
static_assert(sizeof(FJackLDT_AnimDynamics_M125) == 0x000010, "Wrong size on FJackLDT_AnimDynamics_M125");

// ScriptStruct JackGame.JackLDT_RtEx_NmSkirtD1_up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_NmSkirtD1_up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_NmSkirtD1_up) == 0x000008, "Wrong alignment on FJackLDT_RtEx_NmSkirtD1_up");
static_assert(sizeof(FJackLDT_RtEx_NmSkirtD1_up) == 0x000010, "Wrong size on FJackLDT_RtEx_NmSkirtD1_up");

// ScriptStruct JackGame.JackLDT_AnimDynamics_M111
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AnimDynamics_M111 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AnimDynamics_M111) == 0x000008, "Wrong alignment on FJackLDT_AnimDynamics_M111");
static_assert(sizeof(FJackLDT_AnimDynamics_M111) == 0x000010, "Wrong size on FJackLDT_AnimDynamics_M111");

// ScriptStruct JackGame.JackVoiceTimelineEyeCloseRateKey
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FJackVoiceTimelineEyeCloseRateKey final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackVoiceTimelineEyeCloseRateKey) == 0x000004, "Wrong alignment on FJackVoiceTimelineEyeCloseRateKey");
static_assert(sizeof(FJackVoiceTimelineEyeCloseRateKey) == 0x000008, "Wrong size on FJackVoiceTimelineEyeCloseRateKey");

// ScriptStruct JackGame.JackLDT_MeosiSlotMonsterList_Rank_S
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMonsterList_Rank_S final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMonsterList_Rank_S) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMonsterList_Rank_S");
static_assert(sizeof(FJackLDT_MeosiSlotMonsterList_Rank_S) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMonsterList_Rank_S");

// ScriptStruct JackGame.JackLDT_AnimDynamics_M004
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AnimDynamics_M004 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AnimDynamics_M004) == 0x000008, "Wrong alignment on FJackLDT_AnimDynamics_M004");
static_assert(sizeof(FJackLDT_AnimDynamics_M004) == 0x000010, "Wrong size on FJackLDT_AnimDynamics_M004");

// ScriptStruct JackGame.JackLDT_ZukanMemo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ZukanMemo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ZukanMemo) == 0x000008, "Wrong alignment on FJackLDT_ZukanMemo");
static_assert(sizeof(FJackLDT_ZukanMemo) == 0x000010, "Wrong size on FJackLDT_ZukanMemo");

// ScriptStruct JackGame.JackLDT_MonsterSibariParameter
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterSibariParameter final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterSibariParameter) == 0x000008, "Wrong alignment on FJackLDT_MonsterSibariParameter");
static_assert(sizeof(FJackLDT_MonsterSibariParameter) == 0x000010, "Wrong size on FJackLDT_MonsterSibariParameter");

// ScriptStruct JackGame.JackLDT_MonsterMetalEncount
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterMetalEncount final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterMetalEncount) == 0x000008, "Wrong alignment on FJackLDT_MonsterMetalEncount");
static_assert(sizeof(FJackLDT_MonsterMetalEncount) == 0x000010, "Wrong size on FJackLDT_MonsterMetalEncount");

// ScriptStruct JackGame.JackLDT_MeosiSlotScenarioRoute
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotScenarioRoute final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotScenarioRoute) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotScenarioRoute");
static_assert(sizeof(FJackLDT_MeosiSlotScenarioRoute) == 0x000010, "Wrong size on FJackLDT_MeosiSlotScenarioRoute");

// ScriptStruct JackGame.JackLDT_MonsterFieldMovingBounds
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterFieldMovingBounds final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterFieldMovingBounds) == 0x000008, "Wrong alignment on FJackLDT_MonsterFieldMovingBounds");
static_assert(sizeof(FJackLDT_MonsterFieldMovingBounds) == 0x000010, "Wrong size on FJackLDT_MonsterFieldMovingBounds");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_Sea
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_Sea final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_Sea) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_Sea");
static_assert(sizeof(FJackLDT_MonsterDeploy_Sea) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_Sea");

// ScriptStruct JackGame.JackUmaRaceResultParameter
// 0x0028 (0x0028 - 0x0000)
struct FJackUmaRaceResultParameter final
{
public:
	class AJackVehicleUmaRace*                    Character;                                         // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 LapTimes;                                          // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TotalTime;                                         // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AJackUmaRaceUnit*                       Unit;                                              // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUmaRaceResultParameter) == 0x000008, "Wrong alignment on FJackUmaRaceResultParameter");
static_assert(sizeof(FJackUmaRaceResultParameter) == 0x000028, "Wrong size on FJackUmaRaceResultParameter");
static_assert(offsetof(FJackUmaRaceResultParameter, Character) == 0x000000, "Member 'FJackUmaRaceResultParameter::Character' has a wrong offset!");
static_assert(offsetof(FJackUmaRaceResultParameter, LapTimes) == 0x000008, "Member 'FJackUmaRaceResultParameter::LapTimes' has a wrong offset!");
static_assert(offsetof(FJackUmaRaceResultParameter, TotalTime) == 0x000018, "Member 'FJackUmaRaceResultParameter::TotalTime' has a wrong offset!");
static_assert(offsetof(FJackUmaRaceResultParameter, Unit) == 0x000020, "Member 'FJackUmaRaceResultParameter::Unit' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_N_F18
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_N_F18 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_N_F18) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_N_F18");
static_assert(sizeof(FJackLDT_MonsterDeploy_N_F18) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_N_F18");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_N_F16
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_N_F16 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_N_F16) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_N_F16");
static_assert(sizeof(FJackLDT_MonsterDeploy_N_F16) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_N_F16");

// ScriptStruct JackGame.JackMeosiSlotBattleAction
// 0x0028 (0x0028 - 0x0000)
struct FJackMeosiSlotBattleAction final
{
public:
	EJackMeosiSlotBattleAction                    Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackMeosiSlotAttack                   Attack;                                            // 0x0008(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EJackMeosiSlotMonsterBehavior                 Behavior;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMeosiSlotBattleAction) == 0x000008, "Wrong alignment on FJackMeosiSlotBattleAction");
static_assert(sizeof(FJackMeosiSlotBattleAction) == 0x000028, "Wrong size on FJackMeosiSlotBattleAction");
static_assert(offsetof(FJackMeosiSlotBattleAction, Type) == 0x000000, "Member 'FJackMeosiSlotBattleAction::Type' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotBattleAction, Attack) == 0x000008, "Member 'FJackMeosiSlotBattleAction::Attack' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotBattleAction, Behavior) == 0x000020, "Member 'FJackMeosiSlotBattleAction::Behavior' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_N_D08
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_N_D08 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_N_D08) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_N_D08");
static_assert(sizeof(FJackLDT_MonsterDeploy_N_D08) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_N_D08");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_F20
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_F20 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_F20) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_F20");
static_assert(sizeof(FJackLDT_MonsterDeploy_F20) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_F20");

// ScriptStruct JackGame.JackLDT_MeosiSlotFlavorItemRank_Sp2
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotFlavorItemRank_Sp2 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotFlavorItemRank_Sp2) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotFlavorItemRank_Sp2");
static_assert(sizeof(FJackLDT_MeosiSlotFlavorItemRank_Sp2) == 0x000010, "Wrong size on FJackLDT_MeosiSlotFlavorItemRank_Sp2");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_F16
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_F16 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_F16) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_F16");
static_assert(sizeof(FJackLDT_MonsterDeploy_F16) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_F16");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_F07
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_F07 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_F07) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_F07");
static_assert(sizeof(FJackLDT_MonsterDeploy_F07) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_F07");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_F06
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_F06 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_F06) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_F06");
static_assert(sizeof(FJackLDT_MonsterDeploy_F06) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_F06");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_F04
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_F04 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_F04) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_F04");
static_assert(sizeof(FJackLDT_MonsterDeploy_F04) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_F04");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_F02
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_F02 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_F02) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_F02");
static_assert(sizeof(FJackLDT_MonsterDeploy_F02) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_F02");

// ScriptStruct JackGame.JackLDT_MeosiSlotUnionScenario
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotUnionScenario final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotUnionScenario) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotUnionScenario");
static_assert(sizeof(FJackLDT_MeosiSlotUnionScenario) == 0x000010, "Wrong size on FJackLDT_MeosiSlotUnionScenario");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_F01
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_F01 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_F01) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_F01");
static_assert(sizeof(FJackLDT_MonsterDeploy_F01) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_F01");

// ScriptStruct JackGame.JackLDT_RtEx_NmSkirtA1_up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_NmSkirtA1_up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_NmSkirtA1_up) == 0x000008, "Wrong alignment on FJackLDT_RtEx_NmSkirtA1_up");
static_assert(sizeof(FJackLDT_RtEx_NmSkirtA1_up) == 0x000010, "Wrong size on FJackLDT_RtEx_NmSkirtA1_up");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_Etc
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_Etc final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_Etc) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_Etc");
static_assert(sizeof(FJackLDT_MonsterDeploy_Etc) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_Etc");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_D20
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_D20 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_D20) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_D20");
static_assert(sizeof(FJackLDT_MonsterDeploy_D20) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_D20");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_D17
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_D17 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_D17) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_D17");
static_assert(sizeof(FJackLDT_MonsterDeploy_D17) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_D17");

// ScriptStruct JackGame.JackLDT_PokerItem_1Coin_Gold
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PokerItem_1Coin_Gold final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PokerItem_1Coin_Gold) == 0x000008, "Wrong alignment on FJackLDT_PokerItem_1Coin_Gold");
static_assert(sizeof(FJackLDT_PokerItem_1Coin_Gold) == 0x000010, "Wrong size on FJackLDT_PokerItem_1Coin_Gold");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_D16
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_D16 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_D16) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_D16");
static_assert(sizeof(FJackLDT_MonsterDeploy_D16) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_D16");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_D15
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_D15 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_D15) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_D15");
static_assert(sizeof(FJackLDT_MonsterDeploy_D15) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_D15");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_D14
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_D14 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_D14) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_D14");
static_assert(sizeof(FJackLDT_MonsterDeploy_D14) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_D14");

// ScriptStruct JackGame.JackLDT_RtEx_Skirt_Length1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_Skirt_Length1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_Skirt_Length1) == 0x000008, "Wrong alignment on FJackLDT_RtEx_Skirt_Length1");
static_assert(sizeof(FJackLDT_RtEx_Skirt_Length1) == 0x000010, "Wrong size on FJackLDT_RtEx_Skirt_Length1");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_D12
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_D12 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_D12) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_D12");
static_assert(sizeof(FJackLDT_MonsterDeploy_D12) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_D12");

// ScriptStruct JackGame.JackLDT_PokerItem_10Coin_Black
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PokerItem_10Coin_Black final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PokerItem_10Coin_Black) == 0x000008, "Wrong alignment on FJackLDT_PokerItem_10Coin_Black");
static_assert(sizeof(FJackLDT_PokerItem_10Coin_Black) == 0x000010, "Wrong size on FJackLDT_PokerItem_10Coin_Black");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_D11
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_D11 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_D11) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_D11");
static_assert(sizeof(FJackLDT_MonsterDeploy_D11) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_D11");

// ScriptStruct JackGame.JackLDT_Pose_LR_SideHairI1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_LR_SideHairI1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_LR_SideHairI1) == 0x000008, "Wrong alignment on FJackLDT_Pose_LR_SideHairI1");
static_assert(sizeof(FJackLDT_Pose_LR_SideHairI1) == 0x000010, "Wrong size on FJackLDT_Pose_LR_SideHairI1");

// ScriptStruct JackGame.JackLDT_PokerWinningRate
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PokerWinningRate final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PokerWinningRate) == 0x000008, "Wrong alignment on FJackLDT_PokerWinningRate");
static_assert(sizeof(FJackLDT_PokerWinningRate) == 0x000010, "Wrong size on FJackLDT_PokerWinningRate");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_D05
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_D05 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_D05) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_D05");
static_assert(sizeof(FJackLDT_MonsterDeploy_D05) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_D05");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_D04
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_D04 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_D04) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_D04");
static_assert(sizeof(FJackLDT_MonsterDeploy_D04) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_D04");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_D03
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_D03 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_D03) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_D03");
static_assert(sizeof(FJackLDT_MonsterDeploy_D03) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_D03");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_D02
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_D02 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_D02) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_D02");
static_assert(sizeof(FJackLDT_MonsterDeploy_D02) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_D02");

// ScriptStruct JackGame.JackLDT_PokerInexpensiveCoin
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PokerInexpensiveCoin final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PokerInexpensiveCoin) == 0x000008, "Wrong alignment on FJackLDT_PokerInexpensiveCoin");
static_assert(sizeof(FJackLDT_PokerInexpensiveCoin) == 0x000010, "Wrong size on FJackLDT_PokerInexpensiveCoin");

// ScriptStruct JackGame.JackLDT_MonsterDeploy_D01
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterDeploy_D01 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterDeploy_D01) == 0x000008, "Wrong alignment on FJackLDT_MonsterDeploy_D01");
static_assert(sizeof(FJackLDT_MonsterDeploy_D01) == 0x000010, "Wrong size on FJackLDT_MonsterDeploy_D01");

// ScriptStruct JackGame.JackLDT_MonsterAppear
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MonsterAppear final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MonsterAppear) == 0x000008, "Wrong alignment on FJackLDT_MonsterAppear");
static_assert(sizeof(FJackLDT_MonsterAppear) == 0x000010, "Wrong size on FJackLDT_MonsterAppear");

// ScriptStruct JackGame.JackLDT_HiddenBonePreset
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_HiddenBonePreset final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_HiddenBonePreset) == 0x000008, "Wrong alignment on FJackLDT_HiddenBonePreset");
static_assert(sizeof(FJackLDT_HiddenBonePreset) == 0x000010, "Wrong size on FJackLDT_HiddenBonePreset");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1L_P001_low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1L_P001_low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1L_P001_low) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1L_P001_low");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1L_P001_low) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1L_P001_low");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleS_003
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleS_003 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleS_003) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleS_003");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleS_003) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleS_003");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleS_002_N
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleS_002_N final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleS_002_N) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleS_002_N");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleS_002_N) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleS_002_N");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleS_002
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleS_002 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleS_002) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleS_002");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleS_002) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleS_002");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleS_001
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleS_001 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleS_001) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleS_001");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleS_001) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleS_001");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleF_002
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleF_002 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleF_002) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleF_002");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleF_002) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleF_002");

// ScriptStruct JackGame.JackLDT_UmaRaceEDT_RankF
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceEDT_RankF final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceEDT_RankF) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceEDT_RankF");
static_assert(sizeof(FJackLDT_UmaRaceEDT_RankF) == 0x000010, "Wrong size on FJackLDT_UmaRaceEDT_RankF");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleD_002_N
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleD_002_N final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleD_002_N) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleD_002_N");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleD_002_N) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleD_002_N");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleD_001
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleD_001 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleD_001) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleD_001");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleD_001) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleD_001");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleC_002_N
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleC_002_N final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleC_002_N) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleC_002_N");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleC_002_N) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleC_002_N");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleC_002
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleC_002 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleC_002) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleC_002");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleC_002) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleC_002");

// ScriptStruct JackGame.JackLDT_UmaRaceEDT_RankC_N
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceEDT_RankC_N final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceEDT_RankC_N) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceEDT_RankC_N");
static_assert(sizeof(FJackLDT_UmaRaceEDT_RankC_N) == 0x000010, "Wrong size on FJackLDT_UmaRaceEDT_RankC_N");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleB_002
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleB_002 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleB_002) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleB_002");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleB_002) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleB_002");

// ScriptStruct JackGame.JackLDT_UmaRaceEDT_RankB_N
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceEDT_RankB_N final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceEDT_RankB_N) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceEDT_RankB_N");
static_assert(sizeof(FJackLDT_UmaRaceEDT_RankB_N) == 0x000010, "Wrong size on FJackLDT_UmaRaceEDT_RankB_N");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleA_002_N
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleA_002_N final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleA_002_N) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleA_002_N");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleA_002_N) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleA_002_N");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleA_002
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleA_002 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleA_002) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleA_002");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleA_002) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleA_002");

// ScriptStruct JackGame.JackLDT_UmaRaceTimeScheduleA_001
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceTimeScheduleA_001 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceTimeScheduleA_001) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceTimeScheduleA_001");
static_assert(sizeof(FJackLDT_UmaRaceTimeScheduleA_001) == 0x000010, "Wrong size on FJackLDT_UmaRaceTimeScheduleA_001");

// ScriptStruct JackGame.JackLDT_UmaRaceEDT_RankA_N
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceEDT_RankA_N final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceEDT_RankA_N) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceEDT_RankA_N");
static_assert(sizeof(FJackLDT_UmaRaceEDT_RankA_N) == 0x000010, "Wrong size on FJackLDT_UmaRaceEDT_RankA_N");

// ScriptStruct JackGame.JackLDT_UmaRaceEDT_RankA_H
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceEDT_RankA_H final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceEDT_RankA_H) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceEDT_RankA_H");
static_assert(sizeof(FJackLDT_UmaRaceEDT_RankA_H) == 0x000010, "Wrong size on FJackLDT_UmaRaceEDT_RankA_H");

// ScriptStruct JackGame.JackLDT_UmaRaceResultCamera
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UmaRaceResultCamera final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UmaRaceResultCamera) == 0x000008, "Wrong alignment on FJackLDT_UmaRaceResultCamera");
static_assert(sizeof(FJackLDT_UmaRaceResultCamera) == 0x000010, "Wrong size on FJackLDT_UmaRaceResultCamera");

// ScriptStruct JackGame.JackLDT_SlotWildDataTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_SlotWildDataTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_SlotWildDataTable) == 0x000008, "Wrong alignment on FJackLDT_SlotWildDataTable");
static_assert(sizeof(FJackLDT_SlotWildDataTable) == 0x000010, "Wrong size on FJackLDT_SlotWildDataTable");

// ScriptStruct JackGame.JackLDT_HairExtra
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_HairExtra final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_HairExtra) == 0x000008, "Wrong alignment on FJackLDT_HairExtra");
static_assert(sizeof(FJackLDT_HairExtra) == 0x000010, "Wrong size on FJackLDT_HairExtra");

// ScriptStruct JackGame.JackLDT_SlotReachDataTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_SlotReachDataTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_SlotReachDataTable) == 0x000008, "Wrong alignment on FJackLDT_SlotReachDataTable");
static_assert(sizeof(FJackLDT_SlotReachDataTable) == 0x000010, "Wrong size on FJackLDT_SlotReachDataTable");

// ScriptStruct JackGame.JackLDT_SlotMENormal
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_SlotMENormal final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_SlotMENormal) == 0x000008, "Wrong alignment on FJackLDT_SlotMENormal");
static_assert(sizeof(FJackLDT_SlotMENormal) == 0x000010, "Wrong size on FJackLDT_SlotMENormal");

// ScriptStruct JackGame.JackLDT_SlotHitProbabilityDataTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_SlotHitProbabilityDataTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_SlotHitProbabilityDataTable) == 0x000008, "Wrong alignment on FJackLDT_SlotHitProbabilityDataTable");
static_assert(sizeof(FJackLDT_SlotHitProbabilityDataTable) == 0x000010, "Wrong size on FJackLDT_SlotHitProbabilityDataTable");

// ScriptStruct JackGame.JackLDT_Sim_MantleC_N002_up_Cs1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_MantleC_N002_up_Cs1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_MantleC_N002_up_Cs1) == 0x000008, "Wrong alignment on FJackLDT_Sim_MantleC_N002_up_Cs1");
static_assert(sizeof(FJackLDT_Sim_MantleC_N002_up_Cs1) == 0x000010, "Wrong size on FJackLDT_Sim_MantleC_N002_up_Cs1");

// ScriptStruct JackGame.JackLDT_SlotHitLineDataTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_SlotHitLineDataTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_SlotHitLineDataTable) == 0x000008, "Wrong alignment on FJackLDT_SlotHitLineDataTable");
static_assert(sizeof(FJackLDT_SlotHitLineDataTable) == 0x000010, "Wrong size on FJackLDT_SlotHitLineDataTable");

// ScriptStruct JackGame.JackLDT_Sim_MantleC_P007_low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_MantleC_P007_low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_MantleC_P007_low) == 0x000008, "Wrong alignment on FJackLDT_Sim_MantleC_P007_low");
static_assert(sizeof(FJackLDT_Sim_MantleC_P007_low) == 0x000010, "Wrong size on FJackLDT_Sim_MantleC_P007_low");

// ScriptStruct JackGame.JackLDT_SlotAnimAssetDataTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_SlotAnimAssetDataTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_SlotAnimAssetDataTable) == 0x000008, "Wrong alignment on FJackLDT_SlotAnimAssetDataTable");
static_assert(sizeof(FJackLDT_SlotAnimAssetDataTable) == 0x000010, "Wrong size on FJackLDT_SlotAnimAssetDataTable");

// ScriptStruct JackGame.JackLDT_RouletteDataTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RouletteDataTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RouletteDataTable) == 0x000008, "Wrong alignment on FJackLDT_RouletteDataTable");
static_assert(sizeof(FJackLDT_RouletteDataTable) == 0x000010, "Wrong size on FJackLDT_RouletteDataTable");

// ScriptStruct JackGame.JackLDT_Pose_LR_RearHairD1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_LR_RearHairD1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_LR_RearHairD1) == 0x000008, "Wrong alignment on FJackLDT_Pose_LR_RearHairD1");
static_assert(sizeof(FJackLDT_Pose_LR_RearHairD1) == 0x000010, "Wrong size on FJackLDT_Pose_LR_RearHairD1");

// ScriptStruct JackGame.JackLDT_PokerItem_1Coin_Black
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PokerItem_1Coin_Black final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PokerItem_1Coin_Black) == 0x000008, "Wrong alignment on FJackLDT_PokerItem_1Coin_Black");
static_assert(sizeof(FJackLDT_PokerItem_1Coin_Black) == 0x000010, "Wrong size on FJackLDT_PokerItem_1Coin_Black");

// ScriptStruct JackGame.JackLDT_PokerItem_10Coin_Red
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PokerItem_10Coin_Red final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PokerItem_10Coin_Red) == 0x000008, "Wrong alignment on FJackLDT_PokerItem_10Coin_Red");
static_assert(sizeof(FJackLDT_PokerItem_10Coin_Red) == 0x000010, "Wrong size on FJackLDT_PokerItem_10Coin_Red");

// ScriptStruct JackGame.JackLDT_PokerItem_10Coin_Gold
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PokerItem_10Coin_Gold final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PokerItem_10Coin_Gold) == 0x000008, "Wrong alignment on FJackLDT_PokerItem_10Coin_Gold");
static_assert(sizeof(FJackLDT_PokerItem_10Coin_Gold) == 0x000010, "Wrong size on FJackLDT_PokerItem_10Coin_Gold");

// ScriptStruct JackGame.JackLDT_PokerItem_100Coin_Red
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PokerItem_100Coin_Red final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PokerItem_100Coin_Red) == 0x000008, "Wrong alignment on FJackLDT_PokerItem_100Coin_Red");
static_assert(sizeof(FJackLDT_PokerItem_100Coin_Red) == 0x000010, "Wrong size on FJackLDT_PokerItem_100Coin_Red");

// ScriptStruct JackGame.JackLDT_PokerItem_100Coin_Black
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PokerItem_100Coin_Black final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PokerItem_100Coin_Black) == 0x000008, "Wrong alignment on FJackLDT_PokerItem_100Coin_Black");
static_assert(sizeof(FJackLDT_PokerItem_100Coin_Black) == 0x000010, "Wrong size on FJackLDT_PokerItem_100Coin_Black");

// ScriptStruct JackGame.JackLDT_PokerTakaraBakoProbability
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PokerTakaraBakoProbability final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PokerTakaraBakoProbability) == 0x000008, "Wrong alignment on FJackLDT_PokerTakaraBakoProbability");
static_assert(sizeof(FJackLDT_PokerTakaraBakoProbability) == 0x000010, "Wrong size on FJackLDT_PokerTakaraBakoProbability");

// ScriptStruct JackGame.JackLDT_PokerPayoutFraction
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PokerPayoutFraction final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PokerPayoutFraction) == 0x000008, "Wrong alignment on FJackLDT_PokerPayoutFraction");
static_assert(sizeof(FJackLDT_PokerPayoutFraction) == 0x000010, "Wrong size on FJackLDT_PokerPayoutFraction");

// ScriptStruct JackGame.JackLDT_PokerHandDataTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PokerHandDataTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PokerHandDataTable) == 0x000008, "Wrong alignment on FJackLDT_PokerHandDataTable");
static_assert(sizeof(FJackLDT_PokerHandDataTable) == 0x000010, "Wrong size on FJackLDT_PokerHandDataTable");

// ScriptStruct JackGame.JackLDT_PokerDoubleUpDataTable100
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PokerDoubleUpDataTable100 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PokerDoubleUpDataTable100) == 0x000008, "Wrong alignment on FJackLDT_PokerDoubleUpDataTable100");
static_assert(sizeof(FJackLDT_PokerDoubleUpDataTable100) == 0x000010, "Wrong size on FJackLDT_PokerDoubleUpDataTable100");

// ScriptStruct JackGame.JackLDT_MeosiSlotMonsterRankMap
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMonsterRankMap final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMonsterRankMap) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMonsterRankMap");
static_assert(sizeof(FJackLDT_MeosiSlotMonsterRankMap) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMonsterRankMap");

// ScriptStruct JackGame.JackLDT_MeosiSlotMonsterParam
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMonsterParam final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMonsterParam) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMonsterParam");
static_assert(sizeof(FJackLDT_MeosiSlotMonsterParam) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMonsterParam");

// ScriptStruct JackGame.JackMeosiSlotBattleReaction
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackMeosiSlotBattleReaction final
{
public:
	EJackMeosiSlotBattleReaction                  Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Damage;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Avoidance_TextID;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDamageInvalid;                                  // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMeosiSlotBattleReaction) == 0x000008, "Wrong alignment on FJackMeosiSlotBattleReaction");
static_assert(sizeof(FJackMeosiSlotBattleReaction) == 0x000018, "Wrong size on FJackMeosiSlotBattleReaction");
static_assert(offsetof(FJackMeosiSlotBattleReaction, Type) == 0x000000, "Member 'FJackMeosiSlotBattleReaction::Type' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotBattleReaction, Damage) == 0x000004, "Member 'FJackMeosiSlotBattleReaction::Damage' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotBattleReaction, Avoidance_TextID) == 0x000008, "Member 'FJackMeosiSlotBattleReaction::Avoidance_TextID' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotBattleReaction, bIsDamageInvalid) == 0x000010, "Member 'FJackMeosiSlotBattleReaction::bIsDamageInvalid' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotBattle
// 0x00F0 (0x00F0 - 0x0000)
struct FJackMeosiSlotBattle final
{
public:
	struct FJackMeosiSlotMonster                  PartyMonster;                                      // 0x0000(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FJackMeosiSlotMonster                  EnemyMonster;                                      // 0x0048(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EJackMeosiSlotBattleActor                     Actor;                                             // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotBattleActor                     Reactor;                                           // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackMeosiSlotBattleAction             Action;                                            // 0x0098(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackMeosiSlotBattleReaction           Reaction;                                          // 0x00C0(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EJackMeosiSlotBattleResult                    Result;                                            // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsComebackWin;                                    // 0x00D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWillBeEnemyRecruited;                             // 0x00DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB[0x1];                                       // 0x00DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumEnemy;                                          // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotBattleSequence                  Sequence;                                          // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumElapsedGame;                                    // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsComebackAfterResult;                            // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsIchigekiWin;                                    // 0x00E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsIchigekiWinMode;                                // 0x00EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EB[0x5];                                       // 0x00EB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMeosiSlotBattle) == 0x000008, "Wrong alignment on FJackMeosiSlotBattle");
static_assert(sizeof(FJackMeosiSlotBattle) == 0x0000F0, "Wrong size on FJackMeosiSlotBattle");
static_assert(offsetof(FJackMeosiSlotBattle, PartyMonster) == 0x000000, "Member 'FJackMeosiSlotBattle::PartyMonster' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotBattle, EnemyMonster) == 0x000048, "Member 'FJackMeosiSlotBattle::EnemyMonster' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotBattle, Actor) == 0x000090, "Member 'FJackMeosiSlotBattle::Actor' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotBattle, Reactor) == 0x000091, "Member 'FJackMeosiSlotBattle::Reactor' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotBattle, Action) == 0x000098, "Member 'FJackMeosiSlotBattle::Action' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotBattle, Reaction) == 0x0000C0, "Member 'FJackMeosiSlotBattle::Reaction' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotBattle, Result) == 0x0000D8, "Member 'FJackMeosiSlotBattle::Result' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotBattle, bIsComebackWin) == 0x0000D9, "Member 'FJackMeosiSlotBattle::bIsComebackWin' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotBattle, bWillBeEnemyRecruited) == 0x0000DA, "Member 'FJackMeosiSlotBattle::bWillBeEnemyRecruited' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotBattle, NumEnemy) == 0x0000DC, "Member 'FJackMeosiSlotBattle::NumEnemy' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotBattle, Sequence) == 0x0000E0, "Member 'FJackMeosiSlotBattle::Sequence' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotBattle, NumElapsedGame) == 0x0000E4, "Member 'FJackMeosiSlotBattle::NumElapsedGame' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotBattle, bIsComebackAfterResult) == 0x0000E8, "Member 'FJackMeosiSlotBattle::bIsComebackAfterResult' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotBattle, bIsIchigekiWin) == 0x0000E9, "Member 'FJackMeosiSlotBattle::bIsIchigekiWin' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotBattle, bIsIchigekiWinMode) == 0x0000EA, "Member 'FJackMeosiSlotBattle::bIsIchigekiWinMode' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotMonsterList_Rank_F
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMonsterList_Rank_F final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMonsterList_Rank_F) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMonsterList_Rank_F");
static_assert(sizeof(FJackLDT_MeosiSlotMonsterList_Rank_F) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMonsterList_Rank_F");

// ScriptStruct JackGame.JackLDT_MeosiSlotMonsterList_Rank_E
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMonsterList_Rank_E final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMonsterList_Rank_E) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMonsterList_Rank_E");
static_assert(sizeof(FJackLDT_MeosiSlotMonsterList_Rank_E) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMonsterList_Rank_E");

// ScriptStruct JackGame.JackLDT_MeosiSlotMonsterList_Rank_B
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMonsterList_Rank_B final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMonsterList_Rank_B) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMonsterList_Rank_B");
static_assert(sizeof(FJackLDT_MeosiSlotMonsterList_Rank_B) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMonsterList_Rank_B");

// ScriptStruct JackGame.JackLDT_MeosiSlotMonsterEncounterProbability
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMonsterEncounterProbability final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMonsterEncounterProbability) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMonsterEncounterProbability");
static_assert(sizeof(FJackLDT_MeosiSlotMonsterEncounterProbability) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMonsterEncounterProbability");

// ScriptStruct JackGame.JackLDT_RtEx_RtEx_NmSkirtB1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_RtEx_NmSkirtB1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_RtEx_NmSkirtB1) == 0x000008, "Wrong alignment on FJackLDT_RtEx_RtEx_NmSkirtB1");
static_assert(sizeof(FJackLDT_RtEx_RtEx_NmSkirtB1) == 0x000010, "Wrong size on FJackLDT_RtEx_RtEx_NmSkirtB1");

// ScriptStruct JackGame.JackLDT_MeosiSlotMidBossMonsterSelectProbability
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMidBossMonsterSelectProbability final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMidBossMonsterSelectProbability) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMidBossMonsterSelectProbability");
static_assert(sizeof(FJackLDT_MeosiSlotMidBossMonsterSelectProbability) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMidBossMonsterSelectProbability");

// ScriptStruct JackGame.JackLDT_MeosiSlotBonusMonsterListLevel5
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotBonusMonsterListLevel5 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotBonusMonsterListLevel5) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotBonusMonsterListLevel5");
static_assert(sizeof(FJackLDT_MeosiSlotBonusMonsterListLevel5) == 0x000010, "Wrong size on FJackLDT_MeosiSlotBonusMonsterListLevel5");

// ScriptStruct JackGame.JackLDT_MeosiSlotBonusMonsterListLevel4
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotBonusMonsterListLevel4 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotBonusMonsterListLevel4) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotBonusMonsterListLevel4");
static_assert(sizeof(FJackLDT_MeosiSlotBonusMonsterListLevel4) == 0x000010, "Wrong size on FJackLDT_MeosiSlotBonusMonsterListLevel4");

// ScriptStruct JackGame.JackLDT_MeosiSlotBonusMonsterListLevel1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotBonusMonsterListLevel1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotBonusMonsterListLevel1) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotBonusMonsterListLevel1");
static_assert(sizeof(FJackLDT_MeosiSlotBonusMonsterListLevel1) == 0x000010, "Wrong size on FJackLDT_MeosiSlotBonusMonsterListLevel1");

// ScriptStruct JackGame.JackLDT_MeosiSlotBonusMonsterEncounterProbability
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotBonusMonsterEncounterProbability final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotBonusMonsterEncounterProbability) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotBonusMonsterEncounterProbability");
static_assert(sizeof(FJackLDT_MeosiSlotBonusMonsterEncounterProbability) == 0x000010, "Wrong size on FJackLDT_MeosiSlotBonusMonsterEncounterProbability");

// ScriptStruct JackGame.JackLDT_MeosiSlotBehaviorProbability
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotBehaviorProbability final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotBehaviorProbability) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotBehaviorProbability");
static_assert(sizeof(FJackLDT_MeosiSlotBehaviorProbability) == 0x000010, "Wrong size on FJackLDT_MeosiSlotBehaviorProbability");

// ScriptStruct JackGame.JackLDT_MeosiSlotItemProbability
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotItemProbability final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotItemProbability) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotItemProbability");
static_assert(sizeof(FJackLDT_MeosiSlotItemProbability) == 0x000010, "Wrong size on FJackLDT_MeosiSlotItemProbability");

// ScriptStruct JackGame.JackLDT_MeosiSlotItemParam
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotItemParam final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotItemParam) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotItemParam");
static_assert(sizeof(FJackLDT_MeosiSlotItemParam) == 0x000010, "Wrong size on FJackLDT_MeosiSlotItemParam");

// ScriptStruct JackGame.JackLDT_MeosiSlotFlavorItemRank_Sp3
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotFlavorItemRank_Sp3 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotFlavorItemRank_Sp3) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotFlavorItemRank_Sp3");
static_assert(sizeof(FJackLDT_MeosiSlotFlavorItemRank_Sp3) == 0x000010, "Wrong size on FJackLDT_MeosiSlotFlavorItemRank_Sp3");

// ScriptStruct JackGame.JackLDT_MeosiSlotFlavorItemRank_Sp1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotFlavorItemRank_Sp1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotFlavorItemRank_Sp1) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotFlavorItemRank_Sp1");
static_assert(sizeof(FJackLDT_MeosiSlotFlavorItemRank_Sp1) == 0x000010, "Wrong size on FJackLDT_MeosiSlotFlavorItemRank_Sp1");

// ScriptStruct JackGame.JackLDT_MeosiSlotFlavorItemRankSelectProbability
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotFlavorItemRankSelectProbability final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotFlavorItemRankSelectProbability) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotFlavorItemRankSelectProbability");
static_assert(sizeof(FJackLDT_MeosiSlotFlavorItemRankSelectProbability) == 0x000010, "Wrong size on FJackLDT_MeosiSlotFlavorItemRankSelectProbability");

// ScriptStruct JackGame.JackLDT_MeosiSlotFlavorItemRank5
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotFlavorItemRank5 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotFlavorItemRank5) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotFlavorItemRank5");
static_assert(sizeof(FJackLDT_MeosiSlotFlavorItemRank5) == 0x000010, "Wrong size on FJackLDT_MeosiSlotFlavorItemRank5");

// ScriptStruct JackGame.JackLDT_MeosiSlotFlavorItemRank2
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotFlavorItemRank2 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotFlavorItemRank2) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotFlavorItemRank2");
static_assert(sizeof(FJackLDT_MeosiSlotFlavorItemRank2) == 0x000010, "Wrong size on FJackLDT_MeosiSlotFlavorItemRank2");

// ScriptStruct JackGame.JackLDT_MeosiSlotFlavorItemRank1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotFlavorItemRank1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotFlavorItemRank1) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotFlavorItemRank1");
static_assert(sizeof(FJackLDT_MeosiSlotFlavorItemRank1) == 0x000010, "Wrong size on FJackLDT_MeosiSlotFlavorItemRank1");

// ScriptStruct JackGame.JackLDT_MeosiSlotFlavorItemKindSelectProbability1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotFlavorItemKindSelectProbability1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotFlavorItemKindSelectProbability1) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotFlavorItemKindSelectProbability1");
static_assert(sizeof(FJackLDT_MeosiSlotFlavorItemKindSelectProbability1) == 0x000010, "Wrong size on FJackLDT_MeosiSlotFlavorItemKindSelectProbability1");

// ScriptStruct JackGame.JackLDT_RtEx_P001_Skirt
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_P001_Skirt final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_P001_Skirt) == 0x000008, "Wrong alignment on FJackLDT_RtEx_P001_Skirt");
static_assert(sizeof(FJackLDT_RtEx_P001_Skirt) == 0x000010, "Wrong size on FJackLDT_RtEx_P001_Skirt");

// ScriptStruct JackGame.JackLDT_MeosiSlotYakumonoFlashProb
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotYakumonoFlashProb final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotYakumonoFlashProb) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotYakumonoFlashProb");
static_assert(sizeof(FJackLDT_MeosiSlotYakumonoFlashProb) == 0x000010, "Wrong size on FJackLDT_MeosiSlotYakumonoFlashProb");

// ScriptStruct JackGame.JackLDT_RtEx_SBSkirt
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SBSkirt final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SBSkirt) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SBSkirt");
static_assert(sizeof(FJackLDT_RtEx_SBSkirt) == 0x000010, "Wrong size on FJackLDT_RtEx_SBSkirt");

// ScriptStruct JackGame.JackLDT_MeosiSlotUraModeLottery
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotUraModeLottery final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotUraModeLottery) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotUraModeLottery");
static_assert(sizeof(FJackLDT_MeosiSlotUraModeLottery) == 0x000010, "Wrong size on FJackLDT_MeosiSlotUraModeLottery");

// ScriptStruct JackGame.JackLDT_MeosiSlotUnionRouteProb
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotUnionRouteProb final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotUnionRouteProb) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotUnionRouteProb");
static_assert(sizeof(FJackLDT_MeosiSlotUnionRouteProb) == 0x000010, "Wrong size on FJackLDT_MeosiSlotUnionRouteProb");

// ScriptStruct JackGame.JackWindControlInfo
// 0x0001 (0x0001 - 0x0000)
struct FJackWindControlInfo final
{
public:
	EJackWorldWindLevel                           WindLevel;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackWindControlInfo) == 0x000001, "Wrong alignment on FJackWindControlInfo");
static_assert(sizeof(FJackWindControlInfo) == 0x000001, "Wrong size on FJackWindControlInfo");
static_assert(offsetof(FJackWindControlInfo, WindLevel) == 0x000000, "Member 'FJackWindControlInfo::WindLevel' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotUnionButtonBranch
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotUnionButtonBranch final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotUnionButtonBranch) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotUnionButtonBranch");
static_assert(sizeof(FJackLDT_MeosiSlotUnionButtonBranch) == 0x000010, "Wrong size on FJackLDT_MeosiSlotUnionButtonBranch");

// ScriptStruct JackGame.JackLDT_MeosiSlotTextures
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotTextures final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotTextures) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotTextures");
static_assert(sizeof(FJackLDT_MeosiSlotTextures) == 0x000010, "Wrong size on FJackLDT_MeosiSlotTextures");

// ScriptStruct JackGame.JackLDT_MeosiSlotSptTBox
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotSptTBox final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotSptTBox) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotSptTBox");
static_assert(sizeof(FJackLDT_MeosiSlotSptTBox) == 0x000010, "Wrong size on FJackLDT_MeosiSlotSptTBox");

// ScriptStruct JackGame.JackLDT_MeosiSlotSptLastPushProb
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotSptLastPushProb final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotSptLastPushProb) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotSptLastPushProb");
static_assert(sizeof(FJackLDT_MeosiSlotSptLastPushProb) == 0x000010, "Wrong size on FJackLDT_MeosiSlotSptLastPushProb");

// ScriptStruct JackGame.JackLDT_MeosiSlotSptLastActProb
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotSptLastActProb final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotSptLastActProb) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotSptLastActProb");
static_assert(sizeof(FJackLDT_MeosiSlotSptLastActProb) == 0x000010, "Wrong size on FJackLDT_MeosiSlotSptLastActProb");

// ScriptStruct JackGame.JackLocatorCourse
// 0x0018 (0x0018 - 0x0000)
struct FJackLocatorCourse final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AJackLocator*>                   Locators;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackLocatorCourse) == 0x000008, "Wrong alignment on FJackLocatorCourse");
static_assert(sizeof(FJackLocatorCourse) == 0x000018, "Wrong size on FJackLocatorCourse");
static_assert(offsetof(FJackLocatorCourse, ID) == 0x000000, "Member 'FJackLocatorCourse::ID' has a wrong offset!");
static_assert(offsetof(FJackLocatorCourse, Locators) == 0x000008, "Member 'FJackLocatorCourse::Locators' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotSptCycleProb
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotSptCycleProb final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotSptCycleProb) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotSptCycleProb");
static_assert(sizeof(FJackLDT_MeosiSlotSptCycleProb) == 0x000010, "Wrong size on FJackLDT_MeosiSlotSptCycleProb");

// ScriptStruct JackGame.JackLDT_MeosiSlotSptContinueProb
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotSptContinueProb final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotSptContinueProb) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotSptContinueProb");
static_assert(sizeof(FJackLDT_MeosiSlotSptContinueProb) == 0x000010, "Wrong size on FJackLDT_MeosiSlotSptContinueProb");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1L_P006_up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1L_P006_up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1L_P006_up) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1L_P006_up");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1L_P006_up) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1L_P006_up");

// ScriptStruct JackGame.JackLDT_MeosiSlotSptBigPushProb
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotSptBigPushProb final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotSptBigPushProb) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotSptBigPushProb");
static_assert(sizeof(FJackLDT_MeosiSlotSptBigPushProb) == 0x000010, "Wrong size on FJackLDT_MeosiSlotSptBigPushProb");

// ScriptStruct JackGame.JackLDT_MeosiSlotSptActProb
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotSptActProb final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotSptActProb) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotSptActProb");
static_assert(sizeof(FJackLDT_MeosiSlotSptActProb) == 0x000010, "Wrong size on FJackLDT_MeosiSlotSptActProb");

// ScriptStruct JackGame.JackLDT_MeosiSlotSimWinProb
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotSimWinProb final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotSimWinProb) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotSimWinProb");
static_assert(sizeof(FJackLDT_MeosiSlotSimWinProb) == 0x000010, "Wrong size on FJackLDT_MeosiSlotSimWinProb");

// ScriptStruct JackGame.JackLDT_MeosiSlotSimohuriRisingProb
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotSimohuriRisingProb final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotSimohuriRisingProb) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotSimohuriRisingProb");
static_assert(sizeof(FJackLDT_MeosiSlotSimohuriRisingProb) == 0x000010, "Wrong size on FJackLDT_MeosiSlotSimohuriRisingProb");

// ScriptStruct JackGame.JackLDT_MeosiSlotSimExactlyProb
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotSimExactlyProb final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotSimExactlyProb) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotSimExactlyProb");
static_assert(sizeof(FJackLDT_MeosiSlotSimExactlyProb) == 0x000010, "Wrong size on FJackLDT_MeosiSlotSimExactlyProb");

// ScriptStruct JackGame.JackLDT_MeosiSlotShimohuriResultME
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotShimohuriResultME final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotShimohuriResultME) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotShimohuriResultME");
static_assert(sizeof(FJackLDT_MeosiSlotShimohuriResultME) == 0x000010, "Wrong size on FJackLDT_MeosiSlotShimohuriResultME");

// ScriptStruct JackGame.JackLDT_MeosiSlotShimohuriAppeareRate
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotShimohuriAppeareRate final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotShimohuriAppeareRate) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotShimohuriAppeareRate");
static_assert(sizeof(FJackLDT_MeosiSlotShimohuriAppeareRate) == 0x000010, "Wrong size on FJackLDT_MeosiSlotShimohuriAppeareRate");

// ScriptStruct JackGame.JackLDT_MeosiSlotShimofuriChance
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotShimofuriChance final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotShimofuriChance) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotShimofuriChance");
static_assert(sizeof(FJackLDT_MeosiSlotShimofuriChance) == 0x000010, "Wrong size on FJackLDT_MeosiSlotShimofuriChance");

// ScriptStruct JackGame.JackLDT_MeosiSlotSettingValueProbability
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotSettingValueProbability final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotSettingValueProbability) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotSettingValueProbability");
static_assert(sizeof(FJackLDT_MeosiSlotSettingValueProbability) == 0x000010, "Wrong size on FJackLDT_MeosiSlotSettingValueProbability");

// ScriptStruct JackGame.JackLDT_MeosiSlotSE
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotSE final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotSE) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotSE");
static_assert(sizeof(FJackLDT_MeosiSlotSE) == 0x000010, "Wrong size on FJackLDT_MeosiSlotSE");

// ScriptStruct JackGame.JackLDT_MeosiSlotScenarioTBox
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotScenarioTBox final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotScenarioTBox) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotScenarioTBox");
static_assert(sizeof(FJackLDT_MeosiSlotScenarioTBox) == 0x000010, "Wrong size on FJackLDT_MeosiSlotScenarioTBox");

// ScriptStruct JackGame.JackLDT_MeosiSlotScenarioSlime
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotScenarioSlime final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotScenarioSlime) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotScenarioSlime");
static_assert(sizeof(FJackLDT_MeosiSlotScenarioSlime) == 0x000010, "Wrong size on FJackLDT_MeosiSlotScenarioSlime");

// ScriptStruct JackGame.JackLDT_MeosiSlotScenarioRandom
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotScenarioRandom final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotScenarioRandom) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotScenarioRandom");
static_assert(sizeof(FJackLDT_MeosiSlotScenarioRandom) == 0x000010, "Wrong size on FJackLDT_MeosiSlotScenarioRandom");

// ScriptStruct JackGame.JackUMGOddEffectTimer
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FJackUMGOddEffectTimer final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGOddEffectTimer) == 0x000004, "Wrong alignment on FJackUMGOddEffectTimer");
static_assert(sizeof(FJackUMGOddEffectTimer) == 0x000010, "Wrong size on FJackUMGOddEffectTimer");

// ScriptStruct JackGame.JackLDT_Sim_C_RearHairH
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_C_RearHairH final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_C_RearHairH) == 0x000008, "Wrong alignment on FJackLDT_Sim_C_RearHairH");
static_assert(sizeof(FJackLDT_Sim_C_RearHairH) == 0x000010, "Wrong size on FJackLDT_Sim_C_RearHairH");

// ScriptStruct JackGame.JackLDT_MeosiSlotScenarioPattern
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotScenarioPattern final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotScenarioPattern) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotScenarioPattern");
static_assert(sizeof(FJackLDT_MeosiSlotScenarioPattern) == 0x000010, "Wrong size on FJackLDT_MeosiSlotScenarioPattern");

// ScriptStruct JackGame.JackLDT_MeosiSlotReelTexture
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotReelTexture final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotReelTexture) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotReelTexture");
static_assert(sizeof(FJackLDT_MeosiSlotReelTexture) == 0x000010, "Wrong size on FJackLDT_MeosiSlotReelTexture");

// ScriptStruct JackGame.JackLDT_MeosiSlotReelSoundProb
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotReelSoundProb final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotReelSoundProb) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotReelSoundProb");
static_assert(sizeof(FJackLDT_MeosiSlotReelSoundProb) == 0x000010, "Wrong size on FJackLDT_MeosiSlotReelSoundProb");

// ScriptStruct JackGame.JackLDT_MeosiSlotReelLamp_Hayabusa
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotReelLamp_Hayabusa final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotReelLamp_Hayabusa) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotReelLamp_Hayabusa");
static_assert(sizeof(FJackLDT_MeosiSlotReelLamp_Hayabusa) == 0x000010, "Wrong size on FJackLDT_MeosiSlotReelLamp_Hayabusa");

// ScriptStruct JackGame.JackLDT_MeosiSlotReelLamp_Anim04
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotReelLamp_Anim04 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotReelLamp_Anim04) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotReelLamp_Anim04");
static_assert(sizeof(FJackLDT_MeosiSlotReelLamp_Anim04) == 0x000010, "Wrong size on FJackLDT_MeosiSlotReelLamp_Anim04");

// ScriptStruct JackGame.JackMeosiSlotDrakeeEffect
// 0x0004 (0x0004 - 0x0000)
struct FJackMeosiSlotDrakeeEffect final
{
public:
	EJackMeosiSlotDrakeeEffect                    Type1;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotDrakeeEffect                    Type2;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotDrakeeEffect                    Type3;                                             // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotDrakeeColor                     Color;                                             // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMeosiSlotDrakeeEffect) == 0x000001, "Wrong alignment on FJackMeosiSlotDrakeeEffect");
static_assert(sizeof(FJackMeosiSlotDrakeeEffect) == 0x000004, "Wrong size on FJackMeosiSlotDrakeeEffect");
static_assert(offsetof(FJackMeosiSlotDrakeeEffect, Type1) == 0x000000, "Member 'FJackMeosiSlotDrakeeEffect::Type1' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotDrakeeEffect, Type2) == 0x000001, "Member 'FJackMeosiSlotDrakeeEffect::Type2' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotDrakeeEffect, Type3) == 0x000002, "Member 'FJackMeosiSlotDrakeeEffect::Type3' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotDrakeeEffect, Color) == 0x000003, "Member 'FJackMeosiSlotDrakeeEffect::Color' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotReelLamp_Anim02
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotReelLamp_Anim02 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotReelLamp_Anim02) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotReelLamp_Anim02");
static_assert(sizeof(FJackLDT_MeosiSlotReelLamp_Anim02) == 0x000010, "Wrong size on FJackLDT_MeosiSlotReelLamp_Anim02");

// ScriptStruct JackGame.JackUmaRaceCameraAnimData
// 0x0018 (0x0018 - 0x0000)
struct FJackUmaRaceCameraAnimData final
{
public:
	class UCameraAnim*                            CameraAnim;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayTime;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOrbitRotation;                                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTime;                                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUmaRaceCameraAnimData) == 0x000008, "Wrong alignment on FJackUmaRaceCameraAnimData");
static_assert(sizeof(FJackUmaRaceCameraAnimData) == 0x000018, "Wrong size on FJackUmaRaceCameraAnimData");
static_assert(offsetof(FJackUmaRaceCameraAnimData, CameraAnim) == 0x000000, "Member 'FJackUmaRaceCameraAnimData::CameraAnim' has a wrong offset!");
static_assert(offsetof(FJackUmaRaceCameraAnimData, PlayTime) == 0x000008, "Member 'FJackUmaRaceCameraAnimData::PlayTime' has a wrong offset!");
static_assert(offsetof(FJackUmaRaceCameraAnimData, PlayRate) == 0x00000C, "Member 'FJackUmaRaceCameraAnimData::PlayRate' has a wrong offset!");
static_assert(offsetof(FJackUmaRaceCameraAnimData, bIsOrbitRotation) == 0x000010, "Member 'FJackUmaRaceCameraAnimData::bIsOrbitRotation' has a wrong offset!");
static_assert(offsetof(FJackUmaRaceCameraAnimData, StartTime) == 0x000014, "Member 'FJackUmaRaceCameraAnimData::StartTime' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotReelLamp_Anim00
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotReelLamp_Anim00 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotReelLamp_Anim00) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotReelLamp_Anim00");
static_assert(sizeof(FJackLDT_MeosiSlotReelLamp_Anim00) == 0x000010, "Wrong size on FJackLDT_MeosiSlotReelLamp_Anim00");

// ScriptStruct JackGame.JackLDT_MeosiSlotPayingOut
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotPayingOut final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotPayingOut) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotPayingOut");
static_assert(sizeof(FJackLDT_MeosiSlotPayingOut) == 0x000010, "Wrong size on FJackLDT_MeosiSlotPayingOut");

// ScriptStruct JackGame.JackLDT_Other
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Other final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Other) == 0x000008, "Wrong alignment on FJackLDT_Other");
static_assert(sizeof(FJackLDT_Other) == 0x000010, "Wrong size on FJackLDT_Other");

// ScriptStruct JackGame.JackLDT_MeosiSlotPamphlet
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotPamphlet final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotPamphlet) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotPamphlet");
static_assert(sizeof(FJackLDT_MeosiSlotPamphlet) == 0x000010, "Wrong size on FJackLDT_MeosiSlotPamphlet");

// ScriptStruct JackGame.JackLDT_MeosiSlotModeForParadise
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotModeForParadise final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotModeForParadise) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotModeForParadise");
static_assert(sizeof(FJackLDT_MeosiSlotModeForParadise) == 0x000010, "Wrong size on FJackLDT_MeosiSlotModeForParadise");

// ScriptStruct JackGame.JackLDT_MeosiSlotMachineConditionMamonoMsg
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMachineConditionMamonoMsg final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMachineConditionMamonoMsg) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMachineConditionMamonoMsg");
static_assert(sizeof(FJackLDT_MeosiSlotMachineConditionMamonoMsg) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMachineConditionMamonoMsg");

// ScriptStruct JackGame.JackLDT_MeosiSlotMachineConditionFriendMsg
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMachineConditionFriendMsg final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMachineConditionFriendMsg) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMachineConditionFriendMsg");
static_assert(sizeof(FJackLDT_MeosiSlotMachineConditionFriendMsg) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMachineConditionFriendMsg");

// ScriptStruct JackGame.JackLDT_MeosiSlotHsHandLottery
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotHsHandLottery final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotHsHandLottery) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotHsHandLottery");
static_assert(sizeof(FJackLDT_MeosiSlotHsHandLottery) == 0x000010, "Wrong size on FJackLDT_MeosiSlotHsHandLottery");

// ScriptStruct JackGame.JackLDT_MeosiSlotHandStopType
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotHandStopType final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotHandStopType) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotHandStopType");
static_assert(sizeof(FJackLDT_MeosiSlotHandStopType) == 0x000010, "Wrong size on FJackLDT_MeosiSlotHandStopType");

// ScriptStruct JackGame.JackLDT_MeosiSlotHandsOrder
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotHandsOrder final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotHandsOrder) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotHandsOrder");
static_assert(sizeof(FJackLDT_MeosiSlotHandsOrder) == 0x000010, "Wrong size on FJackLDT_MeosiSlotHandsOrder");

// ScriptStruct JackGame.JackLDT_MeosiSlotHandNmToHs
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotHandNmToHs final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotHandNmToHs) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotHandNmToHs");
static_assert(sizeof(FJackLDT_MeosiSlotHandNmToHs) == 0x000010, "Wrong size on FJackLDT_MeosiSlotHandNmToHs");

// ScriptStruct JackGame.JackLDT_Pose_LR_SideHairK1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_LR_SideHairK1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_LR_SideHairK1) == 0x000008, "Wrong alignment on FJackLDT_Pose_LR_SideHairK1");
static_assert(sizeof(FJackLDT_Pose_LR_SideHairK1) == 0x000010, "Wrong size on FJackLDT_Pose_LR_SideHairK1");

// ScriptStruct JackGame.JackLDT_MeosiSlotHandHsToNm
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotHandHsToNm final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotHandHsToNm) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotHandHsToNm");
static_assert(sizeof(FJackLDT_MeosiSlotHandHsToNm) == 0x000010, "Wrong size on FJackLDT_MeosiSlotHandHsToNm");

// ScriptStruct JackGame.JackLDT_MeosiSlotGamesToParadise
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotGamesToParadise final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotGamesToParadise) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotGamesToParadise");
static_assert(sizeof(FJackLDT_MeosiSlotGamesToParadise) == 0x000010, "Wrong size on FJackLDT_MeosiSlotGamesToParadise");

// ScriptStruct JackGame.JackLDT_MeosiSlotEtcConf
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotEtcConf final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotEtcConf) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotEtcConf");
static_assert(sizeof(FJackLDT_MeosiSlotEtcConf) == 0x000010, "Wrong size on FJackLDT_MeosiSlotEtcConf");

// ScriptStruct JackGame.JackLDT_MeosiSlotDrakeeEffect2_Stock
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotDrakeeEffect2_Stock final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotDrakeeEffect2_Stock) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotDrakeeEffect2_Stock");
static_assert(sizeof(FJackLDT_MeosiSlotDrakeeEffect2_Stock) == 0x000010, "Wrong size on FJackLDT_MeosiSlotDrakeeEffect2_Stock");

// ScriptStruct JackGame.JackLDT_MeosiSlotDrakeeEffect2
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotDrakeeEffect2 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotDrakeeEffect2) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotDrakeeEffect2");
static_assert(sizeof(FJackLDT_MeosiSlotDrakeeEffect2) == 0x000010, "Wrong size on FJackLDT_MeosiSlotDrakeeEffect2");

// ScriptStruct JackGame.JackLDT_MeosiSlotDrakeeEffect1_Stock
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotDrakeeEffect1_Stock final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotDrakeeEffect1_Stock) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotDrakeeEffect1_Stock");
static_assert(sizeof(FJackLDT_MeosiSlotDrakeeEffect1_Stock) == 0x000010, "Wrong size on FJackLDT_MeosiSlotDrakeeEffect1_Stock");

// ScriptStruct JackGame.JackLDT_MeosiSlotCutinColorProb
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotCutinColorProb final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotCutinColorProb) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotCutinColorProb");
static_assert(sizeof(FJackLDT_MeosiSlotCutinColorProb) == 0x000010, "Wrong size on FJackLDT_MeosiSlotCutinColorProb");

// ScriptStruct JackGame.JackLDT_MeosiSlotChanceZoneLottery
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotChanceZoneLottery final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotChanceZoneLottery) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotChanceZoneLottery");
static_assert(sizeof(FJackLDT_MeosiSlotChanceZoneLottery) == 0x000010, "Wrong size on FJackLDT_MeosiSlotChanceZoneLottery");

// ScriptStruct JackGame.JackLDT_MeosiSlotBreakReplay
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotBreakReplay final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotBreakReplay) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotBreakReplay");
static_assert(sizeof(FJackLDT_MeosiSlotBreakReplay) == 0x000010, "Wrong size on FJackLDT_MeosiSlotBreakReplay");

// ScriptStruct JackGame.JackUMGFontColorSet
// 0x060C (0x060C - 0x0000)
struct FJackUMGFontColorSet final
{
public:
	struct FJackUMGFontColor                      White_Black;                                       // 0x0000(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Gray_Black;                                        // 0x0024(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Red_Black;                                         // 0x0048(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Orange_Black;                                      // 0x006C(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Yellow_Black;                                      // 0x0090(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Green_Black;                                       // 0x00B4(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Lime_Black;                                        // 0x00D8(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Blue_Black;                                        // 0x00FC(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Yellow_Brown;                                      // 0x0120(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Orange_Brown;                                      // 0x0144(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Brown_Transparent;                                 // 0x0168(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Brown_Cream;                                       // 0x018C(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Green_Darkgreen;                                   // 0x01B0(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Lime_Darkgreen;                                    // 0x01D4(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Yellow_Darkyellow;                                 // 0x01F8(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Orange_Darkorange;                                 // 0x021C(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Red_Darkred;                                       // 0x0240(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Yellow_Darkbrown;                                  // 0x0264(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Brown_Beige;                                       // 0x0288(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Brown_Orange;                                      // 0x02AC(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Blue_LightBlue;                                    // 0x02D0(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      LightYellow_Brown;                                 // 0x02F4(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      White_Brown;                                       // 0x0318(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Blue_Black_2;                                      // 0x033C(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Rarity_S;                                          // 0x0360(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Rarity_A;                                          // 0x0384(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Rarity_B;                                          // 0x03A8(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Rarity_C;                                          // 0x03CC(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Rarity_D;                                          // 0x03F0(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Rarity_E;                                          // 0x0414(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Rarity_F;                                          // 0x0438(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Brown_Yellow;                                      // 0x045C(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Grey_Transparent;                                  // 0x0480(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      LightBlue_Black;                                   // 0x04A4(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      LightBlue_Black_2;                                 // 0x04C8(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Yellow_Darkyellow_Map;                             // 0x04EC(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      Battle_Scenario_Fukidasi;                          // 0x0510(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      VoiceDrama_Normal;                                 // 0x0534(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      VoiceDrama_Gray;                                   // 0x0558(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      VoiceDrama_LogYellow;                              // 0x057C(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      VoiceDrama_LogBlue;                                // 0x05A0(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      VoiceDrama_FastForward;                            // 0x05C4(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackUMGFontColor                      VoiceDrama_Pafupafu;                               // 0x05E8(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGFontColorSet) == 0x000004, "Wrong alignment on FJackUMGFontColorSet");
static_assert(sizeof(FJackUMGFontColorSet) == 0x00060C, "Wrong size on FJackUMGFontColorSet");
static_assert(offsetof(FJackUMGFontColorSet, White_Black) == 0x000000, "Member 'FJackUMGFontColorSet::White_Black' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Gray_Black) == 0x000024, "Member 'FJackUMGFontColorSet::Gray_Black' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Red_Black) == 0x000048, "Member 'FJackUMGFontColorSet::Red_Black' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Orange_Black) == 0x00006C, "Member 'FJackUMGFontColorSet::Orange_Black' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Yellow_Black) == 0x000090, "Member 'FJackUMGFontColorSet::Yellow_Black' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Green_Black) == 0x0000B4, "Member 'FJackUMGFontColorSet::Green_Black' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Lime_Black) == 0x0000D8, "Member 'FJackUMGFontColorSet::Lime_Black' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Blue_Black) == 0x0000FC, "Member 'FJackUMGFontColorSet::Blue_Black' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Yellow_Brown) == 0x000120, "Member 'FJackUMGFontColorSet::Yellow_Brown' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Orange_Brown) == 0x000144, "Member 'FJackUMGFontColorSet::Orange_Brown' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Brown_Transparent) == 0x000168, "Member 'FJackUMGFontColorSet::Brown_Transparent' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Brown_Cream) == 0x00018C, "Member 'FJackUMGFontColorSet::Brown_Cream' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Green_Darkgreen) == 0x0001B0, "Member 'FJackUMGFontColorSet::Green_Darkgreen' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Lime_Darkgreen) == 0x0001D4, "Member 'FJackUMGFontColorSet::Lime_Darkgreen' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Yellow_Darkyellow) == 0x0001F8, "Member 'FJackUMGFontColorSet::Yellow_Darkyellow' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Orange_Darkorange) == 0x00021C, "Member 'FJackUMGFontColorSet::Orange_Darkorange' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Red_Darkred) == 0x000240, "Member 'FJackUMGFontColorSet::Red_Darkred' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Yellow_Darkbrown) == 0x000264, "Member 'FJackUMGFontColorSet::Yellow_Darkbrown' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Brown_Beige) == 0x000288, "Member 'FJackUMGFontColorSet::Brown_Beige' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Brown_Orange) == 0x0002AC, "Member 'FJackUMGFontColorSet::Brown_Orange' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Blue_LightBlue) == 0x0002D0, "Member 'FJackUMGFontColorSet::Blue_LightBlue' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, LightYellow_Brown) == 0x0002F4, "Member 'FJackUMGFontColorSet::LightYellow_Brown' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, White_Brown) == 0x000318, "Member 'FJackUMGFontColorSet::White_Brown' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Blue_Black_2) == 0x00033C, "Member 'FJackUMGFontColorSet::Blue_Black_2' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Rarity_S) == 0x000360, "Member 'FJackUMGFontColorSet::Rarity_S' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Rarity_A) == 0x000384, "Member 'FJackUMGFontColorSet::Rarity_A' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Rarity_B) == 0x0003A8, "Member 'FJackUMGFontColorSet::Rarity_B' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Rarity_C) == 0x0003CC, "Member 'FJackUMGFontColorSet::Rarity_C' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Rarity_D) == 0x0003F0, "Member 'FJackUMGFontColorSet::Rarity_D' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Rarity_E) == 0x000414, "Member 'FJackUMGFontColorSet::Rarity_E' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Rarity_F) == 0x000438, "Member 'FJackUMGFontColorSet::Rarity_F' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Brown_Yellow) == 0x00045C, "Member 'FJackUMGFontColorSet::Brown_Yellow' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Grey_Transparent) == 0x000480, "Member 'FJackUMGFontColorSet::Grey_Transparent' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, LightBlue_Black) == 0x0004A4, "Member 'FJackUMGFontColorSet::LightBlue_Black' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, LightBlue_Black_2) == 0x0004C8, "Member 'FJackUMGFontColorSet::LightBlue_Black_2' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Yellow_Darkyellow_Map) == 0x0004EC, "Member 'FJackUMGFontColorSet::Yellow_Darkyellow_Map' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, Battle_Scenario_Fukidasi) == 0x000510, "Member 'FJackUMGFontColorSet::Battle_Scenario_Fukidasi' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, VoiceDrama_Normal) == 0x000534, "Member 'FJackUMGFontColorSet::VoiceDrama_Normal' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, VoiceDrama_Gray) == 0x000558, "Member 'FJackUMGFontColorSet::VoiceDrama_Gray' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, VoiceDrama_LogYellow) == 0x00057C, "Member 'FJackUMGFontColorSet::VoiceDrama_LogYellow' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, VoiceDrama_LogBlue) == 0x0005A0, "Member 'FJackUMGFontColorSet::VoiceDrama_LogBlue' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, VoiceDrama_FastForward) == 0x0005C4, "Member 'FJackUMGFontColorSet::VoiceDrama_FastForward' has a wrong offset!");
static_assert(offsetof(FJackUMGFontColorSet, VoiceDrama_Pafupafu) == 0x0005E8, "Member 'FJackUMGFontColorSet::VoiceDrama_Pafupafu' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotBonusDecideHands
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotBonusDecideHands final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotBonusDecideHands) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotBonusDecideHands");
static_assert(sizeof(FJackLDT_MeosiSlotBonusDecideHands) == 0x000010, "Wrong size on FJackLDT_MeosiSlotBonusDecideHands");

// ScriptStruct JackGame.JackLDT_MeosiSlotBGM
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotBGM final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotBGM) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotBGM");
static_assert(sizeof(FJackLDT_MeosiSlotBGM) == 0x000010, "Wrong size on FJackLDT_MeosiSlotBGM");

// ScriptStruct JackGame.JackLDT_MeosiSlotBellRate
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotBellRate final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotBellRate) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotBellRate");
static_assert(sizeof(FJackLDT_MeosiSlotBellRate) == 0x000010, "Wrong size on FJackLDT_MeosiSlotBellRate");

// ScriptStruct JackGame.JackLDT_AttachedProps_P002
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AttachedProps_P002 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AttachedProps_P002) == 0x000008, "Wrong alignment on FJackLDT_AttachedProps_P002");
static_assert(sizeof(FJackLDT_AttachedProps_P002) == 0x000010, "Wrong size on FJackLDT_AttachedProps_P002");

// ScriptStruct JackGame.JackLDT_MeosiSlotBattleComebackWin
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotBattleComebackWin final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotBattleComebackWin) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotBattleComebackWin");
static_assert(sizeof(FJackLDT_MeosiSlotBattleComebackWin) == 0x000010, "Wrong size on FJackLDT_MeosiSlotBattleComebackWin");

// ScriptStruct JackGame.JackLDT_MeosiSlotBarChance
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotBarChance final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotBarChance) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotBarChance");
static_assert(sizeof(FJackLDT_MeosiSlotBarChance) == 0x000010, "Wrong size on FJackLDT_MeosiSlotBarChance");

// ScriptStruct JackGame.JackLDT_MeosiSlotActControl
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotActControl final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotActControl) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotActControl");
static_assert(sizeof(FJackLDT_MeosiSlotActControl) == 0x000010, "Wrong size on FJackLDT_MeosiSlotActControl");

// ScriptStruct JackGame.JackLDT_MeosiSlotVariableCeiling
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotVariableCeiling final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotVariableCeiling) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotVariableCeiling");
static_assert(sizeof(FJackLDT_MeosiSlotVariableCeiling) == 0x000010, "Wrong size on FJackLDT_MeosiSlotVariableCeiling");

// ScriptStruct JackGame.JackLDT_MeosiSlotTransitionProbability_SettingValue
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotTransitionProbability_SettingValue final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotTransitionProbability_SettingValue) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotTransitionProbability_SettingValue");
static_assert(sizeof(FJackLDT_MeosiSlotTransitionProbability_SettingValue) == 0x000010, "Wrong size on FJackLDT_MeosiSlotTransitionProbability_SettingValue");

// ScriptStruct JackGame.JackLDT_MeosiSlotTransitionProbability_Hand
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotTransitionProbability_Hand final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotTransitionProbability_Hand) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotTransitionProbability_Hand");
static_assert(sizeof(FJackLDT_MeosiSlotTransitionProbability_Hand) == 0x000010, "Wrong size on FJackLDT_MeosiSlotTransitionProbability_Hand");

// ScriptStruct JackGame.JackLDT_MeosiSlotStockNumber
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotStockNumber final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotStockNumber) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotStockNumber");
static_assert(sizeof(FJackLDT_MeosiSlotStockNumber) == 0x000010, "Wrong size on FJackLDT_MeosiSlotStockNumber");

// ScriptStruct JackGame.JackLDT_MeosiSlotSpecialBonusRisingProbability
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotSpecialBonusRisingProbability final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotSpecialBonusRisingProbability) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotSpecialBonusRisingProbability");
static_assert(sizeof(FJackLDT_MeosiSlotSpecialBonusRisingProbability) == 0x000010, "Wrong size on FJackLDT_MeosiSlotSpecialBonusRisingProbability");

// ScriptStruct JackGame.JackLDT_MeosiSlotMonsterRecruitCorrection
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMonsterRecruitCorrection final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMonsterRecruitCorrection) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMonsterRecruitCorrection");
static_assert(sizeof(FJackLDT_MeosiSlotMonsterRecruitCorrection) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMonsterRecruitCorrection");

// ScriptStruct JackGame.JackLDT_MeosiSlotExtraEffect
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotExtraEffect final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotExtraEffect) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotExtraEffect");
static_assert(sizeof(FJackLDT_MeosiSlotExtraEffect) == 0x000010, "Wrong size on FJackLDT_MeosiSlotExtraEffect");

// ScriptStruct JackGame.JackUMGTouchPadScrollContentData
// 0x0088 (0x0088 - 0x0000)
struct FJackUMGTouchPadScrollContentData final
{
public:
	bool                                          bInitialized;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelWidget*                           MainPanel;                                         // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanelSlot*                       ScrollContentSlot;                                 // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ScrollContent;                                     // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTextBlock*>                     TextBlockArray;                                    // 0x0020(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UImage*>                         ImageArray;                                        // 0x0030(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector2D                              ScrollContentSize;                                 // 0x0040(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TextMarginSize;                                    // 0x0048(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScrollParentSize;                                  // 0x0050(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrollPosTarget;                                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 ScrollBarImage;                                    // 0x0060(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrollBarSize;                                     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelWidget*                           TouchPadInfoPanel;                                 // 0x0070(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTagMode;                                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LineHeight;                                        // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LineTextLabelCount;                                // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LineImageCount;                                    // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGTouchPadScrollContentData) == 0x000008, "Wrong alignment on FJackUMGTouchPadScrollContentData");
static_assert(sizeof(FJackUMGTouchPadScrollContentData) == 0x000088, "Wrong size on FJackUMGTouchPadScrollContentData");
static_assert(offsetof(FJackUMGTouchPadScrollContentData, bInitialized) == 0x000000, "Member 'FJackUMGTouchPadScrollContentData::bInitialized' has a wrong offset!");
static_assert(offsetof(FJackUMGTouchPadScrollContentData, MainPanel) == 0x000008, "Member 'FJackUMGTouchPadScrollContentData::MainPanel' has a wrong offset!");
static_assert(offsetof(FJackUMGTouchPadScrollContentData, ScrollContentSlot) == 0x000010, "Member 'FJackUMGTouchPadScrollContentData::ScrollContentSlot' has a wrong offset!");
static_assert(offsetof(FJackUMGTouchPadScrollContentData, ScrollContent) == 0x000018, "Member 'FJackUMGTouchPadScrollContentData::ScrollContent' has a wrong offset!");
static_assert(offsetof(FJackUMGTouchPadScrollContentData, TextBlockArray) == 0x000020, "Member 'FJackUMGTouchPadScrollContentData::TextBlockArray' has a wrong offset!");
static_assert(offsetof(FJackUMGTouchPadScrollContentData, ImageArray) == 0x000030, "Member 'FJackUMGTouchPadScrollContentData::ImageArray' has a wrong offset!");
static_assert(offsetof(FJackUMGTouchPadScrollContentData, ScrollContentSize) == 0x000040, "Member 'FJackUMGTouchPadScrollContentData::ScrollContentSize' has a wrong offset!");
static_assert(offsetof(FJackUMGTouchPadScrollContentData, TextMarginSize) == 0x000048, "Member 'FJackUMGTouchPadScrollContentData::TextMarginSize' has a wrong offset!");
static_assert(offsetof(FJackUMGTouchPadScrollContentData, ScrollParentSize) == 0x000050, "Member 'FJackUMGTouchPadScrollContentData::ScrollParentSize' has a wrong offset!");
static_assert(offsetof(FJackUMGTouchPadScrollContentData, ScrollPosTarget) == 0x000058, "Member 'FJackUMGTouchPadScrollContentData::ScrollPosTarget' has a wrong offset!");
static_assert(offsetof(FJackUMGTouchPadScrollContentData, ScrollBarImage) == 0x000060, "Member 'FJackUMGTouchPadScrollContentData::ScrollBarImage' has a wrong offset!");
static_assert(offsetof(FJackUMGTouchPadScrollContentData, ScrollBarSize) == 0x000068, "Member 'FJackUMGTouchPadScrollContentData::ScrollBarSize' has a wrong offset!");
static_assert(offsetof(FJackUMGTouchPadScrollContentData, TouchPadInfoPanel) == 0x000070, "Member 'FJackUMGTouchPadScrollContentData::TouchPadInfoPanel' has a wrong offset!");
static_assert(offsetof(FJackUMGTouchPadScrollContentData, bUseTagMode) == 0x000078, "Member 'FJackUMGTouchPadScrollContentData::bUseTagMode' has a wrong offset!");
static_assert(offsetof(FJackUMGTouchPadScrollContentData, LineHeight) == 0x00007C, "Member 'FJackUMGTouchPadScrollContentData::LineHeight' has a wrong offset!");
static_assert(offsetof(FJackUMGTouchPadScrollContentData, LineTextLabelCount) == 0x000080, "Member 'FJackUMGTouchPadScrollContentData::LineTextLabelCount' has a wrong offset!");
static_assert(offsetof(FJackUMGTouchPadScrollContentData, LineImageCount) == 0x000084, "Member 'FJackUMGTouchPadScrollContentData::LineImageCount' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MeosiSlotEncounteredMonsterCount
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotEncounteredMonsterCount final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotEncounteredMonsterCount) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotEncounteredMonsterCount");
static_assert(sizeof(FJackLDT_MeosiSlotEncounteredMonsterCount) == 0x000010, "Wrong size on FJackLDT_MeosiSlotEncounteredMonsterCount");

// ScriptStruct JackGame.JackLDT_MeosiSlotConfigurationMain
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotConfigurationMain final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotConfigurationMain) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotConfigurationMain");
static_assert(sizeof(FJackLDT_MeosiSlotConfigurationMain) == 0x000010, "Wrong size on FJackLDT_MeosiSlotConfigurationMain");

// ScriptStruct JackGame.JackTokugiPanelAtariBonus
// 0x0008 (0x0008 - 0x0000)
struct FJackTokugiPanelAtariBonus final
{
public:
	EJackCharacter                                CharacterType;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BonusSkillPoint;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackTokugiPanelAtariBonus) == 0x000004, "Wrong alignment on FJackTokugiPanelAtariBonus");
static_assert(sizeof(FJackTokugiPanelAtariBonus) == 0x000008, "Wrong size on FJackTokugiPanelAtariBonus");
static_assert(offsetof(FJackTokugiPanelAtariBonus, CharacterType) == 0x000000, "Member 'FJackTokugiPanelAtariBonus::CharacterType' has a wrong offset!");
static_assert(offsetof(FJackTokugiPanelAtariBonus, BonusSkillPoint) == 0x000004, "Member 'FJackTokugiPanelAtariBonus::BonusSkillPoint' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MiniGameJackPotTowerSelectRate
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MiniGameJackPotTowerSelectRate final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MiniGameJackPotTowerSelectRate) == 0x000008, "Wrong alignment on FJackLDT_MiniGameJackPotTowerSelectRate");
static_assert(sizeof(FJackLDT_MiniGameJackPotTowerSelectRate) == 0x000010, "Wrong size on FJackLDT_MiniGameJackPotTowerSelectRate");

// ScriptStruct JackGame.JackLDT_MiniGameJackPotState
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MiniGameJackPotState final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MiniGameJackPotState) == 0x000008, "Wrong alignment on FJackLDT_MiniGameJackPotState");
static_assert(sizeof(FJackLDT_MiniGameJackPotState) == 0x000010, "Wrong size on FJackLDT_MiniGameJackPotState");

// ScriptStruct JackGame.JackLDT_MiniGameJackPotSlotRate
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MiniGameJackPotSlotRate final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MiniGameJackPotSlotRate) == 0x000008, "Wrong alignment on FJackLDT_MiniGameJackPotSlotRate");
static_assert(sizeof(FJackLDT_MiniGameJackPotSlotRate) == 0x000010, "Wrong size on FJackLDT_MiniGameJackPotSlotRate");

// ScriptStruct JackGame.JackLDT_MiniGameJackPotSlotProbability
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MiniGameJackPotSlotProbability final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MiniGameJackPotSlotProbability) == 0x000008, "Wrong alignment on FJackLDT_MiniGameJackPotSlotProbability");
static_assert(sizeof(FJackLDT_MiniGameJackPotSlotProbability) == 0x000010, "Wrong size on FJackLDT_MiniGameJackPotSlotProbability");

// ScriptStruct JackGame.JackLDT_MiniGameJackPotRouletteRate
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MiniGameJackPotRouletteRate final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MiniGameJackPotRouletteRate) == 0x000008, "Wrong alignment on FJackLDT_MiniGameJackPotRouletteRate");
static_assert(sizeof(FJackLDT_MiniGameJackPotRouletteRate) == 0x000010, "Wrong size on FJackLDT_MiniGameJackPotRouletteRate");

// ScriptStruct JackGame.JackLDT_MiniGameJackPotRouletteProbability
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MiniGameJackPotRouletteProbability final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MiniGameJackPotRouletteProbability) == 0x000008, "Wrong alignment on FJackLDT_MiniGameJackPotRouletteProbability");
static_assert(sizeof(FJackLDT_MiniGameJackPotRouletteProbability) == 0x000010, "Wrong size on FJackLDT_MiniGameJackPotRouletteProbability");

// ScriptStruct JackGame.JackLDT_MiniGameJackPotRouletteFluctuations
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MiniGameJackPotRouletteFluctuations final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MiniGameJackPotRouletteFluctuations) == 0x000008, "Wrong alignment on FJackLDT_MiniGameJackPotRouletteFluctuations");
static_assert(sizeof(FJackLDT_MiniGameJackPotRouletteFluctuations) == 0x000010, "Wrong size on FJackLDT_MiniGameJackPotRouletteFluctuations");

// ScriptStruct JackGame.JackHitCameraShakePresetInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackHitCameraShakePresetInfo final
{
public:
	class FName                                   CameraShake_Normal;                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CameraShake_Critical;                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackHitCameraShakePresetInfo) == 0x000008, "Wrong alignment on FJackHitCameraShakePresetInfo");
static_assert(sizeof(FJackHitCameraShakePresetInfo) == 0x000010, "Wrong size on FJackHitCameraShakePresetInfo");
static_assert(offsetof(FJackHitCameraShakePresetInfo, CameraShake_Normal) == 0x000000, "Member 'FJackHitCameraShakePresetInfo::CameraShake_Normal' has a wrong offset!");
static_assert(offsetof(FJackHitCameraShakePresetInfo, CameraShake_Critical) == 0x000008, "Member 'FJackHitCameraShakePresetInfo::CameraShake_Critical' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_MiniGameJackPotRouletteBetFraction
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MiniGameJackPotRouletteBetFraction final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MiniGameJackPotRouletteBetFraction) == 0x000008, "Wrong alignment on FJackLDT_MiniGameJackPotRouletteBetFraction");
static_assert(sizeof(FJackLDT_MiniGameJackPotRouletteBetFraction) == 0x000010, "Wrong size on FJackLDT_MiniGameJackPotRouletteBetFraction");

// ScriptStruct JackGame.JackLDT_MiniGameJackPotNPC
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MiniGameJackPotNPC final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MiniGameJackPotNPC) == 0x000008, "Wrong alignment on FJackLDT_MiniGameJackPotNPC");
static_assert(sizeof(FJackLDT_MiniGameJackPotNPC) == 0x000010, "Wrong size on FJackLDT_MiniGameJackPotNPC");

// ScriptStruct JackGame.JackMeosiSlotFireLamp
// 0x0003 (0x0003 - 0x0000)
struct FJackMeosiSlotFireLamp final
{
public:
	EJackMeosiSlotFireLampColor                   Color;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLargeSize;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotEffectKeyType                   KeyType;                                           // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMeosiSlotFireLamp) == 0x000001, "Wrong alignment on FJackMeosiSlotFireLamp");
static_assert(sizeof(FJackMeosiSlotFireLamp) == 0x000003, "Wrong size on FJackMeosiSlotFireLamp");
static_assert(offsetof(FJackMeosiSlotFireLamp, Color) == 0x000000, "Member 'FJackMeosiSlotFireLamp::Color' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotFireLamp, bIsLargeSize) == 0x000001, "Member 'FJackMeosiSlotFireLamp::bIsLargeSize' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotFireLamp, KeyType) == 0x000002, "Member 'FJackMeosiSlotFireLamp::KeyType' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Zukan_PhoneticNo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Zukan_PhoneticNo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Zukan_PhoneticNo) == 0x000008, "Wrong alignment on FJackLDT_Zukan_PhoneticNo");
static_assert(sizeof(FJackLDT_Zukan_PhoneticNo) == 0x000010, "Wrong size on FJackLDT_Zukan_PhoneticNo");

// ScriptStruct JackGame.JackLDT_UserDefinedTagList
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_UserDefinedTagList final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_UserDefinedTagList) == 0x000008, "Wrong alignment on FJackLDT_UserDefinedTagList");
static_assert(sizeof(FJackLDT_UserDefinedTagList) == 0x000010, "Wrong size on FJackLDT_UserDefinedTagList");

// ScriptStruct JackGame.JackLDT_TagInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TagInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TagInfo) == 0x000008, "Wrong alignment on FJackLDT_TagInfo");
static_assert(sizeof(FJackLDT_TagInfo) == 0x000010, "Wrong size on FJackLDT_TagInfo");

// ScriptStruct JackGame.JackLDT_Renkei_ArticleInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Renkei_ArticleInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Renkei_ArticleInfo) == 0x000008, "Wrong alignment on FJackLDT_Renkei_ArticleInfo");
static_assert(sizeof(FJackLDT_Renkei_ArticleInfo) == 0x000010, "Wrong size on FJackLDT_Renkei_ArticleInfo");

// ScriptStruct JackGame.JackLDT_OddEffect_ArticleInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_OddEffect_ArticleInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_OddEffect_ArticleInfo) == 0x000008, "Wrong alignment on FJackLDT_OddEffect_ArticleInfo");
static_assert(sizeof(FJackLDT_OddEffect_ArticleInfo) == 0x000010, "Wrong size on FJackLDT_OddEffect_ArticleInfo");

// ScriptStruct JackGame.JackLDT_Monster_ArticleInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Monster_ArticleInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Monster_ArticleInfo) == 0x000008, "Wrong alignment on FJackLDT_Monster_ArticleInfo");
static_assert(sizeof(FJackLDT_Monster_ArticleInfo) == 0x000010, "Wrong size on FJackLDT_Monster_ArticleInfo");

// ScriptStruct JackGame.JackLDT_MeosiSlotMonsterParam_ArticleInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotMonsterParam_ArticleInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotMonsterParam_ArticleInfo) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotMonsterParam_ArticleInfo");
static_assert(sizeof(FJackLDT_MeosiSlotMonsterParam_ArticleInfo) == 0x000010, "Wrong size on FJackLDT_MeosiSlotMonsterParam_ArticleInfo");

// ScriptStruct JackGame.JackLDT_MeosiSlotItemParam_ArticleInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MeosiSlotItemParam_ArticleInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MeosiSlotItemParam_ArticleInfo) == 0x000008, "Wrong alignment on FJackLDT_MeosiSlotItemParam_ArticleInfo");
static_assert(sizeof(FJackLDT_MeosiSlotItemParam_ArticleInfo) == 0x000010, "Wrong size on FJackLDT_MeosiSlotItemParam_ArticleInfo");

// ScriptStruct JackGame.JackLDT_MacroInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MacroInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MacroInfo) == 0x000008, "Wrong alignment on FJackLDT_MacroInfo");
static_assert(sizeof(FJackLDT_MacroInfo) == 0x000010, "Wrong size on FJackLDT_MacroInfo");

// ScriptStruct JackGame.JackLDT_LetterList
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_LetterList final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_LetterList) == 0x000008, "Wrong alignment on FJackLDT_LetterList");
static_assert(sizeof(FJackLDT_LetterList) == 0x000010, "Wrong size on FJackLDT_LetterList");

// ScriptStruct JackGame.JackLDT_ItemTable_ArticleInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ItemTable_ArticleInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ItemTable_ArticleInfo) == 0x000008, "Wrong alignment on FJackLDT_ItemTable_ArticleInfo");
static_assert(sizeof(FJackLDT_ItemTable_ArticleInfo) == 0x000010, "Wrong size on FJackLDT_ItemTable_ArticleInfo");

// ScriptStruct JackGame.JackLDT_GermanCheckLastIsS
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_GermanCheckLastIsS final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_GermanCheckLastIsS) == 0x000008, "Wrong alignment on FJackLDT_GermanCheckLastIsS");
static_assert(sizeof(FJackLDT_GermanCheckLastIsS) == 0x000010, "Wrong size on FJackLDT_GermanCheckLastIsS");

// ScriptStruct JackGame.JackLDT_FrenchCheckVowelTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_FrenchCheckVowelTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_FrenchCheckVowelTable) == 0x000008, "Wrong alignment on FJackLDT_FrenchCheckVowelTable");
static_assert(sizeof(FJackLDT_FrenchCheckVowelTable) == 0x000010, "Wrong size on FJackLDT_FrenchCheckVowelTable");

// ScriptStruct JackGame.JackLDT_FixTagInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_FixTagInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_FixTagInfo) == 0x000008, "Wrong alignment on FJackLDT_FixTagInfo");
static_assert(sizeof(FJackLDT_FixTagInfo) == 0x000010, "Wrong size on FJackLDT_FixTagInfo");

// ScriptStruct JackGame.JackLDT_Action_ArticleInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Action_ArticleInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Action_ArticleInfo) == 0x000008, "Wrong alignment on FJackLDT_Action_ArticleInfo");
static_assert(sizeof(FJackLDT_Action_ArticleInfo) == 0x000010, "Wrong size on FJackLDT_Action_ArticleInfo");

// ScriptStruct JackGame.JackLDT_ActionCamera
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ActionCamera final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ActionCamera) == 0x000008, "Wrong alignment on FJackLDT_ActionCamera");
static_assert(sizeof(FJackLDT_ActionCamera) == 0x000010, "Wrong size on FJackLDT_ActionCamera");

// ScriptStruct JackGame.JackLDT_Achievement_PhoneticNo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Achievement_PhoneticNo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Achievement_PhoneticNo) == 0x000008, "Wrong alignment on FJackLDT_Achievement_PhoneticNo");
static_assert(sizeof(FJackLDT_Achievement_PhoneticNo) == 0x000010, "Wrong size on FJackLDT_Achievement_PhoneticNo");

// ScriptStruct JackGame.JackLDT_TextDataDLCItem_09
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextDataDLCItem_09 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextDataDLCItem_09) == 0x000008, "Wrong alignment on FJackLDT_TextDataDLCItem_09");
static_assert(sizeof(FJackLDT_TextDataDLCItem_09) == 0x000010, "Wrong size on FJackLDT_TextDataDLCItem_09");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1S_P008
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1S_P008 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1S_P008) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1S_P008");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1S_P008) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1S_P008");

// ScriptStruct JackGame.JackLDT_TextDataDLCItem_08
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextDataDLCItem_08 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextDataDLCItem_08) == 0x000008, "Wrong alignment on FJackLDT_TextDataDLCItem_08");
static_assert(sizeof(FJackLDT_TextDataDLCItem_08) == 0x000010, "Wrong size on FJackLDT_TextDataDLCItem_08");

// ScriptStruct JackGame.JackAnimMontageDict
// 0x0010 (0x0010 - 0x0000)
struct FJackAnimMontageDict final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           AnimMontage;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackAnimMontageDict) == 0x000008, "Wrong alignment on FJackAnimMontageDict");
static_assert(sizeof(FJackAnimMontageDict) == 0x000010, "Wrong size on FJackAnimMontageDict");
static_assert(offsetof(FJackAnimMontageDict, Name) == 0x000000, "Member 'FJackAnimMontageDict::Name' has a wrong offset!");
static_assert(offsetof(FJackAnimMontageDict, AnimMontage) == 0x000008, "Member 'FJackAnimMontageDict::AnimMontage' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_TextDataDLCItem_06
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextDataDLCItem_06 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextDataDLCItem_06) == 0x000008, "Wrong alignment on FJackLDT_TextDataDLCItem_06");
static_assert(sizeof(FJackLDT_TextDataDLCItem_06) == 0x000010, "Wrong size on FJackLDT_TextDataDLCItem_06");

// ScriptStruct JackGame.JackLDT_TextDataDLCItem_05
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextDataDLCItem_05 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextDataDLCItem_05) == 0x000008, "Wrong alignment on FJackLDT_TextDataDLCItem_05");
static_assert(sizeof(FJackLDT_TextDataDLCItem_05) == 0x000010, "Wrong size on FJackLDT_TextDataDLCItem_05");

// ScriptStruct JackGame.JackScheduledNPCMoveParameter
// 0x0010 (0x0010 - 0x0000)
struct FJackScheduledNPCMoveParameter final
{
public:
	class UBlendSpaceBase*                        BlendSpace;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackScheduledNPCMoveParameter) == 0x000008, "Wrong alignment on FJackScheduledNPCMoveParameter");
static_assert(sizeof(FJackScheduledNPCMoveParameter) == 0x000010, "Wrong size on FJackScheduledNPCMoveParameter");
static_assert(offsetof(FJackScheduledNPCMoveParameter, BlendSpace) == 0x000000, "Member 'FJackScheduledNPCMoveParameter::BlendSpace' has a wrong offset!");
static_assert(offsetof(FJackScheduledNPCMoveParameter, MaxSpeed) == 0x000008, "Member 'FJackScheduledNPCMoveParameter::MaxSpeed' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_TextDataDLCItem_04
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextDataDLCItem_04 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextDataDLCItem_04) == 0x000008, "Wrong alignment on FJackLDT_TextDataDLCItem_04");
static_assert(sizeof(FJackLDT_TextDataDLCItem_04) == 0x000010, "Wrong size on FJackLDT_TextDataDLCItem_04");

// ScriptStruct JackGame.JackLDT_TextDataDLCItem_03
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextDataDLCItem_03 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextDataDLCItem_03) == 0x000008, "Wrong alignment on FJackLDT_TextDataDLCItem_03");
static_assert(sizeof(FJackLDT_TextDataDLCItem_03) == 0x000010, "Wrong size on FJackLDT_TextDataDLCItem_03");

// ScriptStruct JackGame.JackLDT_TextDataDLCItem_02
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextDataDLCItem_02 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextDataDLCItem_02) == 0x000008, "Wrong alignment on FJackLDT_TextDataDLCItem_02");
static_assert(sizeof(FJackLDT_TextDataDLCItem_02) == 0x000010, "Wrong size on FJackLDT_TextDataDLCItem_02");

// ScriptStruct JackGame.JackRouletteBetCoinData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackRouletteBetCoinData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackRouletteBetCoinData) == 0x000008, "Wrong alignment on FJackRouletteBetCoinData");
static_assert(sizeof(FJackRouletteBetCoinData) == 0x000018, "Wrong size on FJackRouletteBetCoinData");

// ScriptStruct JackGame.JackLDT_TextDataDLCItem_01
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextDataDLCItem_01 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextDataDLCItem_01) == 0x000008, "Wrong alignment on FJackLDT_TextDataDLCItem_01");
static_assert(sizeof(FJackLDT_TextDataDLCItem_01) == 0x000010, "Wrong size on FJackLDT_TextDataDLCItem_01");

// ScriptStruct JackGame.JackLDT_TextDataDLCItem_00
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TextDataDLCItem_00 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TextDataDLCItem_00) == 0x000008, "Wrong alignment on FJackLDT_TextDataDLCItem_00");
static_assert(sizeof(FJackLDT_TextDataDLCItem_00) == 0x000010, "Wrong size on FJackLDT_TextDataDLCItem_00");

// ScriptStruct JackGame.JackLDT_RtEx_FtSkirt_Length3
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FtSkirt_Length3 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FtSkirt_Length3) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FtSkirt_Length3");
static_assert(sizeof(FJackLDT_RtEx_FtSkirt_Length3) == 0x000010, "Wrong size on FJackLDT_RtEx_FtSkirt_Length3");

// ScriptStruct JackGame.JackLDT_ItemTable_Seed
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ItemTable_Seed final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ItemTable_Seed) == 0x000008, "Wrong alignment on FJackLDT_ItemTable_Seed");
static_assert(sizeof(FJackLDT_ItemTable_Seed) == 0x000010, "Wrong size on FJackLDT_ItemTable_Seed");

// ScriptStruct JackGame.JackLDT_ItemTable_Present
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ItemTable_Present final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ItemTable_Present) == 0x000008, "Wrong alignment on FJackLDT_ItemTable_Present");
static_assert(sizeof(FJackLDT_ItemTable_Present) == 0x000010, "Wrong size on FJackLDT_ItemTable_Present");

// ScriptStruct JackGame.JackSymbolSEPos
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FJackSymbolSEPos final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackSymbolSEPos) == 0x000004, "Wrong alignment on FJackSymbolSEPos");
static_assert(sizeof(FJackSymbolSEPos) == 0x000008, "Wrong size on FJackSymbolSEPos");

// ScriptStruct JackGame.JackLDT_ItemTable_Equipment
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ItemTable_Equipment final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ItemTable_Equipment) == 0x000008, "Wrong alignment on FJackLDT_ItemTable_Equipment");
static_assert(sizeof(FJackLDT_ItemTable_Equipment) == 0x000010, "Wrong size on FJackLDT_ItemTable_Equipment");

// ScriptStruct JackGame.JackLDT_ItemTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ItemTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ItemTable) == 0x000008, "Wrong alignment on FJackLDT_ItemTable");
static_assert(sizeof(FJackLDT_ItemTable) == 0x000010, "Wrong size on FJackLDT_ItemTable");

// ScriptStruct JackGame.JackLDT_TenseiSelectTable2D
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TenseiSelectTable2D final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TenseiSelectTable2D) == 0x000008, "Wrong alignment on FJackLDT_TenseiSelectTable2D");
static_assert(sizeof(FJackLDT_TenseiSelectTable2D) == 0x000010, "Wrong size on FJackLDT_TenseiSelectTable2D");

// ScriptStruct JackGame.JackLDT_TenseiScenarioFlagsTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TenseiScenarioFlagsTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TenseiScenarioFlagsTable) == 0x000008, "Wrong alignment on FJackLDT_TenseiScenarioFlagsTable");
static_assert(sizeof(FJackLDT_TenseiScenarioFlagsTable) == 0x000010, "Wrong size on FJackLDT_TenseiScenarioFlagsTable");

// ScriptStruct JackGame.JackLDT_TenseiFlagsTable2D
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TenseiFlagsTable2D final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TenseiFlagsTable2D) == 0x000008, "Wrong alignment on FJackLDT_TenseiFlagsTable2D");
static_assert(sizeof(FJackLDT_TenseiFlagsTable2D) == 0x000010, "Wrong size on FJackLDT_TenseiFlagsTable2D");

// ScriptStruct JackGame.JackLDT_TenseiCSWatchTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_TenseiCSWatchTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_TenseiCSWatchTable) == 0x000008, "Wrong alignment on FJackLDT_TenseiCSWatchTable");
static_assert(sizeof(FJackLDT_TenseiCSWatchTable) == 0x000010, "Wrong size on FJackLDT_TenseiCSWatchTable");

// ScriptStruct JackGame.JackLDT_ResidentWidgetBlueprint
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ResidentWidgetBlueprint final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ResidentWidgetBlueprint) == 0x000008, "Wrong alignment on FJackLDT_ResidentWidgetBlueprint");
static_assert(sizeof(FJackLDT_ResidentWidgetBlueprint) == 0x000010, "Wrong size on FJackLDT_ResidentWidgetBlueprint");

// ScriptStruct JackGame.JackLDT_CoordinateFootIKSettings
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_CoordinateFootIKSettings final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_CoordinateFootIKSettings) == 0x000008, "Wrong alignment on FJackLDT_CoordinateFootIKSettings");
static_assert(sizeof(FJackLDT_CoordinateFootIKSettings) == 0x000010, "Wrong size on FJackLDT_CoordinateFootIKSettings");

// ScriptStruct JackGame.JackLDT_ResidentWeaponClass
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ResidentWeaponClass final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ResidentWeaponClass) == 0x000008, "Wrong alignment on FJackLDT_ResidentWeaponClass");
static_assert(sizeof(FJackLDT_ResidentWeaponClass) == 0x000010, "Wrong size on FJackLDT_ResidentWeaponClass");

// ScriptStruct JackGame.JackLDT_ResidentTexture
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ResidentTexture final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ResidentTexture) == 0x000008, "Wrong alignment on FJackLDT_ResidentTexture");
static_assert(sizeof(FJackLDT_ResidentTexture) == 0x000010, "Wrong size on FJackLDT_ResidentTexture");

// ScriptStruct JackGame.JackLDT_ResidentSound
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ResidentSound final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ResidentSound) == 0x000008, "Wrong alignment on FJackLDT_ResidentSound");
static_assert(sizeof(FJackLDT_ResidentSound) == 0x000010, "Wrong size on FJackLDT_ResidentSound");

// ScriptStruct JackGame.JackLDT_ResidentSkeletalMesh
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ResidentSkeletalMesh final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ResidentSkeletalMesh) == 0x000008, "Wrong alignment on FJackLDT_ResidentSkeletalMesh");
static_assert(sizeof(FJackLDT_ResidentSkeletalMesh) == 0x000010, "Wrong size on FJackLDT_ResidentSkeletalMesh");

// ScriptStruct JackGame.JackLDT_ResidentMaterialParameterCollection
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ResidentMaterialParameterCollection final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ResidentMaterialParameterCollection) == 0x000008, "Wrong alignment on FJackLDT_ResidentMaterialParameterCollection");
static_assert(sizeof(FJackLDT_ResidentMaterialParameterCollection) == 0x000010, "Wrong size on FJackLDT_ResidentMaterialParameterCollection");

// ScriptStruct JackGame.JackLDT_ResidentMaterial
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ResidentMaterial final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ResidentMaterial) == 0x000008, "Wrong alignment on FJackLDT_ResidentMaterial");
static_assert(sizeof(FJackLDT_ResidentMaterial) == 0x000010, "Wrong size on FJackLDT_ResidentMaterial");

// ScriptStruct JackGame.JackAnimSimulationPartsInfo
// 0x01B0 (0x01B0 - 0x0000)
struct alignas(0x10) FJackAnimSimulationPartsInfo final
{
public:
	uint8                                         Pad_0[0x1A0];                                      // 0x0000(0x01A0)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimDynamicsBlendSpeed;                            // 0x01A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimExpressionBlendSpeed;                          // 0x01A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8[0x8];                                      // 0x01A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAnimSimulationPartsInfo) == 0x000010, "Wrong alignment on FJackAnimSimulationPartsInfo");
static_assert(sizeof(FJackAnimSimulationPartsInfo) == 0x0001B0, "Wrong size on FJackAnimSimulationPartsInfo");
static_assert(offsetof(FJackAnimSimulationPartsInfo, AnimDynamicsBlendSpeed) == 0x0001A0, "Member 'FJackAnimSimulationPartsInfo::AnimDynamicsBlendSpeed' has a wrong offset!");
static_assert(offsetof(FJackAnimSimulationPartsInfo, AnimExpressionBlendSpeed) == 0x0001A4, "Member 'FJackAnimSimulationPartsInfo::AnimExpressionBlendSpeed' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_ResidentForceFeedback
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ResidentForceFeedback final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ResidentForceFeedback) == 0x000008, "Wrong alignment on FJackLDT_ResidentForceFeedback");
static_assert(sizeof(FJackLDT_ResidentForceFeedback) == 0x000010, "Wrong size on FJackLDT_ResidentForceFeedback");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1");

// ScriptStruct JackGame.JackLDT_ResidentCollideEffect
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ResidentCollideEffect final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ResidentCollideEffect) == 0x000008, "Wrong alignment on FJackLDT_ResidentCollideEffect");
static_assert(sizeof(FJackLDT_ResidentCollideEffect) == 0x000010, "Wrong size on FJackLDT_ResidentCollideEffect");

// ScriptStruct JackGame.JackLDT_ResidentCameraShake
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ResidentCameraShake final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ResidentCameraShake) == 0x000008, "Wrong alignment on FJackLDT_ResidentCameraShake");
static_assert(sizeof(FJackLDT_ResidentCameraShake) == 0x000010, "Wrong size on FJackLDT_ResidentCameraShake");

// ScriptStruct JackGame.JackLDT_ResidentCameraAnim
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ResidentCameraAnim final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ResidentCameraAnim) == 0x000008, "Wrong alignment on FJackLDT_ResidentCameraAnim");
static_assert(sizeof(FJackLDT_ResidentCameraAnim) == 0x000010, "Wrong size on FJackLDT_ResidentCameraAnim");

// ScriptStruct JackGame.JackLDT_ResidentBlueprintClass
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ResidentBlueprintClass final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ResidentBlueprintClass) == 0x000008, "Wrong alignment on FJackLDT_ResidentBlueprintClass");
static_assert(sizeof(FJackLDT_ResidentBlueprintClass) == 0x000010, "Wrong size on FJackLDT_ResidentBlueprintClass");

// ScriptStruct JackGame.JackLDT_ResidentAnimMontage
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ResidentAnimMontage final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ResidentAnimMontage) == 0x000008, "Wrong alignment on FJackLDT_ResidentAnimMontage");
static_assert(sizeof(FJackLDT_ResidentAnimMontage) == 0x000010, "Wrong size on FJackLDT_ResidentAnimMontage");

// ScriptStruct JackGame.JackLDT_PresetForceFeedback
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PresetForceFeedback final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PresetForceFeedback) == 0x000008, "Wrong alignment on FJackLDT_PresetForceFeedback");
static_assert(sizeof(FJackLDT_PresetForceFeedback) == 0x000010, "Wrong size on FJackLDT_PresetForceFeedback");

// ScriptStruct JackGame.JackLDT_PresetCameraShake
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_PresetCameraShake final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_PresetCameraShake) == 0x000008, "Wrong alignment on FJackLDT_PresetCameraShake");
static_assert(sizeof(FJackLDT_PresetCameraShake) == 0x000010, "Wrong size on FJackLDT_PresetCameraShake");

// ScriptStruct JackGame.JackLDT_GameParameter
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_GameParameter final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_GameParameter) == 0x000008, "Wrong alignment on FJackLDT_GameParameter");
static_assert(sizeof(FJackLDT_GameParameter) == 0x000010, "Wrong size on FJackLDT_GameParameter");

// ScriptStruct JackGame.JackToggleBaseTrackKey
// 0x0008 (0x0008 - 0x0000)
struct FJackToggleBaseTrackKey final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToggle;                                           // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackToggleBaseTrackKey) == 0x000004, "Wrong alignment on FJackToggleBaseTrackKey");
static_assert(sizeof(FJackToggleBaseTrackKey) == 0x000008, "Wrong size on FJackToggleBaseTrackKey");
static_assert(offsetof(FJackToggleBaseTrackKey, Time) == 0x000000, "Member 'FJackToggleBaseTrackKey::Time' has a wrong offset!");
static_assert(offsetof(FJackToggleBaseTrackKey, bToggle) == 0x000004, "Member 'FJackToggleBaseTrackKey::bToggle' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RelationalGameFlagConfig
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RelationalGameFlagConfig final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RelationalGameFlagConfig) == 0x000008, "Wrong alignment on FJackLDT_RelationalGameFlagConfig");
static_assert(sizeof(FJackLDT_RelationalGameFlagConfig) == 0x000010, "Wrong size on FJackLDT_RelationalGameFlagConfig");

// ScriptStruct JackGame.JackLDT_GameFlagDataSystem
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_GameFlagDataSystem final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_GameFlagDataSystem) == 0x000008, "Wrong alignment on FJackLDT_GameFlagDataSystem");
static_assert(sizeof(FJackLDT_GameFlagDataSystem) == 0x000010, "Wrong size on FJackLDT_GameFlagDataSystem");

// ScriptStruct JackGame.JackLDT_GameFlagDataQuest
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_GameFlagDataQuest final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_GameFlagDataQuest) == 0x000008, "Wrong alignment on FJackLDT_GameFlagDataQuest");
static_assert(sizeof(FJackLDT_GameFlagDataQuest) == 0x000010, "Wrong size on FJackLDT_GameFlagDataQuest");

// ScriptStruct JackGame.JackLDT_GameFlagDataMiniGame
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_GameFlagDataMiniGame final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_GameFlagDataMiniGame) == 0x000008, "Wrong alignment on FJackLDT_GameFlagDataMiniGame");
static_assert(sizeof(FJackLDT_GameFlagDataMiniGame) == 0x000010, "Wrong size on FJackLDT_GameFlagDataMiniGame");

// ScriptStruct JackGame.JackLDT_GameFlagDataGimmick
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_GameFlagDataGimmick final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_GameFlagDataGimmick) == 0x000008, "Wrong alignment on FJackLDT_GameFlagDataGimmick");
static_assert(sizeof(FJackLDT_GameFlagDataGimmick) == 0x000010, "Wrong size on FJackLDT_GameFlagDataGimmick");

// ScriptStruct JackGame.JackLDT_GameFlagDataGameProgress
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_GameFlagDataGameProgress final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_GameFlagDataGameProgress) == 0x000008, "Wrong alignment on FJackLDT_GameFlagDataGameProgress");
static_assert(sizeof(FJackLDT_GameFlagDataGameProgress) == 0x000010, "Wrong size on FJackLDT_GameFlagDataGameProgress");

// ScriptStruct JackGame.JackFontDict
// 0x0060 (0x0060 - 0x0000)
struct FJackFontDict final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x0008(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackFontDict) == 0x000008, "Wrong alignment on FJackFontDict");
static_assert(sizeof(FJackFontDict) == 0x000060, "Wrong size on FJackFontDict");
static_assert(offsetof(FJackFontDict, Name) == 0x000000, "Member 'FJackFontDict::Name' has a wrong offset!");
static_assert(offsetof(FJackFontDict, Font) == 0x000008, "Member 'FJackFontDict::Font' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RecipeBookTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RecipeBookTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RecipeBookTable) == 0x000008, "Wrong alignment on FJackLDT_RecipeBookTable");
static_assert(sizeof(FJackLDT_RecipeBookTable) == 0x000010, "Wrong size on FJackLDT_RecipeBookTable");

// ScriptStruct JackGame.JackLDT_KaziUnderCorrection
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_KaziUnderCorrection final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_KaziUnderCorrection) == 0x000008, "Wrong alignment on FJackLDT_KaziUnderCorrection");
static_assert(sizeof(FJackLDT_KaziUnderCorrection) == 0x000010, "Wrong size on FJackLDT_KaziUnderCorrection");

// ScriptStruct JackGame.JackTitleItemsResponse
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FJackTitleItemsResponse final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackTitleItemsResponse) == 0x000008, "Wrong alignment on FJackTitleItemsResponse");
static_assert(sizeof(FJackTitleItemsResponse) == 0x000030, "Wrong size on FJackTitleItemsResponse");

// ScriptStruct JackGame.JackLDT_KaziQualityTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_KaziQualityTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_KaziQualityTable) == 0x000008, "Wrong alignment on FJackLDT_KaziQualityTable");
static_assert(sizeof(FJackLDT_KaziQualityTable) == 0x000010, "Wrong size on FJackLDT_KaziQualityTable");

// ScriptStruct JackGame.JackLDT_KaziCategoryTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_KaziCategoryTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_KaziCategoryTable) == 0x000008, "Wrong alignment on FJackLDT_KaziCategoryTable");
static_assert(sizeof(FJackLDT_KaziCategoryTable) == 0x000010, "Wrong size on FJackLDT_KaziCategoryTable");

// ScriptStruct JackGame.JackLDT_Pose_N001Hair
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_N001Hair final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_N001Hair) == 0x000008, "Wrong alignment on FJackLDT_Pose_N001Hair");
static_assert(sizeof(FJackLDT_Pose_N001Hair) == 0x000010, "Wrong size on FJackLDT_Pose_N001Hair");

// ScriptStruct JackGame.JackLDT_CoinExchangeTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_CoinExchangeTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_CoinExchangeTable) == 0x000008, "Wrong alignment on FJackLDT_CoinExchangeTable");
static_assert(sizeof(FJackLDT_CoinExchangeTable) == 0x000010, "Wrong size on FJackLDT_CoinExchangeTable");

// ScriptStruct JackGame.JackLDT_ChurchTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ChurchTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ChurchTable) == 0x000008, "Wrong alignment on FJackLDT_ChurchTable");
static_assert(sizeof(FJackLDT_ChurchTable) == 0x000010, "Wrong size on FJackLDT_ChurchTable");

// ScriptStruct JackGame.JackLDT_EventBattle
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_EventBattle final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_EventBattle) == 0x000008, "Wrong alignment on FJackLDT_EventBattle");
static_assert(sizeof(FJackLDT_EventBattle) == 0x000010, "Wrong size on FJackLDT_EventBattle");

// ScriptStruct JackGame.JackLDT_DamageAttributeEffectTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_DamageAttributeEffectTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_DamageAttributeEffectTable) == 0x000008, "Wrong alignment on FJackLDT_DamageAttributeEffectTable");
static_assert(sizeof(FJackLDT_DamageAttributeEffectTable) == 0x000010, "Wrong size on FJackLDT_DamageAttributeEffectTable");

// ScriptStruct JackGame.JackLDT_Pose_RearHairILL
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_RearHairILL final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_RearHairILL) == 0x000008, "Wrong alignment on FJackLDT_Pose_RearHairILL");
static_assert(sizeof(FJackLDT_Pose_RearHairILL) == 0x000010, "Wrong size on FJackLDT_Pose_RearHairILL");

// ScriptStruct JackGame.JackLDT_CollideEffectTable
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_CollideEffectTable final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_CollideEffectTable) == 0x000008, "Wrong alignment on FJackLDT_CollideEffectTable");
static_assert(sizeof(FJackLDT_CollideEffectTable) == 0x000010, "Wrong size on FJackLDT_CollideEffectTable");

// ScriptStruct JackGame.JackLDT_NavBuild
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_NavBuild final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_NavBuild) == 0x000008, "Wrong alignment on FJackLDT_NavBuild");
static_assert(sizeof(FJackLDT_NavBuild) == 0x000010, "Wrong size on FJackLDT_NavBuild");

// ScriptStruct JackGame.JackLDT_FacialPresetSample
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_FacialPresetSample final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_FacialPresetSample) == 0x000008, "Wrong alignment on FJackLDT_FacialPresetSample");
static_assert(sizeof(FJackLDT_FacialPresetSample) == 0x000010, "Wrong size on FJackLDT_FacialPresetSample");

// ScriptStruct JackGame.JackLDT_CutSceneSerifuInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_CutSceneSerifuInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_CutSceneSerifuInfo) == 0x000008, "Wrong alignment on FJackLDT_CutSceneSerifuInfo");
static_assert(sizeof(FJackLDT_CutSceneSerifuInfo) == 0x000010, "Wrong size on FJackLDT_CutSceneSerifuInfo");

// ScriptStruct JackGame.JackLDT_CutSceneDuplicationTalkerInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_CutSceneDuplicationTalkerInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_CutSceneDuplicationTalkerInfo) == 0x000008, "Wrong alignment on FJackLDT_CutSceneDuplicationTalkerInfo");
static_assert(sizeof(FJackLDT_CutSceneDuplicationTalkerInfo) == 0x000010, "Wrong size on FJackLDT_CutSceneDuplicationTalkerInfo");

// ScriptStruct JackGame.JackLDT_CutSceneCoordinateAliasInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_CutSceneCoordinateAliasInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_CutSceneCoordinateAliasInfo) == 0x000008, "Wrong alignment on FJackLDT_CutSceneCoordinateAliasInfo");
static_assert(sizeof(FJackLDT_CutSceneCoordinateAliasInfo) == 0x000010, "Wrong size on FJackLDT_CutSceneCoordinateAliasInfo");

// ScriptStruct JackGame.JackLDT_CutSceneAutomaticFeedOfSpeechInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_CutSceneAutomaticFeedOfSpeechInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_CutSceneAutomaticFeedOfSpeechInfo) == 0x000008, "Wrong alignment on FJackLDT_CutSceneAutomaticFeedOfSpeechInfo");
static_assert(sizeof(FJackLDT_CutSceneAutomaticFeedOfSpeechInfo) == 0x000010, "Wrong size on FJackLDT_CutSceneAutomaticFeedOfSpeechInfo");

// ScriptStruct JackGame.JackLDT_CutSceneAnimationInfo
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_CutSceneAnimationInfo final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_CutSceneAnimationInfo) == 0x000008, "Wrong alignment on FJackLDT_CutSceneAnimationInfo");
static_assert(sizeof(FJackLDT_CutSceneAnimationInfo) == 0x000010, "Wrong size on FJackLDT_CutSceneAnimationInfo");

// ScriptStruct JackGame.JackLDT_CSAddStreamingLevel
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_CSAddStreamingLevel final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_CSAddStreamingLevel) == 0x000008, "Wrong alignment on FJackLDT_CSAddStreamingLevel");
static_assert(sizeof(FJackLDT_CSAddStreamingLevel) == 0x000010, "Wrong size on FJackLDT_CSAddStreamingLevel");

// ScriptStruct JackGame.JackLDT_HumanFacePoseSequence
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_HumanFacePoseSequence final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_HumanFacePoseSequence) == 0x000008, "Wrong alignment on FJackLDT_HumanFacePoseSequence");
static_assert(sizeof(FJackLDT_HumanFacePoseSequence) == 0x000010, "Wrong size on FJackLDT_HumanFacePoseSequence");

// ScriptStruct JackGame.JackLDT_FacialAnimation
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_FacialAnimation final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_FacialAnimation) == 0x000008, "Wrong alignment on FJackLDT_FacialAnimation");
static_assert(sizeof(FJackLDT_FacialAnimation) == 0x000010, "Wrong size on FJackLDT_FacialAnimation");

// ScriptStruct JackGame.JackLDT_Sim_N104Hair
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_N104Hair final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_N104Hair) == 0x000008, "Wrong alignment on FJackLDT_Sim_N104Hair");
static_assert(sizeof(FJackLDT_Sim_N104Hair) == 0x000010, "Wrong size on FJackLDT_Sim_N104Hair");

// ScriptStruct JackGame.JackLDT_WindRandomizeVehiclePreset
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_WindRandomizeVehiclePreset final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_WindRandomizeVehiclePreset) == 0x000008, "Wrong alignment on FJackLDT_WindRandomizeVehiclePreset");
static_assert(sizeof(FJackLDT_WindRandomizeVehiclePreset) == 0x000010, "Wrong size on FJackLDT_WindRandomizeVehiclePreset");

// ScriptStruct JackGame.JackLDT_WindRandomizePreset
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_WindRandomizePreset final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_WindRandomizePreset) == 0x000008, "Wrong alignment on FJackLDT_WindRandomizePreset");
static_assert(sizeof(FJackLDT_WindRandomizePreset) == 0x000010, "Wrong size on FJackLDT_WindRandomizePreset");

// ScriptStruct JackGame.JackLDT_DynamicBoneState_Upper
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_DynamicBoneState_Upper final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_DynamicBoneState_Upper) == 0x000008, "Wrong alignment on FJackLDT_DynamicBoneState_Upper");
static_assert(sizeof(FJackLDT_DynamicBoneState_Upper) == 0x000010, "Wrong size on FJackLDT_DynamicBoneState_Upper");

// ScriptStruct JackGame.JackLDT_DynamicBoneState_Lower
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_DynamicBoneState_Lower final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_DynamicBoneState_Lower) == 0x000008, "Wrong alignment on FJackLDT_DynamicBoneState_Lower");
static_assert(sizeof(FJackLDT_DynamicBoneState_Lower) == 0x000010, "Wrong size on FJackLDT_DynamicBoneState_Lower");

// ScriptStruct JackGame.JackLDT_DynamicBoneState_Hair
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_DynamicBoneState_Hair final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_DynamicBoneState_Hair) == 0x000008, "Wrong alignment on FJackLDT_DynamicBoneState_Hair");
static_assert(sizeof(FJackLDT_DynamicBoneState_Hair) == 0x000010, "Wrong size on FJackLDT_DynamicBoneState_Hair");

// ScriptStruct JackGame.JackLDT_Other_MaxOrMinRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Other_MaxOrMinRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Other_MaxOrMinRot) == 0x000008, "Wrong alignment on FJackLDT_Other_MaxOrMinRot");
static_assert(sizeof(FJackLDT_Other_MaxOrMinRot) == 0x000010, "Wrong size on FJackLDT_Other_MaxOrMinRot");

// ScriptStruct JackGame.JackLDT_Other_AverageRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Other_AverageRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Other_AverageRot) == 0x000008, "Wrong alignment on FJackLDT_Other_AverageRot");
static_assert(sizeof(FJackLDT_Other_AverageRot) == 0x000010, "Wrong size on FJackLDT_Other_AverageRot");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor");

// ScriptStruct JackGame.JackLDT_Sim_DancerSkirt_RotCancel
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_DancerSkirt_RotCancel final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_DancerSkirt_RotCancel) == 0x000008, "Wrong alignment on FJackLDT_Sim_DancerSkirt_RotCancel");
static_assert(sizeof(FJackLDT_Sim_DancerSkirt_RotCancel) == 0x000010, "Wrong size on FJackLDT_Sim_DancerSkirt_RotCancel");

// ScriptStruct JackGame.JackLDT_Sim_DancerSkirt_MaxOrMinRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_DancerSkirt_MaxOrMinRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_DancerSkirt_MaxOrMinRot) == 0x000008, "Wrong alignment on FJackLDT_Sim_DancerSkirt_MaxOrMinRot");
static_assert(sizeof(FJackLDT_Sim_DancerSkirt_MaxOrMinRot) == 0x000010, "Wrong size on FJackLDT_Sim_DancerSkirt_MaxOrMinRot");

// ScriptStruct JackGame.JackLDT_Sim_DancerSkirt_AverageRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_DancerSkirt_AverageRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_DancerSkirt_AverageRot) == 0x000008, "Wrong alignment on FJackLDT_Sim_DancerSkirt_AverageRot");
static_assert(sizeof(FJackLDT_Sim_DancerSkirt_AverageRot) == 0x000010, "Wrong size on FJackLDT_Sim_DancerSkirt_AverageRot");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtQ1_Lerp2BonesAndClamp
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtQ1_Lerp2BonesAndClamp final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtQ1_Lerp2BonesAndClamp) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtQ1_Lerp2BonesAndClamp");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtQ1_Lerp2BonesAndClamp) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtQ1_Lerp2BonesAndClamp");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1_RotCancel
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1_RotCancel final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1_RotCancel) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1_RotCancel");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1_RotCancel) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1_RotCancel");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1_MaxOrMinRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1_MaxOrMinRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1_MaxOrMinRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1_MaxOrMinRot");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1_MaxOrMinRot) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1_MaxOrMinRot");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1_Lerp2BonesAndClamp
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1_Lerp2BonesAndClamp final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1_Lerp2BonesAndClamp) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1_Lerp2BonesAndClamp");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1_Lerp2BonesAndClamp) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1_Lerp2BonesAndClamp");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1_AverageRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1_AverageRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1_AverageRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1_AverageRot");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1_AverageRot) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1_AverageRot");

// ScriptStruct JackGame.JackLDT_RtEx_Skirt_SBSkirt2_AverageRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_Skirt_SBSkirt2_AverageRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_Skirt_SBSkirt2_AverageRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_Skirt_SBSkirt2_AverageRot");
static_assert(sizeof(FJackLDT_RtEx_Skirt_SBSkirt2_AverageRot) == 0x000010, "Wrong size on FJackLDT_RtEx_Skirt_SBSkirt2_AverageRot");

// ScriptStruct JackGame.JackLDT_RtEx_Skirt_SBSkirt_Lerp2BonesAndClamp
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_Skirt_SBSkirt_Lerp2BonesAndClamp final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_Skirt_SBSkirt_Lerp2BonesAndClamp) == 0x000008, "Wrong alignment on FJackLDT_RtEx_Skirt_SBSkirt_Lerp2BonesAndClamp");
static_assert(sizeof(FJackLDT_RtEx_Skirt_SBSkirt_Lerp2BonesAndClamp) == 0x000010, "Wrong size on FJackLDT_RtEx_Skirt_SBSkirt_Lerp2BonesAndClamp");

// ScriptStruct JackGame.JackLDT_Sim_MantleC_P004_low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_MantleC_P004_low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_MantleC_P004_low) == 0x000008, "Wrong alignment on FJackLDT_Sim_MantleC_P004_low");
static_assert(sizeof(FJackLDT_Sim_MantleC_P004_low) == 0x000010, "Wrong size on FJackLDT_Sim_MantleC_P004_low");

// ScriptStruct JackGame.JackLDT_RtEx_Skirt_Length3_AverageRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_Skirt_Length3_AverageRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_Skirt_Length3_AverageRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_Skirt_Length3_AverageRot");
static_assert(sizeof(FJackLDT_RtEx_Skirt_Length3_AverageRot) == 0x000010, "Wrong size on FJackLDT_RtEx_Skirt_Length3_AverageRot");

// ScriptStruct JackGame.JackLDT_RtEx_Skirt_Length1_RotCancel
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_Skirt_Length1_RotCancel final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_Skirt_Length1_RotCancel) == 0x000008, "Wrong alignment on FJackLDT_RtEx_Skirt_Length1_RotCancel");
static_assert(sizeof(FJackLDT_RtEx_Skirt_Length1_RotCancel) == 0x000010, "Wrong size on FJackLDT_RtEx_Skirt_Length1_RotCancel");

// ScriptStruct JackGame.JackLDT_RtEx_Skirt_Length1_MaxOrMinRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_Skirt_Length1_MaxOrMinRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_Skirt_Length1_MaxOrMinRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_Skirt_Length1_MaxOrMinRot");
static_assert(sizeof(FJackLDT_RtEx_Skirt_Length1_MaxOrMinRot) == 0x000010, "Wrong size on FJackLDT_RtEx_Skirt_Length1_MaxOrMinRot");

// ScriptStruct JackGame.JackMeosiSlotChanceCutinStepUp
// 0x0010 (0x0010 - 0x0000)
struct FJackMeosiSlotChanceCutinStepUp final
{
public:
	TArray<EJackMeosiSlotCutinColor>              Colors;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMeosiSlotChanceCutinStepUp) == 0x000008, "Wrong alignment on FJackMeosiSlotChanceCutinStepUp");
static_assert(sizeof(FJackMeosiSlotChanceCutinStepUp) == 0x000010, "Wrong size on FJackMeosiSlotChanceCutinStepUp");
static_assert(offsetof(FJackMeosiSlotChanceCutinStepUp, Colors) == 0x000000, "Member 'FJackMeosiSlotChanceCutinStepUp::Colors' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_P004_Skirt_MaxOrMinRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_P004_Skirt_MaxOrMinRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_P004_Skirt_MaxOrMinRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_P004_Skirt_MaxOrMinRot");
static_assert(sizeof(FJackLDT_RtEx_P004_Skirt_MaxOrMinRot) == 0x000010, "Wrong size on FJackLDT_RtEx_P004_Skirt_MaxOrMinRot");

// ScriptStruct JackGame.JackLDT_RtEx_P004_Skirt_Lerp2BonesAndClamp
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_P004_Skirt_Lerp2BonesAndClamp final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_P004_Skirt_Lerp2BonesAndClamp) == 0x000008, "Wrong alignment on FJackLDT_RtEx_P004_Skirt_Lerp2BonesAndClamp");
static_assert(sizeof(FJackLDT_RtEx_P004_Skirt_Lerp2BonesAndClamp) == 0x000010, "Wrong size on FJackLDT_RtEx_P004_Skirt_Lerp2BonesAndClamp");

// ScriptStruct JackGame.JackLDT_RtEx_P004_Skirt_AverageRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_P004_Skirt_AverageRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_P004_Skirt_AverageRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_P004_Skirt_AverageRot");
static_assert(sizeof(FJackLDT_RtEx_P004_Skirt_AverageRot) == 0x000010, "Wrong size on FJackLDT_RtEx_P004_Skirt_AverageRot");

// ScriptStruct JackGame.JackLDT_RtEx_P002_Skirt_RotCancel
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_P002_Skirt_RotCancel final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_P002_Skirt_RotCancel) == 0x000008, "Wrong alignment on FJackLDT_RtEx_P002_Skirt_RotCancel");
static_assert(sizeof(FJackLDT_RtEx_P002_Skirt_RotCancel) == 0x000010, "Wrong size on FJackLDT_RtEx_P002_Skirt_RotCancel");

// ScriptStruct JackGame.JackPartyTalkDataTableDic
// 0x0010 (0x0010 - 0x0000)
struct FJackPartyTalkDataTableDic final
{
public:
	EJackScenarioID                               ScenarioID;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             PartyTalkData;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackPartyTalkDataTableDic) == 0x000008, "Wrong alignment on FJackPartyTalkDataTableDic");
static_assert(sizeof(FJackPartyTalkDataTableDic) == 0x000010, "Wrong size on FJackPartyTalkDataTableDic");
static_assert(offsetof(FJackPartyTalkDataTableDic, ScenarioID) == 0x000000, "Member 'FJackPartyTalkDataTableDic::ScenarioID' has a wrong offset!");
static_assert(offsetof(FJackPartyTalkDataTableDic, PartyTalkData) == 0x000008, "Member 'FJackPartyTalkDataTableDic::PartyTalkData' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_P002_Skirt_MaxOrMinRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_P002_Skirt_MaxOrMinRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_P002_Skirt_MaxOrMinRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_P002_Skirt_MaxOrMinRot");
static_assert(sizeof(FJackLDT_RtEx_P002_Skirt_MaxOrMinRot) == 0x000010, "Wrong size on FJackLDT_RtEx_P002_Skirt_MaxOrMinRot");

// ScriptStruct JackGame.JackLDT_RtEx_P002_Skirt_Lerp2BonesAndClamp
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_P002_Skirt_Lerp2BonesAndClamp final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_P002_Skirt_Lerp2BonesAndClamp) == 0x000008, "Wrong alignment on FJackLDT_RtEx_P002_Skirt_Lerp2BonesAndClamp");
static_assert(sizeof(FJackLDT_RtEx_P002_Skirt_Lerp2BonesAndClamp) == 0x000010, "Wrong size on FJackLDT_RtEx_P002_Skirt_Lerp2BonesAndClamp");

// ScriptStruct JackGame.JackLDT_RtEx_P002_Skirt_AverageRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_P002_Skirt_AverageRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_P002_Skirt_AverageRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_P002_Skirt_AverageRot");
static_assert(sizeof(FJackLDT_RtEx_P002_Skirt_AverageRot) == 0x000010, "Wrong size on FJackLDT_RtEx_P002_Skirt_AverageRot");

// ScriptStruct JackGame.JackLDT_RtEx_P001_Skirt_RotCancel
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_P001_Skirt_RotCancel final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_P001_Skirt_RotCancel) == 0x000008, "Wrong alignment on FJackLDT_RtEx_P001_Skirt_RotCancel");
static_assert(sizeof(FJackLDT_RtEx_P001_Skirt_RotCancel) == 0x000010, "Wrong size on FJackLDT_RtEx_P001_Skirt_RotCancel");

// ScriptStruct JackGame.JackLDT_RtEx_P001_Skirt_Lerp2BonesAndClamp
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_P001_Skirt_Lerp2BonesAndClamp final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_P001_Skirt_Lerp2BonesAndClamp) == 0x000008, "Wrong alignment on FJackLDT_RtEx_P001_Skirt_Lerp2BonesAndClamp");
static_assert(sizeof(FJackLDT_RtEx_P001_Skirt_Lerp2BonesAndClamp) == 0x000010, "Wrong size on FJackLDT_RtEx_P001_Skirt_Lerp2BonesAndClamp");

// ScriptStruct JackGame.JackLDT_RtEx_P001_Skirt_AverageRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_P001_Skirt_AverageRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_P001_Skirt_AverageRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_P001_Skirt_AverageRot");
static_assert(sizeof(FJackLDT_RtEx_P001_Skirt_AverageRot) == 0x000010, "Wrong size on FJackLDT_RtEx_P001_Skirt_AverageRot");

// ScriptStruct JackGame.JackLDT_ResidentBlueprintFunctionLibrary_Preload
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ResidentBlueprintFunctionLibrary_Preload final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ResidentBlueprintFunctionLibrary_Preload) == 0x000008, "Wrong alignment on FJackLDT_ResidentBlueprintFunctionLibrary_Preload");
static_assert(sizeof(FJackLDT_ResidentBlueprintFunctionLibrary_Preload) == 0x000010, "Wrong size on FJackLDT_ResidentBlueprintFunctionLibrary_Preload");

// ScriptStruct JackGame.JackLDT_RtEx_NorthSkirtS1_MaxOrMinRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_NorthSkirtS1_MaxOrMinRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_NorthSkirtS1_MaxOrMinRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_NorthSkirtS1_MaxOrMinRot");
static_assert(sizeof(FJackLDT_RtEx_NorthSkirtS1_MaxOrMinRot) == 0x000010, "Wrong size on FJackLDT_RtEx_NorthSkirtS1_MaxOrMinRot");

// ScriptStruct JackGame.JackLDT_RtEx_NorthSkirtS1_Lerp2BonesAndClamp
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_NorthSkirtS1_Lerp2BonesAndClamp final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_NorthSkirtS1_Lerp2BonesAndClamp) == 0x000008, "Wrong alignment on FJackLDT_RtEx_NorthSkirtS1_Lerp2BonesAndClamp");
static_assert(sizeof(FJackLDT_RtEx_NorthSkirtS1_Lerp2BonesAndClamp) == 0x000010, "Wrong size on FJackLDT_RtEx_NorthSkirtS1_Lerp2BonesAndClamp");

// ScriptStruct JackGame.JackLDT_RtEx_FtSkirt_Length3_N010
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FtSkirt_Length3_N010 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FtSkirt_Length3_N010) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FtSkirt_Length3_N010");
static_assert(sizeof(FJackLDT_RtEx_FtSkirt_Length3_N010) == 0x000010, "Wrong size on FJackLDT_RtEx_FtSkirt_Length3_N010");

// ScriptStruct JackGame.JackLDT_RtEx_NmSkirtB1_Lerp2BonesAndClamp2
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_NmSkirtB1_Lerp2BonesAndClamp2 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_NmSkirtB1_Lerp2BonesAndClamp2) == 0x000008, "Wrong alignment on FJackLDT_RtEx_NmSkirtB1_Lerp2BonesAndClamp2");
static_assert(sizeof(FJackLDT_RtEx_NmSkirtB1_Lerp2BonesAndClamp2) == 0x000010, "Wrong size on FJackLDT_RtEx_NmSkirtB1_Lerp2BonesAndClamp2");

// ScriptStruct JackGame.JackLDT_RtEx_NmSkirtB1_AverageRot2
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_NmSkirtB1_AverageRot2 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_NmSkirtB1_AverageRot2) == 0x000008, "Wrong alignment on FJackLDT_RtEx_NmSkirtB1_AverageRot2");
static_assert(sizeof(FJackLDT_RtEx_NmSkirtB1_AverageRot2) == 0x000010, "Wrong size on FJackLDT_RtEx_NmSkirtB1_AverageRot2");

// ScriptStruct JackGame.JackLDT_RtEx_NmSkirtA1_RotCancel
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_NmSkirtA1_RotCancel final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_NmSkirtA1_RotCancel) == 0x000008, "Wrong alignment on FJackLDT_RtEx_NmSkirtA1_RotCancel");
static_assert(sizeof(FJackLDT_RtEx_NmSkirtA1_RotCancel) == 0x000010, "Wrong size on FJackLDT_RtEx_NmSkirtA1_RotCancel");

// ScriptStruct JackGame.JackLDT_RtEx_NmSkirtA1_Lerp2BonesAndClamp
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_NmSkirtA1_Lerp2BonesAndClamp final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_NmSkirtA1_Lerp2BonesAndClamp) == 0x000008, "Wrong alignment on FJackLDT_RtEx_NmSkirtA1_Lerp2BonesAndClamp");
static_assert(sizeof(FJackLDT_RtEx_NmSkirtA1_Lerp2BonesAndClamp) == 0x000010, "Wrong size on FJackLDT_RtEx_NmSkirtA1_Lerp2BonesAndClamp");

// ScriptStruct JackGame.JackLDT_RtEx_NmSkirtA1_AverageRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_NmSkirtA1_AverageRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_NmSkirtA1_AverageRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_NmSkirtA1_AverageRot");
static_assert(sizeof(FJackLDT_RtEx_NmSkirtA1_AverageRot) == 0x000010, "Wrong size on FJackLDT_RtEx_NmSkirtA1_AverageRot");

// ScriptStruct JackGame.JackLDT_ActionMultiAttack
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ActionMultiAttack final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ActionMultiAttack) == 0x000008, "Wrong alignment on FJackLDT_ActionMultiAttack");
static_assert(sizeof(FJackLDT_ActionMultiAttack) == 0x000010, "Wrong size on FJackLDT_ActionMultiAttack");

// ScriptStruct JackGame.JackLDT_RtEx_N008_SamaCoat_L2BAC
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_N008_SamaCoat_L2BAC final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_N008_SamaCoat_L2BAC) == 0x000008, "Wrong alignment on FJackLDT_RtEx_N008_SamaCoat_L2BAC");
static_assert(sizeof(FJackLDT_RtEx_N008_SamaCoat_L2BAC) == 0x000010, "Wrong size on FJackLDT_RtEx_N008_SamaCoat_L2BAC");

// ScriptStruct JackGame.JackLDT_RtEx_HrSkirt_A_MaxOrMinRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HrSkirt_A_MaxOrMinRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HrSkirt_A_MaxOrMinRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HrSkirt_A_MaxOrMinRot");
static_assert(sizeof(FJackLDT_RtEx_HrSkirt_A_MaxOrMinRot) == 0x000010, "Wrong size on FJackLDT_RtEx_HrSkirt_A_MaxOrMinRot");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_N004_Lerp2BonesAndClamp
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_N004_Lerp2BonesAndClamp final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_N004_Lerp2BonesAndClamp) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_N004_Lerp2BonesAndClamp");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_N004_Lerp2BonesAndClamp) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_N004_Lerp2BonesAndClamp");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_N001_AverageRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_N001_AverageRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_N001_AverageRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_N001_AverageRot");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_N001_AverageRot) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_N001_AverageRot");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_MaxOrMinRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_MaxOrMinRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_MaxOrMinRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_MaxOrMinRot");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_MaxOrMinRot) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_MaxOrMinRot");

// ScriptStruct JackGame.JackLDT_AttachedProps_P004
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AttachedProps_P004 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AttachedProps_P004) == 0x000008, "Wrong alignment on FJackLDT_AttachedProps_P004");
static_assert(sizeof(FJackLDT_AttachedProps_P004) == 0x000010, "Wrong size on FJackLDT_AttachedProps_P004");

// ScriptStruct JackGame.JackLDT_RtEx_FtSkirt_Length3_N013_Lerp2BonesAndClamp
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FtSkirt_Length3_N013_Lerp2BonesAndClamp final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FtSkirt_Length3_N013_Lerp2BonesAndClamp) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FtSkirt_Length3_N013_Lerp2BonesAndClamp");
static_assert(sizeof(FJackLDT_RtEx_FtSkirt_Length3_N013_Lerp2BonesAndClamp) == 0x000010, "Wrong size on FJackLDT_RtEx_FtSkirt_Length3_N013_Lerp2BonesAndClamp");

// ScriptStruct JackGame.JackLDT_RtEx_FtSkirt_Length3_N013_AverageRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FtSkirt_Length3_N013_AverageRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FtSkirt_Length3_N013_AverageRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FtSkirt_Length3_N013_AverageRot");
static_assert(sizeof(FJackLDT_RtEx_FtSkirt_Length3_N013_AverageRot) == 0x000010, "Wrong size on FJackLDT_RtEx_FtSkirt_Length3_N013_AverageRot");

// ScriptStruct JackGame.JackLDT_RtEx_FtSkirt_Length3_N010_Lerp2BonesAndClamp
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FtSkirt_Length3_N010_Lerp2BonesAndClamp final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FtSkirt_Length3_N010_Lerp2BonesAndClamp) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FtSkirt_Length3_N010_Lerp2BonesAndClamp");
static_assert(sizeof(FJackLDT_RtEx_FtSkirt_Length3_N010_Lerp2BonesAndClamp) == 0x000010, "Wrong size on FJackLDT_RtEx_FtSkirt_Length3_N010_Lerp2BonesAndClamp");

// ScriptStruct JackGame.JackSerifuAutomationFlags
// 0x0005 (0x0005 - 0x0000)
struct FJackSerifuAutomationFlags final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoIncrementTalkCount;                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTalkCountBranch;                                  // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeatherBranch;                                    // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTimeBranch;                                       // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackSerifuAutomationFlags) == 0x000001, "Wrong alignment on FJackSerifuAutomationFlags");
static_assert(sizeof(FJackSerifuAutomationFlags) == 0x000005, "Wrong size on FJackSerifuAutomationFlags");
static_assert(offsetof(FJackSerifuAutomationFlags, bEnabled) == 0x000000, "Member 'FJackSerifuAutomationFlags::bEnabled' has a wrong offset!");
static_assert(offsetof(FJackSerifuAutomationFlags, bAutoIncrementTalkCount) == 0x000001, "Member 'FJackSerifuAutomationFlags::bAutoIncrementTalkCount' has a wrong offset!");
static_assert(offsetof(FJackSerifuAutomationFlags, bTalkCountBranch) == 0x000002, "Member 'FJackSerifuAutomationFlags::bTalkCountBranch' has a wrong offset!");
static_assert(offsetof(FJackSerifuAutomationFlags, bWeatherBranch) == 0x000003, "Member 'FJackSerifuAutomationFlags::bWeatherBranch' has a wrong offset!");
static_assert(offsetof(FJackSerifuAutomationFlags, bTimeBranch) == 0x000004, "Member 'FJackSerifuAutomationFlags::bTimeBranch' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_FtSkirt_Length3_N008_Lerp2BonesAndClamp
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FtSkirt_Length3_N008_Lerp2BonesAndClamp final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FtSkirt_Length3_N008_Lerp2BonesAndClamp) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FtSkirt_Length3_N008_Lerp2BonesAndClamp");
static_assert(sizeof(FJackLDT_RtEx_FtSkirt_Length3_N008_Lerp2BonesAndClamp) == 0x000010, "Wrong size on FJackLDT_RtEx_FtSkirt_Length3_N008_Lerp2BonesAndClamp");

// ScriptStruct JackGame.JackLDT_RtEx_FtSkirt_Length3_N008_AverageRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FtSkirt_Length3_N008_AverageRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FtSkirt_Length3_N008_AverageRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FtSkirt_Length3_N008_AverageRot");
static_assert(sizeof(FJackLDT_RtEx_FtSkirt_Length3_N008_AverageRot) == 0x000010, "Wrong size on FJackLDT_RtEx_FtSkirt_Length3_N008_AverageRot");

// ScriptStruct JackGame.JackLDT_RtEx_FtSkirt_Length3_Lerp2BonesAndClamp
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FtSkirt_Length3_Lerp2BonesAndClamp final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FtSkirt_Length3_Lerp2BonesAndClamp) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FtSkirt_Length3_Lerp2BonesAndClamp");
static_assert(sizeof(FJackLDT_RtEx_FtSkirt_Length3_Lerp2BonesAndClamp) == 0x000010, "Wrong size on FJackLDT_RtEx_FtSkirt_Length3_Lerp2BonesAndClamp");

// ScriptStruct JackGame.JackLDT_RtEx_FtSkirt_Length3_AverageRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FtSkirt_Length3_AverageRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FtSkirt_Length3_AverageRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FtSkirt_Length3_AverageRot");
static_assert(sizeof(FJackLDT_RtEx_FtSkirt_Length3_AverageRot) == 0x000010, "Wrong size on FJackLDT_RtEx_FtSkirt_Length3_AverageRot");

// ScriptStruct JackGame.JackLDT_RtEx_FtSkirt_Length2_N013_L2BAC
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FtSkirt_Length2_N013_L2BAC final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FtSkirt_Length2_N013_L2BAC) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FtSkirt_Length2_N013_L2BAC");
static_assert(sizeof(FJackLDT_RtEx_FtSkirt_Length2_N013_L2BAC) == 0x000010, "Wrong size on FJackLDT_RtEx_FtSkirt_Length2_N013_L2BAC");

// ScriptStruct JackGame.JackLDT_CoordinateLookAtBoneSettingsToCutScene
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_CoordinateLookAtBoneSettingsToCutScene final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_CoordinateLookAtBoneSettingsToCutScene) == 0x000008, "Wrong alignment on FJackLDT_CoordinateLookAtBoneSettingsToCutScene");
static_assert(sizeof(FJackLDT_CoordinateLookAtBoneSettingsToCutScene) == 0x000010, "Wrong size on FJackLDT_CoordinateLookAtBoneSettingsToCutScene");

// ScriptStruct JackGame.JackLDT_RtEx_FtSkirt_Length2_N013_AR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FtSkirt_Length2_N013_AR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FtSkirt_Length2_N013_AR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FtSkirt_Length2_N013_AR");
static_assert(sizeof(FJackLDT_RtEx_FtSkirt_Length2_N013_AR) == 0x000010, "Wrong size on FJackLDT_RtEx_FtSkirt_Length2_N013_AR");

// ScriptStruct JackGame.JackLDT_RtEx_FBSkirtB1_RotCancel
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FBSkirtB1_RotCancel final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FBSkirtB1_RotCancel) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FBSkirtB1_RotCancel");
static_assert(sizeof(FJackLDT_RtEx_FBSkirtB1_RotCancel) == 0x000010, "Wrong size on FJackLDT_RtEx_FBSkirtB1_RotCancel");

// ScriptStruct JackGame.JackLDT_RtEx_FBSkirtB1_AverageRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FBSkirtB1_AverageRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FBSkirtB1_AverageRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FBSkirtB1_AverageRot");
static_assert(sizeof(FJackLDT_RtEx_FBSkirtB1_AverageRot) == 0x000010, "Wrong size on FJackLDT_RtEx_FBSkirtB1_AverageRot");

// ScriptStruct JackGame.JackLDT_RtEx_FBSkirtA1_Skirt_RotCancel
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FBSkirtA1_Skirt_RotCancel final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FBSkirtA1_Skirt_RotCancel) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FBSkirtA1_Skirt_RotCancel");
static_assert(sizeof(FJackLDT_RtEx_FBSkirtA1_Skirt_RotCancel) == 0x000010, "Wrong size on FJackLDT_RtEx_FBSkirtA1_Skirt_RotCancel");

// ScriptStruct JackGame.JackLDT_Sim_CapeMantle
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_CapeMantle final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_CapeMantle) == 0x000008, "Wrong alignment on FJackLDT_Sim_CapeMantle");
static_assert(sizeof(FJackLDT_Sim_CapeMantle) == 0x000010, "Wrong size on FJackLDT_Sim_CapeMantle");

// ScriptStruct JackGame.JackLDT_RtEx_FBSkirtA1_MaxOrMinRot
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FBSkirtA1_MaxOrMinRot final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FBSkirtA1_MaxOrMinRot) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FBSkirtA1_MaxOrMinRot");
static_assert(sizeof(FJackLDT_RtEx_FBSkirtA1_MaxOrMinRot) == 0x000010, "Wrong size on FJackLDT_RtEx_FBSkirtA1_MaxOrMinRot");

// ScriptStruct JackGame.JackLDT_RtEx_FBSkirtA1_Lerp2BonesAndClamp
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FBSkirtA1_Lerp2BonesAndClamp final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FBSkirtA1_Lerp2BonesAndClamp) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FBSkirtA1_Lerp2BonesAndClamp");
static_assert(sizeof(FJackLDT_RtEx_FBSkirtA1_Lerp2BonesAndClamp) == 0x000010, "Wrong size on FJackLDT_RtEx_FBSkirtA1_Lerp2BonesAndClamp");

// ScriptStruct JackGame.JackLDT_RtEx_SwimSkirt_P006_RC
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SwimSkirt_P006_RC final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SwimSkirt_P006_RC) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SwimSkirt_P006_RC");
static_assert(sizeof(FJackLDT_RtEx_SwimSkirt_P006_RC) == 0x000010, "Wrong size on FJackLDT_RtEx_SwimSkirt_P006_RC");

// ScriptStruct JackGame.JackLDT_RtEx_SwimSkirt_P006_L2BAC
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SwimSkirt_P006_L2BAC final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SwimSkirt_P006_L2BAC) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SwimSkirt_P006_L2BAC");
static_assert(sizeof(FJackLDT_RtEx_SwimSkirt_P006_L2BAC) == 0x000010, "Wrong size on FJackLDT_RtEx_SwimSkirt_P006_L2BAC");

// ScriptStruct JackGame.JackLDT_RtEx_SwimSkirt_P006_AR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SwimSkirt_P006_AR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SwimSkirt_P006_AR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SwimSkirt_P006_AR");
static_assert(sizeof(FJackLDT_RtEx_SwimSkirt_P006_AR) == 0x000010, "Wrong size on FJackLDT_RtEx_SwimSkirt_P006_AR");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1_P008_RC
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1_P008_RC final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1_P008_RC) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1_P008_RC");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1_P008_RC) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1_P008_RC");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1_P008_L2BAC
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1_P008_L2BAC final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1_P008_L2BAC) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1_P008_L2BAC");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1_P008_L2BAC) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1_P008_L2BAC");

// ScriptStruct JackGame.JackLDT_RtEx_PrinSkirt_P006_low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_PrinSkirt_P006_low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_PrinSkirt_P006_low) == 0x000008, "Wrong alignment on FJackLDT_RtEx_PrinSkirt_P006_low");
static_assert(sizeof(FJackLDT_RtEx_PrinSkirt_P006_low) == 0x000010, "Wrong size on FJackLDT_RtEx_PrinSkirt_P006_low");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1_P008_AR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1_P008_AR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1_P008_AR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1_P008_AR");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1_P008_AR) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1_P008_AR");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1S_P001_MOMR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1S_P001_MOMR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1S_P001_MOMR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1S_P001_MOMR");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1S_P001_MOMR) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1S_P001_MOMR");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1S_P001_L2BAC
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1S_P001_L2BAC final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1S_P001_L2BAC) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1S_P001_L2BAC");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1S_P001_L2BAC) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1S_P001_L2BAC");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1S_P001_AR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1S_P001_AR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1S_P001_AR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1S_P001_AR");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1S_P001_AR) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1S_P001_AR");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1L_P006_RC
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1L_P006_RC final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1L_P006_RC) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1L_P006_RC");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1L_P006_RC) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1L_P006_RC");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1L_P006_L2BAC
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1L_P006_L2BAC final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1L_P006_L2BAC) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1L_P006_L2BAC");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1L_P006_L2BAC) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1L_P006_L2BAC");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1L_P006_AR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1L_P006_AR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1L_P006_AR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1L_P006_AR");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1L_P006_AR) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1L_P006_AR");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1L_P001_MOMR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1L_P001_MOMR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1L_P001_MOMR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1L_P001_MOMR");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1L_P001_MOMR) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1L_P001_MOMR");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1L_P001_L2BAC
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1L_P001_L2BAC final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1L_P001_L2BAC) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1L_P001_L2BAC");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1L_P001_L2BAC) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1L_P001_L2BAC");

// ScriptStruct JackGame.JackLDT_RtEx_PrinSkirt_P006_AR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_PrinSkirt_P006_AR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_PrinSkirt_P006_AR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_PrinSkirt_P006_AR");
static_assert(sizeof(FJackLDT_RtEx_PrinSkirt_P006_AR) == 0x000010, "Wrong size on FJackLDT_RtEx_PrinSkirt_P006_AR");

// ScriptStruct JackGame.JackLDT_RtEx_P002_DelayLegPants_AR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_P002_DelayLegPants_AR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_P002_DelayLegPants_AR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_P002_DelayLegPants_AR");
static_assert(sizeof(FJackLDT_RtEx_P002_DelayLegPants_AR) == 0x000010, "Wrong size on FJackLDT_RtEx_P002_DelayLegPants_AR");

// ScriptStruct JackGame.JackLDT_RtEx_NmSkirtD1_L2BAC
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_NmSkirtD1_L2BAC final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_NmSkirtD1_L2BAC) == 0x000008, "Wrong alignment on FJackLDT_RtEx_NmSkirtD1_L2BAC");
static_assert(sizeof(FJackLDT_RtEx_NmSkirtD1_L2BAC) == 0x000010, "Wrong size on FJackLDT_RtEx_NmSkirtD1_L2BAC");

// ScriptStruct JackGame.JackLDT_Pose_RearHairP1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_RearHairP1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_RearHairP1) == 0x000008, "Wrong alignment on FJackLDT_Pose_RearHairP1");
static_assert(sizeof(FJackLDT_Pose_RearHairP1) == 0x000010, "Wrong size on FJackLDT_Pose_RearHairP1");

// ScriptStruct JackGame.JackLDT_RtEx_NmSkirtD1_AR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_NmSkirtD1_AR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_NmSkirtD1_AR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_NmSkirtD1_AR");
static_assert(sizeof(FJackLDT_RtEx_NmSkirtD1_AR) == 0x000010, "Wrong size on FJackLDT_RtEx_NmSkirtD1_AR");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_P008_MOMR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_P008_MOMR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_P008_MOMR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_P008_MOMR");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_P008_MOMR) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_P008_MOMR");

// ScriptStruct JackGame.JackKeyWordInfo
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x08) FJackKeyWordInfo final
{
public:
	uint8                                         Pad_0[0x70];                                       // 0x0000(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackKeyWordInfo) == 0x000008, "Wrong alignment on FJackKeyWordInfo");
static_assert(sizeof(FJackKeyWordInfo) == 0x000070, "Wrong size on FJackKeyWordInfo");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_P004_MOMR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_P004_MOMR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_P004_MOMR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_P004_MOMR");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_P004_MOMR) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_P004_MOMR");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_P004_L2BAC
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_P004_L2BAC final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_P004_L2BAC) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_P004_L2BAC");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_P004_L2BAC) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_P004_L2BAC");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_P004_AR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_P004_AR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_P004_AR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_P004_AR");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_P004_AR) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_P004_AR");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_P002_MOMR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_P002_MOMR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_P002_MOMR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_P002_MOMR");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_P002_MOMR) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_P002_MOMR");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_P002_L2BAC
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_P002_L2BAC final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_P002_L2BAC) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_P002_L2BAC");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_P002_L2BAC) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_P002_L2BAC");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_P001_MOMR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_P001_MOMR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_P001_MOMR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_P001_MOMR");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_P001_MOMR) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_P001_MOMR");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_P001_L2BAC
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_P001_L2BAC final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_P001_L2BAC) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_P001_L2BAC");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_P001_L2BAC) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_P001_L2BAC");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_P001_AR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_P001_AR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_P001_AR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_P001_AR");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_P001_AR) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_P001_AR");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_N001_Up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_N001_Up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_N001_Up) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_N001_Up");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_N001_Up) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_N001_Up");

// ScriptStruct JackGame.JackLDT_RtEx_FBSkirtA1_P006_MOMR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FBSkirtA1_P006_MOMR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FBSkirtA1_P006_MOMR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FBSkirtA1_P006_MOMR");
static_assert(sizeof(FJackLDT_RtEx_FBSkirtA1_P006_MOMR) == 0x000010, "Wrong size on FJackLDT_RtEx_FBSkirtA1_P006_MOMR");

// ScriptStruct JackGame.JackLDT_RtEx_FBSkirtA1_P006_L2BAC
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FBSkirtA1_P006_L2BAC final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FBSkirtA1_P006_L2BAC) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FBSkirtA1_P006_L2BAC");
static_assert(sizeof(FJackLDT_RtEx_FBSkirtA1_P006_L2BAC) == 0x000010, "Wrong size on FJackLDT_RtEx_FBSkirtA1_P006_L2BAC");

// ScriptStruct JackGame.JackLDT_RtEx_FBSkirtA1_P006_AR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FBSkirtA1_P006_AR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FBSkirtA1_P006_AR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FBSkirtA1_P006_AR");
static_assert(sizeof(FJackLDT_RtEx_FBSkirtA1_P006_AR) == 0x000010, "Wrong size on FJackLDT_RtEx_FBSkirtA1_P006_AR");

// ScriptStruct JackGame.JackLDT_RtEx_BunnySkirt_P006_MOMR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_BunnySkirt_P006_MOMR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_BunnySkirt_P006_MOMR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_BunnySkirt_P006_MOMR");
static_assert(sizeof(FJackLDT_RtEx_BunnySkirt_P006_MOMR) == 0x000010, "Wrong size on FJackLDT_RtEx_BunnySkirt_P006_MOMR");

// ScriptStruct JackGame.JackLDT_RtEx_BunnySkirt_P006_AR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_BunnySkirt_P006_AR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_BunnySkirt_P006_AR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_BunnySkirt_P006_AR");
static_assert(sizeof(FJackLDT_RtEx_BunnySkirt_P006_AR) == 0x000010, "Wrong size on FJackLDT_RtEx_BunnySkirt_P006_AR");

// ScriptStruct JackGame.JackLDT_RtEx_Bt_NimaSkirt_MOMR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_Bt_NimaSkirt_MOMR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_Bt_NimaSkirt_MOMR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_Bt_NimaSkirt_MOMR");
static_assert(sizeof(FJackLDT_RtEx_Bt_NimaSkirt_MOMR) == 0x000010, "Wrong size on FJackLDT_RtEx_Bt_NimaSkirt_MOMR");

// ScriptStruct JackGame.JackLDT_RtEx_Bt_NimaSkirt_L2BAC
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_Bt_NimaSkirt_L2BAC final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_Bt_NimaSkirt_L2BAC) == 0x000008, "Wrong alignment on FJackLDT_RtEx_Bt_NimaSkirt_L2BAC");
static_assert(sizeof(FJackLDT_RtEx_Bt_NimaSkirt_L2BAC) == 0x000010, "Wrong size on FJackLDT_RtEx_Bt_NimaSkirt_L2BAC");

// ScriptStruct JackGame.JackLDT_RtEx_Bt_NimaSkirt_AR
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_Bt_NimaSkirt_AR final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_Bt_NimaSkirt_AR) == 0x000008, "Wrong alignment on FJackLDT_RtEx_Bt_NimaSkirt_AR");
static_assert(sizeof(FJackLDT_RtEx_Bt_NimaSkirt_AR) == 0x000010, "Wrong size on FJackLDT_RtEx_Bt_NimaSkirt_AR");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_P001_Up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_P001_Up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_P001_Up) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_P001_Up");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_P001_Up) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_P001_Up");

// ScriptStruct JackGame.JackLDT_Sim_P001_ParadeFeather
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_P001_ParadeFeather final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_P001_ParadeFeather) == 0x000008, "Wrong alignment on FJackLDT_Sim_P001_ParadeFeather");
static_assert(sizeof(FJackLDT_Sim_P001_ParadeFeather) == 0x000010, "Wrong size on FJackLDT_Sim_P001_ParadeFeather");

// ScriptStruct JackGame.JackLDT_Sim_NPC_ParadeFar
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_NPC_ParadeFar final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_NPC_ParadeFar) == 0x000008, "Wrong alignment on FJackLDT_Sim_NPC_ParadeFar");
static_assert(sizeof(FJackLDT_Sim_NPC_ParadeFar) == 0x000010, "Wrong size on FJackLDT_Sim_NPC_ParadeFar");

// ScriptStruct JackGame.JackLDT_RtEx_LR_ShoulderClothA1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_LR_ShoulderClothA1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_LR_ShoulderClothA1) == 0x000008, "Wrong alignment on FJackLDT_RtEx_LR_ShoulderClothA1");
static_assert(sizeof(FJackLDT_RtEx_LR_ShoulderClothA1) == 0x000010, "Wrong size on FJackLDT_RtEx_LR_ShoulderClothA1");

// ScriptStruct JackGame.JackLDT_Sim_MantleC_up_Cs1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_MantleC_up_Cs1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_MantleC_up_Cs1) == 0x000008, "Wrong alignment on FJackLDT_Sim_MantleC_up_Cs1");
static_assert(sizeof(FJackLDT_Sim_MantleC_up_Cs1) == 0x000010, "Wrong size on FJackLDT_Sim_MantleC_up_Cs1");

// ScriptStruct JackGame.JackLDT_Sim_MantleC_up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_MantleC_up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_MantleC_up) == 0x000008, "Wrong alignment on FJackLDT_Sim_MantleC_up");
static_assert(sizeof(FJackLDT_Sim_MantleC_up) == 0x000010, "Wrong size on FJackLDT_Sim_MantleC_up");

// ScriptStruct JackGame.JackLDT_Sim_MantleC_low_Cs1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_MantleC_low_Cs1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_MantleC_low_Cs1) == 0x000008, "Wrong alignment on FJackLDT_Sim_MantleC_low_Cs1");
static_assert(sizeof(FJackLDT_Sim_MantleC_low_Cs1) == 0x000010, "Wrong size on FJackLDT_Sim_MantleC_low_Cs1");

// ScriptStruct JackGame.JackLDT_Sim_MantleB_up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_MantleB_up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_MantleB_up) == 0x000008, "Wrong alignment on FJackLDT_Sim_MantleB_up");
static_assert(sizeof(FJackLDT_Sim_MantleB_up) == 0x000010, "Wrong size on FJackLDT_Sim_MantleB_up");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_P008_Low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_P008_Low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_P008_Low) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_P008_Low");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_P008_Low) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_P008_Low");

// ScriptStruct JackGame.JackLDT_Sim_MantleB_low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_MantleB_low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_MantleB_low) == 0x000008, "Wrong alignment on FJackLDT_Sim_MantleB_low");
static_assert(sizeof(FJackLDT_Sim_MantleB_low) == 0x000010, "Wrong size on FJackLDT_Sim_MantleB_low");

// ScriptStruct JackGame.JackLDT_Sim_MantleC_P008_up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_MantleC_P008_up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_MantleC_P008_up) == 0x000008, "Wrong alignment on FJackLDT_Sim_MantleC_P008_up");
static_assert(sizeof(FJackLDT_Sim_MantleC_P008_up) == 0x000010, "Wrong size on FJackLDT_Sim_MantleC_P008_up");

// ScriptStruct JackGame.JackLDT_Sim_MantleC_P007_up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_MantleC_P007_up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_MantleC_P007_up) == 0x000008, "Wrong alignment on FJackLDT_Sim_MantleC_P007_up");
static_assert(sizeof(FJackLDT_Sim_MantleC_P007_up) == 0x000010, "Wrong size on FJackLDT_Sim_MantleC_P007_up");

// ScriptStruct JackGame.JackLDT_Sim_MantleC_P004_up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_MantleC_P004_up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_MantleC_P004_up) == 0x000008, "Wrong alignment on FJackLDT_Sim_MantleC_P004_up");
static_assert(sizeof(FJackLDT_Sim_MantleC_P004_up) == 0x000010, "Wrong size on FJackLDT_Sim_MantleC_P004_up");

// ScriptStruct JackGame.JackLDT_Sim_MantleC_P004_low_Cs1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_MantleC_P004_low_Cs1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_MantleC_P004_low_Cs1) == 0x000008, "Wrong alignment on FJackLDT_Sim_MantleC_P004_low_Cs1");
static_assert(sizeof(FJackLDT_Sim_MantleC_P004_low_Cs1) == 0x000010, "Wrong size on FJackLDT_Sim_MantleC_P004_low_Cs1");

// ScriptStruct JackGame.JackLDT_Sim_MantleC_N014_low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_MantleC_N014_low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_MantleC_N014_low) == 0x000008, "Wrong alignment on FJackLDT_Sim_MantleC_N014_low");
static_assert(sizeof(FJackLDT_Sim_MantleC_N014_low) == 0x000010, "Wrong size on FJackLDT_Sim_MantleC_N014_low");

// ScriptStruct JackGame.JackLDT_Sim_MantleC_N002_low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_MantleC_N002_low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_MantleC_N002_low) == 0x000008, "Wrong alignment on FJackLDT_Sim_MantleC_N002_low");
static_assert(sizeof(FJackLDT_Sim_MantleC_N002_low) == 0x000010, "Wrong size on FJackLDT_Sim_MantleC_N002_low");

// ScriptStruct JackGame.JackLDT_Sim_LR_NpcPantsI3
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_LR_NpcPantsI3 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_LR_NpcPantsI3) == 0x000008, "Wrong alignment on FJackLDT_Sim_LR_NpcPantsI3");
static_assert(sizeof(FJackLDT_Sim_LR_NpcPantsI3) == 0x000010, "Wrong size on FJackLDT_Sim_LR_NpcPantsI3");

// ScriptStruct JackGame.JackLDT_Sim_LR_LoinclothA1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_LR_LoinclothA1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_LR_LoinclothA1) == 0x000008, "Wrong alignment on FJackLDT_Sim_LR_LoinclothA1");
static_assert(sizeof(FJackLDT_Sim_LR_LoinclothA1) == 0x000010, "Wrong size on FJackLDT_Sim_LR_LoinclothA1");

// ScriptStruct JackGame.JackLDT_RtEx_SlideSkirt_up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SlideSkirt_up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SlideSkirt_up) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SlideSkirt_up");
static_assert(sizeof(FJackLDT_RtEx_SlideSkirt_up) == 0x000010, "Wrong size on FJackLDT_RtEx_SlideSkirt_up");

// ScriptStruct JackGame.JackLDT_RtEx_P004_Skirt_up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_P004_Skirt_up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_P004_Skirt_up) == 0x000008, "Wrong alignment on FJackLDT_RtEx_P004_Skirt_up");
static_assert(sizeof(FJackLDT_RtEx_P004_Skirt_up) == 0x000010, "Wrong size on FJackLDT_RtEx_P004_Skirt_up");

// ScriptStruct JackGame.JackLDT_RtEx_P002_Skirt
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_P002_Skirt final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_P002_Skirt) == 0x000008, "Wrong alignment on FJackLDT_RtEx_P002_Skirt");
static_assert(sizeof(FJackLDT_RtEx_P002_Skirt) == 0x000010, "Wrong size on FJackLDT_RtEx_P002_Skirt");

// ScriptStruct JackGame.JackLDT_RtEx_P001_Skirt_low_Cs1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_P001_Skirt_low_Cs1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_P001_Skirt_low_Cs1) == 0x000008, "Wrong alignment on FJackLDT_RtEx_P001_Skirt_low_Cs1");
static_assert(sizeof(FJackLDT_RtEx_P001_Skirt_low_Cs1) == 0x000010, "Wrong size on FJackLDT_RtEx_P001_Skirt_low_Cs1");

// ScriptStruct JackGame.JackLDT_RtEx_NorthSkirtS1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_NorthSkirtS1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_NorthSkirtS1) == 0x000008, "Wrong alignment on FJackLDT_RtEx_NorthSkirtS1");
static_assert(sizeof(FJackLDT_RtEx_NorthSkirtS1) == 0x000010, "Wrong size on FJackLDT_RtEx_NorthSkirtS1");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_N004_Low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_N004_Low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_N004_Low) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_N004_Low");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_N004_Low) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_N004_Low");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_Up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_Up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_Up) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_Up");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_Up) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_Up");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_Low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_Low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_Low) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_Low");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_Low) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_Low");

// ScriptStruct JackGame.JackLDT_RtEx_FtSkirt_Length3_N013
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FtSkirt_Length3_N013 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FtSkirt_Length3_N013) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FtSkirt_Length3_N013");
static_assert(sizeof(FJackLDT_RtEx_FtSkirt_Length3_N013) == 0x000010, "Wrong size on FJackLDT_RtEx_FtSkirt_Length3_N013");

// ScriptStruct JackGame.JackUMGFusigiPossibleList
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FJackUMGFusigiPossibleList final
{
public:
	class FName                                   ItemID;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RecipeId;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRecipe;                                          // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ZukanNo;                                           // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackSenreki_ItemCategory                     Category;                                          // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackItem_Classification                      Classification;                                    // 0x001D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReigaiStar;                                      // 0x001E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGFusigiPossibleList) == 0x000008, "Wrong alignment on FJackUMGFusigiPossibleList");
static_assert(sizeof(FJackUMGFusigiPossibleList) == 0x000020, "Wrong size on FJackUMGFusigiPossibleList");
static_assert(offsetof(FJackUMGFusigiPossibleList, ItemID) == 0x000000, "Member 'FJackUMGFusigiPossibleList::ItemID' has a wrong offset!");
static_assert(offsetof(FJackUMGFusigiPossibleList, RecipeId) == 0x000008, "Member 'FJackUMGFusigiPossibleList::RecipeId' has a wrong offset!");
static_assert(offsetof(FJackUMGFusigiPossibleList, Rank) == 0x000010, "Member 'FJackUMGFusigiPossibleList::Rank' has a wrong offset!");
static_assert(offsetof(FJackUMGFusigiPossibleList, IsRecipe) == 0x000014, "Member 'FJackUMGFusigiPossibleList::IsRecipe' has a wrong offset!");
static_assert(offsetof(FJackUMGFusigiPossibleList, ZukanNo) == 0x000018, "Member 'FJackUMGFusigiPossibleList::ZukanNo' has a wrong offset!");
static_assert(offsetof(FJackUMGFusigiPossibleList, Category) == 0x00001C, "Member 'FJackUMGFusigiPossibleList::Category' has a wrong offset!");
static_assert(offsetof(FJackUMGFusigiPossibleList, Classification) == 0x00001D, "Member 'FJackUMGFusigiPossibleList::Classification' has a wrong offset!");
static_assert(offsetof(FJackUMGFusigiPossibleList, IsReigaiStar) == 0x00001E, "Member 'FJackUMGFusigiPossibleList::IsReigaiStar' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_FtSkirt_Length3_N008
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FtSkirt_Length3_N008 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FtSkirt_Length3_N008) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FtSkirt_Length3_N008");
static_assert(sizeof(FJackLDT_RtEx_FtSkirt_Length3_N008) == 0x000010, "Wrong size on FJackLDT_RtEx_FtSkirt_Length3_N008");

// ScriptStruct JackGame.JackLDT_RtEx_FtSkirt_Length2_N013
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FtSkirt_Length2_N013 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FtSkirt_Length2_N013) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FtSkirt_Length2_N013");
static_assert(sizeof(FJackLDT_RtEx_FtSkirt_Length2_N013) == 0x000010, "Wrong size on FJackLDT_RtEx_FtSkirt_Length2_N013");

// ScriptStruct JackGame.JackLDT_RtEx_FtSkirt_Length2
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FtSkirt_Length2 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FtSkirt_Length2) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FtSkirt_Length2");
static_assert(sizeof(FJackLDT_RtEx_FtSkirt_Length2) == 0x000010, "Wrong size on FJackLDT_RtEx_FtSkirt_Length2");

// ScriptStruct JackGame.JackLDT_RtEx_FBSkirtB1_up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FBSkirtB1_up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FBSkirtB1_up) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FBSkirtB1_up");
static_assert(sizeof(FJackLDT_RtEx_FBSkirtB1_up) == 0x000010, "Wrong size on FJackLDT_RtEx_FBSkirtB1_up");

// ScriptStruct JackGame.JackLDT_RtEx_FBSkirtA1_up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FBSkirtA1_up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FBSkirtA1_up) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FBSkirtA1_up");
static_assert(sizeof(FJackLDT_RtEx_FBSkirtA1_up) == 0x000010, "Wrong size on FJackLDT_RtEx_FBSkirtA1_up");

// ScriptStruct JackGame.JackLDT_RtEx_FBSkirtA1_low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FBSkirtA1_low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FBSkirtA1_low) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FBSkirtA1_low");
static_assert(sizeof(FJackLDT_RtEx_FBSkirtA1_low) == 0x000010, "Wrong size on FJackLDT_RtEx_FBSkirtA1_low");

// ScriptStruct JackGame.JackLDT_RtEx_SwimSkirt_P006
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SwimSkirt_P006 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SwimSkirt_P006) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SwimSkirt_P006");
static_assert(sizeof(FJackLDT_RtEx_SwimSkirt_P006) == 0x000010, "Wrong size on FJackLDT_RtEx_SwimSkirt_P006");

// ScriptStruct JackGame.JackLDT_RtEx_SouthSkirtK1L_P006_low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SouthSkirtK1L_P006_low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SouthSkirtK1L_P006_low) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SouthSkirtK1L_P006_low");
static_assert(sizeof(FJackLDT_RtEx_SouthSkirtK1L_P006_low) == 0x000010, "Wrong size on FJackLDT_RtEx_SouthSkirtK1L_P006_low");

// ScriptStruct JackGame.JackLDT_RtEx_Skirt_Length4
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_Skirt_Length4 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_Skirt_Length4) == 0x000008, "Wrong alignment on FJackLDT_RtEx_Skirt_Length4");
static_assert(sizeof(FJackLDT_RtEx_Skirt_Length4) == 0x000010, "Wrong size on FJackLDT_RtEx_Skirt_Length4");

// ScriptStruct JackGame.JackLDT_RtEx_Skirt_Length2
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_Skirt_Length2 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_Skirt_Length2) == 0x000008, "Wrong alignment on FJackLDT_RtEx_Skirt_Length2");
static_assert(sizeof(FJackLDT_RtEx_Skirt_Length2) == 0x000010, "Wrong size on FJackLDT_RtEx_Skirt_Length2");

// ScriptStruct JackGame.JackLDT_RtEx_SBSkirt2
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_SBSkirt2 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_SBSkirt2) == 0x000008, "Wrong alignment on FJackLDT_RtEx_SBSkirt2");
static_assert(sizeof(FJackLDT_RtEx_SBSkirt2) == 0x000010, "Wrong size on FJackLDT_RtEx_SBSkirt2");

// ScriptStruct JackGame.JackLDT_RtEx_RCSkirt_Length3
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_RCSkirt_Length3 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_RCSkirt_Length3) == 0x000008, "Wrong alignment on FJackLDT_RtEx_RCSkirt_Length3");
static_assert(sizeof(FJackLDT_RtEx_RCSkirt_Length3) == 0x000010, "Wrong size on FJackLDT_RtEx_RCSkirt_Length3");

// ScriptStruct JackGame.JackLDT_RtEx_PrinSkirt_P006_up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_PrinSkirt_P006_up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_PrinSkirt_P006_up) == 0x000008, "Wrong alignment on FJackLDT_RtEx_PrinSkirt_P006_up");
static_assert(sizeof(FJackLDT_RtEx_PrinSkirt_P006_up) == 0x000010, "Wrong size on FJackLDT_RtEx_PrinSkirt_P006_up");

// ScriptStruct JackGame.JackLDT_RtEx_P002_DelayLegPants
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_P002_DelayLegPants final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_P002_DelayLegPants) == 0x000008, "Wrong alignment on FJackLDT_RtEx_P002_DelayLegPants");
static_assert(sizeof(FJackLDT_RtEx_P002_DelayLegPants) == 0x000010, "Wrong size on FJackLDT_RtEx_P002_DelayLegPants");

// ScriptStruct JackGame.JackUMGSoubiData
// 0x0070 (0x0070 - 0x0000)
struct FJackUMGSoubiData final
{
public:
	EJackCharacter                                CharaType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackItem_Bag                                 BagType;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IndexInBag;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackEquipmentRegion                          RegionType;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ID;                                                // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UTexture2D*                             Icon;                                              // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   RegionCaption;                                     // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EJackItem_Classification                      ClassType;                                         // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsChange;                                          // 0x0069(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBothHands;                                       // 0x006A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B[0x5];                                       // 0x006B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGSoubiData) == 0x000008, "Wrong alignment on FJackUMGSoubiData");
static_assert(sizeof(FJackUMGSoubiData) == 0x000070, "Wrong size on FJackUMGSoubiData");
static_assert(offsetof(FJackUMGSoubiData, CharaType) == 0x000000, "Member 'FJackUMGSoubiData::CharaType' has a wrong offset!");
static_assert(offsetof(FJackUMGSoubiData, BagType) == 0x000001, "Member 'FJackUMGSoubiData::BagType' has a wrong offset!");
static_assert(offsetof(FJackUMGSoubiData, IndexInBag) == 0x000004, "Member 'FJackUMGSoubiData::IndexInBag' has a wrong offset!");
static_assert(offsetof(FJackUMGSoubiData, RegionType) == 0x000008, "Member 'FJackUMGSoubiData::RegionType' has a wrong offset!");
static_assert(offsetof(FJackUMGSoubiData, ID) == 0x000010, "Member 'FJackUMGSoubiData::ID' has a wrong offset!");
static_assert(offsetof(FJackUMGSoubiData, Name) == 0x000018, "Member 'FJackUMGSoubiData::Name' has a wrong offset!");
static_assert(offsetof(FJackUMGSoubiData, Icon) == 0x000030, "Member 'FJackUMGSoubiData::Icon' has a wrong offset!");
static_assert(offsetof(FJackUMGSoubiData, RegionCaption) == 0x000038, "Member 'FJackUMGSoubiData::RegionCaption' has a wrong offset!");
static_assert(offsetof(FJackUMGSoubiData, Description) == 0x000050, "Member 'FJackUMGSoubiData::Description' has a wrong offset!");
static_assert(offsetof(FJackUMGSoubiData, ClassType) == 0x000068, "Member 'FJackUMGSoubiData::ClassType' has a wrong offset!");
static_assert(offsetof(FJackUMGSoubiData, IsChange) == 0x000069, "Member 'FJackUMGSoubiData::IsChange' has a wrong offset!");
static_assert(offsetof(FJackUMGSoubiData, IsBothHands) == 0x00006A, "Member 'FJackUMGSoubiData::IsBothHands' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_P004_Low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_P004_Low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_P004_Low) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_P004_Low");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_P004_Low) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_P004_Low");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_P002_Up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_P002_Up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_P002_Up) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_P002_Up");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_P002_Up) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_P002_Up");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_P002_Low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_P002_Low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_P002_Low) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_P002_Low");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_P002_Low) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_P002_Low");

// ScriptStruct JackGame.JackLDT_RtEx_HipsArmor_P001_Low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_HipsArmor_P001_Low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_HipsArmor_P001_Low) == 0x000008, "Wrong alignment on FJackLDT_RtEx_HipsArmor_P001_Low");
static_assert(sizeof(FJackLDT_RtEx_HipsArmor_P001_Low) == 0x000010, "Wrong size on FJackLDT_RtEx_HipsArmor_P001_Low");

// ScriptStruct JackGame.JackLDT_RtEx_FBSkirtA1_P006_up
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_FBSkirtA1_P006_up final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_FBSkirtA1_P006_up) == 0x000008, "Wrong alignment on FJackLDT_RtEx_FBSkirtA1_P006_up");
static_assert(sizeof(FJackLDT_RtEx_FBSkirtA1_P006_up) == 0x000010, "Wrong size on FJackLDT_RtEx_FBSkirtA1_P006_up");

// ScriptStruct JackGame.JackLDT_RtEx_BunnySkirt_P006
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_BunnySkirt_P006 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_BunnySkirt_P006) == 0x000008, "Wrong alignment on FJackLDT_RtEx_BunnySkirt_P006");
static_assert(sizeof(FJackLDT_RtEx_BunnySkirt_P006) == 0x000010, "Wrong size on FJackLDT_RtEx_BunnySkirt_P006");

// ScriptStruct JackGame.JackLDT_RtEx_Bt_NimaSkirt_Low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_RtEx_Bt_NimaSkirt_Low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_RtEx_Bt_NimaSkirt_Low) == 0x000008, "Wrong alignment on FJackLDT_RtEx_Bt_NimaSkirt_Low");
static_assert(sizeof(FJackLDT_RtEx_Bt_NimaSkirt_Low) == 0x000010, "Wrong size on FJackLDT_RtEx_Bt_NimaSkirt_Low");

// ScriptStruct JackGame.JackLDT_Sim_ShortHairUpMidLow
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_ShortHairUpMidLow final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_ShortHairUpMidLow) == 0x000008, "Wrong alignment on FJackLDT_Sim_ShortHairUpMidLow");
static_assert(sizeof(FJackLDT_Sim_ShortHairUpMidLow) == 0x000010, "Wrong size on FJackLDT_Sim_ShortHairUpMidLow");

// ScriptStruct JackGame.JackLDT_Sim_P004ShortHair
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_P004ShortHair final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_P004ShortHair) == 0x000008, "Wrong alignment on FJackLDT_Sim_P004ShortHair");
static_assert(sizeof(FJackLDT_Sim_P004ShortHair) == 0x000010, "Wrong size on FJackLDT_Sim_P004ShortHair");

// ScriptStruct JackGame.JackLDT_Sim_LR_RearHairA
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_LR_RearHairA final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_LR_RearHairA) == 0x000008, "Wrong alignment on FJackLDT_Sim_LR_RearHairA");
static_assert(sizeof(FJackLDT_Sim_LR_RearHairA) == 0x000010, "Wrong size on FJackLDT_Sim_LR_RearHairA");

// ScriptStruct JackGame.JackLDT_Sim_C_HairTailB1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_C_HairTailB1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_C_HairTailB1) == 0x000008, "Wrong alignment on FJackLDT_Sim_C_HairTailB1");
static_assert(sizeof(FJackLDT_Sim_C_HairTailB1) == 0x000010, "Wrong size on FJackLDT_Sim_C_HairTailB1");

// ScriptStruct JackGame.JackLDT_Sim_C_BeardB
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_C_BeardB final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_C_BeardB) == 0x000008, "Wrong alignment on FJackLDT_Sim_C_BeardB");
static_assert(sizeof(FJackLDT_Sim_C_BeardB) == 0x000010, "Wrong size on FJackLDT_Sim_C_BeardB");

// ScriptStruct JackGame.JackLDT_Sim_BeardD1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Sim_BeardD1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Sim_BeardD1) == 0x000008, "Wrong alignment on FJackLDT_Sim_BeardD1");
static_assert(sizeof(FJackLDT_Sim_BeardD1) == 0x000010, "Wrong size on FJackLDT_Sim_BeardD1");

// ScriptStruct JackGame.JackLDT_Pose_R_FrontHairE1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_R_FrontHairE1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_R_FrontHairE1) == 0x000008, "Wrong alignment on FJackLDT_Pose_R_FrontHairE1");
static_assert(sizeof(FJackLDT_Pose_R_FrontHairE1) == 0x000010, "Wrong size on FJackLDT_Pose_R_FrontHairE1");

// ScriptStruct JackGame.JackLDT_Pose_R_FrontHairE_low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_R_FrontHairE_low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_R_FrontHairE_low) == 0x000008, "Wrong alignment on FJackLDT_Pose_R_FrontHairE_low");
static_assert(sizeof(FJackLDT_Pose_R_FrontHairE_low) == 0x000010, "Wrong size on FJackLDT_Pose_R_FrontHairE_low");

// ScriptStruct JackGame.JackLDT_Pose_P008Hair
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_P008Hair final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_P008Hair) == 0x000008, "Wrong alignment on FJackLDT_Pose_P008Hair");
static_assert(sizeof(FJackLDT_Pose_P008Hair) == 0x000010, "Wrong size on FJackLDT_Pose_P008Hair");

// ScriptStruct JackGame.JackLDT_Pose_P003Hair_Cs1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_P003Hair_Cs1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_P003Hair_Cs1) == 0x000008, "Wrong alignment on FJackLDT_Pose_P003Hair_Cs1");
static_assert(sizeof(FJackLDT_Pose_P003Hair_Cs1) == 0x000010, "Wrong size on FJackLDT_Pose_P003Hair_Cs1");

// ScriptStruct JackGame.JackLDT_Pose_P003Hair
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_P003Hair final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_P003Hair) == 0x000008, "Wrong alignment on FJackLDT_Pose_P003Hair");
static_assert(sizeof(FJackLDT_Pose_P003Hair) == 0x000010, "Wrong size on FJackLDT_Pose_P003Hair");

// ScriptStruct JackGame.JackLDT_Pose_LR_SideHairJ1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_LR_SideHairJ1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_LR_SideHairJ1) == 0x000008, "Wrong alignment on FJackLDT_Pose_LR_SideHairJ1");
static_assert(sizeof(FJackLDT_Pose_LR_SideHairJ1) == 0x000010, "Wrong size on FJackLDT_Pose_LR_SideHairJ1");

// ScriptStruct JackGame.JackLDT_Pose_HeadVeilC1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_HeadVeilC1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_HeadVeilC1) == 0x000008, "Wrong alignment on FJackLDT_Pose_HeadVeilC1");
static_assert(sizeof(FJackLDT_Pose_HeadVeilC1) == 0x000010, "Wrong size on FJackLDT_Pose_HeadVeilC1");

// ScriptStruct JackGame.JackLDT_Pose_HeadVeilB1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_HeadVeilB1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_HeadVeilB1) == 0x000008, "Wrong alignment on FJackLDT_Pose_HeadVeilB1");
static_assert(sizeof(FJackLDT_Pose_HeadVeilB1) == 0x000010, "Wrong size on FJackLDT_Pose_HeadVeilB1");

// ScriptStruct JackGame.JackLDT_Pose_C_RearHairQ1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_C_RearHairQ1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_C_RearHairQ1) == 0x000008, "Wrong alignment on FJackLDT_Pose_C_RearHairQ1");
static_assert(sizeof(FJackLDT_Pose_C_RearHairQ1) == 0x000010, "Wrong size on FJackLDT_Pose_C_RearHairQ1");

// ScriptStruct JackGame.JackLDT_Pose_C_RearHairL1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_C_RearHairL1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_C_RearHairL1) == 0x000008, "Wrong alignment on FJackLDT_Pose_C_RearHairL1");
static_assert(sizeof(FJackLDT_Pose_C_RearHairL1) == 0x000010, "Wrong size on FJackLDT_Pose_C_RearHairL1");

// ScriptStruct JackGame.JackUMGMitameItemInfo
// 0x0030 (0x0030 - 0x0000)
struct FJackUMGMitameItemInfo final
{
public:
	EJackUMGMitameSoubiState                      State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemID;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ItemName;                                          // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UTexture2D*                             ItemIcon;                                          // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGMitameItemInfo) == 0x000008, "Wrong alignment on FJackUMGMitameItemInfo");
static_assert(sizeof(FJackUMGMitameItemInfo) == 0x000030, "Wrong size on FJackUMGMitameItemInfo");
static_assert(offsetof(FJackUMGMitameItemInfo, State) == 0x000000, "Member 'FJackUMGMitameItemInfo::State' has a wrong offset!");
static_assert(offsetof(FJackUMGMitameItemInfo, ItemID) == 0x000008, "Member 'FJackUMGMitameItemInfo::ItemID' has a wrong offset!");
static_assert(offsetof(FJackUMGMitameItemInfo, ItemName) == 0x000010, "Member 'FJackUMGMitameItemInfo::ItemName' has a wrong offset!");
static_assert(offsetof(FJackUMGMitameItemInfo, ItemIcon) == 0x000028, "Member 'FJackUMGMitameItemInfo::ItemIcon' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_Pose_ChestHairA1
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Pose_ChestHairA1 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Pose_ChestHairA1) == 0x000008, "Wrong alignment on FJackLDT_Pose_ChestHairA1");
static_assert(sizeof(FJackLDT_Pose_ChestHairA1) == 0x000010, "Wrong size on FJackLDT_Pose_ChestHairA1");

// ScriptStruct JackGame.JackLDT_Upper
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Upper final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Upper) == 0x000008, "Wrong alignment on FJackLDT_Upper");
static_assert(sizeof(FJackLDT_Upper) == 0x000010, "Wrong size on FJackLDT_Upper");

// ScriptStruct JackGame.JackLDT_Other_low
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Other_low final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Other_low) == 0x000008, "Wrong alignment on FJackLDT_Other_low");
static_assert(sizeof(FJackLDT_Other_low) == 0x000010, "Wrong size on FJackLDT_Other_low");

// ScriptStruct JackGame.JackLDT_Mantle
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Mantle final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Mantle) == 0x000008, "Wrong alignment on FJackLDT_Mantle");
static_assert(sizeof(FJackLDT_Mantle) == 0x000010, "Wrong size on FJackLDT_Mantle");

// ScriptStruct JackGame.JackLDT_Hair
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Hair final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Hair) == 0x000008, "Wrong alignment on FJackLDT_Hair");
static_assert(sizeof(FJackLDT_Hair) == 0x000010, "Wrong size on FJackLDT_Hair");

// ScriptStruct JackGame.JackLDT_BodyExtra
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_BodyExtra final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_BodyExtra) == 0x000008, "Wrong alignment on FJackLDT_BodyExtra");
static_assert(sizeof(FJackLDT_BodyExtra) == 0x000010, "Wrong size on FJackLDT_BodyExtra");

// ScriptStruct JackGame.JackLDT_WeaponHiddenCoordinate
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_WeaponHiddenCoordinate final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_WeaponHiddenCoordinate) == 0x000008, "Wrong alignment on FJackLDT_WeaponHiddenCoordinate");
static_assert(sizeof(FJackLDT_WeaponHiddenCoordinate) == 0x000010, "Wrong size on FJackLDT_WeaponHiddenCoordinate");

// ScriptStruct JackGame.JackLDT_MaterialCoordinateType
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_MaterialCoordinateType final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_MaterialCoordinateType) == 0x000008, "Wrong alignment on FJackLDT_MaterialCoordinateType");
static_assert(sizeof(FJackLDT_MaterialCoordinateType) == 0x000010, "Wrong size on FJackLDT_MaterialCoordinateType");

// ScriptStruct JackGame.JackLDT_FacialPreset
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_FacialPreset final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_FacialPreset) == 0x000008, "Wrong alignment on FJackLDT_FacialPreset");
static_assert(sizeof(FJackLDT_FacialPreset) == 0x000010, "Wrong size on FJackLDT_FacialPreset");

// ScriptStruct JackGame.JackUMGVisitMonsterCountList
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackUMGVisitMonsterCountList final
{
public:
	class FName                                   NameId;                                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountAll;                                          // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountKill;                                         // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortNumber;                                        // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGVisitMonsterCountList) == 0x000008, "Wrong alignment on FJackUMGVisitMonsterCountList");
static_assert(sizeof(FJackUMGVisitMonsterCountList) == 0x000018, "Wrong size on FJackUMGVisitMonsterCountList");
static_assert(offsetof(FJackUMGVisitMonsterCountList, NameId) == 0x000000, "Member 'FJackUMGVisitMonsterCountList::NameId' has a wrong offset!");
static_assert(offsetof(FJackUMGVisitMonsterCountList, CountAll) == 0x000008, "Member 'FJackUMGVisitMonsterCountList::CountAll' has a wrong offset!");
static_assert(offsetof(FJackUMGVisitMonsterCountList, CountKill) == 0x00000C, "Member 'FJackUMGVisitMonsterCountList::CountKill' has a wrong offset!");
static_assert(offsetof(FJackUMGVisitMonsterCountList, SortNumber) == 0x000010, "Member 'FJackUMGVisitMonsterCountList::SortNumber' has a wrong offset!");

// ScriptStruct JackGame.JackLDT_EquipmentCoordinate
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_EquipmentCoordinate final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_EquipmentCoordinate) == 0x000008, "Wrong alignment on FJackLDT_EquipmentCoordinate");
static_assert(sizeof(FJackLDT_EquipmentCoordinate) == 0x000010, "Wrong size on FJackLDT_EquipmentCoordinate");

// ScriptStruct JackGame.JackLDT_DamageMaterialAnimation
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_DamageMaterialAnimation final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_DamageMaterialAnimation) == 0x000008, "Wrong alignment on FJackLDT_DamageMaterialAnimation");
static_assert(sizeof(FJackLDT_DamageMaterialAnimation) == 0x000010, "Wrong size on FJackLDT_DamageMaterialAnimation");

// ScriptStruct JackGame.JackLDT_CoordinateLookAtBoneSettingsToBattle
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_CoordinateLookAtBoneSettingsToBattle final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_CoordinateLookAtBoneSettingsToBattle) == 0x000008, "Wrong alignment on FJackLDT_CoordinateLookAtBoneSettingsToBattle");
static_assert(sizeof(FJackLDT_CoordinateLookAtBoneSettingsToBattle) == 0x000010, "Wrong size on FJackLDT_CoordinateLookAtBoneSettingsToBattle");

// ScriptStruct JackGame.JackLDT_CharacterMaterialUpdater
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_CharacterMaterialUpdater final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_CharacterMaterialUpdater) == 0x000008, "Wrong alignment on FJackLDT_CharacterMaterialUpdater");
static_assert(sizeof(FJackLDT_CharacterMaterialUpdater) == 0x000010, "Wrong size on FJackLDT_CharacterMaterialUpdater");

// ScriptStruct JackGame.JackLDT_CharacterLODBounds
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_CharacterLODBounds final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_CharacterLODBounds) == 0x000008, "Wrong alignment on FJackLDT_CharacterLODBounds");
static_assert(sizeof(FJackLDT_CharacterLODBounds) == 0x000010, "Wrong size on FJackLDT_CharacterLODBounds");

// ScriptStruct JackGame.JackLDT_AttachedProps_P003
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AttachedProps_P003 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AttachedProps_P003) == 0x000008, "Wrong alignment on FJackLDT_AttachedProps_P003");
static_assert(sizeof(FJackLDT_AttachedProps_P003) == 0x000010, "Wrong size on FJackLDT_AttachedProps_P003");

// ScriptStruct JackGame.JackLDT_AttachedProps_P001
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_AttachedProps_P001 final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_AttachedProps_P001) == 0x000008, "Wrong alignment on FJackLDT_AttachedProps_P001");
static_assert(sizeof(FJackLDT_AttachedProps_P001) == 0x000010, "Wrong size on FJackLDT_AttachedProps_P001");

// ScriptStruct JackGame.JackLDT_BattleHazukasiiNoroiText
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_BattleHazukasiiNoroiText final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_BattleHazukasiiNoroiText) == 0x000008, "Wrong alignment on FJackLDT_BattleHazukasiiNoroiText");
static_assert(sizeof(FJackLDT_BattleHazukasiiNoroiText) == 0x000010, "Wrong size on FJackLDT_BattleHazukasiiNoroiText");

// ScriptStruct JackGame.JackLDT_BattleFukidasiText
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_BattleFukidasiText final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_BattleFukidasiText) == 0x000008, "Wrong alignment on FJackLDT_BattleFukidasiText");
static_assert(sizeof(FJackLDT_BattleFukidasiText) == 0x000010, "Wrong size on FJackLDT_BattleFukidasiText");

// ScriptStruct JackGame.JackLDT_ActionTargetIcon
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ActionTargetIcon final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ActionTargetIcon) == 0x000008, "Wrong alignment on FJackLDT_ActionTargetIcon");
static_assert(sizeof(FJackLDT_ActionTargetIcon) == 0x000010, "Wrong size on FJackLDT_ActionTargetIcon");

// ScriptStruct JackGame.JackLDT_ActionOddEffect
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ActionOddEffect final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ActionOddEffect) == 0x000008, "Wrong alignment on FJackLDT_ActionOddEffect");
static_assert(sizeof(FJackLDT_ActionOddEffect) == 0x000010, "Wrong size on FJackLDT_ActionOddEffect");

// ScriptStruct JackGame.JackLDT_ActionNakamaYobi
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_ActionNakamaYobi final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_ActionNakamaYobi) == 0x000008, "Wrong alignment on FJackLDT_ActionNakamaYobi");
static_assert(sizeof(FJackLDT_ActionNakamaYobi) == 0x000010, "Wrong size on FJackLDT_ActionNakamaYobi");

// ScriptStruct JackGame.JackLDT_Achievement
// 0x0000 (0x0010 - 0x0010)
struct FJackLDT_Achievement final : public FListDataTableHandle
{
};
static_assert(alignof(FJackLDT_Achievement) == 0x000008, "Wrong alignment on FJackLDT_Achievement");
static_assert(sizeof(FJackLDT_Achievement) == 0x000010, "Wrong size on FJackLDT_Achievement");

// ScriptStruct JackGame.JackLookAtTrackInfo
// 0x000C (0x000C - 0x0000)
struct FJackLookAtTrackInfo final
{
public:
	float                                         IntrpSpeed;                                        // 0x0000(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntrpSec;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideInterpCurve;                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   InterpCurve;                                       // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeckLookAt;                                       // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackLookAtTrackInfo) == 0x000004, "Wrong alignment on FJackLookAtTrackInfo");
static_assert(sizeof(FJackLookAtTrackInfo) == 0x00000C, "Wrong size on FJackLookAtTrackInfo");
static_assert(offsetof(FJackLookAtTrackInfo, IntrpSpeed) == 0x000000, "Member 'FJackLookAtTrackInfo::IntrpSpeed' has a wrong offset!");
static_assert(offsetof(FJackLookAtTrackInfo, IntrpSec) == 0x000004, "Member 'FJackLookAtTrackInfo::IntrpSec' has a wrong offset!");
static_assert(offsetof(FJackLookAtTrackInfo, bOverrideInterpCurve) == 0x000008, "Member 'FJackLookAtTrackInfo::bOverrideInterpCurve' has a wrong offset!");
static_assert(offsetof(FJackLookAtTrackInfo, InterpCurve) == 0x000009, "Member 'FJackLookAtTrackInfo::InterpCurve' has a wrong offset!");
static_assert(offsetof(FJackLookAtTrackInfo, bNeckLookAt) == 0x00000A, "Member 'FJackLookAtTrackInfo::bNeckLookAt' has a wrong offset!");

// ScriptStruct JackGame.JackMaterialCoordinateInfo
// 0x0028 (0x0028 - 0x0000)
struct FJackMaterialCoordinateInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             OriginalMaterials;                                 // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UMaterialInterface*>             OverrideMaterials;                                 // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FJackMaterialCoordinateInfo) == 0x000008, "Wrong alignment on FJackMaterialCoordinateInfo");
static_assert(sizeof(FJackMaterialCoordinateInfo) == 0x000028, "Wrong size on FJackMaterialCoordinateInfo");
static_assert(offsetof(FJackMaterialCoordinateInfo, OriginalMaterials) == 0x000008, "Member 'FJackMaterialCoordinateInfo::OriginalMaterials' has a wrong offset!");
static_assert(offsetof(FJackMaterialCoordinateInfo, OverrideMaterials) == 0x000018, "Member 'FJackMaterialCoordinateInfo::OverrideMaterials' has a wrong offset!");

// ScriptStruct JackGame.JackMedal_ExchageItem
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackMedal_ExchageItem final
{
public:
	class FName                                   ExchangeId;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExchangeNumber;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExchange;                                         // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSoldOut;                                          // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMedal_ExchageItem) == 0x000008, "Wrong alignment on FJackMedal_ExchageItem");
static_assert(sizeof(FJackMedal_ExchageItem) == 0x000018, "Wrong size on FJackMedal_ExchageItem");
static_assert(offsetof(FJackMedal_ExchageItem, ExchangeId) == 0x000000, "Member 'FJackMedal_ExchageItem::ExchangeId' has a wrong offset!");
static_assert(offsetof(FJackMedal_ExchageItem, ItemID) == 0x000008, "Member 'FJackMedal_ExchageItem::ItemID' has a wrong offset!");
static_assert(offsetof(FJackMedal_ExchageItem, ExchangeNumber) == 0x000010, "Member 'FJackMedal_ExchageItem::ExchangeNumber' has a wrong offset!");
static_assert(offsetof(FJackMedal_ExchageItem, bExchange) == 0x000014, "Member 'FJackMedal_ExchageItem::bExchange' has a wrong offset!");
static_assert(offsetof(FJackMedal_ExchageItem, bSoldOut) == 0x000015, "Member 'FJackMedal_ExchageItem::bSoldOut' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotBarChance
// 0x0001 (0x0001 - 0x0000)
struct FJackMeosiSlotBarChance final
{
public:
	EJackMeosiSlotBarBackColor                    Color;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMeosiSlotBarChance) == 0x000001, "Wrong alignment on FJackMeosiSlotBarChance");
static_assert(sizeof(FJackMeosiSlotBarChance) == 0x000001, "Wrong size on FJackMeosiSlotBarChance");
static_assert(offsetof(FJackMeosiSlotBarChance, Color) == 0x000000, "Member 'FJackMeosiSlotBarChance::Color' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotReelSoundEffectSet
// 0x0018 (0x0018 - 0x0000)
struct FJackMeosiSlotReelSoundEffectSet final
{
public:
	struct FJackMeosiSlotSoundEffect              StartSoundEffect;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FJackMeosiSlotSoundEffect>      StopSoundEffectList;                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMeosiSlotReelSoundEffectSet) == 0x000008, "Wrong alignment on FJackMeosiSlotReelSoundEffectSet");
static_assert(sizeof(FJackMeosiSlotReelSoundEffectSet) == 0x000018, "Wrong size on FJackMeosiSlotReelSoundEffectSet");
static_assert(offsetof(FJackMeosiSlotReelSoundEffectSet, StartSoundEffect) == 0x000000, "Member 'FJackMeosiSlotReelSoundEffectSet::StartSoundEffect' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotReelSoundEffectSet, StopSoundEffectList) == 0x000008, "Member 'FJackMeosiSlotReelSoundEffectSet::StopSoundEffectList' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotPseudoContinuation_Dev
// 0x0002 (0x0002 - 0x0000)
struct FJackMeosiSlotPseudoContinuation_Dev final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotCutinColor                      Color;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMeosiSlotPseudoContinuation_Dev) == 0x000001, "Wrong alignment on FJackMeosiSlotPseudoContinuation_Dev");
static_assert(sizeof(FJackMeosiSlotPseudoContinuation_Dev) == 0x000002, "Wrong size on FJackMeosiSlotPseudoContinuation_Dev");
static_assert(offsetof(FJackMeosiSlotPseudoContinuation_Dev, bIsValid) == 0x000000, "Member 'FJackMeosiSlotPseudoContinuation_Dev::bIsValid' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotPseudoContinuation_Dev, Color) == 0x000001, "Member 'FJackMeosiSlotPseudoContinuation_Dev::Color' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotPseudoContinuation
// 0x0001 (0x0001 - 0x0000)
struct FJackMeosiSlotPseudoContinuation final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMeosiSlotPseudoContinuation) == 0x000001, "Wrong alignment on FJackMeosiSlotPseudoContinuation");
static_assert(sizeof(FJackMeosiSlotPseudoContinuation) == 0x000001, "Wrong size on FJackMeosiSlotPseudoContinuation");
static_assert(offsetof(FJackMeosiSlotPseudoContinuation, bIsValid) == 0x000000, "Member 'FJackMeosiSlotPseudoContinuation::bIsValid' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotChanceCutinDefault
// 0x0001 (0x0001 - 0x0000)
struct FJackMeosiSlotChanceCutinDefault final
{
public:
	EJackMeosiSlotCutinColor                      Color;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMeosiSlotChanceCutinDefault) == 0x000001, "Wrong alignment on FJackMeosiSlotChanceCutinDefault");
static_assert(sizeof(FJackMeosiSlotChanceCutinDefault) == 0x000001, "Wrong size on FJackMeosiSlotChanceCutinDefault");
static_assert(offsetof(FJackMeosiSlotChanceCutinDefault, Color) == 0x000000, "Member 'FJackMeosiSlotChanceCutinDefault::Color' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotGameResult
// 0x0020 (0x0020 - 0x0000)
struct FJackMeosiSlotGameResult final
{
public:
	TArray<struct FJackMeosiSlotWinningInfo>      WinningInfos;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bWasExactlyPressSucceeded;                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasBonusWinning;                                  // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasSpecialBonusRising;                            // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumGottenCoin;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasSpecialBgRising;                               // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMeosiSlotGameResult) == 0x000008, "Wrong alignment on FJackMeosiSlotGameResult");
static_assert(sizeof(FJackMeosiSlotGameResult) == 0x000020, "Wrong size on FJackMeosiSlotGameResult");
static_assert(offsetof(FJackMeosiSlotGameResult, WinningInfos) == 0x000000, "Member 'FJackMeosiSlotGameResult::WinningInfos' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotGameResult, bWasExactlyPressSucceeded) == 0x000010, "Member 'FJackMeosiSlotGameResult::bWasExactlyPressSucceeded' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotGameResult, bWasBonusWinning) == 0x000011, "Member 'FJackMeosiSlotGameResult::bWasBonusWinning' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotGameResult, bWasSpecialBonusRising) == 0x000012, "Member 'FJackMeosiSlotGameResult::bWasSpecialBonusRising' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotGameResult, NumGottenCoin) == 0x000014, "Member 'FJackMeosiSlotGameResult::NumGottenCoin' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotGameResult, bWasSpecialBgRising) == 0x000018, "Member 'FJackMeosiSlotGameResult::bWasSpecialBgRising' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotItem
// 0x0020 (0x0020 - 0x0000)
struct FJackMeosiSlotItem final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Texture;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotBalloon                         BalloonType;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotItemSpec                        ItemID;                                            // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMeosiSlotItem) == 0x000008, "Wrong alignment on FJackMeosiSlotItem");
static_assert(sizeof(FJackMeosiSlotItem) == 0x000020, "Wrong size on FJackMeosiSlotItem");
static_assert(offsetof(FJackMeosiSlotItem, Name) == 0x000000, "Member 'FJackMeosiSlotItem::Name' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotItem, Texture) == 0x000010, "Member 'FJackMeosiSlotItem::Texture' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotItem, BalloonType) == 0x000018, "Member 'FJackMeosiSlotItem::BalloonType' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotItem, ItemID) == 0x000019, "Member 'FJackMeosiSlotItem::ItemID' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotTreasureBox
// 0x0030 (0x0030 - 0x0000)
struct FJackMeosiSlotTreasureBox final
{
public:
	EJackMeosiSlotTreasureBox                     BoxType;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMeosiSlotItem                            ItemType;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemCount;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJackMeosiSlotItem                     ItemParam;                                         // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EJackMeosiSlotScenarioTBoxOpenTiming          OpenTiming;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMeosiSlotTreasureBox) == 0x000008, "Wrong alignment on FJackMeosiSlotTreasureBox");
static_assert(sizeof(FJackMeosiSlotTreasureBox) == 0x000030, "Wrong size on FJackMeosiSlotTreasureBox");
static_assert(offsetof(FJackMeosiSlotTreasureBox, BoxType) == 0x000000, "Member 'FJackMeosiSlotTreasureBox::BoxType' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotTreasureBox, ItemType) == 0x000001, "Member 'FJackMeosiSlotTreasureBox::ItemType' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotTreasureBox, ItemCount) == 0x000004, "Member 'FJackMeosiSlotTreasureBox::ItemCount' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotTreasureBox, ItemParam) == 0x000008, "Member 'FJackMeosiSlotTreasureBox::ItemParam' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotTreasureBox, OpenTiming) == 0x000028, "Member 'FJackMeosiSlotTreasureBox::OpenTiming' has a wrong offset!");

// ScriptStruct JackGame.JackDecalData
// 0x0038 (0x0038 - 0x0000)
struct FJackDecalData final
{
public:
	class UMaterialInterface*                     DecalMaterial;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecalBaseSize;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecalRandomRangeSize;                              // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecalMaxHeight;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeSpan;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTextureRotateRandomDegree;                      // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTexturePositionRandom;                          // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveLinearColor*                      ColorCurve;                                        // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyCurveAlphaOnly;                              // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeOutTime;                                       // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStaticMeshDecal;                                  // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDecalData) == 0x000008, "Wrong alignment on FJackDecalData");
static_assert(sizeof(FJackDecalData) == 0x000038, "Wrong size on FJackDecalData");
static_assert(offsetof(FJackDecalData, DecalMaterial) == 0x000000, "Member 'FJackDecalData::DecalMaterial' has a wrong offset!");
static_assert(offsetof(FJackDecalData, DecalBaseSize) == 0x000008, "Member 'FJackDecalData::DecalBaseSize' has a wrong offset!");
static_assert(offsetof(FJackDecalData, DecalRandomRangeSize) == 0x00000C, "Member 'FJackDecalData::DecalRandomRangeSize' has a wrong offset!");
static_assert(offsetof(FJackDecalData, DecalMaxHeight) == 0x000010, "Member 'FJackDecalData::DecalMaxHeight' has a wrong offset!");
static_assert(offsetof(FJackDecalData, LifeSpan) == 0x000014, "Member 'FJackDecalData::LifeSpan' has a wrong offset!");
static_assert(offsetof(FJackDecalData, MaxTextureRotateRandomDegree) == 0x000018, "Member 'FJackDecalData::MaxTextureRotateRandomDegree' has a wrong offset!");
static_assert(offsetof(FJackDecalData, MaxTexturePositionRandom) == 0x00001C, "Member 'FJackDecalData::MaxTexturePositionRandom' has a wrong offset!");
static_assert(offsetof(FJackDecalData, ColorCurve) == 0x000020, "Member 'FJackDecalData::ColorCurve' has a wrong offset!");
static_assert(offsetof(FJackDecalData, bApplyCurveAlphaOnly) == 0x000028, "Member 'FJackDecalData::bApplyCurveAlphaOnly' has a wrong offset!");
static_assert(offsetof(FJackDecalData, FadeOutTime) == 0x00002C, "Member 'FJackDecalData::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FJackDecalData, bStaticMeshDecal) == 0x000030, "Member 'FJackDecalData::bStaticMeshDecal' has a wrong offset!");

// ScriptStruct JackGame.JackCollideEffects
// 0x0038 (0x0078 - 0x0040)
struct FJackCollideEffects : public FJackEffects
{
public:
	struct FJackDecalData                         Decal;                                             // 0x0040(0x0038)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackCollideEffects) == 0x000008, "Wrong alignment on FJackCollideEffects");
static_assert(sizeof(FJackCollideEffects) == 0x000078, "Wrong size on FJackCollideEffects");
static_assert(offsetof(FJackCollideEffects, Decal) == 0x000040, "Member 'FJackCollideEffects::Decal' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotMonsterTexture
// 0x0018 (0x0018 - 0x0000)
struct FJackMeosiSlotMonsterTexture final
{
public:
	class UTexture2D*                             PartyTexture;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             EnemyTexture;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             IconTexture;                                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMeosiSlotMonsterTexture) == 0x000008, "Wrong alignment on FJackMeosiSlotMonsterTexture");
static_assert(sizeof(FJackMeosiSlotMonsterTexture) == 0x000018, "Wrong size on FJackMeosiSlotMonsterTexture");
static_assert(offsetof(FJackMeosiSlotMonsterTexture, PartyTexture) == 0x000000, "Member 'FJackMeosiSlotMonsterTexture::PartyTexture' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotMonsterTexture, EnemyTexture) == 0x000008, "Member 'FJackMeosiSlotMonsterTexture::EnemyTexture' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotMonsterTexture, IconTexture) == 0x000010, "Member 'FJackMeosiSlotMonsterTexture::IconTexture' has a wrong offset!");

// ScriptStruct JackGame.JackTitleItem
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FJackTitleItem final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackTitleItem) == 0x000008, "Wrong alignment on FJackTitleItem");
static_assert(sizeof(FJackTitleItem) == 0x000060, "Wrong size on FJackTitleItem");

// ScriptStruct JackGame.JackMeosiSlotDataRoboHighlight
// 0x0003 (0x0003 - 0x0000)
struct FJackMeosiSlotDataRoboHighlight final
{
public:
	bool                                          bIsBonus;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSuperBonus;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTotalBonus;                                     // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMeosiSlotDataRoboHighlight) == 0x000001, "Wrong alignment on FJackMeosiSlotDataRoboHighlight");
static_assert(sizeof(FJackMeosiSlotDataRoboHighlight) == 0x000003, "Wrong size on FJackMeosiSlotDataRoboHighlight");
static_assert(offsetof(FJackMeosiSlotDataRoboHighlight, bIsBonus) == 0x000000, "Member 'FJackMeosiSlotDataRoboHighlight::bIsBonus' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotDataRoboHighlight, bIsSuperBonus) == 0x000001, "Member 'FJackMeosiSlotDataRoboHighlight::bIsSuperBonus' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotDataRoboHighlight, bIsTotalBonus) == 0x000002, "Member 'FJackMeosiSlotDataRoboHighlight::bIsTotalBonus' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotSoundBGM
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackMeosiSlotSoundBGM final
{
public:
	bool                                          bIsStockBGM;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BGMID;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMeosiSlotSoundBGM) == 0x000008, "Wrong alignment on FJackMeosiSlotSoundBGM");
static_assert(sizeof(FJackMeosiSlotSoundBGM) == 0x000010, "Wrong size on FJackMeosiSlotSoundBGM");
static_assert(offsetof(FJackMeosiSlotSoundBGM, bIsStockBGM) == 0x000000, "Member 'FJackMeosiSlotSoundBGM::bIsStockBGM' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotSoundBGM, BGMID) == 0x000008, "Member 'FJackMeosiSlotSoundBGM::BGMID' has a wrong offset!");

// ScriptStruct JackGame.JackMeosiSlotVariable
// 0x0078 (0x0078 - 0x0000)
struct FJackMeosiSlotVariable final
{
public:
	struct FJackMeosiSlotVariableReelParam        ReelParam;                                         // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackMeosiSlotVariableStateParam       StateParam;                                        // 0x0010(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMeosiSlotVariable) == 0x000008, "Wrong alignment on FJackMeosiSlotVariable");
static_assert(sizeof(FJackMeosiSlotVariable) == 0x000078, "Wrong size on FJackMeosiSlotVariable");
static_assert(offsetof(FJackMeosiSlotVariable, ReelParam) == 0x000000, "Member 'FJackMeosiSlotVariable::ReelParam' has a wrong offset!");
static_assert(offsetof(FJackMeosiSlotVariable, StateParam) == 0x000010, "Member 'FJackMeosiSlotVariable::StateParam' has a wrong offset!");

// ScriptStruct JackGame.JackMiniGameJackPotLottey
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FJackMiniGameJackPotLottey final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMiniGameJackPotLottey) == 0x000004, "Wrong alignment on FJackMiniGameJackPotLottey");
static_assert(sizeof(FJackMiniGameJackPotLottey) == 0x000008, "Wrong size on FJackMiniGameJackPotLottey");

// ScriptStruct JackGame.JackDebugCommandParameter
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackDebugCommandParameter final
{
public:
	bool                                          bDispatch;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackDebugCommandForMonster                   CommandType;                                       // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ArgMotangeKey;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlow;                                             // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttackRepeled;                                    // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEncountLeader;                                    // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDebugCommandParameter) == 0x000008, "Wrong alignment on FJackDebugCommandParameter");
static_assert(sizeof(FJackDebugCommandParameter) == 0x000018, "Wrong size on FJackDebugCommandParameter");
static_assert(offsetof(FJackDebugCommandParameter, bDispatch) == 0x000000, "Member 'FJackDebugCommandParameter::bDispatch' has a wrong offset!");
static_assert(offsetof(FJackDebugCommandParameter, CommandType) == 0x000001, "Member 'FJackDebugCommandParameter::CommandType' has a wrong offset!");
static_assert(offsetof(FJackDebugCommandParameter, ArgMotangeKey) == 0x000008, "Member 'FJackDebugCommandParameter::ArgMotangeKey' has a wrong offset!");
static_assert(offsetof(FJackDebugCommandParameter, bBlow) == 0x000010, "Member 'FJackDebugCommandParameter::bBlow' has a wrong offset!");
static_assert(offsetof(FJackDebugCommandParameter, bAttackRepeled) == 0x000011, "Member 'FJackDebugCommandParameter::bAttackRepeled' has a wrong offset!");
static_assert(offsetof(FJackDebugCommandParameter, bEncountLeader) == 0x000012, "Member 'FJackDebugCommandParameter::bEncountLeader' has a wrong offset!");

// ScriptStruct JackGame.JackMusicMiscControlTrackKey
// 0x000C (0x000C - 0x0000)
struct FJackMusicMiscControlTrackKey final
{
public:
	float                                         TimeVar;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecResumeBGM;                                    // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ResumeBGMFadeInTime;                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMusicMiscControlTrackKey) == 0x000004, "Wrong alignment on FJackMusicMiscControlTrackKey");
static_assert(sizeof(FJackMusicMiscControlTrackKey) == 0x00000C, "Wrong size on FJackMusicMiscControlTrackKey");
static_assert(offsetof(FJackMusicMiscControlTrackKey, TimeVar) == 0x000000, "Member 'FJackMusicMiscControlTrackKey::TimeVar' has a wrong offset!");
static_assert(offsetof(FJackMusicMiscControlTrackKey, bExecResumeBGM) == 0x000004, "Member 'FJackMusicMiscControlTrackKey::bExecResumeBGM' has a wrong offset!");
static_assert(offsetof(FJackMusicMiscControlTrackKey, ResumeBGMFadeInTime) == 0x000008, "Member 'FJackMusicMiscControlTrackKey::ResumeBGMFadeInTime' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableNativizationAssetPath
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableNativizationAssetPath final : public FTableRowBase
{
public:
	class FName                                   NativizationAsset;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableNativizationAssetPath) == 0x000008, "Wrong alignment on FJackDataTableNativizationAssetPath");
static_assert(sizeof(FJackDataTableNativizationAssetPath) == 0x000010, "Wrong size on FJackDataTableNativizationAssetPath");
static_assert(offsetof(FJackDataTableNativizationAssetPath, NativizationAsset) == 0x000008, "Member 'FJackDataTableNativizationAssetPath::NativizationAsset' has a wrong offset!");

// ScriptStruct JackGame.JackDataTableNativizationAsset
// 0x0008 (0x0010 - 0x0008)
struct FJackDataTableNativizationAsset final : public FTableRowBase
{
public:
	class UObject*                                NativizationAsset;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackDataTableNativizationAsset) == 0x000008, "Wrong alignment on FJackDataTableNativizationAsset");
static_assert(sizeof(FJackDataTableNativizationAsset) == 0x000010, "Wrong size on FJackDataTableNativizationAsset");
static_assert(offsetof(FJackDataTableNativizationAsset, NativizationAsset) == 0x000008, "Member 'FJackDataTableNativizationAsset::NativizationAsset' has a wrong offset!");

// ScriptStruct JackGame.JackObjectContainer
// 0x0080 (0x0080 - 0x0000)
struct FJackObjectContainer final
{
public:
	TArray<struct FSoftObjectPath>                Assets;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FSoftClassPath>                 Classes;                                           // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x60];                                      // 0x0020(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackObjectContainer) == 0x000008, "Wrong alignment on FJackObjectContainer");
static_assert(sizeof(FJackObjectContainer) == 0x000080, "Wrong size on FJackObjectContainer");
static_assert(offsetof(FJackObjectContainer, Assets) == 0x000000, "Member 'FJackObjectContainer::Assets' has a wrong offset!");
static_assert(offsetof(FJackObjectContainer, Classes) == 0x000010, "Member 'FJackObjectContainer::Classes' has a wrong offset!");

// ScriptStruct JackGame.JackOddEffect_ClearResult
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackOddEffect_ClearResult final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackOddEffect_ClearResult) == 0x000008, "Wrong alignment on FJackOddEffect_ClearResult");
static_assert(sizeof(FJackOddEffect_ClearResult) == 0x000018, "Wrong size on FJackOddEffect_ClearResult");

// ScriptStruct JackGame.JackOddEffect_SetResult
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FJackOddEffect_SetResult final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackOddEffect_SetResult) == 0x000008, "Wrong alignment on FJackOddEffect_SetResult");
static_assert(sizeof(FJackOddEffect_SetResult) == 0x000028, "Wrong size on FJackOddEffect_SetResult");

// ScriptStruct JackGame.JackPauseTrackKey
// 0x0004 (0x0004 - 0x0000)
struct FJackPauseTrackKey final
{
public:
	float                                         TimeVar;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackPauseTrackKey) == 0x000004, "Wrong alignment on FJackPauseTrackKey");
static_assert(sizeof(FJackPauseTrackKey) == 0x000004, "Wrong size on FJackPauseTrackKey");
static_assert(offsetof(FJackPauseTrackKey, TimeVar) == 0x000000, "Member 'FJackPauseTrackKey::TimeVar' has a wrong offset!");

// ScriptStruct JackGame.JackPresetMaterialKey
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackPresetMaterialKey final
{
public:
	float                                         TimeVar;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MaterialName;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackPresetMaterialKey) == 0x000008, "Wrong alignment on FJackPresetMaterialKey");
static_assert(sizeof(FJackPresetMaterialKey) == 0x000010, "Wrong size on FJackPresetMaterialKey");
static_assert(offsetof(FJackPresetMaterialKey, TimeVar) == 0x000000, "Member 'FJackPresetMaterialKey::TimeVar' has a wrong offset!");
static_assert(offsetof(FJackPresetMaterialKey, MaterialName) == 0x000008, "Member 'FJackPresetMaterialKey::MaterialName' has a wrong offset!");

// ScriptStruct JackGame.JackRouletteSegmentData
// 0x001C (0x001C - 0x0000)
struct alignas(0x04) FJackRouletteSegmentData final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackRouletteSegmentData) == 0x000004, "Wrong alignment on FJackRouletteSegmentData");
static_assert(sizeof(FJackRouletteSegmentData) == 0x00001C, "Wrong size on FJackRouletteSegmentData");

// ScriptStruct JackGame.JackRouletteGameInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackRouletteGameInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackRouletteGameInfo) == 0x000008, "Wrong alignment on FJackRouletteGameInfo");
static_assert(sizeof(FJackRouletteGameInfo) == 0x000018, "Wrong size on FJackRouletteGameInfo");

// ScriptStruct JackGame.JackRouletteWheelInfo
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FJackRouletteWheelInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackRouletteWheelInfo) == 0x000004, "Wrong alignment on FJackRouletteWheelInfo");
static_assert(sizeof(FJackRouletteWheelInfo) == 0x000008, "Wrong size on FJackRouletteWheelInfo");

// ScriptStruct JackGame.JackTalkParameter
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FJackTalkParameter final
{
public:
	TWeakObjectPtr<class UAnimMontage>            BridgeAnimMontage;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UAnimMontage>            StartAnimMontage;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UAnimMontage>            EndAnimMontage;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UAnimMontage>            EndWaitAnimMontage;                                // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackNPCTalkGazeMode                          FrontGazeMode;                                     // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackNPCTalkGazeMode                          BehindGazeMode;                                    // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FrontMessageName;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BehindMessageName;                                 // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartEventName;                                    // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SequenceEventName;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndEventName;                                      // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayAnimation;                                    // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCommonTalkCamera;                              // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSetGamePlayerCondition;                     // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableTalkSoonAfterTalk;                         // 0x0053(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackTalkParameter) == 0x000008, "Wrong alignment on FJackTalkParameter");
static_assert(sizeof(FJackTalkParameter) == 0x000058, "Wrong size on FJackTalkParameter");
static_assert(offsetof(FJackTalkParameter, BridgeAnimMontage) == 0x000000, "Member 'FJackTalkParameter::BridgeAnimMontage' has a wrong offset!");
static_assert(offsetof(FJackTalkParameter, StartAnimMontage) == 0x000008, "Member 'FJackTalkParameter::StartAnimMontage' has a wrong offset!");
static_assert(offsetof(FJackTalkParameter, EndAnimMontage) == 0x000010, "Member 'FJackTalkParameter::EndAnimMontage' has a wrong offset!");
static_assert(offsetof(FJackTalkParameter, EndWaitAnimMontage) == 0x000018, "Member 'FJackTalkParameter::EndWaitAnimMontage' has a wrong offset!");
static_assert(offsetof(FJackTalkParameter, FrontGazeMode) == 0x000020, "Member 'FJackTalkParameter::FrontGazeMode' has a wrong offset!");
static_assert(offsetof(FJackTalkParameter, BehindGazeMode) == 0x000021, "Member 'FJackTalkParameter::BehindGazeMode' has a wrong offset!");
static_assert(offsetof(FJackTalkParameter, FrontMessageName) == 0x000028, "Member 'FJackTalkParameter::FrontMessageName' has a wrong offset!");
static_assert(offsetof(FJackTalkParameter, BehindMessageName) == 0x000030, "Member 'FJackTalkParameter::BehindMessageName' has a wrong offset!");
static_assert(offsetof(FJackTalkParameter, StartEventName) == 0x000038, "Member 'FJackTalkParameter::StartEventName' has a wrong offset!");
static_assert(offsetof(FJackTalkParameter, SequenceEventName) == 0x000040, "Member 'FJackTalkParameter::SequenceEventName' has a wrong offset!");
static_assert(offsetof(FJackTalkParameter, EndEventName) == 0x000048, "Member 'FJackTalkParameter::EndEventName' has a wrong offset!");
static_assert(offsetof(FJackTalkParameter, bPlayAnimation) == 0x000050, "Member 'FJackTalkParameter::bPlayAnimation' has a wrong offset!");
static_assert(offsetof(FJackTalkParameter, bUseCommonTalkCamera) == 0x000051, "Member 'FJackTalkParameter::bUseCommonTalkCamera' has a wrong offset!");
static_assert(offsetof(FJackTalkParameter, bIgnoreSetGamePlayerCondition) == 0x000052, "Member 'FJackTalkParameter::bIgnoreSetGamePlayerCondition' has a wrong offset!");
static_assert(offsetof(FJackTalkParameter, bDisableTalkSoonAfterTalk) == 0x000053, "Member 'FJackTalkParameter::bDisableTalkSoonAfterTalk' has a wrong offset!");

// ScriptStruct JackGame.JackSetLowerFacePoseKeyValue
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FJackSetLowerFacePoseKeyValue final
{
public:
	float                                         TimeVar;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FacialName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendSec;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FaceWeight;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDisableState;                                    // 0x0018(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMatineeFacialReferanceState              FacialState;                                       // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackSetLowerFacePoseKeyValue) == 0x000008, "Wrong alignment on FJackSetLowerFacePoseKeyValue");
static_assert(sizeof(FJackSetLowerFacePoseKeyValue) == 0x000020, "Wrong size on FJackSetLowerFacePoseKeyValue");
static_assert(offsetof(FJackSetLowerFacePoseKeyValue, TimeVar) == 0x000000, "Member 'FJackSetLowerFacePoseKeyValue::TimeVar' has a wrong offset!");
static_assert(offsetof(FJackSetLowerFacePoseKeyValue, FacialName) == 0x000008, "Member 'FJackSetLowerFacePoseKeyValue::FacialName' has a wrong offset!");
static_assert(offsetof(FJackSetLowerFacePoseKeyValue, BlendSec) == 0x000010, "Member 'FJackSetLowerFacePoseKeyValue::BlendSec' has a wrong offset!");
static_assert(offsetof(FJackSetLowerFacePoseKeyValue, FaceWeight) == 0x000014, "Member 'FJackSetLowerFacePoseKeyValue::FaceWeight' has a wrong offset!");
static_assert(offsetof(FJackSetLowerFacePoseKeyValue, IsDisableState) == 0x000018, "Member 'FJackSetLowerFacePoseKeyValue::IsDisableState' has a wrong offset!");
static_assert(offsetof(FJackSetLowerFacePoseKeyValue, FacialState) == 0x000019, "Member 'FJackSetLowerFacePoseKeyValue::FacialState' has a wrong offset!");

// ScriptStruct JackGame.JackMiniGameSlotReelStartInfo
// 0x000C (0x000C - 0x0000)
struct FJackMiniGameSlotReelStartInfo final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StopReelIndex;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FreeRollTime;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackMiniGameSlotReelStartInfo) == 0x000004, "Wrong alignment on FJackMiniGameSlotReelStartInfo");
static_assert(sizeof(FJackMiniGameSlotReelStartInfo) == 0x00000C, "Wrong size on FJackMiniGameSlotReelStartInfo");
static_assert(offsetof(FJackMiniGameSlotReelStartInfo, Delay) == 0x000000, "Member 'FJackMiniGameSlotReelStartInfo::Delay' has a wrong offset!");
static_assert(offsetof(FJackMiniGameSlotReelStartInfo, StopReelIndex) == 0x000004, "Member 'FJackMiniGameSlotReelStartInfo::StopReelIndex' has a wrong offset!");
static_assert(offsetof(FJackMiniGameSlotReelStartInfo, FreeRollTime) == 0x000008, "Member 'FJackMiniGameSlotReelStartInfo::FreeRollTime' has a wrong offset!");

// ScriptStruct JackGame.JackAocItemsResponse
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FJackAocItemsResponse final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackAocItemsResponse) == 0x000008, "Wrong alignment on FJackAocItemsResponse");
static_assert(sizeof(FJackAocItemsResponse) == 0x000040, "Wrong size on FJackAocItemsResponse");

// ScriptStruct JackGame.JackItemTag
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FJackItemTag final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackItemTag) == 0x000008, "Wrong alignment on FJackItemTag");
static_assert(sizeof(FJackItemTag) == 0x000020, "Wrong size on FJackItemTag");

// ScriptStruct JackGame.JackMiniGameData
// 0xBAA8 (0xBAA8 - 0x0000)
struct alignas(0x04) FJackMiniGameData final
{
public:
	uint8                                         Pad_0[0xBAA8];                                     // 0x0000(0xBAA8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMiniGameData) == 0x000004, "Wrong alignment on FJackMiniGameData");
static_assert(sizeof(FJackMiniGameData) == 0x00BAA8, "Wrong size on FJackMiniGameData");

// ScriptStruct JackGame.JackMiniGameFusigiKaziData
// 0x0CA0 (0x0CA0 - 0x0000)
struct alignas(0x04) FJackMiniGameFusigiKaziData final
{
public:
	uint8                                         Pad_0[0xCA0];                                      // 0x0000(0x0CA0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMiniGameFusigiKaziData) == 0x000004, "Wrong alignment on FJackMiniGameFusigiKaziData");
static_assert(sizeof(FJackMiniGameFusigiKaziData) == 0x000CA0, "Wrong size on FJackMiniGameFusigiKaziData");

// ScriptStruct JackGame.JackMiniGameSlotData
// 0x0001 (0x0001 - 0x0000)
struct FJackMiniGameSlotData final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMiniGameSlotData) == 0x000001, "Wrong alignment on FJackMiniGameSlotData");
static_assert(sizeof(FJackMiniGameSlotData) == 0x000001, "Wrong size on FJackMiniGameSlotData");

// ScriptStruct JackGame.JackMiniGamePokerData
// 0x0001 (0x0001 - 0x0000)
struct FJackMiniGamePokerData final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMiniGamePokerData) == 0x000001, "Wrong alignment on FJackMiniGamePokerData");
static_assert(sizeof(FJackMiniGamePokerData) == 0x000001, "Wrong size on FJackMiniGamePokerData");

// ScriptStruct JackGame.JackMiniGameRouletteData
// 0x0001 (0x0001 - 0x0000)
struct FJackMiniGameRouletteData final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMiniGameRouletteData) == 0x000001, "Wrong alignment on FJackMiniGameRouletteData");
static_assert(sizeof(FJackMiniGameRouletteData) == 0x000001, "Wrong size on FJackMiniGameRouletteData");

// ScriptStruct JackGame.JackGraphicsOption
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x04) FJackGraphicsOption final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackGraphicsOption) == 0x000004, "Wrong alignment on FJackGraphicsOption");
static_assert(sizeof(FJackGraphicsOption) == 0x000030, "Wrong size on FJackGraphicsOption");

// ScriptStruct JackGame.JackMapUserData
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackMapUserData final
{
public:
	class FName                                   MapVolumeID;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UserZoomFactor;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMapUserData) == 0x000008, "Wrong alignment on FJackMapUserData");
static_assert(sizeof(FJackMapUserData) == 0x000010, "Wrong size on FJackMapUserData");
static_assert(offsetof(FJackMapUserData, MapVolumeID) == 0x000000, "Member 'FJackMapUserData::MapVolumeID' has a wrong offset!");
static_assert(offsetof(FJackMapUserData, UserZoomFactor) == 0x000008, "Member 'FJackMapUserData::UserZoomFactor' has a wrong offset!");

// ScriptStruct JackGame.JackStreamLevelAction
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackStreamLevelAction final
{
public:
	class FName                                   LevelPackageName;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackLevelStreamingRequest                    LevelStreamingRequest;                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackVisibility                               LevelVisibility;                                   // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LODIndex;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackStreamLevelAction) == 0x000008, "Wrong alignment on FJackStreamLevelAction");
static_assert(sizeof(FJackStreamLevelAction) == 0x000010, "Wrong size on FJackStreamLevelAction");
static_assert(offsetof(FJackStreamLevelAction, LevelPackageName) == 0x000000, "Member 'FJackStreamLevelAction::LevelPackageName' has a wrong offset!");
static_assert(offsetof(FJackStreamLevelAction, LevelStreamingRequest) == 0x000008, "Member 'FJackStreamLevelAction::LevelStreamingRequest' has a wrong offset!");
static_assert(offsetof(FJackStreamLevelAction, LevelVisibility) == 0x000009, "Member 'FJackStreamLevelAction::LevelVisibility' has a wrong offset!");
static_assert(offsetof(FJackStreamLevelAction, LODIndex) == 0x00000C, "Member 'FJackStreamLevelAction::LODIndex' has a wrong offset!");

// ScriptStruct JackGame.JackPartyTalkDescription
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x08) FJackPartyTalkDescription final
{
public:
	bool                                          bFound;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x1];                                        // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bCamp;                                             // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPriority;                                         // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TextID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                CharacterID;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPartyTalkIdleMotion                      IdleMotion;                                        // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackScenarioID                               ScenarioID;                                        // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DataTableKey;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x50];                                      // 0x0020(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackPartyTalkDescription) == 0x000008, "Wrong alignment on FJackPartyTalkDescription");
static_assert(sizeof(FJackPartyTalkDescription) == 0x000070, "Wrong size on FJackPartyTalkDescription");
static_assert(offsetof(FJackPartyTalkDescription, bFound) == 0x000000, "Member 'FJackPartyTalkDescription::bFound' has a wrong offset!");
static_assert(offsetof(FJackPartyTalkDescription, bCamp) == 0x000002, "Member 'FJackPartyTalkDescription::bCamp' has a wrong offset!");
static_assert(offsetof(FJackPartyTalkDescription, bPriority) == 0x000003, "Member 'FJackPartyTalkDescription::bPriority' has a wrong offset!");
static_assert(offsetof(FJackPartyTalkDescription, TextID) == 0x000008, "Member 'FJackPartyTalkDescription::TextID' has a wrong offset!");
static_assert(offsetof(FJackPartyTalkDescription, CharacterID) == 0x000010, "Member 'FJackPartyTalkDescription::CharacterID' has a wrong offset!");
static_assert(offsetof(FJackPartyTalkDescription, IdleMotion) == 0x000011, "Member 'FJackPartyTalkDescription::IdleMotion' has a wrong offset!");
static_assert(offsetof(FJackPartyTalkDescription, ScenarioID) == 0x000012, "Member 'FJackPartyTalkDescription::ScenarioID' has a wrong offset!");
static_assert(offsetof(FJackPartyTalkDescription, DataTableKey) == 0x000018, "Member 'FJackPartyTalkDescription::DataTableKey' has a wrong offset!");

// ScriptStruct JackGame.JackTextTagValue
// 0x0001 (0x0001 - 0x0000)
struct FJackTextTagValue final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackTextTagValue) == 0x000001, "Wrong alignment on FJackTextTagValue");
static_assert(sizeof(FJackTextTagValue) == 0x000001, "Wrong size on FJackTextTagValue");

// ScriptStruct JackGame.JackTargetLocationInfo
// 0x0018 (0x0018 - 0x0000)
struct FJackTargetLocationInfo final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetLocation;                                    // 0x0004(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AJackCharacter>          TargetCharacter;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FJackTargetLocationInfo) == 0x000004, "Wrong alignment on FJackTargetLocationInfo");
static_assert(sizeof(FJackTargetLocationInfo) == 0x000018, "Wrong size on FJackTargetLocationInfo");
static_assert(offsetof(FJackTargetLocationInfo, TargetLocation) == 0x000004, "Member 'FJackTargetLocationInfo::TargetLocation' has a wrong offset!");
static_assert(offsetof(FJackTargetLocationInfo, TargetCharacter) == 0x000010, "Member 'FJackTargetLocationInfo::TargetCharacter' has a wrong offset!");

// ScriptStruct JackGame.JackHitStopPresetInfo
// 0x0002 (0x0002 - 0x0000)
struct FJackHitStopPresetInfo final
{
public:
	EJackHitStopType                              HitStopType_Normal;                                // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackHitStopType                              HitStopType_Critical;                              // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackHitStopPresetInfo) == 0x000001, "Wrong alignment on FJackHitStopPresetInfo");
static_assert(sizeof(FJackHitStopPresetInfo) == 0x000002, "Wrong size on FJackHitStopPresetInfo");
static_assert(offsetof(FJackHitStopPresetInfo, HitStopType_Normal) == 0x000000, "Member 'FJackHitStopPresetInfo::HitStopType_Normal' has a wrong offset!");
static_assert(offsetof(FJackHitStopPresetInfo, HitStopType_Critical) == 0x000001, "Member 'FJackHitStopPresetInfo::HitStopType_Critical' has a wrong offset!");

// ScriptStruct JackGame.JackCharacterDamageAttributeEffectContainer
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackCharacterDamageAttributeEffectContainer final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackCharacterDamageAttributeEffectContainer) == 0x000008, "Wrong alignment on FJackCharacterDamageAttributeEffectContainer");
static_assert(sizeof(FJackCharacterDamageAttributeEffectContainer) == 0x000010, "Wrong size on FJackCharacterDamageAttributeEffectContainer");

// ScriptStruct JackGame.JackExtraCollideEffects
// 0x0040 (0x00B8 - 0x0078)
struct FJackExtraCollideEffects final : public FJackCollideEffects
{
public:
	struct FJackEffects                           ExtraEffects;                                      // 0x0078(0x0040)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackExtraCollideEffects) == 0x000008, "Wrong alignment on FJackExtraCollideEffects");
static_assert(sizeof(FJackExtraCollideEffects) == 0x0000B8, "Wrong size on FJackExtraCollideEffects");
static_assert(offsetof(FJackExtraCollideEffects, ExtraEffects) == 0x000078, "Member 'FJackExtraCollideEffects::ExtraEffects' has a wrong offset!");

// ScriptStruct JackGame.JackTextureRenderTargetDict
// 0x0010 (0x0010 - 0x0000)
struct FJackTextureRenderTargetDict final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget*                   RenderTarget;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackTextureRenderTargetDict) == 0x000008, "Wrong alignment on FJackTextureRenderTargetDict");
static_assert(sizeof(FJackTextureRenderTargetDict) == 0x000010, "Wrong size on FJackTextureRenderTargetDict");
static_assert(offsetof(FJackTextureRenderTargetDict, Name) == 0x000000, "Member 'FJackTextureRenderTargetDict::Name' has a wrong offset!");
static_assert(offsetof(FJackTextureRenderTargetDict, RenderTarget) == 0x000008, "Member 'FJackTextureRenderTargetDict::RenderTarget' has a wrong offset!");

// ScriptStruct JackGame.JackNameTagDict
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackNameTagDict final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Value;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackNameTagDict) == 0x000008, "Wrong alignment on FJackNameTagDict");
static_assert(sizeof(FJackNameTagDict) == 0x000010, "Wrong size on FJackNameTagDict");
static_assert(offsetof(FJackNameTagDict, Name) == 0x000000, "Member 'FJackNameTagDict::Name' has a wrong offset!");
static_assert(offsetof(FJackNameTagDict, Value) == 0x000008, "Member 'FJackNameTagDict::Value' has a wrong offset!");

// ScriptStruct JackGame.JackDebugSetting
// 0x000B (0x000B - 0x0000)
struct FJackDebugSetting final
{
public:
	uint8                                         Pad_0[0xB];                                        // 0x0000(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDebugSetting) == 0x000001, "Wrong alignment on FJackDebugSetting");
static_assert(sizeof(FJackDebugSetting) == 0x00000B, "Wrong size on FJackDebugSetting");

// ScriptStruct JackGame.JackDebugSettingInfo
// 0x000A (0x000A - 0x0000)
struct FJackDebugSettingInfo final
{
public:
	uint8                                         Pad_0[0xA];                                        // 0x0000(0x000A)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackDebugSettingInfo) == 0x000001, "Wrong alignment on FJackDebugSettingInfo");
static_assert(sizeof(FJackDebugSettingInfo) == 0x00000A, "Wrong size on FJackDebugSettingInfo");

// ScriptStruct JackGame.JackMacroReplaceInfo
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FJackMacroReplaceInfo final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackMacroReplaceInfo) == 0x000004, "Wrong alignment on FJackMacroReplaceInfo");
static_assert(sizeof(FJackMacroReplaceInfo) == 0x00000C, "Wrong size on FJackMacroReplaceInfo");

// ScriptStruct JackGame.JackReferDataInfo
// 0x00E0 (0x00E0 - 0x0000)
struct alignas(0x08) FJackReferDataInfo final
{
public:
	uint8                                         Pad_0[0xE0];                                       // 0x0000(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackReferDataInfo) == 0x000008, "Wrong alignment on FJackReferDataInfo");
static_assert(sizeof(FJackReferDataInfo) == 0x0000E0, "Wrong size on FJackReferDataInfo");

// ScriptStruct JackGame.JackUIKeyEventData
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FJackUIKeyEventData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUIKeyEventData) == 0x000004, "Wrong alignment on FJackUIKeyEventData");
static_assert(sizeof(FJackUIKeyEventData) == 0x000008, "Wrong size on FJackUIKeyEventData");

// ScriptStruct JackGame.JackFusigiKaziGaugeData
// 0x0028 (0x0028 - 0x0000)
struct FJackFusigiKaziGaugeData final
{
public:
	float                                         SafetyArea_Min;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SafetyArea_Max;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdealVal;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GaugeHP;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GaugeMaxHP;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GaugeWidth;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MaterialSpecialFlag;                               // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GaugeReferenceHP;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GaugeMoveTimer;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackFusigiKaziGaugeData) == 0x000004, "Wrong alignment on FJackFusigiKaziGaugeData");
static_assert(sizeof(FJackFusigiKaziGaugeData) == 0x000028, "Wrong size on FJackFusigiKaziGaugeData");
static_assert(offsetof(FJackFusigiKaziGaugeData, SafetyArea_Min) == 0x000000, "Member 'FJackFusigiKaziGaugeData::SafetyArea_Min' has a wrong offset!");
static_assert(offsetof(FJackFusigiKaziGaugeData, SafetyArea_Max) == 0x000004, "Member 'FJackFusigiKaziGaugeData::SafetyArea_Max' has a wrong offset!");
static_assert(offsetof(FJackFusigiKaziGaugeData, IdealVal) == 0x000008, "Member 'FJackFusigiKaziGaugeData::IdealVal' has a wrong offset!");
static_assert(offsetof(FJackFusigiKaziGaugeData, GaugeHP) == 0x00000C, "Member 'FJackFusigiKaziGaugeData::GaugeHP' has a wrong offset!");
static_assert(offsetof(FJackFusigiKaziGaugeData, GaugeMaxHP) == 0x000010, "Member 'FJackFusigiKaziGaugeData::GaugeMaxHP' has a wrong offset!");
static_assert(offsetof(FJackFusigiKaziGaugeData, GaugeWidth) == 0x000014, "Member 'FJackFusigiKaziGaugeData::GaugeWidth' has a wrong offset!");
static_assert(offsetof(FJackFusigiKaziGaugeData, MaterialSpecialFlag) == 0x000018, "Member 'FJackFusigiKaziGaugeData::MaterialSpecialFlag' has a wrong offset!");
static_assert(offsetof(FJackFusigiKaziGaugeData, GaugeReferenceHP) == 0x00001C, "Member 'FJackFusigiKaziGaugeData::GaugeReferenceHP' has a wrong offset!");
static_assert(offsetof(FJackFusigiKaziGaugeData, GaugeMoveTimer) == 0x000020, "Member 'FJackFusigiKaziGaugeData::GaugeMoveTimer' has a wrong offset!");

// ScriptStruct JackGame.JackUMGItemQualityData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackUMGItemQualityData final
{
public:
	class FName                                   OddEffectID;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPercent;                                         // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGItemQualityData) == 0x000008, "Wrong alignment on FJackUMGItemQualityData");
static_assert(sizeof(FJackUMGItemQualityData) == 0x000018, "Wrong size on FJackUMGItemQualityData");
static_assert(offsetof(FJackUMGItemQualityData, OddEffectID) == 0x000000, "Member 'FJackUMGItemQualityData::OddEffectID' has a wrong offset!");
static_assert(offsetof(FJackUMGItemQualityData, TextID) == 0x000008, "Member 'FJackUMGItemQualityData::TextID' has a wrong offset!");
static_assert(offsetof(FJackUMGItemQualityData, Value) == 0x000010, "Member 'FJackUMGItemQualityData::Value' has a wrong offset!");
static_assert(offsetof(FJackUMGItemQualityData, IsPercent) == 0x000014, "Member 'FJackUMGItemQualityData::IsPercent' has a wrong offset!");
static_assert(offsetof(FJackUMGItemQualityData, IsValid) == 0x000015, "Member 'FJackUMGItemQualityData::IsValid' has a wrong offset!");

// ScriptStruct JackGame.JackUMGItemQualityParams
// 0x0038 (0x0038 - 0x0000)
struct FJackUMGItemQualityParams final
{
public:
	class FName                                   ItemID;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJackUMGItemQualityData>        MajorParams;                                       // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FJackUMGItemQualityData>        SpecalParams;                                      // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           OddEffectIds;                                      // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGItemQualityParams) == 0x000008, "Wrong alignment on FJackUMGItemQualityParams");
static_assert(sizeof(FJackUMGItemQualityParams) == 0x000038, "Wrong size on FJackUMGItemQualityParams");
static_assert(offsetof(FJackUMGItemQualityParams, ItemID) == 0x000000, "Member 'FJackUMGItemQualityParams::ItemID' has a wrong offset!");
static_assert(offsetof(FJackUMGItemQualityParams, MajorParams) == 0x000008, "Member 'FJackUMGItemQualityParams::MajorParams' has a wrong offset!");
static_assert(offsetof(FJackUMGItemQualityParams, SpecalParams) == 0x000018, "Member 'FJackUMGItemQualityParams::SpecalParams' has a wrong offset!");
static_assert(offsetof(FJackUMGItemQualityParams, OddEffectIds) == 0x000028, "Member 'FJackUMGItemQualityParams::OddEffectIds' has a wrong offset!");

// ScriptStruct JackGame.JackUMGCustomActionFlowData
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackUMGCustomActionFlowData final
{
public:
	class FName                                   ActionID;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackUMGUIActionFlow                          ActionFlow;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackActionExtentType                         ExtentType;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResult;                                           // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGCustomActionFlowData) == 0x000008, "Wrong alignment on FJackUMGCustomActionFlowData");
static_assert(sizeof(FJackUMGCustomActionFlowData) == 0x000010, "Wrong size on FJackUMGCustomActionFlowData");
static_assert(offsetof(FJackUMGCustomActionFlowData, ActionID) == 0x000000, "Member 'FJackUMGCustomActionFlowData::ActionID' has a wrong offset!");
static_assert(offsetof(FJackUMGCustomActionFlowData, ActionFlow) == 0x000008, "Member 'FJackUMGCustomActionFlowData::ActionFlow' has a wrong offset!");
static_assert(offsetof(FJackUMGCustomActionFlowData, ExtentType) == 0x000009, "Member 'FJackUMGCustomActionFlowData::ExtentType' has a wrong offset!");
static_assert(offsetof(FJackUMGCustomActionFlowData, bResult) == 0x00000A, "Member 'FJackUMGCustomActionFlowData::bResult' has a wrong offset!");

// ScriptStruct JackGame.JackUMGNoEquipmentSet
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x08) FJackUMGNoEquipmentSet final
{
public:
	class FName                                   Sword;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Dagger;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Ax;                                                // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Stick;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Boomerang;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DoubleSword;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Spear;                                             // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Staff;                                             // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Claw;                                              // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Whip;                                              // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Handedness;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Hand;                                              // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Head;                                              // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Body;                                              // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Accessory1;                                        // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Accessory2;                                        // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGNoEquipmentSet) == 0x000008, "Wrong alignment on FJackUMGNoEquipmentSet");
static_assert(sizeof(FJackUMGNoEquipmentSet) == 0x000080, "Wrong size on FJackUMGNoEquipmentSet");
static_assert(offsetof(FJackUMGNoEquipmentSet, Sword) == 0x000000, "Member 'FJackUMGNoEquipmentSet::Sword' has a wrong offset!");
static_assert(offsetof(FJackUMGNoEquipmentSet, Dagger) == 0x000008, "Member 'FJackUMGNoEquipmentSet::Dagger' has a wrong offset!");
static_assert(offsetof(FJackUMGNoEquipmentSet, Ax) == 0x000010, "Member 'FJackUMGNoEquipmentSet::Ax' has a wrong offset!");
static_assert(offsetof(FJackUMGNoEquipmentSet, Stick) == 0x000018, "Member 'FJackUMGNoEquipmentSet::Stick' has a wrong offset!");
static_assert(offsetof(FJackUMGNoEquipmentSet, Boomerang) == 0x000020, "Member 'FJackUMGNoEquipmentSet::Boomerang' has a wrong offset!");
static_assert(offsetof(FJackUMGNoEquipmentSet, DoubleSword) == 0x000028, "Member 'FJackUMGNoEquipmentSet::DoubleSword' has a wrong offset!");
static_assert(offsetof(FJackUMGNoEquipmentSet, Spear) == 0x000030, "Member 'FJackUMGNoEquipmentSet::Spear' has a wrong offset!");
static_assert(offsetof(FJackUMGNoEquipmentSet, Staff) == 0x000038, "Member 'FJackUMGNoEquipmentSet::Staff' has a wrong offset!");
static_assert(offsetof(FJackUMGNoEquipmentSet, Claw) == 0x000040, "Member 'FJackUMGNoEquipmentSet::Claw' has a wrong offset!");
static_assert(offsetof(FJackUMGNoEquipmentSet, Whip) == 0x000048, "Member 'FJackUMGNoEquipmentSet::Whip' has a wrong offset!");
static_assert(offsetof(FJackUMGNoEquipmentSet, Handedness) == 0x000050, "Member 'FJackUMGNoEquipmentSet::Handedness' has a wrong offset!");
static_assert(offsetof(FJackUMGNoEquipmentSet, Hand) == 0x000058, "Member 'FJackUMGNoEquipmentSet::Hand' has a wrong offset!");
static_assert(offsetof(FJackUMGNoEquipmentSet, Head) == 0x000060, "Member 'FJackUMGNoEquipmentSet::Head' has a wrong offset!");
static_assert(offsetof(FJackUMGNoEquipmentSet, Body) == 0x000068, "Member 'FJackUMGNoEquipmentSet::Body' has a wrong offset!");
static_assert(offsetof(FJackUMGNoEquipmentSet, Accessory1) == 0x000070, "Member 'FJackUMGNoEquipmentSet::Accessory1' has a wrong offset!");
static_assert(offsetof(FJackUMGNoEquipmentSet, Accessory2) == 0x000078, "Member 'FJackUMGNoEquipmentSet::Accessory2' has a wrong offset!");

// ScriptStruct JackGame.JackUMGVisitMapInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJackUMGVisitMapInfo final
{
public:
	class FName                                   MapId;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortNo;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGVisitMapInfo) == 0x000008, "Wrong alignment on FJackUMGVisitMapInfo");
static_assert(sizeof(FJackUMGVisitMapInfo) == 0x000010, "Wrong size on FJackUMGVisitMapInfo");
static_assert(offsetof(FJackUMGVisitMapInfo, MapId) == 0x000000, "Member 'FJackUMGVisitMapInfo::MapId' has a wrong offset!");
static_assert(offsetof(FJackUMGVisitMapInfo, SortNo) == 0x000008, "Member 'FJackUMGVisitMapInfo::SortNo' has a wrong offset!");

// ScriptStruct JackGame.JackUMGTuyosaRenkeiCharacterData
// 0x0028 (0x0028 - 0x0000)
struct FJackUMGTuyosaRenkeiCharacterData final
{
public:
	EJackCharacter                                CharacterType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ActionName;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ActionIcon;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedZone;                                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGTuyosaRenkeiCharacterData) == 0x000008, "Wrong alignment on FJackUMGTuyosaRenkeiCharacterData");
static_assert(sizeof(FJackUMGTuyosaRenkeiCharacterData) == 0x000028, "Wrong size on FJackUMGTuyosaRenkeiCharacterData");
static_assert(offsetof(FJackUMGTuyosaRenkeiCharacterData, CharacterType) == 0x000000, "Member 'FJackUMGTuyosaRenkeiCharacterData::CharacterType' has a wrong offset!");
static_assert(offsetof(FJackUMGTuyosaRenkeiCharacterData, ActionName) == 0x000008, "Member 'FJackUMGTuyosaRenkeiCharacterData::ActionName' has a wrong offset!");
static_assert(offsetof(FJackUMGTuyosaRenkeiCharacterData, ActionIcon) == 0x000018, "Member 'FJackUMGTuyosaRenkeiCharacterData::ActionIcon' has a wrong offset!");
static_assert(offsetof(FJackUMGTuyosaRenkeiCharacterData, bNeedZone) == 0x000020, "Member 'FJackUMGTuyosaRenkeiCharacterData::bNeedZone' has a wrong offset!");

// ScriptStruct JackGame.JackUMGItemNameList
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FJackUMGItemNameList final
{
public:
	class FName                                   ItemID;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortNo;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhoneticNo;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlreadyHave;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ZukanId;                                           // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGItemNameList) == 0x000008, "Wrong alignment on FJackUMGItemNameList");
static_assert(sizeof(FJackUMGItemNameList) == 0x000020, "Wrong size on FJackUMGItemNameList");
static_assert(offsetof(FJackUMGItemNameList, ItemID) == 0x000000, "Member 'FJackUMGItemNameList::ItemID' has a wrong offset!");
static_assert(offsetof(FJackUMGItemNameList, SortNo) == 0x000008, "Member 'FJackUMGItemNameList::SortNo' has a wrong offset!");
static_assert(offsetof(FJackUMGItemNameList, PhoneticNo) == 0x00000C, "Member 'FJackUMGItemNameList::PhoneticNo' has a wrong offset!");
static_assert(offsetof(FJackUMGItemNameList, AlreadyHave) == 0x000010, "Member 'FJackUMGItemNameList::AlreadyHave' has a wrong offset!");
static_assert(offsetof(FJackUMGItemNameList, ZukanId) == 0x000018, "Member 'FJackUMGItemNameList::ZukanId' has a wrong offset!");

// ScriptStruct JackGame.JackUMGWidgetAnimData
// 0x0010 (0x0010 - 0x0000)
struct FJackUMGWidgetAnimData final
{
public:
	class UWidgetAnimation*                       Animation;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoop;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGWidgetAnimData) == 0x000008, "Wrong alignment on FJackUMGWidgetAnimData");
static_assert(sizeof(FJackUMGWidgetAnimData) == 0x000010, "Wrong size on FJackUMGWidgetAnimData");
static_assert(offsetof(FJackUMGWidgetAnimData, Animation) == 0x000000, "Member 'FJackUMGWidgetAnimData::Animation' has a wrong offset!");
static_assert(offsetof(FJackUMGWidgetAnimData, NumLoop) == 0x000008, "Member 'FJackUMGWidgetAnimData::NumLoop' has a wrong offset!");

// ScriptStruct JackGame.JackUMGScenarioFukidasiInfo
// 0x0048 (0x0048 - 0x0000)
struct FJackUMGScenarioFukidasiInfo final
{
public:
	EJackBattleFukidasiPlaySec                    PlaySec;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       NextAnim;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                CharaType;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FaceIconID;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSec;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelaySec;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpen;                                             // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0xF];                                       // 0x0039(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGScenarioFukidasiInfo) == 0x000008, "Wrong alignment on FJackUMGScenarioFukidasiInfo");
static_assert(sizeof(FJackUMGScenarioFukidasiInfo) == 0x000048, "Wrong size on FJackUMGScenarioFukidasiInfo");
static_assert(offsetof(FJackUMGScenarioFukidasiInfo, PlaySec) == 0x000000, "Member 'FJackUMGScenarioFukidasiInfo::PlaySec' has a wrong offset!");
static_assert(offsetof(FJackUMGScenarioFukidasiInfo, NextAnim) == 0x000008, "Member 'FJackUMGScenarioFukidasiInfo::NextAnim' has a wrong offset!");
static_assert(offsetof(FJackUMGScenarioFukidasiInfo, CharaType) == 0x000010, "Member 'FJackUMGScenarioFukidasiInfo::CharaType' has a wrong offset!");
static_assert(offsetof(FJackUMGScenarioFukidasiInfo, FaceIconID) == 0x000018, "Member 'FJackUMGScenarioFukidasiInfo::FaceIconID' has a wrong offset!");
static_assert(offsetof(FJackUMGScenarioFukidasiInfo, Text) == 0x000020, "Member 'FJackUMGScenarioFukidasiInfo::Text' has a wrong offset!");
static_assert(offsetof(FJackUMGScenarioFukidasiInfo, TimeSec) == 0x000030, "Member 'FJackUMGScenarioFukidasiInfo::TimeSec' has a wrong offset!");
static_assert(offsetof(FJackUMGScenarioFukidasiInfo, DelaySec) == 0x000034, "Member 'FJackUMGScenarioFukidasiInfo::DelaySec' has a wrong offset!");
static_assert(offsetof(FJackUMGScenarioFukidasiInfo, bOpen) == 0x000038, "Member 'FJackUMGScenarioFukidasiInfo::bOpen' has a wrong offset!");

// ScriptStruct JackGame.JackUMGMainMapOverlayItemInfo
// 0x001C (0x001C - 0x0000)
struct FJackUMGMainMapOverlayItemInfo final
{
public:
	TWeakObjectPtr<class UWidget>                 Widget;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsChildOfGridPanel;                               // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapGimmickItem;                                   // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InitialPosition;                                   // 0x000C(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InitialSize;                                       // 0x0014(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGMainMapOverlayItemInfo) == 0x000004, "Wrong alignment on FJackUMGMainMapOverlayItemInfo");
static_assert(sizeof(FJackUMGMainMapOverlayItemInfo) == 0x00001C, "Wrong size on FJackUMGMainMapOverlayItemInfo");
static_assert(offsetof(FJackUMGMainMapOverlayItemInfo, Widget) == 0x000000, "Member 'FJackUMGMainMapOverlayItemInfo::Widget' has a wrong offset!");
static_assert(offsetof(FJackUMGMainMapOverlayItemInfo, bIsChildOfGridPanel) == 0x000008, "Member 'FJackUMGMainMapOverlayItemInfo::bIsChildOfGridPanel' has a wrong offset!");
static_assert(offsetof(FJackUMGMainMapOverlayItemInfo, bMapGimmickItem) == 0x000009, "Member 'FJackUMGMainMapOverlayItemInfo::bMapGimmickItem' has a wrong offset!");
static_assert(offsetof(FJackUMGMainMapOverlayItemInfo, InitialPosition) == 0x00000C, "Member 'FJackUMGMainMapOverlayItemInfo::InitialPosition' has a wrong offset!");
static_assert(offsetof(FJackUMGMainMapOverlayItemInfo, InitialSize) == 0x000014, "Member 'FJackUMGMainMapOverlayItemInfo::InitialSize' has a wrong offset!");

// ScriptStruct JackGame.JackUMGMapSymbolDrawContext
// 0x0028 (0x0028 - 0x0000)
struct FJackUMGMapSymbolDrawContext final
{
public:
	class UJackUMGMapController*                  MapController;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvas*                                Canvas;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ViewSize;                                          // 0x0010(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoomScale;                                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoomFactor;                                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SymbolScale;                                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreMapSymbolBaseScale;                         // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGMapSymbolDrawContext) == 0x000008, "Wrong alignment on FJackUMGMapSymbolDrawContext");
static_assert(sizeof(FJackUMGMapSymbolDrawContext) == 0x000028, "Wrong size on FJackUMGMapSymbolDrawContext");
static_assert(offsetof(FJackUMGMapSymbolDrawContext, MapController) == 0x000000, "Member 'FJackUMGMapSymbolDrawContext::MapController' has a wrong offset!");
static_assert(offsetof(FJackUMGMapSymbolDrawContext, Canvas) == 0x000008, "Member 'FJackUMGMapSymbolDrawContext::Canvas' has a wrong offset!");
static_assert(offsetof(FJackUMGMapSymbolDrawContext, ViewSize) == 0x000010, "Member 'FJackUMGMapSymbolDrawContext::ViewSize' has a wrong offset!");
static_assert(offsetof(FJackUMGMapSymbolDrawContext, ZoomScale) == 0x000018, "Member 'FJackUMGMapSymbolDrawContext::ZoomScale' has a wrong offset!");
static_assert(offsetof(FJackUMGMapSymbolDrawContext, ZoomFactor) == 0x00001C, "Member 'FJackUMGMapSymbolDrawContext::ZoomFactor' has a wrong offset!");
static_assert(offsetof(FJackUMGMapSymbolDrawContext, SymbolScale) == 0x000020, "Member 'FJackUMGMapSymbolDrawContext::SymbolScale' has a wrong offset!");
static_assert(offsetof(FJackUMGMapSymbolDrawContext, bIgnoreMapSymbolBaseScale) == 0x000024, "Member 'FJackUMGMapSymbolDrawContext::bIgnoreMapSymbolBaseScale' has a wrong offset!");

// ScriptStruct JackGame.JackUMGMedalStampAnimData
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FJackUMGMedalStampAnimData final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	EJackMedalStampAnimFlag                       AnimFlag;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetIndex;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StampCount;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MedalCount;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemID;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMedal_StampPage                          PageType;                                          // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaitTime;                                          // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackUMGMedalStampAnimData) == 0x000008, "Wrong alignment on FJackUMGMedalStampAnimData");
static_assert(sizeof(FJackUMGMedalStampAnimData) == 0x000028, "Wrong size on FJackUMGMedalStampAnimData");
static_assert(offsetof(FJackUMGMedalStampAnimData, AnimFlag) == 0x000004, "Member 'FJackUMGMedalStampAnimData::AnimFlag' has a wrong offset!");
static_assert(offsetof(FJackUMGMedalStampAnimData, TargetIndex) == 0x000008, "Member 'FJackUMGMedalStampAnimData::TargetIndex' has a wrong offset!");
static_assert(offsetof(FJackUMGMedalStampAnimData, StampCount) == 0x00000C, "Member 'FJackUMGMedalStampAnimData::StampCount' has a wrong offset!");
static_assert(offsetof(FJackUMGMedalStampAnimData, MedalCount) == 0x000010, "Member 'FJackUMGMedalStampAnimData::MedalCount' has a wrong offset!");
static_assert(offsetof(FJackUMGMedalStampAnimData, ItemID) == 0x000018, "Member 'FJackUMGMedalStampAnimData::ItemID' has a wrong offset!");
static_assert(offsetof(FJackUMGMedalStampAnimData, PageType) == 0x000020, "Member 'FJackUMGMedalStampAnimData::PageType' has a wrong offset!");
static_assert(offsetof(FJackUMGMedalStampAnimData, WaitTime) == 0x000024, "Member 'FJackUMGMedalStampAnimData::WaitTime' has a wrong offset!");

// ScriptStruct JackGame.JackUMGSerifuWindowEmojiData
// 0x0020 (0x0020 - 0x0000)
struct FJackUMGSerifuWindowEmojiData final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Size;                                              // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackSerifuWindowEmojiFlag                    Flag;                                              // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackUMGSerifuWindowEmojiData) == 0x000008, "Wrong alignment on FJackUMGSerifuWindowEmojiData");
static_assert(sizeof(FJackUMGSerifuWindowEmojiData) == 0x000020, "Wrong size on FJackUMGSerifuWindowEmojiData");
static_assert(offsetof(FJackUMGSerifuWindowEmojiData, Key) == 0x000000, "Member 'FJackUMGSerifuWindowEmojiData::Key' has a wrong offset!");
static_assert(offsetof(FJackUMGSerifuWindowEmojiData, Texture) == 0x000008, "Member 'FJackUMGSerifuWindowEmojiData::Texture' has a wrong offset!");
static_assert(offsetof(FJackUMGSerifuWindowEmojiData, Size) == 0x000010, "Member 'FJackUMGSerifuWindowEmojiData::Size' has a wrong offset!");
static_assert(offsetof(FJackUMGSerifuWindowEmojiData, Length) == 0x000014, "Member 'FJackUMGSerifuWindowEmojiData::Length' has a wrong offset!");
static_assert(offsetof(FJackUMGSerifuWindowEmojiData, Flag) == 0x000018, "Member 'FJackUMGSerifuWindowEmojiData::Flag' has a wrong offset!");

// ScriptStruct JackGame.JackVoiceTimelineUpperFaceKey
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJackVoiceTimelineUpperFaceKey final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJackVoiceTimelineUpperFaceKey) == 0x000008, "Wrong alignment on FJackVoiceTimelineUpperFaceKey");
static_assert(sizeof(FJackVoiceTimelineUpperFaceKey) == 0x000018, "Wrong size on FJackVoiceTimelineUpperFaceKey");

// ScriptStruct JackGame.JackCorrectWeatherForWeatherReport
// 0x0002 (0x0002 - 0x0000)
struct FJackCorrectWeatherForWeatherReport final
{
public:
	EJackWorldWeather                             Weather;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             CorrectWeather;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJackCorrectWeatherForWeatherReport) == 0x000001, "Wrong alignment on FJackCorrectWeatherForWeatherReport");
static_assert(sizeof(FJackCorrectWeatherForWeatherReport) == 0x000002, "Wrong size on FJackCorrectWeatherForWeatherReport");
static_assert(offsetof(FJackCorrectWeatherForWeatherReport, Weather) == 0x000000, "Member 'FJackCorrectWeatherForWeatherReport::Weather' has a wrong offset!");
static_assert(offsetof(FJackCorrectWeatherForWeatherReport, CorrectWeather) == 0x000001, "Member 'FJackCorrectWeatherForWeatherReport::CorrectWeather' has a wrong offset!");

}

