#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TokiNoKesin_One

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "JackGame_classes.hpp"


namespace SDK
{

// DynamicClass BP_TokiNoKesin_One.BP_TokiNoKesin_One_C
// 0x00E0 (0x13D0 - 0x12F0)
class ABP_TokiNoKesin_One_C final : public AJackCharacterOneTokiNoKesin
{
public:
	class UJackAttitudeControlComponent*          JackAttitudeControl;                               // 0x12F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJackCapsuleComponent*                  VisibleTriggerCapsule;                             // 0x12F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent2;   // 0x1300(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor2;            // 0x1308(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp2;             // 0x1310(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex2;        // 0x1318(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x131C(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131D[0x3];                                     // 0x131D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x1320(0x0088)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x13A8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x13B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x13B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x13C0(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallFunc_IsSScenario_SScenario;                    // 0x13C4(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C5[0xB];                                     // 0x13C5(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BndEvt__VisibleTriggerCapsule_K2Node_ComponentBoundEvent_132_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* bpp__OverlappedComponent__pf, class AActor* bpp__OtherActor__pf, class UPrimitiveComponent* bpp__OtherComp__pf, int32 bpp__OtherBodyIndex__pf, bool bpp__bFromSweep__pf, const struct FHitResult& bpp__SweepResult__pf__const);
	void BndEvt__VisibleTriggerCapsule_K2Node_ComponentBoundEvent_135_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* bpp__OverlappedComponent__pf, class AActor* bpp__OtherActor__pf, class UPrimitiveComponent* bpp__OtherComp__pf, int32 bpp__OtherBodyIndex__pf);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BP_TokiNoKesin_One_C">();
	}
	static class ABP_TokiNoKesin_One_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TokiNoKesin_One_C>();
	}
};
static_assert(alignof(ABP_TokiNoKesin_One_C) == 0x000010, "Wrong alignment on ABP_TokiNoKesin_One_C");
static_assert(sizeof(ABP_TokiNoKesin_One_C) == 0x0013D0, "Wrong size on ABP_TokiNoKesin_One_C");
static_assert(offsetof(ABP_TokiNoKesin_One_C, JackAttitudeControl) == 0x0012F0, "Member 'ABP_TokiNoKesin_One_C::JackAttitudeControl' has a wrong offset!");
static_assert(offsetof(ABP_TokiNoKesin_One_C, VisibleTriggerCapsule) == 0x0012F8, "Member 'ABP_TokiNoKesin_One_C::VisibleTriggerCapsule' has a wrong offset!");
static_assert(offsetof(ABP_TokiNoKesin_One_C, K2Node_ComponentBoundEvent_OverlappedComponent2) == 0x001300, "Member 'ABP_TokiNoKesin_One_C::K2Node_ComponentBoundEvent_OverlappedComponent2' has a wrong offset!");
static_assert(offsetof(ABP_TokiNoKesin_One_C, K2Node_ComponentBoundEvent_OtherActor2) == 0x001308, "Member 'ABP_TokiNoKesin_One_C::K2Node_ComponentBoundEvent_OtherActor2' has a wrong offset!");
static_assert(offsetof(ABP_TokiNoKesin_One_C, K2Node_ComponentBoundEvent_OtherComp2) == 0x001310, "Member 'ABP_TokiNoKesin_One_C::K2Node_ComponentBoundEvent_OtherComp2' has a wrong offset!");
static_assert(offsetof(ABP_TokiNoKesin_One_C, K2Node_ComponentBoundEvent_OtherBodyIndex2) == 0x001318, "Member 'ABP_TokiNoKesin_One_C::K2Node_ComponentBoundEvent_OtherBodyIndex2' has a wrong offset!");
static_assert(offsetof(ABP_TokiNoKesin_One_C, K2Node_ComponentBoundEvent_bFromSweep) == 0x00131C, "Member 'ABP_TokiNoKesin_One_C::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(ABP_TokiNoKesin_One_C, K2Node_ComponentBoundEvent_SweepResult) == 0x001320, "Member 'ABP_TokiNoKesin_One_C::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(ABP_TokiNoKesin_One_C, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x0013A8, "Member 'ABP_TokiNoKesin_One_C::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ABP_TokiNoKesin_One_C, K2Node_ComponentBoundEvent_OtherActor) == 0x0013B0, "Member 'ABP_TokiNoKesin_One_C::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(ABP_TokiNoKesin_One_C, K2Node_ComponentBoundEvent_OtherComp) == 0x0013B8, "Member 'ABP_TokiNoKesin_One_C::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(ABP_TokiNoKesin_One_C, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0013C0, "Member 'ABP_TokiNoKesin_One_C::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ABP_TokiNoKesin_One_C, CallFunc_IsSScenario_SScenario) == 0x0013C4, "Member 'ABP_TokiNoKesin_One_C::CallFunc_IsSScenario_SScenario' has a wrong offset!");

}

