#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Hud_Cursor_000

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_Hud_Cursor_000.WBP_Hud_Cursor_000_C.ExecuteUbergraph_WBP_Hud_Cursor_000
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) WBP_Hud_Cursor_000_C_ExecuteUbergraph_WBP_Hud_Cursor_000 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName EventTag)>         K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_EventTag;                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Hud_Cursor_000_C_ExecuteUbergraph_WBP_Hud_Cursor_000) == 0x000008, "Wrong alignment on WBP_Hud_Cursor_000_C_ExecuteUbergraph_WBP_Hud_Cursor_000");
static_assert(sizeof(WBP_Hud_Cursor_000_C_ExecuteUbergraph_WBP_Hud_Cursor_000) == 0x000028, "Wrong size on WBP_Hud_Cursor_000_C_ExecuteUbergraph_WBP_Hud_Cursor_000");
static_assert(offsetof(WBP_Hud_Cursor_000_C_ExecuteUbergraph_WBP_Hud_Cursor_000, EntryPoint) == 0x000000, "Member 'WBP_Hud_Cursor_000_C_ExecuteUbergraph_WBP_Hud_Cursor_000::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Hud_Cursor_000_C_ExecuteUbergraph_WBP_Hud_Cursor_000, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'WBP_Hud_Cursor_000_C_ExecuteUbergraph_WBP_Hud_Cursor_000::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Hud_Cursor_000_C_ExecuteUbergraph_WBP_Hud_Cursor_000, K2Node_CustomEvent_EventTag) == 0x000018, "Member 'WBP_Hud_Cursor_000_C_ExecuteUbergraph_WBP_Hud_Cursor_000::K2Node_CustomEvent_EventTag' has a wrong offset!");
static_assert(offsetof(WBP_Hud_Cursor_000_C_ExecuteUbergraph_WBP_Hud_Cursor_000, K2Node_SwitchName_CmpSuccess) == 0x000020, "Member 'WBP_Hud_Cursor_000_C_ExecuteUbergraph_WBP_Hud_Cursor_000::K2Node_SwitchName_CmpSuccess' has a wrong offset!");

// Function WBP_Hud_Cursor_000.WBP_Hud_Cursor_000_C.WidgetBPActionDelegate
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) WBP_Hud_Cursor_000_C_WidgetBPActionDelegate final
{
public:
	class FName                                   EventTag;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Hud_Cursor_000_C_WidgetBPActionDelegate) == 0x000008, "Wrong alignment on WBP_Hud_Cursor_000_C_WidgetBPActionDelegate");
static_assert(sizeof(WBP_Hud_Cursor_000_C_WidgetBPActionDelegate) == 0x000008, "Wrong size on WBP_Hud_Cursor_000_C_WidgetBPActionDelegate");
static_assert(offsetof(WBP_Hud_Cursor_000_C_WidgetBPActionDelegate, EventTag) == 0x000000, "Member 'WBP_Hud_Cursor_000_C_WidgetBPActionDelegate::EventTag' has a wrong offset!");

// Function WBP_Hud_Cursor_000.WBP_Hud_Cursor_000_C.SetActivate
// 0x0009 (0x0009 - 0x0000)
struct WBP_Hud_Cursor_000_C_SetActivate final
{
public:
	bool                                          InIsActive;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable2;                               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable2;                               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable3;                               // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable4;                               // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select2_Default;                            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Hud_Cursor_000_C_SetActivate) == 0x000001, "Wrong alignment on WBP_Hud_Cursor_000_C_SetActivate");
static_assert(sizeof(WBP_Hud_Cursor_000_C_SetActivate) == 0x000009, "Wrong size on WBP_Hud_Cursor_000_C_SetActivate");
static_assert(offsetof(WBP_Hud_Cursor_000_C_SetActivate, InIsActive) == 0x000000, "Member 'WBP_Hud_Cursor_000_C_SetActivate::InIsActive' has a wrong offset!");
static_assert(offsetof(WBP_Hud_Cursor_000_C_SetActivate, Temp_bool_Variable) == 0x000001, "Member 'WBP_Hud_Cursor_000_C_SetActivate::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Hud_Cursor_000_C_SetActivate, Temp_byte_Variable) == 0x000002, "Member 'WBP_Hud_Cursor_000_C_SetActivate::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Hud_Cursor_000_C_SetActivate, Temp_byte_Variable2) == 0x000003, "Member 'WBP_Hud_Cursor_000_C_SetActivate::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(WBP_Hud_Cursor_000_C_SetActivate, Temp_bool_Variable2) == 0x000004, "Member 'WBP_Hud_Cursor_000_C_SetActivate::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(WBP_Hud_Cursor_000_C_SetActivate, K2Node_Select_Default) == 0x000005, "Member 'WBP_Hud_Cursor_000_C_SetActivate::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Hud_Cursor_000_C_SetActivate, Temp_byte_Variable3) == 0x000006, "Member 'WBP_Hud_Cursor_000_C_SetActivate::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(WBP_Hud_Cursor_000_C_SetActivate, Temp_byte_Variable4) == 0x000007, "Member 'WBP_Hud_Cursor_000_C_SetActivate::Temp_byte_Variable4' has a wrong offset!");
static_assert(offsetof(WBP_Hud_Cursor_000_C_SetActivate, K2Node_Select2_Default) == 0x000008, "Member 'WBP_Hud_Cursor_000_C_SetActivate::K2Node_Select2_Default' has a wrong offset!");

}

