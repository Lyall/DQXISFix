#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameEvent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "JackGame_structs.hpp"
#include "JackGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameEvent.BP_GameEvent_C
// 0x0078 (0x0410 - 0x0398)
class ABP_GameEvent_C final : public AJackGameEvent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0398(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FString                                 FlagName;                                          // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         LostGold;                                          // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         RestartPointFlag;                                  // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<bool>                                  bRestartPointInvalid;                              // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         RestartLoopCount;                                  // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RestartPointAutoSave;                              // 0x03E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E5[0x3];                                      // 0x03E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BackupPrayRestartPoint;                            // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 BackupTownRestartPoint;                            // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          SetUniqueRestartPoint;                             // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_GameEvent(int32 EntryPoint);
	void OpenMenuAgain();
	void OnFinishSaveDataCheck(EJackUMGSaveDataCheckPoint CheckPoint, EJackUMGSaveDataCheckResult Result);
	void OnFinishLoadAsync_Event_0(int32 SlotIndex, EJackSaveLoadResult SaveLoadResult);
	void AllDead();
	void OnDisplayMessageFromSaveDataCheck(EJackUMGSaveDataCheckPoint CheckPoint);
	void ExecuteSaveDataCheckResult(TScriptInterface<class IBP_IF_SaveDataCheck_C> Sender, EJackUMGSaveDataCheckPoint CheckPoint, EJackSaveLoadResult CheckRusult);
	void ExecuteSaveDataCheck(TScriptInterface<class IBP_IF_SaveDataCheck_C> Sender, EJackUMGSaveDataCheckPoint CheckPoint);
	void UserConstructionScript();
	void CheckUniqueRestartPoint();
	void ReturnBackupRestartPoint();
	void StopSoundForAllDead();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameEvent_C">();
	}
	static class ABP_GameEvent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GameEvent_C>();
	}
};
static_assert(alignof(ABP_GameEvent_C) == 0x000008, "Wrong alignment on ABP_GameEvent_C");
static_assert(sizeof(ABP_GameEvent_C) == 0x000410, "Wrong size on ABP_GameEvent_C");
static_assert(offsetof(ABP_GameEvent_C, UberGraphFrame) == 0x000398, "Member 'ABP_GameEvent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GameEvent_C, DefaultSceneRoot) == 0x0003A0, "Member 'ABP_GameEvent_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_GameEvent_C, FlagName) == 0x0003A8, "Member 'ABP_GameEvent_C::FlagName' has a wrong offset!");
static_assert(offsetof(ABP_GameEvent_C, LostGold) == 0x0003B8, "Member 'ABP_GameEvent_C::LostGold' has a wrong offset!");
static_assert(offsetof(ABP_GameEvent_C, RestartPointFlag) == 0x0003C0, "Member 'ABP_GameEvent_C::RestartPointFlag' has a wrong offset!");
static_assert(offsetof(ABP_GameEvent_C, bRestartPointInvalid) == 0x0003D0, "Member 'ABP_GameEvent_C::bRestartPointInvalid' has a wrong offset!");
static_assert(offsetof(ABP_GameEvent_C, RestartLoopCount) == 0x0003E0, "Member 'ABP_GameEvent_C::RestartLoopCount' has a wrong offset!");
static_assert(offsetof(ABP_GameEvent_C, RestartPointAutoSave) == 0x0003E4, "Member 'ABP_GameEvent_C::RestartPointAutoSave' has a wrong offset!");
static_assert(offsetof(ABP_GameEvent_C, BackupPrayRestartPoint) == 0x0003E8, "Member 'ABP_GameEvent_C::BackupPrayRestartPoint' has a wrong offset!");
static_assert(offsetof(ABP_GameEvent_C, BackupTownRestartPoint) == 0x0003F8, "Member 'ABP_GameEvent_C::BackupTownRestartPoint' has a wrong offset!");
static_assert(offsetof(ABP_GameEvent_C, SetUniqueRestartPoint) == 0x000408, "Member 'ABP_GameEvent_C::SetUniqueRestartPoint' has a wrong offset!");

}

