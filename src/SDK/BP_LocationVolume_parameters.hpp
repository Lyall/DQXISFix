#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LocationVolume

#include "Basic.hpp"

#include "JackGame_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_LocationVolume.BP_LocationVolume_C.ExecuteUbergraph_BP_LocationVolume
// 0x02A8 (0x02A8 - 0x0000)
struct BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGamePlayerCondition_ReturnValue;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActorPlayerMarker_ReturnValue;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0028(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGameFlagInt_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent2;   // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor2;            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp2;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex2;        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0068(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsActorPlayerMarker_ReturnValue2;         // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackLDT_UIMapInfo                     K2Node_CustomEvent_VolumeID;                       // 0x00F8(0x0010)(NoDestructor)
	bool                                          K2Node_CustomEvent_Out2;                           // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackSaveData*                          CallFunc_GetSaveData_ReturnValue;                  // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetActiveMapID_ReturnValue;               // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FJackDataTableUIMapInfo                CallFunc_GetDataTableRowFromName_OutRow;           // 0x0120(0x00C8)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x01F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue2;           // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_202[0x6];                                      // 0x0202(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackLDT_UIMapInfo                     K2Node_CustomEvent_VolimeID;                       // 0x0208(0x0010)(NoDestructor)
	bool                                          K2Node_CustomEvent_Out;                            // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue3;           // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21A[0x2];                                      // 0x021A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetGameFlagInt_ReturnValue2;              // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue2;         // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackLDT_UIMapInfo                     CallFunc_GetInVolume_InVolumeID;                   // 0x0228(0x0010)(NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackLDT_UIMapInfo                     CallFunc_GetInVolume_InVolumeID2;                  // 0x0240(0x0010)(NoDestructor)
	struct FJackLDT_UIMapInfo                     CallFunc_GetInVolume_InVolumeID3;                  // 0x0250(0x0010)(NoDestructor)
	struct FJackLDT_UIMapInfo                     CallFunc_GetOutVolume_OutVolumeID;                 // 0x0260(0x0010)(NoDestructor)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMiniMapOpened_ReturnValue;              // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0279(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27A[0x2];                                      // 0x027A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetGameFlagInt_ReturnValue3;              // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue3;         // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_281[0x7];                                      // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue2;               // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMapJumping_Result;                      // 0x0291(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_292[0x6];                                      // 0x0292(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue3;               // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInitialized_ReturnValue;                // 0x02A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x02A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x02A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume) == 0x000008, "Wrong alignment on BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume");
static_assert(sizeof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume) == 0x0002A8, "Wrong size on BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, EntryPoint) == 0x000000, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_IsGamePlayerCondition_ReturnValue) == 0x000004, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_IsGamePlayerCondition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_Not_PreBool_ReturnValue) == 0x000005, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000008, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, K2Node_ComponentBoundEvent_OtherActor) == 0x000010, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, K2Node_ComponentBoundEvent_OtherComp) == 0x000018, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000020, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_IsActorPlayerMarker_ReturnValue) == 0x000024, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_IsActorPlayerMarker_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000028, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_GetGameFlagInt_ReturnValue) == 0x00003C, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_GetGameFlagInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000040, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, K2Node_ComponentBoundEvent_OverlappedComponent2) == 0x000048, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::K2Node_ComponentBoundEvent_OverlappedComponent2' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, K2Node_ComponentBoundEvent_OtherActor2) == 0x000050, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::K2Node_ComponentBoundEvent_OtherActor2' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, K2Node_ComponentBoundEvent_OtherComp2) == 0x000058, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::K2Node_ComponentBoundEvent_OtherComp2' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, K2Node_ComponentBoundEvent_OtherBodyIndex2) == 0x000060, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::K2Node_ComponentBoundEvent_OtherBodyIndex2' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, K2Node_ComponentBoundEvent_bFromSweep) == 0x000064, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, K2Node_ComponentBoundEvent_SweepResult) == 0x000068, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_IsActorPlayerMarker_ReturnValue2) == 0x0000F0, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_IsActorPlayerMarker_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000F1, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, K2Node_CustomEvent_VolumeID) == 0x0000F8, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::K2Node_CustomEvent_VolumeID' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, K2Node_CustomEvent_Out2) == 0x000108, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::K2Node_CustomEvent_Out2' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_GetSaveData_ReturnValue) == 0x000110, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_GetSaveData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_GetActiveMapID_ReturnValue) == 0x000118, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_GetActiveMapID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_GetDataTableRowFromName_OutRow) == 0x000120, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0001E8, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_Conv_NameToString_ReturnValue) == 0x0001F0, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_NotEqual_NameName_ReturnValue) == 0x000200, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_NotEqual_NameName_ReturnValue2) == 0x000201, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_NotEqual_NameName_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, K2Node_CustomEvent_VolimeID) == 0x000208, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::K2Node_CustomEvent_VolimeID' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, K2Node_CustomEvent_Out) == 0x000218, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::K2Node_CustomEvent_Out' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_NotEqual_NameName_ReturnValue3) == 0x000219, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_NotEqual_NameName_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_GetGameFlagInt_ReturnValue2) == 0x00021C, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_GetGameFlagInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_GreaterEqual_IntInt_ReturnValue2) == 0x000220, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_GreaterEqual_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_GetInVolume_InVolumeID) == 0x000228, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_GetInVolume_InVolumeID' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_BooleanAND_ReturnValue) == 0x000238, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_GetInVolume_InVolumeID2) == 0x000240, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_GetInVolume_InVolumeID2' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_GetInVolume_InVolumeID3) == 0x000250, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_GetInVolume_InVolumeID3' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_GetOutVolume_OutVolumeID) == 0x000260, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_GetOutVolume_OutVolumeID' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_GetUMGManager_ReturnValue) == 0x000270, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_IsMiniMapOpened_ReturnValue) == 0x000278, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_IsMiniMapOpened_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000279, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_GetGameFlagInt_ReturnValue3) == 0x00027C, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_GetGameFlagInt_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_GreaterEqual_IntInt_ReturnValue3) == 0x000280, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_GreaterEqual_IntInt_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_GetUMGManager_ReturnValue2) == 0x000288, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_GetUMGManager_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_IsValid_ReturnValue) == 0x000290, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_IsMapJumping_Result) == 0x000291, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_IsMapJumping_Result' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_GetUMGManager_ReturnValue3) == 0x000298, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_GetUMGManager_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_Not_PreBool_ReturnValue2) == 0x0002A0, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_IsInitialized_ReturnValue) == 0x0002A1, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_IsInitialized_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_BooleanOR_ReturnValue) == 0x0002A2, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume, CallFunc_BooleanAND_ReturnValue2) == 0x0002A3, "Member 'BP_LocationVolume_C_ExecuteUbergraph_BP_LocationVolume::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");

// Function BP_LocationVolume.BP_LocationVolume_C.CallSetMinimapData
// 0x0018 (0x0018 - 0x0000)
struct BP_LocationVolume_C_CallSetMinimapData final
{
public:
	struct FJackLDT_UIMapInfo                     VolimeID;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          Out;                                               // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LocationVolume_C_CallSetMinimapData) == 0x000008, "Wrong alignment on BP_LocationVolume_C_CallSetMinimapData");
static_assert(sizeof(BP_LocationVolume_C_CallSetMinimapData) == 0x000018, "Wrong size on BP_LocationVolume_C_CallSetMinimapData");
static_assert(offsetof(BP_LocationVolume_C_CallSetMinimapData, VolimeID) == 0x000000, "Member 'BP_LocationVolume_C_CallSetMinimapData::VolimeID' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_CallSetMinimapData, Out) == 0x000010, "Member 'BP_LocationVolume_C_CallSetMinimapData::Out' has a wrong offset!");

// Function BP_LocationVolume.BP_LocationVolume_C.BndEvt__BrushComponent_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BP_LocationVolume.BP_LocationVolume_C.BndEvt__BrushComponent_K2Node_ComponentBoundEvent_96_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_96_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_96_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_96_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_96_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_96_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_96_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_96_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_96_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_96_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_96_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_96_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_96_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_96_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_96_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_96_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_96_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_LocationVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_96_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_LocationVolume.BP_LocationVolume_C.SetMinimapData
// 0x0018 (0x0018 - 0x0000)
struct BP_LocationVolume_C_SetMinimapData final
{
public:
	struct FJackLDT_UIMapInfo                     VolumeID;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          Out;                                               // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LocationVolume_C_SetMinimapData) == 0x000008, "Wrong alignment on BP_LocationVolume_C_SetMinimapData");
static_assert(sizeof(BP_LocationVolume_C_SetMinimapData) == 0x000018, "Wrong size on BP_LocationVolume_C_SetMinimapData");
static_assert(offsetof(BP_LocationVolume_C_SetMinimapData, VolumeID) == 0x000000, "Member 'BP_LocationVolume_C_SetMinimapData::VolumeID' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_SetMinimapData, Out) == 0x000010, "Member 'BP_LocationVolume_C_SetMinimapData::Out' has a wrong offset!");

// Function BP_LocationVolume.BP_LocationVolume_C.GetInVolume
// 0x0028 (0x0028 - 0x0000)
struct BP_LocationVolume_C_GetInVolume final
{
public:
	struct FJackLDT_UIMapInfo                     InVolumeID_0;                                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSScenario_SScenario;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackLDT_UIMapInfo                     K2Node_Select_Default;                             // 0x0018(0x0010)(NoDestructor)
};
static_assert(alignof(BP_LocationVolume_C_GetInVolume) == 0x000008, "Wrong alignment on BP_LocationVolume_C_GetInVolume");
static_assert(sizeof(BP_LocationVolume_C_GetInVolume) == 0x000028, "Wrong size on BP_LocationVolume_C_GetInVolume");
static_assert(offsetof(BP_LocationVolume_C_GetInVolume, InVolumeID_0) == 0x000000, "Member 'BP_LocationVolume_C_GetInVolume::InVolumeID_0' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_GetInVolume, Temp_bool_Variable) == 0x000010, "Member 'BP_LocationVolume_C_GetInVolume::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_GetInVolume, CallFunc_IsSScenario_SScenario) == 0x000011, "Member 'BP_LocationVolume_C_GetInVolume::CallFunc_IsSScenario_SScenario' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_GetInVolume, CallFunc_NotEqual_NameName_ReturnValue) == 0x000012, "Member 'BP_LocationVolume_C_GetInVolume::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_GetInVolume, CallFunc_BooleanAND_ReturnValue) == 0x000013, "Member 'BP_LocationVolume_C_GetInVolume::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_GetInVolume, K2Node_Select_Default) == 0x000018, "Member 'BP_LocationVolume_C_GetInVolume::K2Node_Select_Default' has a wrong offset!");

// Function BP_LocationVolume.BP_LocationVolume_C.GetOutVolume
// 0x0028 (0x0028 - 0x0000)
struct BP_LocationVolume_C_GetOutVolume final
{
public:
	struct FJackLDT_UIMapInfo                     OutVolumeID_0;                                     // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSScenario_SScenario;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackLDT_UIMapInfo                     K2Node_Select_Default;                             // 0x0018(0x0010)(NoDestructor)
};
static_assert(alignof(BP_LocationVolume_C_GetOutVolume) == 0x000008, "Wrong alignment on BP_LocationVolume_C_GetOutVolume");
static_assert(sizeof(BP_LocationVolume_C_GetOutVolume) == 0x000028, "Wrong size on BP_LocationVolume_C_GetOutVolume");
static_assert(offsetof(BP_LocationVolume_C_GetOutVolume, OutVolumeID_0) == 0x000000, "Member 'BP_LocationVolume_C_GetOutVolume::OutVolumeID_0' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_GetOutVolume, Temp_bool_Variable) == 0x000010, "Member 'BP_LocationVolume_C_GetOutVolume::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_GetOutVolume, CallFunc_NotEqual_NameName_ReturnValue) == 0x000011, "Member 'BP_LocationVolume_C_GetOutVolume::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_GetOutVolume, CallFunc_IsSScenario_SScenario) == 0x000012, "Member 'BP_LocationVolume_C_GetOutVolume::CallFunc_IsSScenario_SScenario' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_GetOutVolume, CallFunc_BooleanAND_ReturnValue) == 0x000013, "Member 'BP_LocationVolume_C_GetOutVolume::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationVolume_C_GetOutVolume, K2Node_Select_Default) == 0x000018, "Member 'BP_LocationVolume_C_GetOutVolume::K2Node_Select_Default' has a wrong offset!");

}

