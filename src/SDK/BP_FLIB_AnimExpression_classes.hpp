#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FLIB_AnimExpression

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "ENUM_CoordinateMeshSlot_structs.hpp"
#include "ENUM_RotAxis_structs.hpp"
#include "ENUM_HairBoneBlendSpaceCotrolMode_structs.hpp"


namespace SDK
{

// DynamicClass BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C
// 0x0000 (0x0038 - 0x0038)
class UBP_FLIB_AnimExpression_C final : public UBlueprintFunctionLibrary
{
public:
	static void AddRotOffset(class ACharacter* bpp__Character__pf, class FName bpp__TargetBone__pf, const struct FRotator& bpp__TargetRot__pf, const struct FSTRUCT_AnimExpressionBonesName& bpp__AnimExpInfo__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf);
	static void BoneA_RotMinusBoneB_Rot(class ACharacter* bpp__Character__pf, class FName bpp__BoneA__pf, class FName bpp__BoneB__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf);
	static void BoneA_RotPlusBoneB_Rot(class ACharacter* bpp__Character__pf, class FName bpp__BoneA__pf, class FName bpp__BoneB__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf);
	static void BoneEx8WayRot(bool bpp__Enable__pf, class ACharacter* bpp__Character__pf, class FName bpp__LeftThighBone__pf, class FName bpp__RightThighBone__pf, class FName bpp__SouthBone__pf, class FName bpp__SouthWestBone__pf, float bpp__SouthWestWestRatio__pf, class FName bpp__WestBone__pf, float bpp__NorthWestWestRatio__pf, float bpp__NorthWestLerpRatio__pf, class FName bpp__NorthBone__pf, float bpp__NorthEastLerpRatio__pf, float bpp__NorthEastEastRatio__pf, class FName bpp__EastBone__pf, float bpp__SouthEastEastRatio__pf, class FName bpp__SouthEastBone__pf, float bpp__SouthSouthEastRatio__pf, const struct FSTRUCT_AnimExpressionBonesName& bpp__AnimExpInfo__pf, bool bpp__Debug__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__South__pf, struct FRotator* bpp__SouthWest__pf, struct FRotator* bpp__SouthWestWest__pf, struct FRotator* bpp__West__pf, struct FRotator* bpp__NorthWestWest__pf, struct FRotator* bpp__NorthWest__pf, struct FRotator* bpp__North__pf, struct FRotator* bpp__NorthEast__pf, struct FRotator* bpp__NorthEastEast__pf, struct FRotator* bpp__East__pf, struct FRotator* bpp__SouthEastEast__pf, struct FRotator* bpp__SouthEast__pf, struct FRotator* bpp__SouthSouthEast__pf);
	static void BoneEx8WaySwitchTrace(bool bpp__Enable__pf, class ACharacter* bpp__Character__pf, class FName bpp__LeftThighBone__pf, class FName bpp__RightThighBone__pf, class FName bpp__SouthBone__pf, class FName bpp__SouthWestBone__pf, float bpp__SouthWestWestRatio__pf, class FName bpp__WestBone__pf, float bpp__NorthWestWestRatio__pf, float bpp__NorthWestLerpRatio__pf, class FName bpp__NorthBone__pf, float bpp__NorthEastLerpRatio__pf, float bpp__NorthEastEastRatio__pf, class FName bpp__EastBone__pf, float bpp__SouthEastEastRatio__pf, class FName bpp__SouthEastBone__pf, float bpp__SouthSouthEastRatio__pf, const struct FSTRUCT_AnimExpressionBonesName& bpp__AnimExpInfo__pf, bool bpp__Debug__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__South__pf, struct FRotator* bpp__SouthWest__pf, struct FRotator* bpp__SouthWestWest__pf, struct FRotator* bpp__West__pf, struct FRotator* bpp__NorthWestWest__pf, struct FRotator* bpp__NorthWest__pf, struct FRotator* bpp__North__pf, struct FRotator* bpp__NorthEast__pf, struct FRotator* bpp__NorthEastEast__pf, struct FRotator* bpp__East__pf, struct FRotator* bpp__SouthEastEast__pf, struct FRotator* bpp__SouthEast__pf, struct FRotator* bpp__SouthSouthEast__pf, class USkinnedMeshComponent** bpp__OutputPin__pf);
	static void BoneExAimRot(bool bpp__Enable__pf, bool bpp__EnableAim__pf, class ACharacter* bpp__Character__pf, class FName bpp__BoneA__pf, class FName bpp__BoneA_Child__pf, class FName bpp__BoneB__pf, class FName bpp__BoneB_Child__pf, float bpp__X1__pf, float bpp__Y1__pf, float bpp__Z1__pf, const struct FVector& bpp__AimOffset__pf, class FName bpp__TargetBone__pf, const struct FSTRUCT_AnimExpressionBonesName& bpp__AnimExpInfo__pf, bool bpp__bClampByPositiveRange__pf, ENUM_RotAxis bpp__SelectClampAxis__pf, bool bpp__bExceptionClampRot__pf, ENUM_CoordinateMeshSlot bpp__PartsSlot__pf, bool bpp__bUseAimToCenterLocation__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf, struct FVector* bpp__Location__pf, bool* bpp__bUsedTargetBone__pf, float* bpp__Alpha__pf);
	static void BoneExAverageRot(bool bpp__Enable__pf, class ACharacter* bpp__Character__pf, class FName bpp__BoneA__pf, class FName bpp__BoneB__pf, float bpp__X1__pf, float bpp__Y1__pf, float bpp__Z1__pf, class FName bpp__TargetBone__pf, const struct FSTRUCT_AnimExpressionBonesName& bpp__AnimExpInfo__pf, ENUM_CoordinateMeshSlot bpp__MeshSlot__pf, bool bpp__bUseClamp__pf, const struct FVector& bpp__ClampMin__pf, const struct FVector& bpp__ClampMax__pf, bool bpp__bUseDataTable__pf, bool bpp__SkipRotOffset__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf, bool* bpp__bUsedTargetBone__pf, float* bpp__Alpha__pf);
	static void BoneExAverageRotArray(bool bpp__Enable__pf, class ACharacter* bpp__Character__pf, class FName bpp__BoneA__pf, class FName bpp__BoneB__pf, float bpp__X1__pf, float bpp__Y1__pf, float bpp__Z1__pf, TArray<class FName>* bpp__TargetBone__pf, const struct FSTRUCT_AnimExpressionBonesName& bpp__AnimExpInfo__pf, ENUM_CoordinateMeshSlot bpp__MeshSlot__pf, bool bpp__bClamp__pf, const struct FVector& bpp__ClampMin__pf, const struct FVector& bpp__ClampMax__pf, bool bpp__SkipRotOffset__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf, bool* bpp__bUsedTargetBone__pf, class FName* bpp__TargetBoneName__pf, float* bpp__Alpha__pf);
	static void BoneExCollideSkirtAlpha(class ACharacter* bpp__Character__pf, class FName bpp__UpLegBone__pf, class FName bpp__LegBone__pf, class FName bpp__SkirtBone__pf, float bpp__MarginRate__pf, class UObject* bpp____WorldContext__pf, float* bpp__Alpha__pf);
	static void BoneExCompositeByRotZ(bool bpp__Enable__pf, class ACharacter* bpp__Character__pf, class FName bpp__BoneA__pf, class FName bpp__BoneB__pf, float bpp__X1__pf, float bpp__Y1__pf, float bpp__Z1__pf, class FName bpp__TargetBone__pf, const struct FSTRUCT_AnimExpressionBonesName& bpp__AnimExpInfo__pf, ENUM_CoordinateMeshSlot bpp__PartsSlot__pf, bool bpp__bUseDataTable__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf, bool* bpp__bUsedTargetBone__pf);
	static void BoneExCopyRot(bool bpp__Enable__pf, class ACharacter* bpp__Character__pf, class FName bpp__BoneA__pf, float bpp__X1__pf, float bpp__Y1__pf, float bpp__Z1__pf, class FName bpp__TargetBone__pf, const struct FSTRUCT_AnimExpressionBonesName& bpp__AnimExpInfo__pf, ENUM_CoordinateMeshSlot bpp__MeshSlot__pf, bool bpp__bUseClamp__pf, const struct FVector& bpp__ClampMin__pf, const struct FVector& bpp__ClampMax__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf, bool* bpp__bUsedTargetBone__pf, float* bpp__Alpha__pf);
	static void BoneExLerpFromRefPoseRotToCalcRot(const struct FRotator& bpp__Rot__pf, class ACharacter* bpp__Character__pf, class FName bpp__TargetBoneName__pf, ENUM_CoordinateMeshSlot bpp__PartsSlot__pf, float bpp__LerpAlpha__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf, float* bpp__Alpha__pf);
	static void BoneExMaxOrMinRot(bool bpp__Enable__pf, class ACharacter* bpp__Character__pf, const struct FSTRUCT_AnimExpressionBonesName& bpp__AnimExpInfo__pf, class FName bpp__StateName__pf, const struct FSTRUCT_MaxOrMinRot& bpp__NodeParam__pf, int32 bpp__NodeIndex__pf, bool bpp__bClampInRange__pf, const struct FVector& bpp__ClampMin__pf, const struct FVector& bpp__ClampMax__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf, bool* bpp__bUsedTargetBone__pf, struct FRotator* bpp__BoneA_Rot__pf, struct FRotator* bpp__BoneB_Rot__pf, float* bpp__Alpha__pf);
	static void BoneExSwitchTrace(bool bpp__Enable__pf, class ACharacter* bpp__Character__pf, class FName bpp__BoneA__pf, class FName bpp__BoneB__pf, float bpp__X1__pf, float bpp__Y1__pf, float bpp__Z1__pf, class FName bpp__TargetBone__pf, const struct FSTRUCT_AnimExpressionBonesName& bpp__AnimExpInfo__pf, ENUM_CoordinateMeshSlot bpp__MeshSlot__pf, bool bpp__bUseClamp__pf, const struct FVector& bpp__ClampMin__pf, const struct FVector& bpp__ClampMax__pf, bool bpp__bUseDataTable__pf, bool bpp__SkipRotOffset__pf, const struct FVector& bpp__PlaneNormal__pf, const struct FVector& bpp__PlaneOffset__pf, float bpp__UplegLength__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf, bool* bpp__bUsedTargetBone__pf, float* bpp__Alpha__pf);
	static void BoneExTransSync2BoneRotDelta(bool bpp__Enable__pf, class FName bpp__TargetBone__pf, class ACharacter* bpp__Character__pf, class FName bpp__BoneA__pf, class FName bpp__BoneB__pf, ENUM_CoordinateMeshSlot bpp__Parts__pf, ENUM_RotAxis bpp__RotAxis__pf, const struct FVector& bpp__K__pf, const struct FVector& bpp__Offset__pf, class FName bpp__SpaceBone__pf, const struct FVector2D& bpp__ClampSinMinMax__pf, class UObject* bpp____WorldContext__pf, struct FVector* bpp__OffsetVector__pf, bool* bpp__bUsedTargetBone__pf, float* bpp__Alpha__pf);
	static void BoneExTransSyncRotZ(bool bpp__Enable__pf, class FName bpp__TargetBone__pf, class ACharacter* bpp__Character__pf, class FName bpp__BoneA__pf, class FName bpp__BoneB__pf, const struct FVector& bpp__XYZ_Ratio__pf, const struct FSTRUCT_AnimExpressionBonesName& bpp__AnimExpInfo__pf, ENUM_CoordinateMeshSlot bpp__Parts__pf, bool bpp__bUseDataTable__pf, class UObject* bpp____WorldContext__pf, struct FVector* bpp__ResultXYZ__pf, bool* bpp__bUsedTargetBone__pf, float* bpp__Alpha__pf);
	static void BoneIsUsingInMesh(ENUM_CoordinateMeshSlot bpp__PartsSlot__pf, class ACharacter* bpp__Character__pf, class FName bpp__TargetBone__pf, bool bpp__bForceAlpha__pf, class UObject* bpp____WorldContext__pf, bool* bpp__Result__pf, float* bpp__Alpha__pf);
	static void CalcBoneRotConstraintBaseOffset(struct FSTRUCT_AnimExpInfo* bpp__AnimExpInfo__pf, class UJackAnimInstance* bpp__AnimInstance__pf, class UObject* bpp____WorldContext__pf);
	static void CalcBoneRotOffset(struct FSTRUCT_AnimExpressionBonesName* bpp__AnimExpressionBonesName__pf, class ACharacter* bpp__Character__pf, class UObject* bpp____WorldContext__pf, TArray<struct FRotator>* bpp__Result__pf);
	static float CalcExceptionRot(float bpp__MinValueA__pf, float bpp__MinValueB__pf, float bpp__StandardValue__pf, float bpp__ExceptionValue__pf, bool bpp__bIsException__pf, float bpp__ClampMinValue__pf, float bpp__ClampMaxValue__pf, class UObject* bpp____WorldContext__pf);
	static struct FRotator CalcRotOffsetPostProc(class USkeletalMeshComponent* bpp__SkeletalMeshComponent__pf, class FName bpp__TargetBone__pf, class FName bpp__SourceBone__pf, const struct FRotator& bpp__TargetRot__pf, class UObject* bpp____WorldContext__pf);
	static void CalcTransSyncRotZ(class ACharacter* bpp__Character__pf, class FName bpp__BoneA__pf, class FName bpp__BoneB__pf, struct FSTRUCT_AnimExpressionBonesName* bpp__AnimExpInfo__pf, float bpp__K__pf, class UObject* bpp____WorldContext__pf, float* bpp__Result__pf);
	static struct FRotator ClampRot(const struct FRotator& bpp__Rot__pf, bool bpp__bClamp__pf, const struct FVector& bpp__ClampMin__pf, const struct FVector& bpp__ClampMax__pf, class UObject* bpp____WorldContext__pf);
	static void DrawDebugBoneAxis(class USkinnedMeshComponent* bpp__SkinnedMesh__pf, float bpp__ArrowSize__pf, float bpp__ArrowLength__pf, const struct FVector& bpp__DrawRelativeLocation__pf, TArray<class FName>* bpp__BoneListForDebug__pf, bool bpp__DrawDebugBone__pf, class UObject* bpp____WorldContext__pf);
	static void EvalAnimExpressionType(class USkeletalMeshComponent* bpp__Mesh__pf, class UObject* bpp____WorldContext__pf, struct FSTRUCT_AnimExpInfo* bpp__Result__pf);
	static void FixRotAxisVector(class USkeletalMeshComponent* bpp__SkelComp__pf, class FName bpp__BoneName__pf, bool bpp__FixX__pf, bool bpp__FixY__pf, bool bpp__FixZ__pf, const struct FVector& bpp__ClampMinRange__pf, const struct FVector& bpp__ClampMaxRange__pf, class UObject* bpp____WorldContext__pf, struct FVector* bpp__Min__pf, struct FVector* bpp__Max__pf, struct FRotator* bpp__RefPoseRot__pf);
	static void GetAimRotation(class ACharacter* bpp__Character__pf, class FName bpp__AimReferenceBone__pf, class FName bpp__AimTargetBone__pf, class FName bpp__ModifyTargetBone__pf, const struct FVector& bpp__AimOffset__pf, float bpp__ClampMinValue__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__TargetRotation__pf);
	static struct FBoneReference GetBonReferenceByNameWithUsingInMesh(class ACharacter* bpp__Character__pf, class FName bpp__TargetBoneName__pf, ENUM_CoordinateMeshSlot bpp__PartsSlot__pf, class UObject* bpp____WorldContext__pf);
	static void GetDynamicBoneManager(class FName bpp__StateName__pf, class UObject* bpp____WorldContext__pf, class AActor** bpp__Result__pf, class UClass** bpp__Class__pf);
	static void GetLookAt2DValue(class UJackAnimInstance* bpp__JackAnimInstance__pf, ENUM_HairBoneBlendSpaceCotrolMode bpp__BaseBone__pf, class UObject* bpp____WorldContext__pf, float* bpp__H__pf, float* bpp__V__pf);
	static void GetMaxOrMinRot(class FName bpp__StateName__pf, int32 bpp__Index__pf, class UObject* bpp____WorldContext__pf, struct FSTRUCT_MaxOrMinRot* bpp__Item__pf);
	static void GetNSEWSkirtJointName(class FName bpp__SouthCenterJoint__pf, class UObject* bpp____WorldContext__pf, class FName* bpp__SouthW__pf, class FName* bpp__South__pf, class FName* bpp__SouthE__pf, class FName* bpp__WestS__pf, class FName* bpp__West__pf, class FName* bpp__WestN__pf, class FName* bpp__EastS__pf, class FName* bpp__East__pf, class FName* bpp__EastN__pf, class FName* bpp__NorthW__pf, class FName* bpp__North__pf, class FName* bpp__NorthE__pf);
	static void GetSoftBoneChain(class FName bpp__StateName__pf, int32 bpp__Index__pf, ENUM_CoordinateMeshSlot bpp__PartsSlot__pf, class ACharacter* bpp__Character__pf, class FName bpp__TargetBone__pf, class UObject* bpp____WorldContext__pf, struct FSTRUCT_SoftBoneChainSettings* bpp__Result__pf);
	static void Max_sin_clamp_Bone_rz_Minus90_90__1_Stark(class ACharacter* bpp__Character__pf, class FName bpp__Bone__pf, float bpp__K__pf, class UObject* bpp____WorldContext__pf, float* bpp__Result__pf);
	static void SaveDynamicBoneData(struct FJackAnimExp_DynamicBoneCacheState* bpp__CacheData__pf, class UJackAnimInstance* bpp__JackAnimInstance__pf, class UObject* bpp____WorldContext__pf);
	static void SelectRotZBetweenBoneAandB(class ACharacter* bpp__Character__pf, class FName bpp__BoneA__pf, class FName bpp__BoneB__pf, ENUM_RotAxis bpp__SelectClampAxis__pf, bool bpp__bClampByPositiveRange__pf, bool bpp__bExceptionClampRot__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf, struct FRotator* bpp__BoneA_Rotation__pf, struct FRotator* bpp__BoneB_Rotation__pf);
	static void TwoBoneRotCombineRatio(const struct FRotator& bpp__RotA__pf, const struct FRotator& bpp__RotB__pf, float bpp__RotA_Ratio__pf, float bpp__RotB_Ratio__pf, class FName bpp__TargetBone__pf, class ACharacter* bpp__Character__pf, ENUM_CoordinateMeshSlot bpp__PartsSlot__pf, ENUM_RotAxis bpp__ApplyBoneAxis__pf, bool bpp__LimitLerpAxis__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf, bool* bpp__bUsedTargetBone__pf, float* bpp__Alpha__pf);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BP_FLIB_AnimExpression_C">();
	}
	static class UBP_FLIB_AnimExpression_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_FLIB_AnimExpression_C>();
	}
};
static_assert(alignof(UBP_FLIB_AnimExpression_C) == 0x000008, "Wrong alignment on UBP_FLIB_AnimExpression_C");
static_assert(sizeof(UBP_FLIB_AnimExpression_C) == 0x000038, "Wrong size on UBP_FLIB_AnimExpression_C");

}

