#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ItemManager

#include "Basic.hpp"

#include "BP_ItemManager_classes.hpp"
#include "BP_ItemManager_parameters.hpp"


namespace SDK
{

// Function BP_ItemManager.BP_ItemManager_C.ExecuteUbergraph_BP_ItemManager
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ItemManager_C::ExecuteUbergraph_BP_ItemManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemManager_C", "ExecuteUbergraph_BP_ItemManager");

	Params::BP_ItemManager_C_ExecuteUbergraph_BP_ItemManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ItemManager.BP_ItemManager_C.SeedEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ItemID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EJackCharacter                          Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Parameter                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EJackItem_Bag                           UseItemBagType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   UseItemIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ItemManager_C::SeedEvent(class FName ItemID, EJackCharacter Target, class FName Parameter, EJackItem_Bag UseItemBagType, int32 UseItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemManager_C", "SeedEvent");

	Params::BP_ItemManager_C_SeedEvent Parms{};

	Parms.ItemID = ItemID;
	Parms.Target = Target;
	Parms.Parameter = Parameter;
	Parms.UseItemBagType = UseItemBagType;
	Parms.UseItemIndex = UseItemIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ItemManager.BP_ItemManager_C.DaizinamonoCommonEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ItemID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EJackCharacter                          Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Parameter                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EJackItem_Bag                           UseItemBagType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   UseItemIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ItemManager_C::DaizinamonoCommonEvent(class FName ItemID, EJackCharacter Target, class FName Parameter, EJackItem_Bag UseItemBagType, int32 UseItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemManager_C", "DaizinamonoCommonEvent");

	Params::BP_ItemManager_C_DaizinamonoCommonEvent Parms{};

	Parms.ItemID = ItemID;
	Parms.Target = Target;
	Parms.Parameter = Parameter;
	Parms.UseItemBagType = UseItemBagType;
	Parms.UseItemIndex = UseItemIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ItemManager.BP_ItemManager_C.StoreMultiItems
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSTRUCT_ItemSet>          Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int32                                   Gold                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AcceptOverflow                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   OutStoreBit                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OutStoreSuccessBit                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<EJackItem_Bag>                   OutStoreBag                                            (Parm, OutParm, ZeroConstructor)
// bool                                    OutForsake                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ItemManager_C::StoreMultiItems(TArray<struct FSTRUCT_ItemSet>& Item, int32 Gold, bool AcceptOverflow, int32* OutStoreBit, int32* OutStoreSuccessBit, TArray<EJackItem_Bag>* OutStoreBag, bool* OutForsake)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemManager_C", "StoreMultiItems");

	Params::BP_ItemManager_C_StoreMultiItems Parms{};

	Parms.Item = std::move(Item);
	Parms.Gold = Gold;
	Parms.AcceptOverflow = AcceptOverflow;

	UObject::ProcessEvent(Func, &Parms);

	Item = std::move(Parms.Item);

	if (OutStoreBit != nullptr)
		*OutStoreBit = Parms.OutStoreBit;

	if (OutStoreSuccessBit != nullptr)
		*OutStoreSuccessBit = Parms.OutStoreSuccessBit;

	if (OutStoreBag != nullptr)
		*OutStoreBag = std::move(Parms.OutStoreBag);

	if (OutForsake != nullptr)
		*OutForsake = Parms.OutForsake;
}

}

