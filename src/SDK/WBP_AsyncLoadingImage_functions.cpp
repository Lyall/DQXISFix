#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_AsyncLoadingImage

#include "Basic.hpp"

#include "WBP_AsyncLoadingImage_classes.hpp"
#include "WBP_AsyncLoadingImage_parameters.hpp"


namespace SDK
{

// Function WBP_AsyncLoadingImage.WBP_AsyncLoadingImage_C.EndLoadingImageEvent__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWBP_AsyncLoadingImage_C*         Sender                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_AsyncLoadingImage_C::EndLoadingImageEvent__DelegateSignature(class UWBP_AsyncLoadingImage_C* Sender)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_AsyncLoadingImage_C", "EndLoadingImageEvent__DelegateSignature");

	Params::WBP_AsyncLoadingImage_C_EndLoadingImageEvent__DelegateSignature Parms{};

	Parms.Sender = Sender;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_AsyncLoadingImage.WBP_AsyncLoadingImage_C.ExecuteUbergraph_WBP_AsyncLoadingImage
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_AsyncLoadingImage_C::ExecuteUbergraph_WBP_AsyncLoadingImage(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_AsyncLoadingImage_C", "ExecuteUbergraph_WBP_AsyncLoadingImage");

	Params::WBP_AsyncLoadingImage_C_ExecuteUbergraph_WBP_AsyncLoadingImage Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_AsyncLoadingImage.WBP_AsyncLoadingImage_C.StartLoadingImage
// (BlueprintCallable, BlueprintEvent)

void UWBP_AsyncLoadingImage_C::StartLoadingImage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_AsyncLoadingImage_C", "StartLoadingImage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_AsyncLoadingImage.WBP_AsyncLoadingImage_C.EndLoad
// (BlueprintCallable, BlueprintEvent)

void UWBP_AsyncLoadingImage_C::EndLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_AsyncLoadingImage_C", "EndLoad");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_AsyncLoadingImage.WBP_AsyncLoadingImage_C.ChangeLoadingFlag
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LoadingFlag_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_AsyncLoadingImage_C::ChangeLoadingFlag(int32 LoadingFlag_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_AsyncLoadingImage_C", "ChangeLoadingFlag");

	Params::WBP_AsyncLoadingImage_C_ChangeLoadingFlag Parms{};

	Parms.LoadingFlag_0 = LoadingFlag_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_AsyncLoadingImage.WBP_AsyncLoadingImage_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_AsyncLoadingImage_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_AsyncLoadingImage_C", "Tick");

	Params::WBP_AsyncLoadingImage_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}

}

