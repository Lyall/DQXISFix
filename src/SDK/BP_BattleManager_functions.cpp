#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleManager

#include "Basic.hpp"

#include "BP_BattleManager_classes.hpp"
#include "BP_BattleManager_parameters.hpp"


namespace SDK
{

// Function BP_BattleManager.BP_BattleManager_C.ExecuteUbergraph_BP_BattleManager
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleManager_C::ExecuteUbergraph_BP_BattleManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "ExecuteUbergraph_BP_BattleManager");

	Params::BP_BattleManager_C_ExecuteUbergraph_BP_BattleManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.MonsterAppearParameterInitialize
// (Event, Public, BlueprintEvent)

void ABP_BattleManager_C::MonsterAppearParameterInitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "MonsterAppearParameterInitialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.OnBattleCameraEndDelegate_Event
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EJackBattleCameraCategory               BattleCameraCategory                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleManager_C::OnBattleCameraEndDelegate_Event(EJackBattleCameraCategory BattleCameraCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "OnBattleCameraEndDelegate_Event");

	Params::BP_BattleManager_C_OnBattleCameraEndDelegate_Event Parms{};

	Parms.BattleCameraCategory = BattleCameraCategory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.OnBattleCameraStartDelegate_Event
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EJackBattleCameraCategory               BattleCameraCategory                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleManager_C::OnBattleCameraStartDelegate_Event(EJackBattleCameraCategory BattleCameraCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "OnBattleCameraStartDelegate_Event");

	Params::BP_BattleManager_C_OnBattleCameraStartDelegate_Event Parms{};

	Parms.BattleCameraCategory = BattleCameraCategory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.SetFoliageDitherBattleFieldDirect
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FVector                          DitherLocation                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DitherBounds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleManager_C::SetFoliageDitherBattleFieldDirect(const struct FVector& DitherLocation, float DitherBounds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "SetFoliageDitherBattleFieldDirect");

	Params::BP_BattleManager_C_SetFoliageDitherBattleFieldDirect Parms{};

	Parms.DitherLocation = std::move(DitherLocation);
	Parms.DitherBounds = DitherBounds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.OnPrgCameraStartDelegate_Event_0
// (BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::OnPrgCameraStartDelegate_Event_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "OnPrgCameraStartDelegate_Event_0");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.SetFoliageDitherRangeDirect
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   DitherRange                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleManager_C::SetFoliageDitherRangeDirect(float DitherRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "SetFoliageDitherRangeDirect");

	Params::BP_BattleManager_C_SetFoliageDitherRangeDirect Parms{};

	Parms.DitherRange = DitherRange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.OnDestroyed_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DestroyedActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleManager_C::OnDestroyed_Event_0(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "OnDestroyed_Event_0");

	Params::BP_BattleManager_C_OnDestroyed_Event_0 Parms{};

	Parms.DestroyedActor = DestroyedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.OnResultCameraStart_Event_0
// (BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::OnResultCameraStart_Event_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "OnResultCameraStart_Event_0");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.OnBattlePostInitialize_Event_0
// (BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::OnBattlePostInitialize_Event_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "OnBattlePostInitialize_Event_0");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "ReceiveTick");

	Params::BP_BattleManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.OnCrashEffectStart_Event_0
// (BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::OnCrashEffectStart_Event_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "OnCrashEffectStart_Event_0");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.OnBattleExitStart_Event_0
// (BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::OnBattleExitStart_Event_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "OnBattleExitStart_Event_0");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.OnResultStart_Event_0
// (BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::OnResultStart_Event_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "OnResultStart_Event_0");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.OnBattleEnd_Event_0
// (BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::OnBattleEnd_Event_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "OnBattleEnd_Event_0");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.OnMonsterAppearStart_Event_0
// (BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::OnMonsterAppearStart_Event_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "OnMonsterAppearStart_Event_0");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.OnBattleFinalize_Event_0
// (BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::OnBattleFinalize_Event_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "OnBattleFinalize_Event_0");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.OnBattleInitialize_Event_0
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FJackCommandBattleInitialize     InCommand                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void ABP_BattleManager_C::OnBattleInitialize_Event_0(const struct FJackCommandBattleInitialize& InCommand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "OnBattleInitialize_Event_0");

	Params::BP_BattleManager_C_OnBattleInitialize_Event_0 Parms{};

	Parms.InCommand = std::move(InCommand);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.OnBattleStart_Event
// (BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::OnBattleStart_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "OnBattleStart_Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_BattleManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.SetMinimapVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bVisible                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BattleManager_C::SetMinimapVisibility(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "SetMinimapVisibility");

	Params::BP_BattleManager_C_SetMinimapVisibility Parms{};

	Parms.bVisible = bVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.SetHiddenInBattle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bHidden_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BattleManager_C::SetHiddenInBattle(bool bHidden_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "SetHiddenInBattle");

	Params::BP_BattleManager_C_SetHiddenInBattle Parms{};

	Parms.bHidden_0 = bHidden_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.DebugDrawCylinder
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InCenter                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InRadius                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     InColor                                                (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleManager_C::DebugDrawCylinder(const struct FVector& InCenter, float InRadius, const struct FLinearColor& InColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "DebugDrawCylinder");

	Params::BP_BattleManager_C_DebugDrawCylinder Parms{};

	Parms.InCenter = std::move(InCenter);
	Parms.InRadius = InRadius;
	Parms.InColor = std::move(InColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.ApplyToubatuMonsterCount
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::ApplyToubatuMonsterCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "ApplyToubatuMonsterCount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.SetMonsterIgnoreCollisionNMV_BlockMonster
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIgnoreCollision                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BattleManager_C::SetMonsterIgnoreCollisionNMV_BlockMonster(bool bIgnoreCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "SetMonsterIgnoreCollisionNMV_BlockMonster");

	Params::BP_BattleManager_C_SetMonsterIgnoreCollisionNMV_BlockMonster Parms{};

	Parms.bIgnoreCollision = bIgnoreCollision;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.InitializeNMV_BlockMonster
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::InitializeNMV_BlockMonster()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "InitializeNMV_BlockMonster");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.FinalizeNMV_BlockMonster
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::FinalizeNMV_BlockMonster()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "FinalizeNMV_BlockMonster");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.CallAllDead
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BattleManager_C::CallAllDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "CallAllDead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleManager.BP_BattleManager_C.SetMonsterAppearPlantDitherParameter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BattleManager_C::SetMonsterAppearPlantDitherParameter(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "SetMonsterAppearPlantDitherParameter");

	Params::BP_BattleManager_C_SetMonsterAppearPlantDitherParameter Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.SetBattleFieldCollisionIgnore
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AJackCharacter*                   IgnoreCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleManager_C::SetBattleFieldCollisionIgnore(class AJackCharacter* IgnoreCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "SetBattleFieldCollisionIgnore");

	Params::BP_BattleManager_C_SetBattleFieldCollisionIgnore Parms{};

	Parms.IgnoreCharacter = IgnoreCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.SetActivateEnvParam
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bActive                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BattleManager_C::SetActivateEnvParam(bool bActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "SetActivateEnvParam");

	Params::BP_BattleManager_C_SetActivateEnvParam Parms{};

	Parms.bActive = bActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleManager.BP_BattleManager_C.GetEnvParamMaterialParameterCollection
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class UMaterialParameterCollection*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UMaterialParameterCollection* ABP_BattleManager_C::GetEnvParamMaterialParameterCollection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleManager_C", "GetEnvParamMaterialParameterCollection");

	Params::BP_BattleManager_C_GetEnvParamMaterialParameterCollection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

