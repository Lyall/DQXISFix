#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPC_TalkBase

#include "Basic.hpp"

#include "JackGame_structs.hpp"


namespace SDK::Params
{

// Function BP_NPC_TalkBase.BP_NPC_TalkBase_C.BndEvt__JackInteractiveActor_K2Node_ComponentBoundEvent_86_ComponentInteractSignature__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_NPC_TalkBase_C_BndEvt__JackInteractiveActor_K2Node_ComponentBoundEvent_86_ComponentInteractSignature__DelegateSignature final
{
public:
	class AActor*                                 bpp__OtherActor__pf;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_TalkBase_C_BndEvt__JackInteractiveActor_K2Node_ComponentBoundEvent_86_ComponentInteractSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_NPC_TalkBase_C_BndEvt__JackInteractiveActor_K2Node_ComponentBoundEvent_86_ComponentInteractSignature__DelegateSignature");
static_assert(sizeof(BP_NPC_TalkBase_C_BndEvt__JackInteractiveActor_K2Node_ComponentBoundEvent_86_ComponentInteractSignature__DelegateSignature) == 0x000008, "Wrong size on BP_NPC_TalkBase_C_BndEvt__JackInteractiveActor_K2Node_ComponentBoundEvent_86_ComponentInteractSignature__DelegateSignature");
static_assert(offsetof(BP_NPC_TalkBase_C_BndEvt__JackInteractiveActor_K2Node_ComponentBoundEvent_86_ComponentInteractSignature__DelegateSignature, bpp__OtherActor__pf) == 0x000000, "Member 'BP_NPC_TalkBase_C_BndEvt__JackInteractiveActor_K2Node_ComponentBoundEvent_86_ComponentInteractSignature__DelegateSignature::bpp__OtherActor__pf' has a wrong offset!");

// Function BP_NPC_TalkBase.BP_NPC_TalkBase_C.ExecuteUbergraph_BP_NPC_TalkBase_0
// 0x0004 (0x0004 - 0x0000)
struct BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_0 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_0) == 0x000004, "Wrong alignment on BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_0");
static_assert(sizeof(BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_0) == 0x000004, "Wrong size on BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_0");
static_assert(offsetof(BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_0, bpp__EntryPoint__pf) == 0x000000, "Member 'BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_0::bpp__EntryPoint__pf' has a wrong offset!");

// Function BP_NPC_TalkBase.BP_NPC_TalkBase_C.ExecuteUbergraph_BP_NPC_TalkBase_1
// 0x0004 (0x0004 - 0x0000)
struct BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_1 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_1) == 0x000004, "Wrong alignment on BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_1");
static_assert(sizeof(BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_1) == 0x000004, "Wrong size on BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_1");
static_assert(offsetof(BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_1, bpp__EntryPoint__pf) == 0x000000, "Member 'BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_1::bpp__EntryPoint__pf' has a wrong offset!");

// Function BP_NPC_TalkBase.BP_NPC_TalkBase_C.ExecuteUbergraph_BP_NPC_TalkBase_3
// 0x0004 (0x0004 - 0x0000)
struct BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_3 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_3) == 0x000004, "Wrong alignment on BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_3");
static_assert(sizeof(BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_3) == 0x000004, "Wrong size on BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_3");
static_assert(offsetof(BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_3, bpp__EntryPoint__pf) == 0x000000, "Member 'BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_3::bpp__EntryPoint__pf' has a wrong offset!");

// Function BP_NPC_TalkBase.BP_NPC_TalkBase_C.ExecuteUbergraph_BP_NPC_TalkBase_4
// 0x0004 (0x0004 - 0x0000)
struct BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_4 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_4) == 0x000004, "Wrong alignment on BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_4");
static_assert(sizeof(BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_4) == 0x000004, "Wrong size on BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_4");
static_assert(offsetof(BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_4, bpp__EntryPoint__pf) == 0x000000, "Member 'BP_NPC_TalkBase_C_ExecuteUbergraph_BP_NPC_TalkBase_4::bpp__EntryPoint__pf' has a wrong offset!");

// Function BP_NPC_TalkBase.BP_NPC_TalkBase_C.GazeTalkCharacter
// 0x0001 (0x0001 - 0x0000)
struct BP_NPC_TalkBase_C_GazeTalkCharacter final
{
public:
	bool                                          bpp__LookAtSingleNode__pf;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_TalkBase_C_GazeTalkCharacter) == 0x000001, "Wrong alignment on BP_NPC_TalkBase_C_GazeTalkCharacter");
static_assert(sizeof(BP_NPC_TalkBase_C_GazeTalkCharacter) == 0x000001, "Wrong size on BP_NPC_TalkBase_C_GazeTalkCharacter");
static_assert(offsetof(BP_NPC_TalkBase_C_GazeTalkCharacter, bpp__LookAtSingleNode__pf) == 0x000000, "Member 'BP_NPC_TalkBase_C_GazeTalkCharacter::bpp__LookAtSingleNode__pf' has a wrong offset!");

// Function BP_NPC_TalkBase.BP_NPC_TalkBase_C.GetDefaultTalkEndAnim
// 0x0008 (0x0008 - 0x0000)
struct BP_NPC_TalkBase_C_GetDefaultTalkEndAnim final
{
public:
	class UAnimMontage*                           bpp__EndAnim__pf;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_TalkBase_C_GetDefaultTalkEndAnim) == 0x000008, "Wrong alignment on BP_NPC_TalkBase_C_GetDefaultTalkEndAnim");
static_assert(sizeof(BP_NPC_TalkBase_C_GetDefaultTalkEndAnim) == 0x000008, "Wrong size on BP_NPC_TalkBase_C_GetDefaultTalkEndAnim");
static_assert(offsetof(BP_NPC_TalkBase_C_GetDefaultTalkEndAnim, bpp__EndAnim__pf) == 0x000000, "Member 'BP_NPC_TalkBase_C_GetDefaultTalkEndAnim::bpp__EndAnim__pf' has a wrong offset!");

// Function BP_NPC_TalkBase.BP_NPC_TalkBase_C.GetDefaultTalkStartAnim
// 0x0008 (0x0008 - 0x0000)
struct BP_NPC_TalkBase_C_GetDefaultTalkStartAnim final
{
public:
	class UAnimMontage*                           bpp__StartAnim__pf;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_TalkBase_C_GetDefaultTalkStartAnim) == 0x000008, "Wrong alignment on BP_NPC_TalkBase_C_GetDefaultTalkStartAnim");
static_assert(sizeof(BP_NPC_TalkBase_C_GetDefaultTalkStartAnim) == 0x000008, "Wrong size on BP_NPC_TalkBase_C_GetDefaultTalkStartAnim");
static_assert(offsetof(BP_NPC_TalkBase_C_GetDefaultTalkStartAnim, bpp__StartAnim__pf) == 0x000000, "Member 'BP_NPC_TalkBase_C_GetDefaultTalkStartAnim::bpp__StartAnim__pf' has a wrong offset!");

// Function BP_NPC_TalkBase.BP_NPC_TalkBase_C.IsCounterTalk
// 0x0001 (0x0001 - 0x0000)
struct BP_NPC_TalkBase_C_IsCounterTalk final
{
public:
	bool                                          bpp__CounterTalk__pf;                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_TalkBase_C_IsCounterTalk) == 0x000001, "Wrong alignment on BP_NPC_TalkBase_C_IsCounterTalk");
static_assert(sizeof(BP_NPC_TalkBase_C_IsCounterTalk) == 0x000001, "Wrong size on BP_NPC_TalkBase_C_IsCounterTalk");
static_assert(offsetof(BP_NPC_TalkBase_C_IsCounterTalk, bpp__CounterTalk__pf) == 0x000000, "Member 'BP_NPC_TalkBase_C_IsCounterTalk::bpp__CounterTalk__pf' has a wrong offset!");

// Function BP_NPC_TalkBase.BP_NPC_TalkBase_C.NPCCommonTalkEnd
// 0x0008 (0x0008 - 0x0000)
struct BP_NPC_TalkBase_C_NPCCommonTalkEnd final
{
public:
	class AJackScheduledNPC*                      bpp__NPC__pf;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_TalkBase_C_NPCCommonTalkEnd) == 0x000008, "Wrong alignment on BP_NPC_TalkBase_C_NPCCommonTalkEnd");
static_assert(sizeof(BP_NPC_TalkBase_C_NPCCommonTalkEnd) == 0x000008, "Wrong size on BP_NPC_TalkBase_C_NPCCommonTalkEnd");
static_assert(offsetof(BP_NPC_TalkBase_C_NPCCommonTalkEnd, bpp__NPC__pf) == 0x000000, "Member 'BP_NPC_TalkBase_C_NPCCommonTalkEnd::bpp__NPC__pf' has a wrong offset!");

// Function BP_NPC_TalkBase.BP_NPC_TalkBase_C.NPCCommonTalkSequence
// 0x0008 (0x0008 - 0x0000)
struct BP_NPC_TalkBase_C_NPCCommonTalkSequence final
{
public:
	class AJackScheduledNPC*                      bpp__NPC__pf;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_TalkBase_C_NPCCommonTalkSequence) == 0x000008, "Wrong alignment on BP_NPC_TalkBase_C_NPCCommonTalkSequence");
static_assert(sizeof(BP_NPC_TalkBase_C_NPCCommonTalkSequence) == 0x000008, "Wrong size on BP_NPC_TalkBase_C_NPCCommonTalkSequence");
static_assert(offsetof(BP_NPC_TalkBase_C_NPCCommonTalkSequence, bpp__NPC__pf) == 0x000000, "Member 'BP_NPC_TalkBase_C_NPCCommonTalkSequence::bpp__NPC__pf' has a wrong offset!");

// Function BP_NPC_TalkBase.BP_NPC_TalkBase_C.NPCCommonTalkStart
// 0x0018 (0x0018 - 0x0000)
struct BP_NPC_TalkBase_C_NPCCommonTalkStart final
{
public:
	class AJackScheduledNPC*                      bpp__NPC__pf;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AJackCharacter*                         bpp__TalkCharacter__pf;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bTalkBehind__pf;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_NPC_TalkBase_C_NPCCommonTalkStart) == 0x000008, "Wrong alignment on BP_NPC_TalkBase_C_NPCCommonTalkStart");
static_assert(sizeof(BP_NPC_TalkBase_C_NPCCommonTalkStart) == 0x000018, "Wrong size on BP_NPC_TalkBase_C_NPCCommonTalkStart");
static_assert(offsetof(BP_NPC_TalkBase_C_NPCCommonTalkStart, bpp__NPC__pf) == 0x000000, "Member 'BP_NPC_TalkBase_C_NPCCommonTalkStart::bpp__NPC__pf' has a wrong offset!");
static_assert(offsetof(BP_NPC_TalkBase_C_NPCCommonTalkStart, bpp__TalkCharacter__pf) == 0x000008, "Member 'BP_NPC_TalkBase_C_NPCCommonTalkStart::bpp__TalkCharacter__pf' has a wrong offset!");
static_assert(offsetof(BP_NPC_TalkBase_C_NPCCommonTalkStart, bpp__bTalkBehind__pf) == 0x000010, "Member 'BP_NPC_TalkBase_C_NPCCommonTalkStart::bpp__bTalkBehind__pf' has a wrong offset!");

// Function BP_NPC_TalkBase.BP_NPC_TalkBase_C.OnReplaceNPCTalkEndAnimation
// 0x0010 (0x0010 - 0x0000)
struct BP_NPC_TalkBase_C_OnReplaceNPCTalkEndAnimation final
{
public:
	class UAnimMontage*                           bpp__AnimMontage__pf;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bForceSkipAnimation__pf;                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_NPC_TalkBase_C_OnReplaceNPCTalkEndAnimation) == 0x000008, "Wrong alignment on BP_NPC_TalkBase_C_OnReplaceNPCTalkEndAnimation");
static_assert(sizeof(BP_NPC_TalkBase_C_OnReplaceNPCTalkEndAnimation) == 0x000010, "Wrong size on BP_NPC_TalkBase_C_OnReplaceNPCTalkEndAnimation");
static_assert(offsetof(BP_NPC_TalkBase_C_OnReplaceNPCTalkEndAnimation, bpp__AnimMontage__pf) == 0x000000, "Member 'BP_NPC_TalkBase_C_OnReplaceNPCTalkEndAnimation::bpp__AnimMontage__pf' has a wrong offset!");
static_assert(offsetof(BP_NPC_TalkBase_C_OnReplaceNPCTalkEndAnimation, bpp__bForceSkipAnimation__pf) == 0x000008, "Member 'BP_NPC_TalkBase_C_OnReplaceNPCTalkEndAnimation::bpp__bForceSkipAnimation__pf' has a wrong offset!");

// Function BP_NPC_TalkBase.BP_NPC_TalkBase_C.ReplaceUsoMessageEndTag
// 0x0010 (0x0010 - 0x0000)
struct BP_NPC_TalkBase_C_ReplaceUsoMessageEndTag final
{
public:
	TArray<struct FJackMessageArgumentData>       bpp__TagValueList__pf;                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_TalkBase_C_ReplaceUsoMessageEndTag) == 0x000008, "Wrong alignment on BP_NPC_TalkBase_C_ReplaceUsoMessageEndTag");
static_assert(sizeof(BP_NPC_TalkBase_C_ReplaceUsoMessageEndTag) == 0x000010, "Wrong size on BP_NPC_TalkBase_C_ReplaceUsoMessageEndTag");
static_assert(offsetof(BP_NPC_TalkBase_C_ReplaceUsoMessageEndTag, bpp__TagValueList__pf) == 0x000000, "Member 'BP_NPC_TalkBase_C_ReplaceUsoMessageEndTag::bpp__TagValueList__pf' has a wrong offset!");

// Function BP_NPC_TalkBase.BP_NPC_TalkBase_C.SetUso
// 0x0008 (0x0008 - 0x0000)
struct BP_NPC_TalkBase_C_SetUso final
{
public:
	class FName                                   bpp__UsoMessageID__pf;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_TalkBase_C_SetUso) == 0x000004, "Wrong alignment on BP_NPC_TalkBase_C_SetUso");
static_assert(sizeof(BP_NPC_TalkBase_C_SetUso) == 0x000008, "Wrong size on BP_NPC_TalkBase_C_SetUso");
static_assert(offsetof(BP_NPC_TalkBase_C_SetUso, bpp__UsoMessageID__pf) == 0x000000, "Member 'BP_NPC_TalkBase_C_SetUso::bpp__UsoMessageID__pf' has a wrong offset!");

// Function BP_NPC_TalkBase.BP_NPC_TalkBase_C.StartEventTalk
// 0x0008 (0x0008 - 0x0000)
struct BP_NPC_TalkBase_C_StartEventTalk final
{
public:
	class FName                                   bpp__OverrideTalkSequence__pf;                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_NPC_TalkBase_C_StartEventTalk) == 0x000004, "Wrong alignment on BP_NPC_TalkBase_C_StartEventTalk");
static_assert(sizeof(BP_NPC_TalkBase_C_StartEventTalk) == 0x000008, "Wrong size on BP_NPC_TalkBase_C_StartEventTalk");
static_assert(offsetof(BP_NPC_TalkBase_C_StartEventTalk, bpp__OverrideTalkSequence__pf) == 0x000000, "Member 'BP_NPC_TalkBase_C_StartEventTalk::bpp__OverrideTalkSequence__pf' has a wrong offset!");

}

