#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_IF_LevelStreaming

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"


namespace SDK
{

// DynamicClass BP_IF_LevelStreaming.BP_IF_LevelStreaming_C
// 0x0000 (0x0038 - 0x0038)
class IBP_IF_LevelStreaming_C final : public IInterface
{
public:
	void AddLoadLevels(TArray<class FName>* bpp__LevelName__pf, bool* bpp__Result__pf);
	void AddLoadLevelsArea(const class FString& bpp__AreaName__pf__const, TArray<class FName>* bpp__LevelName__pf, bool* bpp__Result__pf);
	void AddUnLoadLevels(TArray<class FName>* bpp__LevelName__pf, bool* bpp__Result__pf);
	void AddUnLoadLevelsArea(const class FString& bpp__AreaName__pf__const, TArray<class FName>* bpp__LevelName__pf, bool* bpp__Result__pf);
	void BindTriggerMapChangeDelegate();
	void GetCurrentMapStart(class FName* bpp__MapStart__pf);
	void GetLoadCompleted(bool* bpp__LoadCompleted__pf);
	void GetNPCLevels(TArray<class FName>* bpp__NPC__pf);
	void GetNPCLevelVisibled(bool* bpp__Visibled__pf);
	void GetPreLoadStart(bool* bpp__PreLoadStart__pf);
	void MapJumpDelegateRegist();
	void NPCLevelLoad();
	void SetSysControlLevelName(class FName bpp__LevelName__pf, bool* bpp__Result__pf);
	void StartAutoSave();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BP_IF_LevelStreaming_C">();
	}
	static class IBP_IF_LevelStreaming_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBP_IF_LevelStreaming_C>();
	}
};
static_assert(alignof(IBP_IF_LevelStreaming_C) == 0x000008, "Wrong alignment on IBP_IF_LevelStreaming_C");
static_assert(sizeof(IBP_IF_LevelStreaming_C) == 0x000038, "Wrong size on IBP_IF_LevelStreaming_C");

}

