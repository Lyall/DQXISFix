#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FLIB_Npc

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "ENUM_ChairTarget_structs.hpp"
#include "JackGame_structs.hpp"
#include "ENUM_Schedule_Pattern_structs.hpp"
#include "ENUM_AfterInterruptPlayerLeaveDistance_structs.hpp"
#include "ENUM_NpcChairPosition_structs.hpp"


namespace SDK
{

// DynamicClass BP_FLIB_Npc.BP_FLIB_Npc_C
// 0x0000 (0x0038 - 0x0038)
class UBP_FLIB_Npc_C final : public UBlueprintFunctionLibrary
{
public:
	static void CreateFukidasiDialogue(TArray<struct FSTRUCT_NpcFukidasiDisc>* bpp__FukidasiDiscArray__pf, class UObject* bpp____WorldContext__pf, class AActor** bpp__CreateInstance__pf);
	static void GetChairTargetFromIndex(class ABP_ChairTargetBase_C* bpp__TargetChair__pf, ENUM_ChairTarget bpp__Index__pf, class UObject* bpp____WorldContext__pf, class UStaticMeshComponent** bpp__Target__pf);
	static void GetGuestCharacterFromID(EJackCharacter bpp__GuestID__pf, class UObject* bpp____WorldContext__pf, class AJackCharacter** bpp__GuestInst__pf);
	static void GetGuestLocation(EJackCharacter bpp__GuestID__pf, class UObject* bpp____WorldContext__pf, struct FVector* bpp__GuestLocation__pf);
	static void GetGuestRotation(EJackCharacter bpp__GuestID__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__GuestRotation__pf);
	static void GetLocationVolumeInfoFromID(const struct FJackLDT_UIMapInfo& bpp__ID__pf, class UObject* bpp____WorldContext__pf, bool* bpp__Result__pf, EJackFloorLevel* bpp__FloorLv__pf, EJackFloorArea* bpp__FloorArea__pf);
	static void GetLookAtTargetInfoDefaultForOther(class UObject* bpp____WorldContext__pf, float* bpp__Distance__pf, float* bpp__Angle__pf);
	static void GetLookAtTargetInfoDefaultForPlayer(bool bpp__IsInRoom__pf, class UObject* bpp____WorldContext__pf, float* bpp__Distance__pf, float* bpp__Angle__pf);
	static void GetPlayTalkEndAnimation(bool bpp__PlayFlag__pf, bool bpp__ForceSkipAnimation__pf, class UAnimMontage* bpp__DefaultAnim__pf, class UAnimMontage* bpp__ReplaceAnim__pf, class UObject* bpp____WorldContext__pf, class UAnimMontage** bpp__PlayAnim__pf);
	static void Get_ChairLoopAnim(class AJackScheduledNPC* bpp__Target__pf, class UObject* bpp____WorldContext__pf, class UAnimMontage** bpp__ChairAnimLoop__pf);
	static void MonsterVariantFormEnable(class ABP_NPC_Monster_Base_C* bpp__Monster__pf, bool bpp__bMonsterVariantForm__pf, class UObject* bpp____WorldContext__pf);
	static void MovableForciblyNotGrounded(class AJackScheduledNPC* bpp__TargetNpc__pf, class UObject* bpp____WorldContext__pf);
	static void NpcAttachmentVisibleCtrl(class ABP_NPC_Human_Base_C* bpp__NPC__pf, bool bpp__bHidden__pf, class UObject* bpp____WorldContext__pf);
	static void NpcAttachmentVisibleCtrlFromTimeZone(class AJackScheduledNPC* bpp__NPC__pf, ENUM_Schedule_Pattern bpp__SchedulePtn__pf, class UObject* bpp____WorldContext__pf);
	static void PlayTalkStartAnimationCoreImpl(class AJackScheduledNPC* bpp__NPC__pf, bool bpp__PlayFlag__pf, class UAnimMontage* bpp__AnimMontage__pf, class UAnimMontage* bpp__AdddiveAnimMongage__pf, bool bpp__WithTurn__pf, class FName bpp__MessagexID__pfT, bool bpp__TalkxBehind__pfT, class AJackCharacter* bpp__GazexCharacter__pfT, class UObject* bpp____WorldContext__pf, class FName* bpp__OutMessageID__pf, bool* bpp__bExecuteStartAnimation__pf);
	static void PlayTalkStartAnimationDefaultForCamp(class ABP_NPC_TalkBase_C* bpp__NPC__pf, class FName bpp__MessageID__pf, class UObject* bpp____WorldContext__pf, class FName* bpp__OutMessageID__pf);
	static void PlayTalkStartAnimationDefaultImpl(class ABP_NPC_TalkBase_C* bpp__NPC__pf, class UAnimMontage* bpp__AdditiveAnimMontage__pf, class FName bpp__MessageID__pf, bool bpp__AddiveAnimeDisable__pf, class UObject* bpp____WorldContext__pf, class FName* bpp__OutMessageID__pf);
	static void Reset_NPC_Schedule_NowTime(class UObject* bpp____WorldContext__pf);
	static void ScheduleChangeDisableDither(TArray<class AJackScheduledNPC*>* bpp__TargetNpc__pf, class UObject* bpp____WorldContext__pf);
	static void ScheduleEntryTypeChair(class AJackScheduledNPC* bpp__Target__pf, class FName bpp__ChairTag__pf, class UAnimMontage* bpp__LoopAnimation__pf, class UAnimMontage* bpp__AddiveAnimation__pf, const struct FSTRUCT_TalkParamCustom& bpp__TalkDisc__pf, ENUM_Schedule_Pattern bpp__Pattern__pf, bool bpp__bDoNotSkipTickAtLoadReduction__pf, bool bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf, class UObject* bpp____WorldContext__pf);
	static void ScheduleEntryTypeStaticChair_Multi(class AJackScheduledNPC* bpp__Target__pf, ENUM_Schedule_Pattern bpp__Ptn__pf, bool bpp__Loop__pf, bool bpp__Disappear__pf, bool bpp__bDoNotSkipTickAtLoadReduction__pf, bool bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf, class FName bpp__ChairTag__pf, ENUM_ChairTarget bpp__TargetIndex__pf, class UObject* bpp____WorldContext__pf, bool* bpp__Result__pf);
	static void ScheduleEntryTypeStaticChair_Single(class AJackScheduledNPC* bpp__Target__pf, ENUM_Schedule_Pattern bpp__Ptn__pf, bool bpp__Loop__pf, bool bpp__Disappear__pf, bool bpp__bDoNotSkipTickAtLoadReduction__pf, bool bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf, class FName bpp__ChairTag__pf, class UObject* bpp____WorldContext__pf, bool* bpp__Result__pf);
	static void ScheduleEntryTypeStaticMultiChair_Talk(class AJackScheduledNPC* bpp__Target__pf, ENUM_Schedule_Pattern bpp__Ptn__pf, bool bpp__Loop__pf, bool bpp__Disappear__pf, bool bpp__bDoNotSkipTickAtLoadReduction__pf, bool bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf, class UAnimMontage* bpp__ChairAnim__pf, class UAnimMontage* bpp__AddiveAnim__pf, class FName bpp__ChairTag__pf, bool bpp__UsexCommonxTalkxCamera__pfTTT, class FName bpp__TalkxSequencexEventxxName__pfTTTT, bool bpp__GazeModeLookAtDisable__pf, ENUM_ChairTarget bpp__TartetIndex__pf, const class FString& bpp__FukidasiID__pf__const, bool bpp__FukidasixOncexOnly__pfTT, bool bpp__CallLookAtEnd__pf, bool bpp__EnableLookAtTarget__pf, class AActor* bpp__LookTarget__pf, float bpp__LookAtDistance__pf, float bpp__LookAtAngle__pf, class UAnimMontage* bpp__EndWaitAnim__pf, bool bpp__DisablexTalkxSoonxAfterxTalk__pfTTTT, class UObject* bpp____WorldContext__pf);
	static void ScheduleEntryTypeStaticSingleChair_Talk(class AJackScheduledNPC* bpp__Target__pf, ENUM_Schedule_Pattern bpp__Ptn__pf, bool bpp__Loop__pf, bool bpp__Disappear__pf, bool bpp__bDoNotSkipTickAtLoadReduction__pf, bool bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf, class UAnimMontage* bpp__ChairAnim__pf, class UAnimMontage* bpp__AddivexAnim__pfT, class FName bpp__ChairTag__pf, bool bpp__UsexCommonxTalkxCamera__pfTTT, class FName bpp__TalkxSequencexEventxxName__pfTTTT, bool bpp__GazeModeLookAtDisable__pf, const class FString& bpp__FukidasiID__pf__const, bool bpp__FukidasixOncexOnrly__pfTT, bool bpp__CallLookAtEnd__pf, bool bpp__EnableLookAtTarget__pf, class AActor* bpp__LookTarget__pf, float bpp__LookAtDistance__pf, float bpp__LookAtAngle__pf, class UAnimMontage* bpp__EndWaitAnim__pf, bool bpp__DisablexTalkxSoonxAfterxTalk__pfTTTT, class UObject* bpp____WorldContext__pf);
	static void ScheduleEntryWaitinOwnerSpot(class AJackScheduledNPC* bpp__Owner__pf, class UObject* bpp____WorldContext__pf);
	static void Schedule_Entry_Look_at_Target(class AJackScheduledNPC* bpp__Target__pf, class AActor* bpp__LookatTarget__pf, class FName bpp__LookatSocket__pf, bool bpp__SingleNode__pf, float bpp__LookAtDistance__pf, float bpp__LookAtAngle__pf, class UObject* bpp____WorldContext__pf);
	static void Schedule_Entry_Set_Talk_Custom(class AJackScheduledNPC* bpp__Target__pf, bool bpp__UseCommonTalkCamera__pf, class FName bpp__SquenceEventName__pf, class UAnimMontage* bpp__EndWaitAnimMontage__pf, bool bpp__DisablexTalkxSoonxAfterxTalk__pfTTTT, class UObject* bpp____WorldContext__pf);
	static void Schedule_Entry_Set__GazeMode_In_Talk_Custom(class AJackScheduledNPC* bpp__Target__pf, bool bpp__UseCommonTalkCamera__pf, class FName bpp__SquenceEventName__pf, EJackNPCTalkGazeMode bpp__GazeMode__pf, class UObject* bpp____WorldContext__pf);
	static void Schedule_Entry_Type_Move_And_Anim(class AJackScheduledNPC* bpp__Target__pf, const struct FSTRUCT_NpcMoveParam& bpp__MoveParam__pf, float bpp__Angle__pf, class UAnimMontage* bpp__OneShotAnim__pf, class UAnimMontage* bpp__LoopAnim__pf, class UAnimMontage* bpp__ScheduleChangeAnim__pf, const struct FSTRUCT_TalkParamCustom& bpp__AnimTalkParam__pf, const struct FSTRUCT_NpcLookatParam& bpp__AnimLookatParam__pf, ENUM_Schedule_Pattern bpp__Pattern__pf, bool bpp__bDoNotSkipTickAtLoadReduction__pf, bool bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf, class UObject* bpp____WorldContext__pf, class AJackScheduledNPC** bpp__TargetNext__pf, ENUM_Schedule_Pattern* bpp__PatternNext__pf);
	static void Schedule_Entry_Type_Move_And_Chair(class AJackScheduledNPC* bpp__Target__pf, class FName bpp__ChairTag__pf, ENUM_NpcChairPosition bpp__Position__pf, class UAnimMontage* bpp__SitLoopAnimMontage__pf, class UAnimMontage* bpp__SitAdditiveAnimMontage__pf, class UAnimMontage* bpp__SitScheduleChangeAnimMontage__pf, const struct FSTRUCT_TalkParamCustom& bpp__MoveTalk__pf, const struct FSTRUCT_TalkParamCustom& bpp__SitTalk__pf, ENUM_Schedule_Pattern bpp__Pattern__pf, bool bpp__PlayLoop__pf, bool bpp__bDoNotSkipTickAtLoadReduction__pf, bool bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf, ENUM_NpcChairPosition bpp__InputPin__pf, class UObject* bpp____WorldContext__pf, class AJackScheduledNPC** bpp__TargetNext__pf, ENUM_Schedule_Pattern* bpp__PatternNext__pf);
	static void Schedule_Entry_Type_Move_And_Looping(class AJackScheduledNPC* bpp__Target__pf, const struct FSTRUCT_NpcMoveParam& bpp__MoveParam__pf, TArray<struct FSTRUCT_NpcMoveParam>* bpp__LoopingMoveParam__pf, ENUM_Schedule_Pattern bpp__Pattern__pf, bool bpp__bDoNotSkipTickAtLoadReduction__pf, bool bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf, class UObject* bpp____WorldContext__pf, class AJackScheduledNPC** bpp__TargetNext__pf, ENUM_Schedule_Pattern* bpp__PatternNext__pf);
	static void Schedule_Entry_Type_Move_And_Wander(class AJackScheduledNPC* bpp__Target__pf, const struct FSTRUCT_NpcMoveParam& bpp__MoveParam__pf, int32 bpp__MinWaitMinute__pf, int32 bpp__MaxWaitMinute__pf, const struct FSTRUCT_TalkParamCustom& bpp__WanderTalk__pf, ENUM_Schedule_Pattern bpp__Pattern__pf, bool bpp__bDoNotSkipTickAtLoadReduction__pf, bool bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf, class UObject* bpp____WorldContext__pf, class AJackScheduledNPC** bpp__TargetNext__pf, ENUM_Schedule_Pattern* bpp__PatternNext__pf);
	static void Schedule_Entry_Type_Some_Move_And_Anim(class AJackScheduledNPC* bpp__Target__pf, const struct FSTRUCT_NpcMoveParam& bpp__MoveParam__pf, TArray<struct FSTRUCT_MoveAndAnimParam>* bpp__MoveAndAnimParam__pf, ENUM_Schedule_Pattern bpp__Pattern__pf, bool bpp__bDoNotSkipTickAtLoadReduction__pf, bool bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf, class UObject* bpp____WorldContext__pf, class AJackScheduledNPC** bpp__TargetNext__pf, ENUM_Schedule_Pattern* bpp__PatternNext__pf);
	static void Schedule_Entry_Type_Stay(class AJackScheduledNPC* bpp__Target__pf, class UAnimMontage* bpp__LoopAnim__pf, class UAnimMontage* bpp__AdditiveAnimMontage__pf, class UAnimMontage* bpp__ScheduleChangeAnimMontage__pf, const struct FSTRUCT_TalkParamCustom& bpp__TalkParam__pf, const struct FSTRUCT_NpcLookatParam& bpp__LookatParam__pf, ENUM_Schedule_Pattern bpp__Pattern__pf, bool bpp__bDoNotSkipTickAtLoadReduction__pf, bool bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf, class UObject* bpp____WorldContext__pf);
	static void Schedule_Entry_Type_Wander(class AJackScheduledNPC* bpp__Target__pf, class AJackGoalMarker* bpp__Center__pf, int32 bpp__MinWaitMinute__pf, int32 bpp__MaxWaitMiunte__pf, const struct FSTRUCT_TalkParamCustom& bpp__TalkParam__pf, ENUM_Schedule_Pattern bpp__Pattern__pf, bool bpp__bDoNotSkipTickAtLoadReduction__pf, bool bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf, class UObject* bpp____WorldContext__pf);
	static void SetForceAfterInterruptPlayerLeaveDistance(class AJackScheduledNPC* bpp__TargetNpc__pf, ENUM_AfterInterruptPlayerLeaveDistance bpp__DistancePreset__pf, class UObject* bpp____WorldContext__pf);
	static void SetIgnorePlayer(class AJackScheduledNPC* bpp__TargetNpc__pf, bool bpp__IgnorexEnable__pfT, class UObject* bpp____WorldContext__pf);
	static void SetNpcImportance(class AJackScheduledNPC* bpp__NPC__pf, EJackNPCImportance bpp__Inportance__pf, class UObject* bpp____WorldContext__pf);
	static void SetNpcPipipiTypeFromSerifuID(class FName bpp__TextID__pf, class UObject* bpp____WorldContext__pf);
	static void SetRelayGoalMakers(class AJackScheduledNPC* bpp__NPC__pf, TArray<class AJackGoalMarker*>* bpp__RelayGoalMarkers__pf, class UAnimMontage* bpp__AnimMontage__pf, float bpp__Velocity__pf, class UObject* bpp____WorldContext__pf);
	static void SetTargetLocationAndRotationFromTagChair(class AJackScheduledNPC* bpp__Target__pf, class FName bpp__Tag__pf, class UObject* bpp____WorldContext__pf);
	static void Set_Load_Reduction_Skip_Look_At_Distance(class AJackScheduledNPC* bpp__TargetNpc__pf, float bpp__Distance__pf, class UObject* bpp____WorldContext__pf);
	static void Set_Lookat_Param(class AJackScheduledNPC* bpp__Target__pf, const struct FSTRUCT_NpcLookatParam& bpp__LookatParam__pf, class UObject* bpp____WorldContext__pf);
	static void Set_Talking_Npc(class AJackCharacter* bpp__TalkingNpc__pf, class UObject* bpp____WorldContext__pf);
	static void Set_Talk_Param_Custom(class AJackScheduledNPC* bpp__Target__pf, const struct FSTRUCT_TalkParamCustom& bpp__TalkParam__pf, class UAnimMontage* bpp__EndWaitAnimMontage__pf, bool bpp__DisablexTalkxSoonxAfterxTalk__pfTTTT, class UObject* bpp____WorldContext__pf);
	static void UpdateMapSymbol(class UJackMiniMapTargetComponent* bpp__MInimapComp__pf, EJackMapSymbol bpp__DstxMapSymbol__pfT, class UObject* bpp____WorldContext__pf);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BP_FLIB_Npc_C">();
	}
	static class UBP_FLIB_Npc_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_FLIB_Npc_C>();
	}
};
static_assert(alignof(UBP_FLIB_Npc_C) == 0x000008, "Wrong alignment on UBP_FLIB_Npc_C");
static_assert(sizeof(UBP_FLIB_Npc_C) == 0x000038, "Wrong size on UBP_FLIB_Npc_C");

}

