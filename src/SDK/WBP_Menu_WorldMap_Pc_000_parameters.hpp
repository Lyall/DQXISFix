#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Menu_WorldMap_Pc_000

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_Menu_WorldMap_Pc_000.WBP_Menu_WorldMap_Pc_000_C.ExecuteUbergraph_WBP_Menu_WorldMap_Pc_000
// 0x0058 (0x0058 - 0x0000)
struct WBP_Menu_WorldMap_Pc_000_C_ExecuteUbergraph_WBP_Menu_WorldMap_Pc_000 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x003C)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       K2Node_DynamicCast_AsCanvas_Panel_Slot;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetZOrder_ReturnValue;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Menu_WorldMap_Pc_000_C_ExecuteUbergraph_WBP_Menu_WorldMap_Pc_000) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_Pc_000_C_ExecuteUbergraph_WBP_Menu_WorldMap_Pc_000");
static_assert(sizeof(WBP_Menu_WorldMap_Pc_000_C_ExecuteUbergraph_WBP_Menu_WorldMap_Pc_000) == 0x000058, "Wrong size on WBP_Menu_WorldMap_Pc_000_C_ExecuteUbergraph_WBP_Menu_WorldMap_Pc_000");
static_assert(offsetof(WBP_Menu_WorldMap_Pc_000_C_ExecuteUbergraph_WBP_Menu_WorldMap_Pc_000, EntryPoint) == 0x000000, "Member 'WBP_Menu_WorldMap_Pc_000_C_ExecuteUbergraph_WBP_Menu_WorldMap_Pc_000::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_Pc_000_C_ExecuteUbergraph_WBP_Menu_WorldMap_Pc_000, K2Node_Event_MyGeometry) == 0x000004, "Member 'WBP_Menu_WorldMap_Pc_000_C_ExecuteUbergraph_WBP_Menu_WorldMap_Pc_000::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_Pc_000_C_ExecuteUbergraph_WBP_Menu_WorldMap_Pc_000, K2Node_Event_InDeltaTime) == 0x000040, "Member 'WBP_Menu_WorldMap_Pc_000_C_ExecuteUbergraph_WBP_Menu_WorldMap_Pc_000::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_Pc_000_C_ExecuteUbergraph_WBP_Menu_WorldMap_Pc_000, K2Node_DynamicCast_AsCanvas_Panel_Slot) == 0x000048, "Member 'WBP_Menu_WorldMap_Pc_000_C_ExecuteUbergraph_WBP_Menu_WorldMap_Pc_000::K2Node_DynamicCast_AsCanvas_Panel_Slot' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_Pc_000_C_ExecuteUbergraph_WBP_Menu_WorldMap_Pc_000, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'WBP_Menu_WorldMap_Pc_000_C_ExecuteUbergraph_WBP_Menu_WorldMap_Pc_000::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_Pc_000_C_ExecuteUbergraph_WBP_Menu_WorldMap_Pc_000, CallFunc_GetZOrder_ReturnValue) == 0x000054, "Member 'WBP_Menu_WorldMap_Pc_000_C_ExecuteUbergraph_WBP_Menu_WorldMap_Pc_000::CallFunc_GetZOrder_ReturnValue' has a wrong offset!");

// Function WBP_Menu_WorldMap_Pc_000.WBP_Menu_WorldMap_Pc_000_C.Tick
// 0x0040 (0x0040 - 0x0000)
struct WBP_Menu_WorldMap_Pc_000_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x003C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Menu_WorldMap_Pc_000_C_Tick) == 0x000004, "Wrong alignment on WBP_Menu_WorldMap_Pc_000_C_Tick");
static_assert(sizeof(WBP_Menu_WorldMap_Pc_000_C_Tick) == 0x000040, "Wrong size on WBP_Menu_WorldMap_Pc_000_C_Tick");
static_assert(offsetof(WBP_Menu_WorldMap_Pc_000_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_Menu_WorldMap_Pc_000_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_Pc_000_C_Tick, InDeltaTime) == 0x00003C, "Member 'WBP_Menu_WorldMap_Pc_000_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_Menu_WorldMap_Pc_000.WBP_Menu_WorldMap_Pc_000_C.SetMarkerAngle
// 0x0020 (0x0020 - 0x0000)
struct WBP_Menu_WorldMap_Pc_000_C_SetMarkerAngle final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue2;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue3;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Menu_WorldMap_Pc_000_C_SetMarkerAngle) == 0x000008, "Wrong alignment on WBP_Menu_WorldMap_Pc_000_C_SetMarkerAngle");
static_assert(sizeof(WBP_Menu_WorldMap_Pc_000_C_SetMarkerAngle) == 0x000020, "Wrong size on WBP_Menu_WorldMap_Pc_000_C_SetMarkerAngle");
static_assert(offsetof(WBP_Menu_WorldMap_Pc_000_C_SetMarkerAngle, Angle) == 0x000000, "Member 'WBP_Menu_WorldMap_Pc_000_C_SetMarkerAngle::Angle' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_Pc_000_C_SetMarkerAngle, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'WBP_Menu_WorldMap_Pc_000_C_SetMarkerAngle::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_Pc_000_C_SetMarkerAngle, CallFunc_GetDynamicMaterial_ReturnValue2) == 0x000010, "Member 'WBP_Menu_WorldMap_Pc_000_C_SetMarkerAngle::CallFunc_GetDynamicMaterial_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_Pc_000_C_SetMarkerAngle, CallFunc_GetDynamicMaterial_ReturnValue3) == 0x000018, "Member 'WBP_Menu_WorldMap_Pc_000_C_SetMarkerAngle::CallFunc_GetDynamicMaterial_ReturnValue3' has a wrong offset!");

// Function WBP_Menu_WorldMap_Pc_000.WBP_Menu_WorldMap_Pc_000_C.UpdateAnimation
// 0x0034 (0x0034 - 0x0000)
struct WBP_Menu_WorldMap_Pc_000_C_UpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0014(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0020(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x002C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Menu_WorldMap_Pc_000_C_UpdateAnimation) == 0x000004, "Wrong alignment on WBP_Menu_WorldMap_Pc_000_C_UpdateAnimation");
static_assert(sizeof(WBP_Menu_WorldMap_Pc_000_C_UpdateAnimation) == 0x000034, "Wrong size on WBP_Menu_WorldMap_Pc_000_C_UpdateAnimation");
static_assert(offsetof(WBP_Menu_WorldMap_Pc_000_C_UpdateAnimation, DeltaTime) == 0x000000, "Member 'WBP_Menu_WorldMap_Pc_000_C_UpdateAnimation::DeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_Pc_000_C_UpdateAnimation, CallFunc_Add_FloatFloat_ReturnValue) == 0x000004, "Member 'WBP_Menu_WorldMap_Pc_000_C_UpdateAnimation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_Pc_000_C_UpdateAnimation, CallFunc_GetTimeRange_MinTime) == 0x000008, "Member 'WBP_Menu_WorldMap_Pc_000_C_UpdateAnimation::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_Pc_000_C_UpdateAnimation, CallFunc_GetTimeRange_MaxTime) == 0x00000C, "Member 'WBP_Menu_WorldMap_Pc_000_C_UpdateAnimation::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_Pc_000_C_UpdateAnimation, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000010, "Member 'WBP_Menu_WorldMap_Pc_000_C_UpdateAnimation::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_Pc_000_C_UpdateAnimation, CallFunc_MakeVector_ReturnValue) == 0x000014, "Member 'WBP_Menu_WorldMap_Pc_000_C_UpdateAnimation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_Pc_000_C_UpdateAnimation, CallFunc_RotateAngleAxis_ReturnValue) == 0x000020, "Member 'WBP_Menu_WorldMap_Pc_000_C_UpdateAnimation::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Menu_WorldMap_Pc_000_C_UpdateAnimation, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x00002C, "Member 'WBP_Menu_WorldMap_Pc_000_C_UpdateAnimation::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");

}

