#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Triple

#include "Basic.hpp"


namespace SDK::Params
{

// Function Triple.TripleCheatManager.TripleBattleBukiGuard
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleBattleBukiGuard final
{
public:
	int32                                         Kind;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleBattleBukiGuard) == 0x000004, "Wrong alignment on TripleCheatManager_TripleBattleBukiGuard");
static_assert(sizeof(TripleCheatManager_TripleBattleBukiGuard) == 0x000004, "Wrong size on TripleCheatManager_TripleBattleBukiGuard");
static_assert(offsetof(TripleCheatManager_TripleBattleBukiGuard, Kind) == 0x000000, "Member 'TripleCheatManager_TripleBattleBukiGuard::Kind' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleCommandAIActionPattern
// 0x0018 (0x0018 - 0x0000)
struct TripleCheatManager_TripleBattleCommandAIActionPattern final
{
public:
	int32                                         Index0;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index1;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index2;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index3;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index4;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index5;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleBattleCommandAIActionPattern) == 0x000004, "Wrong alignment on TripleCheatManager_TripleBattleCommandAIActionPattern");
static_assert(sizeof(TripleCheatManager_TripleBattleCommandAIActionPattern) == 0x000018, "Wrong size on TripleCheatManager_TripleBattleCommandAIActionPattern");
static_assert(offsetof(TripleCheatManager_TripleBattleCommandAIActionPattern, Index0) == 0x000000, "Member 'TripleCheatManager_TripleBattleCommandAIActionPattern::Index0' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleCommandAIActionPattern, Index1) == 0x000004, "Member 'TripleCheatManager_TripleBattleCommandAIActionPattern::Index1' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleCommandAIActionPattern, Index2) == 0x000008, "Member 'TripleCheatManager_TripleBattleCommandAIActionPattern::Index2' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleCommandAIActionPattern, Index3) == 0x00000C, "Member 'TripleCheatManager_TripleBattleCommandAIActionPattern::Index3' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleCommandAIActionPattern, Index4) == 0x000010, "Member 'TripleCheatManager_TripleBattleCommandAIActionPattern::Index4' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleCommandAIActionPattern, Index5) == 0x000014, "Member 'TripleCheatManager_TripleBattleCommandAIActionPattern::Index5' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleCommandAISetActionNo
// 0x000C (0x000C - 0x0000)
struct TripleCheatManager_TripleBattleCommandAISetActionNo final
{
public:
	int32                                         GroupIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActionNo;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleBattleCommandAISetActionNo) == 0x000004, "Wrong alignment on TripleCheatManager_TripleBattleCommandAISetActionNo");
static_assert(sizeof(TripleCheatManager_TripleBattleCommandAISetActionNo) == 0x00000C, "Wrong size on TripleCheatManager_TripleBattleCommandAISetActionNo");
static_assert(offsetof(TripleCheatManager_TripleBattleCommandAISetActionNo, GroupIndex) == 0x000000, "Member 'TripleCheatManager_TripleBattleCommandAISetActionNo::GroupIndex' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleCommandAISetActionNo, Index_0) == 0x000004, "Member 'TripleCheatManager_TripleBattleCommandAISetActionNo::Index_0' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleCommandAISetActionNo, ActionNo) == 0x000008, "Member 'TripleCheatManager_TripleBattleCommandAISetActionNo::ActionNo' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleCommandAISetConfuseKindMonster
// 0x000C (0x000C - 0x0000)
struct TripleCheatManager_TripleBattleCommandAISetConfuseKindMonster final
{
public:
	int32                                         GroupIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Kind;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleBattleCommandAISetConfuseKindMonster) == 0x000004, "Wrong alignment on TripleCheatManager_TripleBattleCommandAISetConfuseKindMonster");
static_assert(sizeof(TripleCheatManager_TripleBattleCommandAISetConfuseKindMonster) == 0x00000C, "Wrong size on TripleCheatManager_TripleBattleCommandAISetConfuseKindMonster");
static_assert(offsetof(TripleCheatManager_TripleBattleCommandAISetConfuseKindMonster, GroupIndex) == 0x000000, "Member 'TripleCheatManager_TripleBattleCommandAISetConfuseKindMonster::GroupIndex' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleCommandAISetConfuseKindMonster, Index_0) == 0x000004, "Member 'TripleCheatManager_TripleBattleCommandAISetConfuseKindMonster::Index_0' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleCommandAISetConfuseKindMonster, Kind) == 0x000008, "Member 'TripleCheatManager_TripleBattleCommandAISetConfuseKindMonster::Kind' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleCommandAISetConfuseKindPlayer
// 0x0008 (0x0008 - 0x0000)
struct TripleCheatManager_TripleBattleCommandAISetConfuseKindPlayer final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Kind;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleBattleCommandAISetConfuseKindPlayer) == 0x000004, "Wrong alignment on TripleCheatManager_TripleBattleCommandAISetConfuseKindPlayer");
static_assert(sizeof(TripleCheatManager_TripleBattleCommandAISetConfuseKindPlayer) == 0x000008, "Wrong size on TripleCheatManager_TripleBattleCommandAISetConfuseKindPlayer");
static_assert(offsetof(TripleCheatManager_TripleBattleCommandAISetConfuseKindPlayer, PlayerId) == 0x000000, "Member 'TripleCheatManager_TripleBattleCommandAISetConfuseKindPlayer::PlayerId' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleCommandAISetConfuseKindPlayer, Kind) == 0x000004, "Member 'TripleCheatManager_TripleBattleCommandAISetConfuseKindPlayer::Kind' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleCommandAISetSlotNo
// 0x000C (0x000C - 0x0000)
struct TripleCheatManager_TripleBattleCommandAISetSlotNo final
{
public:
	int32                                         GroupIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotNo;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleBattleCommandAISetSlotNo) == 0x000004, "Wrong alignment on TripleCheatManager_TripleBattleCommandAISetSlotNo");
static_assert(sizeof(TripleCheatManager_TripleBattleCommandAISetSlotNo) == 0x00000C, "Wrong size on TripleCheatManager_TripleBattleCommandAISetSlotNo");
static_assert(offsetof(TripleCheatManager_TripleBattleCommandAISetSlotNo, GroupIndex) == 0x000000, "Member 'TripleCheatManager_TripleBattleCommandAISetSlotNo::GroupIndex' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleCommandAISetSlotNo, Index_0) == 0x000004, "Member 'TripleCheatManager_TripleBattleCommandAISetSlotNo::Index_0' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleCommandAISetSlotNo, SlotNo) == 0x000008, "Member 'TripleCheatManager_TripleBattleCommandAISetSlotNo::SlotNo' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleCounter
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleBattleCounter final
{
public:
	int32                                         Kind;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleBattleCounter) == 0x000004, "Wrong alignment on TripleCheatManager_TripleBattleCounter");
static_assert(sizeof(TripleCheatManager_TripleBattleCounter) == 0x000004, "Wrong size on TripleCheatManager_TripleBattleCounter");
static_assert(offsetof(TripleCheatManager_TripleBattleCounter, Kind) == 0x000000, "Member 'TripleCheatManager_TripleBattleCounter::Kind' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleCritical
// 0x0001 (0x0001 - 0x0000)
struct TripleCheatManager_TripleBattleCritical final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleBattleCritical) == 0x000001, "Wrong alignment on TripleCheatManager_TripleBattleCritical");
static_assert(sizeof(TripleCheatManager_TripleBattleCritical) == 0x000001, "Wrong size on TripleCheatManager_TripleBattleCritical");
static_assert(offsetof(TripleCheatManager_TripleBattleCritical, Flag) == 0x000000, "Member 'TripleCheatManager_TripleBattleCritical::Flag' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleDeadMonster
// 0x0008 (0x0008 - 0x0000)
struct TripleCheatManager_TripleBattleDeadMonster final
{
public:
	int32                                         GroupIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleBattleDeadMonster) == 0x000004, "Wrong alignment on TripleCheatManager_TripleBattleDeadMonster");
static_assert(sizeof(TripleCheatManager_TripleBattleDeadMonster) == 0x000008, "Wrong size on TripleCheatManager_TripleBattleDeadMonster");
static_assert(offsetof(TripleCheatManager_TripleBattleDeadMonster, GroupIndex) == 0x000000, "Member 'TripleCheatManager_TripleBattleDeadMonster::GroupIndex' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleDeadMonster, Index_0) == 0x000004, "Member 'TripleCheatManager_TripleBattleDeadMonster::Index_0' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleDeadPlayer
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleBattleDeadPlayer final
{
public:
	int32                                         PlayerIdNum;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleBattleDeadPlayer) == 0x000004, "Wrong alignment on TripleCheatManager_TripleBattleDeadPlayer");
static_assert(sizeof(TripleCheatManager_TripleBattleDeadPlayer) == 0x000004, "Wrong size on TripleCheatManager_TripleBattleDeadPlayer");
static_assert(offsetof(TripleCheatManager_TripleBattleDeadPlayer, PlayerIdNum) == 0x000000, "Member 'TripleCheatManager_TripleBattleDeadPlayer::PlayerIdNum' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleEncountMonsterForceDropMonster
// 0x0001 (0x0001 - 0x0000)
struct TripleCheatManager_TripleBattleEncountMonsterForceDropMonster final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleBattleEncountMonsterForceDropMonster) == 0x000001, "Wrong alignment on TripleCheatManager_TripleBattleEncountMonsterForceDropMonster");
static_assert(sizeof(TripleCheatManager_TripleBattleEncountMonsterForceDropMonster) == 0x000001, "Wrong size on TripleCheatManager_TripleBattleEncountMonsterForceDropMonster");
static_assert(offsetof(TripleCheatManager_TripleBattleEncountMonsterForceDropMonster, Flag) == 0x000000, "Member 'TripleCheatManager_TripleBattleEncountMonsterForceDropMonster::Flag' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleEncountMonsterForceFirstAttack
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleBattleEncountMonsterForceFirstAttack final
{
public:
	int32                                         Kind;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleBattleEncountMonsterForceFirstAttack) == 0x000004, "Wrong alignment on TripleCheatManager_TripleBattleEncountMonsterForceFirstAttack");
static_assert(sizeof(TripleCheatManager_TripleBattleEncountMonsterForceFirstAttack) == 0x000004, "Wrong size on TripleCheatManager_TripleBattleEncountMonsterForceFirstAttack");
static_assert(offsetof(TripleCheatManager_TripleBattleEncountMonsterForceFirstAttack, Kind) == 0x000000, "Member 'TripleCheatManager_TripleBattleEncountMonsterForceFirstAttack::Kind' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleEncountMonsterForceMetal
// 0x0001 (0x0001 - 0x0000)
struct TripleCheatManager_TripleBattleEncountMonsterForceMetal final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleBattleEncountMonsterForceMetal) == 0x000001, "Wrong alignment on TripleCheatManager_TripleBattleEncountMonsterForceMetal");
static_assert(sizeof(TripleCheatManager_TripleBattleEncountMonsterForceMetal) == 0x000001, "Wrong size on TripleCheatManager_TripleBattleEncountMonsterForceMetal");
static_assert(offsetof(TripleCheatManager_TripleBattleEncountMonsterForceMetal, Flag) == 0x000000, "Member 'TripleCheatManager_TripleBattleEncountMonsterForceMetal::Flag' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleEncountMonsterForceTensei
// 0x0001 (0x0001 - 0x0000)
struct TripleCheatManager_TripleBattleEncountMonsterForceTensei final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleBattleEncountMonsterForceTensei) == 0x000001, "Wrong alignment on TripleCheatManager_TripleBattleEncountMonsterForceTensei");
static_assert(sizeof(TripleCheatManager_TripleBattleEncountMonsterForceTensei) == 0x000001, "Wrong size on TripleCheatManager_TripleBattleEncountMonsterForceTensei");
static_assert(offsetof(TripleCheatManager_TripleBattleEncountMonsterForceTensei, Flag) == 0x000000, "Member 'TripleCheatManager_TripleBattleEncountMonsterForceTensei::Flag' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleEncountMonsterSet
// 0x0018 (0x0018 - 0x0000)
struct TripleCheatManager_TripleBattleEncountMonsterSet final
{
public:
	class FString                                 MonsterID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TripleCheatManager_TripleBattleEncountMonsterSet) == 0x000008, "Wrong alignment on TripleCheatManager_TripleBattleEncountMonsterSet");
static_assert(sizeof(TripleCheatManager_TripleBattleEncountMonsterSet) == 0x000018, "Wrong size on TripleCheatManager_TripleBattleEncountMonsterSet");
static_assert(offsetof(TripleCheatManager_TripleBattleEncountMonsterSet, MonsterID) == 0x000000, "Member 'TripleCheatManager_TripleBattleEncountMonsterSet::MonsterID' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleEncountMonsterSet, Num) == 0x000010, "Member 'TripleCheatManager_TripleBattleEncountMonsterSet::Num' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleEncountMonsterSet2
// 0x0030 (0x0030 - 0x0000)
struct TripleCheatManager_TripleBattleEncountMonsterSet2 final
{
public:
	class FString                                 MonsterID0;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num0;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MonsterID1;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num1;                                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TripleCheatManager_TripleBattleEncountMonsterSet2) == 0x000008, "Wrong alignment on TripleCheatManager_TripleBattleEncountMonsterSet2");
static_assert(sizeof(TripleCheatManager_TripleBattleEncountMonsterSet2) == 0x000030, "Wrong size on TripleCheatManager_TripleBattleEncountMonsterSet2");
static_assert(offsetof(TripleCheatManager_TripleBattleEncountMonsterSet2, MonsterID0) == 0x000000, "Member 'TripleCheatManager_TripleBattleEncountMonsterSet2::MonsterID0' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleEncountMonsterSet2, Num0) == 0x000010, "Member 'TripleCheatManager_TripleBattleEncountMonsterSet2::Num0' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleEncountMonsterSet2, MonsterID1) == 0x000018, "Member 'TripleCheatManager_TripleBattleEncountMonsterSet2::MonsterID1' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleEncountMonsterSet2, Num1) == 0x000028, "Member 'TripleCheatManager_TripleBattleEncountMonsterSet2::Num1' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleEncountMonsterSet3
// 0x0048 (0x0048 - 0x0000)
struct TripleCheatManager_TripleBattleEncountMonsterSet3 final
{
public:
	class FString                                 MonsterID0;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num0;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MonsterID1;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num1;                                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MonsterID2;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num2;                                              // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TripleCheatManager_TripleBattleEncountMonsterSet3) == 0x000008, "Wrong alignment on TripleCheatManager_TripleBattleEncountMonsterSet3");
static_assert(sizeof(TripleCheatManager_TripleBattleEncountMonsterSet3) == 0x000048, "Wrong size on TripleCheatManager_TripleBattleEncountMonsterSet3");
static_assert(offsetof(TripleCheatManager_TripleBattleEncountMonsterSet3, MonsterID0) == 0x000000, "Member 'TripleCheatManager_TripleBattleEncountMonsterSet3::MonsterID0' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleEncountMonsterSet3, Num0) == 0x000010, "Member 'TripleCheatManager_TripleBattleEncountMonsterSet3::Num0' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleEncountMonsterSet3, MonsterID1) == 0x000018, "Member 'TripleCheatManager_TripleBattleEncountMonsterSet3::MonsterID1' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleEncountMonsterSet3, Num1) == 0x000028, "Member 'TripleCheatManager_TripleBattleEncountMonsterSet3::Num1' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleEncountMonsterSet3, MonsterID2) == 0x000030, "Member 'TripleCheatManager_TripleBattleEncountMonsterSet3::MonsterID2' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleEncountMonsterSet3, Num2) == 0x000040, "Member 'TripleCheatManager_TripleBattleEncountMonsterSet3::Num2' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleEncountMonsterSet4
// 0x0060 (0x0060 - 0x0000)
struct TripleCheatManager_TripleBattleEncountMonsterSet4 final
{
public:
	class FString                                 MonsterID0;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num0;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MonsterID1;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num1;                                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MonsterID2;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num2;                                              // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MonsterID3;                                        // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num3;                                              // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TripleCheatManager_TripleBattleEncountMonsterSet4) == 0x000008, "Wrong alignment on TripleCheatManager_TripleBattleEncountMonsterSet4");
static_assert(sizeof(TripleCheatManager_TripleBattleEncountMonsterSet4) == 0x000060, "Wrong size on TripleCheatManager_TripleBattleEncountMonsterSet4");
static_assert(offsetof(TripleCheatManager_TripleBattleEncountMonsterSet4, MonsterID0) == 0x000000, "Member 'TripleCheatManager_TripleBattleEncountMonsterSet4::MonsterID0' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleEncountMonsterSet4, Num0) == 0x000010, "Member 'TripleCheatManager_TripleBattleEncountMonsterSet4::Num0' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleEncountMonsterSet4, MonsterID1) == 0x000018, "Member 'TripleCheatManager_TripleBattleEncountMonsterSet4::MonsterID1' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleEncountMonsterSet4, Num1) == 0x000028, "Member 'TripleCheatManager_TripleBattleEncountMonsterSet4::Num1' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleEncountMonsterSet4, MonsterID2) == 0x000030, "Member 'TripleCheatManager_TripleBattleEncountMonsterSet4::MonsterID2' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleEncountMonsterSet4, Num2) == 0x000040, "Member 'TripleCheatManager_TripleBattleEncountMonsterSet4::Num2' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleEncountMonsterSet4, MonsterID3) == 0x000048, "Member 'TripleCheatManager_TripleBattleEncountMonsterSet4::MonsterID3' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleBattleEncountMonsterSet4, Num3) == 0x000058, "Member 'TripleCheatManager_TripleBattleEncountMonsterSet4::Num3' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleHazukasiiNoroiSetMessage
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleBattleHazukasiiNoroiSetMessage final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleBattleHazukasiiNoroiSetMessage) == 0x000004, "Wrong alignment on TripleCheatManager_TripleBattleHazukasiiNoroiSetMessage");
static_assert(sizeof(TripleCheatManager_TripleBattleHazukasiiNoroiSetMessage) == 0x000004, "Wrong size on TripleCheatManager_TripleBattleHazukasiiNoroiSetMessage");
static_assert(offsetof(TripleCheatManager_TripleBattleHazukasiiNoroiSetMessage, Index_0) == 0x000000, "Member 'TripleCheatManager_TripleBattleHazukasiiNoroiSetMessage::Index_0' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleMikawasi
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleBattleMikawasi final
{
public:
	int32                                         Kind;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleBattleMikawasi) == 0x000004, "Wrong alignment on TripleCheatManager_TripleBattleMikawasi");
static_assert(sizeof(TripleCheatManager_TripleBattleMikawasi) == 0x000004, "Wrong size on TripleCheatManager_TripleBattleMikawasi");
static_assert(offsetof(TripleCheatManager_TripleBattleMikawasi, Kind) == 0x000000, "Member 'TripleCheatManager_TripleBattleMikawasi::Kind' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleMiss
// 0x0001 (0x0001 - 0x0000)
struct TripleCheatManager_TripleBattleMiss final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleBattleMiss) == 0x000001, "Wrong alignment on TripleCheatManager_TripleBattleMiss");
static_assert(sizeof(TripleCheatManager_TripleBattleMiss) == 0x000001, "Wrong size on TripleCheatManager_TripleBattleMiss");
static_assert(offsetof(TripleCheatManager_TripleBattleMiss, Flag) == 0x000000, "Member 'TripleCheatManager_TripleBattleMiss::Flag' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleMitoreru
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleBattleMitoreru final
{
public:
	int32                                         Kind;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleBattleMitoreru) == 0x000004, "Wrong alignment on TripleCheatManager_TripleBattleMitoreru");
static_assert(sizeof(TripleCheatManager_TripleBattleMitoreru) == 0x000004, "Wrong size on TripleCheatManager_TripleBattleMitoreru");
static_assert(offsetof(TripleCheatManager_TripleBattleMitoreru, Kind) == 0x000000, "Member 'TripleCheatManager_TripleBattleMitoreru::Kind' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleNigeru
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleBattleNigeru final
{
public:
	int32                                         Kind;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleBattleNigeru) == 0x000004, "Wrong alignment on TripleCheatManager_TripleBattleNigeru");
static_assert(sizeof(TripleCheatManager_TripleBattleNigeru) == 0x000004, "Wrong size on TripleCheatManager_TripleBattleNigeru");
static_assert(offsetof(TripleCheatManager_TripleBattleNigeru, Kind) == 0x000000, "Member 'TripleCheatManager_TripleBattleNigeru::Kind' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleOddEffect
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleBattleOddEffect final
{
public:
	int32                                         Kind;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleBattleOddEffect) == 0x000004, "Wrong alignment on TripleCheatManager_TripleBattleOddEffect");
static_assert(sizeof(TripleCheatManager_TripleBattleOddEffect) == 0x000004, "Wrong size on TripleCheatManager_TripleBattleOddEffect");
static_assert(offsetof(TripleCheatManager_TripleBattleOddEffect, Kind) == 0x000000, "Member 'TripleCheatManager_TripleBattleOddEffect::Kind' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleSenseiKougeki
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleBattleSenseiKougeki final
{
public:
	int32                                         Kind;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleBattleSenseiKougeki) == 0x000004, "Wrong alignment on TripleCheatManager_TripleBattleSenseiKougeki");
static_assert(sizeof(TripleCheatManager_TripleBattleSenseiKougeki) == 0x000004, "Wrong size on TripleCheatManager_TripleBattleSenseiKougeki");
static_assert(offsetof(TripleCheatManager_TripleBattleSenseiKougeki, Kind) == 0x000000, "Member 'TripleCheatManager_TripleBattleSenseiKougeki::Kind' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleTateGuard
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleBattleTateGuard final
{
public:
	int32                                         Kind;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleBattleTateGuard) == 0x000004, "Wrong alignment on TripleCheatManager_TripleBattleTateGuard");
static_assert(sizeof(TripleCheatManager_TripleBattleTateGuard) == 0x000004, "Wrong size on TripleCheatManager_TripleBattleTateGuard");
static_assert(offsetof(TripleCheatManager_TripleBattleTateGuard, Kind) == 0x000000, "Member 'TripleCheatManager_TripleBattleTateGuard::Kind' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleBattleTurnSkip
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleBattleTurnSkip final
{
public:
	int32                                         Kind;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleBattleTurnSkip) == 0x000004, "Wrong alignment on TripleCheatManager_TripleBattleTurnSkip");
static_assert(sizeof(TripleCheatManager_TripleBattleTurnSkip) == 0x000004, "Wrong size on TripleCheatManager_TripleBattleTurnSkip");
static_assert(offsetof(TripleCheatManager_TripleBattleTurnSkip, Kind) == 0x000000, "Member 'TripleCheatManager_TripleBattleTurnSkip::Kind' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleExecDTCommand
// 0x0028 (0x0028 - 0x0000)
struct TripleCheatManager_TripleExecDTCommand final
{
public:
	class FString                                 Category;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value1;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value2;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Cmd;                                               // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleExecDTCommand) == 0x000008, "Wrong alignment on TripleCheatManager_TripleExecDTCommand");
static_assert(sizeof(TripleCheatManager_TripleExecDTCommand) == 0x000028, "Wrong size on TripleCheatManager_TripleExecDTCommand");
static_assert(offsetof(TripleCheatManager_TripleExecDTCommand, Category) == 0x000000, "Member 'TripleCheatManager_TripleExecDTCommand::Category' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleExecDTCommand, Value1) == 0x000010, "Member 'TripleCheatManager_TripleExecDTCommand::Value1' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleExecDTCommand, Value2) == 0x000014, "Member 'TripleCheatManager_TripleExecDTCommand::Value2' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleExecDTCommand, Cmd) == 0x000018, "Member 'TripleCheatManager_TripleExecDTCommand::Cmd' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleExecReincarnation
// 0x0010 (0x0010 - 0x0000)
struct TripleCheatManager_TripleExecReincarnation final
{
public:
	class FString                                 ReincarnationId;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleExecReincarnation) == 0x000008, "Wrong alignment on TripleCheatManager_TripleExecReincarnation");
static_assert(sizeof(TripleCheatManager_TripleExecReincarnation) == 0x000010, "Wrong size on TripleCheatManager_TripleExecReincarnation");
static_assert(offsetof(TripleCheatManager_TripleExecReincarnation, ReincarnationId) == 0x000000, "Member 'TripleCheatManager_TripleExecReincarnation::ReincarnationId' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleExecRevival
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleExecRevival final
{
public:
	int32                                         RevivalId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleExecRevival) == 0x000004, "Wrong alignment on TripleCheatManager_TripleExecRevival");
static_assert(sizeof(TripleCheatManager_TripleExecRevival) == 0x000004, "Wrong size on TripleCheatManager_TripleExecRevival");
static_assert(offsetof(TripleCheatManager_TripleExecRevival, RevivalId) == 0x000000, "Member 'TripleCheatManager_TripleExecRevival::RevivalId' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleForceAcquireAchievement
// 0x0010 (0x0010 - 0x0000)
struct TripleCheatManager_TripleForceAcquireAchievement final
{
public:
	class FString                                 AchievementID;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleForceAcquireAchievement) == 0x000008, "Wrong alignment on TripleCheatManager_TripleForceAcquireAchievement");
static_assert(sizeof(TripleCheatManager_TripleForceAcquireAchievement) == 0x000010, "Wrong size on TripleCheatManager_TripleForceAcquireAchievement");
static_assert(offsetof(TripleCheatManager_TripleForceAcquireAchievement, AchievementID) == 0x000000, "Member 'TripleCheatManager_TripleForceAcquireAchievement::AchievementID' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleForceAddCasinoCoinNum
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleForceAddCasinoCoinNum final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleForceAddCasinoCoinNum) == 0x000004, "Wrong alignment on TripleCheatManager_TripleForceAddCasinoCoinNum");
static_assert(sizeof(TripleCheatManager_TripleForceAddCasinoCoinNum) == 0x000004, "Wrong size on TripleCheatManager_TripleForceAddCasinoCoinNum");
static_assert(offsetof(TripleCheatManager_TripleForceAddCasinoCoinNum, Num) == 0x000000, "Member 'TripleCheatManager_TripleForceAddCasinoCoinNum::Num' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleForceAddSmallMedalNum
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleForceAddSmallMedalNum final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleForceAddSmallMedalNum) == 0x000004, "Wrong alignment on TripleCheatManager_TripleForceAddSmallMedalNum");
static_assert(sizeof(TripleCheatManager_TripleForceAddSmallMedalNum) == 0x000004, "Wrong size on TripleCheatManager_TripleForceAddSmallMedalNum");
static_assert(offsetof(TripleCheatManager_TripleForceAddSmallMedalNum, Num) == 0x000000, "Member 'TripleCheatManager_TripleForceAddSmallMedalNum::Num' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleForceDiscardItem
// 0x0010 (0x0010 - 0x0000)
struct TripleCheatManager_TripleForceDiscardItem final
{
public:
	class FString                                 ItemID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleForceDiscardItem) == 0x000008, "Wrong alignment on TripleCheatManager_TripleForceDiscardItem");
static_assert(sizeof(TripleCheatManager_TripleForceDiscardItem) == 0x000010, "Wrong size on TripleCheatManager_TripleForceDiscardItem");
static_assert(offsetof(TripleCheatManager_TripleForceDiscardItem, ItemID) == 0x000000, "Member 'TripleCheatManager_TripleForceDiscardItem::ItemID' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleForceGetItem
// 0x0018 (0x0018 - 0x0000)
struct TripleCheatManager_TripleForceGetItem final
{
public:
	class FString                                 ItemID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TripleCheatManager_TripleForceGetItem) == 0x000008, "Wrong alignment on TripleCheatManager_TripleForceGetItem");
static_assert(sizeof(TripleCheatManager_TripleForceGetItem) == 0x000018, "Wrong size on TripleCheatManager_TripleForceGetItem");
static_assert(offsetof(TripleCheatManager_TripleForceGetItem, ItemID) == 0x000000, "Member 'TripleCheatManager_TripleForceGetItem::ItemID' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleForceGetItem, Num) == 0x000010, "Member 'TripleCheatManager_TripleForceGetItem::Num' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleForceGetItemToBag
// 0x0018 (0x0018 - 0x0000)
struct TripleCheatManager_TripleForceGetItemToBag final
{
public:
	class FString                                 ItemID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TripleCheatManager_TripleForceGetItemToBag) == 0x000008, "Wrong alignment on TripleCheatManager_TripleForceGetItemToBag");
static_assert(sizeof(TripleCheatManager_TripleForceGetItemToBag) == 0x000018, "Wrong size on TripleCheatManager_TripleForceGetItemToBag");
static_assert(offsetof(TripleCheatManager_TripleForceGetItemToBag, ItemID) == 0x000000, "Member 'TripleCheatManager_TripleForceGetItemToBag::ItemID' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleForceGetItemToBag, Num) == 0x000010, "Member 'TripleCheatManager_TripleForceGetItemToBag::Num' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleForceLearningRecipeBookFromItemId
// 0x0010 (0x0010 - 0x0000)
struct TripleCheatManager_TripleForceLearningRecipeBookFromItemId final
{
public:
	class FString                                 ItemID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleForceLearningRecipeBookFromItemId) == 0x000008, "Wrong alignment on TripleCheatManager_TripleForceLearningRecipeBookFromItemId");
static_assert(sizeof(TripleCheatManager_TripleForceLearningRecipeBookFromItemId) == 0x000010, "Wrong size on TripleCheatManager_TripleForceLearningRecipeBookFromItemId");
static_assert(offsetof(TripleCheatManager_TripleForceLearningRecipeBookFromItemId, ItemID) == 0x000000, "Member 'TripleCheatManager_TripleForceLearningRecipeBookFromItemId::ItemID' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleForceRecordExecuteRenkei
// 0x0010 (0x0010 - 0x0000)
struct TripleCheatManager_TripleForceRecordExecuteRenkei final
{
public:
	class FString                                 RenkeiID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleForceRecordExecuteRenkei) == 0x000008, "Wrong alignment on TripleCheatManager_TripleForceRecordExecuteRenkei");
static_assert(sizeof(TripleCheatManager_TripleForceRecordExecuteRenkei) == 0x000010, "Wrong size on TripleCheatManager_TripleForceRecordExecuteRenkei");
static_assert(offsetof(TripleCheatManager_TripleForceRecordExecuteRenkei, RenkeiID) == 0x000000, "Member 'TripleCheatManager_TripleForceRecordExecuteRenkei::RenkeiID' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleForceRecordRideMonster
// 0x0010 (0x0010 - 0x0000)
struct TripleCheatManager_TripleForceRecordRideMonster final
{
public:
	class FString                                 EnemyID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleForceRecordRideMonster) == 0x000008, "Wrong alignment on TripleCheatManager_TripleForceRecordRideMonster");
static_assert(sizeof(TripleCheatManager_TripleForceRecordRideMonster) == 0x000010, "Wrong size on TripleCheatManager_TripleForceRecordRideMonster");
static_assert(offsetof(TripleCheatManager_TripleForceRecordRideMonster, EnemyID) == 0x000000, "Member 'TripleCheatManager_TripleForceRecordRideMonster::EnemyID' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleForceSetCampCount
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleForceSetCampCount final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleForceSetCampCount) == 0x000004, "Wrong alignment on TripleCheatManager_TripleForceSetCampCount");
static_assert(sizeof(TripleCheatManager_TripleForceSetCampCount) == 0x000004, "Wrong size on TripleCheatManager_TripleForceSetCampCount");
static_assert(offsetof(TripleCheatManager_TripleForceSetCampCount, Num) == 0x000000, "Member 'TripleCheatManager_TripleForceSetCampCount::Num' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleForceSetDefeatMonsterCount
// 0x0018 (0x0018 - 0x0000)
struct TripleCheatManager_TripleForceSetDefeatMonsterCount final
{
public:
	class FString                                 MonsterID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TripleCheatManager_TripleForceSetDefeatMonsterCount) == 0x000008, "Wrong alignment on TripleCheatManager_TripleForceSetDefeatMonsterCount");
static_assert(sizeof(TripleCheatManager_TripleForceSetDefeatMonsterCount) == 0x000018, "Wrong size on TripleCheatManager_TripleForceSetDefeatMonsterCount");
static_assert(offsetof(TripleCheatManager_TripleForceSetDefeatMonsterCount, MonsterID) == 0x000000, "Member 'TripleCheatManager_TripleForceSetDefeatMonsterCount::MonsterID' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleForceSetDefeatMonsterCount, Count) == 0x000010, "Member 'TripleCheatManager_TripleForceSetDefeatMonsterCount::Count' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleForceSetDefeatMonsterZukanCount
// 0x0008 (0x0008 - 0x0000)
struct TripleCheatManager_TripleForceSetDefeatMonsterZukanCount final
{
public:
	int32                                         MonsterZukanID;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleForceSetDefeatMonsterZukanCount) == 0x000004, "Wrong alignment on TripleCheatManager_TripleForceSetDefeatMonsterZukanCount");
static_assert(sizeof(TripleCheatManager_TripleForceSetDefeatMonsterZukanCount) == 0x000008, "Wrong size on TripleCheatManager_TripleForceSetDefeatMonsterZukanCount");
static_assert(offsetof(TripleCheatManager_TripleForceSetDefeatMonsterZukanCount, MonsterZukanID) == 0x000000, "Member 'TripleCheatManager_TripleForceSetDefeatMonsterZukanCount::MonsterZukanID' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleForceSetDefeatMonsterZukanCount, Count) == 0x000004, "Member 'TripleCheatManager_TripleForceSetDefeatMonsterZukanCount::Count' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleForceSetFusigikajiCreatedFlag
// 0x0018 (0x0018 - 0x0000)
struct TripleCheatManager_TripleForceSetFusigikajiCreatedFlag final
{
public:
	class FString                                 ItemID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TripleCheatManager_TripleForceSetFusigikajiCreatedFlag) == 0x000008, "Wrong alignment on TripleCheatManager_TripleForceSetFusigikajiCreatedFlag");
static_assert(sizeof(TripleCheatManager_TripleForceSetFusigikajiCreatedFlag) == 0x000018, "Wrong size on TripleCheatManager_TripleForceSetFusigikajiCreatedFlag");
static_assert(offsetof(TripleCheatManager_TripleForceSetFusigikajiCreatedFlag, ItemID) == 0x000000, "Member 'TripleCheatManager_TripleForceSetFusigikajiCreatedFlag::ItemID' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleForceSetFusigikajiCreatedFlag, Flag) == 0x000010, "Member 'TripleCheatManager_TripleForceSetFusigikajiCreatedFlag::Flag' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleForceSetFusigikajiPlayCount
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleForceSetFusigikajiPlayCount final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleForceSetFusigikajiPlayCount) == 0x000004, "Wrong alignment on TripleCheatManager_TripleForceSetFusigikajiPlayCount");
static_assert(sizeof(TripleCheatManager_TripleForceSetFusigikajiPlayCount) == 0x000004, "Wrong size on TripleCheatManager_TripleForceSetFusigikajiPlayCount");
static_assert(offsetof(TripleCheatManager_TripleForceSetFusigikajiPlayCount, Num) == 0x000000, "Member 'TripleCheatManager_TripleForceSetFusigikajiPlayCount::Num' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleForceSetFusigikajiRetryCount
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleForceSetFusigikajiRetryCount final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleForceSetFusigikajiRetryCount) == 0x000004, "Wrong alignment on TripleCheatManager_TripleForceSetFusigikajiRetryCount");
static_assert(sizeof(TripleCheatManager_TripleForceSetFusigikajiRetryCount) == 0x000004, "Wrong size on TripleCheatManager_TripleForceSetFusigikajiRetryCount");
static_assert(offsetof(TripleCheatManager_TripleForceSetFusigikajiRetryCount, Num) == 0x000000, "Member 'TripleCheatManager_TripleForceSetFusigikajiRetryCount::Num' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleForceSetFusigikajiSuccessCount
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleForceSetFusigikajiSuccessCount final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleForceSetFusigikajiSuccessCount) == 0x000004, "Wrong alignment on TripleCheatManager_TripleForceSetFusigikajiSuccessCount");
static_assert(sizeof(TripleCheatManager_TripleForceSetFusigikajiSuccessCount) == 0x000004, "Wrong size on TripleCheatManager_TripleForceSetFusigikajiSuccessCount");
static_assert(offsetof(TripleCheatManager_TripleForceSetFusigikajiSuccessCount, Num) == 0x000000, "Member 'TripleCheatManager_TripleForceSetFusigikajiSuccessCount::Num' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleForceSetGrassItemUseCount
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleForceSetGrassItemUseCount final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleForceSetGrassItemUseCount) == 0x000004, "Wrong alignment on TripleCheatManager_TripleForceSetGrassItemUseCount");
static_assert(sizeof(TripleCheatManager_TripleForceSetGrassItemUseCount) == 0x000004, "Wrong size on TripleCheatManager_TripleForceSetGrassItemUseCount");
static_assert(offsetof(TripleCheatManager_TripleForceSetGrassItemUseCount, Num) == 0x000000, "Member 'TripleCheatManager_TripleForceSetGrassItemUseCount::Num' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleForceSetInnStayCount
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleForceSetInnStayCount final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleForceSetInnStayCount) == 0x000004, "Wrong alignment on TripleCheatManager_TripleForceSetInnStayCount");
static_assert(sizeof(TripleCheatManager_TripleForceSetInnStayCount) == 0x000004, "Wrong size on TripleCheatManager_TripleForceSetInnStayCount");
static_assert(offsetof(TripleCheatManager_TripleForceSetInnStayCount, Num) == 0x000000, "Member 'TripleCheatManager_TripleForceSetInnStayCount::Num' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleForceSetObjectDestructionCount
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleForceSetObjectDestructionCount final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleForceSetObjectDestructionCount) == 0x000004, "Wrong alignment on TripleCheatManager_TripleForceSetObjectDestructionCount");
static_assert(sizeof(TripleCheatManager_TripleForceSetObjectDestructionCount) == 0x000004, "Wrong size on TripleCheatManager_TripleForceSetObjectDestructionCount");
static_assert(offsetof(TripleCheatManager_TripleForceSetObjectDestructionCount, Num) == 0x000000, "Member 'TripleCheatManager_TripleForceSetObjectDestructionCount::Num' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleForceSetRenkeiUseCount
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleForceSetRenkeiUseCount final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleForceSetRenkeiUseCount) == 0x000004, "Wrong alignment on TripleCheatManager_TripleForceSetRenkeiUseCount");
static_assert(sizeof(TripleCheatManager_TripleForceSetRenkeiUseCount) == 0x000004, "Wrong size on TripleCheatManager_TripleForceSetRenkeiUseCount");
static_assert(offsetof(TripleCheatManager_TripleForceSetRenkeiUseCount, Num) == 0x000000, "Member 'TripleCheatManager_TripleForceSetRenkeiUseCount::Num' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleForceSetSibariPlayFlag
// 0x0008 (0x0008 - 0x0000)
struct TripleCheatManager_TripleForceSetSibariPlayFlag final
{
public:
	int32                                         Kind;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Valid;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TripleCheatManager_TripleForceSetSibariPlayFlag) == 0x000004, "Wrong alignment on TripleCheatManager_TripleForceSetSibariPlayFlag");
static_assert(sizeof(TripleCheatManager_TripleForceSetSibariPlayFlag) == 0x000008, "Wrong size on TripleCheatManager_TripleForceSetSibariPlayFlag");
static_assert(offsetof(TripleCheatManager_TripleForceSetSibariPlayFlag, Kind) == 0x000000, "Member 'TripleCheatManager_TripleForceSetSibariPlayFlag::Kind' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleForceSetSibariPlayFlag, Valid) == 0x000004, "Member 'TripleCheatManager_TripleForceSetSibariPlayFlag::Valid' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleFriendJoin
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleFriendJoin final
{
public:
	int32                                         PlayerIdNum;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleFriendJoin) == 0x000004, "Wrong alignment on TripleCheatManager_TripleFriendJoin");
static_assert(sizeof(TripleCheatManager_TripleFriendJoin) == 0x000004, "Wrong size on TripleCheatManager_TripleFriendJoin");
static_assert(offsetof(TripleCheatManager_TripleFriendJoin, PlayerIdNum) == 0x000000, "Member 'TripleCheatManager_TripleFriendJoin::PlayerIdNum' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleFriendLeave
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleFriendLeave final
{
public:
	int32                                         PlayerIdNum;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleFriendLeave) == 0x000004, "Wrong alignment on TripleCheatManager_TripleFriendLeave");
static_assert(sizeof(TripleCheatManager_TripleFriendLeave) == 0x000004, "Wrong size on TripleCheatManager_TripleFriendLeave");
static_assert(offsetof(TripleCheatManager_TripleFriendLeave, PlayerIdNum) == 0x000000, "Member 'TripleCheatManager_TripleFriendLeave::PlayerIdNum' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleGold
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleGold final
{
public:
	int32                                         AddNum;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleGold) == 0x000004, "Wrong alignment on TripleCheatManager_TripleGold");
static_assert(sizeof(TripleCheatManager_TripleGold) == 0x000004, "Wrong size on TripleCheatManager_TripleGold");
static_assert(offsetof(TripleCheatManager_TripleGold, AddNum) == 0x000000, "Member 'TripleCheatManager_TripleGold::AddNum' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleHpSet
// 0x0018 (0x0018 - 0x0000)
struct TripleCheatManager_TripleHpSet final
{
public:
	class FString                                 CharaID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HP;                                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TripleCheatManager_TripleHpSet) == 0x000008, "Wrong alignment on TripleCheatManager_TripleHpSet");
static_assert(sizeof(TripleCheatManager_TripleHpSet) == 0x000018, "Wrong size on TripleCheatManager_TripleHpSet");
static_assert(offsetof(TripleCheatManager_TripleHpSet, CharaID) == 0x000000, "Member 'TripleCheatManager_TripleHpSet::CharaID' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleHpSet, HP) == 0x000010, "Member 'TripleCheatManager_TripleHpSet::HP' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleLevelSet
// 0x0018 (0x0018 - 0x0000)
struct TripleCheatManager_TripleLevelSet final
{
public:
	class FString                                 CharaID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lv;                                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TripleCheatManager_TripleLevelSet) == 0x000008, "Wrong alignment on TripleCheatManager_TripleLevelSet");
static_assert(sizeof(TripleCheatManager_TripleLevelSet) == 0x000018, "Wrong size on TripleCheatManager_TripleLevelSet");
static_assert(offsetof(TripleCheatManager_TripleLevelSet, CharaID) == 0x000000, "Member 'TripleCheatManager_TripleLevelSet::CharaID' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleLevelSet, Lv) == 0x000010, "Member 'TripleCheatManager_TripleLevelSet::Lv' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleMpSet
// 0x0018 (0x0018 - 0x0000)
struct TripleCheatManager_TripleMpSet final
{
public:
	class FString                                 CharaID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MP;                                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TripleCheatManager_TripleMpSet) == 0x000008, "Wrong alignment on TripleCheatManager_TripleMpSet");
static_assert(sizeof(TripleCheatManager_TripleMpSet) == 0x000018, "Wrong size on TripleCheatManager_TripleMpSet");
static_assert(offsetof(TripleCheatManager_TripleMpSet, CharaID) == 0x000000, "Member 'TripleCheatManager_TripleMpSet::CharaID' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleMpSet, MP) == 0x000010, "Member 'TripleCheatManager_TripleMpSet::MP' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleMugenMP
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleMugenMP final
{
public:
	int32                                         Kind;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleMugenMP) == 0x000004, "Wrong alignment on TripleCheatManager_TripleMugenMP");
static_assert(sizeof(TripleCheatManager_TripleMugenMP) == 0x000004, "Wrong size on TripleCheatManager_TripleMugenMP");
static_assert(offsetof(TripleCheatManager_TripleMugenMP, Kind) == 0x000000, "Member 'TripleCheatManager_TripleMugenMP::Kind' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleOddEffectClearBadMonster
// 0x0008 (0x0008 - 0x0000)
struct TripleCheatManager_TripleOddEffectClearBadMonster final
{
public:
	int32                                         GroupIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleOddEffectClearBadMonster) == 0x000004, "Wrong alignment on TripleCheatManager_TripleOddEffectClearBadMonster");
static_assert(sizeof(TripleCheatManager_TripleOddEffectClearBadMonster) == 0x000008, "Wrong size on TripleCheatManager_TripleOddEffectClearBadMonster");
static_assert(offsetof(TripleCheatManager_TripleOddEffectClearBadMonster, GroupIndex) == 0x000000, "Member 'TripleCheatManager_TripleOddEffectClearBadMonster::GroupIndex' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleOddEffectClearBadMonster, Index_0) == 0x000004, "Member 'TripleCheatManager_TripleOddEffectClearBadMonster::Index_0' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleOddEffectClearBadPlayer
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleOddEffectClearBadPlayer final
{
public:
	int32                                         PlayerIdNum;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleOddEffectClearBadPlayer) == 0x000004, "Wrong alignment on TripleCheatManager_TripleOddEffectClearBadPlayer");
static_assert(sizeof(TripleCheatManager_TripleOddEffectClearBadPlayer) == 0x000004, "Wrong size on TripleCheatManager_TripleOddEffectClearBadPlayer");
static_assert(offsetof(TripleCheatManager_TripleOddEffectClearBadPlayer, PlayerIdNum) == 0x000000, "Member 'TripleCheatManager_TripleOddEffectClearBadPlayer::PlayerIdNum' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleOddEffectClearGoodMonster
// 0x0008 (0x0008 - 0x0000)
struct TripleCheatManager_TripleOddEffectClearGoodMonster final
{
public:
	int32                                         GroupIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleOddEffectClearGoodMonster) == 0x000004, "Wrong alignment on TripleCheatManager_TripleOddEffectClearGoodMonster");
static_assert(sizeof(TripleCheatManager_TripleOddEffectClearGoodMonster) == 0x000008, "Wrong size on TripleCheatManager_TripleOddEffectClearGoodMonster");
static_assert(offsetof(TripleCheatManager_TripleOddEffectClearGoodMonster, GroupIndex) == 0x000000, "Member 'TripleCheatManager_TripleOddEffectClearGoodMonster::GroupIndex' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleOddEffectClearGoodMonster, Index_0) == 0x000004, "Member 'TripleCheatManager_TripleOddEffectClearGoodMonster::Index_0' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleOddEffectClearGoodPlayer
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleOddEffectClearGoodPlayer final
{
public:
	int32                                         PlayerIdNum;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleOddEffectClearGoodPlayer) == 0x000004, "Wrong alignment on TripleCheatManager_TripleOddEffectClearGoodPlayer");
static_assert(sizeof(TripleCheatManager_TripleOddEffectClearGoodPlayer) == 0x000004, "Wrong size on TripleCheatManager_TripleOddEffectClearGoodPlayer");
static_assert(offsetof(TripleCheatManager_TripleOddEffectClearGoodPlayer, PlayerIdNum) == 0x000000, "Member 'TripleCheatManager_TripleOddEffectClearGoodPlayer::PlayerIdNum' has a wrong offset!");

// Function Triple.TripleCheatManager.TriplePrintText
// 0x0010 (0x0010 - 0x0000)
struct TripleCheatManager_TriplePrintText final
{
public:
	class FString                                 InTextId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TriplePrintText) == 0x000008, "Wrong alignment on TripleCheatManager_TriplePrintText");
static_assert(sizeof(TripleCheatManager_TriplePrintText) == 0x000010, "Wrong size on TripleCheatManager_TriplePrintText");
static_assert(offsetof(TripleCheatManager_TriplePrintText, InTextId) == 0x000000, "Member 'TripleCheatManager_TriplePrintText::InTextId' has a wrong offset!");

// Function Triple.TripleCheatManager.TriplePrintTextArgs
// 0x0010 (0x0010 - 0x0000)
struct TripleCheatManager_TriplePrintTextArgs final
{
public:
	TArray<class FString>                         ParamList;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TriplePrintTextArgs) == 0x000008, "Wrong alignment on TripleCheatManager_TriplePrintTextArgs");
static_assert(sizeof(TripleCheatManager_TriplePrintTextArgs) == 0x000010, "Wrong size on TripleCheatManager_TriplePrintTextArgs");
static_assert(offsetof(TripleCheatManager_TriplePrintTextArgs, ParamList) == 0x000000, "Member 'TripleCheatManager_TriplePrintTextArgs::ParamList' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleQuestProgressSetEnd
// 0x0010 (0x0010 - 0x0000)
struct TripleCheatManager_TripleQuestProgressSetEnd final
{
public:
	class FString                                 QuestId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleQuestProgressSetEnd) == 0x000008, "Wrong alignment on TripleCheatManager_TripleQuestProgressSetEnd");
static_assert(sizeof(TripleCheatManager_TripleQuestProgressSetEnd) == 0x000010, "Wrong size on TripleCheatManager_TripleQuestProgressSetEnd");
static_assert(offsetof(TripleCheatManager_TripleQuestProgressSetEnd, QuestId) == 0x000000, "Member 'TripleCheatManager_TripleQuestProgressSetEnd::QuestId' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleRunRate
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleRunRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleRunRate) == 0x000004, "Wrong alignment on TripleCheatManager_TripleRunRate");
static_assert(sizeof(TripleCheatManager_TripleRunRate) == 0x000004, "Wrong size on TripleCheatManager_TripleRunRate");
static_assert(offsetof(TripleCheatManager_TripleRunRate, Rate) == 0x000000, "Member 'TripleCheatManager_TripleRunRate::Rate' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleSetBattleVictory
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleSetBattleVictory final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleSetBattleVictory) == 0x000004, "Wrong alignment on TripleCheatManager_TripleSetBattleVictory");
static_assert(sizeof(TripleCheatManager_TripleSetBattleVictory) == 0x000004, "Wrong size on TripleCheatManager_TripleSetBattleVictory");
static_assert(offsetof(TripleCheatManager_TripleSetBattleVictory, Count) == 0x000000, "Member 'TripleCheatManager_TripleSetBattleVictory::Count' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleSetGameplayTime
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleSetGameplayTime final
{
public:
	int32                                         Sec;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleSetGameplayTime) == 0x000004, "Wrong alignment on TripleCheatManager_TripleSetGameplayTime");
static_assert(sizeof(TripleCheatManager_TripleSetGameplayTime) == 0x000004, "Wrong size on TripleCheatManager_TripleSetGameplayTime");
static_assert(offsetof(TripleCheatManager_TripleSetGameplayTime, Sec) == 0x000000, "Member 'TripleCheatManager_TripleSetGameplayTime::Sec' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleSetTalker
// 0x0010 (0x0010 - 0x0000)
struct TripleCheatManager_TripleSetTalker final
{
public:
	class FString                                 InNpcId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleSetTalker) == 0x000008, "Wrong alignment on TripleCheatManager_TripleSetTalker");
static_assert(sizeof(TripleCheatManager_TripleSetTalker) == 0x000010, "Wrong size on TripleCheatManager_TripleSetTalker");
static_assert(offsetof(TripleCheatManager_TripleSetTalker, InNpcId) == 0x000000, "Member 'TripleCheatManager_TripleSetTalker::InNpcId' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleSetTalkerName
// 0x0010 (0x0010 - 0x0000)
struct TripleCheatManager_TripleSetTalkerName final
{
public:
	class FString                                 InNpcName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleSetTalkerName) == 0x000008, "Wrong alignment on TripleCheatManager_TripleSetTalkerName");
static_assert(sizeof(TripleCheatManager_TripleSetTalkerName) == 0x000010, "Wrong size on TripleCheatManager_TripleSetTalkerName");
static_assert(offsetof(TripleCheatManager_TripleSetTalkerName, InNpcName) == 0x000000, "Member 'TripleCheatManager_TripleSetTalkerName::InNpcName' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleSkillJumonOpen
// 0x0010 (0x0010 - 0x0000)
struct TripleCheatManager_TripleSkillJumonOpen final
{
public:
	class FString                                 SkillJumonID;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleSkillJumonOpen) == 0x000008, "Wrong alignment on TripleCheatManager_TripleSkillJumonOpen");
static_assert(sizeof(TripleCheatManager_TripleSkillJumonOpen) == 0x000010, "Wrong size on TripleCheatManager_TripleSkillJumonOpen");
static_assert(offsetof(TripleCheatManager_TripleSkillJumonOpen, SkillJumonID) == 0x000000, "Member 'TripleCheatManager_TripleSkillJumonOpen::SkillJumonID' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleSkillOpen
// 0x0010 (0x0010 - 0x0000)
struct TripleCheatManager_TripleSkillOpen final
{
public:
	class FString                                 SkillID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleSkillOpen) == 0x000008, "Wrong alignment on TripleCheatManager_TripleSkillOpen");
static_assert(sizeof(TripleCheatManager_TripleSkillOpen) == 0x000010, "Wrong size on TripleCheatManager_TripleSkillOpen");
static_assert(offsetof(TripleCheatManager_TripleSkillOpen, SkillID) == 0x000000, "Member 'TripleCheatManager_TripleSkillOpen::SkillID' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleSkillOpen2
// 0x0018 (0x0018 - 0x0000)
struct TripleCheatManager_TripleSkillOpen2 final
{
public:
	class FString                                 SkillID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TripleCheatManager_TripleSkillOpen2) == 0x000008, "Wrong alignment on TripleCheatManager_TripleSkillOpen2");
static_assert(sizeof(TripleCheatManager_TripleSkillOpen2) == 0x000018, "Wrong size on TripleCheatManager_TripleSkillOpen2");
static_assert(offsetof(TripleCheatManager_TripleSkillOpen2, SkillID) == 0x000000, "Member 'TripleCheatManager_TripleSkillOpen2::SkillID' has a wrong offset!");
static_assert(offsetof(TripleCheatManager_TripleSkillOpen2, PlayerId) == 0x000010, "Member 'TripleCheatManager_TripleSkillOpen2::PlayerId' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleSkillPassiveOpen
// 0x0010 (0x0010 - 0x0000)
struct TripleCheatManager_TripleSkillPassiveOpen final
{
public:
	class FString                                 SkillPassiveID;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleSkillPassiveOpen) == 0x000008, "Wrong alignment on TripleCheatManager_TripleSkillPassiveOpen");
static_assert(sizeof(TripleCheatManager_TripleSkillPassiveOpen) == 0x000010, "Wrong size on TripleCheatManager_TripleSkillPassiveOpen");
static_assert(offsetof(TripleCheatManager_TripleSkillPassiveOpen, SkillPassiveID) == 0x000000, "Member 'TripleCheatManager_TripleSkillPassiveOpen::SkillPassiveID' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleTimeZoneOverride
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleTimeZoneOverride final
{
public:
	int32                                         Timezone;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleTimeZoneOverride) == 0x000004, "Wrong alignment on TripleCheatManager_TripleTimeZoneOverride");
static_assert(sizeof(TripleCheatManager_TripleTimeZoneOverride) == 0x000004, "Wrong size on TripleCheatManager_TripleTimeZoneOverride");
static_assert(offsetof(TripleCheatManager_TripleTimeZoneOverride, Timezone) == 0x000000, "Member 'TripleCheatManager_TripleTimeZoneOverride::Timezone' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleTrophiesCompleteWait
// 0x0001 (0x0001 - 0x0000)
struct TripleCheatManager_TripleTrophiesCompleteWait final
{
public:
	bool                                          bIsWaitMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleTrophiesCompleteWait) == 0x000001, "Wrong alignment on TripleCheatManager_TripleTrophiesCompleteWait");
static_assert(sizeof(TripleCheatManager_TripleTrophiesCompleteWait) == 0x000001, "Wrong size on TripleCheatManager_TripleTrophiesCompleteWait");
static_assert(offsetof(TripleCheatManager_TripleTrophiesCompleteWait, bIsWaitMode) == 0x000000, "Member 'TripleCheatManager_TripleTrophiesCompleteWait::bIsWaitMode' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleTrophiesNew
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleTrophiesNew final
{
public:
	int32                                         InTestNumber;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleTrophiesNew) == 0x000004, "Wrong alignment on TripleCheatManager_TripleTrophiesNew");
static_assert(sizeof(TripleCheatManager_TripleTrophiesNew) == 0x000004, "Wrong size on TripleCheatManager_TripleTrophiesNew");
static_assert(offsetof(TripleCheatManager_TripleTrophiesNew, InTestNumber) == 0x000000, "Member 'TripleCheatManager_TripleTrophiesNew::InTestNumber' has a wrong offset!");

// Function Triple.TripleCheatManager.TripleWeatherSet
// 0x0004 (0x0004 - 0x0000)
struct TripleCheatManager_TripleWeatherSet final
{
public:
	int32                                         Kind;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TripleCheatManager_TripleWeatherSet) == 0x000004, "Wrong alignment on TripleCheatManager_TripleWeatherSet");
static_assert(sizeof(TripleCheatManager_TripleWeatherSet) == 0x000004, "Wrong size on TripleCheatManager_TripleWeatherSet");
static_assert(offsetof(TripleCheatManager_TripleWeatherSet, Kind) == 0x000000, "Member 'TripleCheatManager_TripleWeatherSet::Kind' has a wrong offset!");

}

