#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TimeChangeFogBase

#include "Basic.hpp"

#include "JackGame_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_TimeChangeFogBase.BP_TimeChangeFogBase_C.ExecuteUbergraph_BP_TimeChangeFogBase_1
// 0x0004 (0x0004 - 0x0000)
struct BP_TimeChangeFogBase_C_ExecuteUbergraph_BP_TimeChangeFogBase_1 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_TimeChangeFogBase_C_ExecuteUbergraph_BP_TimeChangeFogBase_1) == 0x000004, "Wrong alignment on BP_TimeChangeFogBase_C_ExecuteUbergraph_BP_TimeChangeFogBase_1");
static_assert(sizeof(BP_TimeChangeFogBase_C_ExecuteUbergraph_BP_TimeChangeFogBase_1) == 0x000004, "Wrong size on BP_TimeChangeFogBase_C_ExecuteUbergraph_BP_TimeChangeFogBase_1");
static_assert(offsetof(BP_TimeChangeFogBase_C_ExecuteUbergraph_BP_TimeChangeFogBase_1, bpp__EntryPoint__pf) == 0x000000, "Member 'BP_TimeChangeFogBase_C_ExecuteUbergraph_BP_TimeChangeFogBase_1::bpp__EntryPoint__pf' has a wrong offset!");

// Function BP_TimeChangeFogBase.BP_TimeChangeFogBase_C.GetNowColorWeatherCalc
// 0x0038 (0x0038 - 0x0000)
struct BP_TimeChangeFogBase_C_GetNowColorWeatherCalc final
{
public:
	struct FLinearColor                           bpp__OldColor__pf;                                 // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   bpp__NewColor__pf;                                 // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         bpp__Rate__pf;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__Time__pf;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__Color__pf;                                    // 0x0028(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_TimeChangeFogBase_C_GetNowColorWeatherCalc) == 0x000008, "Wrong alignment on BP_TimeChangeFogBase_C_GetNowColorWeatherCalc");
static_assert(sizeof(BP_TimeChangeFogBase_C_GetNowColorWeatherCalc) == 0x000038, "Wrong size on BP_TimeChangeFogBase_C_GetNowColorWeatherCalc");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowColorWeatherCalc, bpp__OldColor__pf) == 0x000000, "Member 'BP_TimeChangeFogBase_C_GetNowColorWeatherCalc::bpp__OldColor__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowColorWeatherCalc, bpp__NewColor__pf) == 0x000010, "Member 'BP_TimeChangeFogBase_C_GetNowColorWeatherCalc::bpp__NewColor__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowColorWeatherCalc, bpp__Rate__pf) == 0x000020, "Member 'BP_TimeChangeFogBase_C_GetNowColorWeatherCalc::bpp__Rate__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowColorWeatherCalc, bpp__Time__pf) == 0x000024, "Member 'BP_TimeChangeFogBase_C_GetNowColorWeatherCalc::bpp__Time__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowColorWeatherCalc, bpp__Color__pf) == 0x000028, "Member 'BP_TimeChangeFogBase_C_GetNowColorWeatherCalc::bpp__Color__pf' has a wrong offset!");

// Function BP_TimeChangeFogBase.BP_TimeChangeFogBase_C.GetNowFloatWeatherCalc
// 0x0028 (0x0028 - 0x0000)
struct BP_TimeChangeFogBase_C_GetNowFloatWeatherCalc final
{
public:
	float                                         bpp__OldFloat__pf;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 bpp__NewFloat__pf;                                 // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         bpp__Rate__pf;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__Time__pf;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Float__pf;                                    // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_TimeChangeFogBase_C_GetNowFloatWeatherCalc) == 0x000008, "Wrong alignment on BP_TimeChangeFogBase_C_GetNowFloatWeatherCalc");
static_assert(sizeof(BP_TimeChangeFogBase_C_GetNowFloatWeatherCalc) == 0x000028, "Wrong size on BP_TimeChangeFogBase_C_GetNowFloatWeatherCalc");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFloatWeatherCalc, bpp__OldFloat__pf) == 0x000000, "Member 'BP_TimeChangeFogBase_C_GetNowFloatWeatherCalc::bpp__OldFloat__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFloatWeatherCalc, bpp__NewFloat__pf) == 0x000008, "Member 'BP_TimeChangeFogBase_C_GetNowFloatWeatherCalc::bpp__NewFloat__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFloatWeatherCalc, bpp__Rate__pf) == 0x000018, "Member 'BP_TimeChangeFogBase_C_GetNowFloatWeatherCalc::bpp__Rate__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFloatWeatherCalc, bpp__Time__pf) == 0x00001C, "Member 'BP_TimeChangeFogBase_C_GetNowFloatWeatherCalc::bpp__Time__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFloatWeatherCalc, bpp__Float__pf) == 0x000020, "Member 'BP_TimeChangeFogBase_C_GetNowFloatWeatherCalc::bpp__Float__pf' has a wrong offset!");

// Function BP_TimeChangeFogBase.BP_TimeChangeFogBase_C.GetNowFogParameter
// 0x0068 (0x0068 - 0x0000)
struct BP_TimeChangeFogBase_C_GetNowFogParameter final
{
public:
	int32                                         bpp__GameTime__pf;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__SunMultiplier__pf;                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__FogMultiplier__pf;                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__DensityMultiplier__pf;                        // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__DistanceScale__pf;                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__AltitudeScale__pf;                            // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__DistanceOffset__pf;                           // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__GroundOffset__pf;                             // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__StartDistance__pf;                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__DefaultBrightness__pf;                        // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__DefaultLightColor__pf;                        // 0x0028(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__FogDensity__pf;                               // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           bpp__FogInscatteringColor__pf;                     // 0x003C(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__FogHeightFalloff__pf;                         // 0x004C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__HeightFogStartDistance__pf;                   // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__FogMaxOpacity__pf;                            // 0x0054(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__ZOffset__pf;                                  // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__DepthEdgeDistance__pf;                        // 0x005C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__HeightFogFalloffOffset__pf;                   // 0x0060(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__StartDistanceOffset__pf;                      // 0x0064(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_TimeChangeFogBase_C_GetNowFogParameter) == 0x000004, "Wrong alignment on BP_TimeChangeFogBase_C_GetNowFogParameter");
static_assert(sizeof(BP_TimeChangeFogBase_C_GetNowFogParameter) == 0x000068, "Wrong size on BP_TimeChangeFogBase_C_GetNowFogParameter");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFogParameter, bpp__GameTime__pf) == 0x000000, "Member 'BP_TimeChangeFogBase_C_GetNowFogParameter::bpp__GameTime__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFogParameter, bpp__SunMultiplier__pf) == 0x000004, "Member 'BP_TimeChangeFogBase_C_GetNowFogParameter::bpp__SunMultiplier__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFogParameter, bpp__FogMultiplier__pf) == 0x000008, "Member 'BP_TimeChangeFogBase_C_GetNowFogParameter::bpp__FogMultiplier__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFogParameter, bpp__DensityMultiplier__pf) == 0x00000C, "Member 'BP_TimeChangeFogBase_C_GetNowFogParameter::bpp__DensityMultiplier__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFogParameter, bpp__DistanceScale__pf) == 0x000010, "Member 'BP_TimeChangeFogBase_C_GetNowFogParameter::bpp__DistanceScale__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFogParameter, bpp__AltitudeScale__pf) == 0x000014, "Member 'BP_TimeChangeFogBase_C_GetNowFogParameter::bpp__AltitudeScale__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFogParameter, bpp__DistanceOffset__pf) == 0x000018, "Member 'BP_TimeChangeFogBase_C_GetNowFogParameter::bpp__DistanceOffset__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFogParameter, bpp__GroundOffset__pf) == 0x00001C, "Member 'BP_TimeChangeFogBase_C_GetNowFogParameter::bpp__GroundOffset__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFogParameter, bpp__StartDistance__pf) == 0x000020, "Member 'BP_TimeChangeFogBase_C_GetNowFogParameter::bpp__StartDistance__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFogParameter, bpp__DefaultBrightness__pf) == 0x000024, "Member 'BP_TimeChangeFogBase_C_GetNowFogParameter::bpp__DefaultBrightness__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFogParameter, bpp__DefaultLightColor__pf) == 0x000028, "Member 'BP_TimeChangeFogBase_C_GetNowFogParameter::bpp__DefaultLightColor__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFogParameter, bpp__FogDensity__pf) == 0x000038, "Member 'BP_TimeChangeFogBase_C_GetNowFogParameter::bpp__FogDensity__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFogParameter, bpp__FogInscatteringColor__pf) == 0x00003C, "Member 'BP_TimeChangeFogBase_C_GetNowFogParameter::bpp__FogInscatteringColor__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFogParameter, bpp__FogHeightFalloff__pf) == 0x00004C, "Member 'BP_TimeChangeFogBase_C_GetNowFogParameter::bpp__FogHeightFalloff__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFogParameter, bpp__HeightFogStartDistance__pf) == 0x000050, "Member 'BP_TimeChangeFogBase_C_GetNowFogParameter::bpp__HeightFogStartDistance__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFogParameter, bpp__FogMaxOpacity__pf) == 0x000054, "Member 'BP_TimeChangeFogBase_C_GetNowFogParameter::bpp__FogMaxOpacity__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFogParameter, bpp__ZOffset__pf) == 0x000058, "Member 'BP_TimeChangeFogBase_C_GetNowFogParameter::bpp__ZOffset__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFogParameter, bpp__DepthEdgeDistance__pf) == 0x00005C, "Member 'BP_TimeChangeFogBase_C_GetNowFogParameter::bpp__DepthEdgeDistance__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFogParameter, bpp__HeightFogFalloffOffset__pf) == 0x000060, "Member 'BP_TimeChangeFogBase_C_GetNowFogParameter::bpp__HeightFogFalloffOffset__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_GetNowFogParameter, bpp__StartDistanceOffset__pf) == 0x000064, "Member 'BP_TimeChangeFogBase_C_GetNowFogParameter::bpp__StartDistanceOffset__pf' has a wrong offset!");

// Function BP_TimeChangeFogBase.BP_TimeChangeFogBase_C.SetFogWeather
// 0x0008 (0x0008 - 0x0000)
struct BP_TimeChangeFogBase_C_SetFogWeather final
{
public:
	EJackWorldWeather                             bpp__NewWeather__pf;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         bpp__WeatherChangeRate__pf;                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_TimeChangeFogBase_C_SetFogWeather) == 0x000004, "Wrong alignment on BP_TimeChangeFogBase_C_SetFogWeather");
static_assert(sizeof(BP_TimeChangeFogBase_C_SetFogWeather) == 0x000008, "Wrong size on BP_TimeChangeFogBase_C_SetFogWeather");
static_assert(offsetof(BP_TimeChangeFogBase_C_SetFogWeather, bpp__NewWeather__pf) == 0x000000, "Member 'BP_TimeChangeFogBase_C_SetFogWeather::bpp__NewWeather__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_SetFogWeather, bpp__WeatherChangeRate__pf) == 0x000004, "Member 'BP_TimeChangeFogBase_C_SetFogWeather::bpp__WeatherChangeRate__pf' has a wrong offset!");

// Function BP_TimeChangeFogBase.BP_TimeChangeFogBase_C.UpdateEnvironment
// 0x0008 (0x0008 - 0x0000)
struct BP_TimeChangeFogBase_C_UpdateEnvironment final
{
public:
	int32                                         bpp__Time__pf;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__UpdateCounter__pf;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_TimeChangeFogBase_C_UpdateEnvironment) == 0x000004, "Wrong alignment on BP_TimeChangeFogBase_C_UpdateEnvironment");
static_assert(sizeof(BP_TimeChangeFogBase_C_UpdateEnvironment) == 0x000008, "Wrong size on BP_TimeChangeFogBase_C_UpdateEnvironment");
static_assert(offsetof(BP_TimeChangeFogBase_C_UpdateEnvironment, bpp__Time__pf) == 0x000000, "Member 'BP_TimeChangeFogBase_C_UpdateEnvironment::bpp__Time__pf' has a wrong offset!");
static_assert(offsetof(BP_TimeChangeFogBase_C_UpdateEnvironment, bpp__UpdateCounter__pf) == 0x000004, "Member 'BP_TimeChangeFogBase_C_UpdateEnvironment::bpp__UpdateCounter__pf' has a wrong offset!");

}

