#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LadderBase

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "JackGame_structs.hpp"
#include "JackGame_classes.hpp"
#include "Engine_structs.hpp"
#include "ENUM_InteractRidingVehicleMessage_structs.hpp"


namespace SDK
{

// DynamicClass BP_LadderBase.BP_LadderBase_C
// 0x0860 (0x0C20 - 0x03C0)
class ABP_LadderBase_C final : public AJackInteractiveActor
{
public:
	class UStaticMeshComponent*                   CylinderB;                                         // 0x03C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   CylinderA;                                         // 0x03C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                       SphereB;                                           // 0x03D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBillboardComponent*                    BillboardB;                                        // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJackInteractiveActorComponent*         JackInteractiveActorB;                             // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        ArrowB;                                            // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          MapJumpTriggerBox;                                 // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        ArrowOrigin;                                       // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       Spline;                                            // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                       SphereA;                                           // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBillboardComponent*                    BillboardA;                                        // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJackInteractiveActorComponent*         JackInteractiveActorA;                             // 0x0418(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        ArrowA;                                            // 0x0420(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Root;                                              // 0x0428(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationA;                                         // 0x0430(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationB;                                         // 0x043C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            LadderUpCapMesh;                                   // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            LadderMesh4;                                       // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            LadderMesh6;                                       // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            LadderUnderCapMesh;                                // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LadderHeight;                                      // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Steps;                                             // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AJackPlayableCharacter*                 InteractedActor;                                   // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        BeginArrow;                                        // 0x0478(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJackInteractiveActorComponent*         InteractiveActorComponent;                         // 0x0480(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           PlayAnimMontage;                                   // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartStep;                                         // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_494[0x4];                                      // 0x0494(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AnimMontagename;                                   // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanceledSequence;                                 // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A1[0x3];                                      // 0x04A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovementScale;                                     // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReservedLocation;                                  // 0x04A8(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloorDist;                                         // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MapJumpEnable;                                     // 0x04B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B9[0x7];                                      // 0x04B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackLDT_MapStart                      MapJumpTag;                                        // 0x04C0(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               BackPlayerViewAngleMax;                            // 0x04D0(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               BackPlayerViewAngleMin;                            // 0x04DC(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          CanRapeling;                                       // 0x04E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E9[0x7];                                      // 0x04E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             AutoRapelingLoopSound;                             // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJackSerifuAutomationFlags             Temp_struct_Variable;                              // 0x04F8(0x0005)(Transient, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          CallFunc_Is_Player_Riding_on_Vehicle_Player_Riding; // 0x04FD(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4FE[0x2];                                      // 0x04FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0500(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallFunc_Is_Player_Riding_on_Vehicle_Player_Riding2; // 0x0508(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_509[0x7];                                      // 0x0509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable2;                               // 0x0510(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Temp_bool_Variable;                                // 0x0518(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Temp_bool_Variable2;                               // 0x0519(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51A[0x6];                                      // 0x051A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent9;   // 0x0520(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor11;           // 0x0528(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp9;             // 0x0530(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex9;        // 0x0538(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep5;            // 0x053C(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53D[0x3];                                      // 0x053D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult5;           // 0x0540(0x0088)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   Temp_name_Variable3;                               // 0x05C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   K2Node_InputActionEvent_Key;                       // 0x05D0(0x0018)(Transient, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EJackLadderMovementState bpp__MovementState__pf)> K2Node_CreateDelegate_OutputDelegate;              // 0x05E8(0x0010)(ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   Temp_name_Variable4;                               // 0x05F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJackPlayableMovementComponent*         K2Node_DynamicCast_AsJack_Playable_Movement_Component; // 0x0600(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0608(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_609[0x7];                                      // 0x0609(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable5;                               // 0x0610(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent8;   // 0x0618(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor10;           // 0x0620(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp8;             // 0x0628(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex8;        // 0x0630(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep4;            // 0x0634(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_635[0x3];                                      // 0x0635(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult4;           // 0x0638(0x0088)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent7;   // 0x06C0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor9;            // 0x06C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp7;             // 0x06D0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex7;        // 0x06D8(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6DC[0x4];                                      // 0x06DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent6;   // 0x06E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor8;            // 0x06E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp6;             // 0x06F0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex6;        // 0x06F8(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep3;            // 0x06FC(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6FD[0x3];                                      // 0x06FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult3;           // 0x0700(0x0088)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent5;   // 0x0788(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor7;            // 0x0790(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp5;             // 0x0798(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex5;        // 0x07A0(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A4[0x4];                                      // 0x07A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent4;   // 0x07A8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor6;            // 0x07B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp4;             // 0x07B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex4;        // 0x07C0(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep2;            // 0x07C4(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C5[0x3];                                      // 0x07C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult2;           // 0x07C8(0x0088)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent3;   // 0x0850(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor5;            // 0x0858(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp3;             // 0x0860(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex3;        // 0x0868(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_86C[0x4];                                      // 0x086C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent2;   // 0x0870(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor4;            // 0x0878(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp2;             // 0x0880(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex2;        // 0x0888(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x088C(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88D[0x3];                                      // 0x088D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0890(0x0088)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0918(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor3;            // 0x0920(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0928(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0930(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_934[0x4];                                      // 0x0934(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        K2Node_MakeArray_Array;                            // 0x0938(0x0010)(ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor2;            // 0x0948(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0950(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Temp_bool_Variable3;                               // 0x0958(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_959[0x7];                                      // 0x0959(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate2;             // 0x0960(0x0010)(ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate3;             // 0x0970(0x0010)(ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(bool bpp__bRightHandUp__pf, float bpp__MovementRate__pf)> K2Node_CreateDelegate_OutputDelegate4;             // 0x0980(0x0010)(ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FJackMessageArgumentData>       Temp_struct_Variable2;                             // 0x0990(0x0010)(ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	TDelegate<void(bool bpp__bRightHandUp__pf, float bpp__MovementRate__pf)> K2Node_CreateDelegate_OutputDelegate5;             // 0x09A0(0x0010)(ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	struct FJackSerifuAutomationFlags             Temp_struct_Variable3;                             // 0x09B0(0x0005)(Transient, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9B5[0x3];                                      // 0x09B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable6;                               // 0x09B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJackMessageArgumentData>       Temp_struct_Variable4;                             // 0x09C0(0x0010)(ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	struct FJackSerifuAutomationFlags             Temp_struct_Variable5;                             // 0x09D0(0x0005)(Transient, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D5[0x3];                                      // 0x09D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackMessageArgumentData>       Temp_struct_Variable6;                             // 0x09D8(0x0010)(ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	struct FJackSerifuAutomationFlags             Temp_struct_Variable7;                             // 0x09E8(0x0005)(Transient, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          K2Node_CustomEvent_bRightHandUp3;                  // 0x09ED(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9EE[0x2];                                      // 0x09EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_MovementRate4;                  // 0x09F0(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_CustomEvent_bRigheHandUp;                   // 0x09F4(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9F5[0x3];                                      // 0x09F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_MovementRate3;                  // 0x09F8(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_CustomEvent_bRightHandUp2;                  // 0x09FC(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9FD[0x3];                                      // 0x09FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_MovementRate2;                  // 0x0A00(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_CustomEvent_bRightHandUp;                   // 0x0A04(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A05[0x3];                                      // 0x0A05(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_MovementRate;                   // 0x0A08(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0C[0x4];                                      // 0x0A0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable7;                               // 0x0A10(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJackPlayableMovementComponent*         K2Node_DynamicCast_AsJack_Playable_Movement_Component2; // 0x0A18(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0A20(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A21[0x7];                                      // 0x0A21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackPlayableMovementComponent*         K2Node_DynamicCast_AsJack_Playable_Movement_Component3; // 0x0A28(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0A30(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A31[0x7];                                      // 0x0A31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackPlayableLadderMovementMode*        K2Node_DynamicCast_AsJack_Playable_Ladder_Movement_Mode; // 0x0A38(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess4;                      // 0x0A40(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A41[0x7];                                      // 0x0A41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable8;                               // 0x0A48(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Temp_name_Variable9;                               // 0x0A50(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Temp_name_Variable10;                              // 0x0A58(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Temp_name_Variable11;                              // 0x0A60(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Temp_name_Variable12;                              // 0x0A68(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetPlayLength_ReturnValue;                // 0x0A70(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A74[0x4];                                      // 0x0A74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable13;                              // 0x0A78(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_PlayAnimMontage_ReturnValue;              // 0x0A80(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A84[0x4];                                      // 0x0A84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable14;                              // 0x0A88(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJackPlayableMovementComponent*         K2Node_DynamicCast_AsJack_Playable_Movement_Component4; // 0x0A90(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess5;                      // 0x0A98(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A99[0x7];                                      // 0x0A99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackPlayableLadderMovementMode*        K2Node_DynamicCast_AsJack_Playable_Ladder_Movement_Mode2; // 0x0AA0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess6;                      // 0x0AA8(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA9[0x7];                                      // 0x0AA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable15;                              // 0x0AB0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Temp_name_Variable16;                              // 0x0AB8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Temp_name_Variable17;                              // 0x0AC0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Temp_name_Variable18;                              // 0x0AC8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Temp_name_Variable19;                              // 0x0AD0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Temp_name_Variable20;                              // 0x0AD8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Temp_name_Variable21;                              // 0x0AE0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_InteractRidingVehicleMessage             Temp_byte_Variable;                                // 0x0AE8(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AE9[0x7];                                      // 0x0AE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x0AF0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJackMessageArgumentData>       Temp_struct_Variable8;                             // 0x0AF8(0x0010)(ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	bool                                          CallFunc_IsAutoRapeling_bRapeling;                 // 0x0B08(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJackSerifuAutomationFlags             Temp_struct_Variable9;                             // 0x0B09(0x0005)(Transient, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0E[0x2];                                      // 0x0B0E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select2_Default;                            // 0x0B10(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackLadderMovementState                      K2Node_CustomEvent_MovementState2;                 // 0x0B18(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackLadderMovementState                      K2Node_CustomEvent_MovementState;                  // 0x0B19(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0B1A(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1B[0x5];                                      // 0x0B1B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackMessageArgumentData>       Temp_struct_Variable10;                            // 0x0B20(0x0010)(ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	struct FJackSerifuAutomationFlags             Temp_struct_Variable11;                            // 0x0B30(0x0005)(Transient, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B35[0x3];                                      // 0x0B35(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackMessageArgumentData>       Temp_struct_Variable12;                            // 0x0B38(0x0010)(ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	struct FJackSerifuAutomationFlags             Temp_struct_Variable13;                            // 0x0B48(0x0005)(Transient, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          CallFunc_IsAutoMovementEnable_bEnable;             // 0x0B4D(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4E[0x2];                                      // 0x0B4E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable22;                              // 0x0B50(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJackMessageArgumentData>       Temp_struct_Variable14;                            // 0x0B58(0x0010)(ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	struct FJackSerifuAutomationFlags             Temp_struct_Variable15;                            // 0x0B68(0x0005)(Transient, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          CallFunc_IsAutoRapeling_bRapeling2;                // 0x0B6D(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B6E[0x2];                                      // 0x0B6E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable23;                              // 0x0B70(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Temp_name_Variable24;                              // 0x0B78(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0B80(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0B84(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0B88(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakRotator_Roll2;                       // 0x0B8C(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakRotator_Pitch2;                      // 0x0B90(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakRotator_Yaw2;                        // 0x0B94(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Temp_name_Variable25;                              // 0x0B98(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Temp_name_Variable26;                              // 0x0BA0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakRotator_Roll3;                       // 0x0BA8(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakRotator_Pitch3;                      // 0x0BAC(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakRotator_Yaw3;                        // 0x0BB0(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BB4[0x4];                                      // 0x0BB4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable27;                              // 0x0BB8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Temp_name_Variable28;                              // 0x0BC0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Temp_name_Variable29;                              // 0x0BC8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Temp_name_Variable30;                              // 0x0BD0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_InteractRidingVehicleMessage             Temp_byte_Variable2;                               // 0x0BD8(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD9[0x7];                                      // 0x0BD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select3_Default;                            // 0x0BE0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakRotator_Roll4;                       // 0x0BE8(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakRotator_Pitch4;                      // 0x0BEC(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakRotator_Yaw4;                        // 0x0BF0(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BF4[0x4];                                      // 0x0BF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackMessageArgumentData>       Temp_struct_Variable16;                            // 0x0BF8(0x0010)(ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakRotator_Roll5;                       // 0x0C08(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakRotator_Pitch5;                      // 0x0C0C(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakRotator_Yaw5;                        // 0x0C10(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         K2Node_Select4_Default;                            // 0x0C14(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         K2Node_Select5_Default;                            // 0x0C18(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1C[0x4];                                      // 0x0C1C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayableLadderMovementModeChangeStateDelegate__DelegateSignature(EJackLadderMovementState bpp__MovementState__pf);
	void PlayableLadderMovementModeStepDelegate__DelegateSignature(bool bpp__bRightHandUp__pf, float bpp__MovementRate__pf);
	void PlayableSplineMovementModeDelegate__DelegateSignature();
	void BndEvt__CylinderA_K2Node_ComponentBoundEvent_35_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* bpp__OverlappedComponent__pf, class AActor* bpp__OtherActor__pf, class UPrimitiveComponent* bpp__OtherComp__pf, int32 bpp__OtherBodyIndex__pf, bool bpp__bFromSweep__pf, const struct FHitResult& bpp__SweepResult__pf__const);
	void BndEvt__CylinderA_K2Node_ComponentBoundEvent_44_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* bpp__OverlappedComponent__pf, class AActor* bpp__OtherActor__pf, class UPrimitiveComponent* bpp__OtherComp__pf, int32 bpp__OtherBodyIndex__pf);
	void BndEvt__CylinderB_K2Node_ComponentBoundEvent_54_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* bpp__OverlappedComponent__pf, class AActor* bpp__OtherActor__pf, class UPrimitiveComponent* bpp__OtherComp__pf, int32 bpp__OtherBodyIndex__pf, bool bpp__bFromSweep__pf, const struct FHitResult& bpp__SweepResult__pf__const);
	void BndEvt__CylinderB_K2Node_ComponentBoundEvent_95_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* bpp__OverlappedComponent__pf, class AActor* bpp__OtherActor__pf, class UPrimitiveComponent* bpp__OtherComp__pf, int32 bpp__OtherBodyIndex__pf);
	void BndEvt__JackInteractiveActorA_K2Node_ComponentBoundEvent_86_ComponentInteractSignature__DelegateSignature(class AActor* bpp__OtherActor__pf);
	void BndEvt__JackInteractiveActorB_K2Node_ComponentBoundEvent_121_ComponentInteractSignature__DelegateSignature(class AActor* bpp__OtherActor__pf);
	void BndEvt__MapJumpTriggerBox_K2Node_ComponentBoundEvent_300_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* bpp__OverlappedComponent__pf, class AActor* bpp__OtherActor__pf, class UPrimitiveComponent* bpp__OtherComp__pf, int32 bpp__OtherBodyIndex__pf, bool bpp__bFromSweep__pf, const struct FHitResult& bpp__SweepResult__pf__const);
	void BndEvt__SphereA_K2Node_ComponentBoundEvent_180_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* bpp__OverlappedComponent__pf, class AActor* bpp__OtherActor__pf, class UPrimitiveComponent* bpp__OtherComp__pf, int32 bpp__OtherBodyIndex__pf, bool bpp__bFromSweep__pf, const struct FHitResult& bpp__SweepResult__pf__const);
	void BndEvt__SphereA_K2Node_ComponentBoundEvent_189_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* bpp__OverlappedComponent__pf, class AActor* bpp__OtherActor__pf, class UPrimitiveComponent* bpp__OtherComp__pf, int32 bpp__OtherBodyIndex__pf);
	void BndEvt__SphereB_K2Node_ComponentBoundEvent_231_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* bpp__OverlappedComponent__pf, class AActor* bpp__OtherActor__pf, class UPrimitiveComponent* bpp__OtherComp__pf, int32 bpp__OtherBodyIndex__pf, bool bpp__bFromSweep__pf, const struct FHitResult& bpp__SweepResult__pf__const);
	void BndEvt__SphereB_K2Node_ComponentBoundEvent_240_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* bpp__OverlappedComponent__pf, class AActor* bpp__OtherActor__pf, class UPrimitiveComponent* bpp__OtherComp__pf, int32 bpp__OtherBodyIndex__pf);
	void ExecuteUbergraph_BP_LadderBase_1(int32 bpp__EntryPoint__pf);
	void ExecuteUbergraph_BP_LadderBase_2(int32 bpp__EntryPoint__pf);
	void ExecuteUbergraph_BP_LadderBase_4(int32 bpp__EntryPoint__pf);
	void GetLadderMovementMode(class UJackPlayableLadderMovementMode** bpp__AsJackxPlayablexLadderxMovementxMode__pfTTTT);
	void InpActEvt_MoveDown_K2Node_InputActionEvent_1(const struct FKey& bpp__Key__pf);
	void IsAutoMovementEnable(bool* bpp__bEnable__pf);
	void IsAutoRapeling(bool* bpp__bRapeling__pf);
	void OnClimbDown();
	void OnClimbDown_Event_0();
	void OnClimbUp();
	void OnClimbUp_Event_0();
	void OnMovementStateChanged(EJackLadderMovementState bpp__MovementState__pf);
	void OnMovementStateChanged_Event_0(EJackLadderMovementState bpp__MovementState__pf);
	void OnStepDown(bool bpp__bRightHandUp__pf, float bpp__MovementRate__pf);
	void OnStepDown_Event_0(bool bpp__bRightHandUp__pf, float bpp__MovementRate__pf);
	void OnStepUp(bool bpp__bRigheHandUp__pf, float bpp__MovementRate__pf);
	void OnStepUp_Event_0(bool bpp__bRightHandUp__pf, float bpp__MovementRate__pf);
	void ReceiveBeginPlay();
	void ResetLadderCamera();
	void SetAccessLadderCamera();
	void SetAnimationTime(float bpp__AnimationTime__pf, float bpp__SnapTime__pf);
	void SetAutoMovementEnable(bool bpp__bEnable__pf);
	void SetAutoRapeling(bool bpp__bEnable__pf);
	void SetInputEnable(bool bpp__bEnable__pf);
	void SetLadder();
	void SetLadderCamera();
	void SetLadderMesh(class UStaticMesh* bpp__Mesh__pf, int32 bpp__Count__pf, float bpp__Height__pf, float bpp__BoundsScale__pf);
	void SetStartTemporaryVariables(class AActor* bpp__Actor__pf, class UArrowComponent* bpp__BeginArrow__pf, class UJackInteractiveActorComponent* bpp__InteractiveActorComponent__pf, class FName bpp__AnimMontageName__pf, int32 bpp__StepIndex__pf);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BP_LadderBase_C">();
	}
	static class ABP_LadderBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LadderBase_C>();
	}
};
static_assert(alignof(ABP_LadderBase_C) == 0x000008, "Wrong alignment on ABP_LadderBase_C");
static_assert(sizeof(ABP_LadderBase_C) == 0x000C20, "Wrong size on ABP_LadderBase_C");
static_assert(offsetof(ABP_LadderBase_C, CylinderB) == 0x0003C0, "Member 'ABP_LadderBase_C::CylinderB' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, CylinderA) == 0x0003C8, "Member 'ABP_LadderBase_C::CylinderA' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, SphereB) == 0x0003D0, "Member 'ABP_LadderBase_C::SphereB' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, BillboardB) == 0x0003D8, "Member 'ABP_LadderBase_C::BillboardB' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, JackInteractiveActorB) == 0x0003E0, "Member 'ABP_LadderBase_C::JackInteractiveActorB' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, ArrowB) == 0x0003E8, "Member 'ABP_LadderBase_C::ArrowB' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, MapJumpTriggerBox) == 0x0003F0, "Member 'ABP_LadderBase_C::MapJumpTriggerBox' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, ArrowOrigin) == 0x0003F8, "Member 'ABP_LadderBase_C::ArrowOrigin' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Spline) == 0x000400, "Member 'ABP_LadderBase_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, SphereA) == 0x000408, "Member 'ABP_LadderBase_C::SphereA' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, BillboardA) == 0x000410, "Member 'ABP_LadderBase_C::BillboardA' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, JackInteractiveActorA) == 0x000418, "Member 'ABP_LadderBase_C::JackInteractiveActorA' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, ArrowA) == 0x000420, "Member 'ABP_LadderBase_C::ArrowA' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Root) == 0x000428, "Member 'ABP_LadderBase_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, LocationA) == 0x000430, "Member 'ABP_LadderBase_C::LocationA' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, LocationB) == 0x00043C, "Member 'ABP_LadderBase_C::LocationB' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, LadderUpCapMesh) == 0x000448, "Member 'ABP_LadderBase_C::LadderUpCapMesh' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, LadderMesh4) == 0x000450, "Member 'ABP_LadderBase_C::LadderMesh4' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, LadderMesh6) == 0x000458, "Member 'ABP_LadderBase_C::LadderMesh6' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, LadderUnderCapMesh) == 0x000460, "Member 'ABP_LadderBase_C::LadderUnderCapMesh' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, LadderHeight) == 0x000468, "Member 'ABP_LadderBase_C::LadderHeight' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Steps) == 0x00046C, "Member 'ABP_LadderBase_C::Steps' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, InteractedActor) == 0x000470, "Member 'ABP_LadderBase_C::InteractedActor' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, BeginArrow) == 0x000478, "Member 'ABP_LadderBase_C::BeginArrow' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, InteractiveActorComponent) == 0x000480, "Member 'ABP_LadderBase_C::InteractiveActorComponent' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, PlayAnimMontage) == 0x000488, "Member 'ABP_LadderBase_C::PlayAnimMontage' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, StartStep) == 0x000490, "Member 'ABP_LadderBase_C::StartStep' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, AnimMontagename) == 0x000498, "Member 'ABP_LadderBase_C::AnimMontagename' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, bCanceledSequence) == 0x0004A0, "Member 'ABP_LadderBase_C::bCanceledSequence' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, MovementScale) == 0x0004A4, "Member 'ABP_LadderBase_C::MovementScale' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, ReservedLocation) == 0x0004A8, "Member 'ABP_LadderBase_C::ReservedLocation' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, FloorDist) == 0x0004B4, "Member 'ABP_LadderBase_C::FloorDist' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, MapJumpEnable) == 0x0004B8, "Member 'ABP_LadderBase_C::MapJumpEnable' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, MapJumpTag) == 0x0004C0, "Member 'ABP_LadderBase_C::MapJumpTag' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, BackPlayerViewAngleMax) == 0x0004D0, "Member 'ABP_LadderBase_C::BackPlayerViewAngleMax' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, BackPlayerViewAngleMin) == 0x0004DC, "Member 'ABP_LadderBase_C::BackPlayerViewAngleMin' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, CanRapeling) == 0x0004E8, "Member 'ABP_LadderBase_C::CanRapeling' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, AutoRapelingLoopSound) == 0x0004F0, "Member 'ABP_LadderBase_C::AutoRapelingLoopSound' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_struct_Variable) == 0x0004F8, "Member 'ABP_LadderBase_C::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, CallFunc_Is_Player_Riding_on_Vehicle_Player_Riding) == 0x0004FD, "Member 'ABP_LadderBase_C::CallFunc_Is_Player_Riding_on_Vehicle_Player_Riding' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable) == 0x000500, "Member 'ABP_LadderBase_C::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, CallFunc_Is_Player_Riding_on_Vehicle_Player_Riding2) == 0x000508, "Member 'ABP_LadderBase_C::CallFunc_Is_Player_Riding_on_Vehicle_Player_Riding2' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable2) == 0x000510, "Member 'ABP_LadderBase_C::Temp_name_Variable2' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_bool_Variable) == 0x000518, "Member 'ABP_LadderBase_C::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_bool_Variable2) == 0x000519, "Member 'ABP_LadderBase_C::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OverlappedComponent9) == 0x000520, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OverlappedComponent9' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherActor11) == 0x000528, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherActor11' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherComp9) == 0x000530, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherComp9' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherBodyIndex9) == 0x000538, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherBodyIndex9' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_bFromSweep5) == 0x00053C, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_bFromSweep5' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_SweepResult5) == 0x000540, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_SweepResult5' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable3) == 0x0005C8, "Member 'ABP_LadderBase_C::Temp_name_Variable3' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_InputActionEvent_Key) == 0x0005D0, "Member 'ABP_LadderBase_C::K2Node_InputActionEvent_Key' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_CreateDelegate_OutputDelegate) == 0x0005E8, "Member 'ABP_LadderBase_C::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable4) == 0x0005F8, "Member 'ABP_LadderBase_C::Temp_name_Variable4' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_DynamicCast_AsJack_Playable_Movement_Component) == 0x000600, "Member 'ABP_LadderBase_C::K2Node_DynamicCast_AsJack_Playable_Movement_Component' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_DynamicCast_bSuccess) == 0x000608, "Member 'ABP_LadderBase_C::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable5) == 0x000610, "Member 'ABP_LadderBase_C::Temp_name_Variable5' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OverlappedComponent8) == 0x000618, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OverlappedComponent8' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherActor10) == 0x000620, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherActor10' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherComp8) == 0x000628, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherComp8' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherBodyIndex8) == 0x000630, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherBodyIndex8' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_bFromSweep4) == 0x000634, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_bFromSweep4' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_SweepResult4) == 0x000638, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_SweepResult4' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OverlappedComponent7) == 0x0006C0, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OverlappedComponent7' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherActor9) == 0x0006C8, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherActor9' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherComp7) == 0x0006D0, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherComp7' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherBodyIndex7) == 0x0006D8, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherBodyIndex7' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OverlappedComponent6) == 0x0006E0, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OverlappedComponent6' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherActor8) == 0x0006E8, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherActor8' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherComp6) == 0x0006F0, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherComp6' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherBodyIndex6) == 0x0006F8, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherBodyIndex6' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_bFromSweep3) == 0x0006FC, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_bFromSweep3' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_SweepResult3) == 0x000700, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_SweepResult3' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OverlappedComponent5) == 0x000788, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OverlappedComponent5' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherActor7) == 0x000790, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherActor7' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherComp5) == 0x000798, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherComp5' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherBodyIndex5) == 0x0007A0, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherBodyIndex5' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OverlappedComponent4) == 0x0007A8, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OverlappedComponent4' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherActor6) == 0x0007B0, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherActor6' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherComp4) == 0x0007B8, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherComp4' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherBodyIndex4) == 0x0007C0, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherBodyIndex4' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_bFromSweep2) == 0x0007C4, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_bFromSweep2' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_SweepResult2) == 0x0007C8, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_SweepResult2' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OverlappedComponent3) == 0x000850, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OverlappedComponent3' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherActor5) == 0x000858, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherActor5' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherComp3) == 0x000860, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherComp3' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherBodyIndex3) == 0x000868, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherBodyIndex3' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OverlappedComponent2) == 0x000870, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OverlappedComponent2' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherActor4) == 0x000878, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherActor4' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherComp2) == 0x000880, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherComp2' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherBodyIndex2) == 0x000888, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherBodyIndex2' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_bFromSweep) == 0x00088C, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_SweepResult) == 0x000890, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000918, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherActor3) == 0x000920, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherActor3' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherComp) == 0x000928, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000930, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_MakeArray_Array) == 0x000938, "Member 'ABP_LadderBase_C::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherActor2) == 0x000948, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherActor2' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_ComponentBoundEvent_OtherActor) == 0x000950, "Member 'ABP_LadderBase_C::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_bool_Variable3) == 0x000958, "Member 'ABP_LadderBase_C::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_CreateDelegate_OutputDelegate2) == 0x000960, "Member 'ABP_LadderBase_C::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_CreateDelegate_OutputDelegate3) == 0x000970, "Member 'ABP_LadderBase_C::K2Node_CreateDelegate_OutputDelegate3' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_CreateDelegate_OutputDelegate4) == 0x000980, "Member 'ABP_LadderBase_C::K2Node_CreateDelegate_OutputDelegate4' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_struct_Variable2) == 0x000990, "Member 'ABP_LadderBase_C::Temp_struct_Variable2' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_CreateDelegate_OutputDelegate5) == 0x0009A0, "Member 'ABP_LadderBase_C::K2Node_CreateDelegate_OutputDelegate5' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_struct_Variable3) == 0x0009B0, "Member 'ABP_LadderBase_C::Temp_struct_Variable3' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable6) == 0x0009B8, "Member 'ABP_LadderBase_C::Temp_name_Variable6' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_struct_Variable4) == 0x0009C0, "Member 'ABP_LadderBase_C::Temp_struct_Variable4' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_struct_Variable5) == 0x0009D0, "Member 'ABP_LadderBase_C::Temp_struct_Variable5' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_struct_Variable6) == 0x0009D8, "Member 'ABP_LadderBase_C::Temp_struct_Variable6' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_struct_Variable7) == 0x0009E8, "Member 'ABP_LadderBase_C::Temp_struct_Variable7' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_CustomEvent_bRightHandUp3) == 0x0009ED, "Member 'ABP_LadderBase_C::K2Node_CustomEvent_bRightHandUp3' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_CustomEvent_MovementRate4) == 0x0009F0, "Member 'ABP_LadderBase_C::K2Node_CustomEvent_MovementRate4' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_CustomEvent_bRigheHandUp) == 0x0009F4, "Member 'ABP_LadderBase_C::K2Node_CustomEvent_bRigheHandUp' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_CustomEvent_MovementRate3) == 0x0009F8, "Member 'ABP_LadderBase_C::K2Node_CustomEvent_MovementRate3' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_CustomEvent_bRightHandUp2) == 0x0009FC, "Member 'ABP_LadderBase_C::K2Node_CustomEvent_bRightHandUp2' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_CustomEvent_MovementRate2) == 0x000A00, "Member 'ABP_LadderBase_C::K2Node_CustomEvent_MovementRate2' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_CustomEvent_bRightHandUp) == 0x000A04, "Member 'ABP_LadderBase_C::K2Node_CustomEvent_bRightHandUp' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_CustomEvent_MovementRate) == 0x000A08, "Member 'ABP_LadderBase_C::K2Node_CustomEvent_MovementRate' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable7) == 0x000A10, "Member 'ABP_LadderBase_C::Temp_name_Variable7' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_DynamicCast_AsJack_Playable_Movement_Component2) == 0x000A18, "Member 'ABP_LadderBase_C::K2Node_DynamicCast_AsJack_Playable_Movement_Component2' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_DynamicCast_bSuccess2) == 0x000A20, "Member 'ABP_LadderBase_C::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_DynamicCast_AsJack_Playable_Movement_Component3) == 0x000A28, "Member 'ABP_LadderBase_C::K2Node_DynamicCast_AsJack_Playable_Movement_Component3' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_DynamicCast_bSuccess3) == 0x000A30, "Member 'ABP_LadderBase_C::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_DynamicCast_AsJack_Playable_Ladder_Movement_Mode) == 0x000A38, "Member 'ABP_LadderBase_C::K2Node_DynamicCast_AsJack_Playable_Ladder_Movement_Mode' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_DynamicCast_bSuccess4) == 0x000A40, "Member 'ABP_LadderBase_C::K2Node_DynamicCast_bSuccess4' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable8) == 0x000A48, "Member 'ABP_LadderBase_C::Temp_name_Variable8' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable9) == 0x000A50, "Member 'ABP_LadderBase_C::Temp_name_Variable9' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable10) == 0x000A58, "Member 'ABP_LadderBase_C::Temp_name_Variable10' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable11) == 0x000A60, "Member 'ABP_LadderBase_C::Temp_name_Variable11' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable12) == 0x000A68, "Member 'ABP_LadderBase_C::Temp_name_Variable12' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, CallFunc_GetPlayLength_ReturnValue) == 0x000A70, "Member 'ABP_LadderBase_C::CallFunc_GetPlayLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable13) == 0x000A78, "Member 'ABP_LadderBase_C::Temp_name_Variable13' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, CallFunc_PlayAnimMontage_ReturnValue) == 0x000A80, "Member 'ABP_LadderBase_C::CallFunc_PlayAnimMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable14) == 0x000A88, "Member 'ABP_LadderBase_C::Temp_name_Variable14' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_DynamicCast_AsJack_Playable_Movement_Component4) == 0x000A90, "Member 'ABP_LadderBase_C::K2Node_DynamicCast_AsJack_Playable_Movement_Component4' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_DynamicCast_bSuccess5) == 0x000A98, "Member 'ABP_LadderBase_C::K2Node_DynamicCast_bSuccess5' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_DynamicCast_AsJack_Playable_Ladder_Movement_Mode2) == 0x000AA0, "Member 'ABP_LadderBase_C::K2Node_DynamicCast_AsJack_Playable_Ladder_Movement_Mode2' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_DynamicCast_bSuccess6) == 0x000AA8, "Member 'ABP_LadderBase_C::K2Node_DynamicCast_bSuccess6' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable15) == 0x000AB0, "Member 'ABP_LadderBase_C::Temp_name_Variable15' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable16) == 0x000AB8, "Member 'ABP_LadderBase_C::Temp_name_Variable16' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable17) == 0x000AC0, "Member 'ABP_LadderBase_C::Temp_name_Variable17' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable18) == 0x000AC8, "Member 'ABP_LadderBase_C::Temp_name_Variable18' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable19) == 0x000AD0, "Member 'ABP_LadderBase_C::Temp_name_Variable19' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable20) == 0x000AD8, "Member 'ABP_LadderBase_C::Temp_name_Variable20' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable21) == 0x000AE0, "Member 'ABP_LadderBase_C::Temp_name_Variable21' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_byte_Variable) == 0x000AE8, "Member 'ABP_LadderBase_C::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_Select_Default) == 0x000AF0, "Member 'ABP_LadderBase_C::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_struct_Variable8) == 0x000AF8, "Member 'ABP_LadderBase_C::Temp_struct_Variable8' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, CallFunc_IsAutoRapeling_bRapeling) == 0x000B08, "Member 'ABP_LadderBase_C::CallFunc_IsAutoRapeling_bRapeling' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_struct_Variable9) == 0x000B09, "Member 'ABP_LadderBase_C::Temp_struct_Variable9' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_Select2_Default) == 0x000B10, "Member 'ABP_LadderBase_C::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_CustomEvent_MovementState2) == 0x000B18, "Member 'ABP_LadderBase_C::K2Node_CustomEvent_MovementState2' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_CustomEvent_MovementState) == 0x000B19, "Member 'ABP_LadderBase_C::K2Node_CustomEvent_MovementState' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_SwitchEnum_CmpSuccess) == 0x000B1A, "Member 'ABP_LadderBase_C::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_struct_Variable10) == 0x000B20, "Member 'ABP_LadderBase_C::Temp_struct_Variable10' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_struct_Variable11) == 0x000B30, "Member 'ABP_LadderBase_C::Temp_struct_Variable11' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_struct_Variable12) == 0x000B38, "Member 'ABP_LadderBase_C::Temp_struct_Variable12' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_struct_Variable13) == 0x000B48, "Member 'ABP_LadderBase_C::Temp_struct_Variable13' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, CallFunc_IsAutoMovementEnable_bEnable) == 0x000B4D, "Member 'ABP_LadderBase_C::CallFunc_IsAutoMovementEnable_bEnable' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable22) == 0x000B50, "Member 'ABP_LadderBase_C::Temp_name_Variable22' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_struct_Variable14) == 0x000B58, "Member 'ABP_LadderBase_C::Temp_struct_Variable14' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_struct_Variable15) == 0x000B68, "Member 'ABP_LadderBase_C::Temp_struct_Variable15' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, CallFunc_IsAutoRapeling_bRapeling2) == 0x000B6D, "Member 'ABP_LadderBase_C::CallFunc_IsAutoRapeling_bRapeling2' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable23) == 0x000B70, "Member 'ABP_LadderBase_C::Temp_name_Variable23' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable24) == 0x000B78, "Member 'ABP_LadderBase_C::Temp_name_Variable24' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, CallFunc_BreakRotator_Roll) == 0x000B80, "Member 'ABP_LadderBase_C::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, CallFunc_BreakRotator_Pitch) == 0x000B84, "Member 'ABP_LadderBase_C::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, CallFunc_BreakRotator_Yaw) == 0x000B88, "Member 'ABP_LadderBase_C::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, CallFunc_BreakRotator_Roll2) == 0x000B8C, "Member 'ABP_LadderBase_C::CallFunc_BreakRotator_Roll2' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, CallFunc_BreakRotator_Pitch2) == 0x000B90, "Member 'ABP_LadderBase_C::CallFunc_BreakRotator_Pitch2' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, CallFunc_BreakRotator_Yaw2) == 0x000B94, "Member 'ABP_LadderBase_C::CallFunc_BreakRotator_Yaw2' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable25) == 0x000B98, "Member 'ABP_LadderBase_C::Temp_name_Variable25' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable26) == 0x000BA0, "Member 'ABP_LadderBase_C::Temp_name_Variable26' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, CallFunc_BreakRotator_Roll3) == 0x000BA8, "Member 'ABP_LadderBase_C::CallFunc_BreakRotator_Roll3' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, CallFunc_BreakRotator_Pitch3) == 0x000BAC, "Member 'ABP_LadderBase_C::CallFunc_BreakRotator_Pitch3' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, CallFunc_BreakRotator_Yaw3) == 0x000BB0, "Member 'ABP_LadderBase_C::CallFunc_BreakRotator_Yaw3' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable27) == 0x000BB8, "Member 'ABP_LadderBase_C::Temp_name_Variable27' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable28) == 0x000BC0, "Member 'ABP_LadderBase_C::Temp_name_Variable28' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable29) == 0x000BC8, "Member 'ABP_LadderBase_C::Temp_name_Variable29' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_name_Variable30) == 0x000BD0, "Member 'ABP_LadderBase_C::Temp_name_Variable30' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_byte_Variable2) == 0x000BD8, "Member 'ABP_LadderBase_C::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_Select3_Default) == 0x000BE0, "Member 'ABP_LadderBase_C::K2Node_Select3_Default' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, CallFunc_BreakRotator_Roll4) == 0x000BE8, "Member 'ABP_LadderBase_C::CallFunc_BreakRotator_Roll4' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, CallFunc_BreakRotator_Pitch4) == 0x000BEC, "Member 'ABP_LadderBase_C::CallFunc_BreakRotator_Pitch4' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, CallFunc_BreakRotator_Yaw4) == 0x000BF0, "Member 'ABP_LadderBase_C::CallFunc_BreakRotator_Yaw4' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, Temp_struct_Variable16) == 0x000BF8, "Member 'ABP_LadderBase_C::Temp_struct_Variable16' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, CallFunc_BreakRotator_Roll5) == 0x000C08, "Member 'ABP_LadderBase_C::CallFunc_BreakRotator_Roll5' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, CallFunc_BreakRotator_Pitch5) == 0x000C0C, "Member 'ABP_LadderBase_C::CallFunc_BreakRotator_Pitch5' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, CallFunc_BreakRotator_Yaw5) == 0x000C10, "Member 'ABP_LadderBase_C::CallFunc_BreakRotator_Yaw5' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_Select4_Default) == 0x000C14, "Member 'ABP_LadderBase_C::K2Node_Select4_Default' has a wrong offset!");
static_assert(offsetof(ABP_LadderBase_C, K2Node_Select5_Default) == 0x000C18, "Member 'ABP_LadderBase_C::K2Node_Select5_Default' has a wrong offset!");

}

