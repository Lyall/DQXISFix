#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FLIB_Npc

#include "Basic.hpp"

#include "ENUM_ChairTarget_structs.hpp"
#include "JackGame_structs.hpp"
#include "STRUCT_TalkParamCustom_structs.hpp"
#include "STRUCT_NpcLookatParam_structs.hpp"
#include "ENUM_Schedule_Pattern_structs.hpp"
#include "ENUM_AfterInterruptPlayerLeaveDistance_structs.hpp"
#include "STRUCT_NpcMoveParam_structs.hpp"
#include "STRUCT_MoveAndAnimParam_structs.hpp"
#include "ENUM_NpcChairPosition_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "STRUCT_NpcFukidasiDisc_structs.hpp"


namespace SDK::Params
{

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.CreateFukidasiDialogue
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Npc_C_CreateFukidasiDialogue final
{
public:
	TArray<struct FSTRUCT_NpcFukidasiDisc>        bpp__FukidasiDiscArray__pf;                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 bpp__CreateInstance__pf;                           // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_CreateFukidasiDialogue) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_CreateFukidasiDialogue");
static_assert(sizeof(BP_FLIB_Npc_C_CreateFukidasiDialogue) == 0x000020, "Wrong size on BP_FLIB_Npc_C_CreateFukidasiDialogue");
static_assert(offsetof(BP_FLIB_Npc_C_CreateFukidasiDialogue, bpp__FukidasiDiscArray__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_CreateFukidasiDialogue::bpp__FukidasiDiscArray__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_CreateFukidasiDialogue, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_CreateFukidasiDialogue::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_CreateFukidasiDialogue, bpp__CreateInstance__pf) == 0x000018, "Member 'BP_FLIB_Npc_C_CreateFukidasiDialogue::bpp__CreateInstance__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.GetChairTargetFromIndex
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Npc_C_GetChairTargetFromIndex final
{
public:
	class ABP_ChairTargetBase_C*                  bpp__TargetChair__pf;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_ChairTarget                              bpp__Index__pf;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   bpp__Target__pf;                                   // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_GetChairTargetFromIndex) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_GetChairTargetFromIndex");
static_assert(sizeof(BP_FLIB_Npc_C_GetChairTargetFromIndex) == 0x000020, "Wrong size on BP_FLIB_Npc_C_GetChairTargetFromIndex");
static_assert(offsetof(BP_FLIB_Npc_C_GetChairTargetFromIndex, bpp__TargetChair__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_GetChairTargetFromIndex::bpp__TargetChair__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_GetChairTargetFromIndex, bpp__Index__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_GetChairTargetFromIndex::bpp__Index__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_GetChairTargetFromIndex, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_GetChairTargetFromIndex::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_GetChairTargetFromIndex, bpp__Target__pf) == 0x000018, "Member 'BP_FLIB_Npc_C_GetChairTargetFromIndex::bpp__Target__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.GetGuestCharacterFromID
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Npc_C_GetGuestCharacterFromID final
{
public:
	EJackCharacter                                bpp__GuestID__pf;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AJackCharacter*                         bpp__GuestInst__pf;                                // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_GetGuestCharacterFromID) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_GetGuestCharacterFromID");
static_assert(sizeof(BP_FLIB_Npc_C_GetGuestCharacterFromID) == 0x000018, "Wrong size on BP_FLIB_Npc_C_GetGuestCharacterFromID");
static_assert(offsetof(BP_FLIB_Npc_C_GetGuestCharacterFromID, bpp__GuestID__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_GetGuestCharacterFromID::bpp__GuestID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_GetGuestCharacterFromID, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_GetGuestCharacterFromID::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_GetGuestCharacterFromID, bpp__GuestInst__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_GetGuestCharacterFromID::bpp__GuestInst__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.GetGuestLocation
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Npc_C_GetGuestLocation final
{
public:
	EJackCharacter                                bpp__GuestID__pf;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bpp__GuestLocation__pf;                            // 0x0010(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Npc_C_GetGuestLocation) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_GetGuestLocation");
static_assert(sizeof(BP_FLIB_Npc_C_GetGuestLocation) == 0x000020, "Wrong size on BP_FLIB_Npc_C_GetGuestLocation");
static_assert(offsetof(BP_FLIB_Npc_C_GetGuestLocation, bpp__GuestID__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_GetGuestLocation::bpp__GuestID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_GetGuestLocation, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_GetGuestLocation::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_GetGuestLocation, bpp__GuestLocation__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_GetGuestLocation::bpp__GuestLocation__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.GetGuestRotation
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Npc_C_GetGuestRotation final
{
public:
	EJackCharacter                                bpp__GuestID__pf;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__GuestRotation__pf;                            // 0x0010(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Npc_C_GetGuestRotation) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_GetGuestRotation");
static_assert(sizeof(BP_FLIB_Npc_C_GetGuestRotation) == 0x000020, "Wrong size on BP_FLIB_Npc_C_GetGuestRotation");
static_assert(offsetof(BP_FLIB_Npc_C_GetGuestRotation, bpp__GuestID__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_GetGuestRotation::bpp__GuestID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_GetGuestRotation, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_GetGuestRotation::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_GetGuestRotation, bpp__GuestRotation__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_GetGuestRotation::bpp__GuestRotation__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.GetLocationVolumeInfoFromID
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Npc_C_GetLocationVolumeInfoFromID final
{
public:
	struct FJackLDT_UIMapInfo                     bpp__ID__pf;                                       // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Result__pf;                                   // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackFloorLevel                               bpp__FloorLv__pf;                                  // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackFloorArea                                bpp__FloorArea__pf;                                // 0x001A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Npc_C_GetLocationVolumeInfoFromID) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_GetLocationVolumeInfoFromID");
static_assert(sizeof(BP_FLIB_Npc_C_GetLocationVolumeInfoFromID) == 0x000020, "Wrong size on BP_FLIB_Npc_C_GetLocationVolumeInfoFromID");
static_assert(offsetof(BP_FLIB_Npc_C_GetLocationVolumeInfoFromID, bpp__ID__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_GetLocationVolumeInfoFromID::bpp__ID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_GetLocationVolumeInfoFromID, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_GetLocationVolumeInfoFromID::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_GetLocationVolumeInfoFromID, bpp__Result__pf) == 0x000018, "Member 'BP_FLIB_Npc_C_GetLocationVolumeInfoFromID::bpp__Result__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_GetLocationVolumeInfoFromID, bpp__FloorLv__pf) == 0x000019, "Member 'BP_FLIB_Npc_C_GetLocationVolumeInfoFromID::bpp__FloorLv__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_GetLocationVolumeInfoFromID, bpp__FloorArea__pf) == 0x00001A, "Member 'BP_FLIB_Npc_C_GetLocationVolumeInfoFromID::bpp__FloorArea__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.GetLookAtTargetInfoDefaultForOther
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Npc_C_GetLookAtTargetInfoDefaultForOther final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Distance__pf;                                 // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Angle__pf;                                    // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_GetLookAtTargetInfoDefaultForOther) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_GetLookAtTargetInfoDefaultForOther");
static_assert(sizeof(BP_FLIB_Npc_C_GetLookAtTargetInfoDefaultForOther) == 0x000010, "Wrong size on BP_FLIB_Npc_C_GetLookAtTargetInfoDefaultForOther");
static_assert(offsetof(BP_FLIB_Npc_C_GetLookAtTargetInfoDefaultForOther, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_GetLookAtTargetInfoDefaultForOther::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_GetLookAtTargetInfoDefaultForOther, bpp__Distance__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_GetLookAtTargetInfoDefaultForOther::bpp__Distance__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_GetLookAtTargetInfoDefaultForOther, bpp__Angle__pf) == 0x00000C, "Member 'BP_FLIB_Npc_C_GetLookAtTargetInfoDefaultForOther::bpp__Angle__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.GetLookAtTargetInfoDefaultForPlayer
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Npc_C_GetLookAtTargetInfoDefaultForPlayer final
{
public:
	bool                                          bpp__IsInRoom__pf;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Distance__pf;                                 // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Angle__pf;                                    // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_GetLookAtTargetInfoDefaultForPlayer) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_GetLookAtTargetInfoDefaultForPlayer");
static_assert(sizeof(BP_FLIB_Npc_C_GetLookAtTargetInfoDefaultForPlayer) == 0x000018, "Wrong size on BP_FLIB_Npc_C_GetLookAtTargetInfoDefaultForPlayer");
static_assert(offsetof(BP_FLIB_Npc_C_GetLookAtTargetInfoDefaultForPlayer, bpp__IsInRoom__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_GetLookAtTargetInfoDefaultForPlayer::bpp__IsInRoom__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_GetLookAtTargetInfoDefaultForPlayer, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_GetLookAtTargetInfoDefaultForPlayer::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_GetLookAtTargetInfoDefaultForPlayer, bpp__Distance__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_GetLookAtTargetInfoDefaultForPlayer::bpp__Distance__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_GetLookAtTargetInfoDefaultForPlayer, bpp__Angle__pf) == 0x000014, "Member 'BP_FLIB_Npc_C_GetLookAtTargetInfoDefaultForPlayer::bpp__Angle__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.GetPlayTalkEndAnimation
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_Npc_C_GetPlayTalkEndAnimation final
{
public:
	bool                                          bpp__PlayFlag__pf;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__ForceSkipAnimation__pf;                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           bpp__DefaultAnim__pf;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           bpp__ReplaceAnim__pf;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           bpp__PlayAnim__pf;                                 // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_GetPlayTalkEndAnimation) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_GetPlayTalkEndAnimation");
static_assert(sizeof(BP_FLIB_Npc_C_GetPlayTalkEndAnimation) == 0x000028, "Wrong size on BP_FLIB_Npc_C_GetPlayTalkEndAnimation");
static_assert(offsetof(BP_FLIB_Npc_C_GetPlayTalkEndAnimation, bpp__PlayFlag__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_GetPlayTalkEndAnimation::bpp__PlayFlag__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_GetPlayTalkEndAnimation, bpp__ForceSkipAnimation__pf) == 0x000001, "Member 'BP_FLIB_Npc_C_GetPlayTalkEndAnimation::bpp__ForceSkipAnimation__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_GetPlayTalkEndAnimation, bpp__DefaultAnim__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_GetPlayTalkEndAnimation::bpp__DefaultAnim__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_GetPlayTalkEndAnimation, bpp__ReplaceAnim__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_GetPlayTalkEndAnimation::bpp__ReplaceAnim__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_GetPlayTalkEndAnimation, bpp____WorldContext__pf) == 0x000018, "Member 'BP_FLIB_Npc_C_GetPlayTalkEndAnimation::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_GetPlayTalkEndAnimation, bpp__PlayAnim__pf) == 0x000020, "Member 'BP_FLIB_Npc_C_GetPlayTalkEndAnimation::bpp__PlayAnim__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.Get ChairLoopAnim
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Npc_C_Get_ChairLoopAnim final
{
public:
	class AJackScheduledNPC*                      bpp__Target__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           bpp__ChairAnimLoop__pf;                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_Get_ChairLoopAnim) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_Get_ChairLoopAnim");
static_assert(sizeof(BP_FLIB_Npc_C_Get_ChairLoopAnim) == 0x000018, "Wrong size on BP_FLIB_Npc_C_Get_ChairLoopAnim");
static_assert(offsetof(BP_FLIB_Npc_C_Get_ChairLoopAnim, bpp__Target__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_Get_ChairLoopAnim::bpp__Target__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Get_ChairLoopAnim, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_Get_ChairLoopAnim::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Get_ChairLoopAnim, bpp__ChairAnimLoop__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_Get_ChairLoopAnim::bpp__ChairAnimLoop__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.MonsterVariantFormEnable
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Npc_C_MonsterVariantFormEnable final
{
public:
	class ABP_NPC_Monster_Base_C*                 bpp__Monster__pf;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bMonsterVariantForm__pf;                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_MonsterVariantFormEnable) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_MonsterVariantFormEnable");
static_assert(sizeof(BP_FLIB_Npc_C_MonsterVariantFormEnable) == 0x000018, "Wrong size on BP_FLIB_Npc_C_MonsterVariantFormEnable");
static_assert(offsetof(BP_FLIB_Npc_C_MonsterVariantFormEnable, bpp__Monster__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_MonsterVariantFormEnable::bpp__Monster__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_MonsterVariantFormEnable, bpp__bMonsterVariantForm__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_MonsterVariantFormEnable::bpp__bMonsterVariantForm__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_MonsterVariantFormEnable, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_MonsterVariantFormEnable::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.MovableForciblyNotGrounded
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Npc_C_MovableForciblyNotGrounded final
{
public:
	class AJackScheduledNPC*                      bpp__TargetNpc__pf;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_MovableForciblyNotGrounded) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_MovableForciblyNotGrounded");
static_assert(sizeof(BP_FLIB_Npc_C_MovableForciblyNotGrounded) == 0x000010, "Wrong size on BP_FLIB_Npc_C_MovableForciblyNotGrounded");
static_assert(offsetof(BP_FLIB_Npc_C_MovableForciblyNotGrounded, bpp__TargetNpc__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_MovableForciblyNotGrounded::bpp__TargetNpc__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_MovableForciblyNotGrounded, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_MovableForciblyNotGrounded::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.NpcAttachmentVisibleCtrl
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Npc_C_NpcAttachmentVisibleCtrl final
{
public:
	class ABP_NPC_Human_Base_C*                   bpp__NPC__pf;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bHidden__pf;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_NpcAttachmentVisibleCtrl) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_NpcAttachmentVisibleCtrl");
static_assert(sizeof(BP_FLIB_Npc_C_NpcAttachmentVisibleCtrl) == 0x000018, "Wrong size on BP_FLIB_Npc_C_NpcAttachmentVisibleCtrl");
static_assert(offsetof(BP_FLIB_Npc_C_NpcAttachmentVisibleCtrl, bpp__NPC__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_NpcAttachmentVisibleCtrl::bpp__NPC__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_NpcAttachmentVisibleCtrl, bpp__bHidden__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_NpcAttachmentVisibleCtrl::bpp__bHidden__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_NpcAttachmentVisibleCtrl, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_NpcAttachmentVisibleCtrl::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.NpcAttachmentVisibleCtrlFromTimeZone
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Npc_C_NpcAttachmentVisibleCtrlFromTimeZone final
{
public:
	class AJackScheduledNPC*                      bpp__NPC__pf;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__SchedulePtn__pf;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_NpcAttachmentVisibleCtrlFromTimeZone) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_NpcAttachmentVisibleCtrlFromTimeZone");
static_assert(sizeof(BP_FLIB_Npc_C_NpcAttachmentVisibleCtrlFromTimeZone) == 0x000018, "Wrong size on BP_FLIB_Npc_C_NpcAttachmentVisibleCtrlFromTimeZone");
static_assert(offsetof(BP_FLIB_Npc_C_NpcAttachmentVisibleCtrlFromTimeZone, bpp__NPC__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_NpcAttachmentVisibleCtrlFromTimeZone::bpp__NPC__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_NpcAttachmentVisibleCtrlFromTimeZone, bpp__SchedulePtn__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_NpcAttachmentVisibleCtrlFromTimeZone::bpp__SchedulePtn__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_NpcAttachmentVisibleCtrlFromTimeZone, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_NpcAttachmentVisibleCtrlFromTimeZone::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.PlayTalkStartAnimationCoreImpl
// 0x0058 (0x0058 - 0x0000)
struct BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl final
{
public:
	class AJackScheduledNPC*                      bpp__NPC__pf;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__PlayFlag__pf;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           bpp__AnimMontage__pf;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           bpp__AdddiveAnimMongage__pf;                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__WithTurn__pf;                                 // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__MessagexID__pfT;                              // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__TalkxBehind__pfT;                             // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AJackCharacter*                         bpp__GazexCharacter__pfT;                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__OutMessageID__pf;                             // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bExecuteStartAnimation__pf;                   // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl");
static_assert(sizeof(BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl) == 0x000058, "Wrong size on BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl");
static_assert(offsetof(BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl, bpp__NPC__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl::bpp__NPC__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl, bpp__PlayFlag__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl::bpp__PlayFlag__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl, bpp__AnimMontage__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl::bpp__AnimMontage__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl, bpp__AdddiveAnimMongage__pf) == 0x000018, "Member 'BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl::bpp__AdddiveAnimMongage__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl, bpp__WithTurn__pf) == 0x000020, "Member 'BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl::bpp__WithTurn__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl, bpp__MessagexID__pfT) == 0x000028, "Member 'BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl::bpp__MessagexID__pfT' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl, bpp__TalkxBehind__pfT) == 0x000030, "Member 'BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl::bpp__TalkxBehind__pfT' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl, bpp__GazexCharacter__pfT) == 0x000038, "Member 'BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl::bpp__GazexCharacter__pfT' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl, bpp____WorldContext__pf) == 0x000040, "Member 'BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl, bpp__OutMessageID__pf) == 0x000048, "Member 'BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl::bpp__OutMessageID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl, bpp__bExecuteStartAnimation__pf) == 0x000050, "Member 'BP_FLIB_Npc_C_PlayTalkStartAnimationCoreImpl::bpp__bExecuteStartAnimation__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.PlayTalkStartAnimationDefaultForCamp
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultForCamp final
{
public:
	class ABP_NPC_TalkBase_C*                     bpp__NPC__pf;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__MessageID__pf;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__OutMessageID__pf;                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultForCamp) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultForCamp");
static_assert(sizeof(BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultForCamp) == 0x000020, "Wrong size on BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultForCamp");
static_assert(offsetof(BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultForCamp, bpp__NPC__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultForCamp::bpp__NPC__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultForCamp, bpp__MessageID__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultForCamp::bpp__MessageID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultForCamp, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultForCamp::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultForCamp, bpp__OutMessageID__pf) == 0x000018, "Member 'BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultForCamp::bpp__OutMessageID__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.PlayTalkStartAnimationDefaultImpl
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultImpl final
{
public:
	class ABP_NPC_TalkBase_C*                     bpp__NPC__pf;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           bpp__AdditiveAnimMontage__pf;                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__MessageID__pf;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__AddiveAnimeDisable__pf;                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__OutMessageID__pf;                             // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultImpl) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultImpl");
static_assert(sizeof(BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultImpl) == 0x000030, "Wrong size on BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultImpl");
static_assert(offsetof(BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultImpl, bpp__NPC__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultImpl::bpp__NPC__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultImpl, bpp__AdditiveAnimMontage__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultImpl::bpp__AdditiveAnimMontage__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultImpl, bpp__MessageID__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultImpl::bpp__MessageID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultImpl, bpp__AddiveAnimeDisable__pf) == 0x000018, "Member 'BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultImpl::bpp__AddiveAnimeDisable__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultImpl, bpp____WorldContext__pf) == 0x000020, "Member 'BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultImpl::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultImpl, bpp__OutMessageID__pf) == 0x000028, "Member 'BP_FLIB_Npc_C_PlayTalkStartAnimationDefaultImpl::bpp__OutMessageID__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.Reset NPC Schedule NowTime
// 0x0008 (0x0008 - 0x0000)
struct BP_FLIB_Npc_C_Reset_NPC_Schedule_NowTime final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_Reset_NPC_Schedule_NowTime) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_Reset_NPC_Schedule_NowTime");
static_assert(sizeof(BP_FLIB_Npc_C_Reset_NPC_Schedule_NowTime) == 0x000008, "Wrong size on BP_FLIB_Npc_C_Reset_NPC_Schedule_NowTime");
static_assert(offsetof(BP_FLIB_Npc_C_Reset_NPC_Schedule_NowTime, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_Reset_NPC_Schedule_NowTime::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.ScheduleChangeDisableDither
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Npc_C_ScheduleChangeDisableDither final
{
public:
	TArray<class AJackScheduledNPC*>              bpp__TargetNpc__pf;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_ScheduleChangeDisableDither) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_ScheduleChangeDisableDither");
static_assert(sizeof(BP_FLIB_Npc_C_ScheduleChangeDisableDither) == 0x000018, "Wrong size on BP_FLIB_Npc_C_ScheduleChangeDisableDither");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleChangeDisableDither, bpp__TargetNpc__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_ScheduleChangeDisableDither::bpp__TargetNpc__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleChangeDisableDither, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_ScheduleChangeDisableDither::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.ScheduleEntryTypeChair
// 0x0058 (0x0058 - 0x0000)
struct BP_FLIB_Npc_C_ScheduleEntryTypeChair final
{
public:
	class AJackScheduledNPC*                      bpp__Target__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__ChairTag__pf;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           bpp__LoopAnimation__pf;                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           bpp__AddiveAnimation__pf;                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_TalkParamCustom                bpp__TalkDisc__pf;                                 // 0x0020(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__Pattern__pf;                                  // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReduction__pf;            // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf;      // 0x004A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_ScheduleEntryTypeChair) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_ScheduleEntryTypeChair");
static_assert(sizeof(BP_FLIB_Npc_C_ScheduleEntryTypeChair) == 0x000058, "Wrong size on BP_FLIB_Npc_C_ScheduleEntryTypeChair");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeChair, bpp__Target__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeChair::bpp__Target__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeChair, bpp__ChairTag__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeChair::bpp__ChairTag__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeChair, bpp__LoopAnimation__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeChair::bpp__LoopAnimation__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeChair, bpp__AddiveAnimation__pf) == 0x000018, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeChair::bpp__AddiveAnimation__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeChair, bpp__TalkDisc__pf) == 0x000020, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeChair::bpp__TalkDisc__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeChair, bpp__Pattern__pf) == 0x000048, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeChair::bpp__Pattern__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeChair, bpp__bDoNotSkipTickAtLoadReduction__pf) == 0x000049, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeChair::bpp__bDoNotSkipTickAtLoadReduction__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeChair, bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf) == 0x00004A, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeChair::bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeChair, bpp____WorldContext__pf) == 0x000050, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeChair::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.ScheduleEntryTypeStaticChair_Multi
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi final
{
public:
	class AJackScheduledNPC*                      bpp__Target__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__Ptn__pf;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Loop__pf;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Disappear__pf;                                // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReduction__pf;            // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf;      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__ChairTag__pf;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_ChairTarget                              bpp__TargetIndex__pf;                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Result__pf;                                   // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi");
static_assert(sizeof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi) == 0x000030, "Wrong size on BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi, bpp__Target__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi::bpp__Target__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi, bpp__Ptn__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi::bpp__Ptn__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi, bpp__Loop__pf) == 0x000009, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi::bpp__Loop__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi, bpp__Disappear__pf) == 0x00000A, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi::bpp__Disappear__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi, bpp__bDoNotSkipTickAtLoadReduction__pf) == 0x00000B, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi::bpp__bDoNotSkipTickAtLoadReduction__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi, bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf) == 0x00000C, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi::bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi, bpp__ChairTag__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi::bpp__ChairTag__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi, bpp__TargetIndex__pf) == 0x000018, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi::bpp__TargetIndex__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi, bpp____WorldContext__pf) == 0x000020, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi, bpp__Result__pf) == 0x000028, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Multi::bpp__Result__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.ScheduleEntryTypeStaticChair_Single
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Single final
{
public:
	class AJackScheduledNPC*                      bpp__Target__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__Ptn__pf;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Loop__pf;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Disappear__pf;                                // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReduction__pf;            // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf;      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__ChairTag__pf;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Result__pf;                                   // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Single) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Single");
static_assert(sizeof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Single) == 0x000028, "Wrong size on BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Single");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Single, bpp__Target__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Single::bpp__Target__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Single, bpp__Ptn__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Single::bpp__Ptn__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Single, bpp__Loop__pf) == 0x000009, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Single::bpp__Loop__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Single, bpp__Disappear__pf) == 0x00000A, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Single::bpp__Disappear__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Single, bpp__bDoNotSkipTickAtLoadReduction__pf) == 0x00000B, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Single::bpp__bDoNotSkipTickAtLoadReduction__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Single, bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf) == 0x00000C, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Single::bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Single, bpp__ChairTag__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Single::bpp__ChairTag__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Single, bpp____WorldContext__pf) == 0x000018, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Single::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Single, bpp__Result__pf) == 0x000020, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticChair_Single::bpp__Result__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.ScheduleEntryTypeStaticMultiChair_Talk
// 0x0080 (0x0080 - 0x0000)
struct BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk final
{
public:
	class AJackScheduledNPC*                      bpp__Target__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__Ptn__pf;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Loop__pf;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Disappear__pf;                                // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReduction__pf;            // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf;      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           bpp__ChairAnim__pf;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           bpp__AddiveAnim__pf;                               // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__ChairTag__pf;                                 // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__UsexCommonxTalkxCamera__pfTTT;                // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__TalkxSequencexEventxxName__pfTTTT;            // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__GazeModeLookAtDisable__pf;                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_ChairTarget                              bpp__TartetIndex__pf;                              // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 bpp__FukidasiID__pf__const;                        // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__FukidasixOncexOnly__pfTT;                     // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__CallLookAtEnd__pf;                            // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__EnableLookAtTarget__pf;                       // 0x0052(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 bpp__LookTarget__pf;                               // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__LookAtDistance__pf;                           // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__LookAtAngle__pf;                              // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           bpp__EndWaitAnim__pf;                              // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__DisablexTalkxSoonxAfterxTalk__pfTTTT;         // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0078(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk");
static_assert(sizeof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk) == 0x000080, "Wrong size on BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk, bpp__Target__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk::bpp__Target__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk, bpp__Ptn__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk::bpp__Ptn__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk, bpp__Loop__pf) == 0x000009, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk::bpp__Loop__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk, bpp__Disappear__pf) == 0x00000A, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk::bpp__Disappear__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk, bpp__bDoNotSkipTickAtLoadReduction__pf) == 0x00000B, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk::bpp__bDoNotSkipTickAtLoadReduction__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk, bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf) == 0x00000C, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk::bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk, bpp__ChairAnim__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk::bpp__ChairAnim__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk, bpp__AddiveAnim__pf) == 0x000018, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk::bpp__AddiveAnim__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk, bpp__ChairTag__pf) == 0x000020, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk::bpp__ChairTag__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk, bpp__UsexCommonxTalkxCamera__pfTTT) == 0x000028, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk::bpp__UsexCommonxTalkxCamera__pfTTT' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk, bpp__TalkxSequencexEventxxName__pfTTTT) == 0x000030, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk::bpp__TalkxSequencexEventxxName__pfTTTT' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk, bpp__GazeModeLookAtDisable__pf) == 0x000038, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk::bpp__GazeModeLookAtDisable__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk, bpp__TartetIndex__pf) == 0x000039, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk::bpp__TartetIndex__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk, bpp__FukidasiID__pf__const) == 0x000040, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk::bpp__FukidasiID__pf__const' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk, bpp__FukidasixOncexOnly__pfTT) == 0x000050, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk::bpp__FukidasixOncexOnly__pfTT' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk, bpp__CallLookAtEnd__pf) == 0x000051, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk::bpp__CallLookAtEnd__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk, bpp__EnableLookAtTarget__pf) == 0x000052, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk::bpp__EnableLookAtTarget__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk, bpp__LookTarget__pf) == 0x000058, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk::bpp__LookTarget__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk, bpp__LookAtDistance__pf) == 0x000060, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk::bpp__LookAtDistance__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk, bpp__LookAtAngle__pf) == 0x000064, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk::bpp__LookAtAngle__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk, bpp__EndWaitAnim__pf) == 0x000068, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk::bpp__EndWaitAnim__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk, bpp__DisablexTalkxSoonxAfterxTalk__pfTTTT) == 0x000070, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk::bpp__DisablexTalkxSoonxAfterxTalk__pfTTTT' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk, bpp____WorldContext__pf) == 0x000078, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticMultiChair_Talk::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.ScheduleEntryTypeStaticSingleChair_Talk
// 0x0080 (0x0080 - 0x0000)
struct BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk final
{
public:
	class AJackScheduledNPC*                      bpp__Target__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__Ptn__pf;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Loop__pf;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Disappear__pf;                                // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReduction__pf;            // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf;      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           bpp__ChairAnim__pf;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           bpp__AddivexAnim__pfT;                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__ChairTag__pf;                                 // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__UsexCommonxTalkxCamera__pfTTT;                // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__TalkxSequencexEventxxName__pfTTTT;            // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__GazeModeLookAtDisable__pf;                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 bpp__FukidasiID__pf__const;                        // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__FukidasixOncexOnrly__pfTT;                    // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__CallLookAtEnd__pf;                            // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__EnableLookAtTarget__pf;                       // 0x0052(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 bpp__LookTarget__pf;                               // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__LookAtDistance__pf;                           // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__LookAtAngle__pf;                              // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           bpp__EndWaitAnim__pf;                              // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__DisablexTalkxSoonxAfterxTalk__pfTTTT;         // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0078(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk");
static_assert(sizeof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk) == 0x000080, "Wrong size on BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk, bpp__Target__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk::bpp__Target__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk, bpp__Ptn__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk::bpp__Ptn__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk, bpp__Loop__pf) == 0x000009, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk::bpp__Loop__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk, bpp__Disappear__pf) == 0x00000A, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk::bpp__Disappear__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk, bpp__bDoNotSkipTickAtLoadReduction__pf) == 0x00000B, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk::bpp__bDoNotSkipTickAtLoadReduction__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk, bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf) == 0x00000C, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk::bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk, bpp__ChairAnim__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk::bpp__ChairAnim__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk, bpp__AddivexAnim__pfT) == 0x000018, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk::bpp__AddivexAnim__pfT' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk, bpp__ChairTag__pf) == 0x000020, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk::bpp__ChairTag__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk, bpp__UsexCommonxTalkxCamera__pfTTT) == 0x000028, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk::bpp__UsexCommonxTalkxCamera__pfTTT' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk, bpp__TalkxSequencexEventxxName__pfTTTT) == 0x000030, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk::bpp__TalkxSequencexEventxxName__pfTTTT' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk, bpp__GazeModeLookAtDisable__pf) == 0x000038, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk::bpp__GazeModeLookAtDisable__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk, bpp__FukidasiID__pf__const) == 0x000040, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk::bpp__FukidasiID__pf__const' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk, bpp__FukidasixOncexOnrly__pfTT) == 0x000050, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk::bpp__FukidasixOncexOnrly__pfTT' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk, bpp__CallLookAtEnd__pf) == 0x000051, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk::bpp__CallLookAtEnd__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk, bpp__EnableLookAtTarget__pf) == 0x000052, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk::bpp__EnableLookAtTarget__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk, bpp__LookTarget__pf) == 0x000058, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk::bpp__LookTarget__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk, bpp__LookAtDistance__pf) == 0x000060, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk::bpp__LookAtDistance__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk, bpp__LookAtAngle__pf) == 0x000064, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk::bpp__LookAtAngle__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk, bpp__EndWaitAnim__pf) == 0x000068, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk::bpp__EndWaitAnim__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk, bpp__DisablexTalkxSoonxAfterxTalk__pfTTTT) == 0x000070, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk::bpp__DisablexTalkxSoonxAfterxTalk__pfTTTT' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk, bpp____WorldContext__pf) == 0x000078, "Member 'BP_FLIB_Npc_C_ScheduleEntryTypeStaticSingleChair_Talk::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.ScheduleEntryWaitinOwnerSpot
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Npc_C_ScheduleEntryWaitinOwnerSpot final
{
public:
	class AJackScheduledNPC*                      bpp__Owner__pf;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_ScheduleEntryWaitinOwnerSpot) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_ScheduleEntryWaitinOwnerSpot");
static_assert(sizeof(BP_FLIB_Npc_C_ScheduleEntryWaitinOwnerSpot) == 0x000010, "Wrong size on BP_FLIB_Npc_C_ScheduleEntryWaitinOwnerSpot");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryWaitinOwnerSpot, bpp__Owner__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_ScheduleEntryWaitinOwnerSpot::bpp__Owner__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_ScheduleEntryWaitinOwnerSpot, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_ScheduleEntryWaitinOwnerSpot::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.Schedule Entry Look at Target
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_Npc_C_Schedule_Entry_Look_at_Target final
{
public:
	class AJackScheduledNPC*                      bpp__Target__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 bpp__LookatTarget__pf;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__LookatSocket__pf;                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__SingleNode__pf;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         bpp__LookAtDistance__pf;                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__LookAtAngle__pf;                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_Schedule_Entry_Look_at_Target) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_Schedule_Entry_Look_at_Target");
static_assert(sizeof(BP_FLIB_Npc_C_Schedule_Entry_Look_at_Target) == 0x000030, "Wrong size on BP_FLIB_Npc_C_Schedule_Entry_Look_at_Target");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Look_at_Target, bpp__Target__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Look_at_Target::bpp__Target__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Look_at_Target, bpp__LookatTarget__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Look_at_Target::bpp__LookatTarget__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Look_at_Target, bpp__LookatSocket__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Look_at_Target::bpp__LookatSocket__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Look_at_Target, bpp__SingleNode__pf) == 0x000018, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Look_at_Target::bpp__SingleNode__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Look_at_Target, bpp__LookAtDistance__pf) == 0x00001C, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Look_at_Target::bpp__LookAtDistance__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Look_at_Target, bpp__LookAtAngle__pf) == 0x000020, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Look_at_Target::bpp__LookAtAngle__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Look_at_Target, bpp____WorldContext__pf) == 0x000028, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Look_at_Target::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.Schedule Entry Set Talk Custom
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_Npc_C_Schedule_Entry_Set_Talk_Custom final
{
public:
	class AJackScheduledNPC*                      bpp__Target__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__UseCommonTalkCamera__pf;                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__SquenceEventName__pf;                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           bpp__EndWaitAnimMontage__pf;                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__DisablexTalkxSoonxAfterxTalk__pfTTTT;         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_Schedule_Entry_Set_Talk_Custom) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_Schedule_Entry_Set_Talk_Custom");
static_assert(sizeof(BP_FLIB_Npc_C_Schedule_Entry_Set_Talk_Custom) == 0x000030, "Wrong size on BP_FLIB_Npc_C_Schedule_Entry_Set_Talk_Custom");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Set_Talk_Custom, bpp__Target__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Set_Talk_Custom::bpp__Target__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Set_Talk_Custom, bpp__UseCommonTalkCamera__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Set_Talk_Custom::bpp__UseCommonTalkCamera__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Set_Talk_Custom, bpp__SquenceEventName__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Set_Talk_Custom::bpp__SquenceEventName__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Set_Talk_Custom, bpp__EndWaitAnimMontage__pf) == 0x000018, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Set_Talk_Custom::bpp__EndWaitAnimMontage__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Set_Talk_Custom, bpp__DisablexTalkxSoonxAfterxTalk__pfTTTT) == 0x000020, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Set_Talk_Custom::bpp__DisablexTalkxSoonxAfterxTalk__pfTTTT' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Set_Talk_Custom, bpp____WorldContext__pf) == 0x000028, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Set_Talk_Custom::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.Schedule Entry Set  GazeMode In Talk Custom
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_Npc_C_Schedule_Entry_Set__GazeMode_In_Talk_Custom final
{
public:
	class AJackScheduledNPC*                      bpp__Target__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__UseCommonTalkCamera__pf;                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__SquenceEventName__pf;                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackNPCTalkGazeMode                          bpp__GazeMode__pf;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_Schedule_Entry_Set__GazeMode_In_Talk_Custom) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_Schedule_Entry_Set__GazeMode_In_Talk_Custom");
static_assert(sizeof(BP_FLIB_Npc_C_Schedule_Entry_Set__GazeMode_In_Talk_Custom) == 0x000028, "Wrong size on BP_FLIB_Npc_C_Schedule_Entry_Set__GazeMode_In_Talk_Custom");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Set__GazeMode_In_Talk_Custom, bpp__Target__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Set__GazeMode_In_Talk_Custom::bpp__Target__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Set__GazeMode_In_Talk_Custom, bpp__UseCommonTalkCamera__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Set__GazeMode_In_Talk_Custom::bpp__UseCommonTalkCamera__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Set__GazeMode_In_Talk_Custom, bpp__SquenceEventName__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Set__GazeMode_In_Talk_Custom::bpp__SquenceEventName__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Set__GazeMode_In_Talk_Custom, bpp__GazeMode__pf) == 0x000018, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Set__GazeMode_In_Talk_Custom::bpp__GazeMode__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Set__GazeMode_In_Talk_Custom, bpp____WorldContext__pf) == 0x000020, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Set__GazeMode_In_Talk_Custom::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.Schedule Entry Type Move And Anim
// 0x00E8 (0x00E8 - 0x0000)
struct BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim final
{
public:
	class AJackScheduledNPC*                      bpp__Target__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_NpcMoveParam                   bpp__MoveParam__pf;                                // 0x0008(0x0060)(Parm, NativeAccessSpecifierPublic)
	float                                         bpp__Angle__pf;                                    // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           bpp__OneShotAnim__pf;                              // 0x0070(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           bpp__LoopAnim__pf;                                 // 0x0078(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           bpp__ScheduleChangeAnim__pf;                       // 0x0080(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_TalkParamCustom                bpp__AnimTalkParam__pf;                            // 0x0088(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_NpcLookatParam                 bpp__AnimLookatParam__pf;                          // 0x00B0(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__Pattern__pf;                                  // 0x00C8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReduction__pf;            // 0x00C9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf;      // 0x00CA(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CB[0x5];                                       // 0x00CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x00D0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AJackScheduledNPC*                      bpp__TargetNext__pf;                               // 0x00D8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__PatternNext__pf;                              // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim");
static_assert(sizeof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim) == 0x0000E8, "Wrong size on BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim, bpp__Target__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim::bpp__Target__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim, bpp__MoveParam__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim::bpp__MoveParam__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim, bpp__Angle__pf) == 0x000068, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim::bpp__Angle__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim, bpp__OneShotAnim__pf) == 0x000070, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim::bpp__OneShotAnim__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim, bpp__LoopAnim__pf) == 0x000078, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim::bpp__LoopAnim__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim, bpp__ScheduleChangeAnim__pf) == 0x000080, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim::bpp__ScheduleChangeAnim__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim, bpp__AnimTalkParam__pf) == 0x000088, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim::bpp__AnimTalkParam__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim, bpp__AnimLookatParam__pf) == 0x0000B0, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim::bpp__AnimLookatParam__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim, bpp__Pattern__pf) == 0x0000C8, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim::bpp__Pattern__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim, bpp__bDoNotSkipTickAtLoadReduction__pf) == 0x0000C9, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim::bpp__bDoNotSkipTickAtLoadReduction__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim, bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf) == 0x0000CA, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim::bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim, bpp____WorldContext__pf) == 0x0000D0, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim, bpp__TargetNext__pf) == 0x0000D8, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim::bpp__TargetNext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim, bpp__PatternNext__pf) == 0x0000E0, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Anim::bpp__PatternNext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.Schedule Entry Type Move And Chair
// 0x00A0 (0x00A0 - 0x0000)
struct BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair final
{
public:
	class AJackScheduledNPC*                      bpp__Target__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__ChairTag__pf;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_NpcChairPosition                         bpp__Position__pf;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           bpp__SitLoopAnimMontage__pf;                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           bpp__SitAdditiveAnimMontage__pf;                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           bpp__SitScheduleChangeAnimMontage__pf;             // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_TalkParamCustom                bpp__MoveTalk__pf;                                 // 0x0030(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_TalkParamCustom                bpp__SitTalk__pf;                                  // 0x0058(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__Pattern__pf;                                  // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__PlayLoop__pf;                                 // 0x0081(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReduction__pf;            // 0x0082(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf;      // 0x0083(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_NpcChairPosition                         bpp__InputPin__pf;                                 // 0x0084(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0088(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AJackScheduledNPC*                      bpp__TargetNext__pf;                               // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__PatternNext__pf;                              // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair");
static_assert(sizeof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair) == 0x0000A0, "Wrong size on BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair, bpp__Target__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair::bpp__Target__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair, bpp__ChairTag__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair::bpp__ChairTag__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair, bpp__Position__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair::bpp__Position__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair, bpp__SitLoopAnimMontage__pf) == 0x000018, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair::bpp__SitLoopAnimMontage__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair, bpp__SitAdditiveAnimMontage__pf) == 0x000020, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair::bpp__SitAdditiveAnimMontage__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair, bpp__SitScheduleChangeAnimMontage__pf) == 0x000028, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair::bpp__SitScheduleChangeAnimMontage__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair, bpp__MoveTalk__pf) == 0x000030, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair::bpp__MoveTalk__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair, bpp__SitTalk__pf) == 0x000058, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair::bpp__SitTalk__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair, bpp__Pattern__pf) == 0x000080, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair::bpp__Pattern__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair, bpp__PlayLoop__pf) == 0x000081, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair::bpp__PlayLoop__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair, bpp__bDoNotSkipTickAtLoadReduction__pf) == 0x000082, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair::bpp__bDoNotSkipTickAtLoadReduction__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair, bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf) == 0x000083, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair::bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair, bpp__InputPin__pf) == 0x000084, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair::bpp__InputPin__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair, bpp____WorldContext__pf) == 0x000088, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair, bpp__TargetNext__pf) == 0x000090, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair::bpp__TargetNext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair, bpp__PatternNext__pf) == 0x000098, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Chair::bpp__PatternNext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.Schedule Entry Type Move And Looping
// 0x0098 (0x0098 - 0x0000)
struct BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Looping final
{
public:
	class AJackScheduledNPC*                      bpp__Target__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_NpcMoveParam                   bpp__MoveParam__pf;                                // 0x0008(0x0060)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FSTRUCT_NpcMoveParam>           bpp__LoopingMoveParam__pf;                         // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__Pattern__pf;                                  // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReduction__pf;            // 0x0079(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf;      // 0x007A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B[0x5];                                       // 0x007B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0080(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AJackScheduledNPC*                      bpp__TargetNext__pf;                               // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__PatternNext__pf;                              // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Looping) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Looping");
static_assert(sizeof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Looping) == 0x000098, "Wrong size on BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Looping");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Looping, bpp__Target__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Looping::bpp__Target__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Looping, bpp__MoveParam__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Looping::bpp__MoveParam__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Looping, bpp__LoopingMoveParam__pf) == 0x000068, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Looping::bpp__LoopingMoveParam__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Looping, bpp__Pattern__pf) == 0x000078, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Looping::bpp__Pattern__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Looping, bpp__bDoNotSkipTickAtLoadReduction__pf) == 0x000079, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Looping::bpp__bDoNotSkipTickAtLoadReduction__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Looping, bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf) == 0x00007A, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Looping::bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Looping, bpp____WorldContext__pf) == 0x000080, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Looping::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Looping, bpp__TargetNext__pf) == 0x000088, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Looping::bpp__TargetNext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Looping, bpp__PatternNext__pf) == 0x000090, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Looping::bpp__PatternNext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.Schedule Entry Type Move And Wander
// 0x00B8 (0x00B8 - 0x0000)
struct BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander final
{
public:
	class AJackScheduledNPC*                      bpp__Target__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_NpcMoveParam                   bpp__MoveParam__pf;                                // 0x0008(0x0060)(Parm, NativeAccessSpecifierPublic)
	int32                                         bpp__MinWaitMinute__pf;                            // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__MaxWaitMinute__pf;                            // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_TalkParamCustom                bpp__WanderTalk__pf;                               // 0x0070(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__Pattern__pf;                                  // 0x0098(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReduction__pf;            // 0x0099(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf;      // 0x009A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9B[0x5];                                       // 0x009B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x00A0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AJackScheduledNPC*                      bpp__TargetNext__pf;                               // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__PatternNext__pf;                              // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander");
static_assert(sizeof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander) == 0x0000B8, "Wrong size on BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander, bpp__Target__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander::bpp__Target__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander, bpp__MoveParam__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander::bpp__MoveParam__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander, bpp__MinWaitMinute__pf) == 0x000068, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander::bpp__MinWaitMinute__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander, bpp__MaxWaitMinute__pf) == 0x00006C, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander::bpp__MaxWaitMinute__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander, bpp__WanderTalk__pf) == 0x000070, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander::bpp__WanderTalk__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander, bpp__Pattern__pf) == 0x000098, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander::bpp__Pattern__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander, bpp__bDoNotSkipTickAtLoadReduction__pf) == 0x000099, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander::bpp__bDoNotSkipTickAtLoadReduction__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander, bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf) == 0x00009A, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander::bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander, bpp____WorldContext__pf) == 0x0000A0, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander, bpp__TargetNext__pf) == 0x0000A8, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander::bpp__TargetNext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander, bpp__PatternNext__pf) == 0x0000B0, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Move_And_Wander::bpp__PatternNext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.Schedule Entry Type Some Move And Anim
// 0x0098 (0x0098 - 0x0000)
struct BP_FLIB_Npc_C_Schedule_Entry_Type_Some_Move_And_Anim final
{
public:
	class AJackScheduledNPC*                      bpp__Target__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_NpcMoveParam                   bpp__MoveParam__pf;                                // 0x0008(0x0060)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FSTRUCT_MoveAndAnimParam>       bpp__MoveAndAnimParam__pf;                         // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__Pattern__pf;                                  // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReduction__pf;            // 0x0079(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf;      // 0x007A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B[0x5];                                       // 0x007B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0080(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AJackScheduledNPC*                      bpp__TargetNext__pf;                               // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__PatternNext__pf;                              // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Npc_C_Schedule_Entry_Type_Some_Move_And_Anim) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_Schedule_Entry_Type_Some_Move_And_Anim");
static_assert(sizeof(BP_FLIB_Npc_C_Schedule_Entry_Type_Some_Move_And_Anim) == 0x000098, "Wrong size on BP_FLIB_Npc_C_Schedule_Entry_Type_Some_Move_And_Anim");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Some_Move_And_Anim, bpp__Target__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Some_Move_And_Anim::bpp__Target__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Some_Move_And_Anim, bpp__MoveParam__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Some_Move_And_Anim::bpp__MoveParam__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Some_Move_And_Anim, bpp__MoveAndAnimParam__pf) == 0x000068, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Some_Move_And_Anim::bpp__MoveAndAnimParam__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Some_Move_And_Anim, bpp__Pattern__pf) == 0x000078, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Some_Move_And_Anim::bpp__Pattern__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Some_Move_And_Anim, bpp__bDoNotSkipTickAtLoadReduction__pf) == 0x000079, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Some_Move_And_Anim::bpp__bDoNotSkipTickAtLoadReduction__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Some_Move_And_Anim, bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf) == 0x00007A, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Some_Move_And_Anim::bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Some_Move_And_Anim, bpp____WorldContext__pf) == 0x000080, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Some_Move_And_Anim::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Some_Move_And_Anim, bpp__TargetNext__pf) == 0x000088, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Some_Move_And_Anim::bpp__TargetNext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Some_Move_And_Anim, bpp__PatternNext__pf) == 0x000090, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Some_Move_And_Anim::bpp__PatternNext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.Schedule Entry Type Stay
// 0x0070 (0x0070 - 0x0000)
struct BP_FLIB_Npc_C_Schedule_Entry_Type_Stay final
{
public:
	class AJackScheduledNPC*                      bpp__Target__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           bpp__LoopAnim__pf;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           bpp__AdditiveAnimMontage__pf;                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           bpp__ScheduleChangeAnimMontage__pf;                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_TalkParamCustom                bpp__TalkParam__pf;                                // 0x0020(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_NpcLookatParam                 bpp__LookatParam__pf;                              // 0x0048(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__Pattern__pf;                                  // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReduction__pf;            // 0x0061(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf;      // 0x0062(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_Schedule_Entry_Type_Stay) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_Schedule_Entry_Type_Stay");
static_assert(sizeof(BP_FLIB_Npc_C_Schedule_Entry_Type_Stay) == 0x000070, "Wrong size on BP_FLIB_Npc_C_Schedule_Entry_Type_Stay");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Stay, bpp__Target__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Stay::bpp__Target__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Stay, bpp__LoopAnim__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Stay::bpp__LoopAnim__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Stay, bpp__AdditiveAnimMontage__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Stay::bpp__AdditiveAnimMontage__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Stay, bpp__ScheduleChangeAnimMontage__pf) == 0x000018, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Stay::bpp__ScheduleChangeAnimMontage__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Stay, bpp__TalkParam__pf) == 0x000020, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Stay::bpp__TalkParam__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Stay, bpp__LookatParam__pf) == 0x000048, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Stay::bpp__LookatParam__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Stay, bpp__Pattern__pf) == 0x000060, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Stay::bpp__Pattern__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Stay, bpp__bDoNotSkipTickAtLoadReduction__pf) == 0x000061, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Stay::bpp__bDoNotSkipTickAtLoadReduction__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Stay, bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf) == 0x000062, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Stay::bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Stay, bpp____WorldContext__pf) == 0x000068, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Stay::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.Schedule Entry Type Wander
// 0x0050 (0x0050 - 0x0000)
struct BP_FLIB_Npc_C_Schedule_Entry_Type_Wander final
{
public:
	class AJackScheduledNPC*                      bpp__Target__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AJackGoalMarker*                        bpp__Center__pf;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__MinWaitMinute__pf;                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__MaxWaitMiunte__pf;                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_TalkParamCustom                bpp__TalkParam__pf;                                // 0x0018(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__Pattern__pf;                                  // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReduction__pf;            // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf;      // 0x0042(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_Schedule_Entry_Type_Wander) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_Schedule_Entry_Type_Wander");
static_assert(sizeof(BP_FLIB_Npc_C_Schedule_Entry_Type_Wander) == 0x000050, "Wrong size on BP_FLIB_Npc_C_Schedule_Entry_Type_Wander");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Wander, bpp__Target__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Wander::bpp__Target__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Wander, bpp__Center__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Wander::bpp__Center__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Wander, bpp__MinWaitMinute__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Wander::bpp__MinWaitMinute__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Wander, bpp__MaxWaitMiunte__pf) == 0x000014, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Wander::bpp__MaxWaitMiunte__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Wander, bpp__TalkParam__pf) == 0x000018, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Wander::bpp__TalkParam__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Wander, bpp__Pattern__pf) == 0x000040, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Wander::bpp__Pattern__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Wander, bpp__bDoNotSkipTickAtLoadReduction__pf) == 0x000041, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Wander::bpp__bDoNotSkipTickAtLoadReduction__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Wander, bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf) == 0x000042, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Wander::bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Schedule_Entry_Type_Wander, bpp____WorldContext__pf) == 0x000048, "Member 'BP_FLIB_Npc_C_Schedule_Entry_Type_Wander::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.SetForceAfterInterruptPlayerLeaveDistance
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Npc_C_SetForceAfterInterruptPlayerLeaveDistance final
{
public:
	class AJackScheduledNPC*                      bpp__TargetNpc__pf;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_AfterInterruptPlayerLeaveDistance        bpp__DistancePreset__pf;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_SetForceAfterInterruptPlayerLeaveDistance) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_SetForceAfterInterruptPlayerLeaveDistance");
static_assert(sizeof(BP_FLIB_Npc_C_SetForceAfterInterruptPlayerLeaveDistance) == 0x000018, "Wrong size on BP_FLIB_Npc_C_SetForceAfterInterruptPlayerLeaveDistance");
static_assert(offsetof(BP_FLIB_Npc_C_SetForceAfterInterruptPlayerLeaveDistance, bpp__TargetNpc__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_SetForceAfterInterruptPlayerLeaveDistance::bpp__TargetNpc__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_SetForceAfterInterruptPlayerLeaveDistance, bpp__DistancePreset__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_SetForceAfterInterruptPlayerLeaveDistance::bpp__DistancePreset__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_SetForceAfterInterruptPlayerLeaveDistance, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_SetForceAfterInterruptPlayerLeaveDistance::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.SetIgnorePlayer
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Npc_C_SetIgnorePlayer final
{
public:
	class AJackScheduledNPC*                      bpp__TargetNpc__pf;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__IgnorexEnable__pfT;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_SetIgnorePlayer) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_SetIgnorePlayer");
static_assert(sizeof(BP_FLIB_Npc_C_SetIgnorePlayer) == 0x000018, "Wrong size on BP_FLIB_Npc_C_SetIgnorePlayer");
static_assert(offsetof(BP_FLIB_Npc_C_SetIgnorePlayer, bpp__TargetNpc__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_SetIgnorePlayer::bpp__TargetNpc__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_SetIgnorePlayer, bpp__IgnorexEnable__pfT) == 0x000008, "Member 'BP_FLIB_Npc_C_SetIgnorePlayer::bpp__IgnorexEnable__pfT' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_SetIgnorePlayer, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_SetIgnorePlayer::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.SetNpcImportance
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Npc_C_SetNpcImportance final
{
public:
	class AJackScheduledNPC*                      bpp__NPC__pf;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackNPCImportance                            bpp__Inportance__pf;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_SetNpcImportance) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_SetNpcImportance");
static_assert(sizeof(BP_FLIB_Npc_C_SetNpcImportance) == 0x000018, "Wrong size on BP_FLIB_Npc_C_SetNpcImportance");
static_assert(offsetof(BP_FLIB_Npc_C_SetNpcImportance, bpp__NPC__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_SetNpcImportance::bpp__NPC__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_SetNpcImportance, bpp__Inportance__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_SetNpcImportance::bpp__Inportance__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_SetNpcImportance, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_SetNpcImportance::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.SetNpcPipipiTypeFromSerifuID
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Npc_C_SetNpcPipipiTypeFromSerifuID final
{
public:
	class FName                                   bpp__TextID__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_SetNpcPipipiTypeFromSerifuID) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_SetNpcPipipiTypeFromSerifuID");
static_assert(sizeof(BP_FLIB_Npc_C_SetNpcPipipiTypeFromSerifuID) == 0x000010, "Wrong size on BP_FLIB_Npc_C_SetNpcPipipiTypeFromSerifuID");
static_assert(offsetof(BP_FLIB_Npc_C_SetNpcPipipiTypeFromSerifuID, bpp__TextID__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_SetNpcPipipiTypeFromSerifuID::bpp__TextID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_SetNpcPipipiTypeFromSerifuID, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_SetNpcPipipiTypeFromSerifuID::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.SetRelayGoalMakers
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_Npc_C_SetRelayGoalMakers final
{
public:
	class AJackScheduledNPC*                      bpp__NPC__pf;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AJackGoalMarker*>                bpp__RelayGoalMarkers__pf;                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAnimMontage*                           bpp__AnimMontage__pf;                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Velocity__pf;                                 // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_SetRelayGoalMakers) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_SetRelayGoalMakers");
static_assert(sizeof(BP_FLIB_Npc_C_SetRelayGoalMakers) == 0x000030, "Wrong size on BP_FLIB_Npc_C_SetRelayGoalMakers");
static_assert(offsetof(BP_FLIB_Npc_C_SetRelayGoalMakers, bpp__NPC__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_SetRelayGoalMakers::bpp__NPC__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_SetRelayGoalMakers, bpp__RelayGoalMarkers__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_SetRelayGoalMakers::bpp__RelayGoalMarkers__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_SetRelayGoalMakers, bpp__AnimMontage__pf) == 0x000018, "Member 'BP_FLIB_Npc_C_SetRelayGoalMakers::bpp__AnimMontage__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_SetRelayGoalMakers, bpp__Velocity__pf) == 0x000020, "Member 'BP_FLIB_Npc_C_SetRelayGoalMakers::bpp__Velocity__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_SetRelayGoalMakers, bpp____WorldContext__pf) == 0x000028, "Member 'BP_FLIB_Npc_C_SetRelayGoalMakers::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.SetTargetLocationAndRotationFromTagChair
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Npc_C_SetTargetLocationAndRotationFromTagChair final
{
public:
	class AJackScheduledNPC*                      bpp__Target__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__Tag__pf;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_SetTargetLocationAndRotationFromTagChair) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_SetTargetLocationAndRotationFromTagChair");
static_assert(sizeof(BP_FLIB_Npc_C_SetTargetLocationAndRotationFromTagChair) == 0x000018, "Wrong size on BP_FLIB_Npc_C_SetTargetLocationAndRotationFromTagChair");
static_assert(offsetof(BP_FLIB_Npc_C_SetTargetLocationAndRotationFromTagChair, bpp__Target__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_SetTargetLocationAndRotationFromTagChair::bpp__Target__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_SetTargetLocationAndRotationFromTagChair, bpp__Tag__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_SetTargetLocationAndRotationFromTagChair::bpp__Tag__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_SetTargetLocationAndRotationFromTagChair, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_SetTargetLocationAndRotationFromTagChair::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.Set Load Reduction Skip Look At Distance
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Npc_C_Set_Load_Reduction_Skip_Look_At_Distance final
{
public:
	class AJackScheduledNPC*                      bpp__TargetNpc__pf;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Distance__pf;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_Set_Load_Reduction_Skip_Look_At_Distance) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_Set_Load_Reduction_Skip_Look_At_Distance");
static_assert(sizeof(BP_FLIB_Npc_C_Set_Load_Reduction_Skip_Look_At_Distance) == 0x000018, "Wrong size on BP_FLIB_Npc_C_Set_Load_Reduction_Skip_Look_At_Distance");
static_assert(offsetof(BP_FLIB_Npc_C_Set_Load_Reduction_Skip_Look_At_Distance, bpp__TargetNpc__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_Set_Load_Reduction_Skip_Look_At_Distance::bpp__TargetNpc__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Set_Load_Reduction_Skip_Look_At_Distance, bpp__Distance__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_Set_Load_Reduction_Skip_Look_At_Distance::bpp__Distance__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Set_Load_Reduction_Skip_Look_At_Distance, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_Set_Load_Reduction_Skip_Look_At_Distance::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.Set Lookat Param
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_Npc_C_Set_Lookat_Param final
{
public:
	class AJackScheduledNPC*                      bpp__Target__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_NpcLookatParam                 bpp__LookatParam__pf;                              // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_Set_Lookat_Param) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_Set_Lookat_Param");
static_assert(sizeof(BP_FLIB_Npc_C_Set_Lookat_Param) == 0x000028, "Wrong size on BP_FLIB_Npc_C_Set_Lookat_Param");
static_assert(offsetof(BP_FLIB_Npc_C_Set_Lookat_Param, bpp__Target__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_Set_Lookat_Param::bpp__Target__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Set_Lookat_Param, bpp__LookatParam__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_Set_Lookat_Param::bpp__LookatParam__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Set_Lookat_Param, bpp____WorldContext__pf) == 0x000020, "Member 'BP_FLIB_Npc_C_Set_Lookat_Param::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.Set Talking Npc
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Npc_C_Set_Talking_Npc final
{
public:
	class AJackCharacter*                         bpp__TalkingNpc__pf;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_Set_Talking_Npc) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_Set_Talking_Npc");
static_assert(sizeof(BP_FLIB_Npc_C_Set_Talking_Npc) == 0x000010, "Wrong size on BP_FLIB_Npc_C_Set_Talking_Npc");
static_assert(offsetof(BP_FLIB_Npc_C_Set_Talking_Npc, bpp__TalkingNpc__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_Set_Talking_Npc::bpp__TalkingNpc__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Set_Talking_Npc, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_Set_Talking_Npc::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.Set Talk Param Custom
// 0x0048 (0x0048 - 0x0000)
struct BP_FLIB_Npc_C_Set_Talk_Param_Custom final
{
public:
	class AJackScheduledNPC*                      bpp__Target__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_TalkParamCustom                bpp__TalkParam__pf;                                // 0x0008(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           bpp__EndWaitAnimMontage__pf;                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__DisablexTalkxSoonxAfterxTalk__pfTTTT;         // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_Set_Talk_Param_Custom) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_Set_Talk_Param_Custom");
static_assert(sizeof(BP_FLIB_Npc_C_Set_Talk_Param_Custom) == 0x000048, "Wrong size on BP_FLIB_Npc_C_Set_Talk_Param_Custom");
static_assert(offsetof(BP_FLIB_Npc_C_Set_Talk_Param_Custom, bpp__Target__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_Set_Talk_Param_Custom::bpp__Target__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Set_Talk_Param_Custom, bpp__TalkParam__pf) == 0x000008, "Member 'BP_FLIB_Npc_C_Set_Talk_Param_Custom::bpp__TalkParam__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Set_Talk_Param_Custom, bpp__EndWaitAnimMontage__pf) == 0x000030, "Member 'BP_FLIB_Npc_C_Set_Talk_Param_Custom::bpp__EndWaitAnimMontage__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Set_Talk_Param_Custom, bpp__DisablexTalkxSoonxAfterxTalk__pfTTTT) == 0x000038, "Member 'BP_FLIB_Npc_C_Set_Talk_Param_Custom::bpp__DisablexTalkxSoonxAfterxTalk__pfTTTT' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_Set_Talk_Param_Custom, bpp____WorldContext__pf) == 0x000040, "Member 'BP_FLIB_Npc_C_Set_Talk_Param_Custom::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Npc.BP_FLIB_Npc_C.UpdateMapSymbol
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Npc_C_UpdateMapSymbol final
{
public:
	class UJackMiniMapTargetComponent*            bpp__MInimapComp__pf;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackMapSymbol                                bpp__DstxMapSymbol__pfT;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Npc_C_UpdateMapSymbol) == 0x000008, "Wrong alignment on BP_FLIB_Npc_C_UpdateMapSymbol");
static_assert(sizeof(BP_FLIB_Npc_C_UpdateMapSymbol) == 0x000018, "Wrong size on BP_FLIB_Npc_C_UpdateMapSymbol");
static_assert(offsetof(BP_FLIB_Npc_C_UpdateMapSymbol, bpp__MInimapComp__pf) == 0x000000, "Member 'BP_FLIB_Npc_C_UpdateMapSymbol::bpp__MInimapComp__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_UpdateMapSymbol, bpp__DstxMapSymbol__pfT) == 0x000008, "Member 'BP_FLIB_Npc_C_UpdateMapSymbol::bpp__DstxMapSymbol__pfT' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Npc_C_UpdateMapSymbol, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Npc_C_UpdateMapSymbol::bpp____WorldContext__pf' has a wrong offset!");

}

