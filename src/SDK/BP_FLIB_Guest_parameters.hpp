#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FLIB_Guest

#include "Basic.hpp"

#include "JackGame_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_FLIB_Guest.BP_FLIB_Guest_C.GetForecastWarpPositionGuest
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_Guest_C_GetForecastWarpPositionGuest final
{
public:
	class AJackGoalMarker*                        bpp__1stTarget__pf;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AJackGoalMarker*                        bpp__2stTarget__pf;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABP_NPC_Base_C*                         bpp__TargetNpc__pf;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bpp__ForeCastPos__pf;                              // 0x0020(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Guest_C_GetForecastWarpPositionGuest) == 0x000008, "Wrong alignment on BP_FLIB_Guest_C_GetForecastWarpPositionGuest");
static_assert(sizeof(BP_FLIB_Guest_C_GetForecastWarpPositionGuest) == 0x000030, "Wrong size on BP_FLIB_Guest_C_GetForecastWarpPositionGuest");
static_assert(offsetof(BP_FLIB_Guest_C_GetForecastWarpPositionGuest, bpp__1stTarget__pf) == 0x000000, "Member 'BP_FLIB_Guest_C_GetForecastWarpPositionGuest::bpp__1stTarget__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Guest_C_GetForecastWarpPositionGuest, bpp__2stTarget__pf) == 0x000008, "Member 'BP_FLIB_Guest_C_GetForecastWarpPositionGuest::bpp__2stTarget__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Guest_C_GetForecastWarpPositionGuest, bpp__TargetNpc__pf) == 0x000010, "Member 'BP_FLIB_Guest_C_GetForecastWarpPositionGuest::bpp__TargetNpc__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Guest_C_GetForecastWarpPositionGuest, bpp____WorldContext__pf) == 0x000018, "Member 'BP_FLIB_Guest_C_GetForecastWarpPositionGuest::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Guest_C_GetForecastWarpPositionGuest, bpp__ForeCastPos__pf) == 0x000020, "Member 'BP_FLIB_Guest_C_GetForecastWarpPositionGuest::bpp__ForeCastPos__pf' has a wrong offset!");

// Function BP_FLIB_Guest.BP_FLIB_Guest_C.Npc Talk Turn Setting For Guest
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Guest_C_Npc_Talk_Turn_Setting_For_Guest final
{
public:
	class AJackScheduledNPC*                      bpp__NPC__pf;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                bpp__TargetGuest__pf;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__ForceGazeModeSetUp__pf;                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackNPCTalkGazeMode                          bpp__ForceGazeMode__pf;                            // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Guest_C_Npc_Talk_Turn_Setting_For_Guest) == 0x000008, "Wrong alignment on BP_FLIB_Guest_C_Npc_Talk_Turn_Setting_For_Guest");
static_assert(sizeof(BP_FLIB_Guest_C_Npc_Talk_Turn_Setting_For_Guest) == 0x000018, "Wrong size on BP_FLIB_Guest_C_Npc_Talk_Turn_Setting_For_Guest");
static_assert(offsetof(BP_FLIB_Guest_C_Npc_Talk_Turn_Setting_For_Guest, bpp__NPC__pf) == 0x000000, "Member 'BP_FLIB_Guest_C_Npc_Talk_Turn_Setting_For_Guest::bpp__NPC__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Guest_C_Npc_Talk_Turn_Setting_For_Guest, bpp__TargetGuest__pf) == 0x000008, "Member 'BP_FLIB_Guest_C_Npc_Talk_Turn_Setting_For_Guest::bpp__TargetGuest__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Guest_C_Npc_Talk_Turn_Setting_For_Guest, bpp__ForceGazeModeSetUp__pf) == 0x000009, "Member 'BP_FLIB_Guest_C_Npc_Talk_Turn_Setting_For_Guest::bpp__ForceGazeModeSetUp__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Guest_C_Npc_Talk_Turn_Setting_For_Guest, bpp__ForceGazeMode__pf) == 0x00000A, "Member 'BP_FLIB_Guest_C_Npc_Talk_Turn_Setting_For_Guest::bpp__ForceGazeMode__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Guest_C_Npc_Talk_Turn_Setting_For_Guest, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Guest_C_Npc_Talk_Turn_Setting_For_Guest::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Guest.BP_FLIB_Guest_C.PlaceFriendResurrection
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Guest_C_PlaceFriendResurrection final
{
public:
	class UJackMatineeControlComponent*           bpp__JackMatineeControlComponent__pf;              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                bpp__Friend__pf;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Guest_C_PlaceFriendResurrection) == 0x000008, "Wrong alignment on BP_FLIB_Guest_C_PlaceFriendResurrection");
static_assert(sizeof(BP_FLIB_Guest_C_PlaceFriendResurrection) == 0x000018, "Wrong size on BP_FLIB_Guest_C_PlaceFriendResurrection");
static_assert(offsetof(BP_FLIB_Guest_C_PlaceFriendResurrection, bpp__JackMatineeControlComponent__pf) == 0x000000, "Member 'BP_FLIB_Guest_C_PlaceFriendResurrection::bpp__JackMatineeControlComponent__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Guest_C_PlaceFriendResurrection, bpp__Friend__pf) == 0x000008, "Member 'BP_FLIB_Guest_C_PlaceFriendResurrection::bpp__Friend__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Guest_C_PlaceFriendResurrection, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Guest_C_PlaceFriendResurrection::bpp____WorldContext__pf' has a wrong offset!");

}

