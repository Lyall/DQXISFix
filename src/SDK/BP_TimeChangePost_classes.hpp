#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TimeChangePost

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "JackGame_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// DynamicClass BP_TimeChangePost.BP_TimeChangePost_C
// 0x03D8 (0x0770 - 0x0398)
class ABP_TimeChangePost_C : public AActor
{
public:
	class UTextRenderComponent*                   TextRender;                                        // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APostProcessVolume*>             PostProcessVolume;                                 // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	struct FVector                                EditorTime;                                        // 0x03B0(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExecUpdate;                                        // 0x03BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideAutoExposeMinBrightness;                   // 0x03BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3BE[0x2];                                      // 0x03BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PostTime;                                          // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideBloomIntensity;                            // 0x03C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C5[0x3];                                      // 0x03C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 BroomIntensity;                                    // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          OverrideBloomThreshold;                            // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D9[0x7];                                      // 0x03D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 BloomThreshold;                                    // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 AutoExposeMinBrightness;                           // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          OverrideAutoExposeMaxBrightness;                   // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 AutoExposeMaxBrightness;                           // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class APostProcessVolume*                     Post;                                              // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideSceneColorSceneColorTint;                  // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_421[0x7];                                      // 0x0421(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   SceneColorSceneColorTint;                          // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          OverrideAmbientCubemapTint;                        // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_439[0x7];                                      // 0x0439(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   AmbientCubemapTint;                                // 0x0440(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          OverrideAmbientCubemapIntensity;                   // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 AmbientCubemapIntensity;                           // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          OverrideBloomDirtMaskIntensity;                    // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_469[0x7];                                      // 0x0469(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 BroomDirtMaskIntensity;                            // 0x0470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          OverrideBloomDirtMaskTint;                         // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_481[0x7];                                      // 0x0481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   BloomDirtMaskTint;                                 // 0x0488(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TempBloomIntensity;                                // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempBloomTreshold;                                 // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempBloomDirtMaskIntensity;                        // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TempBloomDirtMaskTint;                             // 0x04A4(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempAutoExposeMinBrightness;                       // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempAutoExposeMaxBrightness;                       // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TempSceneColorSceneColorTint;                      // 0x04BC(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TempAmbientCubemapTint;                            // 0x04CC(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempAmbientCubemapIntensity;                       // 0x04DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempIndirectLightingIntensity;                     // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TempIndirectLightingColor;                         // 0x04E4(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideIndirectLightingIntensity;                 // 0x04F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F5[0x3];                                      // 0x04F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 IndirectLightingIntensity;                         // 0x04F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          OverrideIndirectLightingColor;                     // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_509[0x7];                                      // 0x0509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   IndirectLightingColor;                             // 0x0510(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          OverrideAmbientOcclusionIntensity;                 // 0x0520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_521[0x7];                                      // 0x0521(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 AmbientOcclusionIntensity;                         // 0x0528(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          OverrideAmbientOcclusionRadius;                    // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_539[0x7];                                      // 0x0539(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 AmbientOcclusionRadius;                            // 0x0540(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          OverrideAmbientOcclusionPower;                     // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_551[0x3];                                      // 0x0551(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TempAmbientOcclusionIntensity;                     // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempAmbientOcclusionRadius;                        // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempAmbientOcclusionPower;                         // 0x055C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 AmbientOcclusionPower;                             // 0x0560(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          OverrideColorGradingGlobalGain;                    // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_571[0x7];                                      // 0x0571(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector4>                       ColorGradingGlobalGain;                            // 0x0578(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   LinearColor_ColorGradingGlobalGain;                // 0x0588(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_598[0x8];                                      // 0x0598(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               TempColorGradingGlobalGain;                        // 0x05A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableWeatherChange;                               // 0x05B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableWeatherIndirectLightColor;                   // 0x05B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableWeatherIndirectLightIntensity;               // 0x05B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             EditorWeather;                                     // 0x05B3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IC_Fine;                                           // 0x05B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IC_Cloudy;                                         // 0x05B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IC_LightRain;                                      // 0x05BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IC_Rain;                                           // 0x05C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IC_HeavyRain;                                      // 0x05C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IC_Storm;                                          // 0x05C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IC_Snow;                                           // 0x05CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IC_SnowStorm;                                      // 0x05D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IC_Fog;                                            // 0x05D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IC_DenseFog;                                       // 0x05D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IC_Ending;                                         // 0x05DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeatherChangeRate;                                 // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndirectLightColorRate;                            // 0x05E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewIndirectLightColorRate;                         // 0x05E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldIndirectLightColorRate;                         // 0x05EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         II_Fine;                                           // 0x05F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         II_Cloudy;                                         // 0x05F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         II_LightRain;                                      // 0x05F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         II_Rain;                                           // 0x05FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         II_HeavyRain;                                      // 0x0600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         II_Storm;                                          // 0x0604(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         II_Snow;                                           // 0x0608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         II_SnowStorm;                                      // 0x060C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         II_Fog;                                            // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         II_DenseFog;                                       // 0x0614(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         II_Ending;                                         // 0x0618(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndirectLightIntensityRate;                        // 0x061C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewIndirectLightIntensityRate;                     // 0x0620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldIndirectLightIntensityRate;                     // 0x0624(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableAmbientCubemapIntensity;                     // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_629[0x3];                                      // 0x0629(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AI_Fine;                                           // 0x062C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AI_Cloudy;                                         // 0x0630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AI_LightRain;                                      // 0x0634(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AI_Rain;                                           // 0x0638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AI_HeavyRain;                                      // 0x063C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AI_Storm;                                          // 0x0640(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AI_Snow;                                           // 0x0644(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AI_SnowStorm;                                      // 0x0648(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AI_Fog;                                            // 0x064C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AI_DenseFog;                                       // 0x0650(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AI_Ending;                                         // 0x0654(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientCubemapIntensityRate;                       // 0x0658(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewAmbientCubemapIntensityRate;                    // 0x065C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldAmbientCubemapIntensityRate;                    // 0x0660(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_664[0x4];                                      // 0x0664(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_COMP_WeatherAffect_C*               K2Node_DynamicCast_AsBP_COMP_Weather_Affect;       // 0x0668(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0670(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_671[0x3];                                      // 0x0671(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0674(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CallFunc_Get_Time_Color_Color;                     // 0x0678(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float;                     // 0x0688(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float2;                    // 0x068C(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float3;                    // 0x0690(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float4;                    // 0x0694(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float5;                    // 0x0698(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CallFunc_Get_Time_Color_Color2;                    // 0x069C(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x06AC(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APostProcessVolume*                     CallFunc_Array_Get_Item;                           // 0x06B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float6;                    // 0x06B8(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float7;                    // 0x06BC(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CallFunc_Get_Time_Color_Color3;                    // 0x06C0(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float8;                    // 0x06D0(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CallFunc_Get_Time_Color_Color4;                    // 0x06D4(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CallFunc_Get_Time_Color_Color5;                    // 0x06E4(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_RGBToHSV_H;                               // 0x06F4(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_RGBToHSV_S;                               // 0x06F8(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_RGBToHSV_V;                               // 0x06FC(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_RGBToHSV_A;                               // 0x0700(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float9;                    // 0x0704(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float10;                   // 0x0708(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float11;                   // 0x070C(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float12;                   // 0x0710(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0714(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CallFunc_Get_Time_Color_Color6;                    // 0x0718(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_728[0x8];                                      // 0x0728(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               K2Node_MakeStruct_Vector4;                         // 0x0730(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EJackWorldWeather bpp__NewWeather__pf)> K2Node_CreateDelegate_OutputDelegate;              // 0x0740(0x0010)(ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	EJackWorldWeather                             K2Node_CustomEvent_NewWeather;                     // 0x0750(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_751[0x7];                                      // 0x0751(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_COMP_WeatherAffect_C*               K2Node_DynamicCast_AsBP_COMP_Weather_Affect2;      // 0x0758(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0760(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_761[0xF];                                      // 0x0761(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CopyNormalParamForH(class UClass* bpp__BaseClass__pf);
	void ExecuteUbergraph_BP_TimeChangePost_1(int32 bpp__EntryPoint__pf);
	void ReceiveBeginPlay();
	void ReceiveTick(float bpp__DeltaSeconds__pf);
	void SetWeather(EJackWorldWeather bpp__Weather__pf);
	void UpdatePost();
	void UserConstructionScript();
	void WeatherChanged(EJackWorldWeather bpp__NewWeather__pf);
	void CallWeatherChangeForTimeChangePost__DelegateSignature(EJackWorldWeather bpp__NewWeather__pf);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BP_TimeChangePost_C">();
	}
	static class ABP_TimeChangePost_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TimeChangePost_C>();
	}
};
static_assert(alignof(ABP_TimeChangePost_C) == 0x000010, "Wrong alignment on ABP_TimeChangePost_C");
static_assert(sizeof(ABP_TimeChangePost_C) == 0x000770, "Wrong size on ABP_TimeChangePost_C");
static_assert(offsetof(ABP_TimeChangePost_C, TextRender) == 0x000398, "Member 'ABP_TimeChangePost_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, PostProcessVolume) == 0x0003A0, "Member 'ABP_TimeChangePost_C::PostProcessVolume' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, EditorTime) == 0x0003B0, "Member 'ABP_TimeChangePost_C::EditorTime' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, ExecUpdate) == 0x0003BC, "Member 'ABP_TimeChangePost_C::ExecUpdate' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, OverrideAutoExposeMinBrightness) == 0x0003BD, "Member 'ABP_TimeChangePost_C::OverrideAutoExposeMinBrightness' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, PostTime) == 0x0003C0, "Member 'ABP_TimeChangePost_C::PostTime' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, OverrideBloomIntensity) == 0x0003C4, "Member 'ABP_TimeChangePost_C::OverrideBloomIntensity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, BroomIntensity) == 0x0003C8, "Member 'ABP_TimeChangePost_C::BroomIntensity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, OverrideBloomThreshold) == 0x0003D8, "Member 'ABP_TimeChangePost_C::OverrideBloomThreshold' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, BloomThreshold) == 0x0003E0, "Member 'ABP_TimeChangePost_C::BloomThreshold' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, AutoExposeMinBrightness) == 0x0003F0, "Member 'ABP_TimeChangePost_C::AutoExposeMinBrightness' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, OverrideAutoExposeMaxBrightness) == 0x000400, "Member 'ABP_TimeChangePost_C::OverrideAutoExposeMaxBrightness' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, AutoExposeMaxBrightness) == 0x000408, "Member 'ABP_TimeChangePost_C::AutoExposeMaxBrightness' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, Post) == 0x000418, "Member 'ABP_TimeChangePost_C::Post' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, OverrideSceneColorSceneColorTint) == 0x000420, "Member 'ABP_TimeChangePost_C::OverrideSceneColorSceneColorTint' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, SceneColorSceneColorTint) == 0x000428, "Member 'ABP_TimeChangePost_C::SceneColorSceneColorTint' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, OverrideAmbientCubemapTint) == 0x000438, "Member 'ABP_TimeChangePost_C::OverrideAmbientCubemapTint' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, AmbientCubemapTint) == 0x000440, "Member 'ABP_TimeChangePost_C::AmbientCubemapTint' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, OverrideAmbientCubemapIntensity) == 0x000450, "Member 'ABP_TimeChangePost_C::OverrideAmbientCubemapIntensity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, AmbientCubemapIntensity) == 0x000458, "Member 'ABP_TimeChangePost_C::AmbientCubemapIntensity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, OverrideBloomDirtMaskIntensity) == 0x000468, "Member 'ABP_TimeChangePost_C::OverrideBloomDirtMaskIntensity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, BroomDirtMaskIntensity) == 0x000470, "Member 'ABP_TimeChangePost_C::BroomDirtMaskIntensity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, OverrideBloomDirtMaskTint) == 0x000480, "Member 'ABP_TimeChangePost_C::OverrideBloomDirtMaskTint' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, BloomDirtMaskTint) == 0x000488, "Member 'ABP_TimeChangePost_C::BloomDirtMaskTint' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, TempBloomIntensity) == 0x000498, "Member 'ABP_TimeChangePost_C::TempBloomIntensity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, TempBloomTreshold) == 0x00049C, "Member 'ABP_TimeChangePost_C::TempBloomTreshold' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, TempBloomDirtMaskIntensity) == 0x0004A0, "Member 'ABP_TimeChangePost_C::TempBloomDirtMaskIntensity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, TempBloomDirtMaskTint) == 0x0004A4, "Member 'ABP_TimeChangePost_C::TempBloomDirtMaskTint' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, TempAutoExposeMinBrightness) == 0x0004B4, "Member 'ABP_TimeChangePost_C::TempAutoExposeMinBrightness' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, TempAutoExposeMaxBrightness) == 0x0004B8, "Member 'ABP_TimeChangePost_C::TempAutoExposeMaxBrightness' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, TempSceneColorSceneColorTint) == 0x0004BC, "Member 'ABP_TimeChangePost_C::TempSceneColorSceneColorTint' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, TempAmbientCubemapTint) == 0x0004CC, "Member 'ABP_TimeChangePost_C::TempAmbientCubemapTint' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, TempAmbientCubemapIntensity) == 0x0004DC, "Member 'ABP_TimeChangePost_C::TempAmbientCubemapIntensity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, TempIndirectLightingIntensity) == 0x0004E0, "Member 'ABP_TimeChangePost_C::TempIndirectLightingIntensity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, TempIndirectLightingColor) == 0x0004E4, "Member 'ABP_TimeChangePost_C::TempIndirectLightingColor' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, OverrideIndirectLightingIntensity) == 0x0004F4, "Member 'ABP_TimeChangePost_C::OverrideIndirectLightingIntensity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, IndirectLightingIntensity) == 0x0004F8, "Member 'ABP_TimeChangePost_C::IndirectLightingIntensity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, OverrideIndirectLightingColor) == 0x000508, "Member 'ABP_TimeChangePost_C::OverrideIndirectLightingColor' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, IndirectLightingColor) == 0x000510, "Member 'ABP_TimeChangePost_C::IndirectLightingColor' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, OverrideAmbientOcclusionIntensity) == 0x000520, "Member 'ABP_TimeChangePost_C::OverrideAmbientOcclusionIntensity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, AmbientOcclusionIntensity) == 0x000528, "Member 'ABP_TimeChangePost_C::AmbientOcclusionIntensity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, OverrideAmbientOcclusionRadius) == 0x000538, "Member 'ABP_TimeChangePost_C::OverrideAmbientOcclusionRadius' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, AmbientOcclusionRadius) == 0x000540, "Member 'ABP_TimeChangePost_C::AmbientOcclusionRadius' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, OverrideAmbientOcclusionPower) == 0x000550, "Member 'ABP_TimeChangePost_C::OverrideAmbientOcclusionPower' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, TempAmbientOcclusionIntensity) == 0x000554, "Member 'ABP_TimeChangePost_C::TempAmbientOcclusionIntensity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, TempAmbientOcclusionRadius) == 0x000558, "Member 'ABP_TimeChangePost_C::TempAmbientOcclusionRadius' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, TempAmbientOcclusionPower) == 0x00055C, "Member 'ABP_TimeChangePost_C::TempAmbientOcclusionPower' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, AmbientOcclusionPower) == 0x000560, "Member 'ABP_TimeChangePost_C::AmbientOcclusionPower' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, OverrideColorGradingGlobalGain) == 0x000570, "Member 'ABP_TimeChangePost_C::OverrideColorGradingGlobalGain' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, ColorGradingGlobalGain) == 0x000578, "Member 'ABP_TimeChangePost_C::ColorGradingGlobalGain' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, LinearColor_ColorGradingGlobalGain) == 0x000588, "Member 'ABP_TimeChangePost_C::LinearColor_ColorGradingGlobalGain' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, TempColorGradingGlobalGain) == 0x0005A0, "Member 'ABP_TimeChangePost_C::TempColorGradingGlobalGain' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, EnableWeatherChange) == 0x0005B0, "Member 'ABP_TimeChangePost_C::EnableWeatherChange' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, EnableWeatherIndirectLightColor) == 0x0005B1, "Member 'ABP_TimeChangePost_C::EnableWeatherIndirectLightColor' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, EnableWeatherIndirectLightIntensity) == 0x0005B2, "Member 'ABP_TimeChangePost_C::EnableWeatherIndirectLightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, EditorWeather) == 0x0005B3, "Member 'ABP_TimeChangePost_C::EditorWeather' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, IC_Fine) == 0x0005B4, "Member 'ABP_TimeChangePost_C::IC_Fine' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, IC_Cloudy) == 0x0005B8, "Member 'ABP_TimeChangePost_C::IC_Cloudy' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, IC_LightRain) == 0x0005BC, "Member 'ABP_TimeChangePost_C::IC_LightRain' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, IC_Rain) == 0x0005C0, "Member 'ABP_TimeChangePost_C::IC_Rain' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, IC_HeavyRain) == 0x0005C4, "Member 'ABP_TimeChangePost_C::IC_HeavyRain' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, IC_Storm) == 0x0005C8, "Member 'ABP_TimeChangePost_C::IC_Storm' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, IC_Snow) == 0x0005CC, "Member 'ABP_TimeChangePost_C::IC_Snow' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, IC_SnowStorm) == 0x0005D0, "Member 'ABP_TimeChangePost_C::IC_SnowStorm' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, IC_Fog) == 0x0005D4, "Member 'ABP_TimeChangePost_C::IC_Fog' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, IC_DenseFog) == 0x0005D8, "Member 'ABP_TimeChangePost_C::IC_DenseFog' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, IC_Ending) == 0x0005DC, "Member 'ABP_TimeChangePost_C::IC_Ending' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, WeatherChangeRate) == 0x0005E0, "Member 'ABP_TimeChangePost_C::WeatherChangeRate' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, IndirectLightColorRate) == 0x0005E4, "Member 'ABP_TimeChangePost_C::IndirectLightColorRate' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, NewIndirectLightColorRate) == 0x0005E8, "Member 'ABP_TimeChangePost_C::NewIndirectLightColorRate' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, OldIndirectLightColorRate) == 0x0005EC, "Member 'ABP_TimeChangePost_C::OldIndirectLightColorRate' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, II_Fine) == 0x0005F0, "Member 'ABP_TimeChangePost_C::II_Fine' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, II_Cloudy) == 0x0005F4, "Member 'ABP_TimeChangePost_C::II_Cloudy' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, II_LightRain) == 0x0005F8, "Member 'ABP_TimeChangePost_C::II_LightRain' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, II_Rain) == 0x0005FC, "Member 'ABP_TimeChangePost_C::II_Rain' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, II_HeavyRain) == 0x000600, "Member 'ABP_TimeChangePost_C::II_HeavyRain' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, II_Storm) == 0x000604, "Member 'ABP_TimeChangePost_C::II_Storm' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, II_Snow) == 0x000608, "Member 'ABP_TimeChangePost_C::II_Snow' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, II_SnowStorm) == 0x00060C, "Member 'ABP_TimeChangePost_C::II_SnowStorm' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, II_Fog) == 0x000610, "Member 'ABP_TimeChangePost_C::II_Fog' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, II_DenseFog) == 0x000614, "Member 'ABP_TimeChangePost_C::II_DenseFog' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, II_Ending) == 0x000618, "Member 'ABP_TimeChangePost_C::II_Ending' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, IndirectLightIntensityRate) == 0x00061C, "Member 'ABP_TimeChangePost_C::IndirectLightIntensityRate' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, NewIndirectLightIntensityRate) == 0x000620, "Member 'ABP_TimeChangePost_C::NewIndirectLightIntensityRate' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, OldIndirectLightIntensityRate) == 0x000624, "Member 'ABP_TimeChangePost_C::OldIndirectLightIntensityRate' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, EnableAmbientCubemapIntensity) == 0x000628, "Member 'ABP_TimeChangePost_C::EnableAmbientCubemapIntensity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, AI_Fine) == 0x00062C, "Member 'ABP_TimeChangePost_C::AI_Fine' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, AI_Cloudy) == 0x000630, "Member 'ABP_TimeChangePost_C::AI_Cloudy' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, AI_LightRain) == 0x000634, "Member 'ABP_TimeChangePost_C::AI_LightRain' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, AI_Rain) == 0x000638, "Member 'ABP_TimeChangePost_C::AI_Rain' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, AI_HeavyRain) == 0x00063C, "Member 'ABP_TimeChangePost_C::AI_HeavyRain' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, AI_Storm) == 0x000640, "Member 'ABP_TimeChangePost_C::AI_Storm' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, AI_Snow) == 0x000644, "Member 'ABP_TimeChangePost_C::AI_Snow' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, AI_SnowStorm) == 0x000648, "Member 'ABP_TimeChangePost_C::AI_SnowStorm' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, AI_Fog) == 0x00064C, "Member 'ABP_TimeChangePost_C::AI_Fog' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, AI_DenseFog) == 0x000650, "Member 'ABP_TimeChangePost_C::AI_DenseFog' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, AI_Ending) == 0x000654, "Member 'ABP_TimeChangePost_C::AI_Ending' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, AmbientCubemapIntensityRate) == 0x000658, "Member 'ABP_TimeChangePost_C::AmbientCubemapIntensityRate' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, NewAmbientCubemapIntensityRate) == 0x00065C, "Member 'ABP_TimeChangePost_C::NewAmbientCubemapIntensityRate' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, OldAmbientCubemapIntensityRate) == 0x000660, "Member 'ABP_TimeChangePost_C::OldAmbientCubemapIntensityRate' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, K2Node_DynamicCast_AsBP_COMP_Weather_Affect) == 0x000668, "Member 'ABP_TimeChangePost_C::K2Node_DynamicCast_AsBP_COMP_Weather_Affect' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, K2Node_DynamicCast_bSuccess) == 0x000670, "Member 'ABP_TimeChangePost_C::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, Temp_int_Loop_Counter_Variable) == 0x000674, "Member 'ABP_TimeChangePost_C::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, CallFunc_Get_Time_Color_Color) == 0x000678, "Member 'ABP_TimeChangePost_C::CallFunc_Get_Time_Color_Color' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, CallFunc_Get_Time_Float_Float) == 0x000688, "Member 'ABP_TimeChangePost_C::CallFunc_Get_Time_Float_Float' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, CallFunc_Get_Time_Float_Float2) == 0x00068C, "Member 'ABP_TimeChangePost_C::CallFunc_Get_Time_Float_Float2' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, CallFunc_Get_Time_Float_Float3) == 0x000690, "Member 'ABP_TimeChangePost_C::CallFunc_Get_Time_Float_Float3' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, CallFunc_Get_Time_Float_Float4) == 0x000694, "Member 'ABP_TimeChangePost_C::CallFunc_Get_Time_Float_Float4' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, CallFunc_Get_Time_Float_Float5) == 0x000698, "Member 'ABP_TimeChangePost_C::CallFunc_Get_Time_Float_Float5' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, CallFunc_Get_Time_Color_Color2) == 0x00069C, "Member 'ABP_TimeChangePost_C::CallFunc_Get_Time_Color_Color2' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, Temp_int_Array_Index_Variable) == 0x0006AC, "Member 'ABP_TimeChangePost_C::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, CallFunc_Array_Get_Item) == 0x0006B0, "Member 'ABP_TimeChangePost_C::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, CallFunc_Get_Time_Float_Float6) == 0x0006B8, "Member 'ABP_TimeChangePost_C::CallFunc_Get_Time_Float_Float6' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, CallFunc_Get_Time_Float_Float7) == 0x0006BC, "Member 'ABP_TimeChangePost_C::CallFunc_Get_Time_Float_Float7' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, CallFunc_Get_Time_Color_Color3) == 0x0006C0, "Member 'ABP_TimeChangePost_C::CallFunc_Get_Time_Color_Color3' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, CallFunc_Get_Time_Float_Float8) == 0x0006D0, "Member 'ABP_TimeChangePost_C::CallFunc_Get_Time_Float_Float8' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, CallFunc_Get_Time_Color_Color4) == 0x0006D4, "Member 'ABP_TimeChangePost_C::CallFunc_Get_Time_Color_Color4' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, CallFunc_Get_Time_Color_Color5) == 0x0006E4, "Member 'ABP_TimeChangePost_C::CallFunc_Get_Time_Color_Color5' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, CallFunc_RGBToHSV_H) == 0x0006F4, "Member 'ABP_TimeChangePost_C::CallFunc_RGBToHSV_H' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, CallFunc_RGBToHSV_S) == 0x0006F8, "Member 'ABP_TimeChangePost_C::CallFunc_RGBToHSV_S' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, CallFunc_RGBToHSV_V) == 0x0006FC, "Member 'ABP_TimeChangePost_C::CallFunc_RGBToHSV_V' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, CallFunc_RGBToHSV_A) == 0x000700, "Member 'ABP_TimeChangePost_C::CallFunc_RGBToHSV_A' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, CallFunc_Get_Time_Float_Float9) == 0x000704, "Member 'ABP_TimeChangePost_C::CallFunc_Get_Time_Float_Float9' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, CallFunc_Get_Time_Float_Float10) == 0x000708, "Member 'ABP_TimeChangePost_C::CallFunc_Get_Time_Float_Float10' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, CallFunc_Get_Time_Float_Float11) == 0x00070C, "Member 'ABP_TimeChangePost_C::CallFunc_Get_Time_Float_Float11' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, CallFunc_Get_Time_Float_Float12) == 0x000710, "Member 'ABP_TimeChangePost_C::CallFunc_Get_Time_Float_Float12' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, K2Node_Event_DeltaSeconds) == 0x000714, "Member 'ABP_TimeChangePost_C::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, CallFunc_Get_Time_Color_Color6) == 0x000718, "Member 'ABP_TimeChangePost_C::CallFunc_Get_Time_Color_Color6' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, K2Node_MakeStruct_Vector4) == 0x000730, "Member 'ABP_TimeChangePost_C::K2Node_MakeStruct_Vector4' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, K2Node_CreateDelegate_OutputDelegate) == 0x000740, "Member 'ABP_TimeChangePost_C::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, K2Node_CustomEvent_NewWeather) == 0x000750, "Member 'ABP_TimeChangePost_C::K2Node_CustomEvent_NewWeather' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, K2Node_DynamicCast_AsBP_COMP_Weather_Affect2) == 0x000758, "Member 'ABP_TimeChangePost_C::K2Node_DynamicCast_AsBP_COMP_Weather_Affect2' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangePost_C, K2Node_DynamicCast_bSuccess2) == 0x000760, "Member 'ABP_TimeChangePost_C::K2Node_DynamicCast_bSuccess2' has a wrong offset!");

}

