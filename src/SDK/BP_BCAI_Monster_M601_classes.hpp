#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BCAI_Monster_M601

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_BCAI_Monster_BossBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BCAI_Monster_M601.BP_BCAI_Monster_M601_C
// 0x0020 (0x05D0 - 0x05B0)
class ABP_BCAI_Monster_M601_C final : public ABP_BCAI_Monster_BossBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_BCAI_Monster_M601_C;             // 0x05B0(0x0008)(Transient, DuplicateTransient)
	int32                                         RedOrbRoundCounter;                                // 0x05B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BC[0x4];                                      // 0x05BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionID_RedOrb_Kaijo;                             // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AEmitterCameraLensEffectBase*           CameraLensEffect_RedOrb;                           // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BCAI_Monster_M601(int32 EntryPoint);
	void OnBattleEnd_Event_0();
	void ActionExec_M601_RedOrb_Kaijo();
	void ReceiveBeginPlay();
	void ActionExec_M601_RedOrb();
	void OnRoundEnd_Event_0();
	void UserConstructionScript();
	void RegisterInterruptAction_RoundKaijo(class FName InActionId);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BCAI_Monster_M601_C">();
	}
	static class ABP_BCAI_Monster_M601_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BCAI_Monster_M601_C>();
	}
};
static_assert(alignof(ABP_BCAI_Monster_M601_C) == 0x000008, "Wrong alignment on ABP_BCAI_Monster_M601_C");
static_assert(sizeof(ABP_BCAI_Monster_M601_C) == 0x0005D0, "Wrong size on ABP_BCAI_Monster_M601_C");
static_assert(offsetof(ABP_BCAI_Monster_M601_C, UberGraphFrame_BP_BCAI_Monster_M601_C) == 0x0005B0, "Member 'ABP_BCAI_Monster_M601_C::UberGraphFrame_BP_BCAI_Monster_M601_C' has a wrong offset!");
static_assert(offsetof(ABP_BCAI_Monster_M601_C, RedOrbRoundCounter) == 0x0005B8, "Member 'ABP_BCAI_Monster_M601_C::RedOrbRoundCounter' has a wrong offset!");
static_assert(offsetof(ABP_BCAI_Monster_M601_C, ActionID_RedOrb_Kaijo) == 0x0005C0, "Member 'ABP_BCAI_Monster_M601_C::ActionID_RedOrb_Kaijo' has a wrong offset!");
static_assert(offsetof(ABP_BCAI_Monster_M601_C, CameraLensEffect_RedOrb) == 0x0005C8, "Member 'ABP_BCAI_Monster_M601_C::CameraLensEffect_RedOrb' has a wrong offset!");

}

