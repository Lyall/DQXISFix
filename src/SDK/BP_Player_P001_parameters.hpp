#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Player_P001

#include "Basic.hpp"

#include "JackGame_structs.hpp"
#include "ENUM_CoordinateMeshSlot_structs.hpp"
#include "ENUM_CharacterBodyType_structs.hpp"


namespace SDK::Params
{

// Function BP_Player_P001.BP_Player_P001_C.BndEvt__JackProps_K2Node_ComponentBoundEvent_0_JackPropAttachSignature__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_Player_P001_C_BndEvt__JackProps_K2Node_ComponentBoundEvent_0_JackPropAttachSignature__DelegateSignature final
{
public:
	class FName                                   bpp__PropName__pf;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 bpp__PropActor__pf;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Player_P001_C_BndEvt__JackProps_K2Node_ComponentBoundEvent_0_JackPropAttachSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Player_P001_C_BndEvt__JackProps_K2Node_ComponentBoundEvent_0_JackPropAttachSignature__DelegateSignature");
static_assert(sizeof(BP_Player_P001_C_BndEvt__JackProps_K2Node_ComponentBoundEvent_0_JackPropAttachSignature__DelegateSignature) == 0x000010, "Wrong size on BP_Player_P001_C_BndEvt__JackProps_K2Node_ComponentBoundEvent_0_JackPropAttachSignature__DelegateSignature");
static_assert(offsetof(BP_Player_P001_C_BndEvt__JackProps_K2Node_ComponentBoundEvent_0_JackPropAttachSignature__DelegateSignature, bpp__PropName__pf) == 0x000000, "Member 'BP_Player_P001_C_BndEvt__JackProps_K2Node_ComponentBoundEvent_0_JackPropAttachSignature__DelegateSignature::bpp__PropName__pf' has a wrong offset!");
static_assert(offsetof(BP_Player_P001_C_BndEvt__JackProps_K2Node_ComponentBoundEvent_0_JackPropAttachSignature__DelegateSignature, bpp__PropActor__pf) == 0x000008, "Member 'BP_Player_P001_C_BndEvt__JackProps_K2Node_ComponentBoundEvent_0_JackPropAttachSignature__DelegateSignature::bpp__PropActor__pf' has a wrong offset!");

// Function BP_Player_P001.BP_Player_P001_C.BndEvt__JackProps_K2Node_ComponentBoundEvent_1_JackPropDetachSignature__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_Player_P001_C_BndEvt__JackProps_K2Node_ComponentBoundEvent_1_JackPropDetachSignature__DelegateSignature final
{
public:
	class FName                                   bpp__PropName__pf;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Player_P001_C_BndEvt__JackProps_K2Node_ComponentBoundEvent_1_JackPropDetachSignature__DelegateSignature) == 0x000004, "Wrong alignment on BP_Player_P001_C_BndEvt__JackProps_K2Node_ComponentBoundEvent_1_JackPropDetachSignature__DelegateSignature");
static_assert(sizeof(BP_Player_P001_C_BndEvt__JackProps_K2Node_ComponentBoundEvent_1_JackPropDetachSignature__DelegateSignature) == 0x000008, "Wrong size on BP_Player_P001_C_BndEvt__JackProps_K2Node_ComponentBoundEvent_1_JackPropDetachSignature__DelegateSignature");
static_assert(offsetof(BP_Player_P001_C_BndEvt__JackProps_K2Node_ComponentBoundEvent_1_JackPropDetachSignature__DelegateSignature, bpp__PropName__pf) == 0x000000, "Member 'BP_Player_P001_C_BndEvt__JackProps_K2Node_ComponentBoundEvent_1_JackPropDetachSignature__DelegateSignature::bpp__PropName__pf' has a wrong offset!");

// Function BP_Player_P001.BP_Player_P001_C.CallChangeParadeCoordinate
// 0x0001 (0x0001 - 0x0000)
struct BP_Player_P001_C_CallChangeParadeCoordinate final
{
public:
	bool                                          bpp__IsParadeCoordinate__pf;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Player_P001_C_CallChangeParadeCoordinate) == 0x000001, "Wrong alignment on BP_Player_P001_C_CallChangeParadeCoordinate");
static_assert(sizeof(BP_Player_P001_C_CallChangeParadeCoordinate) == 0x000001, "Wrong size on BP_Player_P001_C_CallChangeParadeCoordinate");
static_assert(offsetof(BP_Player_P001_C_CallChangeParadeCoordinate, bpp__IsParadeCoordinate__pf) == 0x000000, "Member 'BP_Player_P001_C_CallChangeParadeCoordinate::bpp__IsParadeCoordinate__pf' has a wrong offset!");

// Function BP_Player_P001.BP_Player_P001_C.ChangeMovementDefaultMovement
// 0x0001 (0x0001 - 0x0000)
struct BP_Player_P001_C_ChangeMovementDefaultMovement final
{
public:
	EJackPlayableMovementDefault                  bpp__InputPin__pf;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Player_P001_C_ChangeMovementDefaultMovement) == 0x000001, "Wrong alignment on BP_Player_P001_C_ChangeMovementDefaultMovement");
static_assert(sizeof(BP_Player_P001_C_ChangeMovementDefaultMovement) == 0x000001, "Wrong size on BP_Player_P001_C_ChangeMovementDefaultMovement");
static_assert(offsetof(BP_Player_P001_C_ChangeMovementDefaultMovement, bpp__InputPin__pf) == 0x000000, "Member 'BP_Player_P001_C_ChangeMovementDefaultMovement::bpp__InputPin__pf' has a wrong offset!");

// Function BP_Player_P001.BP_Player_P001_C.CustomEvent_0
// 0x0010 (0x0010 - 0x0000)
struct BP_Player_P001_C_CustomEvent_0 final
{
public:
	class AActor*                                 bpp__PlayerActor__pf;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 bpp__ControlActor__pf;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Player_P001_C_CustomEvent_0) == 0x000008, "Wrong alignment on BP_Player_P001_C_CustomEvent_0");
static_assert(sizeof(BP_Player_P001_C_CustomEvent_0) == 0x000010, "Wrong size on BP_Player_P001_C_CustomEvent_0");
static_assert(offsetof(BP_Player_P001_C_CustomEvent_0, bpp__PlayerActor__pf) == 0x000000, "Member 'BP_Player_P001_C_CustomEvent_0::bpp__PlayerActor__pf' has a wrong offset!");
static_assert(offsetof(BP_Player_P001_C_CustomEvent_0, bpp__ControlActor__pf) == 0x000008, "Member 'BP_Player_P001_C_CustomEvent_0::bpp__ControlActor__pf' has a wrong offset!");

// Function BP_Player_P001.BP_Player_P001_C.ExecuteUbergraph_BP_Player_P001_2
// 0x0004 (0x0004 - 0x0000)
struct BP_Player_P001_C_ExecuteUbergraph_BP_Player_P001_2 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Player_P001_C_ExecuteUbergraph_BP_Player_P001_2) == 0x000004, "Wrong alignment on BP_Player_P001_C_ExecuteUbergraph_BP_Player_P001_2");
static_assert(sizeof(BP_Player_P001_C_ExecuteUbergraph_BP_Player_P001_2) == 0x000004, "Wrong size on BP_Player_P001_C_ExecuteUbergraph_BP_Player_P001_2");
static_assert(offsetof(BP_Player_P001_C_ExecuteUbergraph_BP_Player_P001_2, bpp__EntryPoint__pf) == 0x000000, "Member 'BP_Player_P001_C_ExecuteUbergraph_BP_Player_P001_2::bpp__EntryPoint__pf' has a wrong offset!");

// Function BP_Player_P001.BP_Player_P001_C.ExecuteUbergraph_BP_Player_P001_4
// 0x0004 (0x0004 - 0x0000)
struct BP_Player_P001_C_ExecuteUbergraph_BP_Player_P001_4 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Player_P001_C_ExecuteUbergraph_BP_Player_P001_4) == 0x000004, "Wrong alignment on BP_Player_P001_C_ExecuteUbergraph_BP_Player_P001_4");
static_assert(sizeof(BP_Player_P001_C_ExecuteUbergraph_BP_Player_P001_4) == 0x000004, "Wrong size on BP_Player_P001_C_ExecuteUbergraph_BP_Player_P001_4");
static_assert(offsetof(BP_Player_P001_C_ExecuteUbergraph_BP_Player_P001_4, bpp__EntryPoint__pf) == 0x000000, "Member 'BP_Player_P001_C_ExecuteUbergraph_BP_Player_P001_4::bpp__EntryPoint__pf' has a wrong offset!");

// Function BP_Player_P001.BP_Player_P001_C.GetCharacterBodyType
// 0x0001 (0x0001 - 0x0000)
struct BP_Player_P001_C_GetCharacterBodyType final
{
public:
	ENUM_CharacterBodyType                        bpp__Result__pf;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Player_P001_C_GetCharacterBodyType) == 0x000001, "Wrong alignment on BP_Player_P001_C_GetCharacterBodyType");
static_assert(sizeof(BP_Player_P001_C_GetCharacterBodyType) == 0x000001, "Wrong size on BP_Player_P001_C_GetCharacterBodyType");
static_assert(offsetof(BP_Player_P001_C_GetCharacterBodyType, bpp__Result__pf) == 0x000000, "Member 'BP_Player_P001_C_GetCharacterBodyType::bpp__Result__pf' has a wrong offset!");

// Function BP_Player_P001.BP_Player_P001_C.GetDefaultMovement
// 0x0001 (0x0001 - 0x0000)
struct BP_Player_P001_C_GetDefaultMovement final
{
public:
	EJackPlayableMovementDefault                  bpp__Type__pf;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Player_P001_C_GetDefaultMovement) == 0x000001, "Wrong alignment on BP_Player_P001_C_GetDefaultMovement");
static_assert(sizeof(BP_Player_P001_C_GetDefaultMovement) == 0x000001, "Wrong size on BP_Player_P001_C_GetDefaultMovement");
static_assert(offsetof(BP_Player_P001_C_GetDefaultMovement, bpp__Type__pf) == 0x000000, "Member 'BP_Player_P001_C_GetDefaultMovement::bpp__Type__pf' has a wrong offset!");

// Function BP_Player_P001.BP_Player_P001_C.GetMeshByCoordinateSlotType
// 0x0010 (0x0010 - 0x0000)
struct BP_Player_P001_C_GetMeshByCoordinateSlotType final
{
public:
	ENUM_CoordinateMeshSlot                       bpp__SlotType__pf;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 bpp__SkeletalMeshComponent__pf;                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Player_P001_C_GetMeshByCoordinateSlotType) == 0x000008, "Wrong alignment on BP_Player_P001_C_GetMeshByCoordinateSlotType");
static_assert(sizeof(BP_Player_P001_C_GetMeshByCoordinateSlotType) == 0x000010, "Wrong size on BP_Player_P001_C_GetMeshByCoordinateSlotType");
static_assert(offsetof(BP_Player_P001_C_GetMeshByCoordinateSlotType, bpp__SlotType__pf) == 0x000000, "Member 'BP_Player_P001_C_GetMeshByCoordinateSlotType::bpp__SlotType__pf' has a wrong offset!");
static_assert(offsetof(BP_Player_P001_C_GetMeshByCoordinateSlotType, bpp__SkeletalMeshComponent__pf) == 0x000008, "Member 'BP_Player_P001_C_GetMeshByCoordinateSlotType::bpp__SkeletalMeshComponent__pf' has a wrong offset!");

// Function BP_Player_P001.BP_Player_P001_C.HasTaimatu
// 0x0001 (0x0001 - 0x0000)
struct BP_Player_P001_C_HasTaimatu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Player_P001_C_HasTaimatu) == 0x000001, "Wrong alignment on BP_Player_P001_C_HasTaimatu");
static_assert(sizeof(BP_Player_P001_C_HasTaimatu) == 0x000001, "Wrong size on BP_Player_P001_C_HasTaimatu");
static_assert(offsetof(BP_Player_P001_C_HasTaimatu, ReturnValue) == 0x000000, "Member 'BP_Player_P001_C_HasTaimatu::ReturnValue' has a wrong offset!");

// Function BP_Player_P001.BP_Player_P001_C.IsMovementDefaultOverride
// 0x0001 (0x0001 - 0x0000)
struct BP_Player_P001_C_IsMovementDefaultOverride final
{
public:
	bool                                          bpp__IsOverride__pf;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Player_P001_C_IsMovementDefaultOverride) == 0x000001, "Wrong alignment on BP_Player_P001_C_IsMovementDefaultOverride");
static_assert(sizeof(BP_Player_P001_C_IsMovementDefaultOverride) == 0x000001, "Wrong size on BP_Player_P001_C_IsMovementDefaultOverride");
static_assert(offsetof(BP_Player_P001_C_IsMovementDefaultOverride, bpp__IsOverride__pf) == 0x000000, "Member 'BP_Player_P001_C_IsMovementDefaultOverride::bpp__IsOverride__pf' has a wrong offset!");

// Function BP_Player_P001.BP_Player_P001_C.IsParadeCoordinate
// 0x0001 (0x0001 - 0x0000)
struct BP_Player_P001_C_IsParadeCoordinate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Player_P001_C_IsParadeCoordinate) == 0x000001, "Wrong alignment on BP_Player_P001_C_IsParadeCoordinate");
static_assert(sizeof(BP_Player_P001_C_IsParadeCoordinate) == 0x000001, "Wrong size on BP_Player_P001_C_IsParadeCoordinate");
static_assert(offsetof(BP_Player_P001_C_IsParadeCoordinate, ReturnValue) == 0x000000, "Member 'BP_Player_P001_C_IsParadeCoordinate::ReturnValue' has a wrong offset!");

// Function BP_Player_P001.BP_Player_P001_C.OnChangePlayableMovementDefault
// 0x0002 (0x0002 - 0x0000)
struct BP_Player_P001_C_OnChangePlayableMovementDefault final
{
public:
	EJackPlayableMovementDefault                  bpp__Prev__pf;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackPlayableMovementDefault                  bpp__Next__pf;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Player_P001_C_OnChangePlayableMovementDefault) == 0x000001, "Wrong alignment on BP_Player_P001_C_OnChangePlayableMovementDefault");
static_assert(sizeof(BP_Player_P001_C_OnChangePlayableMovementDefault) == 0x000002, "Wrong size on BP_Player_P001_C_OnChangePlayableMovementDefault");
static_assert(offsetof(BP_Player_P001_C_OnChangePlayableMovementDefault, bpp__Prev__pf) == 0x000000, "Member 'BP_Player_P001_C_OnChangePlayableMovementDefault::bpp__Prev__pf' has a wrong offset!");
static_assert(offsetof(BP_Player_P001_C_OnChangePlayableMovementDefault, bpp__Next__pf) == 0x000001, "Member 'BP_Player_P001_C_OnChangePlayableMovementDefault::bpp__Next__pf' has a wrong offset!");

// Function BP_Player_P001.BP_Player_P001_C.PlayAnimWithName
// 0x0008 (0x0008 - 0x0000)
struct BP_Player_P001_C_PlayAnimWithName final
{
public:
	class FName                                   bpp__InName__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Player_P001_C_PlayAnimWithName) == 0x000004, "Wrong alignment on BP_Player_P001_C_PlayAnimWithName");
static_assert(sizeof(BP_Player_P001_C_PlayAnimWithName) == 0x000008, "Wrong size on BP_Player_P001_C_PlayAnimWithName");
static_assert(offsetof(BP_Player_P001_C_PlayAnimWithName, bpp__InName__pf) == 0x000000, "Member 'BP_Player_P001_C_PlayAnimWithName::bpp__InName__pf' has a wrong offset!");

// Function BP_Player_P001.BP_Player_P001_C.PlayExternSoundWithAnimNotify
// 0x0004 (0x0004 - 0x0000)
struct BP_Player_P001_C_PlayExternSoundWithAnimNotify final
{
public:
	int32                                         bpp__PlayId__pf;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Player_P001_C_PlayExternSoundWithAnimNotify) == 0x000004, "Wrong alignment on BP_Player_P001_C_PlayExternSoundWithAnimNotify");
static_assert(sizeof(BP_Player_P001_C_PlayExternSoundWithAnimNotify) == 0x000004, "Wrong size on BP_Player_P001_C_PlayExternSoundWithAnimNotify");
static_assert(offsetof(BP_Player_P001_C_PlayExternSoundWithAnimNotify, bpp__PlayId__pf) == 0x000000, "Member 'BP_Player_P001_C_PlayExternSoundWithAnimNotify::bpp__PlayId__pf' has a wrong offset!");

// Function BP_Player_P001.BP_Player_P001_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_Player_P001_C_ReceiveTick final
{
public:
	float                                         bpp__DeltaSeconds__pf;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Player_P001_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_Player_P001_C_ReceiveTick");
static_assert(sizeof(BP_Player_P001_C_ReceiveTick) == 0x000004, "Wrong size on BP_Player_P001_C_ReceiveTick");
static_assert(offsetof(BP_Player_P001_C_ReceiveTick, bpp__DeltaSeconds__pf) == 0x000000, "Member 'BP_Player_P001_C_ReceiveTick::bpp__DeltaSeconds__pf' has a wrong offset!");

// Function BP_Player_P001.BP_Player_P001_C.SetAutoLookAtEnabledByParade
// 0x0001 (0x0001 - 0x0000)
struct BP_Player_P001_C_SetAutoLookAtEnabledByParade final
{
public:
	bool                                          bpp__bEnable__pf;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Player_P001_C_SetAutoLookAtEnabledByParade) == 0x000001, "Wrong alignment on BP_Player_P001_C_SetAutoLookAtEnabledByParade");
static_assert(sizeof(BP_Player_P001_C_SetAutoLookAtEnabledByParade) == 0x000001, "Wrong size on BP_Player_P001_C_SetAutoLookAtEnabledByParade");
static_assert(offsetof(BP_Player_P001_C_SetAutoLookAtEnabledByParade, bpp__bEnable__pf) == 0x000000, "Member 'BP_Player_P001_C_SetAutoLookAtEnabledByParade::bpp__bEnable__pf' has a wrong offset!");

// Function BP_Player_P001.BP_Player_P001_C.SetDefaultMovementOverride
// 0x0001 (0x0001 - 0x0000)
struct BP_Player_P001_C_SetDefaultMovementOverride final
{
public:
	EJackPlayableMovementDefault                  bpp__NewMovementDefault__pf;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Player_P001_C_SetDefaultMovementOverride) == 0x000001, "Wrong alignment on BP_Player_P001_C_SetDefaultMovementOverride");
static_assert(sizeof(BP_Player_P001_C_SetDefaultMovementOverride) == 0x000001, "Wrong size on BP_Player_P001_C_SetDefaultMovementOverride");
static_assert(offsetof(BP_Player_P001_C_SetDefaultMovementOverride, bpp__NewMovementDefault__pf) == 0x000000, "Member 'BP_Player_P001_C_SetDefaultMovementOverride::bpp__NewMovementDefault__pf' has a wrong offset!");

// Function BP_Player_P001.BP_Player_P001_C.SetExternSoundWithAnimNotify
// 0x0010 (0x0010 - 0x0000)
struct BP_Player_P001_C_SetExternSoundWithAnimNotify final
{
public:
	int32                                         bpp__PlayId__pf;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             bpp__ExternSound__pf;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Player_P001_C_SetExternSoundWithAnimNotify) == 0x000008, "Wrong alignment on BP_Player_P001_C_SetExternSoundWithAnimNotify");
static_assert(sizeof(BP_Player_P001_C_SetExternSoundWithAnimNotify) == 0x000010, "Wrong size on BP_Player_P001_C_SetExternSoundWithAnimNotify");
static_assert(offsetof(BP_Player_P001_C_SetExternSoundWithAnimNotify, bpp__PlayId__pf) == 0x000000, "Member 'BP_Player_P001_C_SetExternSoundWithAnimNotify::bpp__PlayId__pf' has a wrong offset!");
static_assert(offsetof(BP_Player_P001_C_SetExternSoundWithAnimNotify, bpp__ExternSound__pf) == 0x000008, "Member 'BP_Player_P001_C_SetExternSoundWithAnimNotify::bpp__ExternSound__pf' has a wrong offset!");

// Function BP_Player_P001.BP_Player_P001_C.SetMovementMaxSeedWalk
// 0x0001 (0x0001 - 0x0000)
struct BP_Player_P001_C_SetMovementMaxSeedWalk final
{
public:
	bool                                          bpp__ForceWalk__pf;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Player_P001_C_SetMovementMaxSeedWalk) == 0x000001, "Wrong alignment on BP_Player_P001_C_SetMovementMaxSeedWalk");
static_assert(sizeof(BP_Player_P001_C_SetMovementMaxSeedWalk) == 0x000001, "Wrong size on BP_Player_P001_C_SetMovementMaxSeedWalk");
static_assert(offsetof(BP_Player_P001_C_SetMovementMaxSeedWalk, bpp__ForceWalk__pf) == 0x000000, "Member 'BP_Player_P001_C_SetMovementMaxSeedWalk::bpp__ForceWalk__pf' has a wrong offset!");

// Function BP_Player_P001.BP_Player_P001_C.SetWaitAnims
// 0x0028 (0x0028 - 0x0000)
struct BP_Player_P001_C_SetWaitAnims final
{
public:
	TArray<class FName>                           bpp__UpperAnim__pf;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bpp__IsPoseAnim__pf;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           bpp__LowerAnim__pf;                                // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Player_P001_C_SetWaitAnims) == 0x000008, "Wrong alignment on BP_Player_P001_C_SetWaitAnims");
static_assert(sizeof(BP_Player_P001_C_SetWaitAnims) == 0x000028, "Wrong size on BP_Player_P001_C_SetWaitAnims");
static_assert(offsetof(BP_Player_P001_C_SetWaitAnims, bpp__UpperAnim__pf) == 0x000000, "Member 'BP_Player_P001_C_SetWaitAnims::bpp__UpperAnim__pf' has a wrong offset!");
static_assert(offsetof(BP_Player_P001_C_SetWaitAnims, bpp__IsPoseAnim__pf) == 0x000010, "Member 'BP_Player_P001_C_SetWaitAnims::bpp__IsPoseAnim__pf' has a wrong offset!");
static_assert(offsetof(BP_Player_P001_C_SetWaitAnims, bpp__LowerAnim__pf) == 0x000018, "Member 'BP_Player_P001_C_SetWaitAnims::bpp__LowerAnim__pf' has a wrong offset!");

}

