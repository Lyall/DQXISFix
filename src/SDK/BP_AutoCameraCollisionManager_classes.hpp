#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AutoCameraCollisionManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "STRUCT_DT_AutoCameraCollision_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "JackGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AutoCameraCollisionManager.BP_AutoCameraCollisionManager_C
// 0x0070 (0x0408 - 0x0398)
class ABP_AutoCameraCollisionManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0398(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Update;                                            // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A9[0x7];                                      // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSTRUCT_DT_AutoCameraCollision> AssetList;                                         // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FVector>                        CollisionLocation;                                 // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<float>                                 CollisionRadius;                                   // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	float                                         InfinityRadius;                                    // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VisibleEnabledCollision;                           // 0x03E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E5[0x3];                                      // 0x03E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PutCollisionDistance;                              // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enabled;                                           // 0x03EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3ED[0x3];                                      // 0x03ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         VirtualBattleField;                                // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	float                                         IgnoreCenterRadiusRate;                            // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AutoCameraCollisionManager(int32 EntryPoint);
	void OnBattleCameraEndDelegate_Event(EJackBattleCameraCategory BattleCameraCategory);
	void ReceiveBeginPlay();
	void OnBattleCameraStartDelegate_Event(EJackBattleCameraCategory BattleCameraCategory);
	void OnPrgCameraSetupDelegate_Event_0();
	void UserConstructionScript();
	void PutCollision();
	void CalcCollisionData();
	void CalcCollisionDataNearBattleField();
	void IsCollisionEnableDistance(const struct FVector& CollisionLocation_0, bool* Enable);
	void SetCameraCollisionEnable();
	void SetCameraCollisionDisable();
	void AddCollisionFromDT(class AActor* Actor, class FName Key);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AutoCameraCollisionManager_C">();
	}
	static class ABP_AutoCameraCollisionManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AutoCameraCollisionManager_C>();
	}
};
static_assert(alignof(ABP_AutoCameraCollisionManager_C) == 0x000008, "Wrong alignment on ABP_AutoCameraCollisionManager_C");
static_assert(sizeof(ABP_AutoCameraCollisionManager_C) == 0x000408, "Wrong size on ABP_AutoCameraCollisionManager_C");
static_assert(offsetof(ABP_AutoCameraCollisionManager_C, UberGraphFrame) == 0x000398, "Member 'ABP_AutoCameraCollisionManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AutoCameraCollisionManager_C, DefaultSceneRoot) == 0x0003A0, "Member 'ABP_AutoCameraCollisionManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AutoCameraCollisionManager_C, Update) == 0x0003A8, "Member 'ABP_AutoCameraCollisionManager_C::Update' has a wrong offset!");
static_assert(offsetof(ABP_AutoCameraCollisionManager_C, AssetList) == 0x0003B0, "Member 'ABP_AutoCameraCollisionManager_C::AssetList' has a wrong offset!");
static_assert(offsetof(ABP_AutoCameraCollisionManager_C, CollisionLocation) == 0x0003C0, "Member 'ABP_AutoCameraCollisionManager_C::CollisionLocation' has a wrong offset!");
static_assert(offsetof(ABP_AutoCameraCollisionManager_C, CollisionRadius) == 0x0003D0, "Member 'ABP_AutoCameraCollisionManager_C::CollisionRadius' has a wrong offset!");
static_assert(offsetof(ABP_AutoCameraCollisionManager_C, InfinityRadius) == 0x0003E0, "Member 'ABP_AutoCameraCollisionManager_C::InfinityRadius' has a wrong offset!");
static_assert(offsetof(ABP_AutoCameraCollisionManager_C, VisibleEnabledCollision) == 0x0003E4, "Member 'ABP_AutoCameraCollisionManager_C::VisibleEnabledCollision' has a wrong offset!");
static_assert(offsetof(ABP_AutoCameraCollisionManager_C, PutCollisionDistance) == 0x0003E8, "Member 'ABP_AutoCameraCollisionManager_C::PutCollisionDistance' has a wrong offset!");
static_assert(offsetof(ABP_AutoCameraCollisionManager_C, Enabled) == 0x0003EC, "Member 'ABP_AutoCameraCollisionManager_C::Enabled' has a wrong offset!");
static_assert(offsetof(ABP_AutoCameraCollisionManager_C, VirtualBattleField) == 0x0003F0, "Member 'ABP_AutoCameraCollisionManager_C::VirtualBattleField' has a wrong offset!");
static_assert(offsetof(ABP_AutoCameraCollisionManager_C, IgnoreCenterRadiusRate) == 0x000400, "Member 'ABP_AutoCameraCollisionManager_C::IgnoreCenterRadiusRate' has a wrong offset!");

}

