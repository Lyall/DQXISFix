#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DebugInputNumber

#include "Basic.hpp"

#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function BP_DebugInputNumber.BP_DebugInputNumber_C.ChangeNumberLimit
// 0x0004 (0x0004 - 0x0000)
struct BP_DebugInputNumber_C_ChangeNumberLimit final
{
public:
	int32                                         NewLimit;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DebugInputNumber_C_ChangeNumberLimit) == 0x000004, "Wrong alignment on BP_DebugInputNumber_C_ChangeNumberLimit");
static_assert(sizeof(BP_DebugInputNumber_C_ChangeNumberLimit) == 0x000004, "Wrong size on BP_DebugInputNumber_C_ChangeNumberLimit");
static_assert(offsetof(BP_DebugInputNumber_C_ChangeNumberLimit, NewLimit) == 0x000000, "Member 'BP_DebugInputNumber_C_ChangeNumberLimit::NewLimit' has a wrong offset!");

// Function BP_DebugInputNumber.BP_DebugInputNumber_C.ExecuteUbergraph_BP_DebugInputNumber
// 0x0190 (0x0190 - 0x0000)
struct BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputKeyEvent_Key13;                        // 0x0008(0x0018)(HasGetValueTypeHash)
	class AJackPlayerController*                  CallFunc_GetJackPlayerController_ReturnValue;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key;                          // 0x0038(0x0018)(HasGetValueTypeHash)
	class FString                                 CallFunc_LeftChop_ReturnValue;                     // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Num;                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue2;               // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key2;                         // 0x0088(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key3;                         // 0x00A0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key4;                         // 0x00B8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key5;                         // 0x00D0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key6;                         // 0x00E8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key7;                         // 0x0100(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key8;                         // 0x0118(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key9;                         // 0x0130(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key10;                        // 0x0148(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key11;                        // 0x0160(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key12;                        // 0x0178(0x0018)(HasGetValueTypeHash)
};
static_assert(alignof(BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber) == 0x000008, "Wrong alignment on BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber");
static_assert(sizeof(BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber) == 0x000190, "Wrong size on BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber");
static_assert(offsetof(BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber, EntryPoint) == 0x000000, "Member 'BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber, K2Node_InputKeyEvent_Key13) == 0x000008, "Member 'BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber::K2Node_InputKeyEvent_Key13' has a wrong offset!");
static_assert(offsetof(BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber, CallFunc_GetJackPlayerController_ReturnValue) == 0x000020, "Member 'BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber::CallFunc_GetJackPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber, CallFunc_Concat_StrStr_ReturnValue) == 0x000028, "Member 'BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber, K2Node_InputKeyEvent_Key) == 0x000038, "Member 'BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber::K2Node_InputKeyEvent_Key' has a wrong offset!");
static_assert(offsetof(BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber, CallFunc_LeftChop_ReturnValue) == 0x000050, "Member 'BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber::CallFunc_LeftChop_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber, K2Node_CustomEvent_Num) == 0x000060, "Member 'BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber::K2Node_CustomEvent_Num' has a wrong offset!");
static_assert(offsetof(BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber, CallFunc_Conv_IntToString_ReturnValue) == 0x000068, "Member 'BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber, CallFunc_Concat_StrStr_ReturnValue2) == 0x000078, "Member 'BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber::CallFunc_Concat_StrStr_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber, K2Node_InputKeyEvent_Key2) == 0x000088, "Member 'BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber::K2Node_InputKeyEvent_Key2' has a wrong offset!");
static_assert(offsetof(BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber, K2Node_InputKeyEvent_Key3) == 0x0000A0, "Member 'BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber::K2Node_InputKeyEvent_Key3' has a wrong offset!");
static_assert(offsetof(BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber, K2Node_InputKeyEvent_Key4) == 0x0000B8, "Member 'BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber::K2Node_InputKeyEvent_Key4' has a wrong offset!");
static_assert(offsetof(BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber, K2Node_InputKeyEvent_Key5) == 0x0000D0, "Member 'BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber::K2Node_InputKeyEvent_Key5' has a wrong offset!");
static_assert(offsetof(BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber, K2Node_InputKeyEvent_Key6) == 0x0000E8, "Member 'BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber::K2Node_InputKeyEvent_Key6' has a wrong offset!");
static_assert(offsetof(BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber, K2Node_InputKeyEvent_Key7) == 0x000100, "Member 'BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber::K2Node_InputKeyEvent_Key7' has a wrong offset!");
static_assert(offsetof(BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber, K2Node_InputKeyEvent_Key8) == 0x000118, "Member 'BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber::K2Node_InputKeyEvent_Key8' has a wrong offset!");
static_assert(offsetof(BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber, K2Node_InputKeyEvent_Key9) == 0x000130, "Member 'BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber::K2Node_InputKeyEvent_Key9' has a wrong offset!");
static_assert(offsetof(BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber, K2Node_InputKeyEvent_Key10) == 0x000148, "Member 'BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber::K2Node_InputKeyEvent_Key10' has a wrong offset!");
static_assert(offsetof(BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber, K2Node_InputKeyEvent_Key11) == 0x000160, "Member 'BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber::K2Node_InputKeyEvent_Key11' has a wrong offset!");
static_assert(offsetof(BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber, K2Node_InputKeyEvent_Key12) == 0x000178, "Member 'BP_DebugInputNumber_C_ExecuteUbergraph_BP_DebugInputNumber::K2Node_InputKeyEvent_Key12' has a wrong offset!");

// Function BP_DebugInputNumber.BP_DebugInputNumber_C.InpActEvt_BackSpace_K2Node_InputKeyEvent_23
// 0x0018 (0x0018 - 0x0000)
struct BP_DebugInputNumber_C_InpActEvt_BackSpace_K2Node_InputKeyEvent_23 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_DebugInputNumber_C_InpActEvt_BackSpace_K2Node_InputKeyEvent_23) == 0x000008, "Wrong alignment on BP_DebugInputNumber_C_InpActEvt_BackSpace_K2Node_InputKeyEvent_23");
static_assert(sizeof(BP_DebugInputNumber_C_InpActEvt_BackSpace_K2Node_InputKeyEvent_23) == 0x000018, "Wrong size on BP_DebugInputNumber_C_InpActEvt_BackSpace_K2Node_InputKeyEvent_23");
static_assert(offsetof(BP_DebugInputNumber_C_InpActEvt_BackSpace_K2Node_InputKeyEvent_23, Key) == 0x000000, "Member 'BP_DebugInputNumber_C_InpActEvt_BackSpace_K2Node_InputKeyEvent_23::Key' has a wrong offset!");

// Function BP_DebugInputNumber.BP_DebugInputNumber_C.InpActEvt_Enter_K2Node_InputKeyEvent_25
// 0x0018 (0x0018 - 0x0000)
struct BP_DebugInputNumber_C_InpActEvt_Enter_K2Node_InputKeyEvent_25 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_DebugInputNumber_C_InpActEvt_Enter_K2Node_InputKeyEvent_25) == 0x000008, "Wrong alignment on BP_DebugInputNumber_C_InpActEvt_Enter_K2Node_InputKeyEvent_25");
static_assert(sizeof(BP_DebugInputNumber_C_InpActEvt_Enter_K2Node_InputKeyEvent_25) == 0x000018, "Wrong size on BP_DebugInputNumber_C_InpActEvt_Enter_K2Node_InputKeyEvent_25");
static_assert(offsetof(BP_DebugInputNumber_C_InpActEvt_Enter_K2Node_InputKeyEvent_25, Key) == 0x000000, "Member 'BP_DebugInputNumber_C_InpActEvt_Enter_K2Node_InputKeyEvent_25::Key' has a wrong offset!");

// Function BP_DebugInputNumber.BP_DebugInputNumber_C.InpActEvt_NumPadEight_K2Node_InputKeyEvent_20
// 0x0018 (0x0018 - 0x0000)
struct BP_DebugInputNumber_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_20 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_DebugInputNumber_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_20) == 0x000008, "Wrong alignment on BP_DebugInputNumber_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_20");
static_assert(sizeof(BP_DebugInputNumber_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_20) == 0x000018, "Wrong size on BP_DebugInputNumber_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_20");
static_assert(offsetof(BP_DebugInputNumber_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_20, Key) == 0x000000, "Member 'BP_DebugInputNumber_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_20::Key' has a wrong offset!");

// Function BP_DebugInputNumber.BP_DebugInputNumber_C.InpActEvt_NumPadFive_K2Node_InputKeyEvent_17
// 0x0018 (0x0018 - 0x0000)
struct BP_DebugInputNumber_C_InpActEvt_NumPadFive_K2Node_InputKeyEvent_17 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_DebugInputNumber_C_InpActEvt_NumPadFive_K2Node_InputKeyEvent_17) == 0x000008, "Wrong alignment on BP_DebugInputNumber_C_InpActEvt_NumPadFive_K2Node_InputKeyEvent_17");
static_assert(sizeof(BP_DebugInputNumber_C_InpActEvt_NumPadFive_K2Node_InputKeyEvent_17) == 0x000018, "Wrong size on BP_DebugInputNumber_C_InpActEvt_NumPadFive_K2Node_InputKeyEvent_17");
static_assert(offsetof(BP_DebugInputNumber_C_InpActEvt_NumPadFive_K2Node_InputKeyEvent_17, Key) == 0x000000, "Member 'BP_DebugInputNumber_C_InpActEvt_NumPadFive_K2Node_InputKeyEvent_17::Key' has a wrong offset!");

// Function BP_DebugInputNumber.BP_DebugInputNumber_C.InpActEvt_NumPadFour_K2Node_InputKeyEvent_16
// 0x0018 (0x0018 - 0x0000)
struct BP_DebugInputNumber_C_InpActEvt_NumPadFour_K2Node_InputKeyEvent_16 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_DebugInputNumber_C_InpActEvt_NumPadFour_K2Node_InputKeyEvent_16) == 0x000008, "Wrong alignment on BP_DebugInputNumber_C_InpActEvt_NumPadFour_K2Node_InputKeyEvent_16");
static_assert(sizeof(BP_DebugInputNumber_C_InpActEvt_NumPadFour_K2Node_InputKeyEvent_16) == 0x000018, "Wrong size on BP_DebugInputNumber_C_InpActEvt_NumPadFour_K2Node_InputKeyEvent_16");
static_assert(offsetof(BP_DebugInputNumber_C_InpActEvt_NumPadFour_K2Node_InputKeyEvent_16, Key) == 0x000000, "Member 'BP_DebugInputNumber_C_InpActEvt_NumPadFour_K2Node_InputKeyEvent_16::Key' has a wrong offset!");

// Function BP_DebugInputNumber.BP_DebugInputNumber_C.InpActEvt_NumPadNine_K2Node_InputKeyEvent_21
// 0x0018 (0x0018 - 0x0000)
struct BP_DebugInputNumber_C_InpActEvt_NumPadNine_K2Node_InputKeyEvent_21 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_DebugInputNumber_C_InpActEvt_NumPadNine_K2Node_InputKeyEvent_21) == 0x000008, "Wrong alignment on BP_DebugInputNumber_C_InpActEvt_NumPadNine_K2Node_InputKeyEvent_21");
static_assert(sizeof(BP_DebugInputNumber_C_InpActEvt_NumPadNine_K2Node_InputKeyEvent_21) == 0x000018, "Wrong size on BP_DebugInputNumber_C_InpActEvt_NumPadNine_K2Node_InputKeyEvent_21");
static_assert(offsetof(BP_DebugInputNumber_C_InpActEvt_NumPadNine_K2Node_InputKeyEvent_21, Key) == 0x000000, "Member 'BP_DebugInputNumber_C_InpActEvt_NumPadNine_K2Node_InputKeyEvent_21::Key' has a wrong offset!");

// Function BP_DebugInputNumber.BP_DebugInputNumber_C.InpActEvt_NumPadOne_K2Node_InputKeyEvent_14
// 0x0018 (0x0018 - 0x0000)
struct BP_DebugInputNumber_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_14 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_DebugInputNumber_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_14) == 0x000008, "Wrong alignment on BP_DebugInputNumber_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_14");
static_assert(sizeof(BP_DebugInputNumber_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_14) == 0x000018, "Wrong size on BP_DebugInputNumber_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_14");
static_assert(offsetof(BP_DebugInputNumber_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_14, Key) == 0x000000, "Member 'BP_DebugInputNumber_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_14::Key' has a wrong offset!");

// Function BP_DebugInputNumber.BP_DebugInputNumber_C.InpActEvt_NumPadSeven_K2Node_InputKeyEvent_19
// 0x0018 (0x0018 - 0x0000)
struct BP_DebugInputNumber_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_19 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_DebugInputNumber_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_19) == 0x000008, "Wrong alignment on BP_DebugInputNumber_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_19");
static_assert(sizeof(BP_DebugInputNumber_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_19) == 0x000018, "Wrong size on BP_DebugInputNumber_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_19");
static_assert(offsetof(BP_DebugInputNumber_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_19, Key) == 0x000000, "Member 'BP_DebugInputNumber_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_19::Key' has a wrong offset!");

// Function BP_DebugInputNumber.BP_DebugInputNumber_C.InpActEvt_NumPadSix_K2Node_InputKeyEvent_18
// 0x0018 (0x0018 - 0x0000)
struct BP_DebugInputNumber_C_InpActEvt_NumPadSix_K2Node_InputKeyEvent_18 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_DebugInputNumber_C_InpActEvt_NumPadSix_K2Node_InputKeyEvent_18) == 0x000008, "Wrong alignment on BP_DebugInputNumber_C_InpActEvt_NumPadSix_K2Node_InputKeyEvent_18");
static_assert(sizeof(BP_DebugInputNumber_C_InpActEvt_NumPadSix_K2Node_InputKeyEvent_18) == 0x000018, "Wrong size on BP_DebugInputNumber_C_InpActEvt_NumPadSix_K2Node_InputKeyEvent_18");
static_assert(offsetof(BP_DebugInputNumber_C_InpActEvt_NumPadSix_K2Node_InputKeyEvent_18, Key) == 0x000000, "Member 'BP_DebugInputNumber_C_InpActEvt_NumPadSix_K2Node_InputKeyEvent_18::Key' has a wrong offset!");

// Function BP_DebugInputNumber.BP_DebugInputNumber_C.InpActEvt_NumPadThree_K2Node_InputKeyEvent_15
// 0x0018 (0x0018 - 0x0000)
struct BP_DebugInputNumber_C_InpActEvt_NumPadThree_K2Node_InputKeyEvent_15 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_DebugInputNumber_C_InpActEvt_NumPadThree_K2Node_InputKeyEvent_15) == 0x000008, "Wrong alignment on BP_DebugInputNumber_C_InpActEvt_NumPadThree_K2Node_InputKeyEvent_15");
static_assert(sizeof(BP_DebugInputNumber_C_InpActEvt_NumPadThree_K2Node_InputKeyEvent_15) == 0x000018, "Wrong size on BP_DebugInputNumber_C_InpActEvt_NumPadThree_K2Node_InputKeyEvent_15");
static_assert(offsetof(BP_DebugInputNumber_C_InpActEvt_NumPadThree_K2Node_InputKeyEvent_15, Key) == 0x000000, "Member 'BP_DebugInputNumber_C_InpActEvt_NumPadThree_K2Node_InputKeyEvent_15::Key' has a wrong offset!");

// Function BP_DebugInputNumber.BP_DebugInputNumber_C.InpActEvt_NumPadTwo_K2Node_InputKeyEvent_22
// 0x0018 (0x0018 - 0x0000)
struct BP_DebugInputNumber_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_22 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_DebugInputNumber_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_22) == 0x000008, "Wrong alignment on BP_DebugInputNumber_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_22");
static_assert(sizeof(BP_DebugInputNumber_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_22) == 0x000018, "Wrong size on BP_DebugInputNumber_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_22");
static_assert(offsetof(BP_DebugInputNumber_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_22, Key) == 0x000000, "Member 'BP_DebugInputNumber_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_22::Key' has a wrong offset!");

// Function BP_DebugInputNumber.BP_DebugInputNumber_C.InpActEvt_NumPadZero_K2Node_InputKeyEvent_13
// 0x0018 (0x0018 - 0x0000)
struct BP_DebugInputNumber_C_InpActEvt_NumPadZero_K2Node_InputKeyEvent_13 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_DebugInputNumber_C_InpActEvt_NumPadZero_K2Node_InputKeyEvent_13) == 0x000008, "Wrong alignment on BP_DebugInputNumber_C_InpActEvt_NumPadZero_K2Node_InputKeyEvent_13");
static_assert(sizeof(BP_DebugInputNumber_C_InpActEvt_NumPadZero_K2Node_InputKeyEvent_13) == 0x000018, "Wrong size on BP_DebugInputNumber_C_InpActEvt_NumPadZero_K2Node_InputKeyEvent_13");
static_assert(offsetof(BP_DebugInputNumber_C_InpActEvt_NumPadZero_K2Node_InputKeyEvent_13, Key) == 0x000000, "Member 'BP_DebugInputNumber_C_InpActEvt_NumPadZero_K2Node_InputKeyEvent_13::Key' has a wrong offset!");

// Function BP_DebugInputNumber.BP_DebugInputNumber_C.InpActEvt_Subtract_K2Node_InputKeyEvent_24
// 0x0018 (0x0018 - 0x0000)
struct BP_DebugInputNumber_C_InpActEvt_Subtract_K2Node_InputKeyEvent_24 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_DebugInputNumber_C_InpActEvt_Subtract_K2Node_InputKeyEvent_24) == 0x000008, "Wrong alignment on BP_DebugInputNumber_C_InpActEvt_Subtract_K2Node_InputKeyEvent_24");
static_assert(sizeof(BP_DebugInputNumber_C_InpActEvt_Subtract_K2Node_InputKeyEvent_24) == 0x000018, "Wrong size on BP_DebugInputNumber_C_InpActEvt_Subtract_K2Node_InputKeyEvent_24");
static_assert(offsetof(BP_DebugInputNumber_C_InpActEvt_Subtract_K2Node_InputKeyEvent_24, Key) == 0x000000, "Member 'BP_DebugInputNumber_C_InpActEvt_Subtract_K2Node_InputKeyEvent_24::Key' has a wrong offset!");

// Function BP_DebugInputNumber.BP_DebugInputNumber_C.InputNumber
// 0x0004 (0x0004 - 0x0000)
struct BP_DebugInputNumber_C_InputNumber final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DebugInputNumber_C_InputNumber) == 0x000004, "Wrong alignment on BP_DebugInputNumber_C_InputNumber");
static_assert(sizeof(BP_DebugInputNumber_C_InputNumber) == 0x000004, "Wrong size on BP_DebugInputNumber_C_InputNumber");
static_assert(offsetof(BP_DebugInputNumber_C_InputNumber, Num) == 0x000000, "Member 'BP_DebugInputNumber_C_InputNumber::Num' has a wrong offset!");

// Function BP_DebugInputNumber.BP_DebugInputNumber_C.NumberCharacterLimit
// 0x0018 (0x0018 - 0x0000)
struct BP_DebugInputNumber_C_NumberCharacterLimit final
{
public:
	int32                                         CallFunc_Len_ReturnValue;                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_RightChop_ReturnValue;                    // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DebugInputNumber_C_NumberCharacterLimit) == 0x000008, "Wrong alignment on BP_DebugInputNumber_C_NumberCharacterLimit");
static_assert(sizeof(BP_DebugInputNumber_C_NumberCharacterLimit) == 0x000018, "Wrong size on BP_DebugInputNumber_C_NumberCharacterLimit");
static_assert(offsetof(BP_DebugInputNumber_C_NumberCharacterLimit, CallFunc_Len_ReturnValue) == 0x000000, "Member 'BP_DebugInputNumber_C_NumberCharacterLimit::CallFunc_Len_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DebugInputNumber_C_NumberCharacterLimit, CallFunc_Subtract_IntInt_ReturnValue) == 0x000004, "Member 'BP_DebugInputNumber_C_NumberCharacterLimit::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DebugInputNumber_C_NumberCharacterLimit, CallFunc_RightChop_ReturnValue) == 0x000008, "Member 'BP_DebugInputNumber_C_NumberCharacterLimit::CallFunc_RightChop_ReturnValue' has a wrong offset!");

}

