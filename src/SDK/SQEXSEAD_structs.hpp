#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SQEXSEAD

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum SQEXSEAD.ESQEXSEADChangeAutoSeEnableNotifyEndBehavior
// NumValues: 0x0004
enum class ESQEXSEADChangeAutoSeEnableNotifyEndBehavior : uint8
{
	RevertState                              = 0,
	SetInvertedState                         = 1,
	NoAction                                 = 2,
	ESQEXSEADChangeAutoSeEnableNotifyEndBehavior_MAX = 3,
};

// Enum SQEXSEAD.ESQEXSEADANPlayAutoSeSourceType
// NumValues: 0x0004
enum class ESQEXSEADANPlayAutoSeSourceType : uint8
{
	MotionSoundType                          = 0,
	AuxSurfaceTable                          = 1,
	SurfaceTableAsset                        = 2,
	ESQEXSEADANPlayAutoSeSourceType_MAX      = 3,
};

// Enum SQEXSEAD.ESQEXSEADAutoSeComponentAssetTableNonSurface
// NumValues: 0x000B
enum class ESQEXSEADAutoSeComponentAssetTableNonSurface : uint8
{
	RustleShort                              = 0,
	RustleLong                               = 1,
	RustleFootShort                          = 2,
	RustleFootLong                           = 3,
	WingFlapUp                               = 4,
	WingFlapDown                             = 5,
	SwingKnock                               = 6,
	SwingRub                                 = 7,
	CrouchDown                               = 8,
	StandUp                                  = 9,
	MAX                                      = 10,
};

// Enum SQEXSEAD.ESQEXSEADAutoSeComponentAssetTablePerSurface
// NumValues: 0x0007
enum class ESQEXSEADAutoSeComponentAssetTablePerSurface : uint8
{
	Walk                                     = 0,
	Run                                      = 1,
	Jump                                     = 2,
	LandNormal                               = 3,
	LandHard                                 = 4,
	FootShuffle                              = 5,
	MAX                                      = 6,
};

// Enum SQEXSEAD.ESQEXSEADAutoSeResult
// NumValues: 0x0007
enum class ESQEXSEADAutoSeResult : uint8
{
	Success                                  = 0,
	Failure                                  = 1,
	Error_InvalidArgs                        = 100,
	Error_InvalidBoneName                    = 101,
	Error_NotAllSocketsValid                 = 102,
	Error_FailedToCreateProc                 = 103,
	ESQEXSEADAutoSeResult_MAX                = 104,
};

// Enum SQEXSEAD.ESQEXSEADAutoSePartsType
// NumValues: 0x0007
enum class ESQEXSEADAutoSePartsType : uint8
{
	Invalid                                  = 0,
	Foot_Default                             = 1,
	Arm_Default                              = 2,
	Wing_Default                             = 3,
	Swing_Default                            = 4,
	Body_Default                             = 5,
	ESQEXSEADAutoSePartsType_MAX             = 6,
};

// Enum SQEXSEAD.ESQEXSEADAutoSeMotionSoundType
// NumValues: 0x0012
enum class ESQEXSEADAutoSeMotionSoundType : uint8
{
	None                                     = 0,
	Walk                                     = 1,
	Run                                      = 2,
	Jump                                     = 3,
	LandNormal                               = 4,
	LandHard                                 = 5,
	FootShuffle                              = 6,
	RustleShort                              = 7,
	RustleLong                               = 8,
	RustleFootShort                          = 9,
	RustleFootLong                           = 10,
	WingFlapUp                               = 11,
	WingFlapDown                             = 12,
	SwingKnock                               = 13,
	SwingRub                                 = 14,
	CrouchDown                               = 15,
	StandUp                                  = 16,
	ESQEXSEADAutoSeMotionSoundType_MAX       = 17,
};

// Enum SQEXSEAD.ESQEXSEAD_BGMStopBehaviour
// NumValues: 0x0005
enum class ESQEXSEAD_BGMStopBehaviour : uint8
{
	Stop                                     = 0,
	Unreference                              = 1,
	Reset                                    = 2,
	Ready                                    = 3,
	ESQEXSEAD_MAX                            = 4,
};

// Enum SQEXSEAD.ESQEXSEAD_BGMStoreBehaviour
// NumValues: 0x0005
enum class ESQEXSEAD_BGMStoreBehaviour : uint8
{
	Stop                                     = 0,
	AutoPlay                                 = 1,
	Suspend                                  = 2,
	AutoResume                               = 3,
	ESQEXSEAD_MAX                            = 4,
};

// Enum SQEXSEAD.ESQEXSEAD_BGMState
// NumValues: 0x0009
enum class ESQEXSEAD_BGMState : uint8
{
	Invalid                                  = 0,
	NotReady                                 = 1,
	Ready                                    = 2,
	AutoPlay                                 = 3,
	Playing                                  = 4,
	Stop                                     = 5,
	Suspended                                = 6,
	AutoResume                               = 7,
	ESQEXSEAD_MAX                            = 8,
};

// Enum SQEXSEAD.ESQEXSEADCategoryVolumeType
// NumValues: 0x0003
enum class ESQEXSEADCategoryVolumeType : uint8
{
	GAME                                     = 0,
	CONFIG                                   = 1,
	MAX                                      = 2,
};

// Enum SQEXSEAD.ESQEXSEADCategoryVolumeLayers
// NumValues: 0x0006
enum class ESQEXSEADCategoryVolumeLayers : uint8
{
	Debug                                    = 0,
	Game                                     = 1,
	Config                                   = 2,
	CutScene                                 = 3,
	_MAX                                     = 4,
	ESQEXSEADCategoryVolumeLayers_MAX        = 5,
};

// Enum SQEXSEAD.ESQEXSEADLayoutType
// NumValues: 0x0008
enum class ESQEXSEADLayoutType : uint8
{
	Point                                    = 0,
	Line                                     = 1,
	Box                                      = 2,
	Polyline                                 = 3,
	Quadrilateral                            = 4,
	TriangleStrip                            = 5,
	TriangleFan                              = 6,
	ESQEXSEADLayoutType_MAX                  = 7,
};

// Enum SQEXSEAD.ESQEXSEADLayoutObstructionType
// NumValues: 0x0003
enum class ESQEXSEADLayoutObstructionType : uint8
{
	Board                                    = 0,
	Box                                      = 1,
	ESQEXSEADLayoutObstructionType_MAX       = 2,
};

// Enum SQEXSEAD.ESQEXSEADAudioStartTimings
// NumValues: 0x0004
enum class ESQEXSEADAudioStartTimings : uint8
{
	None                                     = 0,
	OnBeginPlay                              = 1,
	OnZeroOneValueVariable                   = 2,
	ESQEXSEADAudioStartTimings_MAX           = 3,
};

// Enum SQEXSEAD.ESQEXSEADZeroOneProperties
// NumValues: 0x0004
enum class ESQEXSEADZeroOneProperties : uint8
{
	None                                     = 0,
	Velocity                                 = 1,
	RotationalVelocity                       = 2,
	ESQEXSEADZeroOneProperties_MAX           = 3,
};

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeComponentFootInitParams
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FSQEXSEADAutoSeComponentFootInitParams final
{
public:
	class FName                                   FemurName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TibiaName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FootName;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeelName;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToeName;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeComponentFootInitParams) == 0x000008, "Wrong alignment on FSQEXSEADAutoSeComponentFootInitParams");
static_assert(sizeof(FSQEXSEADAutoSeComponentFootInitParams) == 0x000028, "Wrong size on FSQEXSEADAutoSeComponentFootInitParams");
static_assert(offsetof(FSQEXSEADAutoSeComponentFootInitParams, FemurName) == 0x000000, "Member 'FSQEXSEADAutoSeComponentFootInitParams::FemurName' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentFootInitParams, TibiaName) == 0x000008, "Member 'FSQEXSEADAutoSeComponentFootInitParams::TibiaName' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentFootInitParams, FootName) == 0x000010, "Member 'FSQEXSEADAutoSeComponentFootInitParams::FootName' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentFootInitParams, HeelName) == 0x000018, "Member 'FSQEXSEADAutoSeComponentFootInitParams::HeelName' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentFootInitParams, ToeName) == 0x000020, "Member 'FSQEXSEADAutoSeComponentFootInitParams::ToeName' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeComponentArmInitParams
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSQEXSEADAutoSeComponentArmInitParams final
{
public:
	class FName                                   ShoulderName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ElbowName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeComponentArmInitParams) == 0x000008, "Wrong alignment on FSQEXSEADAutoSeComponentArmInitParams");
static_assert(sizeof(FSQEXSEADAutoSeComponentArmInitParams) == 0x000010, "Wrong size on FSQEXSEADAutoSeComponentArmInitParams");
static_assert(offsetof(FSQEXSEADAutoSeComponentArmInitParams, ShoulderName) == 0x000000, "Member 'FSQEXSEADAutoSeComponentArmInitParams::ShoulderName' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentArmInitParams, ElbowName) == 0x000008, "Member 'FSQEXSEADAutoSeComponentArmInitParams::ElbowName' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeComponentWingInitParams
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSQEXSEADAutoSeComponentWingInitParams final
{
public:
	class FName                                   WingRootName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WingEdgeName;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeComponentWingInitParams) == 0x000008, "Wrong alignment on FSQEXSEADAutoSeComponentWingInitParams");
static_assert(sizeof(FSQEXSEADAutoSeComponentWingInitParams) == 0x000010, "Wrong size on FSQEXSEADAutoSeComponentWingInitParams");
static_assert(offsetof(FSQEXSEADAutoSeComponentWingInitParams, WingRootName) == 0x000000, "Member 'FSQEXSEADAutoSeComponentWingInitParams::WingRootName' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentWingInitParams, WingEdgeName) == 0x000008, "Member 'FSQEXSEADAutoSeComponentWingInitParams::WingEdgeName' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeComponentSwingInitParams
// 0x0010 (0x0010 - 0x0000)
struct FSQEXSEADAutoSeComponentSwingInitParams final
{
public:
	TArray<class FName>                           ChainNodeNames;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeComponentSwingInitParams) == 0x000008, "Wrong alignment on FSQEXSEADAutoSeComponentSwingInitParams");
static_assert(sizeof(FSQEXSEADAutoSeComponentSwingInitParams) == 0x000010, "Wrong size on FSQEXSEADAutoSeComponentSwingInitParams");
static_assert(offsetof(FSQEXSEADAutoSeComponentSwingInitParams, ChainNodeNames) == 0x000000, "Member 'FSQEXSEADAutoSeComponentSwingInitParams::ChainNodeNames' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeComponentBodyInitParams
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSQEXSEADAutoSeComponentBodyInitParams final
{
public:
	class FName                                   BaseName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WaistName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeComponentBodyInitParams) == 0x000008, "Wrong alignment on FSQEXSEADAutoSeComponentBodyInitParams");
static_assert(sizeof(FSQEXSEADAutoSeComponentBodyInitParams) == 0x000010, "Wrong size on FSQEXSEADAutoSeComponentBodyInitParams");
static_assert(offsetof(FSQEXSEADAutoSeComponentBodyInitParams, BaseName) == 0x000000, "Member 'FSQEXSEADAutoSeComponentBodyInitParams::BaseName' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentBodyInitParams, WaistName) == 0x000008, "Member 'FSQEXSEADAutoSeComponentBodyInitParams::WaistName' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeComponentInitParams
// 0x0058 (0x0058 - 0x0000)
struct FSQEXSEADAutoSeComponentInitParams final
{
public:
	TArray<struct FSQEXSEADAutoSeComponentFootInitParams> Feet;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEXSEADAutoSeComponentArmInitParams> Arms;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEXSEADAutoSeComponentWingInitParams> Wings;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEXSEADAutoSeComponentSwingInitParams> Swings;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSQEXSEADAutoSeComponentBodyInitParams Body;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         AutoCalcHeelRatio;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADAutoSeComponentInitParams) == 0x000008, "Wrong alignment on FSQEXSEADAutoSeComponentInitParams");
static_assert(sizeof(FSQEXSEADAutoSeComponentInitParams) == 0x000058, "Wrong size on FSQEXSEADAutoSeComponentInitParams");
static_assert(offsetof(FSQEXSEADAutoSeComponentInitParams, Feet) == 0x000000, "Member 'FSQEXSEADAutoSeComponentInitParams::Feet' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentInitParams, Arms) == 0x000010, "Member 'FSQEXSEADAutoSeComponentInitParams::Arms' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentInitParams, Wings) == 0x000020, "Member 'FSQEXSEADAutoSeComponentInitParams::Wings' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentInitParams, Swings) == 0x000030, "Member 'FSQEXSEADAutoSeComponentInitParams::Swings' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentInitParams, Body) == 0x000040, "Member 'FSQEXSEADAutoSeComponentInitParams::Body' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentInitParams, AutoCalcHeelRatio) == 0x000050, "Member 'FSQEXSEADAutoSeComponentInitParams::AutoCalcHeelRatio' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAnimNotifyPlayAutoSeParams
// 0x0028 (0x0028 - 0x0000)
struct FSQEXSEADAnimNotifyPlayAutoSeParams final
{
public:
	ESQEXSEADANPlayAutoSeSourceType               SourceType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEXSEADAutoSeMotionSoundType                MotionSoundType;                                   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USQEXSEADSurfaceAssetReferenceTable*    SurfaceAssetPathTable;                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SurfaceAssetTableRecordName;                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEXSEADAutoSePartsType                      AutoSePartsType;                                   // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AutoSePartsIndex;                                  // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCheckIsGrounded : 1;                              // 0x001A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAttachToParts : 1;                                // 0x001A(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SoundVolume;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoundPitchMultiplier;                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADAnimNotifyPlayAutoSeParams) == 0x000008, "Wrong alignment on FSQEXSEADAnimNotifyPlayAutoSeParams");
static_assert(sizeof(FSQEXSEADAnimNotifyPlayAutoSeParams) == 0x000028, "Wrong size on FSQEXSEADAnimNotifyPlayAutoSeParams");
static_assert(offsetof(FSQEXSEADAnimNotifyPlayAutoSeParams, SourceType) == 0x000000, "Member 'FSQEXSEADAnimNotifyPlayAutoSeParams::SourceType' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAnimNotifyPlayAutoSeParams, MotionSoundType) == 0x000001, "Member 'FSQEXSEADAnimNotifyPlayAutoSeParams::MotionSoundType' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAnimNotifyPlayAutoSeParams, SurfaceAssetPathTable) == 0x000008, "Member 'FSQEXSEADAnimNotifyPlayAutoSeParams::SurfaceAssetPathTable' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAnimNotifyPlayAutoSeParams, SurfaceAssetTableRecordName) == 0x000010, "Member 'FSQEXSEADAnimNotifyPlayAutoSeParams::SurfaceAssetTableRecordName' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAnimNotifyPlayAutoSeParams, AutoSePartsType) == 0x000018, "Member 'FSQEXSEADAnimNotifyPlayAutoSeParams::AutoSePartsType' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAnimNotifyPlayAutoSeParams, AutoSePartsIndex) == 0x000019, "Member 'FSQEXSEADAnimNotifyPlayAutoSeParams::AutoSePartsIndex' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAnimNotifyPlayAutoSeParams, SoundVolume) == 0x00001C, "Member 'FSQEXSEADAnimNotifyPlayAutoSeParams::SoundVolume' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAnimNotifyPlayAutoSeParams, SoundPitchMultiplier) == 0x000020, "Member 'FSQEXSEADAnimNotifyPlayAutoSeParams::SoundPitchMultiplier' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEAD_BGMOptions
// 0x001C (0x001C - 0x0000)
struct FSQEXSEAD_BGMOptions final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEXSEAD_BGMStoreBehaviour                   StoreBehaviour;                                    // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEXSEAD_BGMStopBehaviour                    StopBehaviour;                                     // 0x0005(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayFadeInTime;                                    // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResumeFadeInTime;                                  // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuspendFadeOutTime;                                // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopFadeOutTime;                                   // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestartSameBGM;                                   // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEAD_BGMOptions) == 0x000004, "Wrong alignment on FSQEXSEAD_BGMOptions");
static_assert(sizeof(FSQEXSEAD_BGMOptions) == 0x00001C, "Wrong size on FSQEXSEAD_BGMOptions");
static_assert(offsetof(FSQEXSEAD_BGMOptions, Priority) == 0x000000, "Member 'FSQEXSEAD_BGMOptions::Priority' has a wrong offset!");
static_assert(offsetof(FSQEXSEAD_BGMOptions, StoreBehaviour) == 0x000004, "Member 'FSQEXSEAD_BGMOptions::StoreBehaviour' has a wrong offset!");
static_assert(offsetof(FSQEXSEAD_BGMOptions, StopBehaviour) == 0x000005, "Member 'FSQEXSEAD_BGMOptions::StopBehaviour' has a wrong offset!");
static_assert(offsetof(FSQEXSEAD_BGMOptions, PlayFadeInTime) == 0x000008, "Member 'FSQEXSEAD_BGMOptions::PlayFadeInTime' has a wrong offset!");
static_assert(offsetof(FSQEXSEAD_BGMOptions, ResumeFadeInTime) == 0x00000C, "Member 'FSQEXSEAD_BGMOptions::ResumeFadeInTime' has a wrong offset!");
static_assert(offsetof(FSQEXSEAD_BGMOptions, SuspendFadeOutTime) == 0x000010, "Member 'FSQEXSEAD_BGMOptions::SuspendFadeOutTime' has a wrong offset!");
static_assert(offsetof(FSQEXSEAD_BGMOptions, StopFadeOutTime) == 0x000014, "Member 'FSQEXSEAD_BGMOptions::StopFadeOutTime' has a wrong offset!");
static_assert(offsetof(FSQEXSEAD_BGMOptions, bRestartSameBGM) == 0x000018, "Member 'FSQEXSEAD_BGMOptions::bRestartSameBGM' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADSoundAttachedInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FSQEXSEADSoundAttachedInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADSoundAttachedInfo) == 0x000004, "Wrong alignment on FSQEXSEADSoundAttachedInfo");
static_assert(sizeof(FSQEXSEADSoundAttachedInfo) == 0x000010, "Wrong size on FSQEXSEADSoundAttachedInfo");

// ScriptStruct SQEXSEAD.SQEXSEADSurfaceAssetReferenceRecord
// 0x0200 (0x0200 - 0x0000)
struct FSQEXSEADSurfaceAssetReferenceRecord final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        AssetRefs[0x3F];                                   // 0x0008(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADSurfaceAssetReferenceRecord) == 0x000008, "Wrong alignment on FSQEXSEADSurfaceAssetReferenceRecord");
static_assert(sizeof(FSQEXSEADSurfaceAssetReferenceRecord) == 0x000200, "Wrong size on FSQEXSEADSurfaceAssetReferenceRecord");
static_assert(offsetof(FSQEXSEADSurfaceAssetReferenceRecord, Name) == 0x000000, "Member 'FSQEXSEADSurfaceAssetReferenceRecord::Name' has a wrong offset!");
static_assert(offsetof(FSQEXSEADSurfaceAssetReferenceRecord, AssetRefs) == 0x000008, "Member 'FSQEXSEADSurfaceAssetReferenceRecord::AssetRefs' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeDetectorSettingFootStep
// 0x0010 (0x0010 - 0x0000)
struct FSQEXSEADAutoSeDetectorSettingFootStep final
{
public:
	bool                                          bOverrideFootShuffleAssumeBodyStopVelocityThreshold; // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootShuffleAssumeBodyStopVelocityThreshold;        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideFootShuffleDetectFootAccelThreshold;      // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootShuffleDetectFootAccelThreshold;               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeDetectorSettingFootStep) == 0x000004, "Wrong alignment on FSQEXSEADAutoSeDetectorSettingFootStep");
static_assert(sizeof(FSQEXSEADAutoSeDetectorSettingFootStep) == 0x000010, "Wrong size on FSQEXSEADAutoSeDetectorSettingFootStep");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, bOverrideFootShuffleAssumeBodyStopVelocityThreshold) == 0x000000, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::bOverrideFootShuffleAssumeBodyStopVelocityThreshold' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, FootShuffleAssumeBodyStopVelocityThreshold) == 0x000004, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::FootShuffleAssumeBodyStopVelocityThreshold' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, bOverrideFootShuffleDetectFootAccelThreshold) == 0x000008, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::bOverrideFootShuffleDetectFootAccelThreshold' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, FootShuffleDetectFootAccelThreshold) == 0x00000C, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::FootShuffleDetectFootAccelThreshold' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeDetectorSettingSwing
// 0x0010 (0x0010 - 0x0000)
struct FSQEXSEADAutoSeDetectorSettingSwing final
{
public:
	bool                                          bOverrideKnockDetectVelocityThreshold;             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KnockDetectVelocityThreshold;                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideRubDetectVelocityThreshold;               // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RubDetectVelocityThreshold;                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeDetectorSettingSwing) == 0x000004, "Wrong alignment on FSQEXSEADAutoSeDetectorSettingSwing");
static_assert(sizeof(FSQEXSEADAutoSeDetectorSettingSwing) == 0x000010, "Wrong size on FSQEXSEADAutoSeDetectorSettingSwing");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingSwing, bOverrideKnockDetectVelocityThreshold) == 0x000000, "Member 'FSQEXSEADAutoSeDetectorSettingSwing::bOverrideKnockDetectVelocityThreshold' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingSwing, KnockDetectVelocityThreshold) == 0x000004, "Member 'FSQEXSEADAutoSeDetectorSettingSwing::KnockDetectVelocityThreshold' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingSwing, bOverrideRubDetectVelocityThreshold) == 0x000008, "Member 'FSQEXSEADAutoSeDetectorSettingSwing::bOverrideRubDetectVelocityThreshold' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingSwing, RubDetectVelocityThreshold) == 0x00000C, "Member 'FSQEXSEADAutoSeDetectorSettingSwing::RubDetectVelocityThreshold' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeAnalyzerSetting
// 0x0018 (0x0018 - 0x0000)
struct FSQEXSEADAutoSeAnalyzerSetting final
{
public:
	bool                                          bOverrideAssumeFootMotionlessMoveLenInWorld;       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AssumeFootMotionlessMoveLenInWorld;                // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideAssumeBodyRunngingVelocity;               // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AssumeBodyRunngingVelocity;                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideAutoCalcFootGroundedThresholdRatio;       // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoCalcFootGroundedThresholdRatio;                // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeAnalyzerSetting) == 0x000004, "Wrong alignment on FSQEXSEADAutoSeAnalyzerSetting");
static_assert(sizeof(FSQEXSEADAutoSeAnalyzerSetting) == 0x000018, "Wrong size on FSQEXSEADAutoSeAnalyzerSetting");
static_assert(offsetof(FSQEXSEADAutoSeAnalyzerSetting, bOverrideAssumeFootMotionlessMoveLenInWorld) == 0x000000, "Member 'FSQEXSEADAutoSeAnalyzerSetting::bOverrideAssumeFootMotionlessMoveLenInWorld' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeAnalyzerSetting, AssumeFootMotionlessMoveLenInWorld) == 0x000004, "Member 'FSQEXSEADAutoSeAnalyzerSetting::AssumeFootMotionlessMoveLenInWorld' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeAnalyzerSetting, bOverrideAssumeBodyRunngingVelocity) == 0x000008, "Member 'FSQEXSEADAutoSeAnalyzerSetting::bOverrideAssumeBodyRunngingVelocity' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeAnalyzerSetting, AssumeBodyRunngingVelocity) == 0x00000C, "Member 'FSQEXSEADAutoSeAnalyzerSetting::AssumeBodyRunngingVelocity' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeAnalyzerSetting, bOverrideAutoCalcFootGroundedThresholdRatio) == 0x000010, "Member 'FSQEXSEADAutoSeAnalyzerSetting::bOverrideAutoCalcFootGroundedThresholdRatio' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeAnalyzerSetting, AutoCalcFootGroundedThresholdRatio) == 0x000014, "Member 'FSQEXSEADAutoSeAnalyzerSetting::AutoCalcFootGroundedThresholdRatio' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeDetectorSettingRustle
// 0x0028 (0x0028 - 0x0000)
struct FSQEXSEADAutoSeDetectorSettingRustle final
{
public:
	bool                                          bOverrideElbowRustleVolumeRangesWalk;              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElbowRustleRelativeVelocityForNmlVolumeRangeWalkMin; // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElbowRustleRelativeVelocityForNmlVolumeRangeWalkMax; // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElbowRustleVolumeRangeWalkMin;                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElbowRustleVolumeRangeWalkMax;                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideElbowRustleVolumeRangesRun;               // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElbowRustleRelativeVelocityForNmlVolumeRangeRunMin; // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElbowRustleRelativeVelocityForNmlVolumeRangeRunMax; // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElbowRustleVolumeRangeRunMin;                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElbowRustleVolumeRangeRunMax;                      // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeDetectorSettingRustle) == 0x000004, "Wrong alignment on FSQEXSEADAutoSeDetectorSettingRustle");
static_assert(sizeof(FSQEXSEADAutoSeDetectorSettingRustle) == 0x000028, "Wrong size on FSQEXSEADAutoSeDetectorSettingRustle");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, bOverrideElbowRustleVolumeRangesWalk) == 0x000000, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::bOverrideElbowRustleVolumeRangesWalk' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, ElbowRustleRelativeVelocityForNmlVolumeRangeWalkMin) == 0x000004, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::ElbowRustleRelativeVelocityForNmlVolumeRangeWalkMin' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, ElbowRustleRelativeVelocityForNmlVolumeRangeWalkMax) == 0x000008, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::ElbowRustleRelativeVelocityForNmlVolumeRangeWalkMax' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, ElbowRustleVolumeRangeWalkMin) == 0x00000C, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::ElbowRustleVolumeRangeWalkMin' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, ElbowRustleVolumeRangeWalkMax) == 0x000010, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::ElbowRustleVolumeRangeWalkMax' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, bOverrideElbowRustleVolumeRangesRun) == 0x000014, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::bOverrideElbowRustleVolumeRangesRun' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, ElbowRustleRelativeVelocityForNmlVolumeRangeRunMin) == 0x000018, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::ElbowRustleRelativeVelocityForNmlVolumeRangeRunMin' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, ElbowRustleRelativeVelocityForNmlVolumeRangeRunMax) == 0x00001C, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::ElbowRustleRelativeVelocityForNmlVolumeRangeRunMax' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, ElbowRustleVolumeRangeRunMin) == 0x000020, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::ElbowRustleVolumeRangeRunMin' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, ElbowRustleVolumeRangeRunMax) == 0x000024, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::ElbowRustleVolumeRangeRunMax' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeComponentAssetTableNonSurface
// 0x0050 (0x0050 - 0x0000)
struct FSQEXSEADAutoSeComponentAssetTableNonSurface final
{
public:
	struct FSoftObjectPath                        SoundAssetPaths[0xA];                              // 0x0000(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeComponentAssetTableNonSurface) == 0x000008, "Wrong alignment on FSQEXSEADAutoSeComponentAssetTableNonSurface");
static_assert(sizeof(FSQEXSEADAutoSeComponentAssetTableNonSurface) == 0x000050, "Wrong size on FSQEXSEADAutoSeComponentAssetTableNonSurface");
static_assert(offsetof(FSQEXSEADAutoSeComponentAssetTableNonSurface, SoundAssetPaths) == 0x000000, "Member 'FSQEXSEADAutoSeComponentAssetTableNonSurface::SoundAssetPaths' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeComponentAssetTablePerSurface
// 0x0030 (0x0030 - 0x0000)
struct FSQEXSEADAutoSeComponentAssetTablePerSurface final
{
public:
	struct FSoftObjectPath                        SoundAssetPaths[0x6];                              // 0x0000(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeComponentAssetTablePerSurface) == 0x000008, "Wrong alignment on FSQEXSEADAutoSeComponentAssetTablePerSurface");
static_assert(sizeof(FSQEXSEADAutoSeComponentAssetTablePerSurface) == 0x000030, "Wrong size on FSQEXSEADAutoSeComponentAssetTablePerSurface");
static_assert(offsetof(FSQEXSEADAutoSeComponentAssetTablePerSurface, SoundAssetPaths) == 0x000000, "Member 'FSQEXSEADAutoSeComponentAssetTablePerSurface::SoundAssetPaths' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEAD_BGMSlotSetting
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FSQEXSEAD_BGMSlotSetting final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQEXSEAD_BGMOptions                   SlotOption;                                        // 0x0008(0x001C)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEAD_BGMSlotSetting) == 0x000008, "Wrong alignment on FSQEXSEAD_BGMSlotSetting");
static_assert(sizeof(FSQEXSEAD_BGMSlotSetting) == 0x000028, "Wrong size on FSQEXSEAD_BGMSlotSetting");
static_assert(offsetof(FSQEXSEAD_BGMSlotSetting, SlotName) == 0x000000, "Member 'FSQEXSEAD_BGMSlotSetting::SlotName' has a wrong offset!");
static_assert(offsetof(FSQEXSEAD_BGMSlotSetting, SlotOption) == 0x000008, "Member 'FSQEXSEAD_BGMSlotSetting::SlotOption' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEAD_BGMLocalOptions
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FSQEXSEAD_BGMLocalOptions final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEAD_BGMLocalOptions) == 0x000004, "Wrong alignment on FSQEXSEAD_BGMLocalOptions");
static_assert(sizeof(FSQEXSEAD_BGMLocalOptions) == 0x000008, "Wrong size on FSQEXSEAD_BGMLocalOptions");

// ScriptStruct SQEXSEAD.SQEXSEADSoundReference
// 0x0018 (0x0018 - 0x0000)
struct FSQEXSEADSoundReference final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundIndex;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bFollow : 1;                                       // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachPointName;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADSoundReference) == 0x000008, "Wrong alignment on FSQEXSEADSoundReference");
static_assert(sizeof(FSQEXSEADSoundReference) == 0x000018, "Wrong size on FSQEXSEADSoundReference");
static_assert(offsetof(FSQEXSEADSoundReference, Sound) == 0x000000, "Member 'FSQEXSEADSoundReference::Sound' has a wrong offset!");
static_assert(offsetof(FSQEXSEADSoundReference, SoundIndex) == 0x000008, "Member 'FSQEXSEADSoundReference::SoundIndex' has a wrong offset!");
static_assert(offsetof(FSQEXSEADSoundReference, AttachPointName) == 0x000010, "Member 'FSQEXSEADSoundReference::AttachPointName' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADCategoryInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FSQEXSEADCategoryInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADCategoryInfo) == 0x000004, "Wrong alignment on FSQEXSEADCategoryInfo");
static_assert(sizeof(FSQEXSEADCategoryInfo) == 0x000010, "Wrong size on FSQEXSEADCategoryInfo");

// ScriptStruct SQEXSEAD.SQEXSEADSurfaceAssetReferenceTableData
// 0x0010 (0x0010 - 0x0000)
struct FSQEXSEADSurfaceAssetReferenceTableData final
{
public:
	TArray<struct FSQEXSEADSurfaceAssetReferenceRecord> Records;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADSurfaceAssetReferenceTableData) == 0x000008, "Wrong alignment on FSQEXSEADSurfaceAssetReferenceTableData");
static_assert(sizeof(FSQEXSEADSurfaceAssetReferenceTableData) == 0x000010, "Wrong size on FSQEXSEADSurfaceAssetReferenceTableData");
static_assert(offsetof(FSQEXSEADSurfaceAssetReferenceTableData, Records) == 0x000000, "Member 'FSQEXSEADSurfaceAssetReferenceTableData::Records' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeControlTrackKey
// 0x0014 (0x0014 - 0x0000)
struct FSQEXSEADAutoSeControlTrackKey final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseGlobalEnable : 1;                              // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGlobalEnable : 1;                                 // 0x0004(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseEnable : 1;                                    // 0x0004(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnable : 1;                                       // 0x0004(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseVolumeScale : 1;                               // 0x0004(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumeScale;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseDisableAnimNotifyPlayAutoSE : 1;               // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableAnimNotifyPlayAutoSE : 1;                  // 0x000C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseEnableForceOverridePhysicalSurface : 1;        // 0x000C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableForceOverridePhysicalSurface : 1;           // 0x000C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EPhysicalSurface                              PhysicalSurfaceForForceOverride;                   // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAssumeFootMotionlessMoveLength;                // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AssumeFootMotionlessMoveLength;                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeControlTrackKey) == 0x000004, "Wrong alignment on FSQEXSEADAutoSeControlTrackKey");
static_assert(sizeof(FSQEXSEADAutoSeControlTrackKey) == 0x000014, "Wrong size on FSQEXSEADAutoSeControlTrackKey");
static_assert(offsetof(FSQEXSEADAutoSeControlTrackKey, Time) == 0x000000, "Member 'FSQEXSEADAutoSeControlTrackKey::Time' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeControlTrackKey, VolumeScale) == 0x000008, "Member 'FSQEXSEADAutoSeControlTrackKey::VolumeScale' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeControlTrackKey, PhysicalSurfaceForForceOverride) == 0x00000D, "Member 'FSQEXSEADAutoSeControlTrackKey::PhysicalSurfaceForForceOverride' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeControlTrackKey, bUseAssumeFootMotionlessMoveLength) == 0x00000E, "Member 'FSQEXSEADAutoSeControlTrackKey::bUseAssumeFootMotionlessMoveLength' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeControlTrackKey, AssumeFootMotionlessMoveLength) == 0x000010, "Member 'FSQEXSEADAutoSeControlTrackKey::AssumeFootMotionlessMoveLength' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADLayoutInfo
// 0x0040 (0x0040 - 0x0000)
struct FSQEXSEADLayoutInfo final
{
public:
	ESQEXSEADLayoutType                           LayoutType;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InnerRadius;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterRadius;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionLPF;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionVolume;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        LayoutPointLocations;                              // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADLayoutInfo) == 0x000008, "Wrong alignment on FSQEXSEADLayoutInfo");
static_assert(sizeof(FSQEXSEADLayoutInfo) == 0x000040, "Wrong size on FSQEXSEADLayoutInfo");
static_assert(offsetof(FSQEXSEADLayoutInfo, LayoutType) == 0x000000, "Member 'FSQEXSEADLayoutInfo::LayoutType' has a wrong offset!");
static_assert(offsetof(FSQEXSEADLayoutInfo, InnerRadius) == 0x000004, "Member 'FSQEXSEADLayoutInfo::InnerRadius' has a wrong offset!");
static_assert(offsetof(FSQEXSEADLayoutInfo, OuterRadius) == 0x000008, "Member 'FSQEXSEADLayoutInfo::OuterRadius' has a wrong offset!");
static_assert(offsetof(FSQEXSEADLayoutInfo, OcclusionLPF) == 0x00000C, "Member 'FSQEXSEADLayoutInfo::OcclusionLPF' has a wrong offset!");
static_assert(offsetof(FSQEXSEADLayoutInfo, OcclusionVolume) == 0x000010, "Member 'FSQEXSEADLayoutInfo::OcclusionVolume' has a wrong offset!");
static_assert(offsetof(FSQEXSEADLayoutInfo, LayoutPointLocations) == 0x000018, "Member 'FSQEXSEADLayoutInfo::LayoutPointLocations' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADCategoryVolumeKeyTrackKey
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSQEXSEADCategoryVolumeKeyTrackKey final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Category;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Layer;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADCategoryVolumeKeyTrackKey) == 0x000008, "Wrong alignment on FSQEXSEADCategoryVolumeKeyTrackKey");
static_assert(sizeof(FSQEXSEADCategoryVolumeKeyTrackKey) == 0x000020, "Wrong size on FSQEXSEADCategoryVolumeKeyTrackKey");
static_assert(offsetof(FSQEXSEADCategoryVolumeKeyTrackKey, Time) == 0x000000, "Member 'FSQEXSEADCategoryVolumeKeyTrackKey::Time' has a wrong offset!");
static_assert(offsetof(FSQEXSEADCategoryVolumeKeyTrackKey, Category) == 0x000008, "Member 'FSQEXSEADCategoryVolumeKeyTrackKey::Category' has a wrong offset!");
static_assert(offsetof(FSQEXSEADCategoryVolumeKeyTrackKey, Layer) == 0x000010, "Member 'FSQEXSEADCategoryVolumeKeyTrackKey::Layer' has a wrong offset!");
static_assert(offsetof(FSQEXSEADCategoryVolumeKeyTrackKey, Volume) == 0x000014, "Member 'FSQEXSEADCategoryVolumeKeyTrackKey::Volume' has a wrong offset!");
static_assert(offsetof(FSQEXSEADCategoryVolumeKeyTrackKey, FadeTime) == 0x000018, "Member 'FSQEXSEADCategoryVolumeKeyTrackKey::FadeTime' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADEventTrackKey
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSQEXSEADEventTrackKey final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EventName;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADEventTrackKey) == 0x000008, "Wrong alignment on FSQEXSEADEventTrackKey");
static_assert(sizeof(FSQEXSEADEventTrackKey) == 0x000010, "Wrong size on FSQEXSEADEventTrackKey");
static_assert(offsetof(FSQEXSEADEventTrackKey, Time) == 0x000000, "Member 'FSQEXSEADEventTrackKey::Time' has a wrong offset!");
static_assert(offsetof(FSQEXSEADEventTrackKey, EventName) == 0x000008, "Member 'FSQEXSEADEventTrackKey::EventName' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADSoundTrackKey
// 0x0028 (0x0028 - 0x0000)
struct FSQEXSEADSoundTrackKey final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Sound;                                             // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AssetPathName;                                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADSoundTrackKey) == 0x000008, "Wrong alignment on FSQEXSEADSoundTrackKey");
static_assert(sizeof(FSQEXSEADSoundTrackKey) == 0x000028, "Wrong size on FSQEXSEADSoundTrackKey");
static_assert(offsetof(FSQEXSEADSoundTrackKey, Time) == 0x000000, "Member 'FSQEXSEADSoundTrackKey::Time' has a wrong offset!");
static_assert(offsetof(FSQEXSEADSoundTrackKey, Volume) == 0x000004, "Member 'FSQEXSEADSoundTrackKey::Volume' has a wrong offset!");
static_assert(offsetof(FSQEXSEADSoundTrackKey, Pitch) == 0x000008, "Member 'FSQEXSEADSoundTrackKey::Pitch' has a wrong offset!");
static_assert(offsetof(FSQEXSEADSoundTrackKey, Duration) == 0x00000C, "Member 'FSQEXSEADSoundTrackKey::Duration' has a wrong offset!");
static_assert(offsetof(FSQEXSEADSoundTrackKey, FadeOutTime) == 0x000010, "Member 'FSQEXSEADSoundTrackKey::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FSQEXSEADSoundTrackKey, Sound) == 0x000018, "Member 'FSQEXSEADSoundTrackKey::Sound' has a wrong offset!");
static_assert(offsetof(FSQEXSEADSoundTrackKey, AssetPathName) == 0x000020, "Member 'FSQEXSEADSoundTrackKey::AssetPathName' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADLayoutObstructionInfo
// 0x0028 (0x0028 - 0x0000)
struct FSQEXSEADLayoutObstructionInfo final
{
public:
	ESQEXSEADLayoutObstructionType                ObstructionType;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        ObstructionPointLocations;                         // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AStaticMeshActor*>               LinkedMeshActorList;                               // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADLayoutObstructionInfo) == 0x000008, "Wrong alignment on FSQEXSEADLayoutObstructionInfo");
static_assert(sizeof(FSQEXSEADLayoutObstructionInfo) == 0x000028, "Wrong size on FSQEXSEADLayoutObstructionInfo");
static_assert(offsetof(FSQEXSEADLayoutObstructionInfo, ObstructionType) == 0x000000, "Member 'FSQEXSEADLayoutObstructionInfo::ObstructionType' has a wrong offset!");
static_assert(offsetof(FSQEXSEADLayoutObstructionInfo, ObstructionPointLocations) == 0x000008, "Member 'FSQEXSEADLayoutObstructionInfo::ObstructionPointLocations' has a wrong offset!");
static_assert(offsetof(FSQEXSEADLayoutObstructionInfo, LinkedMeshActorList) == 0x000018, "Member 'FSQEXSEADLayoutObstructionInfo::LinkedMeshActorList' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADSystemPerformanceInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSQEXSEADSystemPerformanceInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADSystemPerformanceInfo) == 0x000008, "Wrong alignment on FSQEXSEADSystemPerformanceInfo");
static_assert(sizeof(FSQEXSEADSystemPerformanceInfo) == 0x000020, "Wrong size on FSQEXSEADSystemPerformanceInfo");

// ScriptStruct SQEXSEAD.SQEXSEADVolumeInfo
// 0x0001 (0x0001 - 0x0000)
struct FSQEXSEADVolumeInfo final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADVolumeInfo) == 0x000001, "Wrong alignment on FSQEXSEADVolumeInfo");
static_assert(sizeof(FSQEXSEADVolumeInfo) == 0x000001, "Wrong size on FSQEXSEADVolumeInfo");

}

