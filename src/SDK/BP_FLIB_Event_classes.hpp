#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FLIB_Event

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "JackGame_structs.hpp"
#include "ENUM_ScenarioNum_structs.hpp"


namespace SDK
{

// DynamicClass BP_FLIB_Event.BP_FLIB_Event_C
// 0x0000 (0x0038 - 0x0038)
class UBP_FLIB_Event_C final : public UBlueprintFunctionLibrary
{
public:
	static void AddHeroTokugiForAwakening(class FName bpp__AddHeroTokugi__pf, class FName bpp__PoweupTokugiName__pf, class UObject* bpp____WorldContext__pf);
	static void AppendZenkeiInitializeWaitNPC(TArray<class AActor*>* bpp__ZenkeiCSInitializeWaitVolume__pf, class UObject* bpp____WorldContext__pf, TArray<class AJackScheduledNPC*>* bpp__InitializeWaitNPC__pf);
	static void B030_40_ClearCheck(class UObject* bpp____WorldContext__pf);
	static void CallDiscardItem_Integrate(const struct FJackLDT_ItemTable& bpp__ItemID__pf, int32 bpp__SubCount__pf, class UObject* bpp____WorldContext__pf, bool* bpp__Out__pf);
	static void CallHasAllOrbs(class UObject* bpp____WorldContext__pf, bool* bpp__Out__pf);
	static void CheckM01Fukkou(class UObject* bpp____WorldContext__pf, bool* bpp__Fukkou__pf);
	static void CheckMapPartnerTuijyu(class UObject* bpp____WorldContext__pf, class FName* bpp__UseMapID__pf);
	static void ClearSaveSettings(class UObject* bpp____WorldContext__pf);
	static void ConvertSenaLongHair(class FName bpp__CoordinateID__pf, class UObject* bpp____WorldContext__pf, class FName* bpp__LongHairCoordinate__pf);
	static void ConvertSenaShortHair(class FName bpp__CoordinateID__pf, class UObject* bpp____WorldContext__pf, class FName* bpp__ShortHairCoordinate__pf);
	static void Convert_Rura(class FName bpp__From__pf, class FName bpp__To__pf, class UObject* bpp____WorldContext__pf);
	static void DisableCS_AfterWeatherEffect(class UObject* bpp____WorldContext__pf);
	static void DisablePartyTalk(const struct FJackLDT_GameFlagDataCutScene& bpp__CutSceneFlag__pf, class UObject* bpp____WorldContext__pf);
	static void EnablePartyTalk(class UObject* bpp____WorldContext__pf);
	static void FriendPartyInSetting(EJackCharacter bpp__Character__pf, const struct FJackLDT_FriendCharacterPreset& bpp__Preset__pf, class UObject* bpp____WorldContext__pf);
	static void GetCutSceneFlag(const struct FJackLDT_GameFlagDataCutScene& bpp__CutScene__pf, class UObject* bpp____WorldContext__pf, bool* bpp__Flag__pf);
	static void GetCutSceneFlagCheckState(TArray<struct FJackLDT_GameFlagDataCutScene>* bpp__CutSceneFlag__pf, bool bpp__AndCheck__pf, bool bpp__FlagDefault__pf, class UObject* bpp____WorldContext__pf, bool* bpp__Flag__pf);
	static void GetDirectBranchDefaultIDs(class FName bpp__UseMapID__pf, class UObject* bpp____WorldContext__pf, TArray<class FName>* bpp__NewParam__pf);
	static void GetEmaExceptionBehaviorBranchID(class UObject* bpp____WorldContext__pf, class FName* bpp__ID__pf);
	static void GetFriendPartyBehaviorBranchID(EJackCharacter bpp__InID__pf, class FName bpp__UseMapID__pf, class UObject* bpp____WorldContext__pf, class FName* bpp__ID__pf);
	static void GetIssyoPartner(class UObject* bpp____WorldContext__pf, int32* bpp__Partner__pf);
	static void GetIssyoPartnerCharacterType(class UObject* bpp____WorldContext__pf, EJackCharacter* bpp__PartnerCharacterType__pf);
	static void GetItemIDFromDataTable(const struct FJackDataTableItem_EventGet& bpp__DataTable__pf, class UObject* bpp____WorldContext__pf, struct FJackLDT_ItemTable* bpp__ItemID__pf);
	static void GetKamyuExceptionBehaviorBranchID(class UObject* bpp____WorldContext__pf, class FName* bpp__NewParam__pf);
	static void GetNerusenBattleTurnCountSrc(const struct FJackLDT_EventBattle& bpp__ID__pf, class UObject* bpp____WorldContext__pf, int32* bpp__Point__pf);
	static void GetOmoideCsID(class UObject* bpp____WorldContext__pf, class FString* bpp__OmoideCsID__pf, bool* bpp__OmoideCs__pf);
	static void GetOrbsAllGetFlag(class UObject* bpp____WorldContext__pf, struct FJackLDT_GameFlagDataScenario* bpp__Flag__pf);
	static void GetPafuPafuRandomValue(class UObject* bpp____WorldContext__pf, TArray<class FName>* bpp__TextID__pf, class FName* bpp__SExTrackName__pfT);
	static void GetPartnerTsuijyuBehaviorBranchID(EJackCharacter bpp__InID__pf, class FName bpp__UseMapID__pf, class UObject* bpp____WorldContext__pf, class FName* bpp__ID__pf);
	static void GetPartyCoordinate(EJackCharacter bpp__Character__pf, class UObject* bpp____WorldContext__pf, class FName* bpp__Coordinate__pf);
	static void GetPlayerWeaponInfo(class UObject* bpp____WorldContext__pf, class FName* bpp__MainWeaponItemID__pf, class FName* bpp__MainWeaponSocket__pf, class FName* bpp__SubWeaponItemID__pf, class FName* bpp__SubWeaponSocket__pf);
	static void GetProgressEventState(const struct FJackLDT_GameFlagDataGameProgress& bpp__NewParam__pf, class UObject* bpp____WorldContext__pf, int32* bpp__State__pf);
	static void GetProgressFlag(const struct FJackLDT_GameFlagDataGameProgress& bpp__GameProgress__pf, class UObject* bpp____WorldContext__pf, bool* bpp__Flag__pf);
	static void GetProgressScenarioFlags(class UObject* bpp____WorldContext__pf, TArray<class FName>* bpp__OutxFlags__pfT);
	static void GetProgressScenarioNum(class UObject* bpp____WorldContext__pf, class FString* bpp__ScenarioNum__pf);
	static void GetScenarioCount(const struct FJackLDT_GameFlagDataScenario& bpp__Scenario__pf, class UObject* bpp____WorldContext__pf, int32* bpp__Count__pf);
	static void GetScenarioFlag(const struct FJackLDT_GameFlagDataScenario& bpp__Scenario__pf, class UObject* bpp____WorldContext__pf, bool* bpp__Flag__pf);
	static void GetScenarioFlagCheckState(TArray<struct FJackLDT_GameFlagDataScenario>* bpp__ScenarioFlag__pf, bool bpp__AndCheck__pf, bool bpp__FlagDefault__pf, class AActor* bpp__CheckActor__pf, class UObject* bpp____WorldContext__pf, bool* bpp__Flag__pf);
	static void GetScenarioFlagFromProgressNum(const class FString& bpp__ProgressNum__pf__const, class UObject* bpp____WorldContext__pf, class FName* bpp__Flag__pf);
	static void GetSilviaPartyBehaviorBranchID(EJackCharacter bpp__InID__pf, bool bpp__TownMap__pf, class UObject* bpp____WorldContext__pf, class FName* bpp__ID__pf);
	static void Is2ndScenario(class UObject* bpp____WorldContext__pf, bool* bpp__2ndScenario__pf);
	static void IsCutSceneFlagCheckActivate(TArray<struct FJackLDT_GameFlagDataCutScene>* bpp__ActivateCutSceneFlag__pf, bool bpp__ActivateAndCheck__pf, TArray<struct FJackLDT_GameFlagDataCutScene>* bpp__DeactivateCutSceneFlag__pf, bool bpp__DeactivateAndCheck__pf, class UObject* bpp____WorldContext__pf, bool* bpp__Enable__pf);
	static void IsHoukaiClearSky(class UObject* bpp____WorldContext__pf, bool* bpp__HoukaiClearSky__pf);
	static void IsProgressScenarioNum(ENUM_ScenarioNum bpp__ScenarioNum__pf, class UObject* bpp____WorldContext__pf, bool* bpp__true__pf);
	static void IsScenarioFlagCheckActivate(TArray<struct FJackLDT_GameFlagDataScenario>* bpp__ActivateScenarioFlag__pf, bool bpp__ActivateAndCheck__pf, TArray<struct FJackLDT_GameFlagDataScenario>* bpp__DeactivateScenarioFlag__pf, bool bpp__DeactivateAndCheck__pf, class AActor* bpp__CheckActor__pf, class UObject* bpp____WorldContext__pf, bool* bpp__bEnable__pf);
	static void IsSScenario(class UObject* bpp____WorldContext__pf, bool* bpp__SScenario__pf);
	static void M01Reconstruction(class UObject* bpp____WorldContext__pf);
	static void OrbCompleteCheck(class UObject* bpp____WorldContext__pf);
	static void PowerAwakeningFromElder(class UObject* bpp____WorldContext__pf);
	static void ResetProgressScenarioNum(ENUM_ScenarioNum bpp__ScenarioNum__pf, class UObject* bpp____WorldContext__pf);
	static void ResetWeatherForEventBattleLose(class UObject* bpp____WorldContext__pf);
	static void SetAlmostCutsceneFlagForOmoide(class UObject* bpp____WorldContext__pf);
	static void SetBehaviorDirectBranch(class FName bpp__InBranch__pf, class UObject* bpp____WorldContext__pf);
	static void SetBehaviorDirectBranchB040(TArray<class FName>* bpp__InBranches__pf, class UObject* bpp____WorldContext__pf);
	static void SetBehaviorDirectBranchCommon(class UObject* bpp____WorldContext__pf);
	static void SetBehaviorDirectBranchs(TArray<class FName>* bpp__InBranches__pf, class UObject* bpp____WorldContext__pf);
	static void SetCsBranch_2DMovie(class AMatineeActor* bpp__Matinee__pf, class UObject* bpp____WorldContext__pf);
	static void SetCsBranch_A_030_CS_083(class AMatineeActor* bpp__Matinee__pf, class UObject* bpp____WorldContext__pf);
	static void SetCsBranch_A_030_CS_085(class AMatineeActor* bpp__Matinee__pf, class UObject* bpp____WorldContext__pf);
	static void SetCsBranch_A_030_CS_087(class AMatineeActor* bpp__Matinee__pf, class UObject* bpp____WorldContext__pf);
	static void SetCsBranch_A_050_CS_040(class AMatineeActor* bpp__Matinee__pf, class UObject* bpp____WorldContext__pf);
	static void SetCsBranch_A_050_CS_100(class AMatineeActor* bpp__Matinee__pf, class UObject* bpp____WorldContext__pf);
	static void SetCsBranch_A_060_CS_100(class AMatineeActor* bpp__Matinee__pf, class UObject* bpp____WorldContext__pf);
	static void SetCsBranch_A_070_CS_050(class AMatineeActor* bpp__Matinee__pf, class UObject* bpp____WorldContext__pf);
	static void SetCsBranch_A_150_CS_050(class AMatineeActor* bpp__Matinee__pf, class UObject* bpp____WorldContext__pf);
	static void SetCsBranch_B_040_CS_150(class AMatineeActor* bpp__Matinee__pf, class UObject* bpp____WorldContext__pf);
	static void SetCsBranch_B_060_CS_005(class AMatineeActor* bpp__Matinee__pf, class UObject* bpp____WorldContext__pf);
	static void SetCsBranch_B_060_CS_060(class AMatineeActor* bpp__Matinee__pf, class UObject* bpp____WorldContext__pf);
	static void SetCsBranch_B_070_CS_060(class AMatineeActor* bpp__Matinee__pf, class UObject* bpp____WorldContext__pf);
	static void SetCsBranch_B_080_CS_080(class AMatineeActor* bpp__Matinee__pf, class UObject* bpp____WorldContext__pf);
	static void SetCsBranch_BreathTrackSetting(class AMatineeActor* bpp__Matinee__pf, EJackCharacter bpp__Character__pf, const class FString& bpp__GroupName__pf__const, const class FString& bpp__TrackName__pf__const, class UObject* bpp____WorldContext__pf);
	static void SetCsBranch_C_020_CS_010(class AMatineeActor* bpp__Matinee__pf, class UObject* bpp____WorldContext__pf);
	static void SetCsBranch_P_080_CS_010(class AMatineeActor* bpp__Matinee__pf, class UObject* bpp____WorldContext__pf);
	static void SetCsBranch_S_040_CS_040(class AMatineeActor* bpp__Matinee__pf, class UObject* bpp____WorldContext__pf);
	static void SetCsBranch_S_040_CS_100(class AMatineeActor* bpp__Matinee__pf, class UObject* bpp____WorldContext__pf);
	static void SetCsBranchBGM_B_080_CS_210(class AMatineeActor* bpp__Matinee__pf, class UObject* bpp____WorldContext__pf);
	static void SetCsCoordinate(class AJackCharacter* bpp__JackCharacter__pf, class FName bpp__CSID__pf, EJackCharacter bpp__Character__pf, bool bpp__Omoide__pf, class UObject* bpp____WorldContext__pf);
	static void SetCSDefaultCoordinateEX(class AJackCharacter* bpp__JackCharacter__pf, class FName bpp__CSxID__pfT, EJackCharacter bpp__Character__pf, class UObject* bpp____WorldContext__pf, bool* bpp__CoordinateChanged__pf);
	static void SetCutSceneFlag(const struct FJackLDT_GameFlagDataCutScene& bpp__CutScene__pf, bool bpp__Flag__pf, class UObject* bpp____WorldContext__pf);
	static void SetIssyoPartyTalkFlag(int32 bpp__Progress__pf, class UObject* bpp____WorldContext__pf);
	static void SetOmoidePlayerWeapon(class AJackCharacter* bpp__CSxPlayer__pfT, class FName bpp__CSxID__pfT, class UObject* bpp____WorldContext__pf);
	static void SetProgressEventState(const struct FJackLDT_GameFlagDataGameProgress& bpp__EventState__pf, int32 bpp__State__pf, class UObject* bpp____WorldContext__pf);
	static void SetProgressFlag(const struct FJackLDT_GameFlagDataGameProgress& bpp__GameProgress__pf, bool bpp__Flag__pf, class UObject* bpp____WorldContext__pf);
	static void SetProgressScenarioNum(ENUM_ScenarioNum bpp__ScenarioNum__pf, class UObject* bpp____WorldContext__pf);
	static void SetRuraSettingsForAwakening(const class FString& bpp__RuraID__pf__const, class UObject* bpp____WorldContext__pf);
	static void SetSakusenPreset(const struct FJackLDT_FriendCharacterPreset& bpp__Preset__pf, class UObject* bpp____WorldContext__pf);
	static void SetScenarioClear(ENUM_ScenarioNum bpp__ScenarioNum__pf, class UObject* bpp____WorldContext__pf);
	static void SetScenarioCount(const struct FJackLDT_GameFlagDataScenario& bpp__Scenario__pf, int32 bpp__Count__pf, class UObject* bpp____WorldContext__pf);
	static void SetScenarioFlag(const struct FJackLDT_GameFlagDataScenario& bpp__Scenario__pf, bool bpp__Flag__pf, class UObject* bpp____WorldContext__pf);
	static void SetScenarioFlagForS020(const struct FJackLDT_GameFlagDataScenario& bpp__Scenario__pf, bool bpp__Flag__pf, class UObject* bpp____WorldContext__pf);
	static void SetScenarioInitialzie(class UObject* bpp____WorldContext__pf);
	static void SetSenaCoordinate(class AJackCharacter* bpp__JackCharacter__pf, class FName bpp__CoordinateID__pf, class UObject* bpp____WorldContext__pf, bool* bpp__CoordinateChanged__pf);
	static void SetSenaHairStyle(EJackSenaHairStyle bpp__NewHairStyle__pf, class UObject* bpp____WorldContext__pf);
	static void SetTempWeatherForEventBattleLose(class UObject* bpp____WorldContext__pf);
	static void SetWhalePowerUp(class UObject* bpp____WorldContext__pf);
	static void Set_B_Scenario(class UObject* bpp____WorldContext__pf);
	static void Set_C_Scenario(class UObject* bpp____WorldContext__pf);
	static void Set_S_Scenario(class UObject* bpp____WorldContext__pf);
	static void SetZenkeiNpcLoadReductionHiddenOwnerDistance(TArray<class AJackScheduledNPC*>* bpp__NPC__pf, float bpp__Distance__pf, class UObject* bpp____WorldContext__pf);
	static void SilviaGuestSetupFromTitle(class UObject* bpp____WorldContext__pf);
	static void UpdateScenarioFlagIntegrateProcess(const struct FJackLDT_GameFlagDataScenario& bpp__ScenarioFlag__pf, class UObject* bpp____WorldContext__pf);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BP_FLIB_Event_C">();
	}
	static class UBP_FLIB_Event_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_FLIB_Event_C>();
	}
};
static_assert(alignof(UBP_FLIB_Event_C) == 0x000008, "Wrong alignment on UBP_FLIB_Event_C");
static_assert(sizeof(UBP_FLIB_Event_C) == 0x000038, "Wrong size on UBP_FLIB_Event_C");

}

