#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CriWareRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "MovieScene_classes.hpp"
#include "CriWareRuntime_structs.hpp"


namespace SDK
{

// Class CriWareRuntime.AtomAsrRack
// 0x0008 (0x0040 - 0x0038)
class UAtomAsrRack final : public UObject
{
public:
	int32                                         RackId;                                            // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAtomAsrRack* GetAsrRack(int32 AsrRackId);
	static class UAtomAsrRack* GetDefaultAsrRack();

	void ApplyDspBusSnapshot(const class FString& SnapshotName, int32 Milliseconds);
	void AttachDspBusSetting(const class FString& SettingName);
	void DetachDspBusSetting();
	void SetBusSendLevelByName(const class FString& SourceBusName, const class FString& DestBusName, float Level);
	void SetBusVolumeByName(const class FString& BusName, float Volume);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomAsrRack">();
	}
	static class UAtomAsrRack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomAsrRack>();
	}
};
static_assert(alignof(UAtomAsrRack) == 0x000008, "Wrong alignment on UAtomAsrRack");
static_assert(sizeof(UAtomAsrRack) == 0x000040, "Wrong size on UAtomAsrRack");
static_assert(offsetof(UAtomAsrRack, RackId) == 0x000038, "Member 'UAtomAsrRack::RackId' has a wrong offset!");

// Class CriWareRuntime.AtomCategory
// 0x0000 (0x0038 - 0x0038)
class UAtomCategory final : public UBlueprintFunctionLibrary
{
public:
	static float GetVolumeByName(const class FString& CategoryName);
	static bool IsPausedByName(const class FString& CategoryName);
	static void PauseByName(const class FString& CategoryName, bool bPause);
	static void SetAisacControlByName(const class FString& CategoryName, const class FString& AisacName, float Value);
	static void SetVolumeByName(const class FString& CategoryName, float Volume);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomCategory">();
	}
	static class UAtomCategory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomCategory>();
	}
};
static_assert(alignof(UAtomCategory) == 0x000008, "Wrong alignment on UAtomCategory");
static_assert(sizeof(UAtomCategory) == 0x000038, "Wrong size on UAtomCategory");

// Class CriWareRuntime.AtomComponent
// 0x0CB0 (0x0F90 - 0x02E0)
class UAtomComponent final : public USceneComponent
{
public:
	class USoundAtomCue*                          Sound;                                             // 0x02E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAutoDestroy : 1;                                  // 0x02E8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2E9[0x3];                                      // 0x02E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bPersistAcrossLevelTransition;                     // 0x02EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ED[0x3];                                      // 0x02ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bStopWhenOwnerDestroyed : 1;                       // 0x02F0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsUISound : 1;                                    // 0x02F0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2F1[0x3];                                      // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultVolume;                                     // 0x02F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableMultipleSoundPlayback;                      // 0x02F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomSoundObject*                       DefaultSoundObject;                                // 0x0300(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultBlockIndex;                                 // 0x0308(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAtomAisacControlParam>         DefaultAisacControl;                               // 0x0310(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAtomSelectorParam>             DefaultSelectorLabel;                              // 0x0320(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnAudioFinished;                                   // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_340[0x70];                                     // 0x0340(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bOverrideAttenuation : 1;                          // 0x03B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundAttenuationSettings              AttenuationOverrides;                              // 0x03C0(0x02C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_680[0x910];                                    // 0x0680(0x0910)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetSequencePosition();
	EAtomComponentStatus GetStatus();
	float GetTime();
	bool IsPaused();
	bool IsPlaying();
	void OnAudioFinished__DelegateSignature();
	void Pause(bool bPause);
	void Play(float StartTime);
	void SetAisacByName(const class FString& ControlName, float ControlValue);
	void SetBusSendLevel(int32 BusId, float Level);
	void SetBusSendLevelByName(const class FString& BusName, float Level);
	void SetBusSendLevelOffset(int32 BusId, float LevelOffset);
	void SetBusSendLevelOffsetByName(const class FString& BusName, float LevelOffset);
	void SetNextBlockIndex(int32 BlockIndex);
	void SetPitch(float Pitch);
	void SetPitchMultiplier(float NewPitchMultiplier);
	void SetSelectorLabel(const class FString& Selector, const class FString& Label);
	void SetSound(class USoundAtomCue* NewSound);
	void SetVolume(float Volume);
	void Stop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomComponent">();
	}
	static class UAtomComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomComponent>();
	}
};
static_assert(alignof(UAtomComponent) == 0x000008, "Wrong alignment on UAtomComponent");
static_assert(sizeof(UAtomComponent) == 0x000F90, "Wrong size on UAtomComponent");
static_assert(offsetof(UAtomComponent, Sound) == 0x0002E0, "Member 'UAtomComponent::Sound' has a wrong offset!");
static_assert(offsetof(UAtomComponent, bPersistAcrossLevelTransition) == 0x0002EC, "Member 'UAtomComponent::bPersistAcrossLevelTransition' has a wrong offset!");
static_assert(offsetof(UAtomComponent, DefaultVolume) == 0x0002F4, "Member 'UAtomComponent::DefaultVolume' has a wrong offset!");
static_assert(offsetof(UAtomComponent, bEnableMultipleSoundPlayback) == 0x0002F8, "Member 'UAtomComponent::bEnableMultipleSoundPlayback' has a wrong offset!");
static_assert(offsetof(UAtomComponent, DefaultSoundObject) == 0x000300, "Member 'UAtomComponent::DefaultSoundObject' has a wrong offset!");
static_assert(offsetof(UAtomComponent, DefaultBlockIndex) == 0x000308, "Member 'UAtomComponent::DefaultBlockIndex' has a wrong offset!");
static_assert(offsetof(UAtomComponent, DefaultAisacControl) == 0x000310, "Member 'UAtomComponent::DefaultAisacControl' has a wrong offset!");
static_assert(offsetof(UAtomComponent, DefaultSelectorLabel) == 0x000320, "Member 'UAtomComponent::DefaultSelectorLabel' has a wrong offset!");
static_assert(offsetof(UAtomComponent, OnAudioFinished) == 0x000330, "Member 'UAtomComponent::OnAudioFinished' has a wrong offset!");
static_assert(offsetof(UAtomComponent, AttenuationSettings) == 0x0003B8, "Member 'UAtomComponent::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(UAtomComponent, AttenuationOverrides) == 0x0003C0, "Member 'UAtomComponent::AttenuationOverrides' has a wrong offset!");

// Class CriWareRuntime.AtomListenerFocusPoint
// 0x0020 (0x0300 - 0x02E0)
class UAtomListenerFocusPoint final : public USceneComponent
{
public:
	float                                         DistanceFocusLevel;                                // 0x02E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionFocusLevel;                               // 0x02E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E8[0x18];                                     // 0x02E8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomListenerFocusPoint">();
	}
	static class UAtomListenerFocusPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomListenerFocusPoint>();
	}
};
static_assert(alignof(UAtomListenerFocusPoint) == 0x000008, "Wrong alignment on UAtomListenerFocusPoint");
static_assert(sizeof(UAtomListenerFocusPoint) == 0x000300, "Wrong size on UAtomListenerFocusPoint");
static_assert(offsetof(UAtomListenerFocusPoint, DistanceFocusLevel) == 0x0002E0, "Member 'UAtomListenerFocusPoint::DistanceFocusLevel' has a wrong offset!");
static_assert(offsetof(UAtomListenerFocusPoint, DirectionFocusLevel) == 0x0002E4, "Member 'UAtomListenerFocusPoint::DirectionFocusLevel' has a wrong offset!");

// Class CriWareRuntime.AtomParameter
// 0x0010 (0x03A8 - 0x0398)
class AAtomParameter final : public AActor
{
public:
	uint8                                         Pad_398[0x10];                                     // 0x0398(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomParameter">();
	}
	static class AAtomParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAtomParameter>();
	}
};
static_assert(alignof(AAtomParameter) == 0x000008, "Wrong alignment on AAtomParameter");
static_assert(sizeof(AAtomParameter) == 0x0003A8, "Wrong size on AAtomParameter");

// Class CriWareRuntime.AtomSound
// 0x0008 (0x03A0 - 0x0398)
class AAtomSound final : public AActor
{
public:
	class UAtomComponent*                         AtomComponent;                                     // 0x0398(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomSound">();
	}
	static class AAtomSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAtomSound>();
	}
};
static_assert(alignof(AAtomSound) == 0x000008, "Wrong alignment on AAtomSound");
static_assert(sizeof(AAtomSound) == 0x0003A0, "Wrong size on AAtomSound");
static_assert(offsetof(AAtomSound, AtomComponent) == 0x000398, "Member 'AAtomSound::AtomComponent' has a wrong offset!");

// Class CriWareRuntime.AtomSoundData
// 0x0010 (0x03A8 - 0x0398)
class AAtomSoundData final : public AActor
{
public:
	class USoundAtomCueSheet*                     CueSheet;                                          // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A0[0x8];                                      // 0x03A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomSoundData">();
	}
	static class AAtomSoundData* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAtomSoundData>();
	}
};
static_assert(alignof(AAtomSoundData) == 0x000008, "Wrong alignment on AAtomSoundData");
static_assert(sizeof(AAtomSoundData) == 0x0003A8, "Wrong size on AAtomSoundData");
static_assert(offsetof(AAtomSoundData, CueSheet) == 0x000398, "Member 'AAtomSoundData::CueSheet' has a wrong offset!");

// Class CriWareRuntime.AtomSoundObject
// 0x0010 (0x0050 - 0x0040)
class UAtomSoundObject final : public UDataAsset
{
public:
	bool                                          EnableVoiceLimitScope;                             // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableCategoryCueLimitScope;                       // 0x0041(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0xE];                                       // 0x0042(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomSoundObject">();
	}
	static class UAtomSoundObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomSoundObject>();
	}
};
static_assert(alignof(UAtomSoundObject) == 0x000008, "Wrong alignment on UAtomSoundObject");
static_assert(sizeof(UAtomSoundObject) == 0x000050, "Wrong size on UAtomSoundObject");
static_assert(offsetof(UAtomSoundObject, EnableVoiceLimitScope) == 0x000040, "Member 'UAtomSoundObject::EnableVoiceLimitScope' has a wrong offset!");
static_assert(offsetof(UAtomSoundObject, EnableCategoryCueLimitScope) == 0x000041, "Member 'UAtomSoundObject::EnableCategoryCueLimitScope' has a wrong offset!");

// Class CriWareRuntime.AtomStatics
// 0x0000 (0x0038 - 0x0038)
class UAtomStatics final : public UBlueprintFunctionLibrary
{
public:
	static void PauseAudioOutput(bool bPause);
	static void PlaySoundAtLocation(class UObject* WorldContextObject, class USoundAtomCue* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings);
	static class UAtomComponent* PlaySoundAttached(class USoundAtomCue* Sound, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	static class UAtomComponent* SpawnSound2D(const class UObject* WorldContextObject, class USoundAtomCue* Sound, float PitchMultiplier, float StartTime, bool bPersistAcrossLevelTransition, bool bAutoDestroy);
	static class UAtomComponent* SpawnSoundAtLocation(const class UObject* WorldContextObject, class USoundAtomCue* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy);
	static class UAtomComponent* SpawnSoundAttached(class USoundAtomCue* Sound, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomStatics">();
	}
	static class UAtomStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomStatics>();
	}
};
static_assert(alignof(UAtomStatics) == 0x000008, "Wrong alignment on UAtomStatics");
static_assert(sizeof(UAtomStatics) == 0x000038, "Wrong size on UAtomStatics");

// Class CriWareRuntime.AtomTriggerTableFunctionLibrary
// 0x0000 (0x0038 - 0x0038)
class UAtomTriggerTableFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool GetDataTableRowFromName(class UDataTable* Table, class FName RowName, struct FAtomTriggerRow* OutRow);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomTriggerTableFunctionLibrary">();
	}
	static class UAtomTriggerTableFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomTriggerTableFunctionLibrary>();
	}
};
static_assert(alignof(UAtomTriggerTableFunctionLibrary) == 0x000008, "Wrong alignment on UAtomTriggerTableFunctionLibrary");
static_assert(sizeof(UAtomTriggerTableFunctionLibrary) == 0x000038, "Wrong size on UAtomTriggerTableFunctionLibrary");

// Class CriWareRuntime.CriFsLoader
// 0x0008 (0x03A0 - 0x0398)
class ACriFsLoader final : public AActor
{
public:
	class UCriFsLoaderComponent*                  LoaderComponent;                                   // 0x0398(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CriFsLoader">();
	}
	static class ACriFsLoader* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACriFsLoader>();
	}
};
static_assert(alignof(ACriFsLoader) == 0x000008, "Wrong alignment on ACriFsLoader");
static_assert(sizeof(ACriFsLoader) == 0x0003A0, "Wrong size on ACriFsLoader");
static_assert(offsetof(ACriFsLoader, LoaderComponent) == 0x000398, "Member 'ACriFsLoader::LoaderComponent' has a wrong offset!");

// Class CriWareRuntime.CriFsLoaderComponent
// 0x0080 (0x0360 - 0x02E0)
class UCriFsLoaderComponent final : public USceneComponent
{
public:
	class FString                                 FilePath;                                          // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnLoadCompleted;                                   // 0x02F0(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnLoadError;                                       // 0x0300(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_310[0x50];                                     // 0x0310(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const TArray<uint8> GetDataArray();
	ECriFsLoaderStatus GetStatus();
	void Load();
	void OnLoadCompleted__DelegateSignature();
	void OnLoadError__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CriFsLoaderComponent">();
	}
	static class UCriFsLoaderComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCriFsLoaderComponent>();
	}
};
static_assert(alignof(UCriFsLoaderComponent) == 0x000008, "Wrong alignment on UCriFsLoaderComponent");
static_assert(sizeof(UCriFsLoaderComponent) == 0x000360, "Wrong size on UCriFsLoaderComponent");
static_assert(offsetof(UCriFsLoaderComponent, FilePath) == 0x0002E0, "Member 'UCriFsLoaderComponent::FilePath' has a wrong offset!");
static_assert(offsetof(UCriFsLoaderComponent, OnLoadCompleted) == 0x0002F0, "Member 'UCriFsLoaderComponent::OnLoadCompleted' has a wrong offset!");
static_assert(offsetof(UCriFsLoaderComponent, OnLoadError) == 0x000300, "Member 'UCriFsLoaderComponent::OnLoadError' has a wrong offset!");

// Class CriWareRuntime.CriWareFunctionLibrary
// 0x0000 (0x0038 - 0x0038)
class UCriWareFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void SetGameVariableByName(const class FString& GameVariableName, float Value);
	static void SetGlobalLabelToSelectorByName(const class FString& SelectorName, const class FString& LabelName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CriWareFunctionLibrary">();
	}
	static class UCriWareFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCriWareFunctionLibrary>();
	}
};
static_assert(alignof(UCriWareFunctionLibrary) == 0x000008, "Wrong alignment on UCriWareFunctionLibrary");
static_assert(sizeof(UCriWareFunctionLibrary) == 0x000038, "Wrong size on UCriWareFunctionLibrary");

// Class CriWareRuntime.CriWareInitializer
// 0x0000 (0x0038 - 0x0038)
class UCriWareInitializer final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CriWareInitializer">();
	}
	static class UCriWareInitializer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCriWareInitializer>();
	}
};
static_assert(alignof(UCriWareInitializer) == 0x000008, "Wrong alignment on UCriWareInitializer");
static_assert(sizeof(UCriWareInitializer) == 0x000038, "Wrong size on UCriWareInitializer");

// Class CriWareRuntime.CriWarePluginSettings
// 0x01F8 (0x0230 - 0x0038)
class UCriWarePluginSettings final : public UObject
{
public:
	bool                                          bNoExistCriWareIni;                                // 0x0038(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDirectoryPath                         NonAssetContentDir;                                // 0x0040(0x0010)(Edit, NativeAccessSpecifierPublic)
	class FString                                 ContentDir;                                        // 0x0050(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumBinders;                                        // 0x0070(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxBinds;                                          // 0x0078(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoaders;                                        // 0x0080(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxFiles;                                          // 0x0088(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          OutputsLogFileSystem;                              // 0x0090(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_FileAccessThreadAffinityMask;                  // 0x0094(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x4];                                       // 0x0098(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_DataDecompressionThreadAffinityMask;           // 0x009C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x4];                                       // 0x00A0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_MemoryFileSystemThreadAffinityMask;            // 0x00A4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x4];                                       // 0x00A8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_FileAccessThreadPriority;                      // 0x00AC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x4];                                       // 0x00B0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_DataDecompressionThreadPriority;               // 0x00B4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x4];                                       // 0x00B8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_MemoryFileSystemThreadPriority;                // 0x00BC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x4];                                       // 0x00C0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxVirtualVoices;                                  // 0x00C4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x4];                                       // 0x00C8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          UsesInGamePreview;                                 // 0x00CC(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x1];                                       // 0x00CD(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          OutputsLogAtom;                                    // 0x00CE(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CF[0x1];                                       // 0x00CF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumStandardMemoryVoices;                           // 0x00D0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StandardMemoryVoiceNumChannels;                    // 0x00D8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StandardMemoryVoiceSamplingRate;                   // 0x00E0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumStandardStreamingVoices;                        // 0x00E8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StandardStreamingVoiceNumChannels;                 // 0x00F0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StandardStreamingVoiceSamplingRate;                // 0x00F8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        AtomConfig;                                        // 0x0100(0x0008)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AcfFileName;                                       // 0x0110(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFactor;                                    // 0x0120(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	EAtomSoundRendererType                        SoundRendererTypeUI;                               // 0x0128(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SoundRendererType;                                 // 0x012C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x8];                                      // 0x0130(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAtomAsrRackConfigUI>           AsrRackConfigUI;                                   // 0x0138(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAtomAsrRackConfig>             AsrRackConfig;                                     // 0x0148(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x10];                                     // 0x0158(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HcaMxVoiceSamplingRate;                            // 0x0168(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumHcaMxMemoryVoices;                              // 0x0170(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HcaMxMemoryVoiceNumChannels;                       // 0x0178(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumHcaMxStreamingVoices;                           // 0x0180(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HcaMxStreamingVoiceNumChannels;                    // 0x0188(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          WASAPI_IsExclusive;                                // 0x0190(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191[0x3];                                      // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WASAPI_BitsPerSample;                              // 0x0194(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_198[0x4];                                      // 0x0198(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WASAPI_SamplingRate;                               // 0x019C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A0[0x4];                                      // 0x01A0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WASAPI_NumChannels;                                // 0x01A4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8[0x4];                                      // 0x01A8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_ServerThreadAffinityMask;                      // 0x01AC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B0[0x4];                                      // 0x01B0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_OutputThreadAffinityMask;                      // 0x01B4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B8[0x4];                                      // 0x01B8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_ServerThreadPriority;                          // 0x01BC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0[0x4];                                      // 0x01C0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_OutputThreadPriority;                          // 0x01C4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C8[0x4];                                      // 0x01C8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          PS4_UseAudio3d;                                    // 0x01CC(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD[0x3];                                      // 0x01CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_NumberOfAudio3dMemoryVoices;                   // 0x01D0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_SamplingRateOfAudio3dMemoryVoices;             // 0x01D8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_NumberOfAudio3dStreamingVoices;                // 0x01E0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_SamplingRateOfAudio3dStreamingVoices;          // 0x01E8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          InitializeMana;                                    // 0x01F0(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1[0x1];                                      // 0x01F1(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          EnableDecodeSkip;                                  // 0x01F2(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F3[0x1];                                      // 0x01F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxDecoderHandles;                                 // 0x01F4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F8[0x4];                                      // 0x01F8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxManaBPS;                                        // 0x01FC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_200[0x4];                                      // 0x0200(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          UseH264Decoder;                                    // 0x0204(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_205[0x1];                                      // 0x0205(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseManaStartupMovies;                             // 0x0206(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWaitForMoviesToComplete;                          // 0x0207(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoviesAreSkippable;                               // 0x0208(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         StartupMovies;                                     // 0x0210(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_220[0x10];                                     // 0x0220(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CriWarePluginSettings">();
	}
	static class UCriWarePluginSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCriWarePluginSettings>();
	}
};
static_assert(alignof(UCriWarePluginSettings) == 0x000008, "Wrong alignment on UCriWarePluginSettings");
static_assert(sizeof(UCriWarePluginSettings) == 0x000230, "Wrong size on UCriWarePluginSettings");
static_assert(offsetof(UCriWarePluginSettings, bNoExistCriWareIni) == 0x000038, "Member 'UCriWarePluginSettings::bNoExistCriWareIni' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, NonAssetContentDir) == 0x000040, "Member 'UCriWarePluginSettings::NonAssetContentDir' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, ContentDir) == 0x000050, "Member 'UCriWarePluginSettings::ContentDir' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, NumBinders) == 0x000070, "Member 'UCriWarePluginSettings::NumBinders' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, MaxBinds) == 0x000078, "Member 'UCriWarePluginSettings::MaxBinds' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, NumLoaders) == 0x000080, "Member 'UCriWarePluginSettings::NumLoaders' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, MaxFiles) == 0x000088, "Member 'UCriWarePluginSettings::MaxFiles' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, OutputsLogFileSystem) == 0x000090, "Member 'UCriWarePluginSettings::OutputsLogFileSystem' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_FileAccessThreadAffinityMask) == 0x000094, "Member 'UCriWarePluginSettings::PS4_FileAccessThreadAffinityMask' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_DataDecompressionThreadAffinityMask) == 0x00009C, "Member 'UCriWarePluginSettings::PS4_DataDecompressionThreadAffinityMask' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_MemoryFileSystemThreadAffinityMask) == 0x0000A4, "Member 'UCriWarePluginSettings::PS4_MemoryFileSystemThreadAffinityMask' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_FileAccessThreadPriority) == 0x0000AC, "Member 'UCriWarePluginSettings::PS4_FileAccessThreadPriority' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_DataDecompressionThreadPriority) == 0x0000B4, "Member 'UCriWarePluginSettings::PS4_DataDecompressionThreadPriority' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_MemoryFileSystemThreadPriority) == 0x0000BC, "Member 'UCriWarePluginSettings::PS4_MemoryFileSystemThreadPriority' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, MaxVirtualVoices) == 0x0000C4, "Member 'UCriWarePluginSettings::MaxVirtualVoices' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, UsesInGamePreview) == 0x0000CC, "Member 'UCriWarePluginSettings::UsesInGamePreview' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, OutputsLogAtom) == 0x0000CE, "Member 'UCriWarePluginSettings::OutputsLogAtom' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, NumStandardMemoryVoices) == 0x0000D0, "Member 'UCriWarePluginSettings::NumStandardMemoryVoices' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, StandardMemoryVoiceNumChannels) == 0x0000D8, "Member 'UCriWarePluginSettings::StandardMemoryVoiceNumChannels' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, StandardMemoryVoiceSamplingRate) == 0x0000E0, "Member 'UCriWarePluginSettings::StandardMemoryVoiceSamplingRate' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, NumStandardStreamingVoices) == 0x0000E8, "Member 'UCriWarePluginSettings::NumStandardStreamingVoices' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, StandardStreamingVoiceNumChannels) == 0x0000F0, "Member 'UCriWarePluginSettings::StandardStreamingVoiceNumChannels' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, StandardStreamingVoiceSamplingRate) == 0x0000F8, "Member 'UCriWarePluginSettings::StandardStreamingVoiceSamplingRate' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, AtomConfig) == 0x000100, "Member 'UCriWarePluginSettings::AtomConfig' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, AcfFileName) == 0x000110, "Member 'UCriWarePluginSettings::AcfFileName' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, DistanceFactor) == 0x000120, "Member 'UCriWarePluginSettings::DistanceFactor' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, SoundRendererTypeUI) == 0x000128, "Member 'UCriWarePluginSettings::SoundRendererTypeUI' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, SoundRendererType) == 0x00012C, "Member 'UCriWarePluginSettings::SoundRendererType' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, AsrRackConfigUI) == 0x000138, "Member 'UCriWarePluginSettings::AsrRackConfigUI' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, AsrRackConfig) == 0x000148, "Member 'UCriWarePluginSettings::AsrRackConfig' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, HcaMxVoiceSamplingRate) == 0x000168, "Member 'UCriWarePluginSettings::HcaMxVoiceSamplingRate' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, NumHcaMxMemoryVoices) == 0x000170, "Member 'UCriWarePluginSettings::NumHcaMxMemoryVoices' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, HcaMxMemoryVoiceNumChannels) == 0x000178, "Member 'UCriWarePluginSettings::HcaMxMemoryVoiceNumChannels' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, NumHcaMxStreamingVoices) == 0x000180, "Member 'UCriWarePluginSettings::NumHcaMxStreamingVoices' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, HcaMxStreamingVoiceNumChannels) == 0x000188, "Member 'UCriWarePluginSettings::HcaMxStreamingVoiceNumChannels' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, WASAPI_IsExclusive) == 0x000190, "Member 'UCriWarePluginSettings::WASAPI_IsExclusive' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, WASAPI_BitsPerSample) == 0x000194, "Member 'UCriWarePluginSettings::WASAPI_BitsPerSample' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, WASAPI_SamplingRate) == 0x00019C, "Member 'UCriWarePluginSettings::WASAPI_SamplingRate' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, WASAPI_NumChannels) == 0x0001A4, "Member 'UCriWarePluginSettings::WASAPI_NumChannels' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_ServerThreadAffinityMask) == 0x0001AC, "Member 'UCriWarePluginSettings::PS4_ServerThreadAffinityMask' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_OutputThreadAffinityMask) == 0x0001B4, "Member 'UCriWarePluginSettings::PS4_OutputThreadAffinityMask' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_ServerThreadPriority) == 0x0001BC, "Member 'UCriWarePluginSettings::PS4_ServerThreadPriority' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_OutputThreadPriority) == 0x0001C4, "Member 'UCriWarePluginSettings::PS4_OutputThreadPriority' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_UseAudio3d) == 0x0001CC, "Member 'UCriWarePluginSettings::PS4_UseAudio3d' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_NumberOfAudio3dMemoryVoices) == 0x0001D0, "Member 'UCriWarePluginSettings::PS4_NumberOfAudio3dMemoryVoices' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_SamplingRateOfAudio3dMemoryVoices) == 0x0001D8, "Member 'UCriWarePluginSettings::PS4_SamplingRateOfAudio3dMemoryVoices' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_NumberOfAudio3dStreamingVoices) == 0x0001E0, "Member 'UCriWarePluginSettings::PS4_NumberOfAudio3dStreamingVoices' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_SamplingRateOfAudio3dStreamingVoices) == 0x0001E8, "Member 'UCriWarePluginSettings::PS4_SamplingRateOfAudio3dStreamingVoices' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, InitializeMana) == 0x0001F0, "Member 'UCriWarePluginSettings::InitializeMana' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, EnableDecodeSkip) == 0x0001F2, "Member 'UCriWarePluginSettings::EnableDecodeSkip' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, MaxDecoderHandles) == 0x0001F4, "Member 'UCriWarePluginSettings::MaxDecoderHandles' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, MaxManaBPS) == 0x0001FC, "Member 'UCriWarePluginSettings::MaxManaBPS' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, UseH264Decoder) == 0x000204, "Member 'UCriWarePluginSettings::UseH264Decoder' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, bUseManaStartupMovies) == 0x000206, "Member 'UCriWarePluginSettings::bUseManaStartupMovies' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, bWaitForMoviesToComplete) == 0x000207, "Member 'UCriWarePluginSettings::bWaitForMoviesToComplete' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, bMoviesAreSkippable) == 0x000208, "Member 'UCriWarePluginSettings::bMoviesAreSkippable' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, StartupMovies) == 0x000210, "Member 'UCriWarePluginSettings::StartupMovies' has a wrong offset!");

// Class CriWareRuntime.ManaComponent
// 0x00E8 (0x0210 - 0x0128)
class UManaComponent final : public UActorComponent
{
public:
	class UManaTexture*                           Movie;                                             // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FManaEventPointInfo& EventPointInfo)> OnEventPoint;                                      // 0x0138(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSubtitlesEnabled;                                 // 0x0148(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SubtitlesChannel;                                  // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EManaSubtitlesEncoding                        SubtitlesEncoding;                                 // 0x0150(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnSubtitleChanged;                                 // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnStatusChanged;                                   // 0x0168(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	EManaFrameAction                              EndFrameAction;                                    // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UManaComponent* ManaComponent)> OnRequestData;                                     // 0x0180(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_190[0x40];                                     // 0x0190(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaPlaylist*                          Playlist;                                          // 0x01D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PlaylistIndex;                                     // 0x01D8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1DC[0x34];                                     // 0x01DC(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeSubtitlesChannel(int32 Channel);
	void ClearRenderTexture();
	void EnableSeamless(bool bEnable);
	void EnableSubtitles(bool bEnable);
	int32 GetFrameNumber();
	class UManaMovie* GetSource();
	EManaComponentStatus GetStatus();
	float GetSubVolume();
	class UManaTexture* GetTexture();
	float GetTime();
	float GetVideoFrame();
	float GetVolume();
	bool Next();
	void OnEventPoint__DelegateSignature(const struct FManaEventPointInfo& EventPointInfo);
	void OnRequestData__DelegateSignature(class UManaComponent* ManaComponent);
	void OnStatusChanged__DelegateSignature(EManaComponentStatus Status, class UManaComponent* ManaComponent);
	void OnSubtitleChanged__DelegateSignature(const class FText& Subtitle);
	void Pause(bool bPause);
	void Play();
	void Prepare();
	void PreparePlaylistIndex(int32 Index_0);
	bool Previous();
	void ResetCachedData();
	void SeekToPosition(int32 FrameNumber);
	void SetCachedData(const TArray<uint8>& DataArray);
	void SetFile(const class FString& MovieFilePath);
	void SetSubVolume(float Volume);
	void SetTexture(class UManaTexture* Texture);
	void SetVolume(float Volume);
	void Stop();
	void StopAndWaitCompletion();
	bool ToIndex(int32 Index_0);

	bool IsLooping() const;
	bool IsPaused() const;
	bool IsPlaying() const;
	bool IsPreparing() const;
	bool IsReady() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ManaComponent">();
	}
	static class UManaComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UManaComponent>();
	}
};
static_assert(alignof(UManaComponent) == 0x000008, "Wrong alignment on UManaComponent");
static_assert(sizeof(UManaComponent) == 0x000210, "Wrong size on UManaComponent");
static_assert(offsetof(UManaComponent, Movie) == 0x000128, "Member 'UManaComponent::Movie' has a wrong offset!");
static_assert(offsetof(UManaComponent, bLoop) == 0x000130, "Member 'UManaComponent::bLoop' has a wrong offset!");
static_assert(offsetof(UManaComponent, OnEventPoint) == 0x000138, "Member 'UManaComponent::OnEventPoint' has a wrong offset!");
static_assert(offsetof(UManaComponent, bSubtitlesEnabled) == 0x000148, "Member 'UManaComponent::bSubtitlesEnabled' has a wrong offset!");
static_assert(offsetof(UManaComponent, SubtitlesChannel) == 0x00014C, "Member 'UManaComponent::SubtitlesChannel' has a wrong offset!");
static_assert(offsetof(UManaComponent, SubtitlesEncoding) == 0x000150, "Member 'UManaComponent::SubtitlesEncoding' has a wrong offset!");
static_assert(offsetof(UManaComponent, OnSubtitleChanged) == 0x000158, "Member 'UManaComponent::OnSubtitleChanged' has a wrong offset!");
static_assert(offsetof(UManaComponent, OnStatusChanged) == 0x000168, "Member 'UManaComponent::OnStatusChanged' has a wrong offset!");
static_assert(offsetof(UManaComponent, EndFrameAction) == 0x000178, "Member 'UManaComponent::EndFrameAction' has a wrong offset!");
static_assert(offsetof(UManaComponent, OnRequestData) == 0x000180, "Member 'UManaComponent::OnRequestData' has a wrong offset!");
static_assert(offsetof(UManaComponent, Playlist) == 0x0001D0, "Member 'UManaComponent::Playlist' has a wrong offset!");
static_assert(offsetof(UManaComponent, PlaylistIndex) == 0x0001D8, "Member 'UManaComponent::PlaylistIndex' has a wrong offset!");

// Class CriWareRuntime.ManaComponentTexture
// 0x0020 (0x00F8 - 0x00D8)
class UManaComponentTexture final : public UTexture
{
public:
	int32                                         SizeX;                                             // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPixelFormat                                  Format;                                            // 0x00E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EManaComponentTextureType                     ComponentType;                                     // 0x00E1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressX;                                          // 0x00E2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressY;                                          // 0x00E3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x14];                                      // 0x00E4(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ManaComponentTexture">();
	}
	static class UManaComponentTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UManaComponentTexture>();
	}
};
static_assert(alignof(UManaComponentTexture) == 0x000008, "Wrong alignment on UManaComponentTexture");
static_assert(sizeof(UManaComponentTexture) == 0x0000F8, "Wrong size on UManaComponentTexture");
static_assert(offsetof(UManaComponentTexture, SizeX) == 0x0000D8, "Member 'UManaComponentTexture::SizeX' has a wrong offset!");
static_assert(offsetof(UManaComponentTexture, SizeY) == 0x0000DC, "Member 'UManaComponentTexture::SizeY' has a wrong offset!");
static_assert(offsetof(UManaComponentTexture, Format) == 0x0000E0, "Member 'UManaComponentTexture::Format' has a wrong offset!");
static_assert(offsetof(UManaComponentTexture, ComponentType) == 0x0000E1, "Member 'UManaComponentTexture::ComponentType' has a wrong offset!");
static_assert(offsetof(UManaComponentTexture, AddressX) == 0x0000E2, "Member 'UManaComponentTexture::AddressX' has a wrong offset!");
static_assert(offsetof(UManaComponentTexture, AddressY) == 0x0000E3, "Member 'UManaComponentTexture::AddressY' has a wrong offset!");

// Class CriWareRuntime.ManaSource
// 0x0000 (0x0038 - 0x0038)
class UManaSource : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ManaSource">();
	}
	static class UManaSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UManaSource>();
	}
};
static_assert(alignof(UManaSource) == 0x000008, "Wrong alignment on UManaSource");
static_assert(sizeof(UManaSource) == 0x000038, "Wrong size on UManaSource");

// Class CriWareRuntime.ManaMovie
// 0x0050 (0x0088 - 0x0038)
class UManaMovie : public UManaSource
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FManaVideoTrackInfo>            VideoTracks;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<struct FManaAudioTrackInfo>            AudioTracks;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<struct FManaEventPointInfo>            EventPoints;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	int32                                         NumSubtitleChannels;                               // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxSubtitleSize;                                   // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bIsAlpha : 1;                                      // 0x0078(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_79[0xF];                                       // 0x0079(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ManaMovie">();
	}
	static class UManaMovie* GetDefaultObj()
	{
		return GetDefaultObjImpl<UManaMovie>();
	}
};
static_assert(alignof(UManaMovie) == 0x000008, "Wrong alignment on UManaMovie");
static_assert(sizeof(UManaMovie) == 0x000088, "Wrong size on UManaMovie");
static_assert(offsetof(UManaMovie, VideoTracks) == 0x000040, "Member 'UManaMovie::VideoTracks' has a wrong offset!");
static_assert(offsetof(UManaMovie, AudioTracks) == 0x000050, "Member 'UManaMovie::AudioTracks' has a wrong offset!");
static_assert(offsetof(UManaMovie, EventPoints) == 0x000060, "Member 'UManaMovie::EventPoints' has a wrong offset!");
static_assert(offsetof(UManaMovie, NumSubtitleChannels) == 0x000070, "Member 'UManaMovie::NumSubtitleChannels' has a wrong offset!");
static_assert(offsetof(UManaMovie, MaxSubtitleSize) == 0x000074, "Member 'UManaMovie::MaxSubtitleSize' has a wrong offset!");

// Class CriWareRuntime.FileManaMovie
// 0x0018 (0x00A0 - 0x0088)
class UFileManaMovie final : public UManaMovie
{
public:
	bool                                          bPrecacheFile;                                     // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetFilePath(const class FString& Path);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FileManaMovie">();
	}
	static class UFileManaMovie* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFileManaMovie>();
	}
};
static_assert(alignof(UFileManaMovie) == 0x000008, "Wrong alignment on UFileManaMovie");
static_assert(sizeof(UFileManaMovie) == 0x0000A0, "Wrong size on UFileManaMovie");
static_assert(offsetof(UFileManaMovie, bPrecacheFile) == 0x000088, "Member 'UFileManaMovie::bPrecacheFile' has a wrong offset!");
static_assert(offsetof(UFileManaMovie, FilePath) == 0x000090, "Member 'UFileManaMovie::FilePath' has a wrong offset!");

// Class CriWareRuntime.DataManaMovie
// 0x0008 (0x0090 - 0x0088)
class UDataManaMovie final : public UManaMovie
{
public:
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<uint8> GetDataArray();
	void SetDataArray(TArray<uint8>* InDataArray);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataManaMovie">();
	}
	static class UDataManaMovie* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataManaMovie>();
	}
};
static_assert(alignof(UDataManaMovie) == 0x000008, "Wrong alignment on UDataManaMovie");
static_assert(sizeof(UDataManaMovie) == 0x000090, "Wrong size on UDataManaMovie");

// Class CriWareRuntime.ManaPlaylist
// 0x0018 (0x0050 - 0x0038)
class UManaPlaylist final : public UManaSource
{
public:
	TArray<class UManaMovie*>                     Movies;                                            // 0x0038(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsAlpha;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsMixedTypes;                                     // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSeamless;                                       // 0x004A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Add(class UManaMovie* ManaMovie);
	class UManaMovie* Get(int32 Index_0);
	class UManaMovie* GetNext(int32* InOutIndex);
	class UManaMovie* GetPrevious(int32* InOutIndex);
	class UManaMovie* GetRandom(int32* InOutIndex);
	void Insert(class UManaMovie* ManaMovie, int32 Index_0);
	bool IsAlpha();
	bool IsMixedTypes();
	bool IsSeamless();
	int32 Num();
	void Remove(class UManaMovie* ManaMovie);
	void RemoveAt(int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ManaPlaylist">();
	}
	static class UManaPlaylist* GetDefaultObj()
	{
		return GetDefaultObjImpl<UManaPlaylist>();
	}
};
static_assert(alignof(UManaPlaylist) == 0x000008, "Wrong alignment on UManaPlaylist");
static_assert(sizeof(UManaPlaylist) == 0x000050, "Wrong size on UManaPlaylist");
static_assert(offsetof(UManaPlaylist, Movies) == 0x000038, "Member 'UManaPlaylist::Movies' has a wrong offset!");
static_assert(offsetof(UManaPlaylist, bIsAlpha) == 0x000048, "Member 'UManaPlaylist::bIsAlpha' has a wrong offset!");
static_assert(offsetof(UManaPlaylist, bIsMixedTypes) == 0x000049, "Member 'UManaPlaylist::bIsMixedTypes' has a wrong offset!");
static_assert(offsetof(UManaPlaylist, bIsSeamless) == 0x00004A, "Member 'UManaPlaylist::bIsSeamless' has a wrong offset!");

// Class CriWareRuntime.ManaTexture
// 0x00B0 (0x0188 - 0x00D8)
class UManaTexture final : public UTexture
{
public:
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaSource*                            MovieSource;                                       // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 MovieFilePath;                                     // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FManaVideoTrackInfo>            VideoTrackInfo;                                    // 0x00F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FManaEventPointInfo>            EventPointInfo;                                    // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         NumSubtitleChannels;                               // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRenderToTexture : 1;                              // 0x011C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetGamma;                                       // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bHDR : 1;                                          // 0x0124(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ETextureAddress                               AddressX;                                          // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressY;                                          // 0x0129(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x2];                                      // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ClearColor;                                        // 0x012C(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPixelFormat                                  OverrideFormat;                                    // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D[0x3];                                      // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnTextureUpdated;                                  // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UManaComponentTexture*>          ComponentTextures;                                 // 0x0150(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_160[0x28];                                     // 0x0160(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTextureUpdated__DelegateSignature(class UManaTexture* ManaTexture);
	void SetMovieSource(class UManaSource* InSource);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ManaTexture">();
	}
	static class UManaTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UManaTexture>();
	}
};
static_assert(alignof(UManaTexture) == 0x000008, "Wrong alignment on UManaTexture");
static_assert(sizeof(UManaTexture) == 0x000188, "Wrong size on UManaTexture");
static_assert(offsetof(UManaTexture, MovieSource) == 0x0000E0, "Member 'UManaTexture::MovieSource' has a wrong offset!");
static_assert(offsetof(UManaTexture, MovieFilePath) == 0x0000E8, "Member 'UManaTexture::MovieFilePath' has a wrong offset!");
static_assert(offsetof(UManaTexture, VideoTrackInfo) == 0x0000F8, "Member 'UManaTexture::VideoTrackInfo' has a wrong offset!");
static_assert(offsetof(UManaTexture, EventPointInfo) == 0x000108, "Member 'UManaTexture::EventPointInfo' has a wrong offset!");
static_assert(offsetof(UManaTexture, NumSubtitleChannels) == 0x000118, "Member 'UManaTexture::NumSubtitleChannels' has a wrong offset!");
static_assert(offsetof(UManaTexture, TargetGamma) == 0x000120, "Member 'UManaTexture::TargetGamma' has a wrong offset!");
static_assert(offsetof(UManaTexture, AddressX) == 0x000128, "Member 'UManaTexture::AddressX' has a wrong offset!");
static_assert(offsetof(UManaTexture, AddressY) == 0x000129, "Member 'UManaTexture::AddressY' has a wrong offset!");
static_assert(offsetof(UManaTexture, ClearColor) == 0x00012C, "Member 'UManaTexture::ClearColor' has a wrong offset!");
static_assert(offsetof(UManaTexture, OverrideFormat) == 0x00013C, "Member 'UManaTexture::OverrideFormat' has a wrong offset!");
static_assert(offsetof(UManaTexture, OnTextureUpdated) == 0x000140, "Member 'UManaTexture::OnTextureUpdated' has a wrong offset!");
static_assert(offsetof(UManaTexture, ComponentTextures) == 0x000150, "Member 'UManaTexture::ComponentTextures' has a wrong offset!");

// Class CriWareRuntime.MaterialExpressionManaMovieFormatSwitch
// 0x0070 (0x00E0 - 0x0070)
class UMaterialExpressionManaMovieFormatSwitch final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Inputs[0x2];                                       // 0x0070(0x0038)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionManaMovieFormatSwitch">();
	}
	static class UMaterialExpressionManaMovieFormatSwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionManaMovieFormatSwitch>();
	}
};
static_assert(alignof(UMaterialExpressionManaMovieFormatSwitch) == 0x000008, "Wrong alignment on UMaterialExpressionManaMovieFormatSwitch");
static_assert(sizeof(UMaterialExpressionManaMovieFormatSwitch) == 0x0000E0, "Wrong size on UMaterialExpressionManaMovieFormatSwitch");
static_assert(offsetof(UMaterialExpressionManaMovieFormatSwitch, Inputs) == 0x000070, "Member 'UMaterialExpressionManaMovieFormatSwitch::Inputs' has a wrong offset!");

// Class CriWareRuntime.MatineeTrackAtomFloatBase
// 0x0000 (0x00B0 - 0x00B0)
class UMatineeTrackAtomFloatBase : public UInterpTrackFloatBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MatineeTrackAtomFloatBase">();
	}
	static class UMatineeTrackAtomFloatBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMatineeTrackAtomFloatBase>();
	}
};
static_assert(alignof(UMatineeTrackAtomFloatBase) == 0x000008, "Wrong alignment on UMatineeTrackAtomFloatBase");
static_assert(sizeof(UMatineeTrackAtomFloatBase) == 0x0000B0, "Wrong size on UMatineeTrackAtomFloatBase");

// Class CriWareRuntime.MatineeTrackAisacControlName
// 0x0000 (0x00B0 - 0x00B0)
class UMatineeTrackAisacControlName final : public UMatineeTrackAtomFloatBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MatineeTrackAisacControlName">();
	}
	static class UMatineeTrackAisacControlName* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMatineeTrackAisacControlName>();
	}
};
static_assert(alignof(UMatineeTrackAisacControlName) == 0x000008, "Wrong alignment on UMatineeTrackAisacControlName");
static_assert(sizeof(UMatineeTrackAisacControlName) == 0x0000B0, "Wrong size on UMatineeTrackAisacControlName");

// Class CriWareRuntime.MatineeTrackAtomBase
// 0x0000 (0x0090 - 0x0090)
class UMatineeTrackAtomBase : public UInterpTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MatineeTrackAtomBase">();
	}
	static class UMatineeTrackAtomBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMatineeTrackAtomBase>();
	}
};
static_assert(alignof(UMatineeTrackAtomBase) == 0x000008, "Wrong alignment on UMatineeTrackAtomBase");
static_assert(sizeof(UMatineeTrackAtomBase) == 0x000090, "Wrong size on UMatineeTrackAtomBase");

// Class CriWareRuntime.MatineeTrackAtomSoundBase
// 0x0008 (0x0098 - 0x0090)
class UMatineeTrackAtomSoundBase : public UMatineeTrackAtomBase
{
public:
	bool                                          bContinueSoundOnMatineeEnd;                        // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MatineeTrackAtomSoundBase">();
	}
	static class UMatineeTrackAtomSoundBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMatineeTrackAtomSoundBase>();
	}
};
static_assert(alignof(UMatineeTrackAtomSoundBase) == 0x000008, "Wrong alignment on UMatineeTrackAtomSoundBase");
static_assert(sizeof(UMatineeTrackAtomSoundBase) == 0x000098, "Wrong size on UMatineeTrackAtomSoundBase");
static_assert(offsetof(UMatineeTrackAtomSoundBase, bContinueSoundOnMatineeEnd) == 0x000090, "Member 'UMatineeTrackAtomSoundBase::bContinueSoundOnMatineeEnd' has a wrong offset!");

// Class CriWareRuntime.MatineeTrackAtom
// 0x0030 (0x00C8 - 0x0098)
class UMatineeTrackAtom final : public UMatineeTrackAtomSoundBase
{
public:
	TArray<class FString>                         AisacList;                                         // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         SelectorList;                                      // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAtomTrackKeyframe>             KeyframeList;                                      // 0x00B8(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MatineeTrackAtom">();
	}
	static class UMatineeTrackAtom* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMatineeTrackAtom>();
	}
};
static_assert(alignof(UMatineeTrackAtom) == 0x000008, "Wrong alignment on UMatineeTrackAtom");
static_assert(sizeof(UMatineeTrackAtom) == 0x0000C8, "Wrong size on UMatineeTrackAtom");
static_assert(offsetof(UMatineeTrackAtom, AisacList) == 0x000098, "Member 'UMatineeTrackAtom::AisacList' has a wrong offset!");
static_assert(offsetof(UMatineeTrackAtom, SelectorList) == 0x0000A8, "Member 'UMatineeTrackAtom::SelectorList' has a wrong offset!");
static_assert(offsetof(UMatineeTrackAtom, KeyframeList) == 0x0000B8, "Member 'UMatineeTrackAtom::KeyframeList' has a wrong offset!");

// Class CriWareRuntime.MatineeTrackAtomCategoryName
// 0x0018 (0x00A8 - 0x0090)
class UMatineeTrackAtomCategoryName final : public UMatineeTrackAtomBase
{
public:
	class FString                                 CategoryName;                                      // 0x0090(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableVolumeTrack;                                // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MatineeTrackAtomCategoryName">();
	}
	static class UMatineeTrackAtomCategoryName* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMatineeTrackAtomCategoryName>();
	}
};
static_assert(alignof(UMatineeTrackAtomCategoryName) == 0x000008, "Wrong alignment on UMatineeTrackAtomCategoryName");
static_assert(sizeof(UMatineeTrackAtomCategoryName) == 0x0000A8, "Wrong size on UMatineeTrackAtomCategoryName");
static_assert(offsetof(UMatineeTrackAtomCategoryName, CategoryName) == 0x000090, "Member 'UMatineeTrackAtomCategoryName::CategoryName' has a wrong offset!");
static_assert(offsetof(UMatineeTrackAtomCategoryName, bEnableVolumeTrack) == 0x0000A0, "Member 'UMatineeTrackAtomCategoryName::bEnableVolumeTrack' has a wrong offset!");

// Class CriWareRuntime.MatineeTrackAtomCategoryVolume
// 0x0000 (0x00B0 - 0x00B0)
class UMatineeTrackAtomCategoryVolume final : public UMatineeTrackAtomFloatBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MatineeTrackAtomCategoryVolume">();
	}
	static class UMatineeTrackAtomCategoryVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMatineeTrackAtomCategoryVolume>();
	}
};
static_assert(alignof(UMatineeTrackAtomCategoryVolume) == 0x000008, "Wrong alignment on UMatineeTrackAtomCategoryVolume");
static_assert(sizeof(UMatineeTrackAtomCategoryVolume) == 0x0000B0, "Wrong size on UMatineeTrackAtomCategoryVolume");

// Class CriWareRuntime.MatineeTrackAtomCueId
// 0x0038 (0x00D0 - 0x0098)
class UMatineeTrackAtomCueId final : public UMatineeTrackAtomSoundBase
{
public:
	TArray<class FString>                         AisacList;                                         // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         SelectorList;                                      // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class USoundAtomCueSheet*                     CueSheet;                                          // 0x00B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAtomCueIdTrackKeyframe>        KeyframeList;                                      // 0x00C0(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MatineeTrackAtomCueId">();
	}
	static class UMatineeTrackAtomCueId* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMatineeTrackAtomCueId>();
	}
};
static_assert(alignof(UMatineeTrackAtomCueId) == 0x000008, "Wrong alignment on UMatineeTrackAtomCueId");
static_assert(sizeof(UMatineeTrackAtomCueId) == 0x0000D0, "Wrong size on UMatineeTrackAtomCueId");
static_assert(offsetof(UMatineeTrackAtomCueId, AisacList) == 0x000098, "Member 'UMatineeTrackAtomCueId::AisacList' has a wrong offset!");
static_assert(offsetof(UMatineeTrackAtomCueId, SelectorList) == 0x0000A8, "Member 'UMatineeTrackAtomCueId::SelectorList' has a wrong offset!");
static_assert(offsetof(UMatineeTrackAtomCueId, CueSheet) == 0x0000B8, "Member 'UMatineeTrackAtomCueId::CueSheet' has a wrong offset!");
static_assert(offsetof(UMatineeTrackAtomCueId, KeyframeList) == 0x0000C0, "Member 'UMatineeTrackAtomCueId::KeyframeList' has a wrong offset!");

// Class CriWareRuntime.MatineeTrackAtomCueName
// 0x0038 (0x00D0 - 0x0098)
class UMatineeTrackAtomCueName final : public UMatineeTrackAtomSoundBase
{
public:
	TArray<class FString>                         AisacList;                                         // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         SelectorList;                                      // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class USoundAtomCueSheet*                     CueSheet;                                          // 0x00B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAtomCueNameTrackKeyframe>      KeyframeList;                                      // 0x00C0(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MatineeTrackAtomCueName">();
	}
	static class UMatineeTrackAtomCueName* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMatineeTrackAtomCueName>();
	}
};
static_assert(alignof(UMatineeTrackAtomCueName) == 0x000008, "Wrong alignment on UMatineeTrackAtomCueName");
static_assert(sizeof(UMatineeTrackAtomCueName) == 0x0000D0, "Wrong size on UMatineeTrackAtomCueName");
static_assert(offsetof(UMatineeTrackAtomCueName, AisacList) == 0x000098, "Member 'UMatineeTrackAtomCueName::AisacList' has a wrong offset!");
static_assert(offsetof(UMatineeTrackAtomCueName, SelectorList) == 0x0000A8, "Member 'UMatineeTrackAtomCueName::SelectorList' has a wrong offset!");
static_assert(offsetof(UMatineeTrackAtomCueName, CueSheet) == 0x0000B8, "Member 'UMatineeTrackAtomCueName::CueSheet' has a wrong offset!");
static_assert(offsetof(UMatineeTrackAtomCueName, KeyframeList) == 0x0000C0, "Member 'UMatineeTrackAtomCueName::KeyframeList' has a wrong offset!");

// Class CriWareRuntime.MatineeTrackAtomSelector
// 0x0010 (0x00A0 - 0x0090)
class UMatineeTrackAtomSelector final : public UInterpTrack
{
public:
	TArray<struct FAtomSelectorTrackKeyframe>     KeyframeList;                                      // 0x0090(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MatineeTrackAtomSelector">();
	}
	static class UMatineeTrackAtomSelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMatineeTrackAtomSelector>();
	}
};
static_assert(alignof(UMatineeTrackAtomSelector) == 0x000008, "Wrong alignment on UMatineeTrackAtomSelector");
static_assert(sizeof(UMatineeTrackAtomSelector) == 0x0000A0, "Wrong size on UMatineeTrackAtomSelector");
static_assert(offsetof(UMatineeTrackAtomSelector, KeyframeList) == 0x000090, "Member 'UMatineeTrackAtomSelector::KeyframeList' has a wrong offset!");

// Class CriWareRuntime.MatineeTrackInstAtom
// 0x0020 (0x0058 - 0x0038)
class UMatineeTrackInstAtom final : public UInterpTrackInst
{
public:
	float                                         LastUpdatePosition;                                // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         AtomComponent;                                     // 0x0040(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMatineeTrackAtomSoundBase*             AtomTrack;                                         // 0x0048(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MatineeTrackInstAtom">();
	}
	static class UMatineeTrackInstAtom* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMatineeTrackInstAtom>();
	}
};
static_assert(alignof(UMatineeTrackInstAtom) == 0x000008, "Wrong alignment on UMatineeTrackInstAtom");
static_assert(sizeof(UMatineeTrackInstAtom) == 0x000058, "Wrong size on UMatineeTrackInstAtom");
static_assert(offsetof(UMatineeTrackInstAtom, LastUpdatePosition) == 0x000038, "Member 'UMatineeTrackInstAtom::LastUpdatePosition' has a wrong offset!");
static_assert(offsetof(UMatineeTrackInstAtom, AtomComponent) == 0x000040, "Member 'UMatineeTrackInstAtom::AtomComponent' has a wrong offset!");
static_assert(offsetof(UMatineeTrackInstAtom, AtomTrack) == 0x000048, "Member 'UMatineeTrackInstAtom::AtomTrack' has a wrong offset!");

// Class CriWareRuntime.MovieSceneAtomSection
// 0x0100 (0x0220 - 0x0120)
class UMovieSceneAtomSection final : public UMovieSceneSection
{
public:
	class USoundAtomCue*                          Sound;                                             // 0x0120(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StartOffset;                                       // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichCurve                             SoundVolume;                                       // 0x0130(0x0070)(Edit, NativeAccessSpecifierPrivate)
	struct FRichCurve                             PitchMultiplier;                                   // 0x01A0(0x0070)(Edit, NativeAccessSpecifierPrivate)
	bool                                          bSuppressSubtitles;                                // 0x0210(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_211[0xF];                                      // 0x0211(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAtomSection">();
	}
	static class UMovieSceneAtomSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAtomSection>();
	}
};
static_assert(alignof(UMovieSceneAtomSection) == 0x000008, "Wrong alignment on UMovieSceneAtomSection");
static_assert(sizeof(UMovieSceneAtomSection) == 0x000220, "Wrong size on UMovieSceneAtomSection");
static_assert(offsetof(UMovieSceneAtomSection, Sound) == 0x000120, "Member 'UMovieSceneAtomSection::Sound' has a wrong offset!");
static_assert(offsetof(UMovieSceneAtomSection, StartOffset) == 0x000128, "Member 'UMovieSceneAtomSection::StartOffset' has a wrong offset!");
static_assert(offsetof(UMovieSceneAtomSection, SoundVolume) == 0x000130, "Member 'UMovieSceneAtomSection::SoundVolume' has a wrong offset!");
static_assert(offsetof(UMovieSceneAtomSection, PitchMultiplier) == 0x0001A0, "Member 'UMovieSceneAtomSection::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(UMovieSceneAtomSection, bSuppressSubtitles) == 0x000210, "Member 'UMovieSceneAtomSection::bSuppressSubtitles' has a wrong offset!");

// Class CriWareRuntime.MovieSceneAtomTrack
// 0x0018 (0x00E0 - 0x00C8)
class UMovieSceneAtomTrack final : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             AtomSections;                                      // 0x00C8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAtomTrack">();
	}
	static class UMovieSceneAtomTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAtomTrack>();
	}
};
static_assert(alignof(UMovieSceneAtomTrack) == 0x000008, "Wrong alignment on UMovieSceneAtomTrack");
static_assert(sizeof(UMovieSceneAtomTrack) == 0x0000E0, "Wrong size on UMovieSceneAtomTrack");
static_assert(offsetof(UMovieSceneAtomTrack, AtomSections) == 0x0000C8, "Member 'UMovieSceneAtomTrack::AtomSections' has a wrong offset!");

// Class CriWareRuntime.SoundAtomConfig
// 0x0080 (0x00B8 - 0x0038)
class USoundAtomConfig final : public UObject
{
public:
	class FString                                 AcfFilePath;                                       // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x70];                                      // 0x0048(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundAtomConfig">();
	}
	static class USoundAtomConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundAtomConfig>();
	}
};
static_assert(alignof(USoundAtomConfig) == 0x000008, "Wrong alignment on USoundAtomConfig");
static_assert(sizeof(USoundAtomConfig) == 0x0000B8, "Wrong size on USoundAtomConfig");
static_assert(offsetof(USoundAtomConfig, AcfFilePath) == 0x000038, "Member 'USoundAtomConfig::AcfFilePath' has a wrong offset!");

// Class CriWareRuntime.SoundAtomCue
// 0x0028 (0x0060 - 0x0038)
class USoundAtomCue final : public UObject
{
public:
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCueSheet*                     CueSheet;                                          // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CueName;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	int32 GetLength();
	class FString GetUserData();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundAtomCue">();
	}
	static class USoundAtomCue* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundAtomCue>();
	}
};
static_assert(alignof(USoundAtomCue) == 0x000008, "Wrong alignment on USoundAtomCue");
static_assert(sizeof(USoundAtomCue) == 0x000060, "Wrong size on USoundAtomCue");
static_assert(offsetof(USoundAtomCue, CueSheet) == 0x000048, "Member 'USoundAtomCue::CueSheet' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, CueName) == 0x000050, "Member 'USoundAtomCue::CueName' has a wrong offset!");

// Class CriWareRuntime.SoundAtomCueSheet
// 0x00C8 (0x0100 - 0x0038)
class USoundAtomCueSheet final : public UObject
{
public:
	bool                                          Contains;                                          // 0x0038(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AcbFilePath;                                       // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x70];                                      // 0x0050(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bOverrideAwbDirectory;                             // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDirectoryPath                         AwbDirectory;                                      // 0x00C8(0x0010)(Edit, NativeAccessSpecifierPublic)
	class FString                                 CueSheetName;                                      // 0x00D8(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x18];                                      // 0x00E8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void ApplyDspBusSnapshot(const class FString& SnapshotName, int32 Milliseconds);
	static void AttachDspBusSetting(const class FString& SettingName);
	static void DetachDspBusSetting();
	static class USoundAtomCueSheet* LoadAcb(class FName AcbName);
	static void ReleaseAcb(class FName AcbName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundAtomCueSheet">();
	}
	static class USoundAtomCueSheet* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundAtomCueSheet>();
	}
};
static_assert(alignof(USoundAtomCueSheet) == 0x000008, "Wrong alignment on USoundAtomCueSheet");
static_assert(sizeof(USoundAtomCueSheet) == 0x000100, "Wrong size on USoundAtomCueSheet");
static_assert(offsetof(USoundAtomCueSheet, Contains) == 0x000038, "Member 'USoundAtomCueSheet::Contains' has a wrong offset!");
static_assert(offsetof(USoundAtomCueSheet, AcbFilePath) == 0x000040, "Member 'USoundAtomCueSheet::AcbFilePath' has a wrong offset!");
static_assert(offsetof(USoundAtomCueSheet, bOverrideAwbDirectory) == 0x0000C0, "Member 'USoundAtomCueSheet::bOverrideAwbDirectory' has a wrong offset!");
static_assert(offsetof(USoundAtomCueSheet, AwbDirectory) == 0x0000C8, "Member 'USoundAtomCueSheet::AwbDirectory' has a wrong offset!");
static_assert(offsetof(USoundAtomCueSheet, CueSheetName) == 0x0000D8, "Member 'USoundAtomCueSheet::CueSheetName' has a wrong offset!");

}

