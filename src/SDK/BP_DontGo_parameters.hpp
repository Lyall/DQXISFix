#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DontGo

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_DontGo.BP_DontGo_C.BndEvt__Box_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct BP_DontGo_C_BndEvt__Box_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    bpp__OverlappedComponent__pf;                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 bpp__OtherActor__pf;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    bpp__OtherComp__pf;                                // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__OtherBodyIndex__pf;                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bFromSweep__pf;                               // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             bpp__SweepResult__pf__const;                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_DontGo_C_BndEvt__Box_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_DontGo_C_BndEvt__Box_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_DontGo_C_BndEvt__Box_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on BP_DontGo_C_BndEvt__Box_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_DontGo_C_BndEvt__Box_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature, bpp__OverlappedComponent__pf) == 0x000000, "Member 'BP_DontGo_C_BndEvt__Box_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature::bpp__OverlappedComponent__pf' has a wrong offset!");
static_assert(offsetof(BP_DontGo_C_BndEvt__Box_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature, bpp__OtherActor__pf) == 0x000008, "Member 'BP_DontGo_C_BndEvt__Box_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature::bpp__OtherActor__pf' has a wrong offset!");
static_assert(offsetof(BP_DontGo_C_BndEvt__Box_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature, bpp__OtherComp__pf) == 0x000010, "Member 'BP_DontGo_C_BndEvt__Box_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature::bpp__OtherComp__pf' has a wrong offset!");
static_assert(offsetof(BP_DontGo_C_BndEvt__Box_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature, bpp__OtherBodyIndex__pf) == 0x000018, "Member 'BP_DontGo_C_BndEvt__Box_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature::bpp__OtherBodyIndex__pf' has a wrong offset!");
static_assert(offsetof(BP_DontGo_C_BndEvt__Box_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature, bpp__bFromSweep__pf) == 0x00001C, "Member 'BP_DontGo_C_BndEvt__Box_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature::bpp__bFromSweep__pf' has a wrong offset!");
static_assert(offsetof(BP_DontGo_C_BndEvt__Box_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature, bpp__SweepResult__pf__const) == 0x000020, "Member 'BP_DontGo_C_BndEvt__Box_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature::bpp__SweepResult__pf__const' has a wrong offset!");

// Function BP_DontGo.BP_DontGo_C.BndEvt__TriggerBox_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_DontGo_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    bpp__OverlappedComponent__pf;                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 bpp__OtherActor__pf;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    bpp__OtherComp__pf;                                // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__OtherBodyIndex__pf;                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_DontGo_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_DontGo_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_DontGo_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_DontGo_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_DontGo_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature, bpp__OverlappedComponent__pf) == 0x000000, "Member 'BP_DontGo_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature::bpp__OverlappedComponent__pf' has a wrong offset!");
static_assert(offsetof(BP_DontGo_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature, bpp__OtherActor__pf) == 0x000008, "Member 'BP_DontGo_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature::bpp__OtherActor__pf' has a wrong offset!");
static_assert(offsetof(BP_DontGo_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature, bpp__OtherComp__pf) == 0x000010, "Member 'BP_DontGo_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature::bpp__OtherComp__pf' has a wrong offset!");
static_assert(offsetof(BP_DontGo_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature, bpp__OtherBodyIndex__pf) == 0x000018, "Member 'BP_DontGo_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_99_ComponentEndOverlapSignature__DelegateSignature::bpp__OtherBodyIndex__pf' has a wrong offset!");

// Function BP_DontGo.BP_DontGo_C.CalcMoveLocationRotationFunc
// 0x0018 (0x0018 - 0x0000)
struct BP_DontGo_C_CalcMoveLocationRotationFunc final
{
public:
	struct FVector                                bpp__Location__pf;                                 // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__Rotation__pf;                                 // 0x000C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_DontGo_C_CalcMoveLocationRotationFunc) == 0x000004, "Wrong alignment on BP_DontGo_C_CalcMoveLocationRotationFunc");
static_assert(sizeof(BP_DontGo_C_CalcMoveLocationRotationFunc) == 0x000018, "Wrong size on BP_DontGo_C_CalcMoveLocationRotationFunc");
static_assert(offsetof(BP_DontGo_C_CalcMoveLocationRotationFunc, bpp__Location__pf) == 0x000000, "Member 'BP_DontGo_C_CalcMoveLocationRotationFunc::bpp__Location__pf' has a wrong offset!");
static_assert(offsetof(BP_DontGo_C_CalcMoveLocationRotationFunc, bpp__Rotation__pf) == 0x00000C, "Member 'BP_DontGo_C_CalcMoveLocationRotationFunc::bpp__Rotation__pf' has a wrong offset!");

// Function BP_DontGo.BP_DontGo_C.CalcReturnRotation
// 0x000C (0x000C - 0x0000)
struct BP_DontGo_C_CalcReturnRotation final
{
public:
	struct FVector                                bpp__InLocation__pf;                               // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_DontGo_C_CalcReturnRotation) == 0x000004, "Wrong alignment on BP_DontGo_C_CalcReturnRotation");
static_assert(sizeof(BP_DontGo_C_CalcReturnRotation) == 0x00000C, "Wrong size on BP_DontGo_C_CalcReturnRotation");
static_assert(offsetof(BP_DontGo_C_CalcReturnRotation, bpp__InLocation__pf) == 0x000000, "Member 'BP_DontGo_C_CalcReturnRotation::bpp__InLocation__pf' has a wrong offset!");

// Function BP_DontGo.BP_DontGo_C.CustomEvent_0
// 0x0010 (0x0010 - 0x0000)
struct BP_DontGo_C_CustomEvent_0 final
{
public:
	class AActor*                                 bpp__PlayerActor__pf;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 bpp__ControlActor__pf;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_DontGo_C_CustomEvent_0) == 0x000008, "Wrong alignment on BP_DontGo_C_CustomEvent_0");
static_assert(sizeof(BP_DontGo_C_CustomEvent_0) == 0x000010, "Wrong size on BP_DontGo_C_CustomEvent_0");
static_assert(offsetof(BP_DontGo_C_CustomEvent_0, bpp__PlayerActor__pf) == 0x000000, "Member 'BP_DontGo_C_CustomEvent_0::bpp__PlayerActor__pf' has a wrong offset!");
static_assert(offsetof(BP_DontGo_C_CustomEvent_0, bpp__ControlActor__pf) == 0x000008, "Member 'BP_DontGo_C_CustomEvent_0::bpp__ControlActor__pf' has a wrong offset!");

// Function BP_DontGo.BP_DontGo_C.CustomEvent_2
// 0x0010 (0x0010 - 0x0000)
struct BP_DontGo_C_CustomEvent_2 final
{
public:
	class AActor*                                 bpp__PlayerActor__pf;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 bpp__ControlActor__pf;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_DontGo_C_CustomEvent_2) == 0x000008, "Wrong alignment on BP_DontGo_C_CustomEvent_2");
static_assert(sizeof(BP_DontGo_C_CustomEvent_2) == 0x000010, "Wrong size on BP_DontGo_C_CustomEvent_2");
static_assert(offsetof(BP_DontGo_C_CustomEvent_2, bpp__PlayerActor__pf) == 0x000000, "Member 'BP_DontGo_C_CustomEvent_2::bpp__PlayerActor__pf' has a wrong offset!");
static_assert(offsetof(BP_DontGo_C_CustomEvent_2, bpp__ControlActor__pf) == 0x000008, "Member 'BP_DontGo_C_CustomEvent_2::bpp__ControlActor__pf' has a wrong offset!");

// Function BP_DontGo.BP_DontGo_C.ExecuteUbergraph_BP_DontGo_0
// 0x0004 (0x0004 - 0x0000)
struct BP_DontGo_C_ExecuteUbergraph_BP_DontGo_0 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_DontGo_C_ExecuteUbergraph_BP_DontGo_0) == 0x000004, "Wrong alignment on BP_DontGo_C_ExecuteUbergraph_BP_DontGo_0");
static_assert(sizeof(BP_DontGo_C_ExecuteUbergraph_BP_DontGo_0) == 0x000004, "Wrong size on BP_DontGo_C_ExecuteUbergraph_BP_DontGo_0");
static_assert(offsetof(BP_DontGo_C_ExecuteUbergraph_BP_DontGo_0, bpp__EntryPoint__pf) == 0x000000, "Member 'BP_DontGo_C_ExecuteUbergraph_BP_DontGo_0::bpp__EntryPoint__pf' has a wrong offset!");

// Function BP_DontGo.BP_DontGo_C.ExecuteUbergraph_BP_DontGo_3
// 0x0004 (0x0004 - 0x0000)
struct BP_DontGo_C_ExecuteUbergraph_BP_DontGo_3 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_DontGo_C_ExecuteUbergraph_BP_DontGo_3) == 0x000004, "Wrong alignment on BP_DontGo_C_ExecuteUbergraph_BP_DontGo_3");
static_assert(sizeof(BP_DontGo_C_ExecuteUbergraph_BP_DontGo_3) == 0x000004, "Wrong size on BP_DontGo_C_ExecuteUbergraph_BP_DontGo_3");
static_assert(offsetof(BP_DontGo_C_ExecuteUbergraph_BP_DontGo_3, bpp__EntryPoint__pf) == 0x000000, "Member 'BP_DontGo_C_ExecuteUbergraph_BP_DontGo_3::bpp__EntryPoint__pf' has a wrong offset!");

// Function BP_DontGo.BP_DontGo_C.GetTalkNpc
// 0x0008 (0x0008 - 0x0000)
struct BP_DontGo_C_GetTalkNpc final
{
public:
	class AJackScheduledNPC*                      bpp__TalkNpc__pf;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_DontGo_C_GetTalkNpc) == 0x000008, "Wrong alignment on BP_DontGo_C_GetTalkNpc");
static_assert(sizeof(BP_DontGo_C_GetTalkNpc) == 0x000008, "Wrong size on BP_DontGo_C_GetTalkNpc");
static_assert(offsetof(BP_DontGo_C_GetTalkNpc, bpp__TalkNpc__pf) == 0x000000, "Member 'BP_DontGo_C_GetTalkNpc::bpp__TalkNpc__pf' has a wrong offset!");

// Function BP_DontGo.BP_DontGo_C.IsReturnPlayer
// 0x0001 (0x0001 - 0x0000)
struct BP_DontGo_C_IsReturnPlayer final
{
public:
	bool                                          bpp__IsReturn__pf;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_DontGo_C_IsReturnPlayer) == 0x000001, "Wrong alignment on BP_DontGo_C_IsReturnPlayer");
static_assert(sizeof(BP_DontGo_C_IsReturnPlayer) == 0x000001, "Wrong size on BP_DontGo_C_IsReturnPlayer");
static_assert(offsetof(BP_DontGo_C_IsReturnPlayer, bpp__IsReturn__pf) == 0x000000, "Member 'BP_DontGo_C_IsReturnPlayer::bpp__IsReturn__pf' has a wrong offset!");

// Function BP_DontGo.BP_DontGo_C.SetBlockingEnable
// 0x0001 (0x0001 - 0x0000)
struct BP_DontGo_C_SetBlockingEnable final
{
public:
	bool                                          bpp__Enable__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_DontGo_C_SetBlockingEnable) == 0x000001, "Wrong alignment on BP_DontGo_C_SetBlockingEnable");
static_assert(sizeof(BP_DontGo_C_SetBlockingEnable) == 0x000001, "Wrong size on BP_DontGo_C_SetBlockingEnable");
static_assert(offsetof(BP_DontGo_C_SetBlockingEnable, bpp__Enable__pf) == 0x000000, "Member 'BP_DontGo_C_SetBlockingEnable::bpp__Enable__pf' has a wrong offset!");

// Function BP_DontGo.BP_DontGo_C.SetTimeZoneProc
// 0x0001 (0x0001 - 0x0000)
struct BP_DontGo_C_SetTimeZoneProc final
{
public:
	bool                                          bpp__Night__pf;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_DontGo_C_SetTimeZoneProc) == 0x000001, "Wrong alignment on BP_DontGo_C_SetTimeZoneProc");
static_assert(sizeof(BP_DontGo_C_SetTimeZoneProc) == 0x000001, "Wrong size on BP_DontGo_C_SetTimeZoneProc");
static_assert(offsetof(BP_DontGo_C_SetTimeZoneProc, bpp__Night__pf) == 0x000000, "Member 'BP_DontGo_C_SetTimeZoneProc::bpp__Night__pf' has a wrong offset!");

// Function BP_DontGo.BP_DontGo_C.Set Enable
// 0x0001 (0x0001 - 0x0000)
struct BP_DontGo_C_Set_Enable final
{
public:
	bool                                          bpp__Enable__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_DontGo_C_Set_Enable) == 0x000001, "Wrong alignment on BP_DontGo_C_Set_Enable");
static_assert(sizeof(BP_DontGo_C_Set_Enable) == 0x000001, "Wrong size on BP_DontGo_C_Set_Enable");
static_assert(offsetof(BP_DontGo_C_Set_Enable, bpp__Enable__pf) == 0x000000, "Member 'BP_DontGo_C_Set_Enable::bpp__Enable__pf' has a wrong offset!");

// Function BP_DontGo.BP_DontGo_C.Set Text ID
// 0x0008 (0x0008 - 0x0000)
struct BP_DontGo_C_Set_Text_ID final
{
public:
	class FName                                   bpp__NewTextID__pf;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_DontGo_C_Set_Text_ID) == 0x000004, "Wrong alignment on BP_DontGo_C_Set_Text_ID");
static_assert(sizeof(BP_DontGo_C_Set_Text_ID) == 0x000008, "Wrong size on BP_DontGo_C_Set_Text_ID");
static_assert(offsetof(BP_DontGo_C_Set_Text_ID, bpp__NewTextID__pf) == 0x000000, "Member 'BP_DontGo_C_Set_Text_ID::bpp__NewTextID__pf' has a wrong offset!");

}

