#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CsWindControl

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CsWindControl.BP_CsWindControl_C
// 0x0038 (0x03D0 - 0x0398)
class ABP_CsWindControl_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0398(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AWindDirectionalSource*                 CS_Wind;                                           // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CS_Mode;                                           // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B1[0x3];                                      // 0x03B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindRate_Env;                                      // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         WindRate_Chara;                                    // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         WindRate_Effect;                                   // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         WindRate_Master;                                   // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_COMP_WeatherAffect_C*               WeatherComponent;                                  // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_CsWindControl(int32 EntryPoint);
	void RenkeiEnd();
	void EndCutSceneBeforeUnload(class FName CSID);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void StartCutSceneCharacterSettingAfter(class FName CSID);
	void EndCutSceneFadInBefore(class FName CSID);
	void StartCutSceneFadeOutAfter(class FName CSID);
	void StartCutsceneBeforeLoad(class FName CSID);
	void EndCutScene(class FName CSID);
	void StartCutScene(class FName CSID);
	void RenkeiStart();
	void UserConstructionScript();
	void CsWindInitialize();
	void SetWeatherRate();
	void ResetWind();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CsWindControl_C">();
	}
	static class ABP_CsWindControl_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CsWindControl_C>();
	}
};
static_assert(alignof(ABP_CsWindControl_C) == 0x000008, "Wrong alignment on ABP_CsWindControl_C");
static_assert(sizeof(ABP_CsWindControl_C) == 0x0003D0, "Wrong size on ABP_CsWindControl_C");
static_assert(offsetof(ABP_CsWindControl_C, UberGraphFrame) == 0x000398, "Member 'ABP_CsWindControl_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CsWindControl_C, DefaultSceneRoot) == 0x0003A0, "Member 'ABP_CsWindControl_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_CsWindControl_C, CS_Wind) == 0x0003A8, "Member 'ABP_CsWindControl_C::CS_Wind' has a wrong offset!");
static_assert(offsetof(ABP_CsWindControl_C, CS_Mode) == 0x0003B0, "Member 'ABP_CsWindControl_C::CS_Mode' has a wrong offset!");
static_assert(offsetof(ABP_CsWindControl_C, WindRate_Env) == 0x0003B4, "Member 'ABP_CsWindControl_C::WindRate_Env' has a wrong offset!");
static_assert(offsetof(ABP_CsWindControl_C, WindRate_Chara) == 0x0003B8, "Member 'ABP_CsWindControl_C::WindRate_Chara' has a wrong offset!");
static_assert(offsetof(ABP_CsWindControl_C, WindRate_Effect) == 0x0003BC, "Member 'ABP_CsWindControl_C::WindRate_Effect' has a wrong offset!");
static_assert(offsetof(ABP_CsWindControl_C, WindRate_Master) == 0x0003C0, "Member 'ABP_CsWindControl_C::WindRate_Master' has a wrong offset!");
static_assert(offsetof(ABP_CsWindControl_C, WeatherComponent) == 0x0003C8, "Member 'ABP_CsWindControl_C::WeatherComponent' has a wrong offset!");

}

