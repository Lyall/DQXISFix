#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CsControl

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "STRUCT_SkyParam_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CsControl.BP_CsControl_C
// 0x0128 (0x04C0 - 0x0398)
class ABP_CsControl_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0398(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          OverrideSunRadius;                                 // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A9[0x3];                                      // 0x03A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SunRadius;                                         // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 TempSunRadius;                                     // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class ABP_SkyBase_C*                          SkeBase;                                           // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverrideSunPathAngle;                              // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OverrideSunPathAngleFromTrack;                     // 0x03C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3CA[0x2];                                      // 0x03CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SunPathAngle;                                      // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         TempSunPathAngle;                                  // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverrideMoonSize;                                  // 0x03D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D5[0x3];                                      // 0x03D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoonSize;                                          // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempMoonSize;                                      // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverrideMoonRot;                                   // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E1[0x3];                                      // 0x03E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               MoonRot;                                           // 0x03E4(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FRotator                               TempMoonRot;                                       // 0x03F0(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OverrideMoonLightBrightness;                       // 0x03FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FD[0x3];                                      // 0x03FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoonLightBrightness;                               // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_404[0x4];                                      // 0x0404(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSTRUCT_SkyParam>               TempSkyParameter;                                  // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          EnableFastChangeWeather;                           // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          FastChangeWeather;                                 // 0x0419(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	bool                                          OverrideCloudAlpha;                                // 0x041A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ForceUpdateMaterial_CloudAlpha;                    // 0x041B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CloudAlpha;                                        // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          OverrideWeatherChangeTime;                         // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_421[0x3];                                      // 0x0421(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WeatherChangeTime;                                 // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         OldWeatherChangeTime;                              // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempWeatherChangeTime;                             // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CSID;                                              // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TempInroomFlag;                                    // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OverrideInroom;                                    // 0x0439(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Inroom;                                            // 0x043A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor)
	bool                                          EnableEffectAllowCullDistance;                     // 0x043B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CSLevelActor;                                      // 0x0440(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          EnableLensFlareForCS;                              // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HighQualityTextureTag;                             // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LoadWaitTextureTag;                                // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         WeaponActor;                                       // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         TempStarRepeatscale;                               // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47C[0x4];                                      // 0x047C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 TempStarBrightness;                                // 0x0480(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          OverrideStarRepeatsclae;                           // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_491[0x3];                                      // 0x0491(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StarRepeatscale;                                   // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          OverrideStarBrightness;                            // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_499[0x3];                                      // 0x0499(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StarBrightness;                                    // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableThunder;                                     // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PauseTick;                                         // 0x04A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A2[0x6];                                      // 0x04A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DisableInactiveTag;                                // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableDayNightSound;                               // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsCsNight;                                         // 0x04B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          StartCheckTime;                                    // 0x04B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OverrideContactShadowLength;                       // 0x04B3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         ContactShadowLength;                               // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         TempContactShadowLength;                           // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_CsControl(int32 EntryPoint);
	void StartCutSceneCharacterSettingAfter(class FName CSID_0);
	void EndCutSceneBeforeUnload(class FName CSID_0);
	void TickStart();
	void InitializeFromDT();
	void StartCutScene(class FName CSID_0);
	void ResetSky();
	void InitializeSky();
	void ReceiveTick(float DeltaSeconds);
	void EndCutScene(class FName CSID_0);
	void EndCutSceneFadInBefore(class FName CSID_0);
	void ReceiveBeginPlay();
	void StartCutsceneBeforeLoad(class FName CSID_0);
	void StartCutSceneFadeOutAfter(class FName CSID_0);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CsControl_C">();
	}
	static class ABP_CsControl_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CsControl_C>();
	}
};
static_assert(alignof(ABP_CsControl_C) == 0x000008, "Wrong alignment on ABP_CsControl_C");
static_assert(sizeof(ABP_CsControl_C) == 0x0004C0, "Wrong size on ABP_CsControl_C");
static_assert(offsetof(ABP_CsControl_C, UberGraphFrame) == 0x000398, "Member 'ABP_CsControl_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, DefaultSceneRoot) == 0x0003A0, "Member 'ABP_CsControl_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, OverrideSunRadius) == 0x0003A8, "Member 'ABP_CsControl_C::OverrideSunRadius' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, SunRadius) == 0x0003AC, "Member 'ABP_CsControl_C::SunRadius' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, TempSunRadius) == 0x0003B0, "Member 'ABP_CsControl_C::TempSunRadius' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, SkeBase) == 0x0003C0, "Member 'ABP_CsControl_C::SkeBase' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, OverrideSunPathAngle) == 0x0003C8, "Member 'ABP_CsControl_C::OverrideSunPathAngle' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, OverrideSunPathAngleFromTrack) == 0x0003C9, "Member 'ABP_CsControl_C::OverrideSunPathAngleFromTrack' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, SunPathAngle) == 0x0003CC, "Member 'ABP_CsControl_C::SunPathAngle' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, TempSunPathAngle) == 0x0003D0, "Member 'ABP_CsControl_C::TempSunPathAngle' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, OverrideMoonSize) == 0x0003D4, "Member 'ABP_CsControl_C::OverrideMoonSize' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, MoonSize) == 0x0003D8, "Member 'ABP_CsControl_C::MoonSize' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, TempMoonSize) == 0x0003DC, "Member 'ABP_CsControl_C::TempMoonSize' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, OverrideMoonRot) == 0x0003E0, "Member 'ABP_CsControl_C::OverrideMoonRot' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, MoonRot) == 0x0003E4, "Member 'ABP_CsControl_C::MoonRot' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, TempMoonRot) == 0x0003F0, "Member 'ABP_CsControl_C::TempMoonRot' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, OverrideMoonLightBrightness) == 0x0003FC, "Member 'ABP_CsControl_C::OverrideMoonLightBrightness' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, MoonLightBrightness) == 0x000400, "Member 'ABP_CsControl_C::MoonLightBrightness' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, TempSkyParameter) == 0x000408, "Member 'ABP_CsControl_C::TempSkyParameter' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, EnableFastChangeWeather) == 0x000418, "Member 'ABP_CsControl_C::EnableFastChangeWeather' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, FastChangeWeather) == 0x000419, "Member 'ABP_CsControl_C::FastChangeWeather' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, OverrideCloudAlpha) == 0x00041A, "Member 'ABP_CsControl_C::OverrideCloudAlpha' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, ForceUpdateMaterial_CloudAlpha) == 0x00041B, "Member 'ABP_CsControl_C::ForceUpdateMaterial_CloudAlpha' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, CloudAlpha) == 0x00041C, "Member 'ABP_CsControl_C::CloudAlpha' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, OverrideWeatherChangeTime) == 0x000420, "Member 'ABP_CsControl_C::OverrideWeatherChangeTime' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, WeatherChangeTime) == 0x000424, "Member 'ABP_CsControl_C::WeatherChangeTime' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, OldWeatherChangeTime) == 0x000428, "Member 'ABP_CsControl_C::OldWeatherChangeTime' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, TempWeatherChangeTime) == 0x00042C, "Member 'ABP_CsControl_C::TempWeatherChangeTime' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, CSID) == 0x000430, "Member 'ABP_CsControl_C::CSID' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, TempInroomFlag) == 0x000438, "Member 'ABP_CsControl_C::TempInroomFlag' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, OverrideInroom) == 0x000439, "Member 'ABP_CsControl_C::OverrideInroom' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, Inroom) == 0x00043A, "Member 'ABP_CsControl_C::Inroom' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, EnableEffectAllowCullDistance) == 0x00043B, "Member 'ABP_CsControl_C::EnableEffectAllowCullDistance' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, CSLevelActor) == 0x000440, "Member 'ABP_CsControl_C::CSLevelActor' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, EnableLensFlareForCS) == 0x000450, "Member 'ABP_CsControl_C::EnableLensFlareForCS' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, HighQualityTextureTag) == 0x000458, "Member 'ABP_CsControl_C::HighQualityTextureTag' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, LoadWaitTextureTag) == 0x000460, "Member 'ABP_CsControl_C::LoadWaitTextureTag' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, WeaponActor) == 0x000468, "Member 'ABP_CsControl_C::WeaponActor' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, TempStarRepeatscale) == 0x000478, "Member 'ABP_CsControl_C::TempStarRepeatscale' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, TempStarBrightness) == 0x000480, "Member 'ABP_CsControl_C::TempStarBrightness' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, OverrideStarRepeatsclae) == 0x000490, "Member 'ABP_CsControl_C::OverrideStarRepeatsclae' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, StarRepeatscale) == 0x000494, "Member 'ABP_CsControl_C::StarRepeatscale' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, OverrideStarBrightness) == 0x000498, "Member 'ABP_CsControl_C::OverrideStarBrightness' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, StarBrightness) == 0x00049C, "Member 'ABP_CsControl_C::StarBrightness' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, EnableThunder) == 0x0004A0, "Member 'ABP_CsControl_C::EnableThunder' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, PauseTick) == 0x0004A1, "Member 'ABP_CsControl_C::PauseTick' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, DisableInactiveTag) == 0x0004A8, "Member 'ABP_CsControl_C::DisableInactiveTag' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, EnableDayNightSound) == 0x0004B0, "Member 'ABP_CsControl_C::EnableDayNightSound' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, IsCsNight) == 0x0004B1, "Member 'ABP_CsControl_C::IsCsNight' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, StartCheckTime) == 0x0004B2, "Member 'ABP_CsControl_C::StartCheckTime' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, OverrideContactShadowLength) == 0x0004B3, "Member 'ABP_CsControl_C::OverrideContactShadowLength' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, ContactShadowLength) == 0x0004B4, "Member 'ABP_CsControl_C::ContactShadowLength' has a wrong offset!");
static_assert(offsetof(ABP_CsControl_C, TempContactShadowLength) == 0x0004B8, "Member 'ABP_CsControl_C::TempContactShadowLength' has a wrong offset!");

}

