#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FLIB_Fade

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "JackGame_structs.hpp"


namespace SDK::Params
{

// Function BP_FLIB_Fade.BP_FLIB_Fade_C.SetFadeCore
// 0x0040 (0x0040 - 0x0000)
struct BP_FLIB_Fade_C_SetFadeCore final
{
public:
	EJackCameraFadeCategory                       Layer;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackCameraFadeZLayer                         ZLayer;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeAlpha;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackFadeTime                                 FadeTime;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultFadeTime;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackFadeColor                                FadeColorType;                                     // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFadeTime_ReturnValue;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetFadeColor_ReturnValue;                 // 0x0028(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_Fade_C_SetFadeCore) == 0x000008, "Wrong alignment on BP_FLIB_Fade_C_SetFadeCore");
static_assert(sizeof(BP_FLIB_Fade_C_SetFadeCore) == 0x000040, "Wrong size on BP_FLIB_Fade_C_SetFadeCore");
static_assert(offsetof(BP_FLIB_Fade_C_SetFadeCore, Layer) == 0x000000, "Member 'BP_FLIB_Fade_C_SetFadeCore::Layer' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Fade_C_SetFadeCore, ZLayer) == 0x000001, "Member 'BP_FLIB_Fade_C_SetFadeCore::ZLayer' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Fade_C_SetFadeCore, FadeAlpha) == 0x000004, "Member 'BP_FLIB_Fade_C_SetFadeCore::FadeAlpha' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Fade_C_SetFadeCore, FadeTime) == 0x000008, "Member 'BP_FLIB_Fade_C_SetFadeCore::FadeTime' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Fade_C_SetFadeCore, DefaultFadeTime) == 0x00000C, "Member 'BP_FLIB_Fade_C_SetFadeCore::DefaultFadeTime' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Fade_C_SetFadeCore, FadeColorType) == 0x000010, "Member 'BP_FLIB_Fade_C_SetFadeCore::FadeColorType' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Fade_C_SetFadeCore, __WorldContext) == 0x000018, "Member 'BP_FLIB_Fade_C_SetFadeCore::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Fade_C_SetFadeCore, Temp_bool_Variable) == 0x000020, "Member 'BP_FLIB_Fade_C_SetFadeCore::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Fade_C_SetFadeCore, CallFunc_GetFadeTime_ReturnValue) == 0x000024, "Member 'BP_FLIB_Fade_C_SetFadeCore::CallFunc_GetFadeTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Fade_C_SetFadeCore, CallFunc_GetFadeColor_ReturnValue) == 0x000028, "Member 'BP_FLIB_Fade_C_SetFadeCore::CallFunc_GetFadeColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Fade_C_SetFadeCore, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000038, "Member 'BP_FLIB_Fade_C_SetFadeCore::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Fade_C_SetFadeCore, K2Node_Select_Default) == 0x00003C, "Member 'BP_FLIB_Fade_C_SetFadeCore::K2Node_Select_Default' has a wrong offset!");

}

