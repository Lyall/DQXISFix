#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FLIB_UIMap

#include "Basic.hpp"

#include "JackGame_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_FLIB_UIMap.BP_FLIB_UIMap_C.SnapWidgetToPanelBottom
// 0x0070 (0x0070 - 0x0000)
struct BP_FLIB_UIMap_C_SnapWidgetToPanelBottom final
{
public:
	class UCanvasPanel*                           TargetRootPanel;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           TargetPanel;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGWidgetBase*                     SnapWidget;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPanelSize_ReturnValue;                 // 0x0020(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X2;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y2;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPanelSize_ReturnValue2;                // 0x003C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPanelPosition_ReturnValue;             // 0x0044(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X3;                         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y3;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X4;                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y4;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue3;              // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0068(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_UIMap_C_SnapWidgetToPanelBottom) == 0x000008, "Wrong alignment on BP_FLIB_UIMap_C_SnapWidgetToPanelBottom");
static_assert(sizeof(BP_FLIB_UIMap_C_SnapWidgetToPanelBottom) == 0x000070, "Wrong size on BP_FLIB_UIMap_C_SnapWidgetToPanelBottom");
static_assert(offsetof(BP_FLIB_UIMap_C_SnapWidgetToPanelBottom, TargetRootPanel) == 0x000000, "Member 'BP_FLIB_UIMap_C_SnapWidgetToPanelBottom::TargetRootPanel' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SnapWidgetToPanelBottom, TargetPanel) == 0x000008, "Member 'BP_FLIB_UIMap_C_SnapWidgetToPanelBottom::TargetPanel' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SnapWidgetToPanelBottom, SnapWidget) == 0x000010, "Member 'BP_FLIB_UIMap_C_SnapWidgetToPanelBottom::SnapWidget' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SnapWidgetToPanelBottom, __WorldContext) == 0x000018, "Member 'BP_FLIB_UIMap_C_SnapWidgetToPanelBottom::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SnapWidgetToPanelBottom, CallFunc_GetPanelSize_ReturnValue) == 0x000020, "Member 'BP_FLIB_UIMap_C_SnapWidgetToPanelBottom::CallFunc_GetPanelSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SnapWidgetToPanelBottom, CallFunc_BreakVector2D_X) == 0x000028, "Member 'BP_FLIB_UIMap_C_SnapWidgetToPanelBottom::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SnapWidgetToPanelBottom, CallFunc_BreakVector2D_Y) == 0x00002C, "Member 'BP_FLIB_UIMap_C_SnapWidgetToPanelBottom::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SnapWidgetToPanelBottom, CallFunc_BreakVector2D_X2) == 0x000030, "Member 'BP_FLIB_UIMap_C_SnapWidgetToPanelBottom::CallFunc_BreakVector2D_X2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SnapWidgetToPanelBottom, CallFunc_BreakVector2D_Y2) == 0x000034, "Member 'BP_FLIB_UIMap_C_SnapWidgetToPanelBottom::CallFunc_BreakVector2D_Y2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SnapWidgetToPanelBottom, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_FLIB_UIMap_C_SnapWidgetToPanelBottom::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SnapWidgetToPanelBottom, CallFunc_GetPanelSize_ReturnValue2) == 0x00003C, "Member 'BP_FLIB_UIMap_C_SnapWidgetToPanelBottom::CallFunc_GetPanelSize_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SnapWidgetToPanelBottom, CallFunc_GetPanelPosition_ReturnValue) == 0x000044, "Member 'BP_FLIB_UIMap_C_SnapWidgetToPanelBottom::CallFunc_GetPanelPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SnapWidgetToPanelBottom, CallFunc_BreakVector2D_X3) == 0x00004C, "Member 'BP_FLIB_UIMap_C_SnapWidgetToPanelBottom::CallFunc_BreakVector2D_X3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SnapWidgetToPanelBottom, CallFunc_BreakVector2D_Y3) == 0x000050, "Member 'BP_FLIB_UIMap_C_SnapWidgetToPanelBottom::CallFunc_BreakVector2D_Y3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SnapWidgetToPanelBottom, CallFunc_BreakVector2D_X4) == 0x000054, "Member 'BP_FLIB_UIMap_C_SnapWidgetToPanelBottom::CallFunc_BreakVector2D_X4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SnapWidgetToPanelBottom, CallFunc_BreakVector2D_Y4) == 0x000058, "Member 'BP_FLIB_UIMap_C_SnapWidgetToPanelBottom::CallFunc_BreakVector2D_Y4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SnapWidgetToPanelBottom, CallFunc_Add_FloatFloat_ReturnValue) == 0x00005C, "Member 'BP_FLIB_UIMap_C_SnapWidgetToPanelBottom::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SnapWidgetToPanelBottom, CallFunc_Add_FloatFloat_ReturnValue2) == 0x000060, "Member 'BP_FLIB_UIMap_C_SnapWidgetToPanelBottom::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SnapWidgetToPanelBottom, CallFunc_Add_FloatFloat_ReturnValue3) == 0x000064, "Member 'BP_FLIB_UIMap_C_SnapWidgetToPanelBottom::CallFunc_Add_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SnapWidgetToPanelBottom, CallFunc_MakeVector2D_ReturnValue) == 0x000068, "Member 'BP_FLIB_UIMap_C_SnapWidgetToPanelBottom::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UIMap.BP_FLIB_UIMap_C.GetGimmickAngleD12
// 0x0078 (0x0078 - 0x0000)
struct BP_FLIB_UIMap_C_GetGimmickAngleD12 final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetGameFlagBool_ReturnValue;              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetGameFlagBool_ReturnValue2;             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetGameFlagBool_ReturnValue3;             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetGameFlagBool_ReturnValue4;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetGameFlagBool_ReturnValue5;             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable2;                              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable2;                               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable3;                              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable4;                              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable3;                               // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select2_Default;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable5;                              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable6;                              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable4;                               // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select3_Default;                            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable7;                              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable8;                              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable5;                               // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select4_Default;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable9;                              // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable10;                             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select5_Default;                            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue3;              // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue4;              // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue5;              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_UIMap_C_GetGimmickAngleD12) == 0x000008, "Wrong alignment on BP_FLIB_UIMap_C_GetGimmickAngleD12");
static_assert(sizeof(BP_FLIB_UIMap_C_GetGimmickAngleD12) == 0x000078, "Wrong size on BP_FLIB_UIMap_C_GetGimmickAngleD12");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, __WorldContext) == 0x000000, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, Angle) == 0x000008, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::Angle' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, Temp_bool_Variable) == 0x00000C, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, CallFunc_GetGameFlagBool_ReturnValue) == 0x00000D, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::CallFunc_GetGameFlagBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, CallFunc_GetGameFlagBool_ReturnValue2) == 0x00000E, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::CallFunc_GetGameFlagBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, CallFunc_GetGameFlagBool_ReturnValue3) == 0x00000F, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::CallFunc_GetGameFlagBool_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, CallFunc_GetGameFlagBool_ReturnValue4) == 0x000010, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::CallFunc_GetGameFlagBool_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, CallFunc_GetGameFlagBool_ReturnValue5) == 0x000011, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::CallFunc_GetGameFlagBool_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, Temp_float_Variable) == 0x000014, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, Temp_float_Variable2) == 0x000018, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::Temp_float_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, Temp_bool_Variable2) == 0x00001C, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, K2Node_Select_Default) == 0x000020, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, Temp_float_Variable3) == 0x000024, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::Temp_float_Variable3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, Temp_float_Variable4) == 0x000028, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::Temp_float_Variable4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, Temp_bool_Variable3) == 0x00002C, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, K2Node_Select2_Default) == 0x000030, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, Temp_float_Variable5) == 0x000034, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::Temp_float_Variable5' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, Temp_float_Variable6) == 0x000038, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::Temp_float_Variable6' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, Temp_bool_Variable4) == 0x00003C, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::Temp_bool_Variable4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, K2Node_Select3_Default) == 0x000040, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::K2Node_Select3_Default' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, Temp_float_Variable7) == 0x000044, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::Temp_float_Variable7' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, Temp_float_Variable8) == 0x000048, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::Temp_float_Variable8' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, Temp_bool_Variable5) == 0x00004C, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::Temp_bool_Variable5' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, K2Node_Select4_Default) == 0x000050, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::K2Node_Select4_Default' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, Temp_float_Variable9) == 0x000054, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::Temp_float_Variable9' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, Temp_float_Variable10) == 0x000058, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::Temp_float_Variable10' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, K2Node_Select5_Default) == 0x00005C, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::K2Node_Select5_Default' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, CallFunc_Add_FloatFloat_ReturnValue) == 0x000060, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, CallFunc_Add_FloatFloat_ReturnValue2) == 0x000064, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, CallFunc_Add_FloatFloat_ReturnValue3) == 0x000068, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::CallFunc_Add_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, CallFunc_Add_FloatFloat_ReturnValue4) == 0x00006C, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::CallFunc_Add_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_GetGimmickAngleD12, CallFunc_Add_FloatFloat_ReturnValue5) == 0x000070, "Member 'BP_FLIB_UIMap_C_GetGimmickAngleD12::CallFunc_Add_FloatFloat_ReturnValue5' has a wrong offset!");

// Function BP_FLIB_UIMap.BP_FLIB_UIMap_C.UpdateBoukenGuideButtonStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_UIMap_C_UpdateBoukenGuideButtonStatus final
{
public:
	class UWBP_Menu_Parts_008_modern_C*           Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bVisible;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_UIMap_C_UpdateBoukenGuideButtonStatus) == 0x000008, "Wrong alignment on BP_FLIB_UIMap_C_UpdateBoukenGuideButtonStatus");
static_assert(sizeof(BP_FLIB_UIMap_C_UpdateBoukenGuideButtonStatus) == 0x000018, "Wrong size on BP_FLIB_UIMap_C_UpdateBoukenGuideButtonStatus");
static_assert(offsetof(BP_FLIB_UIMap_C_UpdateBoukenGuideButtonStatus, Button) == 0x000000, "Member 'BP_FLIB_UIMap_C_UpdateBoukenGuideButtonStatus::Button' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_UpdateBoukenGuideButtonStatus, bVisible) == 0x000008, "Member 'BP_FLIB_UIMap_C_UpdateBoukenGuideButtonStatus::bVisible' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_UpdateBoukenGuideButtonStatus, __WorldContext) == 0x000010, "Member 'BP_FLIB_UIMap_C_UpdateBoukenGuideButtonStatus::__WorldContext' has a wrong offset!");

// Function BP_FLIB_UIMap.BP_FLIB_UIMap_C.UpdateMapSymbolVisibleButtonStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_UIMap_C_UpdateMapSymbolVisibleButtonStatus final
{
public:
	class UWBP_Menu_Parts_008_modern_C*           Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bVisible;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_UIMap_C_UpdateMapSymbolVisibleButtonStatus) == 0x000008, "Wrong alignment on BP_FLIB_UIMap_C_UpdateMapSymbolVisibleButtonStatus");
static_assert(sizeof(BP_FLIB_UIMap_C_UpdateMapSymbolVisibleButtonStatus) == 0x000018, "Wrong size on BP_FLIB_UIMap_C_UpdateMapSymbolVisibleButtonStatus");
static_assert(offsetof(BP_FLIB_UIMap_C_UpdateMapSymbolVisibleButtonStatus, Button) == 0x000000, "Member 'BP_FLIB_UIMap_C_UpdateMapSymbolVisibleButtonStatus::Button' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_UpdateMapSymbolVisibleButtonStatus, bVisible) == 0x000008, "Member 'BP_FLIB_UIMap_C_UpdateMapSymbolVisibleButtonStatus::bVisible' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_UpdateMapSymbolVisibleButtonStatus, __WorldContext) == 0x000010, "Member 'BP_FLIB_UIMap_C_UpdateMapSymbolVisibleButtonStatus::__WorldContext' has a wrong offset!");

// Function BP_FLIB_UIMap.BP_FLIB_UIMap_C.IsSeaOrSkyMap
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_UIMap_C_IsSeaOrSkyMap final
{
public:
	class FName                                   MapId;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreSeaCheck;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnoreSkyCheck;                                    // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue2;         // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue3;         // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue4;         // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue2;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue3;                   // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_UIMap_C_IsSeaOrSkyMap) == 0x000008, "Wrong alignment on BP_FLIB_UIMap_C_IsSeaOrSkyMap");
static_assert(sizeof(BP_FLIB_UIMap_C_IsSeaOrSkyMap) == 0x000028, "Wrong size on BP_FLIB_UIMap_C_IsSeaOrSkyMap");
static_assert(offsetof(BP_FLIB_UIMap_C_IsSeaOrSkyMap, MapId) == 0x000000, "Member 'BP_FLIB_UIMap_C_IsSeaOrSkyMap::MapId' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_IsSeaOrSkyMap, IgnoreSeaCheck) == 0x000008, "Member 'BP_FLIB_UIMap_C_IsSeaOrSkyMap::IgnoreSeaCheck' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_IsSeaOrSkyMap, IgnoreSkyCheck) == 0x000009, "Member 'BP_FLIB_UIMap_C_IsSeaOrSkyMap::IgnoreSkyCheck' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_IsSeaOrSkyMap, __WorldContext) == 0x000010, "Member 'BP_FLIB_UIMap_C_IsSeaOrSkyMap::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_IsSeaOrSkyMap, Result) == 0x000018, "Member 'BP_FLIB_UIMap_C_IsSeaOrSkyMap::Result' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_IsSeaOrSkyMap, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000019, "Member 'BP_FLIB_UIMap_C_IsSeaOrSkyMap::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_IsSeaOrSkyMap, CallFunc_Not_PreBool_ReturnValue) == 0x00001A, "Member 'BP_FLIB_UIMap_C_IsSeaOrSkyMap::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_IsSeaOrSkyMap, CallFunc_Not_PreBool_ReturnValue2) == 0x00001B, "Member 'BP_FLIB_UIMap_C_IsSeaOrSkyMap::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_IsSeaOrSkyMap, CallFunc_EqualEqual_NameName_ReturnValue2) == 0x00001C, "Member 'BP_FLIB_UIMap_C_IsSeaOrSkyMap::CallFunc_EqualEqual_NameName_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_IsSeaOrSkyMap, CallFunc_EqualEqual_NameName_ReturnValue3) == 0x00001D, "Member 'BP_FLIB_UIMap_C_IsSeaOrSkyMap::CallFunc_EqualEqual_NameName_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_IsSeaOrSkyMap, CallFunc_EqualEqual_NameName_ReturnValue4) == 0x00001E, "Member 'BP_FLIB_UIMap_C_IsSeaOrSkyMap::CallFunc_EqualEqual_NameName_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_IsSeaOrSkyMap, CallFunc_BooleanOR_ReturnValue) == 0x00001F, "Member 'BP_FLIB_UIMap_C_IsSeaOrSkyMap::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_IsSeaOrSkyMap, CallFunc_BooleanOR_ReturnValue2) == 0x000020, "Member 'BP_FLIB_UIMap_C_IsSeaOrSkyMap::CallFunc_BooleanOR_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_IsSeaOrSkyMap, CallFunc_BooleanAND_ReturnValue) == 0x000021, "Member 'BP_FLIB_UIMap_C_IsSeaOrSkyMap::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_IsSeaOrSkyMap, CallFunc_BooleanAND_ReturnValue2) == 0x000022, "Member 'BP_FLIB_UIMap_C_IsSeaOrSkyMap::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_IsSeaOrSkyMap, CallFunc_BooleanOR_ReturnValue3) == 0x000023, "Member 'BP_FLIB_UIMap_C_IsSeaOrSkyMap::CallFunc_BooleanOR_ReturnValue3' has a wrong offset!");

// Function BP_FLIB_UIMap.BP_FLIB_UIMap_C.UpdatePCMarkerDisplayMethod
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_UIMap_C_UpdatePCMarkerDisplayMethod final
{
public:
	class UJackUMGMapController*                  MapController;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_Menu_WorldMap_Pc_000_C*            PCMarkerWBP;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGMapFloorInfo*                   FloorInfo;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetParentMapVolumeID_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TestsWorldMapState_ReturnValue;           // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_UIMap_C_UpdatePCMarkerDisplayMethod) == 0x000008, "Wrong alignment on BP_FLIB_UIMap_C_UpdatePCMarkerDisplayMethod");
static_assert(sizeof(BP_FLIB_UIMap_C_UpdatePCMarkerDisplayMethod) == 0x000030, "Wrong size on BP_FLIB_UIMap_C_UpdatePCMarkerDisplayMethod");
static_assert(offsetof(BP_FLIB_UIMap_C_UpdatePCMarkerDisplayMethod, MapController) == 0x000000, "Member 'BP_FLIB_UIMap_C_UpdatePCMarkerDisplayMethod::MapController' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_UpdatePCMarkerDisplayMethod, PCMarkerWBP) == 0x000008, "Member 'BP_FLIB_UIMap_C_UpdatePCMarkerDisplayMethod::PCMarkerWBP' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_UpdatePCMarkerDisplayMethod, FloorInfo) == 0x000010, "Member 'BP_FLIB_UIMap_C_UpdatePCMarkerDisplayMethod::FloorInfo' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_UpdatePCMarkerDisplayMethod, __WorldContext) == 0x000018, "Member 'BP_FLIB_UIMap_C_UpdatePCMarkerDisplayMethod::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_UpdatePCMarkerDisplayMethod, CallFunc_GetParentMapVolumeID_ReturnValue) == 0x000020, "Member 'BP_FLIB_UIMap_C_UpdatePCMarkerDisplayMethod::CallFunc_GetParentMapVolumeID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_UpdatePCMarkerDisplayMethod, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000028, "Member 'BP_FLIB_UIMap_C_UpdatePCMarkerDisplayMethod::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_UpdatePCMarkerDisplayMethod, K2Node_SwitchEnum_CmpSuccess) == 0x000029, "Member 'BP_FLIB_UIMap_C_UpdatePCMarkerDisplayMethod::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_UpdatePCMarkerDisplayMethod, CallFunc_TestsWorldMapState_ReturnValue) == 0x00002A, "Member 'BP_FLIB_UIMap_C_UpdatePCMarkerDisplayMethod::CallFunc_TestsWorldMapState_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UIMap.BP_FLIB_UIMap_C.IsDisplayingSeaSkyMap
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_UIMap_C_IsDisplayingSeaSkyMap final
{
public:
	class UJackUMGMapController*                  MapController;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisplaying;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetMapID_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSeaOrSkyMap_Result;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_UIMap_C_IsDisplayingSeaSkyMap) == 0x000008, "Wrong alignment on BP_FLIB_UIMap_C_IsDisplayingSeaSkyMap");
static_assert(sizeof(BP_FLIB_UIMap_C_IsDisplayingSeaSkyMap) == 0x000028, "Wrong size on BP_FLIB_UIMap_C_IsDisplayingSeaSkyMap");
static_assert(offsetof(BP_FLIB_UIMap_C_IsDisplayingSeaSkyMap, MapController) == 0x000000, "Member 'BP_FLIB_UIMap_C_IsDisplayingSeaSkyMap::MapController' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_IsDisplayingSeaSkyMap, __WorldContext) == 0x000008, "Member 'BP_FLIB_UIMap_C_IsDisplayingSeaSkyMap::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_IsDisplayingSeaSkyMap, bDisplaying) == 0x000010, "Member 'BP_FLIB_UIMap_C_IsDisplayingSeaSkyMap::bDisplaying' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_IsDisplayingSeaSkyMap, CallFunc_GetMapID_ReturnValue) == 0x000018, "Member 'BP_FLIB_UIMap_C_IsDisplayingSeaSkyMap::CallFunc_GetMapID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_IsDisplayingSeaSkyMap, CallFunc_IsSeaOrSkyMap_Result) == 0x000020, "Member 'BP_FLIB_UIMap_C_IsDisplayingSeaSkyMap::CallFunc_IsSeaOrSkyMap_Result' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_IsDisplayingSeaSkyMap, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000021, "Member 'BP_FLIB_UIMap_C_IsDisplayingSeaSkyMap::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_IsDisplayingSeaSkyMap, CallFunc_BooleanAND_ReturnValue) == 0x000022, "Member 'BP_FLIB_UIMap_C_IsDisplayingSeaSkyMap::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UIMap.BP_FLIB_UIMap_C.HasSekaitizu
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_UIMap_C_HasSekaitizu final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGAccessorItem*                   CallFunc_GetAccessorItem_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindItemFromInBag_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_UIMap_C_HasSekaitizu) == 0x000008, "Wrong alignment on BP_FLIB_UIMap_C_HasSekaitizu");
static_assert(sizeof(BP_FLIB_UIMap_C_HasSekaitizu) == 0x000028, "Wrong size on BP_FLIB_UIMap_C_HasSekaitizu");
static_assert(offsetof(BP_FLIB_UIMap_C_HasSekaitizu, __WorldContext) == 0x000000, "Member 'BP_FLIB_UIMap_C_HasSekaitizu::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_HasSekaitizu, Result) == 0x000008, "Member 'BP_FLIB_UIMap_C_HasSekaitizu::Result' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_HasSekaitizu, CallFunc_GetUMGManager_ReturnValue) == 0x000010, "Member 'BP_FLIB_UIMap_C_HasSekaitizu::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_HasSekaitizu, CallFunc_GetAccessorItem_ReturnValue) == 0x000018, "Member 'BP_FLIB_UIMap_C_HasSekaitizu::CallFunc_GetAccessorItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_HasSekaitizu, CallFunc_FindItemFromInBag_ReturnValue) == 0x000020, "Member 'BP_FLIB_UIMap_C_HasSekaitizu::CallFunc_FindItemFromInBag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_HasSekaitizu, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000024, "Member 'BP_FLIB_UIMap_C_HasSekaitizu::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UIMap.BP_FLIB_UIMap_C.SetupMapTextWidget
// 0x0060 (0x0060 - 0x0000)
struct BP_FLIB_UIMap_C_SetupMapTextWidget final
{
public:
	class UJackUMGWorldMapWidget*                 WorldMap;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGMapFloorInfo*                   FloorInfo;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           CallFunc_GetMapTextDrawCanvas_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGMainMapOverlayWidgetBase*       CallFunc_GetMapTextWidget_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ClassClass_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGWidgetBase*                     CallFunc_AddUMGRootWidget_ReturnValue;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGMainMapOverlayWidgetBase*       K2Node_DynamicCast_AsJack_UMGMain_Map_Overlay_Widget_Base; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGMainMapOverlayWidgetBase*       CallFunc_SetMapTextWidget_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_UIMap_C_SetupMapTextWidget) == 0x000008, "Wrong alignment on BP_FLIB_UIMap_C_SetupMapTextWidget");
static_assert(sizeof(BP_FLIB_UIMap_C_SetupMapTextWidget) == 0x000060, "Wrong size on BP_FLIB_UIMap_C_SetupMapTextWidget");
static_assert(offsetof(BP_FLIB_UIMap_C_SetupMapTextWidget, WorldMap) == 0x000000, "Member 'BP_FLIB_UIMap_C_SetupMapTextWidget::WorldMap' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SetupMapTextWidget, FloorInfo) == 0x000008, "Member 'BP_FLIB_UIMap_C_SetupMapTextWidget::FloorInfo' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SetupMapTextWidget, __WorldContext) == 0x000010, "Member 'BP_FLIB_UIMap_C_SetupMapTextWidget::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SetupMapTextWidget, CallFunc_GetMapTextDrawCanvas_ReturnValue) == 0x000018, "Member 'BP_FLIB_UIMap_C_SetupMapTextWidget::CallFunc_GetMapTextDrawCanvas_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SetupMapTextWidget, CallFunc_GetUMGManager_ReturnValue) == 0x000020, "Member 'BP_FLIB_UIMap_C_SetupMapTextWidget::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SetupMapTextWidget, CallFunc_GetMapTextWidget_ReturnValue) == 0x000028, "Member 'BP_FLIB_UIMap_C_SetupMapTextWidget::CallFunc_GetMapTextWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SetupMapTextWidget, CallFunc_NotEqual_ClassClass_ReturnValue) == 0x000030, "Member 'BP_FLIB_UIMap_C_SetupMapTextWidget::CallFunc_NotEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SetupMapTextWidget, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000031, "Member 'BP_FLIB_UIMap_C_SetupMapTextWidget::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SetupMapTextWidget, CallFunc_AddUMGRootWidget_ReturnValue) == 0x000038, "Member 'BP_FLIB_UIMap_C_SetupMapTextWidget::CallFunc_AddUMGRootWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SetupMapTextWidget, K2Node_DynamicCast_AsJack_UMGMain_Map_Overlay_Widget_Base) == 0x000040, "Member 'BP_FLIB_UIMap_C_SetupMapTextWidget::K2Node_DynamicCast_AsJack_UMGMain_Map_Overlay_Widget_Base' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SetupMapTextWidget, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_FLIB_UIMap_C_SetupMapTextWidget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SetupMapTextWidget, CallFunc_SetMapTextWidget_ReturnValue) == 0x000050, "Member 'BP_FLIB_UIMap_C_SetupMapTextWidget::CallFunc_SetMapTextWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_SetupMapTextWidget, CallFunc_AddChildToCanvas_ReturnValue) == 0x000058, "Member 'BP_FLIB_UIMap_C_SetupMapTextWidget::CallFunc_AddChildToCanvas_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UIMap.BP_FLIB_UIMap_C.PlayEnterSE
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_UIMap_C_PlayEnterSE final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGManager*                        CallFunc_GetUMGManager_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJackUMGSoundSet*                       CallFunc_GetSoundSet_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FLIB_UIMap_C_PlayEnterSE) == 0x000008, "Wrong alignment on BP_FLIB_UIMap_C_PlayEnterSE");
static_assert(sizeof(BP_FLIB_UIMap_C_PlayEnterSE) == 0x000018, "Wrong size on BP_FLIB_UIMap_C_PlayEnterSE");
static_assert(offsetof(BP_FLIB_UIMap_C_PlayEnterSE, __WorldContext) == 0x000000, "Member 'BP_FLIB_UIMap_C_PlayEnterSE::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_PlayEnterSE, CallFunc_GetUMGManager_ReturnValue) == 0x000008, "Member 'BP_FLIB_UIMap_C_PlayEnterSE::CallFunc_GetUMGManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_PlayEnterSE, CallFunc_GetSoundSet_ReturnValue) == 0x000010, "Member 'BP_FLIB_UIMap_C_PlayEnterSE::CallFunc_GetSoundSet_ReturnValue' has a wrong offset!");

// Function BP_FLIB_UIMap.BP_FLIB_UIMap_C.CheckRuraAvailable
// 0x0040 (0x0040 - 0x0000)
struct BP_FLIB_UIMap_C_CheckRuraAvailable final
{
public:
	bool                                          bDisplaysUnavaiableMessage;                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAvaiable;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackMessageArgumentData>       Temp_struct_Variable;                              // 0x0018(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_IsUIDisableCommandByFish_IsDisableCommandByFish; // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJackUMGSerifuWindowController*         CallFunc_DisplaySerifuWindowAtTextID_ReturnValue;  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FLIB_UIMap_C_CheckRuraAvailable) == 0x000008, "Wrong alignment on BP_FLIB_UIMap_C_CheckRuraAvailable");
static_assert(sizeof(BP_FLIB_UIMap_C_CheckRuraAvailable) == 0x000040, "Wrong size on BP_FLIB_UIMap_C_CheckRuraAvailable");
static_assert(offsetof(BP_FLIB_UIMap_C_CheckRuraAvailable, bDisplaysUnavaiableMessage) == 0x000000, "Member 'BP_FLIB_UIMap_C_CheckRuraAvailable::bDisplaysUnavaiableMessage' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_CheckRuraAvailable, __WorldContext) == 0x000008, "Member 'BP_FLIB_UIMap_C_CheckRuraAvailable::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_CheckRuraAvailable, bAvaiable) == 0x000010, "Member 'BP_FLIB_UIMap_C_CheckRuraAvailable::bAvaiable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_CheckRuraAvailable, Temp_struct_Variable) == 0x000018, "Member 'BP_FLIB_UIMap_C_CheckRuraAvailable::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_CheckRuraAvailable, CallFunc_IsUIDisableCommandByFish_IsDisableCommandByFish) == 0x000028, "Member 'BP_FLIB_UIMap_C_CheckRuraAvailable::CallFunc_IsUIDisableCommandByFish_IsDisableCommandByFish' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_CheckRuraAvailable, CallFunc_DisplaySerifuWindowAtTextID_ReturnValue) == 0x000030, "Member 'BP_FLIB_UIMap_C_CheckRuraAvailable::CallFunc_DisplaySerifuWindowAtTextID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FLIB_UIMap_C_CheckRuraAvailable, CallFunc_Not_PreBool_ReturnValue) == 0x000038, "Member 'BP_FLIB_UIMap_C_CheckRuraAvailable::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

}

