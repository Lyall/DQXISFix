#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DebugAutoPlayer

#include "Basic.hpp"

#include "BP_DebugAutoPlayer_classes.hpp"
#include "BP_DebugAutoPlayer_parameters.hpp"


namespace SDK
{

// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.ExecuteUbergraph_BP_DebugAutoPlayer
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DebugAutoPlayer_C::ExecuteUbergraph_BP_DebugAutoPlayer(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "ExecuteUbergraph_BP_DebugAutoPlayer");

	Params::BP_DebugAutoPlayer_C_ExecuteUbergraph_BP_DebugAutoPlayer Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.ForceStopAutoPlay
// (BlueprintCallable, BlueprintEvent)

void ABP_DebugAutoPlayer_C::ForceStopAutoPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "ForceStopAutoPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.DebugMenuSelected
// (BlueprintCallable, BlueprintEvent)

void ABP_DebugAutoPlayer_C::DebugMenuSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "DebugMenuSelected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.ForceStartAutoPlay
// (BlueprintCallable, BlueprintEvent)

void ABP_DebugAutoPlayer_C::ForceStartAutoPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "ForceStartAutoPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.EndCutScene
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CSID                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DebugAutoPlayer_C::EndCutScene(class FName CSID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "EndCutScene");

	Params::BP_DebugAutoPlayer_C_EndCutScene Parms{};

	Parms.CSID = CSID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.StartCutScene
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CSID                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DebugAutoPlayer_C::StartCutScene(class FName CSID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "StartCutScene");

	Params::BP_DebugAutoPlayer_C_StartCutScene Parms{};

	Parms.CSID = CSID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DebugAutoPlayer_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "ReceiveTick");

	Params::BP_DebugAutoPlayer_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.StartAutoPlay
// (BlueprintCallable, BlueprintEvent)

void ABP_DebugAutoPlayer_C::StartAutoPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "StartAutoPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.CustomEvent_7
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OverlappedActor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DebugAutoPlayer_C::CustomEvent_7(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "CustomEvent_7");

	Params::BP_DebugAutoPlayer_C_CustomEvent_7 Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.StartAutoPlayGo
// (BlueprintCallable, BlueprintEvent)

void ABP_DebugAutoPlayer_C::StartAutoPlayGo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "StartAutoPlayGo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.TimerCheck
// (BlueprintCallable, BlueprintEvent)

void ABP_DebugAutoPlayer_C::TimerCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "TimerCheck");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.CustomEvent
// (BlueprintCallable, BlueprintEvent)

void ABP_DebugAutoPlayer_C::CustomEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "CustomEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.CustomEvent_3
// (BlueprintCallable, BlueprintEvent)

void ABP_DebugAutoPlayer_C::CustomEvent_3()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "CustomEvent_3");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.BattleControl
// (BlueprintCallable, BlueprintEvent)

void ABP_DebugAutoPlayer_C::BattleControl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "BattleControl");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.CustomEvent_4
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FJackCommandBattleInitialize     InCommand                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void ABP_DebugAutoPlayer_C::CustomEvent_4(const struct FJackCommandBattleInitialize& InCommand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "CustomEvent_4");

	Params::BP_DebugAutoPlayer_C_CustomEvent_4 Parms{};

	Parms.InCommand = std::move(InCommand);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.MapJumpBeginPlay
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_DebugAutoPlayer_C::MapJumpBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "MapJumpBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.CustomEvent_1
// (BlueprintCallable, BlueprintEvent)

void ABP_DebugAutoPlayer_C::CustomEvent_1()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "CustomEvent_1");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_DebugAutoPlayer_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.MapJumpEndPlay
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_DebugAutoPlayer_C::MapJumpEndPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "MapJumpEndPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.StartCutSceneCharacterSettingAfter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CSID                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DebugAutoPlayer_C::StartCutSceneCharacterSettingAfter(class FName CSID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "StartCutSceneCharacterSettingAfter");

	Params::BP_DebugAutoPlayer_C_StartCutSceneCharacterSettingAfter Parms{};

	Parms.CSID = CSID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.EndCutSceneFadInBefore
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CSID                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DebugAutoPlayer_C::EndCutSceneFadInBefore(class FName CSID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "EndCutSceneFadInBefore");

	Params::BP_DebugAutoPlayer_C_EndCutSceneFadInBefore Parms{};

	Parms.CSID = CSID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.StartCutSceneFadeOutAfter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CSID                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DebugAutoPlayer_C::StartCutSceneFadeOutAfter(class FName CSID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "StartCutSceneFadeOutAfter");

	Params::BP_DebugAutoPlayer_C_StartCutSceneFadeOutAfter Parms{};

	Parms.CSID = CSID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.StartCutsceneBeforeLoad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CSID                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DebugAutoPlayer_C::StartCutsceneBeforeLoad(class FName CSID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "StartCutsceneBeforeLoad");

	Params::BP_DebugAutoPlayer_C_StartCutsceneBeforeLoad Parms{};

	Parms.CSID = CSID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.EndCutSceneBeforeUnload
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CSID                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DebugAutoPlayer_C::EndCutSceneBeforeUnload(class FName CSID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "EndCutSceneBeforeUnload");

	Params::BP_DebugAutoPlayer_C_EndCutSceneBeforeUnload Parms{};

	Parms.CSID = CSID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_DebugAutoPlayer_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.Initialize
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_DebugAutoPlayer_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.RopeTeleport
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Teleport                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_DebugAutoPlayer_C::RopeTeleport(bool* Teleport)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "RopeTeleport");

	Params::BP_DebugAutoPlayer_C_RopeTeleport Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Teleport != nullptr)
		*Teleport = Parms.Teleport;
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.NavTeleport
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Teleport                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_DebugAutoPlayer_C::NavTeleport(bool* Teleport)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "NavTeleport");

	Params::BP_DebugAutoPlayer_C_NavTeleport Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Teleport != nullptr)
		*Teleport = Parms.Teleport;
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.NearNaviTeleport
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Teleport                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoNavi                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_DebugAutoPlayer_C::NearNaviTeleport(bool* Teleport, bool* NoNavi)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "NearNaviTeleport");

	Params::BP_DebugAutoPlayer_C_NearNaviTeleport Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Teleport != nullptr)
		*Teleport = Parms.Teleport;

	if (NoNavi != nullptr)
		*NoNavi = Parms.NoNavi;
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.MapJumpTeleport
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Teleport                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_DebugAutoPlayer_C::MapJumpTeleport(bool* Teleport)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "MapJumpTeleport");

	Params::BP_DebugAutoPlayer_C_MapJumpTeleport Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Teleport != nullptr)
		*Teleport = Parms.Teleport;
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.MapStartInitialize
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_DebugAutoPlayer_C::MapStartInitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "MapStartInitialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.DoorTeleport
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Teleport                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_DebugAutoPlayer_C::DoorTeleport(bool* Teleport)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "DoorTeleport");

	Params::BP_DebugAutoPlayer_C_DoorTeleport Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Teleport != nullptr)
		*Teleport = Parms.Teleport;
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.IsNaviSuccess
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_DebugAutoPlayer_C::IsNaviSuccess(bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "IsNaviSuccess");

	Params::BP_DebugAutoPlayer_C_IsNaviSuccess Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.GetCommand
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Command                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Value1                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Value2                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Value3                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABP_DebugAutoPlayer_C::GetCommand(class FString* Command, class FString* Value1, class FString* Value2, class FString* Value3)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "GetCommand");

	Params::BP_DebugAutoPlayer_C_GetCommand Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Command != nullptr)
		*Command = std::move(Parms.Command);

	if (Value1 != nullptr)
		*Value1 = std::move(Parms.Value1);

	if (Value2 != nullptr)
		*Value2 = std::move(Parms.Value2);

	if (Value3 != nullptr)
		*Value3 = std::move(Parms.Value3);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.SetNextCommand
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_DebugAutoPlayer_C::SetNextCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "SetNextCommand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.Command_MoveMapJump
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Value1                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DebugAutoPlayer_C::Command_MoveMapJump(const class FString& Value1, class AActor** Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "Command_MoveMapJump");

	Params::BP_DebugAutoPlayer_C_Command_MoveMapJump Parms{};

	Parms.Value1 = std::move(Value1);

	UObject::ProcessEvent(Func, &Parms);

	if (Actor != nullptr)
		*Actor = Parms.Actor;
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.Command_Teleport
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Value1                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Value2                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Value3                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_DebugAutoPlayer_C::Command_Teleport(const class FString& Value1, const class FString& Value2, const class FString& Value3)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "Command_Teleport");

	Params::BP_DebugAutoPlayer_C_Command_Teleport Parms{};

	Parms.Value1 = std::move(Value1);
	Parms.Value2 = std::move(Value2);
	Parms.Value3 = std::move(Value3);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.Command_MapJump
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Value1                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_DebugAutoPlayer_C::Command_MapJump(const class FString& Value1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "Command_MapJump");

	Params::BP_DebugAutoPlayer_C_Command_MapJump Parms{};

	Parms.Value1 = std::move(Value1);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.Command_ScenarioProgress
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Value1                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_DebugAutoPlayer_C::Command_ScenarioProgress(const class FString& Value1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "Command_ScenarioProgress");

	Params::BP_DebugAutoPlayer_C_Command_ScenarioProgress Parms{};

	Parms.Value1 = std::move(Value1);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.Command_ScenarioFlag
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Value1                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Value2                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_DebugAutoPlayer_C::Command_ScenarioFlag(const class FString& Value1, const class FString& Value2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "Command_ScenarioFlag");

	Params::BP_DebugAutoPlayer_C_Command_ScenarioFlag Parms{};

	Parms.Value1 = std::move(Value1);
	Parms.Value2 = std::move(Value2);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.Command_CutsceneFlag
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Value1                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Value2                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_DebugAutoPlayer_C::Command_CutsceneFlag(const class FString& Value1, const class FString& Value2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "Command_CutsceneFlag");

	Params::BP_DebugAutoPlayer_C_Command_CutsceneFlag Parms{};

	Parms.Value1 = std::move(Value1);
	Parms.Value2 = std::move(Value2);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.Command_ConsoleCommand
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Value1                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_DebugAutoPlayer_C::Command_ConsoleCommand(const class FString& Value1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "Command_ConsoleCommand");

	Params::BP_DebugAutoPlayer_C_Command_ConsoleCommand Parms{};

	Parms.Value1 = std::move(Value1);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.IsCanAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    CanActine                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_DebugAutoPlayer_C::IsCanAction(bool* CanActine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "IsCanAction");

	Params::BP_DebugAutoPlayer_C_IsCanAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanActine != nullptr)
		*CanActine = Parms.CanActine;
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.GetNearMonster
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Monster                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DebugAutoPlayer_C::GetNearMonster(class AActor** Monster)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "GetNearMonster");

	Params::BP_DebugAutoPlayer_C_GetNearMonster Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Monster != nullptr)
		*Monster = Parms.Monster;
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.Command_InfinityBattle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Value1                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Value2                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_DebugAutoPlayer_C::Command_InfinityBattle(const class FString& Value1, const class FString& Value2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "Command_InfinityBattle");

	Params::BP_DebugAutoPlayer_C_Command_InfinityBattle Parms{};

	Parms.Value1 = std::move(Value1);
	Parms.Value2 = std::move(Value2);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.Command_WorldProgress
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Value1                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_DebugAutoPlayer_C::Command_WorldProgress(const class FString& Value1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "Command_WorldProgress");

	Params::BP_DebugAutoPlayer_C_Command_WorldProgress Parms{};

	Parms.Value1 = std::move(Value1);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.AddDebugMenu
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_DebugAutoPlayer_C::AddDebugMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "AddDebugMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.Command_Goto
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Value1                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_DebugAutoPlayer_C::Command_Goto(const class FString& Value1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "Command_Goto");

	Params::BP_DebugAutoPlayer_C_Command_Goto Parms{};

	Parms.Value1 = std::move(Value1);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.Command_EquipWeapon
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Value1                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Value2                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_DebugAutoPlayer_C::Command_EquipWeapon(const class FString& Value1, const class FString& Value2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "Command_EquipWeapon");

	Params::BP_DebugAutoPlayer_C_Command_EquipWeapon Parms{};

	Parms.Value1 = std::move(Value1);
	Parms.Value2 = std::move(Value2);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DebugAutoPlayer.BP_DebugAutoPlayer_C.AddDebugMenuSimple
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_DebugAutoPlayer_C::AddDebugMenuSimple()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugAutoPlayer_C", "AddDebugMenuSimple");

	UObject::ProcessEvent(Func, nullptr);
}

}

