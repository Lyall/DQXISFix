#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FLIB_LevelSystem

#include "Basic.hpp"

#include "ENUM_LevelType_structs.hpp"
#include "Engine_classes.hpp"
#include "JackGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FLIB_LevelSystem.BP_FLIB_LevelSystem_C
// 0x0000 (0x0038 - 0x0038)
class UBP_FLIB_LevelSystem_C final : public UBlueprintFunctionLibrary
{
public:
	static void MapJumpStart(const struct FJackLDT_MapStart& MapStart, EJackFadeColor FadeColor, EJackFadeTime FadeTime, bool PlayAnimation, bool UnmountVehicle, EJackMapChangeSound PlaySoundType, class UObject* __WorldContext);
	static void SetForceLevelVisible(bool Visible, class UObject* __WorldContext);
	static void ResetForceLevelVisible(class UObject* __WorldContext);
	static void DisableMapJumpVolume(class FName DisableTag, class UObject* __WorldContext);
	static void EnableMapJumpVolume(class FName EnableTag, class UObject* __WorldContext);
	static void LevelVisible(ENUM_LevelType LevelType, bool Visible, class UObject* __WorldContext);
	static void PreloadMap(const struct FJackLDT_MapStart& MapJumpName, class UObject* __WorldContext);
	static void IsMapJumping(class UObject* __WorldContext, bool* Result);
	static void SetLevelStreamingCollision(bool Enable, class UObject* __WorldContext);
	static void LoadMapJump(class UObject* __WorldContext);
	static void SetEnableLevelVolume(class FName NameTag, bool Enable, class UObject* __WorldContext);
	static void IsMapJumpSequence(class UObject* __WorldContext, bool* Result);
	static void IsMapInMapJump(class FName NextMapStartID, class UObject* __WorldContext, bool* Result, class FName* StreamingStatusID);
	static void GetStreamingStatusNoLoad(class FName StreamingStatusID, class UObject* __WorldContext, TArray<class FName>* LoadLevelNames);
	static void Change2D(const struct FJackLDT_ModeChangeType& ModeChangeType, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FLIB_LevelSystem_C">();
	}
	static class UBP_FLIB_LevelSystem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_FLIB_LevelSystem_C>();
	}
};
static_assert(alignof(UBP_FLIB_LevelSystem_C) == 0x000008, "Wrong alignment on UBP_FLIB_LevelSystem_C");
static_assert(sizeof(UBP_FLIB_LevelSystem_C) == 0x000038, "Wrong size on UBP_FLIB_LevelSystem_C");

}

