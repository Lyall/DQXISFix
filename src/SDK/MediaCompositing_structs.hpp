#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MediaCompositing

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MovieScene_structs.hpp"


namespace SDK
{

// ScriptStruct MediaCompositing.MovieSceneMediaSectionParams
// 0x0020 (0x0020 - 0x0000)
struct FMovieSceneMediaSectionParams final
{
public:
	float                                         SectionStartTime;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMediaSource*                           Source;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Proxy;                                             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneMediaSectionParams) == 0x000008, "Wrong alignment on FMovieSceneMediaSectionParams");
static_assert(sizeof(FMovieSceneMediaSectionParams) == 0x000020, "Wrong size on FMovieSceneMediaSectionParams");
static_assert(offsetof(FMovieSceneMediaSectionParams, SectionStartTime) == 0x000000, "Member 'FMovieSceneMediaSectionParams::SectionStartTime' has a wrong offset!");
static_assert(offsetof(FMovieSceneMediaSectionParams, Source) == 0x000008, "Member 'FMovieSceneMediaSectionParams::Source' has a wrong offset!");
static_assert(offsetof(FMovieSceneMediaSectionParams, Proxy) == 0x000010, "Member 'FMovieSceneMediaSectionParams::Proxy' has a wrong offset!");

// ScriptStruct MediaCompositing.MovieSceneMediaSectionTemplate
// 0x0048 (0x0068 - 0x0020)
struct FMovieSceneMediaSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieScenePropertySectionData         PropertyData;                                      // 0x0020(0x0028)(NativeAccessSpecifierPrivate)
	struct FMovieSceneMediaSectionParams          Params;                                            // 0x0048(0x0020)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMovieSceneMediaSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneMediaSectionTemplate");
static_assert(sizeof(FMovieSceneMediaSectionTemplate) == 0x000068, "Wrong size on FMovieSceneMediaSectionTemplate");
static_assert(offsetof(FMovieSceneMediaSectionTemplate, PropertyData) == 0x000020, "Member 'FMovieSceneMediaSectionTemplate::PropertyData' has a wrong offset!");
static_assert(offsetof(FMovieSceneMediaSectionTemplate, Params) == 0x000048, "Member 'FMovieSceneMediaSectionTemplate::Params' has a wrong offset!");

// ScriptStruct MediaCompositing.MediaPlaneParameters
// 0x0038 (0x0038 - 0x0000)
struct FMediaPlaneParameters final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextureParameterName;                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFillScreen;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              FillScreenAmount;                                  // 0x0014(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              FixedSize;                                         // 0x001C(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               RenderTexture;                                     // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMediaPlaneParameters) == 0x000008, "Wrong alignment on FMediaPlaneParameters");
static_assert(sizeof(FMediaPlaneParameters) == 0x000038, "Wrong size on FMediaPlaneParameters");
static_assert(offsetof(FMediaPlaneParameters, Material) == 0x000000, "Member 'FMediaPlaneParameters::Material' has a wrong offset!");
static_assert(offsetof(FMediaPlaneParameters, TextureParameterName) == 0x000008, "Member 'FMediaPlaneParameters::TextureParameterName' has a wrong offset!");
static_assert(offsetof(FMediaPlaneParameters, bFillScreen) == 0x000010, "Member 'FMediaPlaneParameters::bFillScreen' has a wrong offset!");
static_assert(offsetof(FMediaPlaneParameters, FillScreenAmount) == 0x000014, "Member 'FMediaPlaneParameters::FillScreenAmount' has a wrong offset!");
static_assert(offsetof(FMediaPlaneParameters, FixedSize) == 0x00001C, "Member 'FMediaPlaneParameters::FixedSize' has a wrong offset!");
static_assert(offsetof(FMediaPlaneParameters, RenderTexture) == 0x000028, "Member 'FMediaPlaneParameters::RenderTexture' has a wrong offset!");
static_assert(offsetof(FMediaPlaneParameters, DynamicMaterial) == 0x000030, "Member 'FMediaPlaneParameters::DynamicMaterial' has a wrong offset!");

}

