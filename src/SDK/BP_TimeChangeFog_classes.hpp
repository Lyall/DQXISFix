#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TimeChangeFog

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// DynamicClass BP_TimeChangeFog.BP_TimeChangeFog_C
// 0x0188 (0x0520 - 0x0398)
class ABP_TimeChangeFog_C final : public AActor
{
public:
	class UTextRenderComponent*                   TextRender;                                        // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAtmosphericFog*                        Fog;                                               // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AExponentialHeightFog*                  HeightFog;                                         // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EditorTime;                                        // 0x03B0(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FogTime;                                           // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExecUpdate;                                        // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C1[0x3];                                      // 0x03C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OldTime;                                           // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 SunMultiplier;                                     // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 FogMultiplier;                                     // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 DensityMultiplier;                                 // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 DistanceScale;                                     // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 AltitudeScale;                                     // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 DistanceOffset;                                    // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 GroundOffset;                                      // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 FogDensity;                                        // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   FogInscatteringColor;                              // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 FogHeightFalloff;                                  // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         UpdateCounter;                                     // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46C[0x4];                                      // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 StartDistance;                                     // 0x0470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 DefaultBrightness;                                 // 0x0480(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   DefaultLightColor;                                 // 0x0490(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 HeightFogStartDistance;                            // 0x04A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 FogMaxOpacity;                                     // 0x04B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x04C0(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float;                     // 0x04C4(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float2;                    // 0x04C8(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float3;                    // 0x04CC(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float4;                    // 0x04D0(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float5;                    // 0x04D4(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float6;                    // 0x04D8(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float7;                    // 0x04DC(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CallFunc_Get_Time_Color_Color;                     // 0x04E0(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float8;                    // 0x04F0(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x04F4(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F5[0x3];                                      // 0x04F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Get_Time_Float_Float9;                    // 0x04F8(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CallFunc_Get_Time_Color_Color2;                    // 0x04FC(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float10;                   // 0x050C(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float11;                   // 0x0510(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float12;                   // 0x0514(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_Get_Time_Float_Float13;                   // 0x0518(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51C[0x4];                                      // 0x051C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ReceiveTick(float bpp__DeltaSeconds__pf);
	void UpdateFog();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BP_TimeChangeFog_C">();
	}
	static class ABP_TimeChangeFog_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TimeChangeFog_C>();
	}
};
static_assert(alignof(ABP_TimeChangeFog_C) == 0x000008, "Wrong alignment on ABP_TimeChangeFog_C");
static_assert(sizeof(ABP_TimeChangeFog_C) == 0x000520, "Wrong size on ABP_TimeChangeFog_C");
static_assert(offsetof(ABP_TimeChangeFog_C, TextRender) == 0x000398, "Member 'ABP_TimeChangeFog_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, Fog) == 0x0003A0, "Member 'ABP_TimeChangeFog_C::Fog' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, HeightFog) == 0x0003A8, "Member 'ABP_TimeChangeFog_C::HeightFog' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, EditorTime) == 0x0003B0, "Member 'ABP_TimeChangeFog_C::EditorTime' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, FogTime) == 0x0003BC, "Member 'ABP_TimeChangeFog_C::FogTime' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, ExecUpdate) == 0x0003C0, "Member 'ABP_TimeChangeFog_C::ExecUpdate' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, OldTime) == 0x0003C4, "Member 'ABP_TimeChangeFog_C::OldTime' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, SunMultiplier) == 0x0003C8, "Member 'ABP_TimeChangeFog_C::SunMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, FogMultiplier) == 0x0003D8, "Member 'ABP_TimeChangeFog_C::FogMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, DensityMultiplier) == 0x0003E8, "Member 'ABP_TimeChangeFog_C::DensityMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, DistanceScale) == 0x0003F8, "Member 'ABP_TimeChangeFog_C::DistanceScale' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, AltitudeScale) == 0x000408, "Member 'ABP_TimeChangeFog_C::AltitudeScale' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, DistanceOffset) == 0x000418, "Member 'ABP_TimeChangeFog_C::DistanceOffset' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, GroundOffset) == 0x000428, "Member 'ABP_TimeChangeFog_C::GroundOffset' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, FogDensity) == 0x000438, "Member 'ABP_TimeChangeFog_C::FogDensity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, FogInscatteringColor) == 0x000448, "Member 'ABP_TimeChangeFog_C::FogInscatteringColor' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, FogHeightFalloff) == 0x000458, "Member 'ABP_TimeChangeFog_C::FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, UpdateCounter) == 0x000468, "Member 'ABP_TimeChangeFog_C::UpdateCounter' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, StartDistance) == 0x000470, "Member 'ABP_TimeChangeFog_C::StartDistance' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, DefaultBrightness) == 0x000480, "Member 'ABP_TimeChangeFog_C::DefaultBrightness' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, DefaultLightColor) == 0x000490, "Member 'ABP_TimeChangeFog_C::DefaultLightColor' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, HeightFogStartDistance) == 0x0004A0, "Member 'ABP_TimeChangeFog_C::HeightFogStartDistance' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, FogMaxOpacity) == 0x0004B0, "Member 'ABP_TimeChangeFog_C::FogMaxOpacity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, K2Node_Event_DeltaSeconds) == 0x0004C0, "Member 'ABP_TimeChangeFog_C::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, CallFunc_Get_Time_Float_Float) == 0x0004C4, "Member 'ABP_TimeChangeFog_C::CallFunc_Get_Time_Float_Float' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, CallFunc_Get_Time_Float_Float2) == 0x0004C8, "Member 'ABP_TimeChangeFog_C::CallFunc_Get_Time_Float_Float2' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, CallFunc_Get_Time_Float_Float3) == 0x0004CC, "Member 'ABP_TimeChangeFog_C::CallFunc_Get_Time_Float_Float3' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, CallFunc_Get_Time_Float_Float4) == 0x0004D0, "Member 'ABP_TimeChangeFog_C::CallFunc_Get_Time_Float_Float4' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, CallFunc_Get_Time_Float_Float5) == 0x0004D4, "Member 'ABP_TimeChangeFog_C::CallFunc_Get_Time_Float_Float5' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, CallFunc_Get_Time_Float_Float6) == 0x0004D8, "Member 'ABP_TimeChangeFog_C::CallFunc_Get_Time_Float_Float6' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, CallFunc_Get_Time_Float_Float7) == 0x0004DC, "Member 'ABP_TimeChangeFog_C::CallFunc_Get_Time_Float_Float7' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, CallFunc_Get_Time_Color_Color) == 0x0004E0, "Member 'ABP_TimeChangeFog_C::CallFunc_Get_Time_Color_Color' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, CallFunc_Get_Time_Float_Float8) == 0x0004F0, "Member 'ABP_TimeChangeFog_C::CallFunc_Get_Time_Float_Float8' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, K2Node_SwitchInteger_CmpSuccess) == 0x0004F4, "Member 'ABP_TimeChangeFog_C::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, CallFunc_Get_Time_Float_Float9) == 0x0004F8, "Member 'ABP_TimeChangeFog_C::CallFunc_Get_Time_Float_Float9' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, CallFunc_Get_Time_Color_Color2) == 0x0004FC, "Member 'ABP_TimeChangeFog_C::CallFunc_Get_Time_Color_Color2' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, CallFunc_Get_Time_Float_Float10) == 0x00050C, "Member 'ABP_TimeChangeFog_C::CallFunc_Get_Time_Float_Float10' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, CallFunc_Get_Time_Float_Float11) == 0x000510, "Member 'ABP_TimeChangeFog_C::CallFunc_Get_Time_Float_Float11' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, CallFunc_Get_Time_Float_Float12) == 0x000514, "Member 'ABP_TimeChangeFog_C::CallFunc_Get_Time_Float_Float12' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFog_C, CallFunc_Get_Time_Float_Float13) == 0x000518, "Member 'ABP_TimeChangeFog_C::CallFunc_Get_Time_Float_Float13' has a wrong offset!");

}

