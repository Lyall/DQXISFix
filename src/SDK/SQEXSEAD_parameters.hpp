#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SQEXSEAD

#include "Basic.hpp"

#include "SQEXSEAD_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function SQEXSEAD.SQEXSEADBGMSlotController.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct SQEXSEADBGMSlotController_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_IsPlaying) == 0x000001, "Wrong alignment on SQEXSEADBGMSlotController_IsPlaying");
static_assert(sizeof(SQEXSEADBGMSlotController_IsPlaying) == 0x000001, "Wrong size on SQEXSEADBGMSlotController_IsPlaying");
static_assert(offsetof(SQEXSEADBGMSlotController_IsPlaying, ReturnValue) == 0x000000, "Member 'SQEXSEADBGMSlotController_IsPlaying::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.Set
// 0x0008 (0x0008 - 0x0000)
struct SQEXSEADBGMSlotController_Set final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_Set) == 0x000008, "Wrong alignment on SQEXSEADBGMSlotController_Set");
static_assert(sizeof(SQEXSEADBGMSlotController_Set) == 0x000008, "Wrong size on SQEXSEADBGMSlotController_Set");
static_assert(offsetof(SQEXSEADBGMSlotController_Set, Sound) == 0x000000, "Member 'SQEXSEADBGMSlotController_Set::Sound' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetMode
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADBGMSlotController_SetMode final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetMode) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_SetMode");
static_assert(sizeof(SQEXSEADBGMSlotController_SetMode) == 0x000004, "Wrong size on SQEXSEADBGMSlotController_SetMode");
static_assert(offsetof(SQEXSEADBGMSlotController_SetMode, Index_0) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetMode::Index_0' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetOptions
// 0x001C (0x001C - 0x0000)
struct SQEXSEADBGMSlotController_SetOptions final
{
public:
	struct FSQEXSEAD_BGMOptions                   NewOptions;                                        // 0x0000(0x001C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetOptions) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_SetOptions");
static_assert(sizeof(SQEXSEADBGMSlotController_SetOptions) == 0x00001C, "Wrong size on SQEXSEADBGMSlotController_SetOptions");
static_assert(offsetof(SQEXSEADBGMSlotController_SetOptions, NewOptions) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetOptions::NewOptions' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetPath
// 0x0010 (0x0010 - 0x0000)
struct SQEXSEADBGMSlotController_SetPath final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetPath) == 0x000008, "Wrong alignment on SQEXSEADBGMSlotController_SetPath");
static_assert(sizeof(SQEXSEADBGMSlotController_SetPath) == 0x000010, "Wrong size on SQEXSEADBGMSlotController_SetPath");
static_assert(offsetof(SQEXSEADBGMSlotController_SetPath, Path) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetPath::Path' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetPlayFadeInTime
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADBGMSlotController_SetPlayFadeInTime final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetPlayFadeInTime) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_SetPlayFadeInTime");
static_assert(sizeof(SQEXSEADBGMSlotController_SetPlayFadeInTime) == 0x000004, "Wrong size on SQEXSEADBGMSlotController_SetPlayFadeInTime");
static_assert(offsetof(SQEXSEADBGMSlotController_SetPlayFadeInTime, FadeTime) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetPlayFadeInTime::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetPriority
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADBGMSlotController_SetPriority final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetPriority) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_SetPriority");
static_assert(sizeof(SQEXSEADBGMSlotController_SetPriority) == 0x000004, "Wrong size on SQEXSEADBGMSlotController_SetPriority");
static_assert(offsetof(SQEXSEADBGMSlotController_SetPriority, Priority) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetPriority::Priority' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetRestartSameBGM
// 0x0001 (0x0001 - 0x0000)
struct SQEXSEADBGMSlotController_SetRestartSameBGM final
{
public:
	bool                                          bRestart;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetRestartSameBGM) == 0x000001, "Wrong alignment on SQEXSEADBGMSlotController_SetRestartSameBGM");
static_assert(sizeof(SQEXSEADBGMSlotController_SetRestartSameBGM) == 0x000001, "Wrong size on SQEXSEADBGMSlotController_SetRestartSameBGM");
static_assert(offsetof(SQEXSEADBGMSlotController_SetRestartSameBGM, bRestart) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetRestartSameBGM::bRestart' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetResumeFadeInTime
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADBGMSlotController_SetResumeFadeInTime final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetResumeFadeInTime) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_SetResumeFadeInTime");
static_assert(sizeof(SQEXSEADBGMSlotController_SetResumeFadeInTime) == 0x000004, "Wrong size on SQEXSEADBGMSlotController_SetResumeFadeInTime");
static_assert(offsetof(SQEXSEADBGMSlotController_SetResumeFadeInTime, FadeTime) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetResumeFadeInTime::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetSection
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADBGMSlotController_SetSection final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetSection) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_SetSection");
static_assert(sizeof(SQEXSEADBGMSlotController_SetSection) == 0x000004, "Wrong size on SQEXSEADBGMSlotController_SetSection");
static_assert(offsetof(SQEXSEADBGMSlotController_SetSection, Index_0) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetSection::Index_0' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetSeekTime
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADBGMSlotController_SetSeekTime final
{
public:
	float                                         SeekTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetSeekTime) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_SetSeekTime");
static_assert(sizeof(SQEXSEADBGMSlotController_SetSeekTime) == 0x000004, "Wrong size on SQEXSEADBGMSlotController_SetSeekTime");
static_assert(offsetof(SQEXSEADBGMSlotController_SetSeekTime, SeekTime) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetSeekTime::SeekTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetStopFadeOutTime
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADBGMSlotController_SetStopFadeOutTime final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetStopFadeOutTime) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_SetStopFadeOutTime");
static_assert(sizeof(SQEXSEADBGMSlotController_SetStopFadeOutTime) == 0x000004, "Wrong size on SQEXSEADBGMSlotController_SetStopFadeOutTime");
static_assert(offsetof(SQEXSEADBGMSlotController_SetStopFadeOutTime, FadeTime) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetStopFadeOutTime::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetStoreBehaviour
// 0x0001 (0x0001 - 0x0000)
struct SQEXSEADBGMSlotController_SetStoreBehaviour final
{
public:
	ESQEXSEAD_BGMStoreBehaviour                   StoreBehaviour;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetStoreBehaviour) == 0x000001, "Wrong alignment on SQEXSEADBGMSlotController_SetStoreBehaviour");
static_assert(sizeof(SQEXSEADBGMSlotController_SetStoreBehaviour) == 0x000001, "Wrong size on SQEXSEADBGMSlotController_SetStoreBehaviour");
static_assert(offsetof(SQEXSEADBGMSlotController_SetStoreBehaviour, StoreBehaviour) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetStoreBehaviour::StoreBehaviour' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetSuspendFadeOutTime
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADBGMSlotController_SetSuspendFadeOutTime final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetSuspendFadeOutTime) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_SetSuspendFadeOutTime");
static_assert(sizeof(SQEXSEADBGMSlotController_SetSuspendFadeOutTime) == 0x000004, "Wrong size on SQEXSEADBGMSlotController_SetSuspendFadeOutTime");
static_assert(offsetof(SQEXSEADBGMSlotController_SetSuspendFadeOutTime, FadeTime) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetSuspendFadeOutTime::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetVolume
// 0x0008 (0x0008 - 0x0000)
struct SQEXSEADBGMSlotController_SetVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetVolume) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_SetVolume");
static_assert(sizeof(SQEXSEADBGMSlotController_SetVolume) == 0x000008, "Wrong size on SQEXSEADBGMSlotController_SetVolume");
static_assert(offsetof(SQEXSEADBGMSlotController_SetVolume, Volume) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetVolume::Volume' has a wrong offset!");
static_assert(offsetof(SQEXSEADBGMSlotController_SetVolume, FadeTime) == 0x000004, "Member 'SQEXSEADBGMSlotController_SetVolume::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADCollisionEventSeComponent.OnBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct SQEXSEADCollisionEventSeComponent_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADCollisionEventSeComponent_OnBeginOverlap) == 0x000008, "Wrong alignment on SQEXSEADCollisionEventSeComponent_OnBeginOverlap");
static_assert(sizeof(SQEXSEADCollisionEventSeComponent_OnBeginOverlap) == 0x0000A8, "Wrong size on SQEXSEADCollisionEventSeComponent_OnBeginOverlap");
static_assert(offsetof(SQEXSEADCollisionEventSeComponent_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'SQEXSEADCollisionEventSeComponent_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SQEXSEADCollisionEventSeComponent_OnBeginOverlap, OtherActor) == 0x000008, "Member 'SQEXSEADCollisionEventSeComponent_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SQEXSEADCollisionEventSeComponent_OnBeginOverlap, OtherComp) == 0x000010, "Member 'SQEXSEADCollisionEventSeComponent_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(SQEXSEADCollisionEventSeComponent_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SQEXSEADCollisionEventSeComponent_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SQEXSEADCollisionEventSeComponent_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'SQEXSEADCollisionEventSeComponent_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(SQEXSEADCollisionEventSeComponent_OnBeginOverlap, SweepResult) == 0x000020, "Member 'SQEXSEADCollisionEventSeComponent_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADCollisionEventSeComponent.OnComponentHit
// 0x00B0 (0x00B0 - 0x0000)
struct SQEXSEADCollisionEventSeComponent_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0028(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADCollisionEventSeComponent_OnComponentHit) == 0x000008, "Wrong alignment on SQEXSEADCollisionEventSeComponent_OnComponentHit");
static_assert(sizeof(SQEXSEADCollisionEventSeComponent_OnComponentHit) == 0x0000B0, "Wrong size on SQEXSEADCollisionEventSeComponent_OnComponentHit");
static_assert(offsetof(SQEXSEADCollisionEventSeComponent_OnComponentHit, HitComponent) == 0x000000, "Member 'SQEXSEADCollisionEventSeComponent_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(SQEXSEADCollisionEventSeComponent_OnComponentHit, OtherActor) == 0x000008, "Member 'SQEXSEADCollisionEventSeComponent_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(SQEXSEADCollisionEventSeComponent_OnComponentHit, OtherComp) == 0x000010, "Member 'SQEXSEADCollisionEventSeComponent_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(SQEXSEADCollisionEventSeComponent_OnComponentHit, NormalImpulse) == 0x000018, "Member 'SQEXSEADCollisionEventSeComponent_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(SQEXSEADCollisionEventSeComponent_OnComponentHit, Hit) == 0x000028, "Member 'SQEXSEADCollisionEventSeComponent_OnComponentHit::Hit' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADCollisionEventSeComponent.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct SQEXSEADCollisionEventSeComponent_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEXSEADCollisionEventSeComponent_OnEndOverlap) == 0x000008, "Wrong alignment on SQEXSEADCollisionEventSeComponent_OnEndOverlap");
static_assert(sizeof(SQEXSEADCollisionEventSeComponent_OnEndOverlap) == 0x000020, "Wrong size on SQEXSEADCollisionEventSeComponent_OnEndOverlap");
static_assert(offsetof(SQEXSEADCollisionEventSeComponent_OnEndOverlap, OverlappedComponent) == 0x000000, "Member 'SQEXSEADCollisionEventSeComponent_OnEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SQEXSEADCollisionEventSeComponent_OnEndOverlap, OtherActor) == 0x000008, "Member 'SQEXSEADCollisionEventSeComponent_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SQEXSEADCollisionEventSeComponent_OnEndOverlap, OtherComp) == 0x000010, "Member 'SQEXSEADCollisionEventSeComponent_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(SQEXSEADCollisionEventSeComponent_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'SQEXSEADCollisionEventSeComponent_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADCollisionEventSeComponent.OnFracture
// 0x0018 (0x0018 - 0x0000)
struct SQEXSEADCollisionEventSeComponent_OnFracture final
{
public:
	struct FVector                                HitPoint;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitDirection;                                      // 0x000C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADCollisionEventSeComponent_OnFracture) == 0x000004, "Wrong alignment on SQEXSEADCollisionEventSeComponent_OnFracture");
static_assert(sizeof(SQEXSEADCollisionEventSeComponent_OnFracture) == 0x000018, "Wrong size on SQEXSEADCollisionEventSeComponent_OnFracture");
static_assert(offsetof(SQEXSEADCollisionEventSeComponent_OnFracture, HitPoint) == 0x000000, "Member 'SQEXSEADCollisionEventSeComponent_OnFracture::HitPoint' has a wrong offset!");
static_assert(offsetof(SQEXSEADCollisionEventSeComponent_OnFracture, HitDirection) == 0x00000C, "Member 'SQEXSEADCollisionEventSeComponent_OnFracture::HitDirection' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADMusicActor.AdjustVolume
// 0x0008 (0x0008 - 0x0000)
struct SQEXSEADMusicActor_AdjustVolume final
{
public:
	float                                         AdjustVolumeDuration;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustVolumeLevel;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADMusicActor_AdjustVolume) == 0x000004, "Wrong alignment on SQEXSEADMusicActor_AdjustVolume");
static_assert(sizeof(SQEXSEADMusicActor_AdjustVolume) == 0x000008, "Wrong size on SQEXSEADMusicActor_AdjustVolume");
static_assert(offsetof(SQEXSEADMusicActor_AdjustVolume, AdjustVolumeDuration) == 0x000000, "Member 'SQEXSEADMusicActor_AdjustVolume::AdjustVolumeDuration' has a wrong offset!");
static_assert(offsetof(SQEXSEADMusicActor_AdjustVolume, AdjustVolumeLevel) == 0x000004, "Member 'SQEXSEADMusicActor_AdjustVolume::AdjustVolumeLevel' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADMusicActor.BlendMode
// 0x0018 (0x0018 - 0x0000)
struct SQEXSEADMusicActor_BlendMode final
{
public:
	class FString                                 ModeName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADMusicActor_BlendMode) == 0x000008, "Wrong alignment on SQEXSEADMusicActor_BlendMode");
static_assert(sizeof(SQEXSEADMusicActor_BlendMode) == 0x000018, "Wrong size on SQEXSEADMusicActor_BlendMode");
static_assert(offsetof(SQEXSEADMusicActor_BlendMode, ModeName) == 0x000000, "Member 'SQEXSEADMusicActor_BlendMode::ModeName' has a wrong offset!");
static_assert(offsetof(SQEXSEADMusicActor_BlendMode, Rate) == 0x000010, "Member 'SQEXSEADMusicActor_BlendMode::Rate' has a wrong offset!");
static_assert(offsetof(SQEXSEADMusicActor_BlendMode, FadeTime) == 0x000014, "Member 'SQEXSEADMusicActor_BlendMode::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADMusicActor.BlendModeIndex
// 0x000C (0x000C - 0x0000)
struct SQEXSEADMusicActor_BlendModeIndex final
{
public:
	int32                                         ModeIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADMusicActor_BlendModeIndex) == 0x000004, "Wrong alignment on SQEXSEADMusicActor_BlendModeIndex");
static_assert(sizeof(SQEXSEADMusicActor_BlendModeIndex) == 0x00000C, "Wrong size on SQEXSEADMusicActor_BlendModeIndex");
static_assert(offsetof(SQEXSEADMusicActor_BlendModeIndex, ModeIndex) == 0x000000, "Member 'SQEXSEADMusicActor_BlendModeIndex::ModeIndex' has a wrong offset!");
static_assert(offsetof(SQEXSEADMusicActor_BlendModeIndex, Rate) == 0x000004, "Member 'SQEXSEADMusicActor_BlendModeIndex::Rate' has a wrong offset!");
static_assert(offsetof(SQEXSEADMusicActor_BlendModeIndex, FadeTime) == 0x000008, "Member 'SQEXSEADMusicActor_BlendModeIndex::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADMusicActor.FadeIn
// 0x0008 (0x0008 - 0x0000)
struct SQEXSEADMusicActor_FadeIn final
{
public:
	float                                         FadeInDuration;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeVolumeLevel;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADMusicActor_FadeIn) == 0x000004, "Wrong alignment on SQEXSEADMusicActor_FadeIn");
static_assert(sizeof(SQEXSEADMusicActor_FadeIn) == 0x000008, "Wrong size on SQEXSEADMusicActor_FadeIn");
static_assert(offsetof(SQEXSEADMusicActor_FadeIn, FadeInDuration) == 0x000000, "Member 'SQEXSEADMusicActor_FadeIn::FadeInDuration' has a wrong offset!");
static_assert(offsetof(SQEXSEADMusicActor_FadeIn, FadeVolumeLevel) == 0x000004, "Member 'SQEXSEADMusicActor_FadeIn::FadeVolumeLevel' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADMusicActor.FadeOut
// 0x0008 (0x0008 - 0x0000)
struct SQEXSEADMusicActor_FadeOut final
{
public:
	float                                         FadeOutDuration;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeVolumeLevel;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADMusicActor_FadeOut) == 0x000004, "Wrong alignment on SQEXSEADMusicActor_FadeOut");
static_assert(sizeof(SQEXSEADMusicActor_FadeOut) == 0x000008, "Wrong size on SQEXSEADMusicActor_FadeOut");
static_assert(offsetof(SQEXSEADMusicActor_FadeOut, FadeOutDuration) == 0x000000, "Member 'SQEXSEADMusicActor_FadeOut::FadeOutDuration' has a wrong offset!");
static_assert(offsetof(SQEXSEADMusicActor_FadeOut, FadeVolumeLevel) == 0x000004, "Member 'SQEXSEADMusicActor_FadeOut::FadeVolumeLevel' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADMusicActor.Play
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADMusicActor_Play final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADMusicActor_Play) == 0x000004, "Wrong alignment on SQEXSEADMusicActor_Play");
static_assert(sizeof(SQEXSEADMusicActor_Play) == 0x000004, "Wrong size on SQEXSEADMusicActor_Play");
static_assert(offsetof(SQEXSEADMusicActor_Play, StartTime) == 0x000000, "Member 'SQEXSEADMusicActor_Play::StartTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADMusicActor.SetMode
// 0x0010 (0x0010 - 0x0000)
struct SQEXSEADMusicActor_SetMode final
{
public:
	class FString                                 ModeName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADMusicActor_SetMode) == 0x000008, "Wrong alignment on SQEXSEADMusicActor_SetMode");
static_assert(sizeof(SQEXSEADMusicActor_SetMode) == 0x000010, "Wrong size on SQEXSEADMusicActor_SetMode");
static_assert(offsetof(SQEXSEADMusicActor_SetMode, ModeName) == 0x000000, "Member 'SQEXSEADMusicActor_SetMode::ModeName' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADMusicActor.SetModeIndex
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADMusicActor_SetModeIndex final
{
public:
	int32                                         ModeIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADMusicActor_SetModeIndex) == 0x000004, "Wrong alignment on SQEXSEADMusicActor_SetModeIndex");
static_assert(sizeof(SQEXSEADMusicActor_SetModeIndex) == 0x000004, "Wrong size on SQEXSEADMusicActor_SetModeIndex");
static_assert(offsetof(SQEXSEADMusicActor_SetModeIndex, ModeIndex) == 0x000000, "Member 'SQEXSEADMusicActor_SetModeIndex::ModeIndex' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADMusicActor.SetNextSection
// 0x0010 (0x0010 - 0x0000)
struct SQEXSEADMusicActor_SetNextSection final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADMusicActor_SetNextSection) == 0x000008, "Wrong alignment on SQEXSEADMusicActor_SetNextSection");
static_assert(sizeof(SQEXSEADMusicActor_SetNextSection) == 0x000010, "Wrong size on SQEXSEADMusicActor_SetNextSection");
static_assert(offsetof(SQEXSEADMusicActor_SetNextSection, SectionName) == 0x000000, "Member 'SQEXSEADMusicActor_SetNextSection::SectionName' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADMusicActor.SetNextSectionIndex
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADMusicActor_SetNextSectionIndex final
{
public:
	int32                                         SectionIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADMusicActor_SetNextSectionIndex) == 0x000004, "Wrong alignment on SQEXSEADMusicActor_SetNextSectionIndex");
static_assert(sizeof(SQEXSEADMusicActor_SetNextSectionIndex) == 0x000004, "Wrong size on SQEXSEADMusicActor_SetNextSectionIndex");
static_assert(offsetof(SQEXSEADMusicActor_SetNextSectionIndex, SectionIndex) == 0x000000, "Member 'SQEXSEADMusicActor_SetNextSectionIndex::SectionIndex' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADPhysObjSeComponent.OnComponentHit
// 0x00B0 (0x00B0 - 0x0000)
struct SQEXSEADPhysObjSeComponent_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0028(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADPhysObjSeComponent_OnComponentHit) == 0x000008, "Wrong alignment on SQEXSEADPhysObjSeComponent_OnComponentHit");
static_assert(sizeof(SQEXSEADPhysObjSeComponent_OnComponentHit) == 0x0000B0, "Wrong size on SQEXSEADPhysObjSeComponent_OnComponentHit");
static_assert(offsetof(SQEXSEADPhysObjSeComponent_OnComponentHit, HitComponent) == 0x000000, "Member 'SQEXSEADPhysObjSeComponent_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(SQEXSEADPhysObjSeComponent_OnComponentHit, OtherActor) == 0x000008, "Member 'SQEXSEADPhysObjSeComponent_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(SQEXSEADPhysObjSeComponent_OnComponentHit, OtherComp) == 0x000010, "Member 'SQEXSEADPhysObjSeComponent_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(SQEXSEADPhysObjSeComponent_OnComponentHit, NormalImpulse) == 0x000018, "Member 'SQEXSEADPhysObjSeComponent_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(SQEXSEADPhysObjSeComponent_OnComponentHit, Hit) == 0x000028, "Member 'SQEXSEADPhysObjSeComponent_OnComponentHit::Hit' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADPhysObjSeComponent.StopCalculation
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADPhysObjSeComponent_StopCalculation final
{
public:
	float                                         StopInnerSoundsFadeTime;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADPhysObjSeComponent_StopCalculation) == 0x000004, "Wrong alignment on SQEXSEADPhysObjSeComponent_StopCalculation");
static_assert(sizeof(SQEXSEADPhysObjSeComponent_StopCalculation) == 0x000004, "Wrong size on SQEXSEADPhysObjSeComponent_StopCalculation");
static_assert(offsetof(SQEXSEADPhysObjSeComponent_StopCalculation, StopInnerSoundsFadeTime) == 0x000000, "Member 'SQEXSEADPhysObjSeComponent_StopCalculation::StopInnerSoundsFadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.AutoSeCtrl_SetEnable
// 0x0001 (0x0001 - 0x0000)
struct SQEXSEADStatics_AutoSeCtrl_SetEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_AutoSeCtrl_SetEnable) == 0x000001, "Wrong alignment on SQEXSEADStatics_AutoSeCtrl_SetEnable");
static_assert(sizeof(SQEXSEADStatics_AutoSeCtrl_SetEnable) == 0x000001, "Wrong size on SQEXSEADStatics_AutoSeCtrl_SetEnable");
static_assert(offsetof(SQEXSEADStatics_AutoSeCtrl_SetEnable, Enable) == 0x000000, "Member 'SQEXSEADStatics_AutoSeCtrl_SetEnable::Enable' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.CallEvent
// 0x0008 (0x0008 - 0x0000)
struct SQEXSEADStatics_CallEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_CallEvent) == 0x000004, "Wrong alignment on SQEXSEADStatics_CallEvent");
static_assert(sizeof(SQEXSEADStatics_CallEvent) == 0x000008, "Wrong size on SQEXSEADStatics_CallEvent");
static_assert(offsetof(SQEXSEADStatics_CallEvent, EventName) == 0x000000, "Member 'SQEXSEADStatics_CallEvent::EventName' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.CategoryCtrl_DebugMute
// 0x0010 (0x0010 - 0x0000)
struct SQEXSEADStatics_CategoryCtrl_DebugMute final
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToBeMuted;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_CategoryCtrl_DebugMute) == 0x000004, "Wrong alignment on SQEXSEADStatics_CategoryCtrl_DebugMute");
static_assert(sizeof(SQEXSEADStatics_CategoryCtrl_DebugMute) == 0x000010, "Wrong size on SQEXSEADStatics_CategoryCtrl_DebugMute");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_DebugMute, CategoryName) == 0x000000, "Member 'SQEXSEADStatics_CategoryCtrl_DebugMute::CategoryName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_DebugMute, bToBeMuted) == 0x000008, "Member 'SQEXSEADStatics_CategoryCtrl_DebugMute::bToBeMuted' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_DebugMute, FadeTime) == 0x00000C, "Member 'SQEXSEADStatics_CategoryCtrl_DebugMute::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.CategoryCtrl_GetVolume
// 0x0010 (0x0010 - 0x0000)
struct SQEXSEADStatics_CategoryCtrl_GetVolume final
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEXSEADStatics_CategoryCtrl_GetVolume) == 0x000004, "Wrong alignment on SQEXSEADStatics_CategoryCtrl_GetVolume");
static_assert(sizeof(SQEXSEADStatics_CategoryCtrl_GetVolume) == 0x000010, "Wrong size on SQEXSEADStatics_CategoryCtrl_GetVolume");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_GetVolume, CategoryName) == 0x000000, "Member 'SQEXSEADStatics_CategoryCtrl_GetVolume::CategoryName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_GetVolume, ReturnValue) == 0x000008, "Member 'SQEXSEADStatics_CategoryCtrl_GetVolume::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.CategoryCtrl_Resume
// 0x0010 (0x0010 - 0x0000)
struct SQEXSEADStatics_CategoryCtrl_Resume final
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEXSEADStatics_CategoryCtrl_Resume) == 0x000004, "Wrong alignment on SQEXSEADStatics_CategoryCtrl_Resume");
static_assert(sizeof(SQEXSEADStatics_CategoryCtrl_Resume) == 0x000010, "Wrong size on SQEXSEADStatics_CategoryCtrl_Resume");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_Resume, CategoryName) == 0x000000, "Member 'SQEXSEADStatics_CategoryCtrl_Resume::CategoryName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_Resume, FadeInTime) == 0x000008, "Member 'SQEXSEADStatics_CategoryCtrl_Resume::FadeInTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.CategoryCtrl_SetLayerVolume
// 0x0018 (0x0018 - 0x0000)
struct SQEXSEADStatics_CategoryCtrl_SetLayerVolume final
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEXSEADCategoryVolumeLayers                 Layer;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Volume;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEXSEADStatics_CategoryCtrl_SetLayerVolume) == 0x000004, "Wrong alignment on SQEXSEADStatics_CategoryCtrl_SetLayerVolume");
static_assert(sizeof(SQEXSEADStatics_CategoryCtrl_SetLayerVolume) == 0x000018, "Wrong size on SQEXSEADStatics_CategoryCtrl_SetLayerVolume");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_SetLayerVolume, CategoryName) == 0x000000, "Member 'SQEXSEADStatics_CategoryCtrl_SetLayerVolume::CategoryName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_SetLayerVolume, Layer) == 0x000008, "Member 'SQEXSEADStatics_CategoryCtrl_SetLayerVolume::Layer' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_SetLayerVolume, Volume) == 0x00000C, "Member 'SQEXSEADStatics_CategoryCtrl_SetLayerVolume::Volume' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_SetLayerVolume, FadeTime) == 0x000010, "Member 'SQEXSEADStatics_CategoryCtrl_SetLayerVolume::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.CategoryCtrl_SetPitch
// 0x0010 (0x0010 - 0x0000)
struct SQEXSEADStatics_CategoryCtrl_SetPitch final
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_CategoryCtrl_SetPitch) == 0x000004, "Wrong alignment on SQEXSEADStatics_CategoryCtrl_SetPitch");
static_assert(sizeof(SQEXSEADStatics_CategoryCtrl_SetPitch) == 0x000010, "Wrong size on SQEXSEADStatics_CategoryCtrl_SetPitch");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_SetPitch, CategoryName) == 0x000000, "Member 'SQEXSEADStatics_CategoryCtrl_SetPitch::CategoryName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_SetPitch, Pitch) == 0x000008, "Member 'SQEXSEADStatics_CategoryCtrl_SetPitch::Pitch' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_SetPitch, FadeTime) == 0x00000C, "Member 'SQEXSEADStatics_CategoryCtrl_SetPitch::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.CategoryCtrl_SetVolume
// 0x0010 (0x0010 - 0x0000)
struct SQEXSEADStatics_CategoryCtrl_SetVolume final
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_CategoryCtrl_SetVolume) == 0x000004, "Wrong alignment on SQEXSEADStatics_CategoryCtrl_SetVolume");
static_assert(sizeof(SQEXSEADStatics_CategoryCtrl_SetVolume) == 0x000010, "Wrong size on SQEXSEADStatics_CategoryCtrl_SetVolume");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_SetVolume, CategoryName) == 0x000000, "Member 'SQEXSEADStatics_CategoryCtrl_SetVolume::CategoryName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_SetVolume, Volume) == 0x000008, "Member 'SQEXSEADStatics_CategoryCtrl_SetVolume::Volume' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_SetVolume, FadeTime) == 0x00000C, "Member 'SQEXSEADStatics_CategoryCtrl_SetVolume::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.CategoryCtrl_Stop
// 0x0010 (0x0010 - 0x0000)
struct SQEXSEADStatics_CategoryCtrl_Stop final
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEXSEADStatics_CategoryCtrl_Stop) == 0x000004, "Wrong alignment on SQEXSEADStatics_CategoryCtrl_Stop");
static_assert(sizeof(SQEXSEADStatics_CategoryCtrl_Stop) == 0x000010, "Wrong size on SQEXSEADStatics_CategoryCtrl_Stop");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_Stop, CategoryName) == 0x000000, "Member 'SQEXSEADStatics_CategoryCtrl_Stop::CategoryName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_Stop, FadeOutTime) == 0x000008, "Member 'SQEXSEADStatics_CategoryCtrl_Stop::FadeOutTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.CategoryCtrl_Suspend
// 0x0010 (0x0010 - 0x0000)
struct SQEXSEADStatics_CategoryCtrl_Suspend final
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEXSEADStatics_CategoryCtrl_Suspend) == 0x000004, "Wrong alignment on SQEXSEADStatics_CategoryCtrl_Suspend");
static_assert(sizeof(SQEXSEADStatics_CategoryCtrl_Suspend) == 0x000010, "Wrong size on SQEXSEADStatics_CategoryCtrl_Suspend");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_Suspend, CategoryName) == 0x000000, "Member 'SQEXSEADStatics_CategoryCtrl_Suspend::CategoryName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_Suspend, FadeOutTime) == 0x000008, "Member 'SQEXSEADStatics_CategoryCtrl_Suspend::FadeOutTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.CreateBGMSlot
// 0x0030 (0x0030 - 0x0000)
struct SQEXSEADStatics_CreateBGMSlot final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQEXSEAD_BGMOptions                   Options;                                           // 0x0008(0x001C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQEXSEADBGMSlotController*             ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_CreateBGMSlot) == 0x000008, "Wrong alignment on SQEXSEADStatics_CreateBGMSlot");
static_assert(sizeof(SQEXSEADStatics_CreateBGMSlot) == 0x000030, "Wrong size on SQEXSEADStatics_CreateBGMSlot");
static_assert(offsetof(SQEXSEADStatics_CreateBGMSlot, Name_0) == 0x000000, "Member 'SQEXSEADStatics_CreateBGMSlot::Name_0' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CreateBGMSlot, Options) == 0x000008, "Member 'SQEXSEADStatics_CreateBGMSlot::Options' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CreateBGMSlot, ReturnValue) == 0x000028, "Member 'SQEXSEADStatics_CreateBGMSlot::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.GetBGMSlotController
// 0x0010 (0x0010 - 0x0000)
struct SQEXSEADStatics_GetBGMSlotController final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEXSEADBGMSlotController*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_GetBGMSlotController) == 0x000008, "Wrong alignment on SQEXSEADStatics_GetBGMSlotController");
static_assert(sizeof(SQEXSEADStatics_GetBGMSlotController) == 0x000010, "Wrong size on SQEXSEADStatics_GetBGMSlotController");
static_assert(offsetof(SQEXSEADStatics_GetBGMSlotController, Name_0) == 0x000000, "Member 'SQEXSEADStatics_GetBGMSlotController::Name_0' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_GetBGMSlotController, ReturnValue) == 0x000008, "Member 'SQEXSEADStatics_GetBGMSlotController::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.GetNumAudibleSoundsAtLocation
// 0x0018 (0x0018 - 0x0000)
struct SQEXSEADStatics_GetNumAudibleSoundsAtLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_GetNumAudibleSoundsAtLocation) == 0x000008, "Wrong alignment on SQEXSEADStatics_GetNumAudibleSoundsAtLocation");
static_assert(sizeof(SQEXSEADStatics_GetNumAudibleSoundsAtLocation) == 0x000018, "Wrong size on SQEXSEADStatics_GetNumAudibleSoundsAtLocation");
static_assert(offsetof(SQEXSEADStatics_GetNumAudibleSoundsAtLocation, WorldContextObject) == 0x000000, "Member 'SQEXSEADStatics_GetNumAudibleSoundsAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_GetNumAudibleSoundsAtLocation, Location) == 0x000008, "Member 'SQEXSEADStatics_GetNumAudibleSoundsAtLocation::Location' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_GetNumAudibleSoundsAtLocation, ReturnValue) == 0x000014, "Member 'SQEXSEADStatics_GetNumAudibleSoundsAtLocation::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.IsInCutScene
// 0x0001 (0x0001 - 0x0000)
struct SQEXSEADStatics_IsInCutScene final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_IsInCutScene) == 0x000001, "Wrong alignment on SQEXSEADStatics_IsInCutScene");
static_assert(sizeof(SQEXSEADStatics_IsInCutScene) == 0x000001, "Wrong size on SQEXSEADStatics_IsInCutScene");
static_assert(offsetof(SQEXSEADStatics_IsInCutScene, ReturnValue) == 0x000000, "Member 'SQEXSEADStatics_IsInCutScene::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.IsPlayingBGM
// 0x0010 (0x0010 - 0x0000)
struct SQEXSEADStatics_IsPlayingBGM final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEXSEADStatics_IsPlayingBGM) == 0x000008, "Wrong alignment on SQEXSEADStatics_IsPlayingBGM");
static_assert(sizeof(SQEXSEADStatics_IsPlayingBGM) == 0x000010, "Wrong size on SQEXSEADStatics_IsPlayingBGM");
static_assert(offsetof(SQEXSEADStatics_IsPlayingBGM, Sound) == 0x000000, "Member 'SQEXSEADStatics_IsPlayingBGM::Sound' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_IsPlayingBGM, ReturnValue) == 0x000008, "Member 'SQEXSEADStatics_IsPlayingBGM::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.PlaySound2D
// 0x0028 (0x0028 - 0x0000)
struct SQEXSEADStatics_PlaySound2D final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundIndex;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_PlaySound2D) == 0x000008, "Wrong alignment on SQEXSEADStatics_PlaySound2D");
static_assert(sizeof(SQEXSEADStatics_PlaySound2D) == 0x000028, "Wrong size on SQEXSEADStatics_PlaySound2D");
static_assert(offsetof(SQEXSEADStatics_PlaySound2D, WorldContextObject) == 0x000000, "Member 'SQEXSEADStatics_PlaySound2D::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound2D, Sound) == 0x000008, "Member 'SQEXSEADStatics_PlaySound2D::Sound' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound2D, SoundIndex) == 0x000010, "Member 'SQEXSEADStatics_PlaySound2D::SoundIndex' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound2D, VolumeMultiplier) == 0x000014, "Member 'SQEXSEADStatics_PlaySound2D::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound2D, PitchMultiplier) == 0x000018, "Member 'SQEXSEADStatics_PlaySound2D::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound2D, StartTime) == 0x00001C, "Member 'SQEXSEADStatics_PlaySound2D::StartTime' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound2D, ReturnValue) == 0x000020, "Member 'SQEXSEADStatics_PlaySound2D::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.PlaySoundAtLocation
// 0x0040 (0x0040 - 0x0000)
struct SQEXSEADStatics_PlaySoundAtLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundIndex;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0014(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        ReturnValue;                                       // 0x0038(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_PlaySoundAtLocation) == 0x000008, "Wrong alignment on SQEXSEADStatics_PlaySoundAtLocation");
static_assert(sizeof(SQEXSEADStatics_PlaySoundAtLocation) == 0x000040, "Wrong size on SQEXSEADStatics_PlaySoundAtLocation");
static_assert(offsetof(SQEXSEADStatics_PlaySoundAtLocation, WorldContextObject) == 0x000000, "Member 'SQEXSEADStatics_PlaySoundAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySoundAtLocation, Sound) == 0x000008, "Member 'SQEXSEADStatics_PlaySoundAtLocation::Sound' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySoundAtLocation, SoundIndex) == 0x000010, "Member 'SQEXSEADStatics_PlaySoundAtLocation::SoundIndex' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySoundAtLocation, Location) == 0x000014, "Member 'SQEXSEADStatics_PlaySoundAtLocation::Location' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySoundAtLocation, VolumeMultiplier) == 0x000020, "Member 'SQEXSEADStatics_PlaySoundAtLocation::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySoundAtLocation, PitchMultiplier) == 0x000024, "Member 'SQEXSEADStatics_PlaySoundAtLocation::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySoundAtLocation, StartTime) == 0x000028, "Member 'SQEXSEADStatics_PlaySoundAtLocation::StartTime' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySoundAtLocation, AttenuationSettings) == 0x000030, "Member 'SQEXSEADStatics_PlaySoundAtLocation::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySoundAtLocation, ReturnValue) == 0x000038, "Member 'SQEXSEADStatics_PlaySoundAtLocation::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.PlaySoundAttached
// 0x0050 (0x0050 - 0x0000)
struct SQEXSEADStatics_PlaySoundAttached final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        AttachToComponent;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0020(0x000C)(Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumeMultiplier;                                  // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        ReturnValue;                                       // 0x0048(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_PlaySoundAttached) == 0x000008, "Wrong alignment on SQEXSEADStatics_PlaySoundAttached");
static_assert(sizeof(SQEXSEADStatics_PlaySoundAttached) == 0x000050, "Wrong size on SQEXSEADStatics_PlaySoundAttached");
static_assert(offsetof(SQEXSEADStatics_PlaySoundAttached, Sound) == 0x000000, "Member 'SQEXSEADStatics_PlaySoundAttached::Sound' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySoundAttached, SoundIndex) == 0x000008, "Member 'SQEXSEADStatics_PlaySoundAttached::SoundIndex' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySoundAttached, AttachToComponent) == 0x000010, "Member 'SQEXSEADStatics_PlaySoundAttached::AttachToComponent' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySoundAttached, AttachPointName) == 0x000018, "Member 'SQEXSEADStatics_PlaySoundAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySoundAttached, Location) == 0x000020, "Member 'SQEXSEADStatics_PlaySoundAttached::Location' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySoundAttached, LocationType) == 0x00002C, "Member 'SQEXSEADStatics_PlaySoundAttached::LocationType' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySoundAttached, bStopWhenAttachedToDestroyed) == 0x00002D, "Member 'SQEXSEADStatics_PlaySoundAttached::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySoundAttached, VolumeMultiplier) == 0x000030, "Member 'SQEXSEADStatics_PlaySoundAttached::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySoundAttached, PitchMultiplier) == 0x000034, "Member 'SQEXSEADStatics_PlaySoundAttached::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySoundAttached, StartTime) == 0x000038, "Member 'SQEXSEADStatics_PlaySoundAttached::StartTime' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySoundAttached, AttenuationSettings) == 0x000040, "Member 'SQEXSEADStatics_PlaySoundAttached::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySoundAttached, ReturnValue) == 0x000048, "Member 'SQEXSEADStatics_PlaySoundAttached::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.ResetAllCategoryTemporarySettings
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADStatics_ResetAllCategoryTemporarySettings final
{
public:
	float                                         ResetFadeTime;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_ResetAllCategoryTemporarySettings) == 0x000004, "Wrong alignment on SQEXSEADStatics_ResetAllCategoryTemporarySettings");
static_assert(sizeof(SQEXSEADStatics_ResetAllCategoryTemporarySettings) == 0x000004, "Wrong size on SQEXSEADStatics_ResetAllCategoryTemporarySettings");
static_assert(offsetof(SQEXSEADStatics_ResetAllCategoryTemporarySettings, ResetFadeTime) == 0x000000, "Member 'SQEXSEADStatics_ResetAllCategoryTemporarySettings::ResetFadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.ResetEffectPreset
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADStatics_ResetEffectPreset final
{
public:
	float                                         ResetFadeTime;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_ResetEffectPreset) == 0x000004, "Wrong alignment on SQEXSEADStatics_ResetEffectPreset");
static_assert(sizeof(SQEXSEADStatics_ResetEffectPreset) == 0x000004, "Wrong size on SQEXSEADStatics_ResetEffectPreset");
static_assert(offsetof(SQEXSEADStatics_ResetEffectPreset, ResetFadeTime) == 0x000000, "Member 'SQEXSEADStatics_ResetEffectPreset::ResetFadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.ResumeBGM_OptionalFade
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADStatics_ResumeBGM_OptionalFade final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_ResumeBGM_OptionalFade) == 0x000004, "Wrong alignment on SQEXSEADStatics_ResumeBGM_OptionalFade");
static_assert(sizeof(SQEXSEADStatics_ResumeBGM_OptionalFade) == 0x000004, "Wrong size on SQEXSEADStatics_ResumeBGM_OptionalFade");
static_assert(offsetof(SQEXSEADStatics_ResumeBGM_OptionalFade, FadeTime) == 0x000000, "Member 'SQEXSEADStatics_ResumeBGM_OptionalFade::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.Sead_GetMasterVolume
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADStatics_Sead_GetMasterVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_Sead_GetMasterVolume) == 0x000004, "Wrong alignment on SQEXSEADStatics_Sead_GetMasterVolume");
static_assert(sizeof(SQEXSEADStatics_Sead_GetMasterVolume) == 0x000004, "Wrong size on SQEXSEADStatics_Sead_GetMasterVolume");
static_assert(offsetof(SQEXSEADStatics_Sead_GetMasterVolume, ReturnValue) == 0x000000, "Member 'SQEXSEADStatics_Sead_GetMasterVolume::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.Sead_SetMasterVolume
// 0x0008 (0x0008 - 0x0000)
struct SQEXSEADStatics_Sead_SetMasterVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_Sead_SetMasterVolume) == 0x000004, "Wrong alignment on SQEXSEADStatics_Sead_SetMasterVolume");
static_assert(sizeof(SQEXSEADStatics_Sead_SetMasterVolume) == 0x000008, "Wrong size on SQEXSEADStatics_Sead_SetMasterVolume");
static_assert(offsetof(SQEXSEADStatics_Sead_SetMasterVolume, Volume) == 0x000000, "Member 'SQEXSEADStatics_Sead_SetMasterVolume::Volume' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_Sead_SetMasterVolume, FadeTime) == 0x000004, "Member 'SQEXSEADStatics_Sead_SetMasterVolume::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.SetEffectPreset
// 0x0010 (0x0010 - 0x0000)
struct SQEXSEADStatics_SetEffectPreset final
{
public:
	class FName                                   PresetName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEXSEADStatics_SetEffectPreset) == 0x000004, "Wrong alignment on SQEXSEADStatics_SetEffectPreset");
static_assert(sizeof(SQEXSEADStatics_SetEffectPreset) == 0x000010, "Wrong size on SQEXSEADStatics_SetEffectPreset");
static_assert(offsetof(SQEXSEADStatics_SetEffectPreset, PresetName) == 0x000000, "Member 'SQEXSEADStatics_SetEffectPreset::PresetName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SetEffectPreset, FadeTime) == 0x000008, "Member 'SQEXSEADStatics_SetEffectPreset::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.SetEnableBGMAutoResume
// 0x0001 (0x0001 - 0x0000)
struct SQEXSEADStatics_SetEnableBGMAutoResume final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_SetEnableBGMAutoResume) == 0x000001, "Wrong alignment on SQEXSEADStatics_SetEnableBGMAutoResume");
static_assert(sizeof(SQEXSEADStatics_SetEnableBGMAutoResume) == 0x000001, "Wrong size on SQEXSEADStatics_SetEnableBGMAutoResume");
static_assert(offsetof(SQEXSEADStatics_SetEnableBGMAutoResume, bIsEnabled) == 0x000000, "Member 'SQEXSEADStatics_SetEnableBGMAutoResume::bIsEnabled' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.SetExternalParameter
// 0x0010 (0x0010 - 0x0000)
struct SQEXSEADStatics_SetExternalParameter final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEXSEADStatics_SetExternalParameter) == 0x000004, "Wrong alignment on SQEXSEADStatics_SetExternalParameter");
static_assert(sizeof(SQEXSEADStatics_SetExternalParameter) == 0x000010, "Wrong size on SQEXSEADStatics_SetExternalParameter");
static_assert(offsetof(SQEXSEADStatics_SetExternalParameter, ParamName) == 0x000000, "Member 'SQEXSEADStatics_SetExternalParameter::ParamName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SetExternalParameter, Value) == 0x000008, "Member 'SQEXSEADStatics_SetExternalParameter::Value' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.SetIsInCutScene
// 0x0001 (0x0001 - 0x0000)
struct SQEXSEADStatics_SetIsInCutScene final
{
public:
	bool                                          bIsCutScene;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_SetIsInCutScene) == 0x000001, "Wrong alignment on SQEXSEADStatics_SetIsInCutScene");
static_assert(sizeof(SQEXSEADStatics_SetIsInCutScene) == 0x000001, "Wrong size on SQEXSEADStatics_SetIsInCutScene");
static_assert(offsetof(SQEXSEADStatics_SetIsInCutScene, bIsCutScene) == 0x000000, "Member 'SQEXSEADStatics_SetIsInCutScene::bIsCutScene' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.StopAllBGM_OptionalFade
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADStatics_StopAllBGM_OptionalFade final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_StopAllBGM_OptionalFade) == 0x000004, "Wrong alignment on SQEXSEADStatics_StopAllBGM_OptionalFade");
static_assert(sizeof(SQEXSEADStatics_StopAllBGM_OptionalFade) == 0x000004, "Wrong size on SQEXSEADStatics_StopAllBGM_OptionalFade");
static_assert(offsetof(SQEXSEADStatics_StopAllBGM_OptionalFade, FadeTime) == 0x000000, "Member 'SQEXSEADStatics_StopAllBGM_OptionalFade::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.StopAllCategorySounds
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADStatics_StopAllCategorySounds final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_StopAllCategorySounds) == 0x000004, "Wrong alignment on SQEXSEADStatics_StopAllCategorySounds");
static_assert(sizeof(SQEXSEADStatics_StopAllCategorySounds) == 0x000004, "Wrong size on SQEXSEADStatics_StopAllCategorySounds");
static_assert(offsetof(SQEXSEADStatics_StopAllCategorySounds, FadeTime) == 0x000000, "Member 'SQEXSEADStatics_StopAllCategorySounds::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.SuspendBGM_OptionalFade
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADStatics_SuspendBGM_OptionalFade final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_SuspendBGM_OptionalFade) == 0x000004, "Wrong alignment on SQEXSEADStatics_SuspendBGM_OptionalFade");
static_assert(sizeof(SQEXSEADStatics_SuspendBGM_OptionalFade) == 0x000004, "Wrong size on SQEXSEADStatics_SuspendBGM_OptionalFade");
static_assert(offsetof(SQEXSEADStatics_SuspendBGM_OptionalFade, FadeTime) == 0x000000, "Member 'SQEXSEADStatics_SuspendBGM_OptionalFade::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.ZeroOneCtrl_SetValue
// 0x0010 (0x0010 - 0x0000)
struct SQEXSEADStatics_ZeroOneCtrl_SetValue final
{
public:
	class UAudioComponent*                        AudioComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_ZeroOneCtrl_SetValue) == 0x000008, "Wrong alignment on SQEXSEADStatics_ZeroOneCtrl_SetValue");
static_assert(sizeof(SQEXSEADStatics_ZeroOneCtrl_SetValue) == 0x000010, "Wrong size on SQEXSEADStatics_ZeroOneCtrl_SetValue");
static_assert(offsetof(SQEXSEADStatics_ZeroOneCtrl_SetValue, AudioComponent) == 0x000000, "Member 'SQEXSEADStatics_ZeroOneCtrl_SetValue::AudioComponent' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_ZeroOneCtrl_SetValue, Slot) == 0x000008, "Member 'SQEXSEADStatics_ZeroOneCtrl_SetValue::Slot' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_ZeroOneCtrl_SetValue, Value) == 0x00000C, "Member 'SQEXSEADStatics_ZeroOneCtrl_SetValue::Value' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADZeroOneSeComponent.SetZeroOneValue
// 0x000C (0x000C - 0x0000)
struct SQEXSEADZeroOneSeComponent_SetZeroOneValue final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADZeroOneSeComponent_SetZeroOneValue) == 0x000004, "Wrong alignment on SQEXSEADZeroOneSeComponent_SetZeroOneValue");
static_assert(sizeof(SQEXSEADZeroOneSeComponent_SetZeroOneValue) == 0x00000C, "Wrong size on SQEXSEADZeroOneSeComponent_SetZeroOneValue");
static_assert(offsetof(SQEXSEADZeroOneSeComponent_SetZeroOneValue, Slot) == 0x000000, "Member 'SQEXSEADZeroOneSeComponent_SetZeroOneValue::Slot' has a wrong offset!");
static_assert(offsetof(SQEXSEADZeroOneSeComponent_SetZeroOneValue, Value) == 0x000004, "Member 'SQEXSEADZeroOneSeComponent_SetZeroOneValue::Value' has a wrong offset!");
static_assert(offsetof(SQEXSEADZeroOneSeComponent_SetZeroOneValue, FadeTime) == 0x000008, "Member 'SQEXSEADZeroOneSeComponent_SetZeroOneValue::FadeTime' has a wrong offset!");

}

