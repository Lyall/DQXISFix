#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Triple

#include "Basic.hpp"

#include "Triple_classes.hpp"
#include "Triple_parameters.hpp"


namespace SDK
{

// Function Triple.TripleCheatManager.TripleAchievementListLogOutput
// (Final, Exec, Native, Public)

void UTripleCheatManager::TripleAchievementListLogOutput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleAchievementListLogOutput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleBukiGuard
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Kind                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleBukiGuard(int32 Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleBukiGuard");

	Params::TripleCheatManager_TripleBattleBukiGuard Parms{};

	Parms.Kind = Kind;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleCommandAIActionPattern
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Index0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index1                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index2                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index3                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index4                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index5                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleCommandAIActionPattern(int32 Index0, int32 Index1, int32 Index2, int32 Index3, int32 Index4, int32 Index5)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleCommandAIActionPattern");

	Params::TripleCheatManager_TripleBattleCommandAIActionPattern Parms{};

	Parms.Index0 = Index0;
	Parms.Index1 = Index1;
	Parms.Index2 = Index2;
	Parms.Index3 = Index3;
	Parms.Index4 = Index4;
	Parms.Index5 = Index5;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleCommandAIInfo
// (Final, Exec, Native, Public)

void UTripleCheatManager::TripleBattleCommandAIInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleCommandAIInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleCommandAIReset
// (Final, Exec, Native, Public)

void UTripleCheatManager::TripleBattleCommandAIReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleCommandAIReset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleCommandAISetActionNo
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   GroupIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ActionNo                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleCommandAISetActionNo(int32 GroupIndex, int32 Index_0, int32 ActionNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleCommandAISetActionNo");

	Params::TripleCheatManager_TripleBattleCommandAISetActionNo Parms{};

	Parms.GroupIndex = GroupIndex;
	Parms.Index_0 = Index_0;
	Parms.ActionNo = ActionNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleCommandAISetConfuseKindMonster
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   GroupIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Kind                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleCommandAISetConfuseKindMonster(int32 GroupIndex, int32 Index_0, int32 Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleCommandAISetConfuseKindMonster");

	Params::TripleCheatManager_TripleBattleCommandAISetConfuseKindMonster Parms{};

	Parms.GroupIndex = GroupIndex;
	Parms.Index_0 = Index_0;
	Parms.Kind = Kind;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleCommandAISetConfuseKindPlayer
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Kind                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleCommandAISetConfuseKindPlayer(int32 PlayerId, int32 Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleCommandAISetConfuseKindPlayer");

	Params::TripleCheatManager_TripleBattleCommandAISetConfuseKindPlayer Parms{};

	Parms.PlayerId = PlayerId;
	Parms.Kind = Kind;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleCommandAISetSlotNo
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   GroupIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SlotNo                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleCommandAISetSlotNo(int32 GroupIndex, int32 Index_0, int32 SlotNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleCommandAISetSlotNo");

	Params::TripleCheatManager_TripleBattleCommandAISetSlotNo Parms{};

	Parms.GroupIndex = GroupIndex;
	Parms.Index_0 = Index_0;
	Parms.SlotNo = SlotNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleCounter
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Kind                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleCounter(int32 Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleCounter");

	Params::TripleCheatManager_TripleBattleCounter Parms{};

	Parms.Kind = Kind;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleCritical
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleCritical(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleCritical");

	Params::TripleCheatManager_TripleBattleCritical Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleDeadMonster
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   GroupIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleDeadMonster(int32 GroupIndex, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleDeadMonster");

	Params::TripleCheatManager_TripleBattleDeadMonster Parms{};

	Parms.GroupIndex = GroupIndex;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleDeadPlayer
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   PlayerIdNum                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleDeadPlayer(int32 PlayerIdNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleDeadPlayer");

	Params::TripleCheatManager_TripleBattleDeadPlayer Parms{};

	Parms.PlayerIdNum = PlayerIdNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleEncountMonsterForceDropMonster
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleEncountMonsterForceDropMonster(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleEncountMonsterForceDropMonster");

	Params::TripleCheatManager_TripleBattleEncountMonsterForceDropMonster Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleEncountMonsterForceFirstAttack
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Kind                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleEncountMonsterForceFirstAttack(int32 Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleEncountMonsterForceFirstAttack");

	Params::TripleCheatManager_TripleBattleEncountMonsterForceFirstAttack Parms{};

	Parms.Kind = Kind;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleEncountMonsterForceMetal
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleEncountMonsterForceMetal(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleEncountMonsterForceMetal");

	Params::TripleCheatManager_TripleBattleEncountMonsterForceMetal Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleEncountMonsterForceTensei
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleEncountMonsterForceTensei(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleEncountMonsterForceTensei");

	Params::TripleCheatManager_TripleBattleEncountMonsterForceTensei Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleEncountMonsterReset
// (Final, Exec, Native, Public)

void UTripleCheatManager::TripleBattleEncountMonsterReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleEncountMonsterReset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleEncountMonsterSet
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           MonsterID                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleEncountMonsterSet(const class FString& MonsterID, int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleEncountMonsterSet");

	Params::TripleCheatManager_TripleBattleEncountMonsterSet Parms{};

	Parms.MonsterID = std::move(MonsterID);
	Parms.Num = Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleEncountMonsterSet2
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           MonsterID0                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Num0                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           MonsterID1                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Num1                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleEncountMonsterSet2(const class FString& MonsterID0, int32 Num0, const class FString& MonsterID1, int32 Num1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleEncountMonsterSet2");

	Params::TripleCheatManager_TripleBattleEncountMonsterSet2 Parms{};

	Parms.MonsterID0 = std::move(MonsterID0);
	Parms.Num0 = Num0;
	Parms.MonsterID1 = std::move(MonsterID1);
	Parms.Num1 = Num1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleEncountMonsterSet3
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           MonsterID0                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Num0                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           MonsterID1                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Num1                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           MonsterID2                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Num2                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleEncountMonsterSet3(const class FString& MonsterID0, int32 Num0, const class FString& MonsterID1, int32 Num1, const class FString& MonsterID2, int32 Num2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleEncountMonsterSet3");

	Params::TripleCheatManager_TripleBattleEncountMonsterSet3 Parms{};

	Parms.MonsterID0 = std::move(MonsterID0);
	Parms.Num0 = Num0;
	Parms.MonsterID1 = std::move(MonsterID1);
	Parms.Num1 = Num1;
	Parms.MonsterID2 = std::move(MonsterID2);
	Parms.Num2 = Num2;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleEncountMonsterSet4
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           MonsterID0                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Num0                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           MonsterID1                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Num1                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           MonsterID2                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Num2                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           MonsterID3                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Num3                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleEncountMonsterSet4(const class FString& MonsterID0, int32 Num0, const class FString& MonsterID1, int32 Num1, const class FString& MonsterID2, int32 Num2, const class FString& MonsterID3, int32 Num3)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleEncountMonsterSet4");

	Params::TripleCheatManager_TripleBattleEncountMonsterSet4 Parms{};

	Parms.MonsterID0 = std::move(MonsterID0);
	Parms.Num0 = Num0;
	Parms.MonsterID1 = std::move(MonsterID1);
	Parms.Num1 = Num1;
	Parms.MonsterID2 = std::move(MonsterID2);
	Parms.Num2 = Num2;
	Parms.MonsterID3 = std::move(MonsterID3);
	Parms.Num3 = Num3;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleHazukasiiNoroiSetMessage
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleHazukasiiNoroiSetMessage(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleHazukasiiNoroiSetMessage");

	Params::TripleCheatManager_TripleBattleHazukasiiNoroiSetMessage Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleLose
// (Final, Exec, Native, Public)

void UTripleCheatManager::TripleBattleLose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleLose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleMikawasi
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Kind                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleMikawasi(int32 Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleMikawasi");

	Params::TripleCheatManager_TripleBattleMikawasi Parms{};

	Parms.Kind = Kind;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleMiss
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleMiss(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleMiss");

	Params::TripleCheatManager_TripleBattleMiss Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleMitoreru
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Kind                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleMitoreru(int32 Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleMitoreru");

	Params::TripleCheatManager_TripleBattleMitoreru Parms{};

	Parms.Kind = Kind;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleNigeru
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Kind                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleNigeru(int32 Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleNigeru");

	Params::TripleCheatManager_TripleBattleNigeru Parms{};

	Parms.Kind = Kind;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleOddEffect
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Kind                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleOddEffect(int32 Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleOddEffect");

	Params::TripleCheatManager_TripleBattleOddEffect Parms{};

	Parms.Kind = Kind;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleSenseiKougeki
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Kind                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleSenseiKougeki(int32 Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleSenseiKougeki");

	Params::TripleCheatManager_TripleBattleSenseiKougeki Parms{};

	Parms.Kind = Kind;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleTateGuard
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Kind                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleTateGuard(int32 Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleTateGuard");

	Params::TripleCheatManager_TripleBattleTateGuard Parms{};

	Parms.Kind = Kind;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleBattleTurnSkip
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Kind                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleBattleTurnSkip(int32 Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleBattleTurnSkip");

	Params::TripleCheatManager_TripleBattleTurnSkip Parms{};

	Parms.Kind = Kind;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleDisplayCoinInfo
// (Final, Exec, Native, Public)

void UTripleCheatManager::TripleDisplayCoinInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleDisplayCoinInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleExecAutoSave
// (Final, Exec, Native, Public)

void UTripleCheatManager::TripleExecAutoSave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleExecAutoSave");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleExecDTCommand
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           Category                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value1                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value2                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Cmd                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleExecDTCommand(const class FString& Category, int32 Value1, int32 Value2, const class FString& Cmd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleExecDTCommand");

	Params::TripleCheatManager_TripleExecDTCommand Parms{};

	Parms.Category = std::move(Category);
	Parms.Value1 = Value1;
	Parms.Value2 = Value2;
	Parms.Cmd = std::move(Cmd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleExecReincarnation
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           ReincarnationId                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleExecReincarnation(const class FString& ReincarnationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleExecReincarnation");

	Params::TripleCheatManager_TripleExecReincarnation Parms{};

	Parms.ReincarnationId = std::move(ReincarnationId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleExecRevival
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   RevivalId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleExecRevival(int32 RevivalId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleExecRevival");

	Params::TripleCheatManager_TripleExecRevival Parms{};

	Parms.RevivalId = RevivalId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleForceAcquireAchievement
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           AchievementID                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleForceAcquireAchievement(const class FString& AchievementID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleForceAcquireAchievement");

	Params::TripleCheatManager_TripleForceAcquireAchievement Parms{};

	Parms.AchievementID = std::move(AchievementID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleForceAcquireAchievementAll
// (Final, Exec, Native, Public)

void UTripleCheatManager::TripleForceAcquireAchievementAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleForceAcquireAchievementAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleForceAddCasinoCoinNum
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleForceAddCasinoCoinNum(int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleForceAddCasinoCoinNum");

	Params::TripleCheatManager_TripleForceAddCasinoCoinNum Parms{};

	Parms.Num = Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleForceAddSmallMedalNum
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleForceAddSmallMedalNum(int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleForceAddSmallMedalNum");

	Params::TripleCheatManager_TripleForceAddSmallMedalNum Parms{};

	Parms.Num = Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleForceDiscardItem
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           ItemID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleForceDiscardItem(const class FString& ItemID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleForceDiscardItem");

	Params::TripleCheatManager_TripleForceDiscardItem Parms{};

	Parms.ItemID = std::move(ItemID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleForceGetItem
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           ItemID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleForceGetItem(const class FString& ItemID, int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleForceGetItem");

	Params::TripleCheatManager_TripleForceGetItem Parms{};

	Parms.ItemID = std::move(ItemID);
	Parms.Num = Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleForceGetItemToBag
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           ItemID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleForceGetItemToBag(const class FString& ItemID, int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleForceGetItemToBag");

	Params::TripleCheatManager_TripleForceGetItemToBag Parms{};

	Parms.ItemID = std::move(ItemID);
	Parms.Num = Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleForceLearningRecipeBookAll
// (Final, Exec, Native, Public)

void UTripleCheatManager::TripleForceLearningRecipeBookAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleForceLearningRecipeBookAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleForceLearningRecipeBookFromItemId
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           ItemID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleForceLearningRecipeBookFromItemId(const class FString& ItemID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleForceLearningRecipeBookFromItemId");

	Params::TripleCheatManager_TripleForceLearningRecipeBookFromItemId Parms{};

	Parms.ItemID = std::move(ItemID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleForceRecordExecuteRenkei
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           RenkeiID                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleForceRecordExecuteRenkei(const class FString& RenkeiID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleForceRecordExecuteRenkei");

	Params::TripleCheatManager_TripleForceRecordExecuteRenkei Parms{};

	Parms.RenkeiID = std::move(RenkeiID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleForceRecordRideMonster
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           EnemyID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleForceRecordRideMonster(const class FString& EnemyID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleForceRecordRideMonster");

	Params::TripleCheatManager_TripleForceRecordRideMonster Parms{};

	Parms.EnemyID = std::move(EnemyID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleForceSetCampCount
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleForceSetCampCount(int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleForceSetCampCount");

	Params::TripleCheatManager_TripleForceSetCampCount Parms{};

	Parms.Num = Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleForceSetDefeatMonsterCount
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           MonsterID                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleForceSetDefeatMonsterCount(const class FString& MonsterID, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleForceSetDefeatMonsterCount");

	Params::TripleCheatManager_TripleForceSetDefeatMonsterCount Parms{};

	Parms.MonsterID = std::move(MonsterID);
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleForceSetDefeatMonsterZukanCount
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   MonsterZukanID                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleForceSetDefeatMonsterZukanCount(int32 MonsterZukanID, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleForceSetDefeatMonsterZukanCount");

	Params::TripleCheatManager_TripleForceSetDefeatMonsterZukanCount Parms{};

	Parms.MonsterZukanID = MonsterZukanID;
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleForceSetFusigikajiCreatedFlag
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           ItemID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleForceSetFusigikajiCreatedFlag(const class FString& ItemID, bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleForceSetFusigikajiCreatedFlag");

	Params::TripleCheatManager_TripleForceSetFusigikajiCreatedFlag Parms{};

	Parms.ItemID = std::move(ItemID);
	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleForceSetFusigikajiPlayCount
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleForceSetFusigikajiPlayCount(int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleForceSetFusigikajiPlayCount");

	Params::TripleCheatManager_TripleForceSetFusigikajiPlayCount Parms{};

	Parms.Num = Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleForceSetFusigikajiRetryCount
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleForceSetFusigikajiRetryCount(int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleForceSetFusigikajiRetryCount");

	Params::TripleCheatManager_TripleForceSetFusigikajiRetryCount Parms{};

	Parms.Num = Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleForceSetFusigikajiSuccessCount
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleForceSetFusigikajiSuccessCount(int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleForceSetFusigikajiSuccessCount");

	Params::TripleCheatManager_TripleForceSetFusigikajiSuccessCount Parms{};

	Parms.Num = Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleForceSetGrassItemUseCount
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleForceSetGrassItemUseCount(int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleForceSetGrassItemUseCount");

	Params::TripleCheatManager_TripleForceSetGrassItemUseCount Parms{};

	Parms.Num = Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleForceSetInnStayCount
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleForceSetInnStayCount(int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleForceSetInnStayCount");

	Params::TripleCheatManager_TripleForceSetInnStayCount Parms{};

	Parms.Num = Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleForceSetObjectDestructionCount
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleForceSetObjectDestructionCount(int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleForceSetObjectDestructionCount");

	Params::TripleCheatManager_TripleForceSetObjectDestructionCount Parms{};

	Parms.Num = Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleForceSetRenkeiUseCount
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleForceSetRenkeiUseCount(int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleForceSetRenkeiUseCount");

	Params::TripleCheatManager_TripleForceSetRenkeiUseCount Parms{};

	Parms.Num = Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleForceSetSibariPlayFlag
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Kind                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Valid                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleForceSetSibariPlayFlag(int32 Kind, bool Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleForceSetSibariPlayFlag");

	Params::TripleCheatManager_TripleForceSetSibariPlayFlag Parms{};

	Parms.Kind = Kind;
	Parms.Valid = Valid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleFriendJoin
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   PlayerIdNum                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleFriendJoin(int32 PlayerIdNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleFriendJoin");

	Params::TripleCheatManager_TripleFriendJoin Parms{};

	Parms.PlayerIdNum = PlayerIdNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleFriendLeave
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   PlayerIdNum                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleFriendLeave(int32 PlayerIdNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleFriendLeave");

	Params::TripleCheatManager_TripleFriendLeave Parms{};

	Parms.PlayerIdNum = PlayerIdNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleGold
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   AddNum                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleGold(int32 AddNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleGold");

	Params::TripleCheatManager_TripleGold Parms{};

	Parms.AddNum = AddNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleHpSet
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           CharaID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HP                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleHpSet(const class FString& CharaID, int32 HP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleHpSet");

	Params::TripleCheatManager_TripleHpSet Parms{};

	Parms.CharaID = std::move(CharaID);
	Parms.HP = HP;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleLevelSet
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           CharaID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Lv                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleLevelSet(const class FString& CharaID, int32 Lv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleLevelSet");

	Params::TripleCheatManager_TripleLevelSet Parms{};

	Parms.CharaID = std::move(CharaID);
	Parms.Lv = Lv;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleMpSet
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           CharaID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MP                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleMpSet(const class FString& CharaID, int32 MP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleMpSet");

	Params::TripleCheatManager_TripleMpSet Parms{};

	Parms.CharaID = std::move(CharaID);
	Parms.MP = MP;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleMugenMP
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Kind                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleMugenMP(int32 Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleMugenMP");

	Params::TripleCheatManager_TripleMugenMP Parms{};

	Parms.Kind = Kind;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleOddEffectClearBadMonster
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   GroupIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleOddEffectClearBadMonster(int32 GroupIndex, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleOddEffectClearBadMonster");

	Params::TripleCheatManager_TripleOddEffectClearBadMonster Parms{};

	Parms.GroupIndex = GroupIndex;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleOddEffectClearBadPlayer
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   PlayerIdNum                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleOddEffectClearBadPlayer(int32 PlayerIdNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleOddEffectClearBadPlayer");

	Params::TripleCheatManager_TripleOddEffectClearBadPlayer Parms{};

	Parms.PlayerIdNum = PlayerIdNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleOddEffectClearGoodMonster
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   GroupIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleOddEffectClearGoodMonster(int32 GroupIndex, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleOddEffectClearGoodMonster");

	Params::TripleCheatManager_TripleOddEffectClearGoodMonster Parms{};

	Parms.GroupIndex = GroupIndex;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleOddEffectClearGoodPlayer
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   PlayerIdNum                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleOddEffectClearGoodPlayer(int32 PlayerIdNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleOddEffectClearGoodPlayer");

	Params::TripleCheatManager_TripleOddEffectClearGoodPlayer Parms{};

	Parms.PlayerIdNum = PlayerIdNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleOutputGameDataText
// (Final, Exec, Native, Public)

void UTripleCheatManager::TripleOutputGameDataText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleOutputGameDataText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleOutputManagerAddr
// (Final, Exec, Native, Public)

void UTripleCheatManager::TripleOutputManagerAddr()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleOutputManagerAddr");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleOutputVersion
// (Final, Exec, Native, Public)

void UTripleCheatManager::TripleOutputVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleOutputVersion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TriplePrintText
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           InTextId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TriplePrintText(const class FString& InTextId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TriplePrintText");

	Params::TripleCheatManager_TriplePrintText Parms{};

	Parms.InTextId = std::move(InTextId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TriplePrintTextArgs
// (Final, Exec, Native, Public)
// Parameters:
// TArray<class FString>                   ParamList                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UTripleCheatManager::TriplePrintTextArgs(const TArray<class FString>& ParamList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TriplePrintTextArgs");

	Params::TripleCheatManager_TriplePrintTextArgs Parms{};

	Parms.ParamList = std::move(ParamList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleQuestProgressSetEnd
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           QuestId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleQuestProgressSetEnd(const class FString& QuestId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleQuestProgressSetEnd");

	Params::TripleCheatManager_TripleQuestProgressSetEnd Parms{};

	Parms.QuestId = std::move(QuestId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleReturnTitle
// (Final, Exec, Native, Public)

void UTripleCheatManager::TripleReturnTitle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleReturnTitle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleRunRate
// (Final, Exec, Native, Public)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleRunRate(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleRunRate");

	Params::TripleCheatManager_TripleRunRate Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleRuraShowAll
// (Final, Exec, Native, Public)

void UTripleCheatManager::TripleRuraShowAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleRuraShowAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleSenrekiAndTabinokokoroeOpenAll
// (Final, Exec, Native, Public)

void UTripleCheatManager::TripleSenrekiAndTabinokokoroeOpenAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleSenrekiAndTabinokokoroeOpenAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleSetBattleVictory
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleSetBattleVictory(int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleSetBattleVictory");

	Params::TripleCheatManager_TripleSetBattleVictory Parms{};

	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleSetGameplayTime
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Sec                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleSetGameplayTime(int32 Sec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleSetGameplayTime");

	Params::TripleCheatManager_TripleSetGameplayTime Parms{};

	Parms.Sec = Sec;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleSetTalker
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           InNpcId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleSetTalker(const class FString& InNpcId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleSetTalker");

	Params::TripleCheatManager_TripleSetTalker Parms{};

	Parms.InNpcId = std::move(InNpcId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleSetTalkerName
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           InNpcName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleSetTalkerName(const class FString& InNpcName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleSetTalkerName");

	Params::TripleCheatManager_TripleSetTalkerName Parms{};

	Parms.InNpcName = std::move(InNpcName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleSkillJumonOpen
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           SkillJumonID                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleSkillJumonOpen(const class FString& SkillJumonID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleSkillJumonOpen");

	Params::TripleCheatManager_TripleSkillJumonOpen Parms{};

	Parms.SkillJumonID = std::move(SkillJumonID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleSkillOpen
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           SkillID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleSkillOpen(const class FString& SkillID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleSkillOpen");

	Params::TripleCheatManager_TripleSkillOpen Parms{};

	Parms.SkillID = std::move(SkillID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleSkillOpen2
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           SkillID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleSkillOpen2(const class FString& SkillID, int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleSkillOpen2");

	Params::TripleCheatManager_TripleSkillOpen2 Parms{};

	Parms.SkillID = std::move(SkillID);
	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleSkillPassiveOpen
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           SkillPassiveID                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleSkillPassiveOpen(const class FString& SkillPassiveID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleSkillPassiveOpen");

	Params::TripleCheatManager_TripleSkillPassiveOpen Parms{};

	Parms.SkillPassiveID = std::move(SkillPassiveID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleTimeZoneInfo
// (Final, Exec, Native, Public)

void UTripleCheatManager::TripleTimeZoneInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleTimeZoneInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleTimeZoneMoveToNext
// (Final, Exec, Native, Public)

void UTripleCheatManager::TripleTimeZoneMoveToNext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleTimeZoneMoveToNext");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleTimeZoneOverride
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Timezone                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleTimeZoneOverride(int32 Timezone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleTimeZoneOverride");

	Params::TripleCheatManager_TripleTimeZoneOverride Parms{};

	Parms.Timezone = Timezone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleTrophiesCompleteWait
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bIsWaitMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleTrophiesCompleteWait(bool bIsWaitMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleTrophiesCompleteWait");

	Params::TripleCheatManager_TripleTrophiesCompleteWait Parms{};

	Parms.bIsWaitMode = bIsWaitMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleTrophiesNew
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   InTestNumber                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleTrophiesNew(int32 InTestNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleTrophiesNew");

	Params::TripleCheatManager_TripleTrophiesNew Parms{};

	Parms.InTestNumber = InTestNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleTrophiesReacquiredUE4Achievement
// (Final, Exec, Native, Public)

void UTripleCheatManager::TripleTrophiesReacquiredUE4Achievement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleTrophiesReacquiredUE4Achievement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Triple.TripleCheatManager.TripleWeatherSet
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Kind                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTripleCheatManager::TripleWeatherSet(int32 Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TripleCheatManager", "TripleWeatherSet");

	Params::TripleCheatManager_TripleWeatherSet Parms{};

	Parms.Kind = Kind;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

