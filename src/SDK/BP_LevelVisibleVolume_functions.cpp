#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LevelVisibleVolume

#include "Basic.hpp"

#include "BP_LevelVisibleVolume_classes.hpp"
#include "BP_LevelVisibleVolume_parameters.hpp"


namespace SDK
{

// Function BP_LevelVisibleVolume.BP_LevelVisibleVolume_C.ExecuteUbergraph_BP_LevelVisibleVolume
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelVisibleVolume_C::ExecuteUbergraph_BP_LevelVisibleVolume(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelVisibleVolume_C", "ExecuteUbergraph_BP_LevelVisibleVolume");

	Params::BP_LevelVisibleVolume_C_ExecuteUbergraph_BP_LevelVisibleVolume Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelVisibleVolume.BP_LevelVisibleVolume_C.BattleEndVisibleCheck
// (BlueprintCallable, BlueprintEvent)

void ABP_LevelVisibleVolume_C::BattleEndVisibleCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelVisibleVolume_C", "BattleEndVisibleCheck");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelVisibleVolume.BP_LevelVisibleVolume_C.BattleEnd
// (BlueprintCallable, BlueprintEvent)

void ABP_LevelVisibleVolume_C::BattleEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelVisibleVolume_C", "BattleEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelVisibleVolume.BP_LevelVisibleVolume_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_LevelVisibleVolume_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelVisibleVolume_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelVisibleVolume.BP_LevelVisibleVolume_C.MapJumpBeginPlay
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LevelVisibleVolume_C::MapJumpBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelVisibleVolume_C", "MapJumpBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelVisibleVolume.BP_LevelVisibleVolume_C.BndEvt__BrushOuter_K2Node_ComponentBoundEvent_233_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelVisibleVolume_C::BndEvt__BrushOuter_K2Node_ComponentBoundEvent_233_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelVisibleVolume_C", "BndEvt__BrushOuter_K2Node_ComponentBoundEvent_233_ComponentEndOverlapSignature__DelegateSignature");

	Params::BP_LevelVisibleVolume_C_BndEvt__BrushOuter_K2Node_ComponentBoundEvent_233_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelVisibleVolume.BP_LevelVisibleVolume_C.BndEvt__BrushComponent_K2Node_ComponentBoundEvent_225_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_LevelVisibleVolume_C::BndEvt__BrushComponent_K2Node_ComponentBoundEvent_225_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelVisibleVolume_C", "BndEvt__BrushComponent_K2Node_ComponentBoundEvent_225_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_LevelVisibleVolume_C_BndEvt__BrushComponent_K2Node_ComponentBoundEvent_225_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelVisibleVolume.BP_LevelVisibleVolume_C.MapJumpEndPlay
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LevelVisibleVolume_C::MapJumpEndPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelVisibleVolume_C", "MapJumpEndPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelVisibleVolume.BP_LevelVisibleVolume_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LevelVisibleVolume_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelVisibleVolume_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelVisibleVolume.BP_LevelVisibleVolume_C.SetForceVisible
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelVisibleVolume_C::SetForceVisible(bool Visible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelVisibleVolume_C", "SetForceVisible");

	Params::BP_LevelVisibleVolume_C_SetForceVisible Parms{};

	Parms.Visible_0 = Visible_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelVisibleVolume.BP_LevelVisibleVolume_C.ResetForceVisble
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LevelVisibleVolume_C::ResetForceVisble()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelVisibleVolume_C", "ResetForceVisble");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelVisibleVolume.BP_LevelVisibleVolume_C.IsAllLevelVisible
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Visble                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelVisibleVolume_C::IsAllLevelVisible(bool* Visble)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelVisibleVolume_C", "IsAllLevelVisible");

	Params::BP_LevelVisibleVolume_C_IsAllLevelVisible Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Visble != nullptr)
		*Visble = Parms.Visble;
}


// Function BP_LevelVisibleVolume.BP_LevelVisibleVolume_C.LevelVisible
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelVisibleVolume_C::LevelVisible(bool Visible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelVisibleVolume_C", "LevelVisible");

	Params::BP_LevelVisibleVolume_C_LevelVisible Parms{};

	Parms.Visible_0 = Visible_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelVisibleVolume.BP_LevelVisibleVolume_C.IsAllLevelLoaded
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    LoadRequest                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLoaded                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class FName>                     RequestLevel                                           (Parm, OutParm, ZeroConstructor)

void ABP_LevelVisibleVolume_C::IsAllLevelLoaded(bool LoadRequest, bool* IsLoaded, TArray<class FName>* RequestLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelVisibleVolume_C", "IsAllLevelLoaded");

	Params::BP_LevelVisibleVolume_C_IsAllLevelLoaded Parms{};

	Parms.LoadRequest = LoadRequest;

	UObject::ProcessEvent(Func, &Parms);

	if (IsLoaded != nullptr)
		*IsLoaded = Parms.IsLoaded;

	if (RequestLevel != nullptr)
		*RequestLevel = std::move(Parms.RequestLevel);
}


// Function BP_LevelVisibleVolume.BP_LevelVisibleVolume_C.Ban
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LevelVisibleVolume_C::Ban()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelVisibleVolume_C", "Ban");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelVisibleVolume.BP_LevelVisibleVolume_C.Uninhibited
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LevelVisibleVolume_C::Uninhibited()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelVisibleVolume_C", "Uninhibited");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelVisibleVolume.BP_LevelVisibleVolume_C.CheckLoadState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EJackCSMapLevelStatus                   State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    End                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelVisibleVolume_C::CheckLoadState(class FName LevelName, EJackCSMapLevelStatus State, bool* End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelVisibleVolume_C", "CheckLoadState");

	Params::BP_LevelVisibleVolume_C_CheckLoadState Parms{};

	Parms.LevelName = LevelName;
	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);

	if (End != nullptr)
		*End = Parms.End;
}


// Function BP_LevelVisibleVolume.BP_LevelVisibleVolume_C.CheckCutSceneAndVisible
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LevelVisibleVolume_C::CheckCutSceneAndVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelVisibleVolume_C", "CheckCutSceneAndVisible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelVisibleVolume.BP_LevelVisibleVolume_C.CheckIgnoreCS
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelVisibleVolume_C::CheckIgnoreCS(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelVisibleVolume_C", "CheckIgnoreCS");

	Params::BP_LevelVisibleVolume_C_CheckIgnoreCS Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_LevelVisibleVolume.BP_LevelVisibleVolume_C.BindBattle
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LevelVisibleVolume_C::BindBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelVisibleVolume_C", "BindBattle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelVisibleVolume.BP_LevelVisibleVolume_C.CheckVisible
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelVisibleVolume_C::CheckVisible(bool* Visible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelVisibleVolume_C", "CheckVisible");

	Params::BP_LevelVisibleVolume_C_CheckVisible Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Visible_0 != nullptr)
		*Visible_0 = Parms.Visible_0;
}

}

