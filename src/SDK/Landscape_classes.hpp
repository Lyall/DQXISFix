#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Landscape

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Landscape_structs.hpp"


namespace SDK
{

// Class Landscape.ControlPointMeshComponent
// 0x0000 (0x07D0 - 0x07D0)
class UControlPointMeshComponent final : public UStaticMeshComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlPointMeshComponent">();
	}
	static class UControlPointMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlPointMeshComponent>();
	}
};
static_assert(alignof(UControlPointMeshComponent) == 0x000010, "Wrong alignment on UControlPointMeshComponent");
static_assert(sizeof(UControlPointMeshComponent) == 0x0007D0, "Wrong size on UControlPointMeshComponent");

// Class Landscape.LandscapeProxy
// 0x0408 (0x07A0 - 0x0398)
#pragma pack(push, 0x1)
class alignas(0x10) ALandscapeProxy : public AActor
{
public:
	class ULandscapeSplinesComponent*             SplineComponent;                                   // 0x0398(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  LandscapeGuid;                                     // 0x03A0(0x0010)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FIntPoint                              LandscapeSectionOffset;                            // 0x03B0(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLODLevel;                                       // 0x03B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LODDistanceFactor;                                 // 0x03BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELandscapeLODFalloff                          LODFalloff;                                        // 0x03C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C1[0x3];                                      // 0x03C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StaticLightingLOD;                                 // 0x03C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      DefaultPhysMaterial;                               // 0x03C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StreamingDistanceMultiplier;                       // 0x03D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     LandscapeMaterial;                                 // 0x03D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     LandscapeHoleMaterial;                             // 0x03E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NegativeZBoundsExtension;                          // 0x03E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositiveZBoundsExtension;                          // 0x03EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ULandscapeComponent*>            LandscapeComponents;                               // 0x03F0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class ULandscapeHeightfieldCollisionComponent*> CollisionComponents;                               // 0x0400(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UHierarchicalInstancedStaticMeshComponent*> FoliageComponents;                                 // 0x0410(0x0010)(ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_420[0x60];                                     // 0x0420(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHasLandscapeGrass;                                // 0x0480(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_481[0x3];                                      // 0x0481(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StaticLightingResolution;                          // 0x0484(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCastStaticShadow : 1;                             // 0x0488(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastShadowAsTwoSided : 1;                         // 0x0488(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastFarShadow : 1;                                // 0x0488(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_489[0x3];                                      // 0x0489(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLightingChannels                      LightingChannels;                                  // 0x048C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_48D[0x3];                                      // 0x048D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bUseMaterialPositionOffsetInStaticLighting : 1;    // 0x0490(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRenderCustomDepth : 1;                            // 0x0490(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_491[0x3];                                      // 0x0491(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CustomDepthStencilValue;                           // 0x0494(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightmassPrimitiveSettings            LightmassSettings;                                 // 0x0498(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         CollisionMipLevel;                                 // 0x04B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SimpleCollisionMipLevel;                           // 0x04B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionThickness;                                // 0x04B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4BC[0x4];                                      // 0x04BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBodyInstance                          BodyInstance;                                      // 0x04C0(0x0220)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         bGenerateOverlapEvents : 1;                        // 0x06E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bBakeMaterialPositionOffsetIntoCollision : 1;      // 0x06E0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_6E1[0x3];                                      // 0x06E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ComponentSizeQuads;                                // 0x06E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubsectionSizeQuads;                               // 0x06E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSubsections;                                    // 0x06EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bNeverStreamHeightmapTextures : 1;                 // 0x06F0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsedForNavigation : 1;                            // 0x06F0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_6F1[0x3];                                      // 0x06F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ENavDataGatheringMode                         NavigationGeometryGatheringMode;                   // 0x06F4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLandscapeForCullingInvisibleHLODVertices;      // 0x06F5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6F6[0xA2];                                     // 0x06F6(0x00A2)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeLODDistanceFactor(float InLODDistanceFactor);
	void EditorApplySpline(class USplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int32 NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, class ULandscapeLayerInfoObject* PaintLayer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeProxy">();
	}
	static class ALandscapeProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALandscapeProxy>();
	}
};
#pragma pack(pop)
static_assert(alignof(ALandscapeProxy) == 0x000010, "Wrong alignment on ALandscapeProxy");
static_assert(sizeof(ALandscapeProxy) == 0x0007A0, "Wrong size on ALandscapeProxy");
static_assert(offsetof(ALandscapeProxy, SplineComponent) == 0x000398, "Member 'ALandscapeProxy::SplineComponent' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, LandscapeGuid) == 0x0003A0, "Member 'ALandscapeProxy::LandscapeGuid' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, LandscapeSectionOffset) == 0x0003B0, "Member 'ALandscapeProxy::LandscapeSectionOffset' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, MaxLODLevel) == 0x0003B8, "Member 'ALandscapeProxy::MaxLODLevel' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, LODDistanceFactor) == 0x0003BC, "Member 'ALandscapeProxy::LODDistanceFactor' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, LODFalloff) == 0x0003C0, "Member 'ALandscapeProxy::LODFalloff' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, StaticLightingLOD) == 0x0003C4, "Member 'ALandscapeProxy::StaticLightingLOD' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, DefaultPhysMaterial) == 0x0003C8, "Member 'ALandscapeProxy::DefaultPhysMaterial' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, StreamingDistanceMultiplier) == 0x0003D0, "Member 'ALandscapeProxy::StreamingDistanceMultiplier' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, LandscapeMaterial) == 0x0003D8, "Member 'ALandscapeProxy::LandscapeMaterial' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, LandscapeHoleMaterial) == 0x0003E0, "Member 'ALandscapeProxy::LandscapeHoleMaterial' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, NegativeZBoundsExtension) == 0x0003E8, "Member 'ALandscapeProxy::NegativeZBoundsExtension' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, PositiveZBoundsExtension) == 0x0003EC, "Member 'ALandscapeProxy::PositiveZBoundsExtension' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, LandscapeComponents) == 0x0003F0, "Member 'ALandscapeProxy::LandscapeComponents' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, CollisionComponents) == 0x000400, "Member 'ALandscapeProxy::CollisionComponents' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, FoliageComponents) == 0x000410, "Member 'ALandscapeProxy::FoliageComponents' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, bHasLandscapeGrass) == 0x000480, "Member 'ALandscapeProxy::bHasLandscapeGrass' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, StaticLightingResolution) == 0x000484, "Member 'ALandscapeProxy::StaticLightingResolution' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, LightingChannels) == 0x00048C, "Member 'ALandscapeProxy::LightingChannels' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, CustomDepthStencilValue) == 0x000494, "Member 'ALandscapeProxy::CustomDepthStencilValue' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, LightmassSettings) == 0x000498, "Member 'ALandscapeProxy::LightmassSettings' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, CollisionMipLevel) == 0x0004B0, "Member 'ALandscapeProxy::CollisionMipLevel' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, SimpleCollisionMipLevel) == 0x0004B4, "Member 'ALandscapeProxy::SimpleCollisionMipLevel' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, CollisionThickness) == 0x0004B8, "Member 'ALandscapeProxy::CollisionThickness' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, BodyInstance) == 0x0004C0, "Member 'ALandscapeProxy::BodyInstance' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, ComponentSizeQuads) == 0x0006E4, "Member 'ALandscapeProxy::ComponentSizeQuads' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, SubsectionSizeQuads) == 0x0006E8, "Member 'ALandscapeProxy::SubsectionSizeQuads' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, NumSubsections) == 0x0006EC, "Member 'ALandscapeProxy::NumSubsections' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, NavigationGeometryGatheringMode) == 0x0006F4, "Member 'ALandscapeProxy::NavigationGeometryGatheringMode' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, bUseLandscapeForCullingInvisibleHLODVertices) == 0x0006F5, "Member 'ALandscapeProxy::bUseLandscapeForCullingInvisibleHLODVertices' has a wrong offset!");

// Class Landscape.Landscape
// 0x0000 (0x07A0 - 0x07A0)
class ALandscape final : public ALandscapeProxy
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Landscape">();
	}
	static class ALandscape* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALandscape>();
	}
};
static_assert(alignof(ALandscape) == 0x000010, "Wrong alignment on ALandscape");
static_assert(sizeof(ALandscape) == 0x0007A0, "Wrong size on ALandscape");

// Class Landscape.LandscapeComponent
// 0x0180 (0x08B0 - 0x0730)
class ULandscapeComponent final : public UPrimitiveComponent
{
public:
	int32                                         SectionBaseX;                                      // 0x0730(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionBaseY;                                      // 0x0734(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComponentSizeQuads;                                // 0x0738(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubsectionSizeQuads;                               // 0x073C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSubsections;                                    // 0x0740(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_744[0x4];                                      // 0x0744(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     OverrideMaterial;                                  // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     OverrideHoleMaterial;                              // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceConstant*>      MaterialInstances;                                 // 0x0758(0x0010)(ZeroConstructor, TextExportTransient, NativeAccessSpecifierPublic)
	TArray<struct FWeightmapLayerAllocationInfo>  WeightmapLayerAllocations;                         // 0x0768(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UTexture2D*>                     WeightmapTextures;                                 // 0x0778(0x0010)(ZeroConstructor, TextExportTransient, NativeAccessSpecifierPublic)
	class UTexture2D*                             XYOffsetmapTexture;                                // 0x0788(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, TextExportTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               WeightmapScaleBias;                                // 0x0790(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightmapSubsectionOffset;                         // 0x07A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A4[0xC];                                      // 0x07A4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               HeightmapScaleBias;                                // 0x07B0(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             HeightmapTexture;                                  // 0x07C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, TextExportTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   CachedLocalBox;                                    // 0x07C8(0x001C)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TLazyObjectPtr<class ULandscapeHeightfieldCollisionComponent> CollisionComponent;                                // 0x07E4(0x001C)(ExportObject, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MapBuildDataId;                                    // 0x0800(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          IrrelevantLights;                                  // 0x0810(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	int32                                         CollisionMipLevel;                                 // 0x0820(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SimpleCollisionMipLevel;                           // 0x0824(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NegativeZBoundsExtension;                          // 0x0828(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositiveZBoundsExtension;                          // 0x082C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaticLightingResolution;                          // 0x0830(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForcedLOD;                                         // 0x0834(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LODBias;                                           // 0x0838(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  StateId;                                           // 0x083C(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  BakedTextureMaterialGuid;                          // 0x084C(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85C[0x4];                                      // 0x085C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             GIBakedBaseColorTexture;                           // 0x0860(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MobileBlendableLayerMask;                          // 0x0868(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_869[0x7];                                      // 0x0869(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     MobileMaterialInterface;                           // 0x0870(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             MobileWeightNormalmapTexture;                      // 0x0878(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_880[0x30];                                     // 0x0880(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeComponent">();
	}
	static class ULandscapeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeComponent>();
	}
};
static_assert(alignof(ULandscapeComponent) == 0x000010, "Wrong alignment on ULandscapeComponent");
static_assert(sizeof(ULandscapeComponent) == 0x0008B0, "Wrong size on ULandscapeComponent");
static_assert(offsetof(ULandscapeComponent, SectionBaseX) == 0x000730, "Member 'ULandscapeComponent::SectionBaseX' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, SectionBaseY) == 0x000734, "Member 'ULandscapeComponent::SectionBaseY' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, ComponentSizeQuads) == 0x000738, "Member 'ULandscapeComponent::ComponentSizeQuads' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, SubsectionSizeQuads) == 0x00073C, "Member 'ULandscapeComponent::SubsectionSizeQuads' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, NumSubsections) == 0x000740, "Member 'ULandscapeComponent::NumSubsections' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, OverrideMaterial) == 0x000748, "Member 'ULandscapeComponent::OverrideMaterial' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, OverrideHoleMaterial) == 0x000750, "Member 'ULandscapeComponent::OverrideHoleMaterial' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, MaterialInstances) == 0x000758, "Member 'ULandscapeComponent::MaterialInstances' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, WeightmapLayerAllocations) == 0x000768, "Member 'ULandscapeComponent::WeightmapLayerAllocations' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, WeightmapTextures) == 0x000778, "Member 'ULandscapeComponent::WeightmapTextures' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, XYOffsetmapTexture) == 0x000788, "Member 'ULandscapeComponent::XYOffsetmapTexture' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, WeightmapScaleBias) == 0x000790, "Member 'ULandscapeComponent::WeightmapScaleBias' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, WeightmapSubsectionOffset) == 0x0007A0, "Member 'ULandscapeComponent::WeightmapSubsectionOffset' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, HeightmapScaleBias) == 0x0007B0, "Member 'ULandscapeComponent::HeightmapScaleBias' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, HeightmapTexture) == 0x0007C0, "Member 'ULandscapeComponent::HeightmapTexture' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, CachedLocalBox) == 0x0007C8, "Member 'ULandscapeComponent::CachedLocalBox' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, CollisionComponent) == 0x0007E4, "Member 'ULandscapeComponent::CollisionComponent' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, MapBuildDataId) == 0x000800, "Member 'ULandscapeComponent::MapBuildDataId' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, IrrelevantLights) == 0x000810, "Member 'ULandscapeComponent::IrrelevantLights' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, CollisionMipLevel) == 0x000820, "Member 'ULandscapeComponent::CollisionMipLevel' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, SimpleCollisionMipLevel) == 0x000824, "Member 'ULandscapeComponent::SimpleCollisionMipLevel' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, NegativeZBoundsExtension) == 0x000828, "Member 'ULandscapeComponent::NegativeZBoundsExtension' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, PositiveZBoundsExtension) == 0x00082C, "Member 'ULandscapeComponent::PositiveZBoundsExtension' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, StaticLightingResolution) == 0x000830, "Member 'ULandscapeComponent::StaticLightingResolution' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, ForcedLOD) == 0x000834, "Member 'ULandscapeComponent::ForcedLOD' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, LODBias) == 0x000838, "Member 'ULandscapeComponent::LODBias' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, StateId) == 0x00083C, "Member 'ULandscapeComponent::StateId' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, BakedTextureMaterialGuid) == 0x00084C, "Member 'ULandscapeComponent::BakedTextureMaterialGuid' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, GIBakedBaseColorTexture) == 0x000860, "Member 'ULandscapeComponent::GIBakedBaseColorTexture' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, MobileBlendableLayerMask) == 0x000868, "Member 'ULandscapeComponent::MobileBlendableLayerMask' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, MobileMaterialInterface) == 0x000870, "Member 'ULandscapeComponent::MobileMaterialInterface' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, MobileWeightNormalmapTexture) == 0x000878, "Member 'ULandscapeComponent::MobileWeightNormalmapTexture' has a wrong offset!");

// Class Landscape.LandscapeGizmoActor
// 0x0000 (0x0398 - 0x0398)
class ALandscapeGizmoActor : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeGizmoActor">();
	}
	static class ALandscapeGizmoActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALandscapeGizmoActor>();
	}
};
static_assert(alignof(ALandscapeGizmoActor) == 0x000008, "Wrong alignment on ALandscapeGizmoActor");
static_assert(sizeof(ALandscapeGizmoActor) == 0x000398, "Wrong size on ALandscapeGizmoActor");

// Class Landscape.LandscapeGizmoActiveActor
// 0x0050 (0x03E8 - 0x0398)
class ALandscapeGizmoActiveActor final : public ALandscapeGizmoActor
{
public:
	uint8                                         Pad_398[0x50];                                     // 0x0398(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeGizmoActiveActor">();
	}
	static class ALandscapeGizmoActiveActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALandscapeGizmoActiveActor>();
	}
};
static_assert(alignof(ALandscapeGizmoActiveActor) == 0x000008, "Wrong alignment on ALandscapeGizmoActiveActor");
static_assert(sizeof(ALandscapeGizmoActiveActor) == 0x0003E8, "Wrong size on ALandscapeGizmoActiveActor");

// Class Landscape.LandscapeGizmoRenderComponent
// 0x0000 (0x0730 - 0x0730)
class ULandscapeGizmoRenderComponent final : public UPrimitiveComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeGizmoRenderComponent">();
	}
	static class ULandscapeGizmoRenderComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeGizmoRenderComponent>();
	}
};
static_assert(alignof(ULandscapeGizmoRenderComponent) == 0x000010, "Wrong alignment on ULandscapeGizmoRenderComponent");
static_assert(sizeof(ULandscapeGizmoRenderComponent) == 0x000730, "Wrong size on ULandscapeGizmoRenderComponent");

// Class Landscape.LandscapeGrassType
// 0x0030 (0x0068 - 0x0038)
class ULandscapeGrassType final : public UObject
{
public:
	TArray<struct FGrassVariety>                  GrassVarieties;                                    // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UStaticMesh*                            GrassMesh;                                         // 0x0048(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrassDensity;                                      // 0x0050(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlacementJitter;                                   // 0x0054(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartCullDistance;                                 // 0x0058(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndCullDistance;                                   // 0x005C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RandomRotation;                                    // 0x0060(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlignToSurface;                                    // 0x0061(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeGrassType">();
	}
	static class ULandscapeGrassType* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeGrassType>();
	}
};
static_assert(alignof(ULandscapeGrassType) == 0x000008, "Wrong alignment on ULandscapeGrassType");
static_assert(sizeof(ULandscapeGrassType) == 0x000068, "Wrong size on ULandscapeGrassType");
static_assert(offsetof(ULandscapeGrassType, GrassVarieties) == 0x000038, "Member 'ULandscapeGrassType::GrassVarieties' has a wrong offset!");
static_assert(offsetof(ULandscapeGrassType, GrassMesh) == 0x000048, "Member 'ULandscapeGrassType::GrassMesh' has a wrong offset!");
static_assert(offsetof(ULandscapeGrassType, GrassDensity) == 0x000050, "Member 'ULandscapeGrassType::GrassDensity' has a wrong offset!");
static_assert(offsetof(ULandscapeGrassType, PlacementJitter) == 0x000054, "Member 'ULandscapeGrassType::PlacementJitter' has a wrong offset!");
static_assert(offsetof(ULandscapeGrassType, StartCullDistance) == 0x000058, "Member 'ULandscapeGrassType::StartCullDistance' has a wrong offset!");
static_assert(offsetof(ULandscapeGrassType, EndCullDistance) == 0x00005C, "Member 'ULandscapeGrassType::EndCullDistance' has a wrong offset!");
static_assert(offsetof(ULandscapeGrassType, RandomRotation) == 0x000060, "Member 'ULandscapeGrassType::RandomRotation' has a wrong offset!");
static_assert(offsetof(ULandscapeGrassType, AlignToSurface) == 0x000061, "Member 'ULandscapeGrassType::AlignToSurface' has a wrong offset!");

// Class Landscape.LandscapeHeightfieldCollisionComponent
// 0x00E0 (0x0810 - 0x0730)
class ULandscapeHeightfieldCollisionComponent : public UPrimitiveComponent
{
public:
	TArray<class ULandscapeLayerInfoObject*>      ComponentLayerInfos;                               // 0x0730(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SectionBaseX;                                      // 0x0740(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionBaseY;                                      // 0x0744(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollisionSizeQuads;                                // 0x0748(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionScale;                                    // 0x074C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SimpleCollisionSizeQuads;                          // 0x0750(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_754[0x4];                                      // 0x0754(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CollisionQuadFlags;                                // 0x0758(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGuid                                  HeightfieldGuid;                                   // 0x0768(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   CachedLocalBox;                                    // 0x0778(0x001C)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TLazyObjectPtr<class ULandscapeComponent>     RenderComponent;                                   // 0x0794(0x001C)(ExportObject, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B0[0x10];                                     // 0x07B0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPhysicalMaterial*>              CookedPhysicalMaterials;                           // 0x07C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D0[0x40];                                     // 0x07D0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeHeightfieldCollisionComponent">();
	}
	static class ULandscapeHeightfieldCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeHeightfieldCollisionComponent>();
	}
};
static_assert(alignof(ULandscapeHeightfieldCollisionComponent) == 0x000010, "Wrong alignment on ULandscapeHeightfieldCollisionComponent");
static_assert(sizeof(ULandscapeHeightfieldCollisionComponent) == 0x000810, "Wrong size on ULandscapeHeightfieldCollisionComponent");
static_assert(offsetof(ULandscapeHeightfieldCollisionComponent, ComponentLayerInfos) == 0x000730, "Member 'ULandscapeHeightfieldCollisionComponent::ComponentLayerInfos' has a wrong offset!");
static_assert(offsetof(ULandscapeHeightfieldCollisionComponent, SectionBaseX) == 0x000740, "Member 'ULandscapeHeightfieldCollisionComponent::SectionBaseX' has a wrong offset!");
static_assert(offsetof(ULandscapeHeightfieldCollisionComponent, SectionBaseY) == 0x000744, "Member 'ULandscapeHeightfieldCollisionComponent::SectionBaseY' has a wrong offset!");
static_assert(offsetof(ULandscapeHeightfieldCollisionComponent, CollisionSizeQuads) == 0x000748, "Member 'ULandscapeHeightfieldCollisionComponent::CollisionSizeQuads' has a wrong offset!");
static_assert(offsetof(ULandscapeHeightfieldCollisionComponent, CollisionScale) == 0x00074C, "Member 'ULandscapeHeightfieldCollisionComponent::CollisionScale' has a wrong offset!");
static_assert(offsetof(ULandscapeHeightfieldCollisionComponent, SimpleCollisionSizeQuads) == 0x000750, "Member 'ULandscapeHeightfieldCollisionComponent::SimpleCollisionSizeQuads' has a wrong offset!");
static_assert(offsetof(ULandscapeHeightfieldCollisionComponent, CollisionQuadFlags) == 0x000758, "Member 'ULandscapeHeightfieldCollisionComponent::CollisionQuadFlags' has a wrong offset!");
static_assert(offsetof(ULandscapeHeightfieldCollisionComponent, HeightfieldGuid) == 0x000768, "Member 'ULandscapeHeightfieldCollisionComponent::HeightfieldGuid' has a wrong offset!");
static_assert(offsetof(ULandscapeHeightfieldCollisionComponent, CachedLocalBox) == 0x000778, "Member 'ULandscapeHeightfieldCollisionComponent::CachedLocalBox' has a wrong offset!");
static_assert(offsetof(ULandscapeHeightfieldCollisionComponent, RenderComponent) == 0x000794, "Member 'ULandscapeHeightfieldCollisionComponent::RenderComponent' has a wrong offset!");
static_assert(offsetof(ULandscapeHeightfieldCollisionComponent, CookedPhysicalMaterials) == 0x0007C0, "Member 'ULandscapeHeightfieldCollisionComponent::CookedPhysicalMaterials' has a wrong offset!");

// Class Landscape.LandscapeMeshProxyActor
// 0x0008 (0x03A0 - 0x0398)
class ALandscapeMeshProxyActor final : public AActor
{
public:
	class ULandscapeMeshProxyComponent*           LandscapeMeshProxyComponent;                       // 0x0398(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeMeshProxyActor">();
	}
	static class ALandscapeMeshProxyActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALandscapeMeshProxyActor>();
	}
};
static_assert(alignof(ALandscapeMeshProxyActor) == 0x000008, "Wrong alignment on ALandscapeMeshProxyActor");
static_assert(sizeof(ALandscapeMeshProxyActor) == 0x0003A0, "Wrong size on ALandscapeMeshProxyActor");
static_assert(offsetof(ALandscapeMeshProxyActor, LandscapeMeshProxyComponent) == 0x000398, "Member 'ALandscapeMeshProxyActor::LandscapeMeshProxyComponent' has a wrong offset!");

// Class Landscape.LandscapeInfo
// 0x01D8 (0x0210 - 0x0038)
class ULandscapeInfo final : public UObject
{
public:
	TLazyObjectPtr<class ALandscape>              LandscapeActor;                                    // 0x0038(0x001C)(IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  LandscapeGuid;                                     // 0x0054(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComponentSizeQuads;                                // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubsectionSizeQuads;                               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComponentNumSubsections;                           // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DrawScale;                                         // 0x0070(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x54];                                      // 0x007C(0x0054)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class ALandscapeStreamingProxy*>         Proxies;                                           // 0x00D0(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_120[0xF0];                                     // 0x0120(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeInfo">();
	}
	static class ULandscapeInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeInfo>();
	}
};
static_assert(alignof(ULandscapeInfo) == 0x000008, "Wrong alignment on ULandscapeInfo");
static_assert(sizeof(ULandscapeInfo) == 0x000210, "Wrong size on ULandscapeInfo");
static_assert(offsetof(ULandscapeInfo, LandscapeActor) == 0x000038, "Member 'ULandscapeInfo::LandscapeActor' has a wrong offset!");
static_assert(offsetof(ULandscapeInfo, LandscapeGuid) == 0x000054, "Member 'ULandscapeInfo::LandscapeGuid' has a wrong offset!");
static_assert(offsetof(ULandscapeInfo, ComponentSizeQuads) == 0x000064, "Member 'ULandscapeInfo::ComponentSizeQuads' has a wrong offset!");
static_assert(offsetof(ULandscapeInfo, SubsectionSizeQuads) == 0x000068, "Member 'ULandscapeInfo::SubsectionSizeQuads' has a wrong offset!");
static_assert(offsetof(ULandscapeInfo, ComponentNumSubsections) == 0x00006C, "Member 'ULandscapeInfo::ComponentNumSubsections' has a wrong offset!");
static_assert(offsetof(ULandscapeInfo, DrawScale) == 0x000070, "Member 'ULandscapeInfo::DrawScale' has a wrong offset!");
static_assert(offsetof(ULandscapeInfo, Proxies) == 0x0000D0, "Member 'ULandscapeInfo::Proxies' has a wrong offset!");

// Class Landscape.LandscapeInfoMap
// 0x0058 (0x0090 - 0x0038)
class ULandscapeInfoMap final : public UObject
{
public:
	uint8                                         Pad_38[0x58];                                      // 0x0038(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeInfoMap">();
	}
	static class ULandscapeInfoMap* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeInfoMap>();
	}
};
static_assert(alignof(ULandscapeInfoMap) == 0x000008, "Wrong alignment on ULandscapeInfoMap");
static_assert(sizeof(ULandscapeInfoMap) == 0x000090, "Wrong size on ULandscapeInfoMap");

// Class Landscape.LandscapeLayerInfoObject
// 0x0028 (0x0060 - 0x0038)
class ULandscapeLayerInfoObject final : public UObject
{
public:
	class FName                                   LayerName;                                         // 0x0038(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      PhysMaterial;                                      // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hardness;                                          // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LayerUsageDebugColor;                              // 0x004C(0x0010)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeLayerInfoObject">();
	}
	static class ULandscapeLayerInfoObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeLayerInfoObject>();
	}
};
static_assert(alignof(ULandscapeLayerInfoObject) == 0x000008, "Wrong alignment on ULandscapeLayerInfoObject");
static_assert(sizeof(ULandscapeLayerInfoObject) == 0x000060, "Wrong size on ULandscapeLayerInfoObject");
static_assert(offsetof(ULandscapeLayerInfoObject, LayerName) == 0x000038, "Member 'ULandscapeLayerInfoObject::LayerName' has a wrong offset!");
static_assert(offsetof(ULandscapeLayerInfoObject, PhysMaterial) == 0x000040, "Member 'ULandscapeLayerInfoObject::PhysMaterial' has a wrong offset!");
static_assert(offsetof(ULandscapeLayerInfoObject, Hardness) == 0x000048, "Member 'ULandscapeLayerInfoObject::Hardness' has a wrong offset!");
static_assert(offsetof(ULandscapeLayerInfoObject, LayerUsageDebugColor) == 0x00004C, "Member 'ULandscapeLayerInfoObject::LayerUsageDebugColor' has a wrong offset!");

// Class Landscape.LandscapeMaterialInstanceConstant
// 0x0008 (0x01D8 - 0x01D0)
class ULandscapeMaterialInstanceConstant final : public UMaterialInstanceConstant
{
public:
	uint8                                         bIsLayerThumbnail : 1;                             // 0x01D0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableTessellation : 1;                          // 0x01D0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeMaterialInstanceConstant">();
	}
	static class ULandscapeMaterialInstanceConstant* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeMaterialInstanceConstant>();
	}
};
static_assert(alignof(ULandscapeMaterialInstanceConstant) == 0x000008, "Wrong alignment on ULandscapeMaterialInstanceConstant");
static_assert(sizeof(ULandscapeMaterialInstanceConstant) == 0x0001D8, "Wrong size on ULandscapeMaterialInstanceConstant");

// Class Landscape.LandscapeMeshCollisionComponent
// 0x0020 (0x0830 - 0x0810)
class ULandscapeMeshCollisionComponent final : public ULandscapeHeightfieldCollisionComponent
{
public:
	struct FGuid                                  MeshGuid;                                          // 0x0810(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_820[0x10];                                     // 0x0820(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeMeshCollisionComponent">();
	}
	static class ULandscapeMeshCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeMeshCollisionComponent>();
	}
};
static_assert(alignof(ULandscapeMeshCollisionComponent) == 0x000010, "Wrong alignment on ULandscapeMeshCollisionComponent");
static_assert(sizeof(ULandscapeMeshCollisionComponent) == 0x000830, "Wrong size on ULandscapeMeshCollisionComponent");
static_assert(offsetof(ULandscapeMeshCollisionComponent, MeshGuid) == 0x000810, "Member 'ULandscapeMeshCollisionComponent::MeshGuid' has a wrong offset!");

// Class Landscape.LandscapeMeshProxyComponent
// 0x0030 (0x0800 - 0x07D0)
class ULandscapeMeshProxyComponent final : public UStaticMeshComponent
{
public:
	struct FGuid                                  LandscapeGuid;                                     // 0x07D0(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FIntPoint>                      ProxyComponentBases;                               // 0x07E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	int8                                          ProxyLOD;                                          // 0x07F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7F1[0xF];                                      // 0x07F1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeMeshProxyComponent">();
	}
	static class ULandscapeMeshProxyComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeMeshProxyComponent>();
	}
};
static_assert(alignof(ULandscapeMeshProxyComponent) == 0x000010, "Wrong alignment on ULandscapeMeshProxyComponent");
static_assert(sizeof(ULandscapeMeshProxyComponent) == 0x000800, "Wrong size on ULandscapeMeshProxyComponent");
static_assert(offsetof(ULandscapeMeshProxyComponent, LandscapeGuid) == 0x0007D0, "Member 'ULandscapeMeshProxyComponent::LandscapeGuid' has a wrong offset!");
static_assert(offsetof(ULandscapeMeshProxyComponent, ProxyComponentBases) == 0x0007E0, "Member 'ULandscapeMeshProxyComponent::ProxyComponentBases' has a wrong offset!");
static_assert(offsetof(ULandscapeMeshProxyComponent, ProxyLOD) == 0x0007F0, "Member 'ULandscapeMeshProxyComponent::ProxyLOD' has a wrong offset!");

// Class Landscape.LandscapeSplinesComponent
// 0x0030 (0x0760 - 0x0730)
class ULandscapeSplinesComponent final : public UPrimitiveComponent
{
public:
	TArray<class ULandscapeSplineControlPoint*>   ControlPoints;                                     // 0x0730(0x0010)(ZeroConstructor, Protected, TextExportTransient, NativeAccessSpecifierProtected)
	TArray<class ULandscapeSplineSegment*>        Segments;                                          // 0x0740(0x0010)(ZeroConstructor, Protected, TextExportTransient, NativeAccessSpecifierProtected)
	TArray<class UMeshComponent*>                 CookedForeignMeshComponents;                       // 0x0750(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, TextExportTransient, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeSplinesComponent">();
	}
	static class ULandscapeSplinesComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeSplinesComponent>();
	}
};
static_assert(alignof(ULandscapeSplinesComponent) == 0x000010, "Wrong alignment on ULandscapeSplinesComponent");
static_assert(sizeof(ULandscapeSplinesComponent) == 0x000760, "Wrong size on ULandscapeSplinesComponent");
static_assert(offsetof(ULandscapeSplinesComponent, ControlPoints) == 0x000730, "Member 'ULandscapeSplinesComponent::ControlPoints' has a wrong offset!");
static_assert(offsetof(ULandscapeSplinesComponent, Segments) == 0x000740, "Member 'ULandscapeSplinesComponent::Segments' has a wrong offset!");
static_assert(offsetof(ULandscapeSplinesComponent, CookedForeignMeshComponents) == 0x000750, "Member 'ULandscapeSplinesComponent::CookedForeignMeshComponents' has a wrong offset!");

// Class Landscape.LandscapeSplineControlPoint
// 0x0070 (0x00A8 - 0x0038)
class ULandscapeSplineControlPoint final : public UObject
{
public:
	struct FVector                                Location;                                          // 0x0038(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0044(0x000C)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SideFalloff;                                       // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndFalloff;                                        // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLandscapeSplineConnection>     ConnectedSegments;                                 // 0x0060(0x0010)(ZeroConstructor, TextExportTransient, NativeAccessSpecifierPublic)
	TArray<struct FLandscapeSplineInterpPoint>    Points;                                            // 0x0070(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FBox                                   Bounds;                                            // 0x0080(0x001C)(IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UControlPointMeshComponent*             LocalMeshComponent;                                // 0x00A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, TextExportTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeSplineControlPoint">();
	}
	static class ULandscapeSplineControlPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeSplineControlPoint>();
	}
};
static_assert(alignof(ULandscapeSplineControlPoint) == 0x000008, "Wrong alignment on ULandscapeSplineControlPoint");
static_assert(sizeof(ULandscapeSplineControlPoint) == 0x0000A8, "Wrong size on ULandscapeSplineControlPoint");
static_assert(offsetof(ULandscapeSplineControlPoint, Location) == 0x000038, "Member 'ULandscapeSplineControlPoint::Location' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineControlPoint, Rotation) == 0x000044, "Member 'ULandscapeSplineControlPoint::Rotation' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineControlPoint, Width) == 0x000050, "Member 'ULandscapeSplineControlPoint::Width' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineControlPoint, SideFalloff) == 0x000054, "Member 'ULandscapeSplineControlPoint::SideFalloff' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineControlPoint, EndFalloff) == 0x000058, "Member 'ULandscapeSplineControlPoint::EndFalloff' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineControlPoint, ConnectedSegments) == 0x000060, "Member 'ULandscapeSplineControlPoint::ConnectedSegments' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineControlPoint, Points) == 0x000070, "Member 'ULandscapeSplineControlPoint::Points' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineControlPoint, Bounds) == 0x000080, "Member 'ULandscapeSplineControlPoint::Bounds' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineControlPoint, LocalMeshComponent) == 0x0000A0, "Member 'ULandscapeSplineControlPoint::LocalMeshComponent' has a wrong offset!");

// Class Landscape.LandscapeSplineSegment
// 0x0088 (0x00C0 - 0x0038)
class ULandscapeSplineSegment final : public UObject
{
public:
	struct FLandscapeSplineSegmentConnection      Connections[0x2];                                  // 0x0038(0x0018)(Edit, EditFixedSize, NoDestructor, NativeAccessSpecifierPublic)
	struct FInterpCurveVector                     SplineInfo;                                        // 0x0068(0x0018)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FLandscapeSplineInterpPoint>    Points;                                            // 0x0080(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FBox                                   Bounds;                                            // 0x0090(0x001C)(IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USplineMeshComponent*>           LocalMeshComponents;                               // 0x00B0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, TextExportTransient, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeSplineSegment">();
	}
	static class ULandscapeSplineSegment* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeSplineSegment>();
	}
};
static_assert(alignof(ULandscapeSplineSegment) == 0x000008, "Wrong alignment on ULandscapeSplineSegment");
static_assert(sizeof(ULandscapeSplineSegment) == 0x0000C0, "Wrong size on ULandscapeSplineSegment");
static_assert(offsetof(ULandscapeSplineSegment, Connections) == 0x000038, "Member 'ULandscapeSplineSegment::Connections' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineSegment, SplineInfo) == 0x000068, "Member 'ULandscapeSplineSegment::SplineInfo' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineSegment, Points) == 0x000080, "Member 'ULandscapeSplineSegment::Points' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineSegment, Bounds) == 0x000090, "Member 'ULandscapeSplineSegment::Bounds' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineSegment, LocalMeshComponents) == 0x0000B0, "Member 'ULandscapeSplineSegment::LocalMeshComponents' has a wrong offset!");

// Class Landscape.LandscapeStreamingProxy
// 0x0020 (0x07C0 - 0x07A0)
class ALandscapeStreamingProxy final : public ALandscapeProxy
{
public:
	TLazyObjectPtr<class ALandscape>              LandscapeActor;                                    // 0x0798(0x001C)(Edit, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B4[0xC];                                      // 0x07B4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeStreamingProxy">();
	}
	static class ALandscapeStreamingProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALandscapeStreamingProxy>();
	}
};
static_assert(alignof(ALandscapeStreamingProxy) == 0x000010, "Wrong alignment on ALandscapeStreamingProxy");
static_assert(sizeof(ALandscapeStreamingProxy) == 0x0007C0, "Wrong size on ALandscapeStreamingProxy");
static_assert(offsetof(ALandscapeStreamingProxy, LandscapeActor) == 0x000798, "Member 'ALandscapeStreamingProxy::LandscapeActor' has a wrong offset!");

// Class Landscape.MaterialExpressionLandscapeGrassOutput
// 0x0010 (0x0080 - 0x0070)
class UMaterialExpressionLandscapeGrassOutput final : public UMaterialExpressionCustomOutput
{
public:
	TArray<struct FGrassInput>                    GrassTypes;                                        // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionLandscapeGrassOutput">();
	}
	static class UMaterialExpressionLandscapeGrassOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLandscapeGrassOutput>();
	}
};
static_assert(alignof(UMaterialExpressionLandscapeGrassOutput) == 0x000008, "Wrong alignment on UMaterialExpressionLandscapeGrassOutput");
static_assert(sizeof(UMaterialExpressionLandscapeGrassOutput) == 0x000080, "Wrong size on UMaterialExpressionLandscapeGrassOutput");
static_assert(offsetof(UMaterialExpressionLandscapeGrassOutput, GrassTypes) == 0x000070, "Member 'UMaterialExpressionLandscapeGrassOutput::GrassTypes' has a wrong offset!");

// Class Landscape.MaterialExpressionLandscapeLayerBlend
// 0x0020 (0x0090 - 0x0070)
class UMaterialExpressionLandscapeLayerBlend final : public UMaterialExpression
{
public:
	TArray<struct FLayerBlendInput>               Layers;                                            // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGuid                                  ExpressionGUID;                                    // 0x0080(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionLandscapeLayerBlend">();
	}
	static class UMaterialExpressionLandscapeLayerBlend* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLandscapeLayerBlend>();
	}
};
static_assert(alignof(UMaterialExpressionLandscapeLayerBlend) == 0x000008, "Wrong alignment on UMaterialExpressionLandscapeLayerBlend");
static_assert(sizeof(UMaterialExpressionLandscapeLayerBlend) == 0x000090, "Wrong size on UMaterialExpressionLandscapeLayerBlend");
static_assert(offsetof(UMaterialExpressionLandscapeLayerBlend, Layers) == 0x000070, "Member 'UMaterialExpressionLandscapeLayerBlend::Layers' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerBlend, ExpressionGUID) == 0x000080, "Member 'UMaterialExpressionLandscapeLayerBlend::ExpressionGUID' has a wrong offset!");

// Class Landscape.MaterialExpressionLandscapeLayerCoords
// 0x0018 (0x0088 - 0x0070)
class UMaterialExpressionLandscapeLayerCoords final : public UMaterialExpression
{
public:
	ETerrainCoordMappingType                      MappingType;                                       // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELandscapeCustomizedCoordType                 CustomUVType;                                      // 0x0071(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MappingScale;                                      // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MappingRotation;                                   // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MappingPanU;                                       // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MappingPanV;                                       // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionLandscapeLayerCoords">();
	}
	static class UMaterialExpressionLandscapeLayerCoords* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLandscapeLayerCoords>();
	}
};
static_assert(alignof(UMaterialExpressionLandscapeLayerCoords) == 0x000008, "Wrong alignment on UMaterialExpressionLandscapeLayerCoords");
static_assert(sizeof(UMaterialExpressionLandscapeLayerCoords) == 0x000088, "Wrong size on UMaterialExpressionLandscapeLayerCoords");
static_assert(offsetof(UMaterialExpressionLandscapeLayerCoords, MappingType) == 0x000070, "Member 'UMaterialExpressionLandscapeLayerCoords::MappingType' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerCoords, CustomUVType) == 0x000071, "Member 'UMaterialExpressionLandscapeLayerCoords::CustomUVType' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerCoords, MappingScale) == 0x000074, "Member 'UMaterialExpressionLandscapeLayerCoords::MappingScale' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerCoords, MappingRotation) == 0x000078, "Member 'UMaterialExpressionLandscapeLayerCoords::MappingRotation' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerCoords, MappingPanU) == 0x00007C, "Member 'UMaterialExpressionLandscapeLayerCoords::MappingPanU' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerCoords, MappingPanV) == 0x000080, "Member 'UMaterialExpressionLandscapeLayerCoords::MappingPanV' has a wrong offset!");

// Class Landscape.MaterialExpressionLandscapeLayerSample
// 0x0020 (0x0090 - 0x0070)
class UMaterialExpressionLandscapeLayerSample final : public UMaterialExpression
{
public:
	class FName                                   ParameterName;                                     // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviewWeight;                                     // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ExpressionGUID;                                    // 0x007C(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionLandscapeLayerSample">();
	}
	static class UMaterialExpressionLandscapeLayerSample* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLandscapeLayerSample>();
	}
};
static_assert(alignof(UMaterialExpressionLandscapeLayerSample) == 0x000008, "Wrong alignment on UMaterialExpressionLandscapeLayerSample");
static_assert(sizeof(UMaterialExpressionLandscapeLayerSample) == 0x000090, "Wrong size on UMaterialExpressionLandscapeLayerSample");
static_assert(offsetof(UMaterialExpressionLandscapeLayerSample, ParameterName) == 0x000070, "Member 'UMaterialExpressionLandscapeLayerSample::ParameterName' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerSample, PreviewWeight) == 0x000078, "Member 'UMaterialExpressionLandscapeLayerSample::PreviewWeight' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerSample, ExpressionGUID) == 0x00007C, "Member 'UMaterialExpressionLandscapeLayerSample::ExpressionGUID' has a wrong offset!");

// Class Landscape.MaterialExpressionLandscapeLayerSwitch
// 0x0090 (0x0100 - 0x0070)
class UMaterialExpressionLandscapeLayerSwitch final : public UMaterialExpression
{
public:
	struct FExpressionInput                       LayerUsed;                                         // 0x0070(0x0038)(NativeAccessSpecifierPublic)
	struct FExpressionInput                       LayerNotUsed;                                      // 0x00A8(0x0038)(NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x00E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PreviewUsed : 1;                                   // 0x00E8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ExpressionGUID;                                    // 0x00EC(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionLandscapeLayerSwitch">();
	}
	static class UMaterialExpressionLandscapeLayerSwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLandscapeLayerSwitch>();
	}
};
static_assert(alignof(UMaterialExpressionLandscapeLayerSwitch) == 0x000008, "Wrong alignment on UMaterialExpressionLandscapeLayerSwitch");
static_assert(sizeof(UMaterialExpressionLandscapeLayerSwitch) == 0x000100, "Wrong size on UMaterialExpressionLandscapeLayerSwitch");
static_assert(offsetof(UMaterialExpressionLandscapeLayerSwitch, LayerUsed) == 0x000070, "Member 'UMaterialExpressionLandscapeLayerSwitch::LayerUsed' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerSwitch, LayerNotUsed) == 0x0000A8, "Member 'UMaterialExpressionLandscapeLayerSwitch::LayerNotUsed' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerSwitch, ParameterName) == 0x0000E0, "Member 'UMaterialExpressionLandscapeLayerSwitch::ParameterName' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerSwitch, ExpressionGUID) == 0x0000EC, "Member 'UMaterialExpressionLandscapeLayerSwitch::ExpressionGUID' has a wrong offset!");

// Class Landscape.MaterialExpressionLandscapeLayerWeight
// 0x0098 (0x0108 - 0x0070)
class UMaterialExpressionLandscapeLayerWeight final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Base;                                              // 0x0070(0x0038)(NativeAccessSpecifierPublic)
	struct FExpressionInput                       Layer;                                             // 0x00A8(0x0038)(NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x00E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviewWeight;                                     // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConstBase;                                         // 0x00EC(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ExpressionGUID;                                    // 0x00F8(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionLandscapeLayerWeight">();
	}
	static class UMaterialExpressionLandscapeLayerWeight* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLandscapeLayerWeight>();
	}
};
static_assert(alignof(UMaterialExpressionLandscapeLayerWeight) == 0x000008, "Wrong alignment on UMaterialExpressionLandscapeLayerWeight");
static_assert(sizeof(UMaterialExpressionLandscapeLayerWeight) == 0x000108, "Wrong size on UMaterialExpressionLandscapeLayerWeight");
static_assert(offsetof(UMaterialExpressionLandscapeLayerWeight, Base) == 0x000070, "Member 'UMaterialExpressionLandscapeLayerWeight::Base' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerWeight, Layer) == 0x0000A8, "Member 'UMaterialExpressionLandscapeLayerWeight::Layer' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerWeight, ParameterName) == 0x0000E0, "Member 'UMaterialExpressionLandscapeLayerWeight::ParameterName' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerWeight, PreviewWeight) == 0x0000E8, "Member 'UMaterialExpressionLandscapeLayerWeight::PreviewWeight' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerWeight, ConstBase) == 0x0000EC, "Member 'UMaterialExpressionLandscapeLayerWeight::ConstBase' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerWeight, ExpressionGUID) == 0x0000F8, "Member 'UMaterialExpressionLandscapeLayerWeight::ExpressionGUID' has a wrong offset!");

// Class Landscape.MaterialExpressionLandscapeVisibilityMask
// 0x0010 (0x0080 - 0x0070)
class UMaterialExpressionLandscapeVisibilityMask final : public UMaterialExpression
{
public:
	struct FGuid                                  ExpressionGUID;                                    // 0x0070(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionLandscapeVisibilityMask">();
	}
	static class UMaterialExpressionLandscapeVisibilityMask* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLandscapeVisibilityMask>();
	}
};
static_assert(alignof(UMaterialExpressionLandscapeVisibilityMask) == 0x000008, "Wrong alignment on UMaterialExpressionLandscapeVisibilityMask");
static_assert(sizeof(UMaterialExpressionLandscapeVisibilityMask) == 0x000080, "Wrong size on UMaterialExpressionLandscapeVisibilityMask");
static_assert(offsetof(UMaterialExpressionLandscapeVisibilityMask, ExpressionGUID) == 0x000070, "Member 'UMaterialExpressionLandscapeVisibilityMask::ExpressionGUID' has a wrong offset!");

}

