#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_StreamingEdit

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "STRUCT_StreamingEditSave_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "STRUCT_StramingEditActor_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_StreamingEdit.BP_StreamingEdit_C
// 0x0118 (0x04B0 - 0x0398)
class ABP_StreamingEdit_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0398(0x0008)(Transient, DuplicateTransient)
	class UCameraComponent*                       Camera;                                            // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         SelectLevelStreaming;                              // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SelectLevelVisible;                                // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SelectMapStart;                                    // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SelectMapJump;                                     // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SpeedMode;                                         // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EditMode;                                          // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SavePrefix;                                        // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           LevelNames;                                        // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         SelectStreamingStatus;                             // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EditMapJump;                                       // 0x03EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Enable;                                            // 0x03ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EE[0x2];                                      // 0x03EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Menu1;                                             // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FString>                         Menu2;                                             // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FString>                         MenuStreaming;                                     // 0x0410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          SelectOtherHidden;                                 // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_421[0x3];                                      // 0x0421(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SelectMenu;                                        // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MenuXPos;                                          // 0x0428(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_434[0x4];                                      // 0x0434(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSTRUCT_StramingEditActor>      LevelStreamingVolume;                              // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FSTRUCT_StramingEditActor>      LevelVisibleVolume;                                // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FSTRUCT_StramingEditActor>      MapStart;                                          // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FSTRUCT_StramingEditActor>      TempMapStart;                                      // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FSTRUCT_StramingEditActor>      MapJumpVolume;                                     // 0x0478(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FSTRUCT_StreamingEditSave>      Save;                                              // 0x0488(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         SaveMax;                                           // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49C[0x4];                                      // 0x049C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        MapStartPos;                                       // 0x04A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor)

public:
	void ExecuteUbergraph_BP_StreamingEdit(int32 EntryPoint);
	void MenuSelect(int32 Add);
	void SetEnable(bool Enable_0);
	void GetMapJump();
	void SetOrthoWidthSub(float Add);
	void InpAxisKeyEvt_Gamepad_RightY_K2Node_InputAxisKeyEvent_86(float AxisValue);
	void InpAxisKeyEvt_Gamepad_LeftTriggerAxis_K2Node_InputAxisKeyEvent_41(float AxisValue);
	void InpAxisKeyEvt_Gamepad_RightTriggerAxis_K2Node_InputAxisKeyEvent_37(float AxisValue);
	void InpAxisKeyEvt_Gamepad_LeftY_K2Node_InputAxisKeyEvent_6(float AxisValue);
	void InpAxisKeyEvt_Gamepad_LeftX_K2Node_InputAxisKeyEvent_0(float AxisValue);
	void StreamingEdit();
	void ReceiveTick(float DeltaSeconds);
	void GetStreamingVolumes();
	void ReceiveBeginPlay();
	void InpActEvt_Alt_Z_K2Node_InputKeyEvent_20(const struct FKey& Key);
	void InpActEvt_O_K2Node_InputKeyEvent_21(const struct FKey& Key);
	void InpActEvt_Ctrl_Q_K2Node_InputKeyEvent_22(const struct FKey& Key);
	void InpActEvt_Gamepad_LeftThumbstick_K2Node_InputKeyEvent_23(const struct FKey& Key);
	void InpActEvt_Ctrl_L_K2Node_InputKeyEvent_24(const struct FKey& Key);
	void InpActEvt_L_K2Node_InputKeyEvent_25(const struct FKey& Key);
	void InpActEvt_S_K2Node_InputKeyEvent_26(const struct FKey& Key);
	void InpActEvt_Gamepad_RightThumbstick_K2Node_InputKeyEvent_27(const struct FKey& Key);
	void InpActEvt_Gamepad_FaceButton_Bottom_K2Node_InputKeyEvent_28(const struct FKey& Key);
	void InpActEvt_Gamepad_FaceButton_Left_K2Node_InputKeyEvent_29(const struct FKey& Key);
	void InpActEvt_Gamepad_RightShoulder_K2Node_InputKeyEvent_30(const struct FKey& Key);
	void InpActEvt_Gamepad_FaceButton_Top_K2Node_InputKeyEvent_31(const struct FKey& Key);
	void InpActEvt_Gamepad_FaceButton_Right_K2Node_InputKeyEvent_32(const struct FKey& Key);
	void InpActEvt_Gamepad_DPad_Up_K2Node_InputKeyEvent_33(const struct FKey& Key);
	void InpActEvt_Gamepad_DPad_Down_K2Node_InputKeyEvent_34(const struct FKey& Key);
	void InpActEvt_Q_K2Node_InputKeyEvent_35(const struct FKey& Key);
	void InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_36(const struct FKey& Key);
	void InpActEvt_Gamepad_DPad_Right_K2Node_InputKeyEvent_37(const struct FKey& Key);
	void InpActEvt_Gamepad_DPad_Left_K2Node_InputKeyEvent_38(const struct FKey& Key);
	void InpActEvt_J_K2Node_InputKeyEvent_39(const struct FKey& Key);
	void UserConstructionScript();
	void DispVolumeStatus(const struct FSTRUCT_StramingEditActor& EditActor);
	void HiddenStreaming();
	void HiddenMapJump();
	void MakeMenu(bool EditMapJump_0);
	void DispMenu(TArray<class FString>& Menu, int32 Xpos, int32 Ypos, int32 InitialSelect);
	void DispMessageActorPos(const class FString& String, class AActor* Actor, float OffsetX, float OffsetY, const struct FLinearColor& Color);
	void AddMenu(int32 Add);
	void GetSelectedMenu(int32* Selected);
	void JumpPlayerToCamera();
	void GetSelectedActor(struct FSTRUCT_StramingEditActor* EditActor);
	void MakeTempData();
	void GetSelectedType(int32* SelectedType);
	void MakeEditArray(TArray<class AActor*>& Actor, TArray<struct FSTRUCT_StramingEditActor>& EditActor);
	void MakeSaveName(int32 Num, const class FString& Prefix, class FName* FlagName);
	void SaveActorData(class AActor* Actor);
	void LoadActorData(class AActor* Actor);
	void FullLoad();
	void OutputLog();
	void ClearAllSaveData();
	void TelepotSavedMapStart(class FName MapStartTag);
	void ConvActorName(class AActor* Actor, class FString* Conv);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_StreamingEdit_C">();
	}
	static class ABP_StreamingEdit_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_StreamingEdit_C>();
	}
};
static_assert(alignof(ABP_StreamingEdit_C) == 0x000008, "Wrong alignment on ABP_StreamingEdit_C");
static_assert(sizeof(ABP_StreamingEdit_C) == 0x0004B0, "Wrong size on ABP_StreamingEdit_C");
static_assert(offsetof(ABP_StreamingEdit_C, UberGraphFrame) == 0x000398, "Member 'ABP_StreamingEdit_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, Camera) == 0x0003A0, "Member 'ABP_StreamingEdit_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, DefaultSceneRoot) == 0x0003A8, "Member 'ABP_StreamingEdit_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, SelectLevelStreaming) == 0x0003B0, "Member 'ABP_StreamingEdit_C::SelectLevelStreaming' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, SelectLevelVisible) == 0x0003B4, "Member 'ABP_StreamingEdit_C::SelectLevelVisible' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, SelectMapStart) == 0x0003B8, "Member 'ABP_StreamingEdit_C::SelectMapStart' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, SelectMapJump) == 0x0003BC, "Member 'ABP_StreamingEdit_C::SelectMapJump' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, Speed) == 0x0003C0, "Member 'ABP_StreamingEdit_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, SpeedMode) == 0x0003C4, "Member 'ABP_StreamingEdit_C::SpeedMode' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, EditMode) == 0x0003C8, "Member 'ABP_StreamingEdit_C::EditMode' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, SavePrefix) == 0x0003D0, "Member 'ABP_StreamingEdit_C::SavePrefix' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, LevelNames) == 0x0003D8, "Member 'ABP_StreamingEdit_C::LevelNames' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, SelectStreamingStatus) == 0x0003E8, "Member 'ABP_StreamingEdit_C::SelectStreamingStatus' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, EditMapJump) == 0x0003EC, "Member 'ABP_StreamingEdit_C::EditMapJump' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, Enable) == 0x0003ED, "Member 'ABP_StreamingEdit_C::Enable' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, Menu1) == 0x0003F0, "Member 'ABP_StreamingEdit_C::Menu1' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, Menu2) == 0x000400, "Member 'ABP_StreamingEdit_C::Menu2' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, MenuStreaming) == 0x000410, "Member 'ABP_StreamingEdit_C::MenuStreaming' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, SelectOtherHidden) == 0x000420, "Member 'ABP_StreamingEdit_C::SelectOtherHidden' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, SelectMenu) == 0x000424, "Member 'ABP_StreamingEdit_C::SelectMenu' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, MenuXPos) == 0x000428, "Member 'ABP_StreamingEdit_C::MenuXPos' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, LevelStreamingVolume) == 0x000438, "Member 'ABP_StreamingEdit_C::LevelStreamingVolume' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, LevelVisibleVolume) == 0x000448, "Member 'ABP_StreamingEdit_C::LevelVisibleVolume' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, MapStart) == 0x000458, "Member 'ABP_StreamingEdit_C::MapStart' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, TempMapStart) == 0x000468, "Member 'ABP_StreamingEdit_C::TempMapStart' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, MapJumpVolume) == 0x000478, "Member 'ABP_StreamingEdit_C::MapJumpVolume' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, Save) == 0x000488, "Member 'ABP_StreamingEdit_C::Save' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, SaveMax) == 0x000498, "Member 'ABP_StreamingEdit_C::SaveMax' has a wrong offset!");
static_assert(offsetof(ABP_StreamingEdit_C, MapStartPos) == 0x0004A0, "Member 'ABP_StreamingEdit_C::MapStartPos' has a wrong offset!");

}

