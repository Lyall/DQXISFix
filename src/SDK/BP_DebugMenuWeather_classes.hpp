#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DebugMenuWeather

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "JackGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DebugMenuWeather.BP_DebugMenuWeather_C
// 0x0038 (0x03D0 - 0x0398)
class ABP_DebugMenuWeather_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0398(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         InfoStrings;                                       // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class FString                                 TempString;                                        // 0x03B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         WindDirectionalSource;                             // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_DebugMenuWeather(int32 EntryPoint);
	void CustomEvent0();
	void CustomEvent_2(int32 IntValue);
	void CustomEvent_1();
	void CustomEvent_0();
	void CustomEvent_3();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void AddInfo(const class FString& Info1, const class FString& Info2, const class FString& Info3, const class FString& Info4);
	void ConvWeatherENG(EJackWorldWeather Weather, class FString* WeatherENG);
	void ConvWindENG(EJackWorldWindLevel Wind, class FString* WindENG);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DebugMenuWeather_C">();
	}
	static class ABP_DebugMenuWeather_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DebugMenuWeather_C>();
	}
};
static_assert(alignof(ABP_DebugMenuWeather_C) == 0x000008, "Wrong alignment on ABP_DebugMenuWeather_C");
static_assert(sizeof(ABP_DebugMenuWeather_C) == 0x0003D0, "Wrong size on ABP_DebugMenuWeather_C");
static_assert(offsetof(ABP_DebugMenuWeather_C, UberGraphFrame) == 0x000398, "Member 'ABP_DebugMenuWeather_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DebugMenuWeather_C, DefaultSceneRoot) == 0x0003A0, "Member 'ABP_DebugMenuWeather_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_DebugMenuWeather_C, InfoStrings) == 0x0003A8, "Member 'ABP_DebugMenuWeather_C::InfoStrings' has a wrong offset!");
static_assert(offsetof(ABP_DebugMenuWeather_C, TempString) == 0x0003B8, "Member 'ABP_DebugMenuWeather_C::TempString' has a wrong offset!");
static_assert(offsetof(ABP_DebugMenuWeather_C, WindDirectionalSource) == 0x0003C8, "Member 'ABP_DebugMenuWeather_C::WindDirectionalSource' has a wrong offset!");

}

