#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "JackGame_structs.hpp"
#include "JackGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BattleManager.BP_BattleManager_C
// 0x0108 (0x09D8 - 0x08D0)
class ABP_BattleManager_C final : public AJackBattleManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x08D0(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x08D8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AEmitterCameraLensEffectBase*           EncountLensEffectEmitter;                          // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AJackCharacter*>                 HiddenCharacters;                                  // 0x08E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_BattleFieldCollision_C*             BattleFieldCollision;                              // 0x08F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_NavModifierVolume_BlockMonster_C*> HiddenNavModifierVolume_BlockMonsters;             // 0x0900(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         BattleFieldCheckRadius;                            // 0x0910(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_914[0x4];                                      // 0x0914(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AJackNavModifierVolume*>         DuplicatedBattleVolumes;                           // 0x0918(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class UJackGameCharacter*>             TmpGameCharacters;                                 // 0x0928(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class AJackCharacter*>                 TmpCharacters;                                     // 0x0938(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TSoftObjectPtr<class UParticleSystem>         TenseiParticleCamera;                              // 0x0948(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UParticleSystem>         TenseiParticleS;                                   // 0x0960(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UParticleSystem>         TenseiParticleM;                                   // 0x0978(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UParticleSystem>         TenseiParticleL;                                   // 0x0990(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UParticleSystem>         TenseiParticleLL;                                  // 0x09A8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundBase>              TenseiSound;                                       // 0x09C0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BattleManager(int32 EntryPoint);
	void MonsterAppearParameterInitialize();
	void OnBattleCameraEndDelegate_Event(EJackBattleCameraCategory BattleCameraCategory);
	void OnBattleCameraStartDelegate_Event(EJackBattleCameraCategory BattleCameraCategory);
	void SetFoliageDitherBattleFieldDirect(const struct FVector& DitherLocation, float DitherBounds);
	void OnPrgCameraStartDelegate_Event_0();
	void SetFoliageDitherRangeDirect(float DitherRange);
	void OnDestroyed_Event_0(class AActor* DestroyedActor);
	void OnResultCameraStart_Event_0();
	void OnBattlePostInitialize_Event_0();
	void ReceiveTick(float DeltaSeconds);
	void OnCrashEffectStart_Event_0();
	void OnBattleExitStart_Event_0();
	void OnResultStart_Event_0();
	void OnBattleEnd_Event_0();
	void OnMonsterAppearStart_Event_0();
	void OnBattleFinalize_Event_0();
	void OnBattleInitialize_Event_0(const struct FJackCommandBattleInitialize& InCommand);
	void OnBattleStart_Event();
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void SetMinimapVisibility(bool bVisible);
	void SetHiddenInBattle(bool bHidden_0);
	void DebugDrawCylinder(const struct FVector& InCenter, float InRadius, const struct FLinearColor& InColor);
	void ApplyToubatuMonsterCount();
	void SetMonsterIgnoreCollisionNMV_BlockMonster(bool bIgnoreCollision);
	void InitializeNMV_BlockMonster();
	void FinalizeNMV_BlockMonster();
	void CallAllDead();
	void SetMonsterAppearPlantDitherParameter(bool Enable);
	void SetBattleFieldCollisionIgnore(class AJackCharacter* IgnoreCharacter);
	void SetActivateEnvParam(bool bActive);

	class UMaterialParameterCollection* GetEnvParamMaterialParameterCollection() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BattleManager_C">();
	}
	static class ABP_BattleManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BattleManager_C>();
	}
};
static_assert(alignof(ABP_BattleManager_C) == 0x000008, "Wrong alignment on ABP_BattleManager_C");
static_assert(sizeof(ABP_BattleManager_C) == 0x0009D8, "Wrong size on ABP_BattleManager_C");
static_assert(offsetof(ABP_BattleManager_C, UberGraphFrame) == 0x0008D0, "Member 'ABP_BattleManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, DefaultSceneRoot) == 0x0008D8, "Member 'ABP_BattleManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, EncountLensEffectEmitter) == 0x0008E0, "Member 'ABP_BattleManager_C::EncountLensEffectEmitter' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, HiddenCharacters) == 0x0008E8, "Member 'ABP_BattleManager_C::HiddenCharacters' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, BattleFieldCollision) == 0x0008F8, "Member 'ABP_BattleManager_C::BattleFieldCollision' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, HiddenNavModifierVolume_BlockMonsters) == 0x000900, "Member 'ABP_BattleManager_C::HiddenNavModifierVolume_BlockMonsters' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, BattleFieldCheckRadius) == 0x000910, "Member 'ABP_BattleManager_C::BattleFieldCheckRadius' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, DuplicatedBattleVolumes) == 0x000918, "Member 'ABP_BattleManager_C::DuplicatedBattleVolumes' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, TmpGameCharacters) == 0x000928, "Member 'ABP_BattleManager_C::TmpGameCharacters' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, TmpCharacters) == 0x000938, "Member 'ABP_BattleManager_C::TmpCharacters' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, TenseiParticleCamera) == 0x000948, "Member 'ABP_BattleManager_C::TenseiParticleCamera' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, TenseiParticleS) == 0x000960, "Member 'ABP_BattleManager_C::TenseiParticleS' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, TenseiParticleM) == 0x000978, "Member 'ABP_BattleManager_C::TenseiParticleM' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, TenseiParticleL) == 0x000990, "Member 'ABP_BattleManager_C::TenseiParticleL' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, TenseiParticleLL) == 0x0009A8, "Member 'ABP_BattleManager_C::TenseiParticleLL' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, TenseiSound) == 0x0009C0, "Member 'ABP_BattleManager_C::TenseiSound' has a wrong offset!");

}

