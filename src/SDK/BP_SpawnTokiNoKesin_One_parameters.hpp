#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SpawnTokiNoKesin_One

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_SpawnTokiNoKesin_One.BP_SpawnTokiNoKesin_One_C.CanSpawnActor
// 0x0001 (0x0001 - 0x0000)
struct BP_SpawnTokiNoKesin_One_C_CanSpawnActor final
{
public:
	bool                                          bpp__CanSpawn__pf;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SpawnTokiNoKesin_One_C_CanSpawnActor) == 0x000001, "Wrong alignment on BP_SpawnTokiNoKesin_One_C_CanSpawnActor");
static_assert(sizeof(BP_SpawnTokiNoKesin_One_C_CanSpawnActor) == 0x000001, "Wrong size on BP_SpawnTokiNoKesin_One_C_CanSpawnActor");
static_assert(offsetof(BP_SpawnTokiNoKesin_One_C_CanSpawnActor, bpp__CanSpawn__pf) == 0x000000, "Member 'BP_SpawnTokiNoKesin_One_C_CanSpawnActor::bpp__CanSpawn__pf' has a wrong offset!");

// Function BP_SpawnTokiNoKesin_One.BP_SpawnTokiNoKesin_One_C.GetReuseOrSpawnActor
// 0x0040 (0x0040 - 0x0000)
struct BP_SpawnTokiNoKesin_One_C_GetReuseOrSpawnActor final
{
public:
	struct FTransform                             bpp__Transform__pf;                                // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class ABP_TokiNoKesin_One_C*                  bpp__NewParam__pf;                                 // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_SpawnTokiNoKesin_One_C_GetReuseOrSpawnActor) == 0x000010, "Wrong alignment on BP_SpawnTokiNoKesin_One_C_GetReuseOrSpawnActor");
static_assert(sizeof(BP_SpawnTokiNoKesin_One_C_GetReuseOrSpawnActor) == 0x000040, "Wrong size on BP_SpawnTokiNoKesin_One_C_GetReuseOrSpawnActor");
static_assert(offsetof(BP_SpawnTokiNoKesin_One_C_GetReuseOrSpawnActor, bpp__Transform__pf) == 0x000000, "Member 'BP_SpawnTokiNoKesin_One_C_GetReuseOrSpawnActor::bpp__Transform__pf' has a wrong offset!");
static_assert(offsetof(BP_SpawnTokiNoKesin_One_C_GetReuseOrSpawnActor, bpp__NewParam__pf) == 0x000030, "Member 'BP_SpawnTokiNoKesin_One_C_GetReuseOrSpawnActor::bpp__NewParam__pf' has a wrong offset!");

// Function BP_SpawnTokiNoKesin_One.BP_SpawnTokiNoKesin_One_C.IsPointOnGround
// 0x0014 (0x0014 - 0x0000)
struct BP_SpawnTokiNoKesin_One_C_IsPointOnGround final
{
public:
	struct FVector                                bpp__Location__pf;                                 // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__CheckLength__pf;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__OnGround__pf;                                 // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_SpawnTokiNoKesin_One_C_IsPointOnGround) == 0x000004, "Wrong alignment on BP_SpawnTokiNoKesin_One_C_IsPointOnGround");
static_assert(sizeof(BP_SpawnTokiNoKesin_One_C_IsPointOnGround) == 0x000014, "Wrong size on BP_SpawnTokiNoKesin_One_C_IsPointOnGround");
static_assert(offsetof(BP_SpawnTokiNoKesin_One_C_IsPointOnGround, bpp__Location__pf) == 0x000000, "Member 'BP_SpawnTokiNoKesin_One_C_IsPointOnGround::bpp__Location__pf' has a wrong offset!");
static_assert(offsetof(BP_SpawnTokiNoKesin_One_C_IsPointOnGround, bpp__CheckLength__pf) == 0x00000C, "Member 'BP_SpawnTokiNoKesin_One_C_IsPointOnGround::bpp__CheckLength__pf' has a wrong offset!");
static_assert(offsetof(BP_SpawnTokiNoKesin_One_C_IsPointOnGround, bpp__OnGround__pf) == 0x000010, "Member 'BP_SpawnTokiNoKesin_One_C_IsPointOnGround::bpp__OnGround__pf' has a wrong offset!");

// Function BP_SpawnTokiNoKesin_One.BP_SpawnTokiNoKesin_One_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_SpawnTokiNoKesin_One_C_ReceiveTick final
{
public:
	float                                         bpp__DeltaSeconds__pf;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_SpawnTokiNoKesin_One_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_SpawnTokiNoKesin_One_C_ReceiveTick");
static_assert(sizeof(BP_SpawnTokiNoKesin_One_C_ReceiveTick) == 0x000004, "Wrong size on BP_SpawnTokiNoKesin_One_C_ReceiveTick");
static_assert(offsetof(BP_SpawnTokiNoKesin_One_C_ReceiveTick, bpp__DeltaSeconds__pf) == 0x000000, "Member 'BP_SpawnTokiNoKesin_One_C_ReceiveTick::bpp__DeltaSeconds__pf' has a wrong offset!");

}

