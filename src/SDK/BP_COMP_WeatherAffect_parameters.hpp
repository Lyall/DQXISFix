#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_COMP_WeatherAffect

#include "Basic.hpp"

#include "JackGame_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// DelegateFunction BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.JackWorldParticlesChangedDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_COMP_WeatherAffect_C_JackWorldParticlesChangedDelegate__DelegateSignature final
{
public:
	TArray<struct FJackWorldParticleContainer>    bpp__Particles__pf;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_JackWorldParticlesChangedDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BP_COMP_WeatherAffect_C_JackWorldParticlesChangedDelegate__DelegateSignature");
static_assert(sizeof(BP_COMP_WeatherAffect_C_JackWorldParticlesChangedDelegate__DelegateSignature) == 0x000010, "Wrong size on BP_COMP_WeatherAffect_C_JackWorldParticlesChangedDelegate__DelegateSignature");
static_assert(offsetof(BP_COMP_WeatherAffect_C_JackWorldParticlesChangedDelegate__DelegateSignature, bpp__Particles__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_JackWorldParticlesChangedDelegate__DelegateSignature::bpp__Particles__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.AddWeatherStringForWeatherReport
// 0x0028 (0x0028 - 0x0000)
struct BP_COMP_WeatherAffect_C_AddWeatherStringForWeatherReport final
{
public:
	EJackWorldWeather                             bpp__Weather__pf;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 bpp__WeatherString__pf__const;                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 bpp__OutWeatherString__pf;                         // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_AddWeatherStringForWeatherReport) == 0x000008, "Wrong alignment on BP_COMP_WeatherAffect_C_AddWeatherStringForWeatherReport");
static_assert(sizeof(BP_COMP_WeatherAffect_C_AddWeatherStringForWeatherReport) == 0x000028, "Wrong size on BP_COMP_WeatherAffect_C_AddWeatherStringForWeatherReport");
static_assert(offsetof(BP_COMP_WeatherAffect_C_AddWeatherStringForWeatherReport, bpp__Weather__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_AddWeatherStringForWeatherReport::bpp__Weather__pf' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_AddWeatherStringForWeatherReport, bpp__WeatherString__pf__const) == 0x000008, "Member 'BP_COMP_WeatherAffect_C_AddWeatherStringForWeatherReport::bpp__WeatherString__pf__const' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_AddWeatherStringForWeatherReport, bpp__OutWeatherString__pf) == 0x000018, "Member 'BP_COMP_WeatherAffect_C_AddWeatherStringForWeatherReport::bpp__OutWeatherString__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.CallNpcWeatherEvent
// 0x0001 (0x0001 - 0x0000)
struct BP_COMP_WeatherAffect_C_CallNpcWeatherEvent final
{
public:
	EJackWorldWeather                             bpp__NewWeather__pf;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_CallNpcWeatherEvent) == 0x000001, "Wrong alignment on BP_COMP_WeatherAffect_C_CallNpcWeatherEvent");
static_assert(sizeof(BP_COMP_WeatherAffect_C_CallNpcWeatherEvent) == 0x000001, "Wrong size on BP_COMP_WeatherAffect_C_CallNpcWeatherEvent");
static_assert(offsetof(BP_COMP_WeatherAffect_C_CallNpcWeatherEvent, bpp__NewWeather__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_CallNpcWeatherEvent::bpp__NewWeather__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.ExecuteUbergraph_BP_COMP_WeatherAffect_0
// 0x0004 (0x0004 - 0x0000)
struct BP_COMP_WeatherAffect_C_ExecuteUbergraph_BP_COMP_WeatherAffect_0 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_ExecuteUbergraph_BP_COMP_WeatherAffect_0) == 0x000004, "Wrong alignment on BP_COMP_WeatherAffect_C_ExecuteUbergraph_BP_COMP_WeatherAffect_0");
static_assert(sizeof(BP_COMP_WeatherAffect_C_ExecuteUbergraph_BP_COMP_WeatherAffect_0) == 0x000004, "Wrong size on BP_COMP_WeatherAffect_C_ExecuteUbergraph_BP_COMP_WeatherAffect_0");
static_assert(offsetof(BP_COMP_WeatherAffect_C_ExecuteUbergraph_BP_COMP_WeatherAffect_0, bpp__EntryPoint__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_ExecuteUbergraph_BP_COMP_WeatherAffect_0::bpp__EntryPoint__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.ExecuteUbergraph_BP_COMP_WeatherAffect_3
// 0x0004 (0x0004 - 0x0000)
struct BP_COMP_WeatherAffect_C_ExecuteUbergraph_BP_COMP_WeatherAffect_3 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_ExecuteUbergraph_BP_COMP_WeatherAffect_3) == 0x000004, "Wrong alignment on BP_COMP_WeatherAffect_C_ExecuteUbergraph_BP_COMP_WeatherAffect_3");
static_assert(sizeof(BP_COMP_WeatherAffect_C_ExecuteUbergraph_BP_COMP_WeatherAffect_3) == 0x000004, "Wrong size on BP_COMP_WeatherAffect_C_ExecuteUbergraph_BP_COMP_WeatherAffect_3");
static_assert(offsetof(BP_COMP_WeatherAffect_C_ExecuteUbergraph_BP_COMP_WeatherAffect_3, bpp__EntryPoint__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_ExecuteUbergraph_BP_COMP_WeatherAffect_3::bpp__EntryPoint__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.ExecuteUbergraph_BP_COMP_WeatherAffect_4
// 0x0004 (0x0004 - 0x0000)
struct BP_COMP_WeatherAffect_C_ExecuteUbergraph_BP_COMP_WeatherAffect_4 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_ExecuteUbergraph_BP_COMP_WeatherAffect_4) == 0x000004, "Wrong alignment on BP_COMP_WeatherAffect_C_ExecuteUbergraph_BP_COMP_WeatherAffect_4");
static_assert(sizeof(BP_COMP_WeatherAffect_C_ExecuteUbergraph_BP_COMP_WeatherAffect_4) == 0x000004, "Wrong size on BP_COMP_WeatherAffect_C_ExecuteUbergraph_BP_COMP_WeatherAffect_4");
static_assert(offsetof(BP_COMP_WeatherAffect_C_ExecuteUbergraph_BP_COMP_WeatherAffect_4, bpp__EntryPoint__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_ExecuteUbergraph_BP_COMP_WeatherAffect_4::bpp__EntryPoint__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.GetSysControlLevelName
// 0x0008 (0x0008 - 0x0000)
struct BP_COMP_WeatherAffect_C_GetSysControlLevelName final
{
public:
	class FName                                   bpp__SysControlLevelName__pf;                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_GetSysControlLevelName) == 0x000004, "Wrong alignment on BP_COMP_WeatherAffect_C_GetSysControlLevelName");
static_assert(sizeof(BP_COMP_WeatherAffect_C_GetSysControlLevelName) == 0x000008, "Wrong size on BP_COMP_WeatherAffect_C_GetSysControlLevelName");
static_assert(offsetof(BP_COMP_WeatherAffect_C_GetSysControlLevelName, bpp__SysControlLevelName__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_GetSysControlLevelName::bpp__SysControlLevelName__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.MakeTagValueListForWeatherReport
// 0x0018 (0x0018 - 0x0000)
struct BP_COMP_WeatherAffect_C_MakeTagValueListForWeatherReport final
{
public:
	EJackTimeZone                                 bpp__TimeZone__pf;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Tomorrow__pf;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackMessageArgumentData>       bpp__OutTagValueList__pf;                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_MakeTagValueListForWeatherReport) == 0x000008, "Wrong alignment on BP_COMP_WeatherAffect_C_MakeTagValueListForWeatherReport");
static_assert(sizeof(BP_COMP_WeatherAffect_C_MakeTagValueListForWeatherReport) == 0x000018, "Wrong size on BP_COMP_WeatherAffect_C_MakeTagValueListForWeatherReport");
static_assert(offsetof(BP_COMP_WeatherAffect_C_MakeTagValueListForWeatherReport, bpp__TimeZone__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_MakeTagValueListForWeatherReport::bpp__TimeZone__pf' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_MakeTagValueListForWeatherReport, bpp__Tomorrow__pf) == 0x000001, "Member 'BP_COMP_WeatherAffect_C_MakeTagValueListForWeatherReport::bpp__Tomorrow__pf' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_MakeTagValueListForWeatherReport, bpp__OutTagValueList__pf) == 0x000008, "Member 'BP_COMP_WeatherAffect_C_MakeTagValueListForWeatherReport::bpp__OutTagValueList__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.MakeWeatherReportMessage
// 0x0028 (0x0028 - 0x0000)
struct BP_COMP_WeatherAffect_C_MakeWeatherReportMessage final
{
public:
	class FString                                 bpp__WeatherReportType__pf__const;                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__OutTextId__pf;                                // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJackMessageArgumentData>       bpp__OutTagValueList__pf;                          // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_MakeWeatherReportMessage) == 0x000008, "Wrong alignment on BP_COMP_WeatherAffect_C_MakeWeatherReportMessage");
static_assert(sizeof(BP_COMP_WeatherAffect_C_MakeWeatherReportMessage) == 0x000028, "Wrong size on BP_COMP_WeatherAffect_C_MakeWeatherReportMessage");
static_assert(offsetof(BP_COMP_WeatherAffect_C_MakeWeatherReportMessage, bpp__WeatherReportType__pf__const) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_MakeWeatherReportMessage::bpp__WeatherReportType__pf__const' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_MakeWeatherReportMessage, bpp__OutTextId__pf) == 0x000010, "Member 'BP_COMP_WeatherAffect_C_MakeWeatherReportMessage::bpp__OutTextId__pf' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_MakeWeatherReportMessage, bpp__OutTagValueList__pf) == 0x000018, "Member 'BP_COMP_WeatherAffect_C_MakeWeatherReportMessage::bpp__OutTagValueList__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.MakeWindVector(Effect)
// 0x000C (0x000C - 0x0000)
struct BP_COMP_WeatherAffect_C_MakeWindVector_Effect_ final
{
public:
	struct FVector                                bpp__WindVector__pf;                               // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_MakeWindVector_Effect_) == 0x000004, "Wrong alignment on BP_COMP_WeatherAffect_C_MakeWindVector_Effect_");
static_assert(sizeof(BP_COMP_WeatherAffect_C_MakeWindVector_Effect_) == 0x00000C, "Wrong size on BP_COMP_WeatherAffect_C_MakeWindVector_Effect_");
static_assert(offsetof(BP_COMP_WeatherAffect_C_MakeWindVector_Effect_, bpp__WindVector__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_MakeWindVector_Effect_::bpp__WindVector__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_COMP_WeatherAffect_C_ReceiveTick final
{
public:
	float                                         bpp__DeltaSeconds__pf;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_COMP_WeatherAffect_C_ReceiveTick");
static_assert(sizeof(BP_COMP_WeatherAffect_C_ReceiveTick) == 0x000004, "Wrong size on BP_COMP_WeatherAffect_C_ReceiveTick");
static_assert(offsetof(BP_COMP_WeatherAffect_C_ReceiveTick, bpp__DeltaSeconds__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_ReceiveTick::bpp__DeltaSeconds__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.SetCsWindPowerOverride
// 0x0004 (0x0004 - 0x0000)
struct BP_COMP_WeatherAffect_C_SetCsWindPowerOverride final
{
public:
	int32                                         bpp__CsWindPower__pf;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_SetCsWindPowerOverride) == 0x000004, "Wrong alignment on BP_COMP_WeatherAffect_C_SetCsWindPowerOverride");
static_assert(sizeof(BP_COMP_WeatherAffect_C_SetCsWindPowerOverride) == 0x000004, "Wrong size on BP_COMP_WeatherAffect_C_SetCsWindPowerOverride");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetCsWindPowerOverride, bpp__CsWindPower__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_SetCsWindPowerOverride::bpp__CsWindPower__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.SetSky
// 0x0001 (0x0001 - 0x0000)
struct BP_COMP_WeatherAffect_C_SetSky final
{
public:
	EJackWorldWeather                             bpp__NewWeather__pf;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_SetSky) == 0x000001, "Wrong alignment on BP_COMP_WeatherAffect_C_SetSky");
static_assert(sizeof(BP_COMP_WeatherAffect_C_SetSky) == 0x000001, "Wrong size on BP_COMP_WeatherAffect_C_SetSky");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetSky, bpp__NewWeather__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_SetSky::bpp__NewWeather__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.SetSkyBase
// 0x0008 (0x0008 - 0x0000)
struct BP_COMP_WeatherAffect_C_SetSkyBase final
{
public:
	class ABP_SkyBase_C*                          bpp__SkyBase__pf;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_SetSkyBase) == 0x000008, "Wrong alignment on BP_COMP_WeatherAffect_C_SetSkyBase");
static_assert(sizeof(BP_COMP_WeatherAffect_C_SetSkyBase) == 0x000008, "Wrong size on BP_COMP_WeatherAffect_C_SetSkyBase");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetSkyBase, bpp__SkyBase__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_SetSkyBase::bpp__SkyBase__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.SetTimeChangeCloud
// 0x0008 (0x0008 - 0x0000)
struct BP_COMP_WeatherAffect_C_SetTimeChangeCloud final
{
public:
	class ABP_TimeChangeCloud_C*                  bpp__TimeChangeCloud__pf;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_SetTimeChangeCloud) == 0x000008, "Wrong alignment on BP_COMP_WeatherAffect_C_SetTimeChangeCloud");
static_assert(sizeof(BP_COMP_WeatherAffect_C_SetTimeChangeCloud) == 0x000008, "Wrong size on BP_COMP_WeatherAffect_C_SetTimeChangeCloud");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetTimeChangeCloud, bpp__TimeChangeCloud__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_SetTimeChangeCloud::bpp__TimeChangeCloud__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.SetTimeChangeFog
// 0x0008 (0x0008 - 0x0000)
struct BP_COMP_WeatherAffect_C_SetTimeChangeFog final
{
public:
	class ABP_TimeChangeFogBase_C*                bpp__TimeChangeFog__pf;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_SetTimeChangeFog) == 0x000008, "Wrong alignment on BP_COMP_WeatherAffect_C_SetTimeChangeFog");
static_assert(sizeof(BP_COMP_WeatherAffect_C_SetTimeChangeFog) == 0x000008, "Wrong size on BP_COMP_WeatherAffect_C_SetTimeChangeFog");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetTimeChangeFog, bpp__TimeChangeFog__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_SetTimeChangeFog::bpp__TimeChangeFog__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.SetWeatherEffect
// 0x0001 (0x0001 - 0x0000)
struct BP_COMP_WeatherAffect_C_SetWeatherEffect final
{
public:
	EJackWorldWeather                             bpp__NewWeather__pf;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_SetWeatherEffect) == 0x000001, "Wrong alignment on BP_COMP_WeatherAffect_C_SetWeatherEffect");
static_assert(sizeof(BP_COMP_WeatherAffect_C_SetWeatherEffect) == 0x000001, "Wrong size on BP_COMP_WeatherAffect_C_SetWeatherEffect");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWeatherEffect, bpp__NewWeather__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_SetWeatherEffect::bpp__NewWeather__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.SetWeatherEffectActive
// 0x0001 (0x0001 - 0x0000)
struct BP_COMP_WeatherAffect_C_SetWeatherEffectActive final
{
public:
	bool                                          bpp__Active__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_SetWeatherEffectActive) == 0x000001, "Wrong alignment on BP_COMP_WeatherAffect_C_SetWeatherEffectActive");
static_assert(sizeof(BP_COMP_WeatherAffect_C_SetWeatherEffectActive) == 0x000001, "Wrong size on BP_COMP_WeatherAffect_C_SetWeatherEffectActive");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWeatherEffectActive, bpp__Active__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_SetWeatherEffectActive::bpp__Active__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.SetWindAngle
// 0x0010 (0x0010 - 0x0000)
struct BP_COMP_WeatherAffect_C_SetWindAngle final
{
public:
	float                                         bpp__StartAngle__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__TargetAngle__pf;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Rate__pf;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__ForceSet__pf;                                 // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_COMP_WeatherAffect_C_SetWindAngle) == 0x000004, "Wrong alignment on BP_COMP_WeatherAffect_C_SetWindAngle");
static_assert(sizeof(BP_COMP_WeatherAffect_C_SetWindAngle) == 0x000010, "Wrong size on BP_COMP_WeatherAffect_C_SetWindAngle");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindAngle, bpp__StartAngle__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_SetWindAngle::bpp__StartAngle__pf' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindAngle, bpp__TargetAngle__pf) == 0x000004, "Member 'BP_COMP_WeatherAffect_C_SetWindAngle::bpp__TargetAngle__pf' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindAngle, bpp__Rate__pf) == 0x000008, "Member 'BP_COMP_WeatherAffect_C_SetWindAngle::bpp__Rate__pf' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindAngle, bpp__ForceSet__pf) == 0x00000C, "Member 'BP_COMP_WeatherAffect_C_SetWindAngle::bpp__ForceSet__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.SetWindAngleToMPC(Env)
// 0x0004 (0x0004 - 0x0000)
struct BP_COMP_WeatherAffect_C_SetWindAngleToMPC_Env_ final
{
public:
	float                                         bpp__Angle__pf;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_SetWindAngleToMPC_Env_) == 0x000004, "Wrong alignment on BP_COMP_WeatherAffect_C_SetWindAngleToMPC_Env_");
static_assert(sizeof(BP_COMP_WeatherAffect_C_SetWindAngleToMPC_Env_) == 0x000004, "Wrong size on BP_COMP_WeatherAffect_C_SetWindAngleToMPC_Env_");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindAngleToMPC_Env_, bpp__Angle__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_SetWindAngleToMPC_Env_::bpp__Angle__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.SetWindAngle(Effect)
// 0x0004 (0x0004 - 0x0000)
struct BP_COMP_WeatherAffect_C_SetWindAngle_Effect_ final
{
public:
	float                                         bpp__TargetAngle__pf;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_SetWindAngle_Effect_) == 0x000004, "Wrong alignment on BP_COMP_WeatherAffect_C_SetWindAngle_Effect_");
static_assert(sizeof(BP_COMP_WeatherAffect_C_SetWindAngle_Effect_) == 0x000004, "Wrong size on BP_COMP_WeatherAffect_C_SetWindAngle_Effect_");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindAngle_Effect_, bpp__TargetAngle__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_SetWindAngle_Effect_::bpp__TargetAngle__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.SetWindAngle(Env)
// 0x000C (0x000C - 0x0000)
struct BP_COMP_WeatherAffect_C_SetWindAngle_Env_ final
{
public:
	float                                         bpp__TargetAngle__pf;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__InRate__pf;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__ForceSet__pf;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_COMP_WeatherAffect_C_SetWindAngle_Env_) == 0x000004, "Wrong alignment on BP_COMP_WeatherAffect_C_SetWindAngle_Env_");
static_assert(sizeof(BP_COMP_WeatherAffect_C_SetWindAngle_Env_) == 0x00000C, "Wrong size on BP_COMP_WeatherAffect_C_SetWindAngle_Env_");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindAngle_Env_, bpp__TargetAngle__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_SetWindAngle_Env_::bpp__TargetAngle__pf' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindAngle_Env_, bpp__InRate__pf) == 0x000004, "Member 'BP_COMP_WeatherAffect_C_SetWindAngle_Env_::bpp__InRate__pf' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindAngle_Env_, bpp__ForceSet__pf) == 0x000008, "Member 'BP_COMP_WeatherAffect_C_SetWindAngle_Env_::bpp__ForceSet__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.SetWindCS Mode
// 0x0010 (0x0010 - 0x0000)
struct BP_COMP_WeatherAffect_C_SetWindCS_Mode final
{
public:
	bool                                          bpp__CSxMode__pfT;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWindDirectionalSource*                 bpp__WindxDirectionalSource__pfT;                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_SetWindCS_Mode) == 0x000008, "Wrong alignment on BP_COMP_WeatherAffect_C_SetWindCS_Mode");
static_assert(sizeof(BP_COMP_WeatherAffect_C_SetWindCS_Mode) == 0x000010, "Wrong size on BP_COMP_WeatherAffect_C_SetWindCS_Mode");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindCS_Mode, bpp__CSxMode__pfT) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_SetWindCS_Mode::bpp__CSxMode__pfT' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindCS_Mode, bpp__WindxDirectionalSource__pfT) == 0x000008, "Member 'BP_COMP_WeatherAffect_C_SetWindCS_Mode::bpp__WindxDirectionalSource__pfT' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.SetWindDirectionParam(Effect)
// 0x0018 (0x0018 - 0x0000)
struct BP_COMP_WeatherAffect_C_SetWindDirectionParam_Effect_ final
{
public:
	class UParticleSystemComponent*               bpp__Particle__pf;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bpp__WindVector__pf;                               // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_COMP_WeatherAffect_C_SetWindDirectionParam_Effect_) == 0x000008, "Wrong alignment on BP_COMP_WeatherAffect_C_SetWindDirectionParam_Effect_");
static_assert(sizeof(BP_COMP_WeatherAffect_C_SetWindDirectionParam_Effect_) == 0x000018, "Wrong size on BP_COMP_WeatherAffect_C_SetWindDirectionParam_Effect_");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindDirectionParam_Effect_, bpp__Particle__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_SetWindDirectionParam_Effect_::bpp__Particle__pf' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindDirectionParam_Effect_, bpp__WindVector__pf) == 0x000008, "Member 'BP_COMP_WeatherAffect_C_SetWindDirectionParam_Effect_::bpp__WindVector__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.SetWindParam(Effect)
// 0x0020 (0x0020 - 0x0000)
struct BP_COMP_WeatherAffect_C_SetWindParam_Effect_ final
{
public:
	TArray<struct FJackWorldParticleContainer>    bpp__Particles__pf;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                bpp__WindVector__pf;                               // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_COMP_WeatherAffect_C_SetWindParam_Effect_) == 0x000008, "Wrong alignment on BP_COMP_WeatherAffect_C_SetWindParam_Effect_");
static_assert(sizeof(BP_COMP_WeatherAffect_C_SetWindParam_Effect_) == 0x000020, "Wrong size on BP_COMP_WeatherAffect_C_SetWindParam_Effect_");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindParam_Effect_, bpp__Particles__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_SetWindParam_Effect_::bpp__Particles__pf' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindParam_Effect_, bpp__WindVector__pf) == 0x000010, "Member 'BP_COMP_WeatherAffect_C_SetWindParam_Effect_::bpp__WindVector__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.SetWindPause
// 0x0001 (0x0001 - 0x0000)
struct BP_COMP_WeatherAffect_C_SetWindPause final
{
public:
	bool                                          bpp__Pause__pf;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_SetWindPause) == 0x000001, "Wrong alignment on BP_COMP_WeatherAffect_C_SetWindPause");
static_assert(sizeof(BP_COMP_WeatherAffect_C_SetWindPause) == 0x000001, "Wrong size on BP_COMP_WeatherAffect_C_SetWindPause");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindPause, bpp__Pause__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_SetWindPause::bpp__Pause__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.SetWindPauseIgnoreEnv
// 0x0001 (0x0001 - 0x0000)
struct BP_COMP_WeatherAffect_C_SetWindPauseIgnoreEnv final
{
public:
	bool                                          bpp__Pause__pf;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_SetWindPauseIgnoreEnv) == 0x000001, "Wrong alignment on BP_COMP_WeatherAffect_C_SetWindPauseIgnoreEnv");
static_assert(sizeof(BP_COMP_WeatherAffect_C_SetWindPauseIgnoreEnv) == 0x000001, "Wrong size on BP_COMP_WeatherAffect_C_SetWindPauseIgnoreEnv");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindPauseIgnoreEnv, bpp__Pause__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_SetWindPauseIgnoreEnv::bpp__Pause__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.SetWindPower
// 0x000C (0x000C - 0x0000)
struct BP_COMP_WeatherAffect_C_SetWindPower final
{
public:
	EJackWorldWindLevel                           bpp__BeforeWindLevel__pf;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           bpp__AfterWindLevel__pf;                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         bpp__InRate__pf;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__ForceSet__pf;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_COMP_WeatherAffect_C_SetWindPower) == 0x000004, "Wrong alignment on BP_COMP_WeatherAffect_C_SetWindPower");
static_assert(sizeof(BP_COMP_WeatherAffect_C_SetWindPower) == 0x00000C, "Wrong size on BP_COMP_WeatherAffect_C_SetWindPower");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindPower, bpp__BeforeWindLevel__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_SetWindPower::bpp__BeforeWindLevel__pf' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindPower, bpp__AfterWindLevel__pf) == 0x000001, "Member 'BP_COMP_WeatherAffect_C_SetWindPower::bpp__AfterWindLevel__pf' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindPower, bpp__InRate__pf) == 0x000004, "Member 'BP_COMP_WeatherAffect_C_SetWindPower::bpp__InRate__pf' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindPower, bpp__ForceSet__pf) == 0x000008, "Member 'BP_COMP_WeatherAffect_C_SetWindPower::bpp__ForceSet__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.SetWindPowerCore(Chara)
// 0x0008 (0x0008 - 0x0000)
struct BP_COMP_WeatherAffect_C_SetWindPowerCore_Chara_ final
{
public:
	float                                         bpp__Speed__pf;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Strength__pf;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_SetWindPowerCore_Chara_) == 0x000004, "Wrong alignment on BP_COMP_WeatherAffect_C_SetWindPowerCore_Chara_");
static_assert(sizeof(BP_COMP_WeatherAffect_C_SetWindPowerCore_Chara_) == 0x000008, "Wrong size on BP_COMP_WeatherAffect_C_SetWindPowerCore_Chara_");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindPowerCore_Chara_, bpp__Speed__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_SetWindPowerCore_Chara_::bpp__Speed__pf' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindPowerCore_Chara_, bpp__Strength__pf) == 0x000004, "Member 'BP_COMP_WeatherAffect_C_SetWindPowerCore_Chara_::bpp__Strength__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.SetWindPowerCore(Env)
// 0x0008 (0x0008 - 0x0000)
struct BP_COMP_WeatherAffect_C_SetWindPowerCore_Env_ final
{
public:
	float                                         bpp__Speed__pf;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Strength__pf;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_SetWindPowerCore_Env_) == 0x000004, "Wrong alignment on BP_COMP_WeatherAffect_C_SetWindPowerCore_Env_");
static_assert(sizeof(BP_COMP_WeatherAffect_C_SetWindPowerCore_Env_) == 0x000008, "Wrong size on BP_COMP_WeatherAffect_C_SetWindPowerCore_Env_");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindPowerCore_Env_, bpp__Speed__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_SetWindPowerCore_Env_::bpp__Speed__pf' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindPowerCore_Env_, bpp__Strength__pf) == 0x000004, "Member 'BP_COMP_WeatherAffect_C_SetWindPowerCore_Env_::bpp__Strength__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.SetWindPower(Chara)
// 0x0008 (0x0008 - 0x0000)
struct BP_COMP_WeatherAffect_C_SetWindPower_Chara_ final
{
public:
	EJackWorldWindLevel                           bpp__BeforeWindLevel__pf;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           bpp__AfterWindLevel__pf;                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         bpp__InRate__pf;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_SetWindPower_Chara_) == 0x000004, "Wrong alignment on BP_COMP_WeatherAffect_C_SetWindPower_Chara_");
static_assert(sizeof(BP_COMP_WeatherAffect_C_SetWindPower_Chara_) == 0x000008, "Wrong size on BP_COMP_WeatherAffect_C_SetWindPower_Chara_");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindPower_Chara_, bpp__BeforeWindLevel__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_SetWindPower_Chara_::bpp__BeforeWindLevel__pf' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindPower_Chara_, bpp__AfterWindLevel__pf) == 0x000001, "Member 'BP_COMP_WeatherAffect_C_SetWindPower_Chara_::bpp__AfterWindLevel__pf' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindPower_Chara_, bpp__InRate__pf) == 0x000004, "Member 'BP_COMP_WeatherAffect_C_SetWindPower_Chara_::bpp__InRate__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.SetWindPower(Effect)
// 0x0008 (0x0008 - 0x0000)
struct BP_COMP_WeatherAffect_C_SetWindPower_Effect_ final
{
public:
	EJackWorldWindLevel                           bpp__BeforeWindLevel__pf;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           bpp__AfterWindLevel__pf;                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         bpp__InRate__pf;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_SetWindPower_Effect_) == 0x000004, "Wrong alignment on BP_COMP_WeatherAffect_C_SetWindPower_Effect_");
static_assert(sizeof(BP_COMP_WeatherAffect_C_SetWindPower_Effect_) == 0x000008, "Wrong size on BP_COMP_WeatherAffect_C_SetWindPower_Effect_");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindPower_Effect_, bpp__BeforeWindLevel__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_SetWindPower_Effect_::bpp__BeforeWindLevel__pf' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindPower_Effect_, bpp__AfterWindLevel__pf) == 0x000001, "Member 'BP_COMP_WeatherAffect_C_SetWindPower_Effect_::bpp__AfterWindLevel__pf' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindPower_Effect_, bpp__InRate__pf) == 0x000004, "Member 'BP_COMP_WeatherAffect_C_SetWindPower_Effect_::bpp__InRate__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.SetWindPower(Env)
// 0x0008 (0x0008 - 0x0000)
struct BP_COMP_WeatherAffect_C_SetWindPower_Env_ final
{
public:
	EJackWorldWindLevel                           bpp__BeforeWindLevel__pf;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWindLevel                           bpp__AfterWindLevel__pf;                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         bpp__InRate__pf;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_SetWindPower_Env_) == 0x000004, "Wrong alignment on BP_COMP_WeatherAffect_C_SetWindPower_Env_");
static_assert(sizeof(BP_COMP_WeatherAffect_C_SetWindPower_Env_) == 0x000008, "Wrong size on BP_COMP_WeatherAffect_C_SetWindPower_Env_");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindPower_Env_, bpp__BeforeWindLevel__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_SetWindPower_Env_::bpp__BeforeWindLevel__pf' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindPower_Env_, bpp__AfterWindLevel__pf) == 0x000001, "Member 'BP_COMP_WeatherAffect_C_SetWindPower_Env_::bpp__AfterWindLevel__pf' has a wrong offset!");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindPower_Env_, bpp__InRate__pf) == 0x000004, "Member 'BP_COMP_WeatherAffect_C_SetWindPower_Env_::bpp__InRate__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.SetWindRotation(Chara)
// 0x0004 (0x0004 - 0x0000)
struct BP_COMP_WeatherAffect_C_SetWindRotation_Chara_ final
{
public:
	float                                         bpp__Yaw__pf;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_SetWindRotation_Chara_) == 0x000004, "Wrong alignment on BP_COMP_WeatherAffect_C_SetWindRotation_Chara_");
static_assert(sizeof(BP_COMP_WeatherAffect_C_SetWindRotation_Chara_) == 0x000004, "Wrong size on BP_COMP_WeatherAffect_C_SetWindRotation_Chara_");
static_assert(offsetof(BP_COMP_WeatherAffect_C_SetWindRotation_Chara_, bpp__Yaw__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_SetWindRotation_Chara_::bpp__Yaw__pf' has a wrong offset!");

// Function BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.WorldParticlesChangedDelegate_Event_1
// 0x0010 (0x0010 - 0x0000)
struct BP_COMP_WeatherAffect_C_WorldParticlesChangedDelegate_Event_1 final
{
public:
	TArray<struct FJackWorldParticleContainer>    bpp__Particles__pf__const;                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_WorldParticlesChangedDelegate_Event_1) == 0x000008, "Wrong alignment on BP_COMP_WeatherAffect_C_WorldParticlesChangedDelegate_Event_1");
static_assert(sizeof(BP_COMP_WeatherAffect_C_WorldParticlesChangedDelegate_Event_1) == 0x000010, "Wrong size on BP_COMP_WeatherAffect_C_WorldParticlesChangedDelegate_Event_1");
static_assert(offsetof(BP_COMP_WeatherAffect_C_WorldParticlesChangedDelegate_Event_1, bpp__Particles__pf__const) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_WorldParticlesChangedDelegate_Event_1::bpp__Particles__pf__const' has a wrong offset!");

// DelegateFunction BP_COMP_WeatherAffect.BP_COMP_WeatherAffect_C.CallWeatherChangeForTimeChangePost__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BP_COMP_WeatherAffect_C_CallWeatherChangeForTimeChangePost__DelegateSignature final
{
public:
	EJackWorldWeather                             bpp__NewWeather__pf;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_COMP_WeatherAffect_C_CallWeatherChangeForTimeChangePost__DelegateSignature) == 0x000001, "Wrong alignment on BP_COMP_WeatherAffect_C_CallWeatherChangeForTimeChangePost__DelegateSignature");
static_assert(sizeof(BP_COMP_WeatherAffect_C_CallWeatherChangeForTimeChangePost__DelegateSignature) == 0x000001, "Wrong size on BP_COMP_WeatherAffect_C_CallWeatherChangeForTimeChangePost__DelegateSignature");
static_assert(offsetof(BP_COMP_WeatherAffect_C_CallWeatherChangeForTimeChangePost__DelegateSignature, bpp__NewWeather__pf) == 0x000000, "Member 'BP_COMP_WeatherAffect_C_CallWeatherChangeForTimeChangePost__DelegateSignature::bpp__NewWeather__pf' has a wrong offset!");

}

