#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CriWareRuntime

#include "Basic.hpp"

#include "CriWareRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function CriWareRuntime.AtomAsrRack.GetAsrRack
// 0x0010 (0x0010 - 0x0000)
struct AtomAsrRack_GetAsrRack final
{
public:
	int32                                         AsrRackId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomAsrRack*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomAsrRack_GetAsrRack) == 0x000008, "Wrong alignment on AtomAsrRack_GetAsrRack");
static_assert(sizeof(AtomAsrRack_GetAsrRack) == 0x000010, "Wrong size on AtomAsrRack_GetAsrRack");
static_assert(offsetof(AtomAsrRack_GetAsrRack, AsrRackId) == 0x000000, "Member 'AtomAsrRack_GetAsrRack::AsrRackId' has a wrong offset!");
static_assert(offsetof(AtomAsrRack_GetAsrRack, ReturnValue) == 0x000008, "Member 'AtomAsrRack_GetAsrRack::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomAsrRack.GetDefaultAsrRack
// 0x0008 (0x0008 - 0x0000)
struct AtomAsrRack_GetDefaultAsrRack final
{
public:
	class UAtomAsrRack*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomAsrRack_GetDefaultAsrRack) == 0x000008, "Wrong alignment on AtomAsrRack_GetDefaultAsrRack");
static_assert(sizeof(AtomAsrRack_GetDefaultAsrRack) == 0x000008, "Wrong size on AtomAsrRack_GetDefaultAsrRack");
static_assert(offsetof(AtomAsrRack_GetDefaultAsrRack, ReturnValue) == 0x000000, "Member 'AtomAsrRack_GetDefaultAsrRack::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomAsrRack.ApplyDspBusSnapshot
// 0x0018 (0x0018 - 0x0000)
struct AtomAsrRack_ApplyDspBusSnapshot final
{
public:
	class FString                                 SnapshotName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Milliseconds;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomAsrRack_ApplyDspBusSnapshot) == 0x000008, "Wrong alignment on AtomAsrRack_ApplyDspBusSnapshot");
static_assert(sizeof(AtomAsrRack_ApplyDspBusSnapshot) == 0x000018, "Wrong size on AtomAsrRack_ApplyDspBusSnapshot");
static_assert(offsetof(AtomAsrRack_ApplyDspBusSnapshot, SnapshotName) == 0x000000, "Member 'AtomAsrRack_ApplyDspBusSnapshot::SnapshotName' has a wrong offset!");
static_assert(offsetof(AtomAsrRack_ApplyDspBusSnapshot, Milliseconds) == 0x000010, "Member 'AtomAsrRack_ApplyDspBusSnapshot::Milliseconds' has a wrong offset!");

// Function CriWareRuntime.AtomAsrRack.AttachDspBusSetting
// 0x0010 (0x0010 - 0x0000)
struct AtomAsrRack_AttachDspBusSetting final
{
public:
	class FString                                 SettingName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomAsrRack_AttachDspBusSetting) == 0x000008, "Wrong alignment on AtomAsrRack_AttachDspBusSetting");
static_assert(sizeof(AtomAsrRack_AttachDspBusSetting) == 0x000010, "Wrong size on AtomAsrRack_AttachDspBusSetting");
static_assert(offsetof(AtomAsrRack_AttachDspBusSetting, SettingName) == 0x000000, "Member 'AtomAsrRack_AttachDspBusSetting::SettingName' has a wrong offset!");

// Function CriWareRuntime.AtomAsrRack.SetBusSendLevelByName
// 0x0028 (0x0028 - 0x0000)
struct AtomAsrRack_SetBusSendLevelByName final
{
public:
	class FString                                 SourceBusName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DestBusName;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomAsrRack_SetBusSendLevelByName) == 0x000008, "Wrong alignment on AtomAsrRack_SetBusSendLevelByName");
static_assert(sizeof(AtomAsrRack_SetBusSendLevelByName) == 0x000028, "Wrong size on AtomAsrRack_SetBusSendLevelByName");
static_assert(offsetof(AtomAsrRack_SetBusSendLevelByName, SourceBusName) == 0x000000, "Member 'AtomAsrRack_SetBusSendLevelByName::SourceBusName' has a wrong offset!");
static_assert(offsetof(AtomAsrRack_SetBusSendLevelByName, DestBusName) == 0x000010, "Member 'AtomAsrRack_SetBusSendLevelByName::DestBusName' has a wrong offset!");
static_assert(offsetof(AtomAsrRack_SetBusSendLevelByName, Level) == 0x000020, "Member 'AtomAsrRack_SetBusSendLevelByName::Level' has a wrong offset!");

// Function CriWareRuntime.AtomAsrRack.SetBusVolumeByName
// 0x0018 (0x0018 - 0x0000)
struct AtomAsrRack_SetBusVolumeByName final
{
public:
	class FString                                 BusName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomAsrRack_SetBusVolumeByName) == 0x000008, "Wrong alignment on AtomAsrRack_SetBusVolumeByName");
static_assert(sizeof(AtomAsrRack_SetBusVolumeByName) == 0x000018, "Wrong size on AtomAsrRack_SetBusVolumeByName");
static_assert(offsetof(AtomAsrRack_SetBusVolumeByName, BusName) == 0x000000, "Member 'AtomAsrRack_SetBusVolumeByName::BusName' has a wrong offset!");
static_assert(offsetof(AtomAsrRack_SetBusVolumeByName, Volume) == 0x000010, "Member 'AtomAsrRack_SetBusVolumeByName::Volume' has a wrong offset!");

// Function CriWareRuntime.AtomCategory.GetVolumeByName
// 0x0018 (0x0018 - 0x0000)
struct AtomCategory_GetVolumeByName final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomCategory_GetVolumeByName) == 0x000008, "Wrong alignment on AtomCategory_GetVolumeByName");
static_assert(sizeof(AtomCategory_GetVolumeByName) == 0x000018, "Wrong size on AtomCategory_GetVolumeByName");
static_assert(offsetof(AtomCategory_GetVolumeByName, CategoryName) == 0x000000, "Member 'AtomCategory_GetVolumeByName::CategoryName' has a wrong offset!");
static_assert(offsetof(AtomCategory_GetVolumeByName, ReturnValue) == 0x000010, "Member 'AtomCategory_GetVolumeByName::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomCategory.IsPausedByName
// 0x0018 (0x0018 - 0x0000)
struct AtomCategory_IsPausedByName final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomCategory_IsPausedByName) == 0x000008, "Wrong alignment on AtomCategory_IsPausedByName");
static_assert(sizeof(AtomCategory_IsPausedByName) == 0x000018, "Wrong size on AtomCategory_IsPausedByName");
static_assert(offsetof(AtomCategory_IsPausedByName, CategoryName) == 0x000000, "Member 'AtomCategory_IsPausedByName::CategoryName' has a wrong offset!");
static_assert(offsetof(AtomCategory_IsPausedByName, ReturnValue) == 0x000010, "Member 'AtomCategory_IsPausedByName::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomCategory.PauseByName
// 0x0018 (0x0018 - 0x0000)
struct AtomCategory_PauseByName final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPause;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomCategory_PauseByName) == 0x000008, "Wrong alignment on AtomCategory_PauseByName");
static_assert(sizeof(AtomCategory_PauseByName) == 0x000018, "Wrong size on AtomCategory_PauseByName");
static_assert(offsetof(AtomCategory_PauseByName, CategoryName) == 0x000000, "Member 'AtomCategory_PauseByName::CategoryName' has a wrong offset!");
static_assert(offsetof(AtomCategory_PauseByName, bPause) == 0x000010, "Member 'AtomCategory_PauseByName::bPause' has a wrong offset!");

// Function CriWareRuntime.AtomCategory.SetAisacControlByName
// 0x0028 (0x0028 - 0x0000)
struct AtomCategory_SetAisacControlByName final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AisacName;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomCategory_SetAisacControlByName) == 0x000008, "Wrong alignment on AtomCategory_SetAisacControlByName");
static_assert(sizeof(AtomCategory_SetAisacControlByName) == 0x000028, "Wrong size on AtomCategory_SetAisacControlByName");
static_assert(offsetof(AtomCategory_SetAisacControlByName, CategoryName) == 0x000000, "Member 'AtomCategory_SetAisacControlByName::CategoryName' has a wrong offset!");
static_assert(offsetof(AtomCategory_SetAisacControlByName, AisacName) == 0x000010, "Member 'AtomCategory_SetAisacControlByName::AisacName' has a wrong offset!");
static_assert(offsetof(AtomCategory_SetAisacControlByName, Value) == 0x000020, "Member 'AtomCategory_SetAisacControlByName::Value' has a wrong offset!");

// Function CriWareRuntime.AtomCategory.SetVolumeByName
// 0x0018 (0x0018 - 0x0000)
struct AtomCategory_SetVolumeByName final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomCategory_SetVolumeByName) == 0x000008, "Wrong alignment on AtomCategory_SetVolumeByName");
static_assert(sizeof(AtomCategory_SetVolumeByName) == 0x000018, "Wrong size on AtomCategory_SetVolumeByName");
static_assert(offsetof(AtomCategory_SetVolumeByName, CategoryName) == 0x000000, "Member 'AtomCategory_SetVolumeByName::CategoryName' has a wrong offset!");
static_assert(offsetof(AtomCategory_SetVolumeByName, Volume) == 0x000010, "Member 'AtomCategory_SetVolumeByName::Volume' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.GetSequencePosition
// 0x0004 (0x0004 - 0x0000)
struct AtomComponent_GetSequencePosition final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_GetSequencePosition) == 0x000004, "Wrong alignment on AtomComponent_GetSequencePosition");
static_assert(sizeof(AtomComponent_GetSequencePosition) == 0x000004, "Wrong size on AtomComponent_GetSequencePosition");
static_assert(offsetof(AtomComponent_GetSequencePosition, ReturnValue) == 0x000000, "Member 'AtomComponent_GetSequencePosition::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.GetStatus
// 0x0001 (0x0001 - 0x0000)
struct AtomComponent_GetStatus final
{
public:
	EAtomComponentStatus                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_GetStatus) == 0x000001, "Wrong alignment on AtomComponent_GetStatus");
static_assert(sizeof(AtomComponent_GetStatus) == 0x000001, "Wrong size on AtomComponent_GetStatus");
static_assert(offsetof(AtomComponent_GetStatus, ReturnValue) == 0x000000, "Member 'AtomComponent_GetStatus::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.GetTime
// 0x0004 (0x0004 - 0x0000)
struct AtomComponent_GetTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_GetTime) == 0x000004, "Wrong alignment on AtomComponent_GetTime");
static_assert(sizeof(AtomComponent_GetTime) == 0x000004, "Wrong size on AtomComponent_GetTime");
static_assert(offsetof(AtomComponent_GetTime, ReturnValue) == 0x000000, "Member 'AtomComponent_GetTime::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.IsPaused
// 0x0001 (0x0001 - 0x0000)
struct AtomComponent_IsPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_IsPaused) == 0x000001, "Wrong alignment on AtomComponent_IsPaused");
static_assert(sizeof(AtomComponent_IsPaused) == 0x000001, "Wrong size on AtomComponent_IsPaused");
static_assert(offsetof(AtomComponent_IsPaused, ReturnValue) == 0x000000, "Member 'AtomComponent_IsPaused::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct AtomComponent_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_IsPlaying) == 0x000001, "Wrong alignment on AtomComponent_IsPlaying");
static_assert(sizeof(AtomComponent_IsPlaying) == 0x000001, "Wrong size on AtomComponent_IsPlaying");
static_assert(offsetof(AtomComponent_IsPlaying, ReturnValue) == 0x000000, "Member 'AtomComponent_IsPlaying::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.Pause
// 0x0001 (0x0001 - 0x0000)
struct AtomComponent_Pause final
{
public:
	bool                                          bPause;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_Pause) == 0x000001, "Wrong alignment on AtomComponent_Pause");
static_assert(sizeof(AtomComponent_Pause) == 0x000001, "Wrong size on AtomComponent_Pause");
static_assert(offsetof(AtomComponent_Pause, bPause) == 0x000000, "Member 'AtomComponent_Pause::bPause' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.Play
// 0x0004 (0x0004 - 0x0000)
struct AtomComponent_Play final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_Play) == 0x000004, "Wrong alignment on AtomComponent_Play");
static_assert(sizeof(AtomComponent_Play) == 0x000004, "Wrong size on AtomComponent_Play");
static_assert(offsetof(AtomComponent_Play, StartTime) == 0x000000, "Member 'AtomComponent_Play::StartTime' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetAisacByName
// 0x0018 (0x0018 - 0x0000)
struct AtomComponent_SetAisacByName final
{
public:
	class FString                                 ControlName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlValue;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomComponent_SetAisacByName) == 0x000008, "Wrong alignment on AtomComponent_SetAisacByName");
static_assert(sizeof(AtomComponent_SetAisacByName) == 0x000018, "Wrong size on AtomComponent_SetAisacByName");
static_assert(offsetof(AtomComponent_SetAisacByName, ControlName) == 0x000000, "Member 'AtomComponent_SetAisacByName::ControlName' has a wrong offset!");
static_assert(offsetof(AtomComponent_SetAisacByName, ControlValue) == 0x000010, "Member 'AtomComponent_SetAisacByName::ControlValue' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetBusSendLevel
// 0x0008 (0x0008 - 0x0000)
struct AtomComponent_SetBusSendLevel final
{
public:
	int32                                         BusId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_SetBusSendLevel) == 0x000004, "Wrong alignment on AtomComponent_SetBusSendLevel");
static_assert(sizeof(AtomComponent_SetBusSendLevel) == 0x000008, "Wrong size on AtomComponent_SetBusSendLevel");
static_assert(offsetof(AtomComponent_SetBusSendLevel, BusId) == 0x000000, "Member 'AtomComponent_SetBusSendLevel::BusId' has a wrong offset!");
static_assert(offsetof(AtomComponent_SetBusSendLevel, Level) == 0x000004, "Member 'AtomComponent_SetBusSendLevel::Level' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetBusSendLevelByName
// 0x0018 (0x0018 - 0x0000)
struct AtomComponent_SetBusSendLevelByName final
{
public:
	class FString                                 BusName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomComponent_SetBusSendLevelByName) == 0x000008, "Wrong alignment on AtomComponent_SetBusSendLevelByName");
static_assert(sizeof(AtomComponent_SetBusSendLevelByName) == 0x000018, "Wrong size on AtomComponent_SetBusSendLevelByName");
static_assert(offsetof(AtomComponent_SetBusSendLevelByName, BusName) == 0x000000, "Member 'AtomComponent_SetBusSendLevelByName::BusName' has a wrong offset!");
static_assert(offsetof(AtomComponent_SetBusSendLevelByName, Level) == 0x000010, "Member 'AtomComponent_SetBusSendLevelByName::Level' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetBusSendLevelOffset
// 0x0008 (0x0008 - 0x0000)
struct AtomComponent_SetBusSendLevelOffset final
{
public:
	int32                                         BusId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LevelOffset;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_SetBusSendLevelOffset) == 0x000004, "Wrong alignment on AtomComponent_SetBusSendLevelOffset");
static_assert(sizeof(AtomComponent_SetBusSendLevelOffset) == 0x000008, "Wrong size on AtomComponent_SetBusSendLevelOffset");
static_assert(offsetof(AtomComponent_SetBusSendLevelOffset, BusId) == 0x000000, "Member 'AtomComponent_SetBusSendLevelOffset::BusId' has a wrong offset!");
static_assert(offsetof(AtomComponent_SetBusSendLevelOffset, LevelOffset) == 0x000004, "Member 'AtomComponent_SetBusSendLevelOffset::LevelOffset' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetBusSendLevelOffsetByName
// 0x0018 (0x0018 - 0x0000)
struct AtomComponent_SetBusSendLevelOffsetByName final
{
public:
	class FString                                 BusName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LevelOffset;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomComponent_SetBusSendLevelOffsetByName) == 0x000008, "Wrong alignment on AtomComponent_SetBusSendLevelOffsetByName");
static_assert(sizeof(AtomComponent_SetBusSendLevelOffsetByName) == 0x000018, "Wrong size on AtomComponent_SetBusSendLevelOffsetByName");
static_assert(offsetof(AtomComponent_SetBusSendLevelOffsetByName, BusName) == 0x000000, "Member 'AtomComponent_SetBusSendLevelOffsetByName::BusName' has a wrong offset!");
static_assert(offsetof(AtomComponent_SetBusSendLevelOffsetByName, LevelOffset) == 0x000010, "Member 'AtomComponent_SetBusSendLevelOffsetByName::LevelOffset' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetNextBlockIndex
// 0x0004 (0x0004 - 0x0000)
struct AtomComponent_SetNextBlockIndex final
{
public:
	int32                                         BlockIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_SetNextBlockIndex) == 0x000004, "Wrong alignment on AtomComponent_SetNextBlockIndex");
static_assert(sizeof(AtomComponent_SetNextBlockIndex) == 0x000004, "Wrong size on AtomComponent_SetNextBlockIndex");
static_assert(offsetof(AtomComponent_SetNextBlockIndex, BlockIndex) == 0x000000, "Member 'AtomComponent_SetNextBlockIndex::BlockIndex' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetPitch
// 0x0004 (0x0004 - 0x0000)
struct AtomComponent_SetPitch final
{
public:
	float                                         Pitch;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_SetPitch) == 0x000004, "Wrong alignment on AtomComponent_SetPitch");
static_assert(sizeof(AtomComponent_SetPitch) == 0x000004, "Wrong size on AtomComponent_SetPitch");
static_assert(offsetof(AtomComponent_SetPitch, Pitch) == 0x000000, "Member 'AtomComponent_SetPitch::Pitch' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetPitchMultiplier
// 0x0004 (0x0004 - 0x0000)
struct AtomComponent_SetPitchMultiplier final
{
public:
	float                                         NewPitchMultiplier;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_SetPitchMultiplier) == 0x000004, "Wrong alignment on AtomComponent_SetPitchMultiplier");
static_assert(sizeof(AtomComponent_SetPitchMultiplier) == 0x000004, "Wrong size on AtomComponent_SetPitchMultiplier");
static_assert(offsetof(AtomComponent_SetPitchMultiplier, NewPitchMultiplier) == 0x000000, "Member 'AtomComponent_SetPitchMultiplier::NewPitchMultiplier' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetSelectorLabel
// 0x0020 (0x0020 - 0x0000)
struct AtomComponent_SetSelectorLabel final
{
public:
	class FString                                 Selector;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Label;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_SetSelectorLabel) == 0x000008, "Wrong alignment on AtomComponent_SetSelectorLabel");
static_assert(sizeof(AtomComponent_SetSelectorLabel) == 0x000020, "Wrong size on AtomComponent_SetSelectorLabel");
static_assert(offsetof(AtomComponent_SetSelectorLabel, Selector) == 0x000000, "Member 'AtomComponent_SetSelectorLabel::Selector' has a wrong offset!");
static_assert(offsetof(AtomComponent_SetSelectorLabel, Label) == 0x000010, "Member 'AtomComponent_SetSelectorLabel::Label' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetSound
// 0x0008 (0x0008 - 0x0000)
struct AtomComponent_SetSound final
{
public:
	class USoundAtomCue*                          NewSound;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_SetSound) == 0x000008, "Wrong alignment on AtomComponent_SetSound");
static_assert(sizeof(AtomComponent_SetSound) == 0x000008, "Wrong size on AtomComponent_SetSound");
static_assert(offsetof(AtomComponent_SetSound, NewSound) == 0x000000, "Member 'AtomComponent_SetSound::NewSound' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetVolume
// 0x0004 (0x0004 - 0x0000)
struct AtomComponent_SetVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_SetVolume) == 0x000004, "Wrong alignment on AtomComponent_SetVolume");
static_assert(sizeof(AtomComponent_SetVolume) == 0x000004, "Wrong size on AtomComponent_SetVolume");
static_assert(offsetof(AtomComponent_SetVolume, Volume) == 0x000000, "Member 'AtomComponent_SetVolume::Volume' has a wrong offset!");

// Function CriWareRuntime.AtomStatics.PauseAudioOutput
// 0x0001 (0x0001 - 0x0000)
struct AtomStatics_PauseAudioOutput final
{
public:
	bool                                          bPause;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomStatics_PauseAudioOutput) == 0x000001, "Wrong alignment on AtomStatics_PauseAudioOutput");
static_assert(sizeof(AtomStatics_PauseAudioOutput) == 0x000001, "Wrong size on AtomStatics_PauseAudioOutput");
static_assert(offsetof(AtomStatics_PauseAudioOutput, bPause) == 0x000000, "Member 'AtomStatics_PauseAudioOutput::bPause' has a wrong offset!");

// Function CriWareRuntime.AtomStatics.PlaySoundAtLocation
// 0x0048 (0x0048 - 0x0000)
struct AtomStatics_PlaySoundAtLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomStatics_PlaySoundAtLocation) == 0x000008, "Wrong alignment on AtomStatics_PlaySoundAtLocation");
static_assert(sizeof(AtomStatics_PlaySoundAtLocation) == 0x000048, "Wrong size on AtomStatics_PlaySoundAtLocation");
static_assert(offsetof(AtomStatics_PlaySoundAtLocation, WorldContextObject) == 0x000000, "Member 'AtomStatics_PlaySoundAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAtLocation, Sound) == 0x000008, "Member 'AtomStatics_PlaySoundAtLocation::Sound' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAtLocation, Location) == 0x000010, "Member 'AtomStatics_PlaySoundAtLocation::Location' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAtLocation, Rotation) == 0x00001C, "Member 'AtomStatics_PlaySoundAtLocation::Rotation' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAtLocation, VolumeMultiplier) == 0x000028, "Member 'AtomStatics_PlaySoundAtLocation::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAtLocation, PitchMultiplier) == 0x00002C, "Member 'AtomStatics_PlaySoundAtLocation::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAtLocation, StartTime) == 0x000030, "Member 'AtomStatics_PlaySoundAtLocation::StartTime' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAtLocation, AttenuationSettings) == 0x000038, "Member 'AtomStatics_PlaySoundAtLocation::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAtLocation, ConcurrencySettings) == 0x000040, "Member 'AtomStatics_PlaySoundAtLocation::ConcurrencySettings' has a wrong offset!");

// Function CriWareRuntime.AtomStatics.PlaySoundAttached
// 0x0048 (0x0048 - 0x0000)
struct AtomStatics_PlaySoundAttached final
{
public:
	class USoundAtomCue*                          Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumeMultiplier;                                  // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomComponent*                         ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomStatics_PlaySoundAttached) == 0x000008, "Wrong alignment on AtomStatics_PlaySoundAttached");
static_assert(sizeof(AtomStatics_PlaySoundAttached) == 0x000048, "Wrong size on AtomStatics_PlaySoundAttached");
static_assert(offsetof(AtomStatics_PlaySoundAttached, Sound) == 0x000000, "Member 'AtomStatics_PlaySoundAttached::Sound' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAttached, AttachToComponent) == 0x000008, "Member 'AtomStatics_PlaySoundAttached::AttachToComponent' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAttached, AttachPointName) == 0x000010, "Member 'AtomStatics_PlaySoundAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAttached, Location) == 0x000018, "Member 'AtomStatics_PlaySoundAttached::Location' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAttached, LocationType) == 0x000024, "Member 'AtomStatics_PlaySoundAttached::LocationType' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAttached, bStopWhenAttachedToDestroyed) == 0x000025, "Member 'AtomStatics_PlaySoundAttached::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAttached, VolumeMultiplier) == 0x000028, "Member 'AtomStatics_PlaySoundAttached::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAttached, PitchMultiplier) == 0x00002C, "Member 'AtomStatics_PlaySoundAttached::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAttached, StartTime) == 0x000030, "Member 'AtomStatics_PlaySoundAttached::StartTime' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAttached, AttenuationSettings) == 0x000038, "Member 'AtomStatics_PlaySoundAttached::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAttached, ReturnValue) == 0x000040, "Member 'AtomStatics_PlaySoundAttached::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomStatics.SpawnSound2D
// 0x0028 (0x0028 - 0x0000)
struct AtomStatics_SpawnSound2D final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPersistAcrossLevelTransition;                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomStatics_SpawnSound2D) == 0x000008, "Wrong alignment on AtomStatics_SpawnSound2D");
static_assert(sizeof(AtomStatics_SpawnSound2D) == 0x000028, "Wrong size on AtomStatics_SpawnSound2D");
static_assert(offsetof(AtomStatics_SpawnSound2D, WorldContextObject) == 0x000000, "Member 'AtomStatics_SpawnSound2D::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSound2D, Sound) == 0x000008, "Member 'AtomStatics_SpawnSound2D::Sound' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSound2D, PitchMultiplier) == 0x000010, "Member 'AtomStatics_SpawnSound2D::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSound2D, StartTime) == 0x000014, "Member 'AtomStatics_SpawnSound2D::StartTime' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSound2D, bPersistAcrossLevelTransition) == 0x000018, "Member 'AtomStatics_SpawnSound2D::bPersistAcrossLevelTransition' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSound2D, bAutoDestroy) == 0x000019, "Member 'AtomStatics_SpawnSound2D::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSound2D, ReturnValue) == 0x000020, "Member 'AtomStatics_SpawnSound2D::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomStatics.SpawnSoundAtLocation
// 0x0058 (0x0058 - 0x0000)
struct AtomStatics_SpawnSoundAtLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         ReturnValue;                                       // 0x0050(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomStatics_SpawnSoundAtLocation) == 0x000008, "Wrong alignment on AtomStatics_SpawnSoundAtLocation");
static_assert(sizeof(AtomStatics_SpawnSoundAtLocation) == 0x000058, "Wrong size on AtomStatics_SpawnSoundAtLocation");
static_assert(offsetof(AtomStatics_SpawnSoundAtLocation, WorldContextObject) == 0x000000, "Member 'AtomStatics_SpawnSoundAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAtLocation, Sound) == 0x000008, "Member 'AtomStatics_SpawnSoundAtLocation::Sound' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAtLocation, Location) == 0x000010, "Member 'AtomStatics_SpawnSoundAtLocation::Location' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAtLocation, Rotation) == 0x00001C, "Member 'AtomStatics_SpawnSoundAtLocation::Rotation' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAtLocation, VolumeMultiplier) == 0x000028, "Member 'AtomStatics_SpawnSoundAtLocation::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAtLocation, PitchMultiplier) == 0x00002C, "Member 'AtomStatics_SpawnSoundAtLocation::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAtLocation, StartTime) == 0x000030, "Member 'AtomStatics_SpawnSoundAtLocation::StartTime' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAtLocation, AttenuationSettings) == 0x000038, "Member 'AtomStatics_SpawnSoundAtLocation::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAtLocation, ConcurrencySettings) == 0x000040, "Member 'AtomStatics_SpawnSoundAtLocation::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAtLocation, bAutoDestroy) == 0x000048, "Member 'AtomStatics_SpawnSoundAtLocation::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAtLocation, ReturnValue) == 0x000050, "Member 'AtomStatics_SpawnSoundAtLocation::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomStatics.SpawnSoundAttached
// 0x0060 (0x0060 - 0x0000)
struct AtomStatics_SpawnSoundAttached final
{
public:
	class USoundAtomCue*                          Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0024(0x000C)(Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumeMultiplier;                                  // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         ReturnValue;                                       // 0x0058(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomStatics_SpawnSoundAttached) == 0x000008, "Wrong alignment on AtomStatics_SpawnSoundAttached");
static_assert(sizeof(AtomStatics_SpawnSoundAttached) == 0x000060, "Wrong size on AtomStatics_SpawnSoundAttached");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, Sound) == 0x000000, "Member 'AtomStatics_SpawnSoundAttached::Sound' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, AttachToComponent) == 0x000008, "Member 'AtomStatics_SpawnSoundAttached::AttachToComponent' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, AttachPointName) == 0x000010, "Member 'AtomStatics_SpawnSoundAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, Location) == 0x000018, "Member 'AtomStatics_SpawnSoundAttached::Location' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, Rotation) == 0x000024, "Member 'AtomStatics_SpawnSoundAttached::Rotation' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, LocationType) == 0x000030, "Member 'AtomStatics_SpawnSoundAttached::LocationType' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, bStopWhenAttachedToDestroyed) == 0x000031, "Member 'AtomStatics_SpawnSoundAttached::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, VolumeMultiplier) == 0x000034, "Member 'AtomStatics_SpawnSoundAttached::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, PitchMultiplier) == 0x000038, "Member 'AtomStatics_SpawnSoundAttached::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, StartTime) == 0x00003C, "Member 'AtomStatics_SpawnSoundAttached::StartTime' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, AttenuationSettings) == 0x000040, "Member 'AtomStatics_SpawnSoundAttached::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, ConcurrencySettings) == 0x000048, "Member 'AtomStatics_SpawnSoundAttached::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, bAutoDestroy) == 0x000050, "Member 'AtomStatics_SpawnSoundAttached::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, ReturnValue) == 0x000058, "Member 'AtomStatics_SpawnSoundAttached::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomTriggerTableFunctionLibrary.GetDataTableRowFromName
// 0x0038 (0x0038 - 0x0000)
struct AtomTriggerTableFunctionLibrary_GetDataTableRowFromName final
{
public:
	class UDataTable*                             Table;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RowName;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtomTriggerRow                        OutRow;                                            // 0x0010(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomTriggerTableFunctionLibrary_GetDataTableRowFromName) == 0x000008, "Wrong alignment on AtomTriggerTableFunctionLibrary_GetDataTableRowFromName");
static_assert(sizeof(AtomTriggerTableFunctionLibrary_GetDataTableRowFromName) == 0x000038, "Wrong size on AtomTriggerTableFunctionLibrary_GetDataTableRowFromName");
static_assert(offsetof(AtomTriggerTableFunctionLibrary_GetDataTableRowFromName, Table) == 0x000000, "Member 'AtomTriggerTableFunctionLibrary_GetDataTableRowFromName::Table' has a wrong offset!");
static_assert(offsetof(AtomTriggerTableFunctionLibrary_GetDataTableRowFromName, RowName) == 0x000008, "Member 'AtomTriggerTableFunctionLibrary_GetDataTableRowFromName::RowName' has a wrong offset!");
static_assert(offsetof(AtomTriggerTableFunctionLibrary_GetDataTableRowFromName, OutRow) == 0x000010, "Member 'AtomTriggerTableFunctionLibrary_GetDataTableRowFromName::OutRow' has a wrong offset!");
static_assert(offsetof(AtomTriggerTableFunctionLibrary_GetDataTableRowFromName, ReturnValue) == 0x000030, "Member 'AtomTriggerTableFunctionLibrary_GetDataTableRowFromName::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.CriFsLoaderComponent.GetDataArray
// 0x0010 (0x0010 - 0x0000)
struct CriFsLoaderComponent_GetDataArray final
{
public:
	TArray<uint8>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CriFsLoaderComponent_GetDataArray) == 0x000008, "Wrong alignment on CriFsLoaderComponent_GetDataArray");
static_assert(sizeof(CriFsLoaderComponent_GetDataArray) == 0x000010, "Wrong size on CriFsLoaderComponent_GetDataArray");
static_assert(offsetof(CriFsLoaderComponent_GetDataArray, ReturnValue) == 0x000000, "Member 'CriFsLoaderComponent_GetDataArray::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.CriFsLoaderComponent.GetStatus
// 0x0001 (0x0001 - 0x0000)
struct CriFsLoaderComponent_GetStatus final
{
public:
	ECriFsLoaderStatus                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CriFsLoaderComponent_GetStatus) == 0x000001, "Wrong alignment on CriFsLoaderComponent_GetStatus");
static_assert(sizeof(CriFsLoaderComponent_GetStatus) == 0x000001, "Wrong size on CriFsLoaderComponent_GetStatus");
static_assert(offsetof(CriFsLoaderComponent_GetStatus, ReturnValue) == 0x000000, "Member 'CriFsLoaderComponent_GetStatus::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.CriWareFunctionLibrary.SetGameVariableByName
// 0x0018 (0x0018 - 0x0000)
struct CriWareFunctionLibrary_SetGameVariableByName final
{
public:
	class FString                                 GameVariableName;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CriWareFunctionLibrary_SetGameVariableByName) == 0x000008, "Wrong alignment on CriWareFunctionLibrary_SetGameVariableByName");
static_assert(sizeof(CriWareFunctionLibrary_SetGameVariableByName) == 0x000018, "Wrong size on CriWareFunctionLibrary_SetGameVariableByName");
static_assert(offsetof(CriWareFunctionLibrary_SetGameVariableByName, GameVariableName) == 0x000000, "Member 'CriWareFunctionLibrary_SetGameVariableByName::GameVariableName' has a wrong offset!");
static_assert(offsetof(CriWareFunctionLibrary_SetGameVariableByName, Value) == 0x000010, "Member 'CriWareFunctionLibrary_SetGameVariableByName::Value' has a wrong offset!");

// Function CriWareRuntime.CriWareFunctionLibrary.SetGlobalLabelToSelectorByName
// 0x0020 (0x0020 - 0x0000)
struct CriWareFunctionLibrary_SetGlobalLabelToSelectorByName final
{
public:
	class FString                                 SelectorName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LabelName;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CriWareFunctionLibrary_SetGlobalLabelToSelectorByName) == 0x000008, "Wrong alignment on CriWareFunctionLibrary_SetGlobalLabelToSelectorByName");
static_assert(sizeof(CriWareFunctionLibrary_SetGlobalLabelToSelectorByName) == 0x000020, "Wrong size on CriWareFunctionLibrary_SetGlobalLabelToSelectorByName");
static_assert(offsetof(CriWareFunctionLibrary_SetGlobalLabelToSelectorByName, SelectorName) == 0x000000, "Member 'CriWareFunctionLibrary_SetGlobalLabelToSelectorByName::SelectorName' has a wrong offset!");
static_assert(offsetof(CriWareFunctionLibrary_SetGlobalLabelToSelectorByName, LabelName) == 0x000010, "Member 'CriWareFunctionLibrary_SetGlobalLabelToSelectorByName::LabelName' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.ChangeSubtitlesChannel
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_ChangeSubtitlesChannel final
{
public:
	int32                                         Channel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_ChangeSubtitlesChannel) == 0x000004, "Wrong alignment on ManaComponent_ChangeSubtitlesChannel");
static_assert(sizeof(ManaComponent_ChangeSubtitlesChannel) == 0x000004, "Wrong size on ManaComponent_ChangeSubtitlesChannel");
static_assert(offsetof(ManaComponent_ChangeSubtitlesChannel, Channel) == 0x000000, "Member 'ManaComponent_ChangeSubtitlesChannel::Channel' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.EnableSeamless
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_EnableSeamless final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_EnableSeamless) == 0x000001, "Wrong alignment on ManaComponent_EnableSeamless");
static_assert(sizeof(ManaComponent_EnableSeamless) == 0x000001, "Wrong size on ManaComponent_EnableSeamless");
static_assert(offsetof(ManaComponent_EnableSeamless, bEnable) == 0x000000, "Member 'ManaComponent_EnableSeamless::bEnable' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.EnableSubtitles
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_EnableSubtitles final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_EnableSubtitles) == 0x000001, "Wrong alignment on ManaComponent_EnableSubtitles");
static_assert(sizeof(ManaComponent_EnableSubtitles) == 0x000001, "Wrong size on ManaComponent_EnableSubtitles");
static_assert(offsetof(ManaComponent_EnableSubtitles, bEnable) == 0x000000, "Member 'ManaComponent_EnableSubtitles::bEnable' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.GetFrameNumber
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_GetFrameNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_GetFrameNumber) == 0x000004, "Wrong alignment on ManaComponent_GetFrameNumber");
static_assert(sizeof(ManaComponent_GetFrameNumber) == 0x000004, "Wrong size on ManaComponent_GetFrameNumber");
static_assert(offsetof(ManaComponent_GetFrameNumber, ReturnValue) == 0x000000, "Member 'ManaComponent_GetFrameNumber::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.GetSource
// 0x0008 (0x0008 - 0x0000)
struct ManaComponent_GetSource final
{
public:
	class UManaMovie*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_GetSource) == 0x000008, "Wrong alignment on ManaComponent_GetSource");
static_assert(sizeof(ManaComponent_GetSource) == 0x000008, "Wrong size on ManaComponent_GetSource");
static_assert(offsetof(ManaComponent_GetSource, ReturnValue) == 0x000000, "Member 'ManaComponent_GetSource::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.GetStatus
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_GetStatus final
{
public:
	EManaComponentStatus                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_GetStatus) == 0x000001, "Wrong alignment on ManaComponent_GetStatus");
static_assert(sizeof(ManaComponent_GetStatus) == 0x000001, "Wrong size on ManaComponent_GetStatus");
static_assert(offsetof(ManaComponent_GetStatus, ReturnValue) == 0x000000, "Member 'ManaComponent_GetStatus::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.GetSubVolume
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_GetSubVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_GetSubVolume) == 0x000004, "Wrong alignment on ManaComponent_GetSubVolume");
static_assert(sizeof(ManaComponent_GetSubVolume) == 0x000004, "Wrong size on ManaComponent_GetSubVolume");
static_assert(offsetof(ManaComponent_GetSubVolume, ReturnValue) == 0x000000, "Member 'ManaComponent_GetSubVolume::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.GetTexture
// 0x0008 (0x0008 - 0x0000)
struct ManaComponent_GetTexture final
{
public:
	class UManaTexture*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_GetTexture) == 0x000008, "Wrong alignment on ManaComponent_GetTexture");
static_assert(sizeof(ManaComponent_GetTexture) == 0x000008, "Wrong size on ManaComponent_GetTexture");
static_assert(offsetof(ManaComponent_GetTexture, ReturnValue) == 0x000000, "Member 'ManaComponent_GetTexture::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.GetTime
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_GetTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_GetTime) == 0x000004, "Wrong alignment on ManaComponent_GetTime");
static_assert(sizeof(ManaComponent_GetTime) == 0x000004, "Wrong size on ManaComponent_GetTime");
static_assert(offsetof(ManaComponent_GetTime, ReturnValue) == 0x000000, "Member 'ManaComponent_GetTime::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.GetVideoFrame
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_GetVideoFrame final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_GetVideoFrame) == 0x000004, "Wrong alignment on ManaComponent_GetVideoFrame");
static_assert(sizeof(ManaComponent_GetVideoFrame) == 0x000004, "Wrong size on ManaComponent_GetVideoFrame");
static_assert(offsetof(ManaComponent_GetVideoFrame, ReturnValue) == 0x000000, "Member 'ManaComponent_GetVideoFrame::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.GetVolume
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_GetVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_GetVolume) == 0x000004, "Wrong alignment on ManaComponent_GetVolume");
static_assert(sizeof(ManaComponent_GetVolume) == 0x000004, "Wrong size on ManaComponent_GetVolume");
static_assert(offsetof(ManaComponent_GetVolume, ReturnValue) == 0x000000, "Member 'ManaComponent_GetVolume::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.Next
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_Next final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_Next) == 0x000001, "Wrong alignment on ManaComponent_Next");
static_assert(sizeof(ManaComponent_Next) == 0x000001, "Wrong size on ManaComponent_Next");
static_assert(offsetof(ManaComponent_Next, ReturnValue) == 0x000000, "Member 'ManaComponent_Next::ReturnValue' has a wrong offset!");

// DelegateFunction CriWareRuntime.ManaComponent.OnEventPoint__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct ManaComponent_OnEventPoint__DelegateSignature final
{
public:
	struct FManaEventPointInfo                    EventPointInfo;                                    // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_OnEventPoint__DelegateSignature) == 0x000008, "Wrong alignment on ManaComponent_OnEventPoint__DelegateSignature");
static_assert(sizeof(ManaComponent_OnEventPoint__DelegateSignature) == 0x000028, "Wrong size on ManaComponent_OnEventPoint__DelegateSignature");
static_assert(offsetof(ManaComponent_OnEventPoint__DelegateSignature, EventPointInfo) == 0x000000, "Member 'ManaComponent_OnEventPoint__DelegateSignature::EventPointInfo' has a wrong offset!");

// DelegateFunction CriWareRuntime.ManaComponent.OnRequestData__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ManaComponent_OnRequestData__DelegateSignature final
{
public:
	class UManaComponent*                         ManaComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_OnRequestData__DelegateSignature) == 0x000008, "Wrong alignment on ManaComponent_OnRequestData__DelegateSignature");
static_assert(sizeof(ManaComponent_OnRequestData__DelegateSignature) == 0x000008, "Wrong size on ManaComponent_OnRequestData__DelegateSignature");
static_assert(offsetof(ManaComponent_OnRequestData__DelegateSignature, ManaComponent) == 0x000000, "Member 'ManaComponent_OnRequestData__DelegateSignature::ManaComponent' has a wrong offset!");

// DelegateFunction CriWareRuntime.ManaComponent.OnStatusChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct ManaComponent_OnStatusChanged__DelegateSignature final
{
public:
	EManaComponentStatus                          Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaComponent*                         ManaComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_OnStatusChanged__DelegateSignature) == 0x000008, "Wrong alignment on ManaComponent_OnStatusChanged__DelegateSignature");
static_assert(sizeof(ManaComponent_OnStatusChanged__DelegateSignature) == 0x000010, "Wrong size on ManaComponent_OnStatusChanged__DelegateSignature");
static_assert(offsetof(ManaComponent_OnStatusChanged__DelegateSignature, Status) == 0x000000, "Member 'ManaComponent_OnStatusChanged__DelegateSignature::Status' has a wrong offset!");
static_assert(offsetof(ManaComponent_OnStatusChanged__DelegateSignature, ManaComponent) == 0x000008, "Member 'ManaComponent_OnStatusChanged__DelegateSignature::ManaComponent' has a wrong offset!");

// DelegateFunction CriWareRuntime.ManaComponent.OnSubtitleChanged__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct ManaComponent_OnSubtitleChanged__DelegateSignature final
{
public:
	class FText                                   Subtitle;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_OnSubtitleChanged__DelegateSignature) == 0x000008, "Wrong alignment on ManaComponent_OnSubtitleChanged__DelegateSignature");
static_assert(sizeof(ManaComponent_OnSubtitleChanged__DelegateSignature) == 0x000018, "Wrong size on ManaComponent_OnSubtitleChanged__DelegateSignature");
static_assert(offsetof(ManaComponent_OnSubtitleChanged__DelegateSignature, Subtitle) == 0x000000, "Member 'ManaComponent_OnSubtitleChanged__DelegateSignature::Subtitle' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.Pause
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_Pause final
{
public:
	bool                                          bPause;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_Pause) == 0x000001, "Wrong alignment on ManaComponent_Pause");
static_assert(sizeof(ManaComponent_Pause) == 0x000001, "Wrong size on ManaComponent_Pause");
static_assert(offsetof(ManaComponent_Pause, bPause) == 0x000000, "Member 'ManaComponent_Pause::bPause' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.PreparePlaylistIndex
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_PreparePlaylistIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_PreparePlaylistIndex) == 0x000004, "Wrong alignment on ManaComponent_PreparePlaylistIndex");
static_assert(sizeof(ManaComponent_PreparePlaylistIndex) == 0x000004, "Wrong size on ManaComponent_PreparePlaylistIndex");
static_assert(offsetof(ManaComponent_PreparePlaylistIndex, Index_0) == 0x000000, "Member 'ManaComponent_PreparePlaylistIndex::Index_0' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.Previous
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_Previous final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_Previous) == 0x000001, "Wrong alignment on ManaComponent_Previous");
static_assert(sizeof(ManaComponent_Previous) == 0x000001, "Wrong size on ManaComponent_Previous");
static_assert(offsetof(ManaComponent_Previous, ReturnValue) == 0x000000, "Member 'ManaComponent_Previous::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.SeekToPosition
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_SeekToPosition final
{
public:
	int32                                         FrameNumber;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_SeekToPosition) == 0x000004, "Wrong alignment on ManaComponent_SeekToPosition");
static_assert(sizeof(ManaComponent_SeekToPosition) == 0x000004, "Wrong size on ManaComponent_SeekToPosition");
static_assert(offsetof(ManaComponent_SeekToPosition, FrameNumber) == 0x000000, "Member 'ManaComponent_SeekToPosition::FrameNumber' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.SetCachedData
// 0x0010 (0x0010 - 0x0000)
struct ManaComponent_SetCachedData final
{
public:
	TArray<uint8>                                 DataArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_SetCachedData) == 0x000008, "Wrong alignment on ManaComponent_SetCachedData");
static_assert(sizeof(ManaComponent_SetCachedData) == 0x000010, "Wrong size on ManaComponent_SetCachedData");
static_assert(offsetof(ManaComponent_SetCachedData, DataArray) == 0x000000, "Member 'ManaComponent_SetCachedData::DataArray' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.SetFile
// 0x0010 (0x0010 - 0x0000)
struct ManaComponent_SetFile final
{
public:
	class FString                                 MovieFilePath;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_SetFile) == 0x000008, "Wrong alignment on ManaComponent_SetFile");
static_assert(sizeof(ManaComponent_SetFile) == 0x000010, "Wrong size on ManaComponent_SetFile");
static_assert(offsetof(ManaComponent_SetFile, MovieFilePath) == 0x000000, "Member 'ManaComponent_SetFile::MovieFilePath' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.SetSubVolume
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_SetSubVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_SetSubVolume) == 0x000004, "Wrong alignment on ManaComponent_SetSubVolume");
static_assert(sizeof(ManaComponent_SetSubVolume) == 0x000004, "Wrong size on ManaComponent_SetSubVolume");
static_assert(offsetof(ManaComponent_SetSubVolume, Volume) == 0x000000, "Member 'ManaComponent_SetSubVolume::Volume' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.SetTexture
// 0x0008 (0x0008 - 0x0000)
struct ManaComponent_SetTexture final
{
public:
	class UManaTexture*                           Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_SetTexture) == 0x000008, "Wrong alignment on ManaComponent_SetTexture");
static_assert(sizeof(ManaComponent_SetTexture) == 0x000008, "Wrong size on ManaComponent_SetTexture");
static_assert(offsetof(ManaComponent_SetTexture, Texture) == 0x000000, "Member 'ManaComponent_SetTexture::Texture' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.SetVolume
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_SetVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_SetVolume) == 0x000004, "Wrong alignment on ManaComponent_SetVolume");
static_assert(sizeof(ManaComponent_SetVolume) == 0x000004, "Wrong size on ManaComponent_SetVolume");
static_assert(offsetof(ManaComponent_SetVolume, Volume) == 0x000000, "Member 'ManaComponent_SetVolume::Volume' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.ToIndex
// 0x0008 (0x0008 - 0x0000)
struct ManaComponent_ToIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ManaComponent_ToIndex) == 0x000004, "Wrong alignment on ManaComponent_ToIndex");
static_assert(sizeof(ManaComponent_ToIndex) == 0x000008, "Wrong size on ManaComponent_ToIndex");
static_assert(offsetof(ManaComponent_ToIndex, Index_0) == 0x000000, "Member 'ManaComponent_ToIndex::Index_0' has a wrong offset!");
static_assert(offsetof(ManaComponent_ToIndex, ReturnValue) == 0x000004, "Member 'ManaComponent_ToIndex::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.IsLooping
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_IsLooping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_IsLooping) == 0x000001, "Wrong alignment on ManaComponent_IsLooping");
static_assert(sizeof(ManaComponent_IsLooping) == 0x000001, "Wrong size on ManaComponent_IsLooping");
static_assert(offsetof(ManaComponent_IsLooping, ReturnValue) == 0x000000, "Member 'ManaComponent_IsLooping::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.IsPaused
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_IsPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_IsPaused) == 0x000001, "Wrong alignment on ManaComponent_IsPaused");
static_assert(sizeof(ManaComponent_IsPaused) == 0x000001, "Wrong size on ManaComponent_IsPaused");
static_assert(offsetof(ManaComponent_IsPaused, ReturnValue) == 0x000000, "Member 'ManaComponent_IsPaused::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_IsPlaying) == 0x000001, "Wrong alignment on ManaComponent_IsPlaying");
static_assert(sizeof(ManaComponent_IsPlaying) == 0x000001, "Wrong size on ManaComponent_IsPlaying");
static_assert(offsetof(ManaComponent_IsPlaying, ReturnValue) == 0x000000, "Member 'ManaComponent_IsPlaying::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.IsPreparing
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_IsPreparing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_IsPreparing) == 0x000001, "Wrong alignment on ManaComponent_IsPreparing");
static_assert(sizeof(ManaComponent_IsPreparing) == 0x000001, "Wrong size on ManaComponent_IsPreparing");
static_assert(offsetof(ManaComponent_IsPreparing, ReturnValue) == 0x000000, "Member 'ManaComponent_IsPreparing::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.IsReady
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_IsReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_IsReady) == 0x000001, "Wrong alignment on ManaComponent_IsReady");
static_assert(sizeof(ManaComponent_IsReady) == 0x000001, "Wrong size on ManaComponent_IsReady");
static_assert(offsetof(ManaComponent_IsReady, ReturnValue) == 0x000000, "Member 'ManaComponent_IsReady::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.FileManaMovie.SetFilePath
// 0x0010 (0x0010 - 0x0000)
struct FileManaMovie_SetFilePath final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileManaMovie_SetFilePath) == 0x000008, "Wrong alignment on FileManaMovie_SetFilePath");
static_assert(sizeof(FileManaMovie_SetFilePath) == 0x000010, "Wrong size on FileManaMovie_SetFilePath");
static_assert(offsetof(FileManaMovie_SetFilePath, Path) == 0x000000, "Member 'FileManaMovie_SetFilePath::Path' has a wrong offset!");

// Function CriWareRuntime.DataManaMovie.GetDataArray
// 0x0010 (0x0010 - 0x0000)
struct DataManaMovie_GetDataArray final
{
public:
	TArray<uint8>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataManaMovie_GetDataArray) == 0x000008, "Wrong alignment on DataManaMovie_GetDataArray");
static_assert(sizeof(DataManaMovie_GetDataArray) == 0x000010, "Wrong size on DataManaMovie_GetDataArray");
static_assert(offsetof(DataManaMovie_GetDataArray, ReturnValue) == 0x000000, "Member 'DataManaMovie_GetDataArray::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.DataManaMovie.SetDataArray
// 0x0010 (0x0010 - 0x0000)
struct DataManaMovie_SetDataArray final
{
public:
	TArray<uint8>                                 InDataArray;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataManaMovie_SetDataArray) == 0x000008, "Wrong alignment on DataManaMovie_SetDataArray");
static_assert(sizeof(DataManaMovie_SetDataArray) == 0x000010, "Wrong size on DataManaMovie_SetDataArray");
static_assert(offsetof(DataManaMovie_SetDataArray, InDataArray) == 0x000000, "Member 'DataManaMovie_SetDataArray::InDataArray' has a wrong offset!");

// Function CriWareRuntime.ManaPlaylist.Add
// 0x0008 (0x0008 - 0x0000)
struct ManaPlaylist_Add final
{
public:
	class UManaMovie*                             ManaMovie;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlaylist_Add) == 0x000008, "Wrong alignment on ManaPlaylist_Add");
static_assert(sizeof(ManaPlaylist_Add) == 0x000008, "Wrong size on ManaPlaylist_Add");
static_assert(offsetof(ManaPlaylist_Add, ManaMovie) == 0x000000, "Member 'ManaPlaylist_Add::ManaMovie' has a wrong offset!");

// Function CriWareRuntime.ManaPlaylist.Get
// 0x0010 (0x0010 - 0x0000)
struct ManaPlaylist_Get final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaMovie*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlaylist_Get) == 0x000008, "Wrong alignment on ManaPlaylist_Get");
static_assert(sizeof(ManaPlaylist_Get) == 0x000010, "Wrong size on ManaPlaylist_Get");
static_assert(offsetof(ManaPlaylist_Get, Index_0) == 0x000000, "Member 'ManaPlaylist_Get::Index_0' has a wrong offset!");
static_assert(offsetof(ManaPlaylist_Get, ReturnValue) == 0x000008, "Member 'ManaPlaylist_Get::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlaylist.GetNext
// 0x0010 (0x0010 - 0x0000)
struct ManaPlaylist_GetNext final
{
public:
	int32                                         InOutIndex;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaMovie*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlaylist_GetNext) == 0x000008, "Wrong alignment on ManaPlaylist_GetNext");
static_assert(sizeof(ManaPlaylist_GetNext) == 0x000010, "Wrong size on ManaPlaylist_GetNext");
static_assert(offsetof(ManaPlaylist_GetNext, InOutIndex) == 0x000000, "Member 'ManaPlaylist_GetNext::InOutIndex' has a wrong offset!");
static_assert(offsetof(ManaPlaylist_GetNext, ReturnValue) == 0x000008, "Member 'ManaPlaylist_GetNext::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlaylist.GetPrevious
// 0x0010 (0x0010 - 0x0000)
struct ManaPlaylist_GetPrevious final
{
public:
	int32                                         InOutIndex;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaMovie*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlaylist_GetPrevious) == 0x000008, "Wrong alignment on ManaPlaylist_GetPrevious");
static_assert(sizeof(ManaPlaylist_GetPrevious) == 0x000010, "Wrong size on ManaPlaylist_GetPrevious");
static_assert(offsetof(ManaPlaylist_GetPrevious, InOutIndex) == 0x000000, "Member 'ManaPlaylist_GetPrevious::InOutIndex' has a wrong offset!");
static_assert(offsetof(ManaPlaylist_GetPrevious, ReturnValue) == 0x000008, "Member 'ManaPlaylist_GetPrevious::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlaylist.GetRandom
// 0x0010 (0x0010 - 0x0000)
struct ManaPlaylist_GetRandom final
{
public:
	int32                                         InOutIndex;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaMovie*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlaylist_GetRandom) == 0x000008, "Wrong alignment on ManaPlaylist_GetRandom");
static_assert(sizeof(ManaPlaylist_GetRandom) == 0x000010, "Wrong size on ManaPlaylist_GetRandom");
static_assert(offsetof(ManaPlaylist_GetRandom, InOutIndex) == 0x000000, "Member 'ManaPlaylist_GetRandom::InOutIndex' has a wrong offset!");
static_assert(offsetof(ManaPlaylist_GetRandom, ReturnValue) == 0x000008, "Member 'ManaPlaylist_GetRandom::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlaylist.Insert
// 0x0010 (0x0010 - 0x0000)
struct ManaPlaylist_Insert final
{
public:
	class UManaMovie*                             ManaMovie;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ManaPlaylist_Insert) == 0x000008, "Wrong alignment on ManaPlaylist_Insert");
static_assert(sizeof(ManaPlaylist_Insert) == 0x000010, "Wrong size on ManaPlaylist_Insert");
static_assert(offsetof(ManaPlaylist_Insert, ManaMovie) == 0x000000, "Member 'ManaPlaylist_Insert::ManaMovie' has a wrong offset!");
static_assert(offsetof(ManaPlaylist_Insert, Index_0) == 0x000008, "Member 'ManaPlaylist_Insert::Index_0' has a wrong offset!");

// Function CriWareRuntime.ManaPlaylist.IsAlpha
// 0x0001 (0x0001 - 0x0000)
struct ManaPlaylist_IsAlpha final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlaylist_IsAlpha) == 0x000001, "Wrong alignment on ManaPlaylist_IsAlpha");
static_assert(sizeof(ManaPlaylist_IsAlpha) == 0x000001, "Wrong size on ManaPlaylist_IsAlpha");
static_assert(offsetof(ManaPlaylist_IsAlpha, ReturnValue) == 0x000000, "Member 'ManaPlaylist_IsAlpha::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlaylist.IsMixedTypes
// 0x0001 (0x0001 - 0x0000)
struct ManaPlaylist_IsMixedTypes final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlaylist_IsMixedTypes) == 0x000001, "Wrong alignment on ManaPlaylist_IsMixedTypes");
static_assert(sizeof(ManaPlaylist_IsMixedTypes) == 0x000001, "Wrong size on ManaPlaylist_IsMixedTypes");
static_assert(offsetof(ManaPlaylist_IsMixedTypes, ReturnValue) == 0x000000, "Member 'ManaPlaylist_IsMixedTypes::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlaylist.IsSeamless
// 0x0001 (0x0001 - 0x0000)
struct ManaPlaylist_IsSeamless final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlaylist_IsSeamless) == 0x000001, "Wrong alignment on ManaPlaylist_IsSeamless");
static_assert(sizeof(ManaPlaylist_IsSeamless) == 0x000001, "Wrong size on ManaPlaylist_IsSeamless");
static_assert(offsetof(ManaPlaylist_IsSeamless, ReturnValue) == 0x000000, "Member 'ManaPlaylist_IsSeamless::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlaylist.Num
// 0x0004 (0x0004 - 0x0000)
struct ManaPlaylist_Num final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlaylist_Num) == 0x000004, "Wrong alignment on ManaPlaylist_Num");
static_assert(sizeof(ManaPlaylist_Num) == 0x000004, "Wrong size on ManaPlaylist_Num");
static_assert(offsetof(ManaPlaylist_Num, ReturnValue) == 0x000000, "Member 'ManaPlaylist_Num::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlaylist.Remove
// 0x0008 (0x0008 - 0x0000)
struct ManaPlaylist_Remove final
{
public:
	class UManaMovie*                             ManaMovie;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlaylist_Remove) == 0x000008, "Wrong alignment on ManaPlaylist_Remove");
static_assert(sizeof(ManaPlaylist_Remove) == 0x000008, "Wrong size on ManaPlaylist_Remove");
static_assert(offsetof(ManaPlaylist_Remove, ManaMovie) == 0x000000, "Member 'ManaPlaylist_Remove::ManaMovie' has a wrong offset!");

// Function CriWareRuntime.ManaPlaylist.RemoveAt
// 0x0004 (0x0004 - 0x0000)
struct ManaPlaylist_RemoveAt final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlaylist_RemoveAt) == 0x000004, "Wrong alignment on ManaPlaylist_RemoveAt");
static_assert(sizeof(ManaPlaylist_RemoveAt) == 0x000004, "Wrong size on ManaPlaylist_RemoveAt");
static_assert(offsetof(ManaPlaylist_RemoveAt, Index_0) == 0x000000, "Member 'ManaPlaylist_RemoveAt::Index_0' has a wrong offset!");

// DelegateFunction CriWareRuntime.ManaTexture.OnTextureUpdated__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ManaTexture_OnTextureUpdated__DelegateSignature final
{
public:
	class UManaTexture*                           ManaTexture;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaTexture_OnTextureUpdated__DelegateSignature) == 0x000008, "Wrong alignment on ManaTexture_OnTextureUpdated__DelegateSignature");
static_assert(sizeof(ManaTexture_OnTextureUpdated__DelegateSignature) == 0x000008, "Wrong size on ManaTexture_OnTextureUpdated__DelegateSignature");
static_assert(offsetof(ManaTexture_OnTextureUpdated__DelegateSignature, ManaTexture) == 0x000000, "Member 'ManaTexture_OnTextureUpdated__DelegateSignature::ManaTexture' has a wrong offset!");

// Function CriWareRuntime.ManaTexture.SetMovieSource
// 0x0008 (0x0008 - 0x0000)
struct ManaTexture_SetMovieSource final
{
public:
	class UManaSource*                            InSource;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaTexture_SetMovieSource) == 0x000008, "Wrong alignment on ManaTexture_SetMovieSource");
static_assert(sizeof(ManaTexture_SetMovieSource) == 0x000008, "Wrong size on ManaTexture_SetMovieSource");
static_assert(offsetof(ManaTexture_SetMovieSource, InSource) == 0x000000, "Member 'ManaTexture_SetMovieSource::InSource' has a wrong offset!");

// Function CriWareRuntime.SoundAtomCue.GetLength
// 0x0004 (0x0004 - 0x0000)
struct SoundAtomCue_GetLength final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundAtomCue_GetLength) == 0x000004, "Wrong alignment on SoundAtomCue_GetLength");
static_assert(sizeof(SoundAtomCue_GetLength) == 0x000004, "Wrong size on SoundAtomCue_GetLength");
static_assert(offsetof(SoundAtomCue_GetLength, ReturnValue) == 0x000000, "Member 'SoundAtomCue_GetLength::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.SoundAtomCue.GetUserData
// 0x0010 (0x0010 - 0x0000)
struct SoundAtomCue_GetUserData final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundAtomCue_GetUserData) == 0x000008, "Wrong alignment on SoundAtomCue_GetUserData");
static_assert(sizeof(SoundAtomCue_GetUserData) == 0x000010, "Wrong size on SoundAtomCue_GetUserData");
static_assert(offsetof(SoundAtomCue_GetUserData, ReturnValue) == 0x000000, "Member 'SoundAtomCue_GetUserData::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.SoundAtomCueSheet.ApplyDspBusSnapshot
// 0x0018 (0x0018 - 0x0000)
struct SoundAtomCueSheet_ApplyDspBusSnapshot final
{
public:
	class FString                                 SnapshotName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Milliseconds;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundAtomCueSheet_ApplyDspBusSnapshot) == 0x000008, "Wrong alignment on SoundAtomCueSheet_ApplyDspBusSnapshot");
static_assert(sizeof(SoundAtomCueSheet_ApplyDspBusSnapshot) == 0x000018, "Wrong size on SoundAtomCueSheet_ApplyDspBusSnapshot");
static_assert(offsetof(SoundAtomCueSheet_ApplyDspBusSnapshot, SnapshotName) == 0x000000, "Member 'SoundAtomCueSheet_ApplyDspBusSnapshot::SnapshotName' has a wrong offset!");
static_assert(offsetof(SoundAtomCueSheet_ApplyDspBusSnapshot, Milliseconds) == 0x000010, "Member 'SoundAtomCueSheet_ApplyDspBusSnapshot::Milliseconds' has a wrong offset!");

// Function CriWareRuntime.SoundAtomCueSheet.AttachDspBusSetting
// 0x0010 (0x0010 - 0x0000)
struct SoundAtomCueSheet_AttachDspBusSetting final
{
public:
	class FString                                 SettingName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundAtomCueSheet_AttachDspBusSetting) == 0x000008, "Wrong alignment on SoundAtomCueSheet_AttachDspBusSetting");
static_assert(sizeof(SoundAtomCueSheet_AttachDspBusSetting) == 0x000010, "Wrong size on SoundAtomCueSheet_AttachDspBusSetting");
static_assert(offsetof(SoundAtomCueSheet_AttachDspBusSetting, SettingName) == 0x000000, "Member 'SoundAtomCueSheet_AttachDspBusSetting::SettingName' has a wrong offset!");

// Function CriWareRuntime.SoundAtomCueSheet.LoadAcb
// 0x0010 (0x0010 - 0x0000)
struct SoundAtomCueSheet_LoadAcb final
{
public:
	class FName                                   AcbName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCueSheet*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundAtomCueSheet_LoadAcb) == 0x000008, "Wrong alignment on SoundAtomCueSheet_LoadAcb");
static_assert(sizeof(SoundAtomCueSheet_LoadAcb) == 0x000010, "Wrong size on SoundAtomCueSheet_LoadAcb");
static_assert(offsetof(SoundAtomCueSheet_LoadAcb, AcbName) == 0x000000, "Member 'SoundAtomCueSheet_LoadAcb::AcbName' has a wrong offset!");
static_assert(offsetof(SoundAtomCueSheet_LoadAcb, ReturnValue) == 0x000008, "Member 'SoundAtomCueSheet_LoadAcb::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.SoundAtomCueSheet.ReleaseAcb
// 0x0008 (0x0008 - 0x0000)
struct SoundAtomCueSheet_ReleaseAcb final
{
public:
	class FName                                   AcbName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundAtomCueSheet_ReleaseAcb) == 0x000004, "Wrong alignment on SoundAtomCueSheet_ReleaseAcb");
static_assert(sizeof(SoundAtomCueSheet_ReleaseAcb) == 0x000008, "Wrong size on SoundAtomCueSheet_ReleaseAcb");
static_assert(offsetof(SoundAtomCueSheet_ReleaseAcb, AcbName) == 0x000000, "Member 'SoundAtomCueSheet_ReleaseAcb::AcbName' has a wrong offset!");

}

