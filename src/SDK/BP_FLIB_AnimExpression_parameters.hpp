#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FLIB_AnimExpression

#include "Basic.hpp"

#include "ENUM_CoordinateMeshSlot_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_RotAxis_structs.hpp"
#include "ENUM_HairBoneBlendSpaceCotrolMode_structs.hpp"
#include "JackAnimNodeRuntime_structs.hpp"
#include "STRUCT_SoftBoneChainSettings_structs.hpp"
#include "Engine_structs.hpp"
#include "STRUCT_MaxOrMinRot_structs.hpp"
#include "STRUCT_AnimExpInfo_structs.hpp"
#include "STRUCT_AnimExpressionBonesName_structs.hpp"


namespace SDK::Params
{

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.AddRotOffset
// 0x00A8 (0x00A8 - 0x0000)
struct BP_FLIB_AnimExpression_C_AddRotOffset final
{
public:
	class ACharacter*                             bpp__Character__pf;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__TargetBone__pf;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__TargetRot__pf;                                // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_AnimExpressionBonesName        bpp__AnimExpInfo__pf;                              // 0x0020(0x0070)(Parm, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__Result__pf;                                   // 0x0098(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_AnimExpression_C_AddRotOffset) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_AddRotOffset");
static_assert(sizeof(BP_FLIB_AnimExpression_C_AddRotOffset) == 0x0000A8, "Wrong size on BP_FLIB_AnimExpression_C_AddRotOffset");
static_assert(offsetof(BP_FLIB_AnimExpression_C_AddRotOffset, bpp__Character__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_AddRotOffset::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_AddRotOffset, bpp__TargetBone__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_AddRotOffset::bpp__TargetBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_AddRotOffset, bpp__TargetRot__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_AddRotOffset::bpp__TargetRot__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_AddRotOffset, bpp__AnimExpInfo__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_AddRotOffset::bpp__AnimExpInfo__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_AddRotOffset, bpp____WorldContext__pf) == 0x000090, "Member 'BP_FLIB_AnimExpression_C_AddRotOffset::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_AddRotOffset, bpp__Result__pf) == 0x000098, "Member 'BP_FLIB_AnimExpression_C_AddRotOffset::bpp__Result__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneA.Rot-BoneB.Rot
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_AnimExpression_C_BoneA_RotMinusBoneB_Rot final
{
public:
	class ACharacter*                             bpp__Character__pf;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneA__pf;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneB__pf;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__Result__pf;                                   // 0x0020(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_AnimExpression_C_BoneA_RotMinusBoneB_Rot) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_BoneA_RotMinusBoneB_Rot");
static_assert(sizeof(BP_FLIB_AnimExpression_C_BoneA_RotMinusBoneB_Rot) == 0x000030, "Wrong size on BP_FLIB_AnimExpression_C_BoneA_RotMinusBoneB_Rot");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneA_RotMinusBoneB_Rot, bpp__Character__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_BoneA_RotMinusBoneB_Rot::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneA_RotMinusBoneB_Rot, bpp__BoneA__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_BoneA_RotMinusBoneB_Rot::bpp__BoneA__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneA_RotMinusBoneB_Rot, bpp__BoneB__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_BoneA_RotMinusBoneB_Rot::bpp__BoneB__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneA_RotMinusBoneB_Rot, bpp____WorldContext__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_BoneA_RotMinusBoneB_Rot::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneA_RotMinusBoneB_Rot, bpp__Result__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_BoneA_RotMinusBoneB_Rot::bpp__Result__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneA.Rot+BoneB.Rot
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_AnimExpression_C_BoneA_RotPlusBoneB_Rot final
{
public:
	class ACharacter*                             bpp__Character__pf;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneA__pf;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneB__pf;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__Result__pf;                                   // 0x0020(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_AnimExpression_C_BoneA_RotPlusBoneB_Rot) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_BoneA_RotPlusBoneB_Rot");
static_assert(sizeof(BP_FLIB_AnimExpression_C_BoneA_RotPlusBoneB_Rot) == 0x000030, "Wrong size on BP_FLIB_AnimExpression_C_BoneA_RotPlusBoneB_Rot");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneA_RotPlusBoneB_Rot, bpp__Character__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_BoneA_RotPlusBoneB_Rot::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneA_RotPlusBoneB_Rot, bpp__BoneA__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_BoneA_RotPlusBoneB_Rot::bpp__BoneA__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneA_RotPlusBoneB_Rot, bpp__BoneB__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_BoneA_RotPlusBoneB_Rot::bpp__BoneB__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneA_RotPlusBoneB_Rot, bpp____WorldContext__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_BoneA_RotPlusBoneB_Rot::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneA_RotPlusBoneB_Rot, bpp__Result__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_BoneA_RotPlusBoneB_Rot::bpp__Result__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneEx8WayRot
// 0x0198 (0x0198 - 0x0000)
struct BP_FLIB_AnimExpression_C_BoneEx8WayRot final
{
public:
	bool                                          bpp__Enable__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             bpp__Character__pf;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__LeftThighBone__pf;                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__RightThighBone__pf;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__SouthBone__pf;                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__SouthWestBone__pf;                            // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__SouthWestWestRatio__pf;                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__WestBone__pf;                                 // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__NorthWestWestRatio__pf;                       // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__NorthWestLerpRatio__pf;                       // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__NorthBone__pf;                                // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__NorthEastLerpRatio__pf;                       // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__NorthEastEastRatio__pf;                       // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__EastBone__pf;                                 // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__SouthEastEastRatio__pf;                       // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__SouthEastBone__pf;                            // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__SouthSouthEastRatio__pf;                      // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_AnimExpressionBonesName        bpp__AnimExpInfo__pf;                              // 0x0078(0x0070)(Parm, NativeAccessSpecifierPublic)
	bool                                          bpp__Debug__pf;                                    // 0x00E8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x00F0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__South__pf;                                    // 0x00F8(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__SouthWest__pf;                                // 0x0104(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__SouthWestWest__pf;                            // 0x0110(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__West__pf;                                     // 0x011C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__NorthWestWest__pf;                            // 0x0128(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__NorthWest__pf;                                // 0x0134(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__North__pf;                                    // 0x0140(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__NorthEast__pf;                                // 0x014C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__NorthEastEast__pf;                            // 0x0158(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__East__pf;                                     // 0x0164(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__SouthEastEast__pf;                            // 0x0170(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__SouthEast__pf;                                // 0x017C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__SouthSouthEast__pf;                           // 0x0188(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_AnimExpression_C_BoneEx8WayRot) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_BoneEx8WayRot");
static_assert(sizeof(BP_FLIB_AnimExpression_C_BoneEx8WayRot) == 0x000198, "Wrong size on BP_FLIB_AnimExpression_C_BoneEx8WayRot");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__Enable__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__Enable__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__Character__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__LeftThighBone__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__LeftThighBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__RightThighBone__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__RightThighBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__SouthBone__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__SouthBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__SouthWestBone__pf) == 0x000028, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__SouthWestBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__SouthWestWestRatio__pf) == 0x000030, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__SouthWestWestRatio__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__WestBone__pf) == 0x000038, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__WestBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__NorthWestWestRatio__pf) == 0x000040, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__NorthWestWestRatio__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__NorthWestLerpRatio__pf) == 0x000044, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__NorthWestLerpRatio__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__NorthBone__pf) == 0x000048, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__NorthBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__NorthEastLerpRatio__pf) == 0x000050, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__NorthEastLerpRatio__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__NorthEastEastRatio__pf) == 0x000054, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__NorthEastEastRatio__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__EastBone__pf) == 0x000058, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__EastBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__SouthEastEastRatio__pf) == 0x000060, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__SouthEastEastRatio__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__SouthEastBone__pf) == 0x000068, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__SouthEastBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__SouthSouthEastRatio__pf) == 0x000070, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__SouthSouthEastRatio__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__AnimExpInfo__pf) == 0x000078, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__AnimExpInfo__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__Debug__pf) == 0x0000E8, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__Debug__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp____WorldContext__pf) == 0x0000F0, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__South__pf) == 0x0000F8, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__South__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__SouthWest__pf) == 0x000104, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__SouthWest__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__SouthWestWest__pf) == 0x000110, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__SouthWestWest__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__West__pf) == 0x00011C, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__West__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__NorthWestWest__pf) == 0x000128, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__NorthWestWest__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__NorthWest__pf) == 0x000134, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__NorthWest__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__North__pf) == 0x000140, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__North__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__NorthEast__pf) == 0x00014C, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__NorthEast__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__NorthEastEast__pf) == 0x000158, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__NorthEastEast__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__East__pf) == 0x000164, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__East__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__SouthEastEast__pf) == 0x000170, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__SouthEastEast__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__SouthEast__pf) == 0x00017C, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__SouthEast__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WayRot, bpp__SouthSouthEast__pf) == 0x000188, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WayRot::bpp__SouthSouthEast__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneEx8WaySwitchTrace
// 0x01A0 (0x01A0 - 0x0000)
struct BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace final
{
public:
	bool                                          bpp__Enable__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             bpp__Character__pf;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__LeftThighBone__pf;                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__RightThighBone__pf;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__SouthBone__pf;                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__SouthWestBone__pf;                            // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__SouthWestWestRatio__pf;                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__WestBone__pf;                                 // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__NorthWestWestRatio__pf;                       // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__NorthWestLerpRatio__pf;                       // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__NorthBone__pf;                                // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__NorthEastLerpRatio__pf;                       // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__NorthEastEastRatio__pf;                       // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__EastBone__pf;                                 // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__SouthEastEastRatio__pf;                       // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__SouthEastBone__pf;                            // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__SouthSouthEastRatio__pf;                      // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_AnimExpressionBonesName        bpp__AnimExpInfo__pf;                              // 0x0078(0x0070)(Parm, NativeAccessSpecifierPublic)
	bool                                          bpp__Debug__pf;                                    // 0x00E8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x00F0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__South__pf;                                    // 0x00F8(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__SouthWest__pf;                                // 0x0104(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__SouthWestWest__pf;                            // 0x0110(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__West__pf;                                     // 0x011C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__NorthWestWest__pf;                            // 0x0128(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__NorthWest__pf;                                // 0x0134(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__North__pf;                                    // 0x0140(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__NorthEast__pf;                                // 0x014C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__NorthEastEast__pf;                            // 0x0158(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__East__pf;                                     // 0x0164(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__SouthEastEast__pf;                            // 0x0170(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__SouthEast__pf;                                // 0x017C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__SouthSouthEast__pf;                           // 0x0188(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkinnedMeshComponent*                  bpp__OutputPin__pf;                                // 0x0198(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace");
static_assert(sizeof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace) == 0x0001A0, "Wrong size on BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__Enable__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__Enable__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__Character__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__LeftThighBone__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__LeftThighBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__RightThighBone__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__RightThighBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__SouthBone__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__SouthBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__SouthWestBone__pf) == 0x000028, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__SouthWestBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__SouthWestWestRatio__pf) == 0x000030, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__SouthWestWestRatio__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__WestBone__pf) == 0x000038, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__WestBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__NorthWestWestRatio__pf) == 0x000040, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__NorthWestWestRatio__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__NorthWestLerpRatio__pf) == 0x000044, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__NorthWestLerpRatio__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__NorthBone__pf) == 0x000048, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__NorthBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__NorthEastLerpRatio__pf) == 0x000050, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__NorthEastLerpRatio__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__NorthEastEastRatio__pf) == 0x000054, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__NorthEastEastRatio__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__EastBone__pf) == 0x000058, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__EastBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__SouthEastEastRatio__pf) == 0x000060, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__SouthEastEastRatio__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__SouthEastBone__pf) == 0x000068, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__SouthEastBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__SouthSouthEastRatio__pf) == 0x000070, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__SouthSouthEastRatio__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__AnimExpInfo__pf) == 0x000078, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__AnimExpInfo__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__Debug__pf) == 0x0000E8, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__Debug__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp____WorldContext__pf) == 0x0000F0, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__South__pf) == 0x0000F8, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__South__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__SouthWest__pf) == 0x000104, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__SouthWest__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__SouthWestWest__pf) == 0x000110, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__SouthWestWest__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__West__pf) == 0x00011C, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__West__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__NorthWestWest__pf) == 0x000128, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__NorthWestWest__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__NorthWest__pf) == 0x000134, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__NorthWest__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__North__pf) == 0x000140, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__North__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__NorthEast__pf) == 0x00014C, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__NorthEast__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__NorthEastEast__pf) == 0x000158, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__NorthEastEast__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__East__pf) == 0x000164, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__East__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__SouthEastEast__pf) == 0x000170, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__SouthEastEast__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__SouthEast__pf) == 0x00017C, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__SouthEast__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__SouthSouthEast__pf) == 0x000188, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__SouthSouthEast__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace, bpp__OutputPin__pf) == 0x000198, "Member 'BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace::bpp__OutputPin__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneExAimRot
// 0x00F0 (0x00F0 - 0x0000)
struct BP_FLIB_AnimExpression_C_BoneExAimRot final
{
public:
	bool                                          bpp__Enable__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__EnableAim__pf;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             bpp__Character__pf;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneA__pf;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneA_Child__pf;                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneB__pf;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneB_Child__pf;                              // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__X1__pf;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Y1__pf;                                       // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Z1__pf;                                       // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bpp__AimOffset__pf;                                // 0x003C(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__TargetBone__pf;                               // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_AnimExpressionBonesName        bpp__AnimExpInfo__pf;                              // 0x0050(0x0070)(Parm, NativeAccessSpecifierPublic)
	bool                                          bpp__bClampByPositiveRange__pf;                    // 0x00C0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_RotAxis                                  bpp__SelectClampAxis__pf;                          // 0x00C1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bExceptionClampRot__pf;                       // 0x00C2(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_CoordinateMeshSlot                       bpp__PartsSlot__pf;                                // 0x00C3(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bUseAimToCenterLocation__pf;                  // 0x00C4(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x00C8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__Result__pf;                                   // 0x00D0(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                bpp__Location__pf;                                 // 0x00DC(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bUsedTargetBone__pf;                          // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         bpp__Alpha__pf;                                    // 0x00EC(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_AnimExpression_C_BoneExAimRot) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_BoneExAimRot");
static_assert(sizeof(BP_FLIB_AnimExpression_C_BoneExAimRot) == 0x0000F0, "Wrong size on BP_FLIB_AnimExpression_C_BoneExAimRot");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAimRot, bpp__Enable__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_BoneExAimRot::bpp__Enable__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAimRot, bpp__EnableAim__pf) == 0x000001, "Member 'BP_FLIB_AnimExpression_C_BoneExAimRot::bpp__EnableAim__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAimRot, bpp__Character__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_BoneExAimRot::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAimRot, bpp__BoneA__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_BoneExAimRot::bpp__BoneA__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAimRot, bpp__BoneA_Child__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_BoneExAimRot::bpp__BoneA_Child__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAimRot, bpp__BoneB__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_BoneExAimRot::bpp__BoneB__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAimRot, bpp__BoneB_Child__pf) == 0x000028, "Member 'BP_FLIB_AnimExpression_C_BoneExAimRot::bpp__BoneB_Child__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAimRot, bpp__X1__pf) == 0x000030, "Member 'BP_FLIB_AnimExpression_C_BoneExAimRot::bpp__X1__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAimRot, bpp__Y1__pf) == 0x000034, "Member 'BP_FLIB_AnimExpression_C_BoneExAimRot::bpp__Y1__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAimRot, bpp__Z1__pf) == 0x000038, "Member 'BP_FLIB_AnimExpression_C_BoneExAimRot::bpp__Z1__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAimRot, bpp__AimOffset__pf) == 0x00003C, "Member 'BP_FLIB_AnimExpression_C_BoneExAimRot::bpp__AimOffset__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAimRot, bpp__TargetBone__pf) == 0x000048, "Member 'BP_FLIB_AnimExpression_C_BoneExAimRot::bpp__TargetBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAimRot, bpp__AnimExpInfo__pf) == 0x000050, "Member 'BP_FLIB_AnimExpression_C_BoneExAimRot::bpp__AnimExpInfo__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAimRot, bpp__bClampByPositiveRange__pf) == 0x0000C0, "Member 'BP_FLIB_AnimExpression_C_BoneExAimRot::bpp__bClampByPositiveRange__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAimRot, bpp__SelectClampAxis__pf) == 0x0000C1, "Member 'BP_FLIB_AnimExpression_C_BoneExAimRot::bpp__SelectClampAxis__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAimRot, bpp__bExceptionClampRot__pf) == 0x0000C2, "Member 'BP_FLIB_AnimExpression_C_BoneExAimRot::bpp__bExceptionClampRot__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAimRot, bpp__PartsSlot__pf) == 0x0000C3, "Member 'BP_FLIB_AnimExpression_C_BoneExAimRot::bpp__PartsSlot__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAimRot, bpp__bUseAimToCenterLocation__pf) == 0x0000C4, "Member 'BP_FLIB_AnimExpression_C_BoneExAimRot::bpp__bUseAimToCenterLocation__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAimRot, bpp____WorldContext__pf) == 0x0000C8, "Member 'BP_FLIB_AnimExpression_C_BoneExAimRot::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAimRot, bpp__Result__pf) == 0x0000D0, "Member 'BP_FLIB_AnimExpression_C_BoneExAimRot::bpp__Result__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAimRot, bpp__Location__pf) == 0x0000DC, "Member 'BP_FLIB_AnimExpression_C_BoneExAimRot::bpp__Location__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAimRot, bpp__bUsedTargetBone__pf) == 0x0000E8, "Member 'BP_FLIB_AnimExpression_C_BoneExAimRot::bpp__bUsedTargetBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAimRot, bpp__Alpha__pf) == 0x0000EC, "Member 'BP_FLIB_AnimExpression_C_BoneExAimRot::bpp__Alpha__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneExAverageRot
// 0x00E8 (0x00E8 - 0x0000)
struct BP_FLIB_AnimExpression_C_BoneExAverageRot final
{
public:
	bool                                          bpp__Enable__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             bpp__Character__pf;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneA__pf;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneB__pf;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__X1__pf;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Y1__pf;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Z1__pf;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__TargetBone__pf;                               // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_AnimExpressionBonesName        bpp__AnimExpInfo__pf;                              // 0x0038(0x0070)(Parm, NativeAccessSpecifierPublic)
	ENUM_CoordinateMeshSlot                       bpp__MeshSlot__pf;                                 // 0x00A8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bUseClamp__pf;                                // 0x00A9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                bpp__ClampMin__pf;                                 // 0x00AC(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bpp__ClampMax__pf;                                 // 0x00B8(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bUseDataTable__pf;                            // 0x00C4(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__SkipRotOffset__pf;                            // 0x00C5(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x00C8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__Result__pf;                                   // 0x00D0(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bpp__bUsedTargetBone__pf;                          // 0x00DC(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         bpp__Alpha__pf;                                    // 0x00E0(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_AnimExpression_C_BoneExAverageRot) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_BoneExAverageRot");
static_assert(sizeof(BP_FLIB_AnimExpression_C_BoneExAverageRot) == 0x0000E8, "Wrong size on BP_FLIB_AnimExpression_C_BoneExAverageRot");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRot, bpp__Enable__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRot::bpp__Enable__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRot, bpp__Character__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRot::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRot, bpp__BoneA__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRot::bpp__BoneA__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRot, bpp__BoneB__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRot::bpp__BoneB__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRot, bpp__X1__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRot::bpp__X1__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRot, bpp__Y1__pf) == 0x000024, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRot::bpp__Y1__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRot, bpp__Z1__pf) == 0x000028, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRot::bpp__Z1__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRot, bpp__TargetBone__pf) == 0x000030, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRot::bpp__TargetBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRot, bpp__AnimExpInfo__pf) == 0x000038, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRot::bpp__AnimExpInfo__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRot, bpp__MeshSlot__pf) == 0x0000A8, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRot::bpp__MeshSlot__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRot, bpp__bUseClamp__pf) == 0x0000A9, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRot::bpp__bUseClamp__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRot, bpp__ClampMin__pf) == 0x0000AC, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRot::bpp__ClampMin__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRot, bpp__ClampMax__pf) == 0x0000B8, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRot::bpp__ClampMax__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRot, bpp__bUseDataTable__pf) == 0x0000C4, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRot::bpp__bUseDataTable__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRot, bpp__SkipRotOffset__pf) == 0x0000C5, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRot::bpp__SkipRotOffset__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRot, bpp____WorldContext__pf) == 0x0000C8, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRot::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRot, bpp__Result__pf) == 0x0000D0, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRot::bpp__Result__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRot, bpp__bUsedTargetBone__pf) == 0x0000DC, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRot::bpp__bUsedTargetBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRot, bpp__Alpha__pf) == 0x0000E0, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRot::bpp__Alpha__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneExAverageRotArray
// 0x00F8 (0x00F8 - 0x0000)
struct BP_FLIB_AnimExpression_C_BoneExAverageRotArray final
{
public:
	bool                                          bpp__Enable__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             bpp__Character__pf;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneA__pf;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneB__pf;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__X1__pf;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Y1__pf;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Z1__pf;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           bpp__TargetBone__pf;                               // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSTRUCT_AnimExpressionBonesName        bpp__AnimExpInfo__pf;                              // 0x0040(0x0070)(Parm, NativeAccessSpecifierPublic)
	ENUM_CoordinateMeshSlot                       bpp__MeshSlot__pf;                                 // 0x00B0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bClamp__pf;                                   // 0x00B1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x2];                                       // 0x00B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                bpp__ClampMin__pf;                                 // 0x00B4(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bpp__ClampMax__pf;                                 // 0x00C0(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__SkipRotOffset__pf;                            // 0x00CC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x00D0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__Result__pf;                                   // 0x00D8(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bpp__bUsedTargetBone__pf;                          // 0x00E4(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__TargetBoneName__pf;                           // 0x00E8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Alpha__pf;                                    // 0x00F0(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_AnimExpression_C_BoneExAverageRotArray) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_BoneExAverageRotArray");
static_assert(sizeof(BP_FLIB_AnimExpression_C_BoneExAverageRotArray) == 0x0000F8, "Wrong size on BP_FLIB_AnimExpression_C_BoneExAverageRotArray");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRotArray, bpp__Enable__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRotArray::bpp__Enable__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRotArray, bpp__Character__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRotArray::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRotArray, bpp__BoneA__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRotArray::bpp__BoneA__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRotArray, bpp__BoneB__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRotArray::bpp__BoneB__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRotArray, bpp__X1__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRotArray::bpp__X1__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRotArray, bpp__Y1__pf) == 0x000024, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRotArray::bpp__Y1__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRotArray, bpp__Z1__pf) == 0x000028, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRotArray::bpp__Z1__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRotArray, bpp__TargetBone__pf) == 0x000030, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRotArray::bpp__TargetBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRotArray, bpp__AnimExpInfo__pf) == 0x000040, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRotArray::bpp__AnimExpInfo__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRotArray, bpp__MeshSlot__pf) == 0x0000B0, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRotArray::bpp__MeshSlot__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRotArray, bpp__bClamp__pf) == 0x0000B1, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRotArray::bpp__bClamp__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRotArray, bpp__ClampMin__pf) == 0x0000B4, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRotArray::bpp__ClampMin__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRotArray, bpp__ClampMax__pf) == 0x0000C0, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRotArray::bpp__ClampMax__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRotArray, bpp__SkipRotOffset__pf) == 0x0000CC, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRotArray::bpp__SkipRotOffset__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRotArray, bpp____WorldContext__pf) == 0x0000D0, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRotArray::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRotArray, bpp__Result__pf) == 0x0000D8, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRotArray::bpp__Result__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRotArray, bpp__bUsedTargetBone__pf) == 0x0000E4, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRotArray::bpp__bUsedTargetBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRotArray, bpp__TargetBoneName__pf) == 0x0000E8, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRotArray::bpp__TargetBoneName__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExAverageRotArray, bpp__Alpha__pf) == 0x0000F0, "Member 'BP_FLIB_AnimExpression_C_BoneExAverageRotArray::bpp__Alpha__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneExCollideSkirtAlpha
// 0x0038 (0x0038 - 0x0000)
struct BP_FLIB_AnimExpression_C_BoneExCollideSkirtAlpha final
{
public:
	class ACharacter*                             bpp__Character__pf;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__UpLegBone__pf;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__LegBone__pf;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__SkirtBone__pf;                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__MarginRate__pf;                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Alpha__pf;                                    // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_AnimExpression_C_BoneExCollideSkirtAlpha) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_BoneExCollideSkirtAlpha");
static_assert(sizeof(BP_FLIB_AnimExpression_C_BoneExCollideSkirtAlpha) == 0x000038, "Wrong size on BP_FLIB_AnimExpression_C_BoneExCollideSkirtAlpha");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCollideSkirtAlpha, bpp__Character__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_BoneExCollideSkirtAlpha::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCollideSkirtAlpha, bpp__UpLegBone__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_BoneExCollideSkirtAlpha::bpp__UpLegBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCollideSkirtAlpha, bpp__LegBone__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_BoneExCollideSkirtAlpha::bpp__LegBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCollideSkirtAlpha, bpp__SkirtBone__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_BoneExCollideSkirtAlpha::bpp__SkirtBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCollideSkirtAlpha, bpp__MarginRate__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_BoneExCollideSkirtAlpha::bpp__MarginRate__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCollideSkirtAlpha, bpp____WorldContext__pf) == 0x000028, "Member 'BP_FLIB_AnimExpression_C_BoneExCollideSkirtAlpha::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCollideSkirtAlpha, bpp__Alpha__pf) == 0x000030, "Member 'BP_FLIB_AnimExpression_C_BoneExCollideSkirtAlpha::bpp__Alpha__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneExCompositeByRotZ
// 0x00C8 (0x00C8 - 0x0000)
struct BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ final
{
public:
	bool                                          bpp__Enable__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             bpp__Character__pf;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneA__pf;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneB__pf;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__X1__pf;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Y1__pf;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Z1__pf;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__TargetBone__pf;                               // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_AnimExpressionBonesName        bpp__AnimExpInfo__pf;                              // 0x0038(0x0070)(Parm, NativeAccessSpecifierPublic)
	ENUM_CoordinateMeshSlot                       bpp__PartsSlot__pf;                                // 0x00A8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bUseDataTable__pf;                            // 0x00A9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x00B0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__Result__pf;                                   // 0x00B8(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bpp__bUsedTargetBone__pf;                          // 0x00C4(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ");
static_assert(sizeof(BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ) == 0x0000C8, "Wrong size on BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ, bpp__Enable__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ::bpp__Enable__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ, bpp__Character__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ, bpp__BoneA__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ::bpp__BoneA__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ, bpp__BoneB__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ::bpp__BoneB__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ, bpp__X1__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ::bpp__X1__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ, bpp__Y1__pf) == 0x000024, "Member 'BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ::bpp__Y1__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ, bpp__Z1__pf) == 0x000028, "Member 'BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ::bpp__Z1__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ, bpp__TargetBone__pf) == 0x000030, "Member 'BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ::bpp__TargetBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ, bpp__AnimExpInfo__pf) == 0x000038, "Member 'BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ::bpp__AnimExpInfo__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ, bpp__PartsSlot__pf) == 0x0000A8, "Member 'BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ::bpp__PartsSlot__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ, bpp__bUseDataTable__pf) == 0x0000A9, "Member 'BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ::bpp__bUseDataTable__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ, bpp____WorldContext__pf) == 0x0000B0, "Member 'BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ, bpp__Result__pf) == 0x0000B8, "Member 'BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ::bpp__Result__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ, bpp__bUsedTargetBone__pf) == 0x0000C4, "Member 'BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ::bpp__bUsedTargetBone__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneExCopyRot
// 0x00E0 (0x00E0 - 0x0000)
struct BP_FLIB_AnimExpression_C_BoneExCopyRot final
{
public:
	bool                                          bpp__Enable__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             bpp__Character__pf;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneA__pf;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__X1__pf;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Y1__pf;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Z1__pf;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__TargetBone__pf;                               // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_AnimExpressionBonesName        bpp__AnimExpInfo__pf;                              // 0x0030(0x0070)(Parm, NativeAccessSpecifierPublic)
	ENUM_CoordinateMeshSlot                       bpp__MeshSlot__pf;                                 // 0x00A0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bUseClamp__pf;                                // 0x00A1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                bpp__ClampMin__pf;                                 // 0x00A4(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bpp__ClampMax__pf;                                 // 0x00B0(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x00C0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__Result__pf;                                   // 0x00C8(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bpp__bUsedTargetBone__pf;                          // 0x00D4(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         bpp__Alpha__pf;                                    // 0x00D8(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_AnimExpression_C_BoneExCopyRot) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_BoneExCopyRot");
static_assert(sizeof(BP_FLIB_AnimExpression_C_BoneExCopyRot) == 0x0000E0, "Wrong size on BP_FLIB_AnimExpression_C_BoneExCopyRot");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCopyRot, bpp__Enable__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_BoneExCopyRot::bpp__Enable__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCopyRot, bpp__Character__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_BoneExCopyRot::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCopyRot, bpp__BoneA__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_BoneExCopyRot::bpp__BoneA__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCopyRot, bpp__X1__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_BoneExCopyRot::bpp__X1__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCopyRot, bpp__Y1__pf) == 0x00001C, "Member 'BP_FLIB_AnimExpression_C_BoneExCopyRot::bpp__Y1__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCopyRot, bpp__Z1__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_BoneExCopyRot::bpp__Z1__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCopyRot, bpp__TargetBone__pf) == 0x000028, "Member 'BP_FLIB_AnimExpression_C_BoneExCopyRot::bpp__TargetBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCopyRot, bpp__AnimExpInfo__pf) == 0x000030, "Member 'BP_FLIB_AnimExpression_C_BoneExCopyRot::bpp__AnimExpInfo__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCopyRot, bpp__MeshSlot__pf) == 0x0000A0, "Member 'BP_FLIB_AnimExpression_C_BoneExCopyRot::bpp__MeshSlot__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCopyRot, bpp__bUseClamp__pf) == 0x0000A1, "Member 'BP_FLIB_AnimExpression_C_BoneExCopyRot::bpp__bUseClamp__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCopyRot, bpp__ClampMin__pf) == 0x0000A4, "Member 'BP_FLIB_AnimExpression_C_BoneExCopyRot::bpp__ClampMin__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCopyRot, bpp__ClampMax__pf) == 0x0000B0, "Member 'BP_FLIB_AnimExpression_C_BoneExCopyRot::bpp__ClampMax__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCopyRot, bpp____WorldContext__pf) == 0x0000C0, "Member 'BP_FLIB_AnimExpression_C_BoneExCopyRot::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCopyRot, bpp__Result__pf) == 0x0000C8, "Member 'BP_FLIB_AnimExpression_C_BoneExCopyRot::bpp__Result__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCopyRot, bpp__bUsedTargetBone__pf) == 0x0000D4, "Member 'BP_FLIB_AnimExpression_C_BoneExCopyRot::bpp__bUsedTargetBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExCopyRot, bpp__Alpha__pf) == 0x0000D8, "Member 'BP_FLIB_AnimExpression_C_BoneExCopyRot::bpp__Alpha__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneExLerpFromRefPoseRotToCalcRot
// 0x0040 (0x0040 - 0x0000)
struct BP_FLIB_AnimExpression_C_BoneExLerpFromRefPoseRotToCalcRot final
{
public:
	struct FRotator                               bpp__Rot__pf;                                      // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             bpp__Character__pf;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__TargetBoneName__pf;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_CoordinateMeshSlot                       bpp__PartsSlot__pf;                                // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         bpp__LerpAlpha__pf;                                // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__Result__pf;                                   // 0x0030(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         bpp__Alpha__pf;                                    // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_AnimExpression_C_BoneExLerpFromRefPoseRotToCalcRot) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_BoneExLerpFromRefPoseRotToCalcRot");
static_assert(sizeof(BP_FLIB_AnimExpression_C_BoneExLerpFromRefPoseRotToCalcRot) == 0x000040, "Wrong size on BP_FLIB_AnimExpression_C_BoneExLerpFromRefPoseRotToCalcRot");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExLerpFromRefPoseRotToCalcRot, bpp__Rot__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_BoneExLerpFromRefPoseRotToCalcRot::bpp__Rot__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExLerpFromRefPoseRotToCalcRot, bpp__Character__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_BoneExLerpFromRefPoseRotToCalcRot::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExLerpFromRefPoseRotToCalcRot, bpp__TargetBoneName__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_BoneExLerpFromRefPoseRotToCalcRot::bpp__TargetBoneName__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExLerpFromRefPoseRotToCalcRot, bpp__PartsSlot__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_BoneExLerpFromRefPoseRotToCalcRot::bpp__PartsSlot__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExLerpFromRefPoseRotToCalcRot, bpp__LerpAlpha__pf) == 0x000024, "Member 'BP_FLIB_AnimExpression_C_BoneExLerpFromRefPoseRotToCalcRot::bpp__LerpAlpha__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExLerpFromRefPoseRotToCalcRot, bpp____WorldContext__pf) == 0x000028, "Member 'BP_FLIB_AnimExpression_C_BoneExLerpFromRefPoseRotToCalcRot::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExLerpFromRefPoseRotToCalcRot, bpp__Result__pf) == 0x000030, "Member 'BP_FLIB_AnimExpression_C_BoneExLerpFromRefPoseRotToCalcRot::bpp__Result__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExLerpFromRefPoseRotToCalcRot, bpp__Alpha__pf) == 0x00003C, "Member 'BP_FLIB_AnimExpression_C_BoneExLerpFromRefPoseRotToCalcRot::bpp__Alpha__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneExMaxOrMinRot
// 0x0108 (0x0108 - 0x0000)
struct BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot final
{
public:
	bool                                          bpp__Enable__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             bpp__Character__pf;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_AnimExpressionBonesName        bpp__AnimExpInfo__pf;                              // 0x0010(0x0070)(Parm, NativeAccessSpecifierPublic)
	class FName                                   bpp__StateName__pf;                                // 0x0080(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_MaxOrMinRot                    bpp__NodeParam__pf;                                // 0x0088(0x0028)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__NodeIndex__pf;                                // 0x00B0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bClampInRange__pf;                            // 0x00B4(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                bpp__ClampMin__pf;                                 // 0x00B8(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bpp__ClampMax__pf;                                 // 0x00C4(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x00D0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__Result__pf;                                   // 0x00D8(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bpp__bUsedTargetBone__pf;                          // 0x00E4(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               bpp__BoneA_Rot__pf;                                // 0x00E8(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__BoneB_Rot__pf;                                // 0x00F4(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         bpp__Alpha__pf;                                    // 0x0100(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot");
static_assert(sizeof(BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot) == 0x000108, "Wrong size on BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot, bpp__Enable__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot::bpp__Enable__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot, bpp__Character__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot, bpp__AnimExpInfo__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot::bpp__AnimExpInfo__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot, bpp__StateName__pf) == 0x000080, "Member 'BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot::bpp__StateName__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot, bpp__NodeParam__pf) == 0x000088, "Member 'BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot::bpp__NodeParam__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot, bpp__NodeIndex__pf) == 0x0000B0, "Member 'BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot::bpp__NodeIndex__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot, bpp__bClampInRange__pf) == 0x0000B4, "Member 'BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot::bpp__bClampInRange__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot, bpp__ClampMin__pf) == 0x0000B8, "Member 'BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot::bpp__ClampMin__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot, bpp__ClampMax__pf) == 0x0000C4, "Member 'BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot::bpp__ClampMax__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot, bpp____WorldContext__pf) == 0x0000D0, "Member 'BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot, bpp__Result__pf) == 0x0000D8, "Member 'BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot::bpp__Result__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot, bpp__bUsedTargetBone__pf) == 0x0000E4, "Member 'BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot::bpp__bUsedTargetBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot, bpp__BoneA_Rot__pf) == 0x0000E8, "Member 'BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot::bpp__BoneA_Rot__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot, bpp__BoneB_Rot__pf) == 0x0000F4, "Member 'BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot::bpp__BoneB_Rot__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot, bpp__Alpha__pf) == 0x000100, "Member 'BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot::bpp__Alpha__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneExSwitchTrace
// 0x0108 (0x0108 - 0x0000)
struct BP_FLIB_AnimExpression_C_BoneExSwitchTrace final
{
public:
	bool                                          bpp__Enable__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             bpp__Character__pf;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneA__pf;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneB__pf;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__X1__pf;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Y1__pf;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Z1__pf;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__TargetBone__pf;                               // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_AnimExpressionBonesName        bpp__AnimExpInfo__pf;                              // 0x0038(0x0070)(Parm, NativeAccessSpecifierPublic)
	ENUM_CoordinateMeshSlot                       bpp__MeshSlot__pf;                                 // 0x00A8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bUseClamp__pf;                                // 0x00A9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                bpp__ClampMin__pf;                                 // 0x00AC(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bpp__ClampMax__pf;                                 // 0x00B8(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bUseDataTable__pf;                            // 0x00C4(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__SkipRotOffset__pf;                            // 0x00C5(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                bpp__PlaneNormal__pf;                              // 0x00C8(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bpp__PlaneOffset__pf;                              // 0x00D4(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__UplegLength__pf;                              // 0x00E0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x00E8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__Result__pf;                                   // 0x00F0(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bpp__bUsedTargetBone__pf;                          // 0x00FC(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         bpp__Alpha__pf;                                    // 0x0100(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_AnimExpression_C_BoneExSwitchTrace) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_BoneExSwitchTrace");
static_assert(sizeof(BP_FLIB_AnimExpression_C_BoneExSwitchTrace) == 0x000108, "Wrong size on BP_FLIB_AnimExpression_C_BoneExSwitchTrace");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExSwitchTrace, bpp__Enable__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_BoneExSwitchTrace::bpp__Enable__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExSwitchTrace, bpp__Character__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_BoneExSwitchTrace::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExSwitchTrace, bpp__BoneA__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_BoneExSwitchTrace::bpp__BoneA__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExSwitchTrace, bpp__BoneB__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_BoneExSwitchTrace::bpp__BoneB__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExSwitchTrace, bpp__X1__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_BoneExSwitchTrace::bpp__X1__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExSwitchTrace, bpp__Y1__pf) == 0x000024, "Member 'BP_FLIB_AnimExpression_C_BoneExSwitchTrace::bpp__Y1__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExSwitchTrace, bpp__Z1__pf) == 0x000028, "Member 'BP_FLIB_AnimExpression_C_BoneExSwitchTrace::bpp__Z1__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExSwitchTrace, bpp__TargetBone__pf) == 0x000030, "Member 'BP_FLIB_AnimExpression_C_BoneExSwitchTrace::bpp__TargetBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExSwitchTrace, bpp__AnimExpInfo__pf) == 0x000038, "Member 'BP_FLIB_AnimExpression_C_BoneExSwitchTrace::bpp__AnimExpInfo__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExSwitchTrace, bpp__MeshSlot__pf) == 0x0000A8, "Member 'BP_FLIB_AnimExpression_C_BoneExSwitchTrace::bpp__MeshSlot__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExSwitchTrace, bpp__bUseClamp__pf) == 0x0000A9, "Member 'BP_FLIB_AnimExpression_C_BoneExSwitchTrace::bpp__bUseClamp__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExSwitchTrace, bpp__ClampMin__pf) == 0x0000AC, "Member 'BP_FLIB_AnimExpression_C_BoneExSwitchTrace::bpp__ClampMin__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExSwitchTrace, bpp__ClampMax__pf) == 0x0000B8, "Member 'BP_FLIB_AnimExpression_C_BoneExSwitchTrace::bpp__ClampMax__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExSwitchTrace, bpp__bUseDataTable__pf) == 0x0000C4, "Member 'BP_FLIB_AnimExpression_C_BoneExSwitchTrace::bpp__bUseDataTable__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExSwitchTrace, bpp__SkipRotOffset__pf) == 0x0000C5, "Member 'BP_FLIB_AnimExpression_C_BoneExSwitchTrace::bpp__SkipRotOffset__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExSwitchTrace, bpp__PlaneNormal__pf) == 0x0000C8, "Member 'BP_FLIB_AnimExpression_C_BoneExSwitchTrace::bpp__PlaneNormal__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExSwitchTrace, bpp__PlaneOffset__pf) == 0x0000D4, "Member 'BP_FLIB_AnimExpression_C_BoneExSwitchTrace::bpp__PlaneOffset__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExSwitchTrace, bpp__UplegLength__pf) == 0x0000E0, "Member 'BP_FLIB_AnimExpression_C_BoneExSwitchTrace::bpp__UplegLength__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExSwitchTrace, bpp____WorldContext__pf) == 0x0000E8, "Member 'BP_FLIB_AnimExpression_C_BoneExSwitchTrace::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExSwitchTrace, bpp__Result__pf) == 0x0000F0, "Member 'BP_FLIB_AnimExpression_C_BoneExSwitchTrace::bpp__Result__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExSwitchTrace, bpp__bUsedTargetBone__pf) == 0x0000FC, "Member 'BP_FLIB_AnimExpression_C_BoneExSwitchTrace::bpp__bUsedTargetBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExSwitchTrace, bpp__Alpha__pf) == 0x000100, "Member 'BP_FLIB_AnimExpression_C_BoneExSwitchTrace::bpp__Alpha__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneExTransSync2BoneRotDelta
// 0x0078 (0x0078 - 0x0000)
struct BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta final
{
public:
	bool                                          bpp__Enable__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__TargetBone__pf;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharacter*                             bpp__Character__pf;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneA__pf;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneB__pf;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_CoordinateMeshSlot                       bpp__Parts__pf;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_RotAxis                                  bpp__RotAxis__pf;                                  // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                bpp__K__pf;                                        // 0x002C(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bpp__Offset__pf;                                   // 0x0038(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__SpaceBone__pf;                                // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              bpp__ClampSinMinMax__pf;                           // 0x0050(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bpp__OffsetVector__pf;                             // 0x0060(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bUsedTargetBone__pf;                          // 0x006C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         bpp__Alpha__pf;                                    // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta");
static_assert(sizeof(BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta) == 0x000078, "Wrong size on BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta, bpp__Enable__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta::bpp__Enable__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta, bpp__TargetBone__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta::bpp__TargetBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta, bpp__Character__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta, bpp__BoneA__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta::bpp__BoneA__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta, bpp__BoneB__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta::bpp__BoneB__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta, bpp__Parts__pf) == 0x000028, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta::bpp__Parts__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta, bpp__RotAxis__pf) == 0x000029, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta::bpp__RotAxis__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta, bpp__K__pf) == 0x00002C, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta::bpp__K__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta, bpp__Offset__pf) == 0x000038, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta::bpp__Offset__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta, bpp__SpaceBone__pf) == 0x000048, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta::bpp__SpaceBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta, bpp__ClampSinMinMax__pf) == 0x000050, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta::bpp__ClampSinMinMax__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta, bpp____WorldContext__pf) == 0x000058, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta, bpp__OffsetVector__pf) == 0x000060, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta::bpp__OffsetVector__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta, bpp__bUsedTargetBone__pf) == 0x00006C, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta::bpp__bUsedTargetBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta, bpp__Alpha__pf) == 0x000070, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta::bpp__Alpha__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneExTransSyncRotZ
// 0x00D0 (0x00D0 - 0x0000)
struct BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ final
{
public:
	bool                                          bpp__Enable__pf;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__TargetBone__pf;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharacter*                             bpp__Character__pf;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneA__pf;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneB__pf;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bpp__XYZ_Ratio__pf;                                // 0x0028(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_AnimExpressionBonesName        bpp__AnimExpInfo__pf;                              // 0x0038(0x0070)(Parm, NativeAccessSpecifierPublic)
	ENUM_CoordinateMeshSlot                       bpp__Parts__pf;                                    // 0x00A8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bUseDataTable__pf;                            // 0x00A9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x00B0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bpp__ResultXYZ__pf;                                // 0x00B8(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bUsedTargetBone__pf;                          // 0x00C4(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         bpp__Alpha__pf;                                    // 0x00C8(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ");
static_assert(sizeof(BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ) == 0x0000D0, "Wrong size on BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ, bpp__Enable__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ::bpp__Enable__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ, bpp__TargetBone__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ::bpp__TargetBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ, bpp__Character__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ, bpp__BoneA__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ::bpp__BoneA__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ, bpp__BoneB__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ::bpp__BoneB__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ, bpp__XYZ_Ratio__pf) == 0x000028, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ::bpp__XYZ_Ratio__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ, bpp__AnimExpInfo__pf) == 0x000038, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ::bpp__AnimExpInfo__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ, bpp__Parts__pf) == 0x0000A8, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ::bpp__Parts__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ, bpp__bUseDataTable__pf) == 0x0000A9, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ::bpp__bUseDataTable__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ, bpp____WorldContext__pf) == 0x0000B0, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ, bpp__ResultXYZ__pf) == 0x0000B8, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ::bpp__ResultXYZ__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ, bpp__bUsedTargetBone__pf) == 0x0000C4, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ::bpp__bUsedTargetBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ, bpp__Alpha__pf) == 0x0000C8, "Member 'BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ::bpp__Alpha__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneIsUsingInMesh
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_AnimExpression_C_BoneIsUsingInMesh final
{
public:
	ENUM_CoordinateMeshSlot                       bpp__PartsSlot__pf;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             bpp__Character__pf;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__TargetBone__pf;                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bForceAlpha__pf;                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Result__pf;                                   // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         bpp__Alpha__pf;                                    // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_AnimExpression_C_BoneIsUsingInMesh) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_BoneIsUsingInMesh");
static_assert(sizeof(BP_FLIB_AnimExpression_C_BoneIsUsingInMesh) == 0x000030, "Wrong size on BP_FLIB_AnimExpression_C_BoneIsUsingInMesh");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneIsUsingInMesh, bpp__PartsSlot__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_BoneIsUsingInMesh::bpp__PartsSlot__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneIsUsingInMesh, bpp__Character__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_BoneIsUsingInMesh::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneIsUsingInMesh, bpp__TargetBone__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_BoneIsUsingInMesh::bpp__TargetBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneIsUsingInMesh, bpp__bForceAlpha__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_BoneIsUsingInMesh::bpp__bForceAlpha__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneIsUsingInMesh, bpp____WorldContext__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_BoneIsUsingInMesh::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneIsUsingInMesh, bpp__Result__pf) == 0x000028, "Member 'BP_FLIB_AnimExpression_C_BoneIsUsingInMesh::bpp__Result__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_BoneIsUsingInMesh, bpp__Alpha__pf) == 0x00002C, "Member 'BP_FLIB_AnimExpression_C_BoneIsUsingInMesh::bpp__Alpha__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.CalcBoneRotConstraintBaseOffset
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_AnimExpression_C_CalcBoneRotConstraintBaseOffset final
{
public:
	struct FSTRUCT_AnimExpInfo                    bpp__AnimExpInfo__pf;                              // 0x0000(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UJackAnimInstance*                      bpp__AnimInstance__pf;                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_AnimExpression_C_CalcBoneRotConstraintBaseOffset) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_CalcBoneRotConstraintBaseOffset");
static_assert(sizeof(BP_FLIB_AnimExpression_C_CalcBoneRotConstraintBaseOffset) == 0x000030, "Wrong size on BP_FLIB_AnimExpression_C_CalcBoneRotConstraintBaseOffset");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcBoneRotConstraintBaseOffset, bpp__AnimExpInfo__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_CalcBoneRotConstraintBaseOffset::bpp__AnimExpInfo__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcBoneRotConstraintBaseOffset, bpp__AnimInstance__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_CalcBoneRotConstraintBaseOffset::bpp__AnimInstance__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcBoneRotConstraintBaseOffset, bpp____WorldContext__pf) == 0x000028, "Member 'BP_FLIB_AnimExpression_C_CalcBoneRotConstraintBaseOffset::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.CalcBoneRotOffset
// 0x0090 (0x0090 - 0x0000)
struct BP_FLIB_AnimExpression_C_CalcBoneRotOffset final
{
public:
	struct FSTRUCT_AnimExpressionBonesName        bpp__AnimExpressionBonesName__pf;                  // 0x0000(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
	class ACharacter*                             bpp__Character__pf;                                // 0x0070(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0078(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRotator>                       bpp__Result__pf;                                   // 0x0080(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_AnimExpression_C_CalcBoneRotOffset) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_CalcBoneRotOffset");
static_assert(sizeof(BP_FLIB_AnimExpression_C_CalcBoneRotOffset) == 0x000090, "Wrong size on BP_FLIB_AnimExpression_C_CalcBoneRotOffset");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcBoneRotOffset, bpp__AnimExpressionBonesName__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_CalcBoneRotOffset::bpp__AnimExpressionBonesName__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcBoneRotOffset, bpp__Character__pf) == 0x000070, "Member 'BP_FLIB_AnimExpression_C_CalcBoneRotOffset::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcBoneRotOffset, bpp____WorldContext__pf) == 0x000078, "Member 'BP_FLIB_AnimExpression_C_CalcBoneRotOffset::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcBoneRotOffset, bpp__Result__pf) == 0x000080, "Member 'BP_FLIB_AnimExpression_C_CalcBoneRotOffset::bpp__Result__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.CalcExceptionRot
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_AnimExpression_C_CalcExceptionRot final
{
public:
	float                                         bpp__MinValueA__pf;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__MinValueB__pf;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__StandardValue__pf;                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__ExceptionValue__pf;                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bIsException__pf;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         bpp__ClampMinValue__pf;                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__ClampMaxValue__pf;                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_AnimExpression_C_CalcExceptionRot) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_CalcExceptionRot");
static_assert(sizeof(BP_FLIB_AnimExpression_C_CalcExceptionRot) == 0x000030, "Wrong size on BP_FLIB_AnimExpression_C_CalcExceptionRot");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcExceptionRot, bpp__MinValueA__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_CalcExceptionRot::bpp__MinValueA__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcExceptionRot, bpp__MinValueB__pf) == 0x000004, "Member 'BP_FLIB_AnimExpression_C_CalcExceptionRot::bpp__MinValueB__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcExceptionRot, bpp__StandardValue__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_CalcExceptionRot::bpp__StandardValue__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcExceptionRot, bpp__ExceptionValue__pf) == 0x00000C, "Member 'BP_FLIB_AnimExpression_C_CalcExceptionRot::bpp__ExceptionValue__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcExceptionRot, bpp__bIsException__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_CalcExceptionRot::bpp__bIsException__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcExceptionRot, bpp__ClampMinValue__pf) == 0x000014, "Member 'BP_FLIB_AnimExpression_C_CalcExceptionRot::bpp__ClampMinValue__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcExceptionRot, bpp__ClampMaxValue__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_CalcExceptionRot::bpp__ClampMaxValue__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcExceptionRot, bpp____WorldContext__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_CalcExceptionRot::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcExceptionRot, ReturnValue) == 0x000028, "Member 'BP_FLIB_AnimExpression_C_CalcExceptionRot::ReturnValue' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.CalcRotOffsetPostProc
// 0x0040 (0x0040 - 0x0000)
struct BP_FLIB_AnimExpression_C_CalcRotOffsetPostProc final
{
public:
	class USkeletalMeshComponent*                 bpp__SkeletalMeshComponent__pf;                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__TargetBone__pf;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__SourceBone__pf;                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__TargetRot__pf;                                // 0x0018(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0030(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_AnimExpression_C_CalcRotOffsetPostProc) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_CalcRotOffsetPostProc");
static_assert(sizeof(BP_FLIB_AnimExpression_C_CalcRotOffsetPostProc) == 0x000040, "Wrong size on BP_FLIB_AnimExpression_C_CalcRotOffsetPostProc");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcRotOffsetPostProc, bpp__SkeletalMeshComponent__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_CalcRotOffsetPostProc::bpp__SkeletalMeshComponent__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcRotOffsetPostProc, bpp__TargetBone__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_CalcRotOffsetPostProc::bpp__TargetBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcRotOffsetPostProc, bpp__SourceBone__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_CalcRotOffsetPostProc::bpp__SourceBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcRotOffsetPostProc, bpp__TargetRot__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_CalcRotOffsetPostProc::bpp__TargetRot__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcRotOffsetPostProc, bpp____WorldContext__pf) == 0x000028, "Member 'BP_FLIB_AnimExpression_C_CalcRotOffsetPostProc::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcRotOffsetPostProc, ReturnValue) == 0x000030, "Member 'BP_FLIB_AnimExpression_C_CalcRotOffsetPostProc::ReturnValue' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.CalcTransSyncRotZ
// 0x00A0 (0x00A0 - 0x0000)
struct BP_FLIB_AnimExpression_C_CalcTransSyncRotZ final
{
public:
	class ACharacter*                             bpp__Character__pf;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneA__pf;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneB__pf;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_AnimExpressionBonesName        bpp__AnimExpInfo__pf;                              // 0x0018(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
	float                                         bpp__K__pf;                                        // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Result__pf;                                   // 0x0098(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_AnimExpression_C_CalcTransSyncRotZ) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_CalcTransSyncRotZ");
static_assert(sizeof(BP_FLIB_AnimExpression_C_CalcTransSyncRotZ) == 0x0000A0, "Wrong size on BP_FLIB_AnimExpression_C_CalcTransSyncRotZ");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcTransSyncRotZ, bpp__Character__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_CalcTransSyncRotZ::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcTransSyncRotZ, bpp__BoneA__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_CalcTransSyncRotZ::bpp__BoneA__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcTransSyncRotZ, bpp__BoneB__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_CalcTransSyncRotZ::bpp__BoneB__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcTransSyncRotZ, bpp__AnimExpInfo__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_CalcTransSyncRotZ::bpp__AnimExpInfo__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcTransSyncRotZ, bpp__K__pf) == 0x000088, "Member 'BP_FLIB_AnimExpression_C_CalcTransSyncRotZ::bpp__K__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcTransSyncRotZ, bpp____WorldContext__pf) == 0x000090, "Member 'BP_FLIB_AnimExpression_C_CalcTransSyncRotZ::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_CalcTransSyncRotZ, bpp__Result__pf) == 0x000098, "Member 'BP_FLIB_AnimExpression_C_CalcTransSyncRotZ::bpp__Result__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.ClampRot
// 0x0040 (0x0040 - 0x0000)
struct BP_FLIB_AnimExpression_C_ClampRot final
{
public:
	struct FRotator                               bpp__Rot__pf;                                      // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bpp__bClamp__pf;                                   // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                bpp__ClampMin__pf;                                 // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bpp__ClampMax__pf;                                 // 0x001C(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0030(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_AnimExpression_C_ClampRot) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_ClampRot");
static_assert(sizeof(BP_FLIB_AnimExpression_C_ClampRot) == 0x000040, "Wrong size on BP_FLIB_AnimExpression_C_ClampRot");
static_assert(offsetof(BP_FLIB_AnimExpression_C_ClampRot, bpp__Rot__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_ClampRot::bpp__Rot__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_ClampRot, bpp__bClamp__pf) == 0x00000C, "Member 'BP_FLIB_AnimExpression_C_ClampRot::bpp__bClamp__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_ClampRot, bpp__ClampMin__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_ClampRot::bpp__ClampMin__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_ClampRot, bpp__ClampMax__pf) == 0x00001C, "Member 'BP_FLIB_AnimExpression_C_ClampRot::bpp__ClampMax__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_ClampRot, bpp____WorldContext__pf) == 0x000028, "Member 'BP_FLIB_AnimExpression_C_ClampRot::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_ClampRot, ReturnValue) == 0x000030, "Member 'BP_FLIB_AnimExpression_C_ClampRot::ReturnValue' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.DrawDebugBoneAxis
// 0x0040 (0x0040 - 0x0000)
struct BP_FLIB_AnimExpression_C_DrawDebugBoneAxis final
{
public:
	class USkinnedMeshComponent*                  bpp__SkinnedMesh__pf;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__ArrowSize__pf;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__ArrowLength__pf;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bpp__DrawRelativeLocation__pf;                     // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           bpp__BoneListForDebug__pf;                         // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bpp__DrawDebugBone__pf;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_AnimExpression_C_DrawDebugBoneAxis) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_DrawDebugBoneAxis");
static_assert(sizeof(BP_FLIB_AnimExpression_C_DrawDebugBoneAxis) == 0x000040, "Wrong size on BP_FLIB_AnimExpression_C_DrawDebugBoneAxis");
static_assert(offsetof(BP_FLIB_AnimExpression_C_DrawDebugBoneAxis, bpp__SkinnedMesh__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_DrawDebugBoneAxis::bpp__SkinnedMesh__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_DrawDebugBoneAxis, bpp__ArrowSize__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_DrawDebugBoneAxis::bpp__ArrowSize__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_DrawDebugBoneAxis, bpp__ArrowLength__pf) == 0x00000C, "Member 'BP_FLIB_AnimExpression_C_DrawDebugBoneAxis::bpp__ArrowLength__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_DrawDebugBoneAxis, bpp__DrawRelativeLocation__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_DrawDebugBoneAxis::bpp__DrawRelativeLocation__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_DrawDebugBoneAxis, bpp__BoneListForDebug__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_DrawDebugBoneAxis::bpp__BoneListForDebug__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_DrawDebugBoneAxis, bpp__DrawDebugBone__pf) == 0x000030, "Member 'BP_FLIB_AnimExpression_C_DrawDebugBoneAxis::bpp__DrawDebugBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_DrawDebugBoneAxis, bpp____WorldContext__pf) == 0x000038, "Member 'BP_FLIB_AnimExpression_C_DrawDebugBoneAxis::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.EvalAnimExpressionType
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_AnimExpression_C_EvalAnimExpressionType final
{
public:
	class USkeletalMeshComponent*                 bpp__Mesh__pf;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_AnimExpInfo                    bpp__Result__pf;                                   // 0x0010(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_AnimExpression_C_EvalAnimExpressionType) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_EvalAnimExpressionType");
static_assert(sizeof(BP_FLIB_AnimExpression_C_EvalAnimExpressionType) == 0x000030, "Wrong size on BP_FLIB_AnimExpression_C_EvalAnimExpressionType");
static_assert(offsetof(BP_FLIB_AnimExpression_C_EvalAnimExpressionType, bpp__Mesh__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_EvalAnimExpressionType::bpp__Mesh__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_EvalAnimExpressionType, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_EvalAnimExpressionType::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_EvalAnimExpressionType, bpp__Result__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_EvalAnimExpressionType::bpp__Result__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.FixRotAxisVector
// 0x0060 (0x0060 - 0x0000)
struct BP_FLIB_AnimExpression_C_FixRotAxisVector final
{
public:
	class USkeletalMeshComponent*                 bpp__SkelComp__pf;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneName__pf;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__FixX__pf;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__FixY__pf;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__FixZ__pf;                                     // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                bpp__ClampMinRange__pf;                            // 0x0014(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bpp__ClampMaxRange__pf;                            // 0x0020(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bpp__Min__pf;                                      // 0x0038(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bpp__Max__pf;                                      // 0x0044(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__RefPoseRot__pf;                               // 0x0050(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_AnimExpression_C_FixRotAxisVector) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_FixRotAxisVector");
static_assert(sizeof(BP_FLIB_AnimExpression_C_FixRotAxisVector) == 0x000060, "Wrong size on BP_FLIB_AnimExpression_C_FixRotAxisVector");
static_assert(offsetof(BP_FLIB_AnimExpression_C_FixRotAxisVector, bpp__SkelComp__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_FixRotAxisVector::bpp__SkelComp__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_FixRotAxisVector, bpp__BoneName__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_FixRotAxisVector::bpp__BoneName__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_FixRotAxisVector, bpp__FixX__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_FixRotAxisVector::bpp__FixX__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_FixRotAxisVector, bpp__FixY__pf) == 0x000011, "Member 'BP_FLIB_AnimExpression_C_FixRotAxisVector::bpp__FixY__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_FixRotAxisVector, bpp__FixZ__pf) == 0x000012, "Member 'BP_FLIB_AnimExpression_C_FixRotAxisVector::bpp__FixZ__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_FixRotAxisVector, bpp__ClampMinRange__pf) == 0x000014, "Member 'BP_FLIB_AnimExpression_C_FixRotAxisVector::bpp__ClampMinRange__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_FixRotAxisVector, bpp__ClampMaxRange__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_FixRotAxisVector::bpp__ClampMaxRange__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_FixRotAxisVector, bpp____WorldContext__pf) == 0x000030, "Member 'BP_FLIB_AnimExpression_C_FixRotAxisVector::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_FixRotAxisVector, bpp__Min__pf) == 0x000038, "Member 'BP_FLIB_AnimExpression_C_FixRotAxisVector::bpp__Min__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_FixRotAxisVector, bpp__Max__pf) == 0x000044, "Member 'BP_FLIB_AnimExpression_C_FixRotAxisVector::bpp__Max__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_FixRotAxisVector, bpp__RefPoseRot__pf) == 0x000050, "Member 'BP_FLIB_AnimExpression_C_FixRotAxisVector::bpp__RefPoseRot__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.GetAimRotation
// 0x0048 (0x0048 - 0x0000)
struct BP_FLIB_AnimExpression_C_GetAimRotation final
{
public:
	class ACharacter*                             bpp__Character__pf;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__AimReferenceBone__pf;                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__AimTargetBone__pf;                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__ModifyTargetBone__pf;                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bpp__AimOffset__pf;                                // 0x0020(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__ClampMinValue__pf;                            // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__TargetRotation__pf;                           // 0x0038(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_AnimExpression_C_GetAimRotation) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_GetAimRotation");
static_assert(sizeof(BP_FLIB_AnimExpression_C_GetAimRotation) == 0x000048, "Wrong size on BP_FLIB_AnimExpression_C_GetAimRotation");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetAimRotation, bpp__Character__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_GetAimRotation::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetAimRotation, bpp__AimReferenceBone__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_GetAimRotation::bpp__AimReferenceBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetAimRotation, bpp__AimTargetBone__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_GetAimRotation::bpp__AimTargetBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetAimRotation, bpp__ModifyTargetBone__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_GetAimRotation::bpp__ModifyTargetBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetAimRotation, bpp__AimOffset__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_GetAimRotation::bpp__AimOffset__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetAimRotation, bpp__ClampMinValue__pf) == 0x00002C, "Member 'BP_FLIB_AnimExpression_C_GetAimRotation::bpp__ClampMinValue__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetAimRotation, bpp____WorldContext__pf) == 0x000030, "Member 'BP_FLIB_AnimExpression_C_GetAimRotation::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetAimRotation, bpp__TargetRotation__pf) == 0x000038, "Member 'BP_FLIB_AnimExpression_C_GetAimRotation::bpp__TargetRotation__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.GetBonReferenceByNameWithUsingInMesh
// 0x0038 (0x0038 - 0x0000)
struct BP_FLIB_AnimExpression_C_GetBonReferenceByNameWithUsingInMesh final
{
public:
	class ACharacter*                             bpp__Character__pf;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__TargetBoneName__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_CoordinateMeshSlot                       bpp__PartsSlot__pf;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_AnimExpression_C_GetBonReferenceByNameWithUsingInMesh) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_GetBonReferenceByNameWithUsingInMesh");
static_assert(sizeof(BP_FLIB_AnimExpression_C_GetBonReferenceByNameWithUsingInMesh) == 0x000038, "Wrong size on BP_FLIB_AnimExpression_C_GetBonReferenceByNameWithUsingInMesh");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetBonReferenceByNameWithUsingInMesh, bpp__Character__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_GetBonReferenceByNameWithUsingInMesh::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetBonReferenceByNameWithUsingInMesh, bpp__TargetBoneName__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_GetBonReferenceByNameWithUsingInMesh::bpp__TargetBoneName__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetBonReferenceByNameWithUsingInMesh, bpp__PartsSlot__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_GetBonReferenceByNameWithUsingInMesh::bpp__PartsSlot__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetBonReferenceByNameWithUsingInMesh, bpp____WorldContext__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_GetBonReferenceByNameWithUsingInMesh::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetBonReferenceByNameWithUsingInMesh, ReturnValue) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_GetBonReferenceByNameWithUsingInMesh::ReturnValue' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.GetDynamicBoneManager
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_AnimExpression_C_GetDynamicBoneManager final
{
public:
	class FName                                   bpp__StateName__pf;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 bpp__Result__pf;                                   // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 bpp__Class__pf;                                    // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_AnimExpression_C_GetDynamicBoneManager) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_GetDynamicBoneManager");
static_assert(sizeof(BP_FLIB_AnimExpression_C_GetDynamicBoneManager) == 0x000020, "Wrong size on BP_FLIB_AnimExpression_C_GetDynamicBoneManager");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetDynamicBoneManager, bpp__StateName__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_GetDynamicBoneManager::bpp__StateName__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetDynamicBoneManager, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_GetDynamicBoneManager::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetDynamicBoneManager, bpp__Result__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_GetDynamicBoneManager::bpp__Result__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetDynamicBoneManager, bpp__Class__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_GetDynamicBoneManager::bpp__Class__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.GetLookAt2DValue
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_AnimExpression_C_GetLookAt2DValue final
{
public:
	class UJackAnimInstance*                      bpp__JackAnimInstance__pf;                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_HairBoneBlendSpaceCotrolMode             bpp__BaseBone__pf;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__H__pf;                                        // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__V__pf;                                        // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_AnimExpression_C_GetLookAt2DValue) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_GetLookAt2DValue");
static_assert(sizeof(BP_FLIB_AnimExpression_C_GetLookAt2DValue) == 0x000020, "Wrong size on BP_FLIB_AnimExpression_C_GetLookAt2DValue");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetLookAt2DValue, bpp__JackAnimInstance__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_GetLookAt2DValue::bpp__JackAnimInstance__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetLookAt2DValue, bpp__BaseBone__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_GetLookAt2DValue::bpp__BaseBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetLookAt2DValue, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_GetLookAt2DValue::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetLookAt2DValue, bpp__H__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_GetLookAt2DValue::bpp__H__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetLookAt2DValue, bpp__V__pf) == 0x00001C, "Member 'BP_FLIB_AnimExpression_C_GetLookAt2DValue::bpp__V__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.GetMaxOrMinRot
// 0x0040 (0x0040 - 0x0000)
struct BP_FLIB_AnimExpression_C_GetMaxOrMinRot final
{
public:
	class FName                                   bpp__StateName__pf;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__Index__pf;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_MaxOrMinRot                    bpp__Item__pf;                                     // 0x0018(0x0028)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_AnimExpression_C_GetMaxOrMinRot) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_GetMaxOrMinRot");
static_assert(sizeof(BP_FLIB_AnimExpression_C_GetMaxOrMinRot) == 0x000040, "Wrong size on BP_FLIB_AnimExpression_C_GetMaxOrMinRot");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetMaxOrMinRot, bpp__StateName__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_GetMaxOrMinRot::bpp__StateName__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetMaxOrMinRot, bpp__Index__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_GetMaxOrMinRot::bpp__Index__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetMaxOrMinRot, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_GetMaxOrMinRot::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetMaxOrMinRot, bpp__Item__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_GetMaxOrMinRot::bpp__Item__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.GetNSEWSkirtJointName
// 0x0070 (0x0070 - 0x0000)
struct BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName final
{
public:
	class FName                                   bpp__SouthCenterJoint__pf;                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__SouthW__pf;                                   // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__South__pf;                                    // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__SouthE__pf;                                   // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__WestS__pf;                                    // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__West__pf;                                     // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__WestN__pf;                                    // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__EastS__pf;                                    // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__East__pf;                                     // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__EastN__pf;                                    // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__NorthW__pf;                                   // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__North__pf;                                    // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__NorthE__pf;                                   // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName");
static_assert(sizeof(BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName) == 0x000070, "Wrong size on BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName, bpp__SouthCenterJoint__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName::bpp__SouthCenterJoint__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName, bpp__SouthW__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName::bpp__SouthW__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName, bpp__South__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName::bpp__South__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName, bpp__SouthE__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName::bpp__SouthE__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName, bpp__WestS__pf) == 0x000028, "Member 'BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName::bpp__WestS__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName, bpp__West__pf) == 0x000030, "Member 'BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName::bpp__West__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName, bpp__WestN__pf) == 0x000038, "Member 'BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName::bpp__WestN__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName, bpp__EastS__pf) == 0x000040, "Member 'BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName::bpp__EastS__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName, bpp__East__pf) == 0x000048, "Member 'BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName::bpp__East__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName, bpp__EastN__pf) == 0x000050, "Member 'BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName::bpp__EastN__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName, bpp__NorthW__pf) == 0x000058, "Member 'BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName::bpp__NorthW__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName, bpp__North__pf) == 0x000060, "Member 'BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName::bpp__North__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName, bpp__NorthE__pf) == 0x000068, "Member 'BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName::bpp__NorthE__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.GetSoftBoneChain
// 0x0038 (0x0038 - 0x0000)
struct BP_FLIB_AnimExpression_C_GetSoftBoneChain final
{
public:
	class FName                                   bpp__StateName__pf;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__Index__pf;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_CoordinateMeshSlot                       bpp__PartsSlot__pf;                                // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             bpp__Character__pf;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__TargetBone__pf;                               // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_SoftBoneChainSettings          bpp__Result__pf;                                   // 0x0028(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_AnimExpression_C_GetSoftBoneChain) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_GetSoftBoneChain");
static_assert(sizeof(BP_FLIB_AnimExpression_C_GetSoftBoneChain) == 0x000038, "Wrong size on BP_FLIB_AnimExpression_C_GetSoftBoneChain");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetSoftBoneChain, bpp__StateName__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_GetSoftBoneChain::bpp__StateName__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetSoftBoneChain, bpp__Index__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_GetSoftBoneChain::bpp__Index__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetSoftBoneChain, bpp__PartsSlot__pf) == 0x00000C, "Member 'BP_FLIB_AnimExpression_C_GetSoftBoneChain::bpp__PartsSlot__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetSoftBoneChain, bpp__Character__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_GetSoftBoneChain::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetSoftBoneChain, bpp__TargetBone__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_GetSoftBoneChain::bpp__TargetBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetSoftBoneChain, bpp____WorldContext__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_GetSoftBoneChain::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_GetSoftBoneChain, bpp__Result__pf) == 0x000028, "Member 'BP_FLIB_AnimExpression_C_GetSoftBoneChain::bpp__Result__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.max(sin(clamp(Bone.rz,-90,90),1)*k
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_AnimExpression_C_Max_sin_clamp_Bone_rz_Minus90_90__1_Stark final
{
public:
	class ACharacter*                             bpp__Character__pf;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__Bone__pf;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__K__pf;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Result__pf;                                   // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_AnimExpression_C_Max_sin_clamp_Bone_rz_Minus90_90__1_Stark) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_Max_sin_clamp_Bone_rz_Minus90_90__1_Stark");
static_assert(sizeof(BP_FLIB_AnimExpression_C_Max_sin_clamp_Bone_rz_Minus90_90__1_Stark) == 0x000028, "Wrong size on BP_FLIB_AnimExpression_C_Max_sin_clamp_Bone_rz_Minus90_90__1_Stark");
static_assert(offsetof(BP_FLIB_AnimExpression_C_Max_sin_clamp_Bone_rz_Minus90_90__1_Stark, bpp__Character__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_Max_sin_clamp_Bone_rz_Minus90_90__1_Stark::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_Max_sin_clamp_Bone_rz_Minus90_90__1_Stark, bpp__Bone__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_Max_sin_clamp_Bone_rz_Minus90_90__1_Stark::bpp__Bone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_Max_sin_clamp_Bone_rz_Minus90_90__1_Stark, bpp__K__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_Max_sin_clamp_Bone_rz_Minus90_90__1_Stark::bpp__K__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_Max_sin_clamp_Bone_rz_Minus90_90__1_Stark, bpp____WorldContext__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_Max_sin_clamp_Bone_rz_Minus90_90__1_Stark::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_Max_sin_clamp_Bone_rz_Minus90_90__1_Stark, bpp__Result__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_Max_sin_clamp_Bone_rz_Minus90_90__1_Stark::bpp__Result__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.SaveDynamicBoneData
// 0x00C8 (0x00C8 - 0x0000)
struct BP_FLIB_AnimExpression_C_SaveDynamicBoneData final
{
public:
	struct FJackAnimExp_DynamicBoneCacheState     bpp__CacheData__pf;                                // 0x0000(0x00B8)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UJackAnimInstance*                      bpp__JackAnimInstance__pf;                         // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x00C0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_AnimExpression_C_SaveDynamicBoneData) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_SaveDynamicBoneData");
static_assert(sizeof(BP_FLIB_AnimExpression_C_SaveDynamicBoneData) == 0x0000C8, "Wrong size on BP_FLIB_AnimExpression_C_SaveDynamicBoneData");
static_assert(offsetof(BP_FLIB_AnimExpression_C_SaveDynamicBoneData, bpp__CacheData__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_SaveDynamicBoneData::bpp__CacheData__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_SaveDynamicBoneData, bpp__JackAnimInstance__pf) == 0x0000B8, "Member 'BP_FLIB_AnimExpression_C_SaveDynamicBoneData::bpp__JackAnimInstance__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_SaveDynamicBoneData, bpp____WorldContext__pf) == 0x0000C0, "Member 'BP_FLIB_AnimExpression_C_SaveDynamicBoneData::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.SelectRotZBetweenBoneAandB
// 0x0050 (0x0050 - 0x0000)
struct BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB final
{
public:
	class ACharacter*                             bpp__Character__pf;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneA__pf;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__BoneB__pf;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_RotAxis                                  bpp__SelectClampAxis__pf;                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bClampByPositiveRange__pf;                    // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bExceptionClampRot__pf;                       // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__Result__pf;                                   // 0x0028(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__BoneA_Rotation__pf;                           // 0x0034(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__BoneB_Rotation__pf;                           // 0x0040(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB");
static_assert(sizeof(BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB) == 0x000050, "Wrong size on BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB");
static_assert(offsetof(BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB, bpp__Character__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB, bpp__BoneA__pf) == 0x000008, "Member 'BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB::bpp__BoneA__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB, bpp__BoneB__pf) == 0x000010, "Member 'BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB::bpp__BoneB__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB, bpp__SelectClampAxis__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB::bpp__SelectClampAxis__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB, bpp__bClampByPositiveRange__pf) == 0x000019, "Member 'BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB::bpp__bClampByPositiveRange__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB, bpp__bExceptionClampRot__pf) == 0x00001A, "Member 'BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB::bpp__bExceptionClampRot__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB, bpp____WorldContext__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB, bpp__Result__pf) == 0x000028, "Member 'BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB::bpp__Result__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB, bpp__BoneA_Rotation__pf) == 0x000034, "Member 'BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB::bpp__BoneA_Rotation__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB, bpp__BoneB_Rotation__pf) == 0x000040, "Member 'BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB::bpp__BoneB_Rotation__pf' has a wrong offset!");

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.TwoBoneRotCombineRatio
// 0x0058 (0x0058 - 0x0000)
struct BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio final
{
public:
	struct FRotator                               bpp__RotA__pf;                                     // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__RotB__pf;                                     // 0x000C(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         bpp__RotA_Ratio__pf;                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__RotB_Ratio__pf;                               // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__TargetBone__pf;                               // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharacter*                             bpp__Character__pf;                                // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_CoordinateMeshSlot                       bpp__PartsSlot__pf;                                // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_RotAxis                                  bpp__ApplyBoneAxis__pf;                            // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__LimitLerpAxis__pf;                            // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bpp__Result__pf;                                   // 0x0040(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bpp__bUsedTargetBone__pf;                          // 0x004C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         bpp__Alpha__pf;                                    // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio) == 0x000008, "Wrong alignment on BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio");
static_assert(sizeof(BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio) == 0x000058, "Wrong size on BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio");
static_assert(offsetof(BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio, bpp__RotA__pf) == 0x000000, "Member 'BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio::bpp__RotA__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio, bpp__RotB__pf) == 0x00000C, "Member 'BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio::bpp__RotB__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio, bpp__RotA_Ratio__pf) == 0x000018, "Member 'BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio::bpp__RotA_Ratio__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio, bpp__RotB_Ratio__pf) == 0x00001C, "Member 'BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio::bpp__RotB_Ratio__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio, bpp__TargetBone__pf) == 0x000020, "Member 'BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio::bpp__TargetBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio, bpp__Character__pf) == 0x000028, "Member 'BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio, bpp__PartsSlot__pf) == 0x000030, "Member 'BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio::bpp__PartsSlot__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio, bpp__ApplyBoneAxis__pf) == 0x000031, "Member 'BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio::bpp__ApplyBoneAxis__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio, bpp__LimitLerpAxis__pf) == 0x000032, "Member 'BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio::bpp__LimitLerpAxis__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio, bpp____WorldContext__pf) == 0x000038, "Member 'BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio, bpp__Result__pf) == 0x000040, "Member 'BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio::bpp__Result__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio, bpp__bUsedTargetBone__pf) == 0x00004C, "Member 'BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio::bpp__bUsedTargetBone__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio, bpp__Alpha__pf) == 0x000050, "Member 'BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio::bpp__Alpha__pf' has a wrong offset!");

}

