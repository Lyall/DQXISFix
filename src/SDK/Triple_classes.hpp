#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Triple

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class Triple.TripleCheatManager
// 0x0000 (0x0038 - 0x0038)
class UTripleCheatManager final : public UObject
{
public:
	void TripleAchievementListLogOutput();
	void TripleBattleBukiGuard(int32 Kind);
	void TripleBattleCommandAIActionPattern(int32 Index0, int32 Index1, int32 Index2, int32 Index3, int32 Index4, int32 Index5);
	void TripleBattleCommandAIInfo();
	void TripleBattleCommandAIReset();
	void TripleBattleCommandAISetActionNo(int32 GroupIndex, int32 Index_0, int32 ActionNo);
	void TripleBattleCommandAISetConfuseKindMonster(int32 GroupIndex, int32 Index_0, int32 Kind);
	void TripleBattleCommandAISetConfuseKindPlayer(int32 PlayerId, int32 Kind);
	void TripleBattleCommandAISetSlotNo(int32 GroupIndex, int32 Index_0, int32 SlotNo);
	void TripleBattleCounter(int32 Kind);
	void TripleBattleCritical(bool Flag);
	void TripleBattleDeadMonster(int32 GroupIndex, int32 Index_0);
	void TripleBattleDeadPlayer(int32 PlayerIdNum);
	void TripleBattleEncountMonsterForceDropMonster(bool Flag);
	void TripleBattleEncountMonsterForceFirstAttack(int32 Kind);
	void TripleBattleEncountMonsterForceMetal(bool Flag);
	void TripleBattleEncountMonsterForceTensei(bool Flag);
	void TripleBattleEncountMonsterReset();
	void TripleBattleEncountMonsterSet(const class FString& MonsterID, int32 Num);
	void TripleBattleEncountMonsterSet2(const class FString& MonsterID0, int32 Num0, const class FString& MonsterID1, int32 Num1);
	void TripleBattleEncountMonsterSet3(const class FString& MonsterID0, int32 Num0, const class FString& MonsterID1, int32 Num1, const class FString& MonsterID2, int32 Num2);
	void TripleBattleEncountMonsterSet4(const class FString& MonsterID0, int32 Num0, const class FString& MonsterID1, int32 Num1, const class FString& MonsterID2, int32 Num2, const class FString& MonsterID3, int32 Num3);
	void TripleBattleHazukasiiNoroiSetMessage(int32 Index_0);
	void TripleBattleLose();
	void TripleBattleMikawasi(int32 Kind);
	void TripleBattleMiss(bool Flag);
	void TripleBattleMitoreru(int32 Kind);
	void TripleBattleNigeru(int32 Kind);
	void TripleBattleOddEffect(int32 Kind);
	void TripleBattleSenseiKougeki(int32 Kind);
	void TripleBattleTateGuard(int32 Kind);
	void TripleBattleTurnSkip(int32 Kind);
	void TripleDisplayCoinInfo();
	void TripleExecAutoSave();
	void TripleExecDTCommand(const class FString& Category, int32 Value1, int32 Value2, const class FString& Cmd);
	void TripleExecReincarnation(const class FString& ReincarnationId);
	void TripleExecRevival(int32 RevivalId);
	void TripleForceAcquireAchievement(const class FString& AchievementID);
	void TripleForceAcquireAchievementAll();
	void TripleForceAddCasinoCoinNum(int32 Num);
	void TripleForceAddSmallMedalNum(int32 Num);
	void TripleForceDiscardItem(const class FString& ItemID);
	void TripleForceGetItem(const class FString& ItemID, int32 Num);
	void TripleForceGetItemToBag(const class FString& ItemID, int32 Num);
	void TripleForceLearningRecipeBookAll();
	void TripleForceLearningRecipeBookFromItemId(const class FString& ItemID);
	void TripleForceRecordExecuteRenkei(const class FString& RenkeiID);
	void TripleForceRecordRideMonster(const class FString& EnemyID);
	void TripleForceSetCampCount(int32 Num);
	void TripleForceSetDefeatMonsterCount(const class FString& MonsterID, int32 Count);
	void TripleForceSetDefeatMonsterZukanCount(int32 MonsterZukanID, int32 Count);
	void TripleForceSetFusigikajiCreatedFlag(const class FString& ItemID, bool Flag);
	void TripleForceSetFusigikajiPlayCount(int32 Num);
	void TripleForceSetFusigikajiRetryCount(int32 Num);
	void TripleForceSetFusigikajiSuccessCount(int32 Num);
	void TripleForceSetGrassItemUseCount(int32 Num);
	void TripleForceSetInnStayCount(int32 Num);
	void TripleForceSetObjectDestructionCount(int32 Num);
	void TripleForceSetRenkeiUseCount(int32 Num);
	void TripleForceSetSibariPlayFlag(int32 Kind, bool Valid);
	void TripleFriendJoin(int32 PlayerIdNum);
	void TripleFriendLeave(int32 PlayerIdNum);
	void TripleGold(int32 AddNum);
	void TripleHpSet(const class FString& CharaID, int32 HP);
	void TripleLevelSet(const class FString& CharaID, int32 Lv);
	void TripleMpSet(const class FString& CharaID, int32 MP);
	void TripleMugenMP(int32 Kind);
	void TripleOddEffectClearBadMonster(int32 GroupIndex, int32 Index_0);
	void TripleOddEffectClearBadPlayer(int32 PlayerIdNum);
	void TripleOddEffectClearGoodMonster(int32 GroupIndex, int32 Index_0);
	void TripleOddEffectClearGoodPlayer(int32 PlayerIdNum);
	void TripleOutputGameDataText();
	void TripleOutputManagerAddr();
	void TripleOutputVersion();
	void TriplePrintText(const class FString& InTextId);
	void TriplePrintTextArgs(const TArray<class FString>& ParamList);
	void TripleQuestProgressSetEnd(const class FString& QuestId);
	void TripleReturnTitle();
	void TripleRunRate(float Rate);
	void TripleRuraShowAll();
	void TripleSenrekiAndTabinokokoroeOpenAll();
	void TripleSetBattleVictory(int32 Count);
	void TripleSetGameplayTime(int32 Sec);
	void TripleSetTalker(const class FString& InNpcId);
	void TripleSetTalkerName(const class FString& InNpcName);
	void TripleSkillJumonOpen(const class FString& SkillJumonID);
	void TripleSkillOpen(const class FString& SkillID);
	void TripleSkillOpen2(const class FString& SkillID, int32 PlayerId);
	void TripleSkillPassiveOpen(const class FString& SkillPassiveID);
	void TripleTimeZoneInfo();
	void TripleTimeZoneMoveToNext();
	void TripleTimeZoneOverride(int32 Timezone);
	void TripleTrophiesCompleteWait(bool bIsWaitMode);
	void TripleTrophiesNew(int32 InTestNumber);
	void TripleTrophiesReacquiredUE4Achievement();
	void TripleWeatherSet(int32 Kind);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TripleCheatManager">();
	}
	static class UTripleCheatManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTripleCheatManager>();
	}
};
static_assert(alignof(UTripleCheatManager) == 0x000008, "Wrong alignment on UTripleCheatManager");
static_assert(sizeof(UTripleCheatManager) == 0x000038, "Wrong size on UTripleCheatManager");

// Class Triple.TripleUtils
// 0x0000 (0x0038 - 0x0038)
class UTripleUtils final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TripleUtils">();
	}
	static class UTripleUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTripleUtils>();
	}
};
static_assert(alignof(UTripleUtils) == 0x000008, "Wrong alignment on UTripleUtils");
static_assert(sizeof(UTripleUtils) == 0x000038, "Wrong size on UTripleUtils");

}

