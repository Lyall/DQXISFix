#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Menu_Tokugi_Piece_Question_000

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "JackGame_structs.hpp"
#include "JackGame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Menu_Tokugi_Piece_Question_000.WBP_Menu_Tokugi_Piece_Question_000_C
// 0x00A0 (0x03A8 - 0x0308)
class UWBP_Menu_Tokugi_Piece_Question_000_C final : public UJackUMGTokugiQuestion
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0308(0x0008)(Transient, DuplicateTransient)
	class UImage*                                 Face_Bright;                                       // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Face_Dark;                                         // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Icon_Parts_Q;                                      // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           IconRoot;                                          // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FVector2D                              Position;                                          // 0x0330(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CrackDirList;                                      // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FVector2D                              BgScroll;                                          // 0x0350(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   EventEndCloseAnim;                                 // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FJackUMGTokugiPanelAnimData            AnimData;                                          // 0x0368(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void EventEndCloseAnim__DelegateSignature();
	void ExecuteUbergraph_WBP_Menu_Tokugi_Piece_Question_000(int32 EntryPoint);
	void AnimCrack(const struct FJackUMGTokugiPanelAnimData& AnimData_0);
	void AnimResetClose();
	void AnimResetCancelCrack();
	void PlayAnimData(const struct FJackUMGTokugiPanelAnimData& AnimData_0);
	void OnAnimationFinished(const class UWidgetAnimation* Animation);
	void AnimCancelCrack();
	void AnimClose();
	void AnimStateClose();
	void SetBackGroundScroll(const struct FVector2D& BgScroll_0);
	void Open(const TArray<int32>& DirList);
	void SetPieceData(class UJackUMGTokugiPanelData* Data);
	void SetPosAndScale(const struct FVector2D& Position_0, float Scale_0, const struct FVector2D& BgScroll_0);
	void SetDisplayScale(float DisplayScale);
	void SetPosition(const struct FVector2D& Pos);
	void UpdateDisplay();
	void Construct();
	void AnimToCloseOrCrack(EJackTokugiQuestionAnim AnimTypeToDark, EJackTokugiQuestionAnim AnimTypeToBright, bool bReverse);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Menu_Tokugi_Piece_Question_000_C">();
	}
	static class UWBP_Menu_Tokugi_Piece_Question_000_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Menu_Tokugi_Piece_Question_000_C>();
	}
};
static_assert(alignof(UWBP_Menu_Tokugi_Piece_Question_000_C) == 0x000008, "Wrong alignment on UWBP_Menu_Tokugi_Piece_Question_000_C");
static_assert(sizeof(UWBP_Menu_Tokugi_Piece_Question_000_C) == 0x0003A8, "Wrong size on UWBP_Menu_Tokugi_Piece_Question_000_C");
static_assert(offsetof(UWBP_Menu_Tokugi_Piece_Question_000_C, UberGraphFrame) == 0x000308, "Member 'UWBP_Menu_Tokugi_Piece_Question_000_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Tokugi_Piece_Question_000_C, Face_Bright) == 0x000310, "Member 'UWBP_Menu_Tokugi_Piece_Question_000_C::Face_Bright' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Tokugi_Piece_Question_000_C, Face_Dark) == 0x000318, "Member 'UWBP_Menu_Tokugi_Piece_Question_000_C::Face_Dark' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Tokugi_Piece_Question_000_C, Icon_Parts_Q) == 0x000320, "Member 'UWBP_Menu_Tokugi_Piece_Question_000_C::Icon_Parts_Q' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Tokugi_Piece_Question_000_C, IconRoot) == 0x000328, "Member 'UWBP_Menu_Tokugi_Piece_Question_000_C::IconRoot' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Tokugi_Piece_Question_000_C, Position) == 0x000330, "Member 'UWBP_Menu_Tokugi_Piece_Question_000_C::Position' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Tokugi_Piece_Question_000_C, Scale) == 0x000338, "Member 'UWBP_Menu_Tokugi_Piece_Question_000_C::Scale' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Tokugi_Piece_Question_000_C, CrackDirList) == 0x000340, "Member 'UWBP_Menu_Tokugi_Piece_Question_000_C::CrackDirList' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Tokugi_Piece_Question_000_C, BgScroll) == 0x000350, "Member 'UWBP_Menu_Tokugi_Piece_Question_000_C::BgScroll' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Tokugi_Piece_Question_000_C, EventEndCloseAnim) == 0x000358, "Member 'UWBP_Menu_Tokugi_Piece_Question_000_C::EventEndCloseAnim' has a wrong offset!");
static_assert(offsetof(UWBP_Menu_Tokugi_Piece_Question_000_C, AnimData) == 0x000368, "Member 'UWBP_Menu_Tokugi_Piece_Question_000_C::AnimData' has a wrong offset!");

}

