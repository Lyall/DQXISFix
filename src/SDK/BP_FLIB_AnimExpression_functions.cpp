#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FLIB_AnimExpression

#include "Basic.hpp"

#include "BP_FLIB_AnimExpression_classes.hpp"
#include "BP_FLIB_AnimExpression_parameters.hpp"


namespace SDK
{

// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.AddRotOffset
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__TargetBone__pf                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__TargetRot__pf                                     (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FSTRUCT_AnimExpressionBonesName  bpp__AnimExpInfo__pf                                   (Parm, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__Result__pf                                        (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::AddRotOffset(class ACharacter* bpp__Character__pf, class FName bpp__TargetBone__pf, const struct FRotator& bpp__TargetRot__pf, const struct FSTRUCT_AnimExpressionBonesName& bpp__AnimExpInfo__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "AddRotOffset");

	Params::BP_FLIB_AnimExpression_C_AddRotOffset Parms{};

	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp__TargetBone__pf = bpp__TargetBone__pf;
	Parms.bpp__TargetRot__pf = std::move(bpp__TargetRot__pf);
	Parms.bpp__AnimExpInfo__pf = std::move(bpp__AnimExpInfo__pf);
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__Result__pf != nullptr)
		*bpp__Result__pf = std::move(Parms.bpp__Result__pf);
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneA.Rot-BoneB.Rot
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneA__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneB__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__Result__pf                                        (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::BoneA_RotMinusBoneB_Rot(class ACharacter* bpp__Character__pf, class FName bpp__BoneA__pf, class FName bpp__BoneB__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "BoneA.Rot-BoneB.Rot");

	Params::BP_FLIB_AnimExpression_C_BoneA_RotMinusBoneB_Rot Parms{};

	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp__BoneA__pf = bpp__BoneA__pf;
	Parms.bpp__BoneB__pf = bpp__BoneB__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__Result__pf != nullptr)
		*bpp__Result__pf = std::move(Parms.bpp__Result__pf);
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneA.Rot+BoneB.Rot
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneA__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneB__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__Result__pf                                        (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::BoneA_RotPlusBoneB_Rot(class ACharacter* bpp__Character__pf, class FName bpp__BoneA__pf, class FName bpp__BoneB__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "BoneA.Rot+BoneB.Rot");

	Params::BP_FLIB_AnimExpression_C_BoneA_RotPlusBoneB_Rot Parms{};

	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp__BoneA__pf = bpp__BoneA__pf;
	Parms.bpp__BoneB__pf = bpp__BoneB__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__Result__pf != nullptr)
		*bpp__Result__pf = std::move(Parms.bpp__Result__pf);
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneEx8WayRot
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    bpp__Enable__pf                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__LeftThighBone__pf                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__RightThighBone__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__SouthBone__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__SouthWestBone__pf                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__SouthWestWestRatio__pf                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__WestBone__pf                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__NorthWestWestRatio__pf                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__NorthWestLerpRatio__pf                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__NorthBone__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__NorthEastLerpRatio__pf                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__NorthEastEastRatio__pf                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__EastBone__pf                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__SouthEastEastRatio__pf                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__SouthEastBone__pf                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__SouthSouthEastRatio__pf                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSTRUCT_AnimExpressionBonesName  bpp__AnimExpInfo__pf                                   (Parm, NativeAccessSpecifierPublic)
// bool                                    bpp__Debug__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__South__pf                                         (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__SouthWest__pf                                     (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__SouthWestWest__pf                                 (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__West__pf                                          (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__NorthWestWest__pf                                 (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__NorthWest__pf                                     (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__North__pf                                         (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__NorthEast__pf                                     (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__NorthEastEast__pf                                 (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__East__pf                                          (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__SouthEastEast__pf                                 (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__SouthEast__pf                                     (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__SouthSouthEast__pf                                (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::BoneEx8WayRot(bool bpp__Enable__pf, class ACharacter* bpp__Character__pf, class FName bpp__LeftThighBone__pf, class FName bpp__RightThighBone__pf, class FName bpp__SouthBone__pf, class FName bpp__SouthWestBone__pf, float bpp__SouthWestWestRatio__pf, class FName bpp__WestBone__pf, float bpp__NorthWestWestRatio__pf, float bpp__NorthWestLerpRatio__pf, class FName bpp__NorthBone__pf, float bpp__NorthEastLerpRatio__pf, float bpp__NorthEastEastRatio__pf, class FName bpp__EastBone__pf, float bpp__SouthEastEastRatio__pf, class FName bpp__SouthEastBone__pf, float bpp__SouthSouthEastRatio__pf, const struct FSTRUCT_AnimExpressionBonesName& bpp__AnimExpInfo__pf, bool bpp__Debug__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__South__pf, struct FRotator* bpp__SouthWest__pf, struct FRotator* bpp__SouthWestWest__pf, struct FRotator* bpp__West__pf, struct FRotator* bpp__NorthWestWest__pf, struct FRotator* bpp__NorthWest__pf, struct FRotator* bpp__North__pf, struct FRotator* bpp__NorthEast__pf, struct FRotator* bpp__NorthEastEast__pf, struct FRotator* bpp__East__pf, struct FRotator* bpp__SouthEastEast__pf, struct FRotator* bpp__SouthEast__pf, struct FRotator* bpp__SouthSouthEast__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "BoneEx8WayRot");

	Params::BP_FLIB_AnimExpression_C_BoneEx8WayRot Parms{};

	Parms.bpp__Enable__pf = bpp__Enable__pf;
	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp__LeftThighBone__pf = bpp__LeftThighBone__pf;
	Parms.bpp__RightThighBone__pf = bpp__RightThighBone__pf;
	Parms.bpp__SouthBone__pf = bpp__SouthBone__pf;
	Parms.bpp__SouthWestBone__pf = bpp__SouthWestBone__pf;
	Parms.bpp__SouthWestWestRatio__pf = bpp__SouthWestWestRatio__pf;
	Parms.bpp__WestBone__pf = bpp__WestBone__pf;
	Parms.bpp__NorthWestWestRatio__pf = bpp__NorthWestWestRatio__pf;
	Parms.bpp__NorthWestLerpRatio__pf = bpp__NorthWestLerpRatio__pf;
	Parms.bpp__NorthBone__pf = bpp__NorthBone__pf;
	Parms.bpp__NorthEastLerpRatio__pf = bpp__NorthEastLerpRatio__pf;
	Parms.bpp__NorthEastEastRatio__pf = bpp__NorthEastEastRatio__pf;
	Parms.bpp__EastBone__pf = bpp__EastBone__pf;
	Parms.bpp__SouthEastEastRatio__pf = bpp__SouthEastEastRatio__pf;
	Parms.bpp__SouthEastBone__pf = bpp__SouthEastBone__pf;
	Parms.bpp__SouthSouthEastRatio__pf = bpp__SouthSouthEastRatio__pf;
	Parms.bpp__AnimExpInfo__pf = std::move(bpp__AnimExpInfo__pf);
	Parms.bpp__Debug__pf = bpp__Debug__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__South__pf != nullptr)
		*bpp__South__pf = std::move(Parms.bpp__South__pf);

	if (bpp__SouthWest__pf != nullptr)
		*bpp__SouthWest__pf = std::move(Parms.bpp__SouthWest__pf);

	if (bpp__SouthWestWest__pf != nullptr)
		*bpp__SouthWestWest__pf = std::move(Parms.bpp__SouthWestWest__pf);

	if (bpp__West__pf != nullptr)
		*bpp__West__pf = std::move(Parms.bpp__West__pf);

	if (bpp__NorthWestWest__pf != nullptr)
		*bpp__NorthWestWest__pf = std::move(Parms.bpp__NorthWestWest__pf);

	if (bpp__NorthWest__pf != nullptr)
		*bpp__NorthWest__pf = std::move(Parms.bpp__NorthWest__pf);

	if (bpp__North__pf != nullptr)
		*bpp__North__pf = std::move(Parms.bpp__North__pf);

	if (bpp__NorthEast__pf != nullptr)
		*bpp__NorthEast__pf = std::move(Parms.bpp__NorthEast__pf);

	if (bpp__NorthEastEast__pf != nullptr)
		*bpp__NorthEastEast__pf = std::move(Parms.bpp__NorthEastEast__pf);

	if (bpp__East__pf != nullptr)
		*bpp__East__pf = std::move(Parms.bpp__East__pf);

	if (bpp__SouthEastEast__pf != nullptr)
		*bpp__SouthEastEast__pf = std::move(Parms.bpp__SouthEastEast__pf);

	if (bpp__SouthEast__pf != nullptr)
		*bpp__SouthEast__pf = std::move(Parms.bpp__SouthEast__pf);

	if (bpp__SouthSouthEast__pf != nullptr)
		*bpp__SouthSouthEast__pf = std::move(Parms.bpp__SouthSouthEast__pf);
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneEx8WaySwitchTrace
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    bpp__Enable__pf                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__LeftThighBone__pf                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__RightThighBone__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__SouthBone__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__SouthWestBone__pf                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__SouthWestWestRatio__pf                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__WestBone__pf                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__NorthWestWestRatio__pf                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__NorthWestLerpRatio__pf                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__NorthBone__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__NorthEastLerpRatio__pf                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__NorthEastEastRatio__pf                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__EastBone__pf                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__SouthEastEastRatio__pf                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__SouthEastBone__pf                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__SouthSouthEastRatio__pf                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSTRUCT_AnimExpressionBonesName  bpp__AnimExpInfo__pf                                   (Parm, NativeAccessSpecifierPublic)
// bool                                    bpp__Debug__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__South__pf                                         (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__SouthWest__pf                                     (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__SouthWestWest__pf                                 (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__West__pf                                          (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__NorthWestWest__pf                                 (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__NorthWest__pf                                     (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__North__pf                                         (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__NorthEast__pf                                     (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__NorthEastEast__pf                                 (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__East__pf                                          (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__SouthEastEast__pf                                 (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__SouthEast__pf                                     (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__SouthSouthEast__pf                                (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class USkinnedMeshComponent*            bpp__OutputPin__pf                                     (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::BoneEx8WaySwitchTrace(bool bpp__Enable__pf, class ACharacter* bpp__Character__pf, class FName bpp__LeftThighBone__pf, class FName bpp__RightThighBone__pf, class FName bpp__SouthBone__pf, class FName bpp__SouthWestBone__pf, float bpp__SouthWestWestRatio__pf, class FName bpp__WestBone__pf, float bpp__NorthWestWestRatio__pf, float bpp__NorthWestLerpRatio__pf, class FName bpp__NorthBone__pf, float bpp__NorthEastLerpRatio__pf, float bpp__NorthEastEastRatio__pf, class FName bpp__EastBone__pf, float bpp__SouthEastEastRatio__pf, class FName bpp__SouthEastBone__pf, float bpp__SouthSouthEastRatio__pf, const struct FSTRUCT_AnimExpressionBonesName& bpp__AnimExpInfo__pf, bool bpp__Debug__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__South__pf, struct FRotator* bpp__SouthWest__pf, struct FRotator* bpp__SouthWestWest__pf, struct FRotator* bpp__West__pf, struct FRotator* bpp__NorthWestWest__pf, struct FRotator* bpp__NorthWest__pf, struct FRotator* bpp__North__pf, struct FRotator* bpp__NorthEast__pf, struct FRotator* bpp__NorthEastEast__pf, struct FRotator* bpp__East__pf, struct FRotator* bpp__SouthEastEast__pf, struct FRotator* bpp__SouthEast__pf, struct FRotator* bpp__SouthSouthEast__pf, class USkinnedMeshComponent** bpp__OutputPin__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "BoneEx8WaySwitchTrace");

	Params::BP_FLIB_AnimExpression_C_BoneEx8WaySwitchTrace Parms{};

	Parms.bpp__Enable__pf = bpp__Enable__pf;
	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp__LeftThighBone__pf = bpp__LeftThighBone__pf;
	Parms.bpp__RightThighBone__pf = bpp__RightThighBone__pf;
	Parms.bpp__SouthBone__pf = bpp__SouthBone__pf;
	Parms.bpp__SouthWestBone__pf = bpp__SouthWestBone__pf;
	Parms.bpp__SouthWestWestRatio__pf = bpp__SouthWestWestRatio__pf;
	Parms.bpp__WestBone__pf = bpp__WestBone__pf;
	Parms.bpp__NorthWestWestRatio__pf = bpp__NorthWestWestRatio__pf;
	Parms.bpp__NorthWestLerpRatio__pf = bpp__NorthWestLerpRatio__pf;
	Parms.bpp__NorthBone__pf = bpp__NorthBone__pf;
	Parms.bpp__NorthEastLerpRatio__pf = bpp__NorthEastLerpRatio__pf;
	Parms.bpp__NorthEastEastRatio__pf = bpp__NorthEastEastRatio__pf;
	Parms.bpp__EastBone__pf = bpp__EastBone__pf;
	Parms.bpp__SouthEastEastRatio__pf = bpp__SouthEastEastRatio__pf;
	Parms.bpp__SouthEastBone__pf = bpp__SouthEastBone__pf;
	Parms.bpp__SouthSouthEastRatio__pf = bpp__SouthSouthEastRatio__pf;
	Parms.bpp__AnimExpInfo__pf = std::move(bpp__AnimExpInfo__pf);
	Parms.bpp__Debug__pf = bpp__Debug__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__South__pf != nullptr)
		*bpp__South__pf = std::move(Parms.bpp__South__pf);

	if (bpp__SouthWest__pf != nullptr)
		*bpp__SouthWest__pf = std::move(Parms.bpp__SouthWest__pf);

	if (bpp__SouthWestWest__pf != nullptr)
		*bpp__SouthWestWest__pf = std::move(Parms.bpp__SouthWestWest__pf);

	if (bpp__West__pf != nullptr)
		*bpp__West__pf = std::move(Parms.bpp__West__pf);

	if (bpp__NorthWestWest__pf != nullptr)
		*bpp__NorthWestWest__pf = std::move(Parms.bpp__NorthWestWest__pf);

	if (bpp__NorthWest__pf != nullptr)
		*bpp__NorthWest__pf = std::move(Parms.bpp__NorthWest__pf);

	if (bpp__North__pf != nullptr)
		*bpp__North__pf = std::move(Parms.bpp__North__pf);

	if (bpp__NorthEast__pf != nullptr)
		*bpp__NorthEast__pf = std::move(Parms.bpp__NorthEast__pf);

	if (bpp__NorthEastEast__pf != nullptr)
		*bpp__NorthEastEast__pf = std::move(Parms.bpp__NorthEastEast__pf);

	if (bpp__East__pf != nullptr)
		*bpp__East__pf = std::move(Parms.bpp__East__pf);

	if (bpp__SouthEastEast__pf != nullptr)
		*bpp__SouthEastEast__pf = std::move(Parms.bpp__SouthEastEast__pf);

	if (bpp__SouthEast__pf != nullptr)
		*bpp__SouthEast__pf = std::move(Parms.bpp__SouthEast__pf);

	if (bpp__SouthSouthEast__pf != nullptr)
		*bpp__SouthSouthEast__pf = std::move(Parms.bpp__SouthSouthEast__pf);

	if (bpp__OutputPin__pf != nullptr)
		*bpp__OutputPin__pf = Parms.bpp__OutputPin__pf;
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneExAimRot
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    bpp__Enable__pf                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__EnableAim__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneA__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneA_Child__pf                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneB__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneB_Child__pf                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__X1__pf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__Y1__pf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__Z1__pf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__AimOffset__pf                                     (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__TargetBone__pf                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSTRUCT_AnimExpressionBonesName  bpp__AnimExpInfo__pf                                   (Parm, NativeAccessSpecifierPublic)
// bool                                    bpp__bClampByPositiveRange__pf                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENUM_RotAxis                            bpp__SelectClampAxis__pf                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__bExceptionClampRot__pf                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENUM_CoordinateMeshSlot                 bpp__PartsSlot__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__bUseAimToCenterLocation__pf                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__Result__pf                                        (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          bpp__Location__pf                                      (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__bUsedTargetBone__pf                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__Alpha__pf                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::BoneExAimRot(bool bpp__Enable__pf, bool bpp__EnableAim__pf, class ACharacter* bpp__Character__pf, class FName bpp__BoneA__pf, class FName bpp__BoneA_Child__pf, class FName bpp__BoneB__pf, class FName bpp__BoneB_Child__pf, float bpp__X1__pf, float bpp__Y1__pf, float bpp__Z1__pf, const struct FVector& bpp__AimOffset__pf, class FName bpp__TargetBone__pf, const struct FSTRUCT_AnimExpressionBonesName& bpp__AnimExpInfo__pf, bool bpp__bClampByPositiveRange__pf, ENUM_RotAxis bpp__SelectClampAxis__pf, bool bpp__bExceptionClampRot__pf, ENUM_CoordinateMeshSlot bpp__PartsSlot__pf, bool bpp__bUseAimToCenterLocation__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf, struct FVector* bpp__Location__pf, bool* bpp__bUsedTargetBone__pf, float* bpp__Alpha__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "BoneExAimRot");

	Params::BP_FLIB_AnimExpression_C_BoneExAimRot Parms{};

	Parms.bpp__Enable__pf = bpp__Enable__pf;
	Parms.bpp__EnableAim__pf = bpp__EnableAim__pf;
	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp__BoneA__pf = bpp__BoneA__pf;
	Parms.bpp__BoneA_Child__pf = bpp__BoneA_Child__pf;
	Parms.bpp__BoneB__pf = bpp__BoneB__pf;
	Parms.bpp__BoneB_Child__pf = bpp__BoneB_Child__pf;
	Parms.bpp__X1__pf = bpp__X1__pf;
	Parms.bpp__Y1__pf = bpp__Y1__pf;
	Parms.bpp__Z1__pf = bpp__Z1__pf;
	Parms.bpp__AimOffset__pf = std::move(bpp__AimOffset__pf);
	Parms.bpp__TargetBone__pf = bpp__TargetBone__pf;
	Parms.bpp__AnimExpInfo__pf = std::move(bpp__AnimExpInfo__pf);
	Parms.bpp__bClampByPositiveRange__pf = bpp__bClampByPositiveRange__pf;
	Parms.bpp__SelectClampAxis__pf = bpp__SelectClampAxis__pf;
	Parms.bpp__bExceptionClampRot__pf = bpp__bExceptionClampRot__pf;
	Parms.bpp__PartsSlot__pf = bpp__PartsSlot__pf;
	Parms.bpp__bUseAimToCenterLocation__pf = bpp__bUseAimToCenterLocation__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__Result__pf != nullptr)
		*bpp__Result__pf = std::move(Parms.bpp__Result__pf);

	if (bpp__Location__pf != nullptr)
		*bpp__Location__pf = std::move(Parms.bpp__Location__pf);

	if (bpp__bUsedTargetBone__pf != nullptr)
		*bpp__bUsedTargetBone__pf = Parms.bpp__bUsedTargetBone__pf;

	if (bpp__Alpha__pf != nullptr)
		*bpp__Alpha__pf = Parms.bpp__Alpha__pf;
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneExAverageRot
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    bpp__Enable__pf                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneA__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneB__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__X1__pf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__Y1__pf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__Z1__pf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__TargetBone__pf                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSTRUCT_AnimExpressionBonesName  bpp__AnimExpInfo__pf                                   (Parm, NativeAccessSpecifierPublic)
// ENUM_CoordinateMeshSlot                 bpp__MeshSlot__pf                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__bUseClamp__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__ClampMin__pf                                      (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__ClampMax__pf                                      (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__bUseDataTable__pf                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__SkipRotOffset__pf                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__Result__pf                                        (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bpp__bUsedTargetBone__pf                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__Alpha__pf                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::BoneExAverageRot(bool bpp__Enable__pf, class ACharacter* bpp__Character__pf, class FName bpp__BoneA__pf, class FName bpp__BoneB__pf, float bpp__X1__pf, float bpp__Y1__pf, float bpp__Z1__pf, class FName bpp__TargetBone__pf, const struct FSTRUCT_AnimExpressionBonesName& bpp__AnimExpInfo__pf, ENUM_CoordinateMeshSlot bpp__MeshSlot__pf, bool bpp__bUseClamp__pf, const struct FVector& bpp__ClampMin__pf, const struct FVector& bpp__ClampMax__pf, bool bpp__bUseDataTable__pf, bool bpp__SkipRotOffset__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf, bool* bpp__bUsedTargetBone__pf, float* bpp__Alpha__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "BoneExAverageRot");

	Params::BP_FLIB_AnimExpression_C_BoneExAverageRot Parms{};

	Parms.bpp__Enable__pf = bpp__Enable__pf;
	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp__BoneA__pf = bpp__BoneA__pf;
	Parms.bpp__BoneB__pf = bpp__BoneB__pf;
	Parms.bpp__X1__pf = bpp__X1__pf;
	Parms.bpp__Y1__pf = bpp__Y1__pf;
	Parms.bpp__Z1__pf = bpp__Z1__pf;
	Parms.bpp__TargetBone__pf = bpp__TargetBone__pf;
	Parms.bpp__AnimExpInfo__pf = std::move(bpp__AnimExpInfo__pf);
	Parms.bpp__MeshSlot__pf = bpp__MeshSlot__pf;
	Parms.bpp__bUseClamp__pf = bpp__bUseClamp__pf;
	Parms.bpp__ClampMin__pf = std::move(bpp__ClampMin__pf);
	Parms.bpp__ClampMax__pf = std::move(bpp__ClampMax__pf);
	Parms.bpp__bUseDataTable__pf = bpp__bUseDataTable__pf;
	Parms.bpp__SkipRotOffset__pf = bpp__SkipRotOffset__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__Result__pf != nullptr)
		*bpp__Result__pf = std::move(Parms.bpp__Result__pf);

	if (bpp__bUsedTargetBone__pf != nullptr)
		*bpp__bUsedTargetBone__pf = Parms.bpp__bUsedTargetBone__pf;

	if (bpp__Alpha__pf != nullptr)
		*bpp__Alpha__pf = Parms.bpp__Alpha__pf;
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneExAverageRotArray
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    bpp__Enable__pf                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneA__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneB__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__X1__pf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__Y1__pf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__Z1__pf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     bpp__TargetBone__pf                                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FSTRUCT_AnimExpressionBonesName  bpp__AnimExpInfo__pf                                   (Parm, NativeAccessSpecifierPublic)
// ENUM_CoordinateMeshSlot                 bpp__MeshSlot__pf                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__bClamp__pf                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__ClampMin__pf                                      (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__ClampMax__pf                                      (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__SkipRotOffset__pf                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__Result__pf                                        (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bpp__bUsedTargetBone__pf                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__TargetBoneName__pf                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__Alpha__pf                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::BoneExAverageRotArray(bool bpp__Enable__pf, class ACharacter* bpp__Character__pf, class FName bpp__BoneA__pf, class FName bpp__BoneB__pf, float bpp__X1__pf, float bpp__Y1__pf, float bpp__Z1__pf, TArray<class FName>* bpp__TargetBone__pf, const struct FSTRUCT_AnimExpressionBonesName& bpp__AnimExpInfo__pf, ENUM_CoordinateMeshSlot bpp__MeshSlot__pf, bool bpp__bClamp__pf, const struct FVector& bpp__ClampMin__pf, const struct FVector& bpp__ClampMax__pf, bool bpp__SkipRotOffset__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf, bool* bpp__bUsedTargetBone__pf, class FName* bpp__TargetBoneName__pf, float* bpp__Alpha__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "BoneExAverageRotArray");

	Params::BP_FLIB_AnimExpression_C_BoneExAverageRotArray Parms{};

	Parms.bpp__Enable__pf = bpp__Enable__pf;
	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp__BoneA__pf = bpp__BoneA__pf;
	Parms.bpp__BoneB__pf = bpp__BoneB__pf;
	Parms.bpp__X1__pf = bpp__X1__pf;
	Parms.bpp__Y1__pf = bpp__Y1__pf;
	Parms.bpp__Z1__pf = bpp__Z1__pf;
	Parms.bpp__AnimExpInfo__pf = std::move(bpp__AnimExpInfo__pf);
	Parms.bpp__MeshSlot__pf = bpp__MeshSlot__pf;
	Parms.bpp__bClamp__pf = bpp__bClamp__pf;
	Parms.bpp__ClampMin__pf = std::move(bpp__ClampMin__pf);
	Parms.bpp__ClampMax__pf = std::move(bpp__ClampMax__pf);
	Parms.bpp__SkipRotOffset__pf = bpp__SkipRotOffset__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__TargetBone__pf != nullptr)
		*bpp__TargetBone__pf = std::move(Parms.bpp__TargetBone__pf);

	if (bpp__Result__pf != nullptr)
		*bpp__Result__pf = std::move(Parms.bpp__Result__pf);

	if (bpp__bUsedTargetBone__pf != nullptr)
		*bpp__bUsedTargetBone__pf = Parms.bpp__bUsedTargetBone__pf;

	if (bpp__TargetBoneName__pf != nullptr)
		*bpp__TargetBoneName__pf = Parms.bpp__TargetBoneName__pf;

	if (bpp__Alpha__pf != nullptr)
		*bpp__Alpha__pf = Parms.bpp__Alpha__pf;
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneExCollideSkirtAlpha
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__UpLegBone__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__LegBone__pf                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__SkirtBone__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__MarginRate__pf                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__Alpha__pf                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::BoneExCollideSkirtAlpha(class ACharacter* bpp__Character__pf, class FName bpp__UpLegBone__pf, class FName bpp__LegBone__pf, class FName bpp__SkirtBone__pf, float bpp__MarginRate__pf, class UObject* bpp____WorldContext__pf, float* bpp__Alpha__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "BoneExCollideSkirtAlpha");

	Params::BP_FLIB_AnimExpression_C_BoneExCollideSkirtAlpha Parms{};

	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp__UpLegBone__pf = bpp__UpLegBone__pf;
	Parms.bpp__LegBone__pf = bpp__LegBone__pf;
	Parms.bpp__SkirtBone__pf = bpp__SkirtBone__pf;
	Parms.bpp__MarginRate__pf = bpp__MarginRate__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__Alpha__pf != nullptr)
		*bpp__Alpha__pf = Parms.bpp__Alpha__pf;
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneExCompositeByRotZ
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    bpp__Enable__pf                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneA__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneB__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__X1__pf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__Y1__pf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__Z1__pf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__TargetBone__pf                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSTRUCT_AnimExpressionBonesName  bpp__AnimExpInfo__pf                                   (Parm, NativeAccessSpecifierPublic)
// ENUM_CoordinateMeshSlot                 bpp__PartsSlot__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__bUseDataTable__pf                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__Result__pf                                        (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bpp__bUsedTargetBone__pf                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::BoneExCompositeByRotZ(bool bpp__Enable__pf, class ACharacter* bpp__Character__pf, class FName bpp__BoneA__pf, class FName bpp__BoneB__pf, float bpp__X1__pf, float bpp__Y1__pf, float bpp__Z1__pf, class FName bpp__TargetBone__pf, const struct FSTRUCT_AnimExpressionBonesName& bpp__AnimExpInfo__pf, ENUM_CoordinateMeshSlot bpp__PartsSlot__pf, bool bpp__bUseDataTable__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf, bool* bpp__bUsedTargetBone__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "BoneExCompositeByRotZ");

	Params::BP_FLIB_AnimExpression_C_BoneExCompositeByRotZ Parms{};

	Parms.bpp__Enable__pf = bpp__Enable__pf;
	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp__BoneA__pf = bpp__BoneA__pf;
	Parms.bpp__BoneB__pf = bpp__BoneB__pf;
	Parms.bpp__X1__pf = bpp__X1__pf;
	Parms.bpp__Y1__pf = bpp__Y1__pf;
	Parms.bpp__Z1__pf = bpp__Z1__pf;
	Parms.bpp__TargetBone__pf = bpp__TargetBone__pf;
	Parms.bpp__AnimExpInfo__pf = std::move(bpp__AnimExpInfo__pf);
	Parms.bpp__PartsSlot__pf = bpp__PartsSlot__pf;
	Parms.bpp__bUseDataTable__pf = bpp__bUseDataTable__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__Result__pf != nullptr)
		*bpp__Result__pf = std::move(Parms.bpp__Result__pf);

	if (bpp__bUsedTargetBone__pf != nullptr)
		*bpp__bUsedTargetBone__pf = Parms.bpp__bUsedTargetBone__pf;
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneExCopyRot
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    bpp__Enable__pf                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneA__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__X1__pf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__Y1__pf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__Z1__pf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__TargetBone__pf                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSTRUCT_AnimExpressionBonesName  bpp__AnimExpInfo__pf                                   (Parm, NativeAccessSpecifierPublic)
// ENUM_CoordinateMeshSlot                 bpp__MeshSlot__pf                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__bUseClamp__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__ClampMin__pf                                      (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__ClampMax__pf                                      (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__Result__pf                                        (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bpp__bUsedTargetBone__pf                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__Alpha__pf                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::BoneExCopyRot(bool bpp__Enable__pf, class ACharacter* bpp__Character__pf, class FName bpp__BoneA__pf, float bpp__X1__pf, float bpp__Y1__pf, float bpp__Z1__pf, class FName bpp__TargetBone__pf, const struct FSTRUCT_AnimExpressionBonesName& bpp__AnimExpInfo__pf, ENUM_CoordinateMeshSlot bpp__MeshSlot__pf, bool bpp__bUseClamp__pf, const struct FVector& bpp__ClampMin__pf, const struct FVector& bpp__ClampMax__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf, bool* bpp__bUsedTargetBone__pf, float* bpp__Alpha__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "BoneExCopyRot");

	Params::BP_FLIB_AnimExpression_C_BoneExCopyRot Parms{};

	Parms.bpp__Enable__pf = bpp__Enable__pf;
	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp__BoneA__pf = bpp__BoneA__pf;
	Parms.bpp__X1__pf = bpp__X1__pf;
	Parms.bpp__Y1__pf = bpp__Y1__pf;
	Parms.bpp__Z1__pf = bpp__Z1__pf;
	Parms.bpp__TargetBone__pf = bpp__TargetBone__pf;
	Parms.bpp__AnimExpInfo__pf = std::move(bpp__AnimExpInfo__pf);
	Parms.bpp__MeshSlot__pf = bpp__MeshSlot__pf;
	Parms.bpp__bUseClamp__pf = bpp__bUseClamp__pf;
	Parms.bpp__ClampMin__pf = std::move(bpp__ClampMin__pf);
	Parms.bpp__ClampMax__pf = std::move(bpp__ClampMax__pf);
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__Result__pf != nullptr)
		*bpp__Result__pf = std::move(Parms.bpp__Result__pf);

	if (bpp__bUsedTargetBone__pf != nullptr)
		*bpp__bUsedTargetBone__pf = Parms.bpp__bUsedTargetBone__pf;

	if (bpp__Alpha__pf != nullptr)
		*bpp__Alpha__pf = Parms.bpp__Alpha__pf;
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneExLerpFromRefPoseRotToCalcRot
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                         bpp__Rot__pf                                           (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__TargetBoneName__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENUM_CoordinateMeshSlot                 bpp__PartsSlot__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__LerpAlpha__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__Result__pf                                        (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   bpp__Alpha__pf                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::BoneExLerpFromRefPoseRotToCalcRot(const struct FRotator& bpp__Rot__pf, class ACharacter* bpp__Character__pf, class FName bpp__TargetBoneName__pf, ENUM_CoordinateMeshSlot bpp__PartsSlot__pf, float bpp__LerpAlpha__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf, float* bpp__Alpha__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "BoneExLerpFromRefPoseRotToCalcRot");

	Params::BP_FLIB_AnimExpression_C_BoneExLerpFromRefPoseRotToCalcRot Parms{};

	Parms.bpp__Rot__pf = std::move(bpp__Rot__pf);
	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp__TargetBoneName__pf = bpp__TargetBoneName__pf;
	Parms.bpp__PartsSlot__pf = bpp__PartsSlot__pf;
	Parms.bpp__LerpAlpha__pf = bpp__LerpAlpha__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__Result__pf != nullptr)
		*bpp__Result__pf = std::move(Parms.bpp__Result__pf);

	if (bpp__Alpha__pf != nullptr)
		*bpp__Alpha__pf = Parms.bpp__Alpha__pf;
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneExMaxOrMinRot
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    bpp__Enable__pf                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSTRUCT_AnimExpressionBonesName  bpp__AnimExpInfo__pf                                   (Parm, NativeAccessSpecifierPublic)
// class FName                             bpp__StateName__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSTRUCT_MaxOrMinRot              bpp__NodeParam__pf                                     (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   bpp__NodeIndex__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__bClampInRange__pf                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__ClampMin__pf                                      (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__ClampMax__pf                                      (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__Result__pf                                        (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bpp__bUsedTargetBone__pf                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__BoneA_Rot__pf                                     (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__BoneB_Rot__pf                                     (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   bpp__Alpha__pf                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::BoneExMaxOrMinRot(bool bpp__Enable__pf, class ACharacter* bpp__Character__pf, const struct FSTRUCT_AnimExpressionBonesName& bpp__AnimExpInfo__pf, class FName bpp__StateName__pf, const struct FSTRUCT_MaxOrMinRot& bpp__NodeParam__pf, int32 bpp__NodeIndex__pf, bool bpp__bClampInRange__pf, const struct FVector& bpp__ClampMin__pf, const struct FVector& bpp__ClampMax__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf, bool* bpp__bUsedTargetBone__pf, struct FRotator* bpp__BoneA_Rot__pf, struct FRotator* bpp__BoneB_Rot__pf, float* bpp__Alpha__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "BoneExMaxOrMinRot");

	Params::BP_FLIB_AnimExpression_C_BoneExMaxOrMinRot Parms{};

	Parms.bpp__Enable__pf = bpp__Enable__pf;
	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp__AnimExpInfo__pf = std::move(bpp__AnimExpInfo__pf);
	Parms.bpp__StateName__pf = bpp__StateName__pf;
	Parms.bpp__NodeParam__pf = std::move(bpp__NodeParam__pf);
	Parms.bpp__NodeIndex__pf = bpp__NodeIndex__pf;
	Parms.bpp__bClampInRange__pf = bpp__bClampInRange__pf;
	Parms.bpp__ClampMin__pf = std::move(bpp__ClampMin__pf);
	Parms.bpp__ClampMax__pf = std::move(bpp__ClampMax__pf);
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__Result__pf != nullptr)
		*bpp__Result__pf = std::move(Parms.bpp__Result__pf);

	if (bpp__bUsedTargetBone__pf != nullptr)
		*bpp__bUsedTargetBone__pf = Parms.bpp__bUsedTargetBone__pf;

	if (bpp__BoneA_Rot__pf != nullptr)
		*bpp__BoneA_Rot__pf = std::move(Parms.bpp__BoneA_Rot__pf);

	if (bpp__BoneB_Rot__pf != nullptr)
		*bpp__BoneB_Rot__pf = std::move(Parms.bpp__BoneB_Rot__pf);

	if (bpp__Alpha__pf != nullptr)
		*bpp__Alpha__pf = Parms.bpp__Alpha__pf;
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneExSwitchTrace
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    bpp__Enable__pf                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneA__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneB__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__X1__pf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__Y1__pf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__Z1__pf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__TargetBone__pf                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSTRUCT_AnimExpressionBonesName  bpp__AnimExpInfo__pf                                   (Parm, NativeAccessSpecifierPublic)
// ENUM_CoordinateMeshSlot                 bpp__MeshSlot__pf                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__bUseClamp__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__ClampMin__pf                                      (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__ClampMax__pf                                      (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__bUseDataTable__pf                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__SkipRotOffset__pf                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__PlaneNormal__pf                                   (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__PlaneOffset__pf                                   (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__UplegLength__pf                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__Result__pf                                        (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bpp__bUsedTargetBone__pf                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__Alpha__pf                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::BoneExSwitchTrace(bool bpp__Enable__pf, class ACharacter* bpp__Character__pf, class FName bpp__BoneA__pf, class FName bpp__BoneB__pf, float bpp__X1__pf, float bpp__Y1__pf, float bpp__Z1__pf, class FName bpp__TargetBone__pf, const struct FSTRUCT_AnimExpressionBonesName& bpp__AnimExpInfo__pf, ENUM_CoordinateMeshSlot bpp__MeshSlot__pf, bool bpp__bUseClamp__pf, const struct FVector& bpp__ClampMin__pf, const struct FVector& bpp__ClampMax__pf, bool bpp__bUseDataTable__pf, bool bpp__SkipRotOffset__pf, const struct FVector& bpp__PlaneNormal__pf, const struct FVector& bpp__PlaneOffset__pf, float bpp__UplegLength__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf, bool* bpp__bUsedTargetBone__pf, float* bpp__Alpha__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "BoneExSwitchTrace");

	Params::BP_FLIB_AnimExpression_C_BoneExSwitchTrace Parms{};

	Parms.bpp__Enable__pf = bpp__Enable__pf;
	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp__BoneA__pf = bpp__BoneA__pf;
	Parms.bpp__BoneB__pf = bpp__BoneB__pf;
	Parms.bpp__X1__pf = bpp__X1__pf;
	Parms.bpp__Y1__pf = bpp__Y1__pf;
	Parms.bpp__Z1__pf = bpp__Z1__pf;
	Parms.bpp__TargetBone__pf = bpp__TargetBone__pf;
	Parms.bpp__AnimExpInfo__pf = std::move(bpp__AnimExpInfo__pf);
	Parms.bpp__MeshSlot__pf = bpp__MeshSlot__pf;
	Parms.bpp__bUseClamp__pf = bpp__bUseClamp__pf;
	Parms.bpp__ClampMin__pf = std::move(bpp__ClampMin__pf);
	Parms.bpp__ClampMax__pf = std::move(bpp__ClampMax__pf);
	Parms.bpp__bUseDataTable__pf = bpp__bUseDataTable__pf;
	Parms.bpp__SkipRotOffset__pf = bpp__SkipRotOffset__pf;
	Parms.bpp__PlaneNormal__pf = std::move(bpp__PlaneNormal__pf);
	Parms.bpp__PlaneOffset__pf = std::move(bpp__PlaneOffset__pf);
	Parms.bpp__UplegLength__pf = bpp__UplegLength__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__Result__pf != nullptr)
		*bpp__Result__pf = std::move(Parms.bpp__Result__pf);

	if (bpp__bUsedTargetBone__pf != nullptr)
		*bpp__bUsedTargetBone__pf = Parms.bpp__bUsedTargetBone__pf;

	if (bpp__Alpha__pf != nullptr)
		*bpp__Alpha__pf = Parms.bpp__Alpha__pf;
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneExTransSync2BoneRotDelta
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    bpp__Enable__pf                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__TargetBone__pf                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneA__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneB__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENUM_CoordinateMeshSlot                 bpp__Parts__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENUM_RotAxis                            bpp__RotAxis__pf                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__K__pf                                             (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__Offset__pf                                        (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__SpaceBone__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        bpp__ClampSinMinMax__pf                                (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__OffsetVector__pf                                  (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__bUsedTargetBone__pf                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__Alpha__pf                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::BoneExTransSync2BoneRotDelta(bool bpp__Enable__pf, class FName bpp__TargetBone__pf, class ACharacter* bpp__Character__pf, class FName bpp__BoneA__pf, class FName bpp__BoneB__pf, ENUM_CoordinateMeshSlot bpp__Parts__pf, ENUM_RotAxis bpp__RotAxis__pf, const struct FVector& bpp__K__pf, const struct FVector& bpp__Offset__pf, class FName bpp__SpaceBone__pf, const struct FVector2D& bpp__ClampSinMinMax__pf, class UObject* bpp____WorldContext__pf, struct FVector* bpp__OffsetVector__pf, bool* bpp__bUsedTargetBone__pf, float* bpp__Alpha__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "BoneExTransSync2BoneRotDelta");

	Params::BP_FLIB_AnimExpression_C_BoneExTransSync2BoneRotDelta Parms{};

	Parms.bpp__Enable__pf = bpp__Enable__pf;
	Parms.bpp__TargetBone__pf = bpp__TargetBone__pf;
	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp__BoneA__pf = bpp__BoneA__pf;
	Parms.bpp__BoneB__pf = bpp__BoneB__pf;
	Parms.bpp__Parts__pf = bpp__Parts__pf;
	Parms.bpp__RotAxis__pf = bpp__RotAxis__pf;
	Parms.bpp__K__pf = std::move(bpp__K__pf);
	Parms.bpp__Offset__pf = std::move(bpp__Offset__pf);
	Parms.bpp__SpaceBone__pf = bpp__SpaceBone__pf;
	Parms.bpp__ClampSinMinMax__pf = std::move(bpp__ClampSinMinMax__pf);
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__OffsetVector__pf != nullptr)
		*bpp__OffsetVector__pf = std::move(Parms.bpp__OffsetVector__pf);

	if (bpp__bUsedTargetBone__pf != nullptr)
		*bpp__bUsedTargetBone__pf = Parms.bpp__bUsedTargetBone__pf;

	if (bpp__Alpha__pf != nullptr)
		*bpp__Alpha__pf = Parms.bpp__Alpha__pf;
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneExTransSyncRotZ
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    bpp__Enable__pf                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__TargetBone__pf                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneA__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneB__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__XYZ_Ratio__pf                                     (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSTRUCT_AnimExpressionBonesName  bpp__AnimExpInfo__pf                                   (Parm, NativeAccessSpecifierPublic)
// ENUM_CoordinateMeshSlot                 bpp__Parts__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__bUseDataTable__pf                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__ResultXYZ__pf                                     (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__bUsedTargetBone__pf                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__Alpha__pf                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::BoneExTransSyncRotZ(bool bpp__Enable__pf, class FName bpp__TargetBone__pf, class ACharacter* bpp__Character__pf, class FName bpp__BoneA__pf, class FName bpp__BoneB__pf, const struct FVector& bpp__XYZ_Ratio__pf, const struct FSTRUCT_AnimExpressionBonesName& bpp__AnimExpInfo__pf, ENUM_CoordinateMeshSlot bpp__Parts__pf, bool bpp__bUseDataTable__pf, class UObject* bpp____WorldContext__pf, struct FVector* bpp__ResultXYZ__pf, bool* bpp__bUsedTargetBone__pf, float* bpp__Alpha__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "BoneExTransSyncRotZ");

	Params::BP_FLIB_AnimExpression_C_BoneExTransSyncRotZ Parms{};

	Parms.bpp__Enable__pf = bpp__Enable__pf;
	Parms.bpp__TargetBone__pf = bpp__TargetBone__pf;
	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp__BoneA__pf = bpp__BoneA__pf;
	Parms.bpp__BoneB__pf = bpp__BoneB__pf;
	Parms.bpp__XYZ_Ratio__pf = std::move(bpp__XYZ_Ratio__pf);
	Parms.bpp__AnimExpInfo__pf = std::move(bpp__AnimExpInfo__pf);
	Parms.bpp__Parts__pf = bpp__Parts__pf;
	Parms.bpp__bUseDataTable__pf = bpp__bUseDataTable__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__ResultXYZ__pf != nullptr)
		*bpp__ResultXYZ__pf = std::move(Parms.bpp__ResultXYZ__pf);

	if (bpp__bUsedTargetBone__pf != nullptr)
		*bpp__bUsedTargetBone__pf = Parms.bpp__bUsedTargetBone__pf;

	if (bpp__Alpha__pf != nullptr)
		*bpp__Alpha__pf = Parms.bpp__Alpha__pf;
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.BoneIsUsingInMesh
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// ENUM_CoordinateMeshSlot                 bpp__PartsSlot__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__TargetBone__pf                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__bForceAlpha__pf                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__Result__pf                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__Alpha__pf                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::BoneIsUsingInMesh(ENUM_CoordinateMeshSlot bpp__PartsSlot__pf, class ACharacter* bpp__Character__pf, class FName bpp__TargetBone__pf, bool bpp__bForceAlpha__pf, class UObject* bpp____WorldContext__pf, bool* bpp__Result__pf, float* bpp__Alpha__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "BoneIsUsingInMesh");

	Params::BP_FLIB_AnimExpression_C_BoneIsUsingInMesh Parms{};

	Parms.bpp__PartsSlot__pf = bpp__PartsSlot__pf;
	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp__TargetBone__pf = bpp__TargetBone__pf;
	Parms.bpp__bForceAlpha__pf = bpp__bForceAlpha__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__Result__pf != nullptr)
		*bpp__Result__pf = Parms.bpp__Result__pf;

	if (bpp__Alpha__pf != nullptr)
		*bpp__Alpha__pf = Parms.bpp__Alpha__pf;
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.CalcBoneRotConstraintBaseOffset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSTRUCT_AnimExpInfo              bpp__AnimExpInfo__pf                                   (Parm, OutParm, NativeAccessSpecifierPublic)
// class UJackAnimInstance*                bpp__AnimInstance__pf                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::CalcBoneRotConstraintBaseOffset(struct FSTRUCT_AnimExpInfo* bpp__AnimExpInfo__pf, class UJackAnimInstance* bpp__AnimInstance__pf, class UObject* bpp____WorldContext__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "CalcBoneRotConstraintBaseOffset");

	Params::BP_FLIB_AnimExpression_C_CalcBoneRotConstraintBaseOffset Parms{};

	Parms.bpp__AnimInstance__pf = bpp__AnimInstance__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__AnimExpInfo__pf != nullptr)
		*bpp__AnimExpInfo__pf = std::move(Parms.bpp__AnimExpInfo__pf);
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.CalcBoneRotOffset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSTRUCT_AnimExpressionBonesName  bpp__AnimExpressionBonesName__pf                       (Parm, OutParm, NativeAccessSpecifierPublic)
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FRotator>                 bpp__Result__pf                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::CalcBoneRotOffset(struct FSTRUCT_AnimExpressionBonesName* bpp__AnimExpressionBonesName__pf, class ACharacter* bpp__Character__pf, class UObject* bpp____WorldContext__pf, TArray<struct FRotator>* bpp__Result__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "CalcBoneRotOffset");

	Params::BP_FLIB_AnimExpression_C_CalcBoneRotOffset Parms{};

	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__AnimExpressionBonesName__pf != nullptr)
		*bpp__AnimExpressionBonesName__pf = std::move(Parms.bpp__AnimExpressionBonesName__pf);

	if (bpp__Result__pf != nullptr)
		*bpp__Result__pf = std::move(Parms.bpp__Result__pf);
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.CalcExceptionRot
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   bpp__MinValueA__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__MinValueB__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__StandardValue__pf                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__ExceptionValue__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__bIsException__pf                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__ClampMinValue__pf                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__ClampMaxValue__pf                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBP_FLIB_AnimExpression_C::CalcExceptionRot(float bpp__MinValueA__pf, float bpp__MinValueB__pf, float bpp__StandardValue__pf, float bpp__ExceptionValue__pf, bool bpp__bIsException__pf, float bpp__ClampMinValue__pf, float bpp__ClampMaxValue__pf, class UObject* bpp____WorldContext__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "CalcExceptionRot");

	Params::BP_FLIB_AnimExpression_C_CalcExceptionRot Parms{};

	Parms.bpp__MinValueA__pf = bpp__MinValueA__pf;
	Parms.bpp__MinValueB__pf = bpp__MinValueB__pf;
	Parms.bpp__StandardValue__pf = bpp__StandardValue__pf;
	Parms.bpp__ExceptionValue__pf = bpp__ExceptionValue__pf;
	Parms.bpp__bIsException__pf = bpp__bIsException__pf;
	Parms.bpp__ClampMinValue__pf = bpp__ClampMinValue__pf;
	Parms.bpp__ClampMaxValue__pf = bpp__ClampMaxValue__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.CalcRotOffsetPostProc
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class USkeletalMeshComponent*           bpp__SkeletalMeshComponent__pf                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__TargetBone__pf                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__SourceBone__pf                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__TargetRot__pf                                     (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UBP_FLIB_AnimExpression_C::CalcRotOffsetPostProc(class USkeletalMeshComponent* bpp__SkeletalMeshComponent__pf, class FName bpp__TargetBone__pf, class FName bpp__SourceBone__pf, const struct FRotator& bpp__TargetRot__pf, class UObject* bpp____WorldContext__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "CalcRotOffsetPostProc");

	Params::BP_FLIB_AnimExpression_C_CalcRotOffsetPostProc Parms{};

	Parms.bpp__SkeletalMeshComponent__pf = bpp__SkeletalMeshComponent__pf;
	Parms.bpp__TargetBone__pf = bpp__TargetBone__pf;
	Parms.bpp__SourceBone__pf = bpp__SourceBone__pf;
	Parms.bpp__TargetRot__pf = std::move(bpp__TargetRot__pf);
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.CalcTransSyncRotZ
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneA__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneB__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSTRUCT_AnimExpressionBonesName  bpp__AnimExpInfo__pf                                   (Parm, OutParm, NativeAccessSpecifierPublic)
// float                                   bpp__K__pf                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__Result__pf                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::CalcTransSyncRotZ(class ACharacter* bpp__Character__pf, class FName bpp__BoneA__pf, class FName bpp__BoneB__pf, struct FSTRUCT_AnimExpressionBonesName* bpp__AnimExpInfo__pf, float bpp__K__pf, class UObject* bpp____WorldContext__pf, float* bpp__Result__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "CalcTransSyncRotZ");

	Params::BP_FLIB_AnimExpression_C_CalcTransSyncRotZ Parms{};

	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp__BoneA__pf = bpp__BoneA__pf;
	Parms.bpp__BoneB__pf = bpp__BoneB__pf;
	Parms.bpp__K__pf = bpp__K__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__AnimExpInfo__pf != nullptr)
		*bpp__AnimExpInfo__pf = std::move(Parms.bpp__AnimExpInfo__pf);

	if (bpp__Result__pf != nullptr)
		*bpp__Result__pf = Parms.bpp__Result__pf;
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.ClampRot
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                         bpp__Rot__pf                                           (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bpp__bClamp__pf                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__ClampMin__pf                                      (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__ClampMax__pf                                      (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UBP_FLIB_AnimExpression_C::ClampRot(const struct FRotator& bpp__Rot__pf, bool bpp__bClamp__pf, const struct FVector& bpp__ClampMin__pf, const struct FVector& bpp__ClampMax__pf, class UObject* bpp____WorldContext__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "ClampRot");

	Params::BP_FLIB_AnimExpression_C_ClampRot Parms{};

	Parms.bpp__Rot__pf = std::move(bpp__Rot__pf);
	Parms.bpp__bClamp__pf = bpp__bClamp__pf;
	Parms.bpp__ClampMin__pf = std::move(bpp__ClampMin__pf);
	Parms.bpp__ClampMax__pf = std::move(bpp__ClampMax__pf);
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.DrawDebugBoneAxis
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USkinnedMeshComponent*            bpp__SkinnedMesh__pf                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__ArrowSize__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__ArrowLength__pf                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__DrawRelativeLocation__pf                          (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     bpp__BoneListForDebug__pf                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bpp__DrawDebugBone__pf                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::DrawDebugBoneAxis(class USkinnedMeshComponent* bpp__SkinnedMesh__pf, float bpp__ArrowSize__pf, float bpp__ArrowLength__pf, const struct FVector& bpp__DrawRelativeLocation__pf, TArray<class FName>* bpp__BoneListForDebug__pf, bool bpp__DrawDebugBone__pf, class UObject* bpp____WorldContext__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "DrawDebugBoneAxis");

	Params::BP_FLIB_AnimExpression_C_DrawDebugBoneAxis Parms{};

	Parms.bpp__SkinnedMesh__pf = bpp__SkinnedMesh__pf;
	Parms.bpp__ArrowSize__pf = bpp__ArrowSize__pf;
	Parms.bpp__ArrowLength__pf = bpp__ArrowLength__pf;
	Parms.bpp__DrawRelativeLocation__pf = std::move(bpp__DrawRelativeLocation__pf);
	Parms.bpp__DrawDebugBone__pf = bpp__DrawDebugBone__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__BoneListForDebug__pf != nullptr)
		*bpp__BoneListForDebug__pf = std::move(Parms.bpp__BoneListForDebug__pf);
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.EvalAnimExpressionType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           bpp__Mesh__pf                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSTRUCT_AnimExpInfo              bpp__Result__pf                                        (Parm, OutParm, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::EvalAnimExpressionType(class USkeletalMeshComponent* bpp__Mesh__pf, class UObject* bpp____WorldContext__pf, struct FSTRUCT_AnimExpInfo* bpp__Result__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "EvalAnimExpressionType");

	Params::BP_FLIB_AnimExpression_C_EvalAnimExpressionType Parms{};

	Parms.bpp__Mesh__pf = bpp__Mesh__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__Result__pf != nullptr)
		*bpp__Result__pf = std::move(Parms.bpp__Result__pf);
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.FixRotAxisVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class USkeletalMeshComponent*           bpp__SkelComp__pf                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneName__pf                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__FixX__pf                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__FixY__pf                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__FixZ__pf                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__ClampMinRange__pf                                 (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__ClampMaxRange__pf                                 (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__Min__pf                                           (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__Max__pf                                           (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__RefPoseRot__pf                                    (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::FixRotAxisVector(class USkeletalMeshComponent* bpp__SkelComp__pf, class FName bpp__BoneName__pf, bool bpp__FixX__pf, bool bpp__FixY__pf, bool bpp__FixZ__pf, const struct FVector& bpp__ClampMinRange__pf, const struct FVector& bpp__ClampMaxRange__pf, class UObject* bpp____WorldContext__pf, struct FVector* bpp__Min__pf, struct FVector* bpp__Max__pf, struct FRotator* bpp__RefPoseRot__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "FixRotAxisVector");

	Params::BP_FLIB_AnimExpression_C_FixRotAxisVector Parms{};

	Parms.bpp__SkelComp__pf = bpp__SkelComp__pf;
	Parms.bpp__BoneName__pf = bpp__BoneName__pf;
	Parms.bpp__FixX__pf = bpp__FixX__pf;
	Parms.bpp__FixY__pf = bpp__FixY__pf;
	Parms.bpp__FixZ__pf = bpp__FixZ__pf;
	Parms.bpp__ClampMinRange__pf = std::move(bpp__ClampMinRange__pf);
	Parms.bpp__ClampMaxRange__pf = std::move(bpp__ClampMaxRange__pf);
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__Min__pf != nullptr)
		*bpp__Min__pf = std::move(Parms.bpp__Min__pf);

	if (bpp__Max__pf != nullptr)
		*bpp__Max__pf = std::move(Parms.bpp__Max__pf);

	if (bpp__RefPoseRot__pf != nullptr)
		*bpp__RefPoseRot__pf = std::move(Parms.bpp__RefPoseRot__pf);
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.GetAimRotation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__AimReferenceBone__pf                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__AimTargetBone__pf                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__ModifyTargetBone__pf                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          bpp__AimOffset__pf                                     (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__ClampMinValue__pf                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__TargetRotation__pf                                (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::GetAimRotation(class ACharacter* bpp__Character__pf, class FName bpp__AimReferenceBone__pf, class FName bpp__AimTargetBone__pf, class FName bpp__ModifyTargetBone__pf, const struct FVector& bpp__AimOffset__pf, float bpp__ClampMinValue__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__TargetRotation__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "GetAimRotation");

	Params::BP_FLIB_AnimExpression_C_GetAimRotation Parms{};

	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp__AimReferenceBone__pf = bpp__AimReferenceBone__pf;
	Parms.bpp__AimTargetBone__pf = bpp__AimTargetBone__pf;
	Parms.bpp__ModifyTargetBone__pf = bpp__ModifyTargetBone__pf;
	Parms.bpp__AimOffset__pf = std::move(bpp__AimOffset__pf);
	Parms.bpp__ClampMinValue__pf = bpp__ClampMinValue__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__TargetRotation__pf != nullptr)
		*bpp__TargetRotation__pf = std::move(Parms.bpp__TargetRotation__pf);
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.GetBonReferenceByNameWithUsingInMesh
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__TargetBoneName__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENUM_CoordinateMeshSlot                 bpp__PartsSlot__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBoneReference                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBoneReference UBP_FLIB_AnimExpression_C::GetBonReferenceByNameWithUsingInMesh(class ACharacter* bpp__Character__pf, class FName bpp__TargetBoneName__pf, ENUM_CoordinateMeshSlot bpp__PartsSlot__pf, class UObject* bpp____WorldContext__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "GetBonReferenceByNameWithUsingInMesh");

	Params::BP_FLIB_AnimExpression_C_GetBonReferenceByNameWithUsingInMesh Parms{};

	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp__TargetBoneName__pf = bpp__TargetBoneName__pf;
	Parms.bpp__PartsSlot__pf = bpp__PartsSlot__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.GetDynamicBoneManager
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             bpp__StateName__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           bpp__Result__pf                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           bpp__Class__pf                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::GetDynamicBoneManager(class FName bpp__StateName__pf, class UObject* bpp____WorldContext__pf, class AActor** bpp__Result__pf, class UClass** bpp__Class__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "GetDynamicBoneManager");

	Params::BP_FLIB_AnimExpression_C_GetDynamicBoneManager Parms{};

	Parms.bpp__StateName__pf = bpp__StateName__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__Result__pf != nullptr)
		*bpp__Result__pf = Parms.bpp__Result__pf;

	if (bpp__Class__pf != nullptr)
		*bpp__Class__pf = Parms.bpp__Class__pf;
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.GetLookAt2DValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UJackAnimInstance*                bpp__JackAnimInstance__pf                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENUM_HairBoneBlendSpaceCotrolMode       bpp__BaseBone__pf                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__H__pf                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__V__pf                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::GetLookAt2DValue(class UJackAnimInstance* bpp__JackAnimInstance__pf, ENUM_HairBoneBlendSpaceCotrolMode bpp__BaseBone__pf, class UObject* bpp____WorldContext__pf, float* bpp__H__pf, float* bpp__V__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "GetLookAt2DValue");

	Params::BP_FLIB_AnimExpression_C_GetLookAt2DValue Parms{};

	Parms.bpp__JackAnimInstance__pf = bpp__JackAnimInstance__pf;
	Parms.bpp__BaseBone__pf = bpp__BaseBone__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__H__pf != nullptr)
		*bpp__H__pf = Parms.bpp__H__pf;

	if (bpp__V__pf != nullptr)
		*bpp__V__pf = Parms.bpp__V__pf;
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.GetMaxOrMinRot
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             bpp__StateName__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   bpp__Index__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSTRUCT_MaxOrMinRot              bpp__Item__pf                                          (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::GetMaxOrMinRot(class FName bpp__StateName__pf, int32 bpp__Index__pf, class UObject* bpp____WorldContext__pf, struct FSTRUCT_MaxOrMinRot* bpp__Item__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "GetMaxOrMinRot");

	Params::BP_FLIB_AnimExpression_C_GetMaxOrMinRot Parms{};

	Parms.bpp__StateName__pf = bpp__StateName__pf;
	Parms.bpp__Index__pf = bpp__Index__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__Item__pf != nullptr)
		*bpp__Item__pf = std::move(Parms.bpp__Item__pf);
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.GetNSEWSkirtJointName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             bpp__SouthCenterJoint__pf                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__SouthW__pf                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__South__pf                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__SouthE__pf                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__WestS__pf                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__West__pf                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__WestN__pf                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__EastS__pf                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__East__pf                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__EastN__pf                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__NorthW__pf                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__North__pf                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__NorthE__pf                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::GetNSEWSkirtJointName(class FName bpp__SouthCenterJoint__pf, class UObject* bpp____WorldContext__pf, class FName* bpp__SouthW__pf, class FName* bpp__South__pf, class FName* bpp__SouthE__pf, class FName* bpp__WestS__pf, class FName* bpp__West__pf, class FName* bpp__WestN__pf, class FName* bpp__EastS__pf, class FName* bpp__East__pf, class FName* bpp__EastN__pf, class FName* bpp__NorthW__pf, class FName* bpp__North__pf, class FName* bpp__NorthE__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "GetNSEWSkirtJointName");

	Params::BP_FLIB_AnimExpression_C_GetNSEWSkirtJointName Parms{};

	Parms.bpp__SouthCenterJoint__pf = bpp__SouthCenterJoint__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__SouthW__pf != nullptr)
		*bpp__SouthW__pf = Parms.bpp__SouthW__pf;

	if (bpp__South__pf != nullptr)
		*bpp__South__pf = Parms.bpp__South__pf;

	if (bpp__SouthE__pf != nullptr)
		*bpp__SouthE__pf = Parms.bpp__SouthE__pf;

	if (bpp__WestS__pf != nullptr)
		*bpp__WestS__pf = Parms.bpp__WestS__pf;

	if (bpp__West__pf != nullptr)
		*bpp__West__pf = Parms.bpp__West__pf;

	if (bpp__WestN__pf != nullptr)
		*bpp__WestN__pf = Parms.bpp__WestN__pf;

	if (bpp__EastS__pf != nullptr)
		*bpp__EastS__pf = Parms.bpp__EastS__pf;

	if (bpp__East__pf != nullptr)
		*bpp__East__pf = Parms.bpp__East__pf;

	if (bpp__EastN__pf != nullptr)
		*bpp__EastN__pf = Parms.bpp__EastN__pf;

	if (bpp__NorthW__pf != nullptr)
		*bpp__NorthW__pf = Parms.bpp__NorthW__pf;

	if (bpp__North__pf != nullptr)
		*bpp__North__pf = Parms.bpp__North__pf;

	if (bpp__NorthE__pf != nullptr)
		*bpp__NorthE__pf = Parms.bpp__NorthE__pf;
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.GetSoftBoneChain
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             bpp__StateName__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   bpp__Index__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENUM_CoordinateMeshSlot                 bpp__PartsSlot__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__TargetBone__pf                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSTRUCT_SoftBoneChainSettings    bpp__Result__pf                                        (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::GetSoftBoneChain(class FName bpp__StateName__pf, int32 bpp__Index__pf, ENUM_CoordinateMeshSlot bpp__PartsSlot__pf, class ACharacter* bpp__Character__pf, class FName bpp__TargetBone__pf, class UObject* bpp____WorldContext__pf, struct FSTRUCT_SoftBoneChainSettings* bpp__Result__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "GetSoftBoneChain");

	Params::BP_FLIB_AnimExpression_C_GetSoftBoneChain Parms{};

	Parms.bpp__StateName__pf = bpp__StateName__pf;
	Parms.bpp__Index__pf = bpp__Index__pf;
	Parms.bpp__PartsSlot__pf = bpp__PartsSlot__pf;
	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp__TargetBone__pf = bpp__TargetBone__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__Result__pf != nullptr)
		*bpp__Result__pf = std::move(Parms.bpp__Result__pf);
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.max(sin(clamp(Bone.rz,-90,90),1)*k
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__Bone__pf                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__K__pf                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__Result__pf                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::Max_sin_clamp_Bone_rz_Minus90_90__1_Stark(class ACharacter* bpp__Character__pf, class FName bpp__Bone__pf, float bpp__K__pf, class UObject* bpp____WorldContext__pf, float* bpp__Result__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "max(sin(clamp(Bone.rz,-90,90),1)*k");

	Params::BP_FLIB_AnimExpression_C_Max_sin_clamp_Bone_rz_Minus90_90__1_Stark Parms{};

	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp__Bone__pf = bpp__Bone__pf;
	Parms.bpp__K__pf = bpp__K__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__Result__pf != nullptr)
		*bpp__Result__pf = Parms.bpp__Result__pf;
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.SaveDynamicBoneData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJackAnimExp_DynamicBoneCacheStatebpp__CacheData__pf                                     (Parm, OutParm, NativeAccessSpecifierPublic)
// class UJackAnimInstance*                bpp__JackAnimInstance__pf                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::SaveDynamicBoneData(struct FJackAnimExp_DynamicBoneCacheState* bpp__CacheData__pf, class UJackAnimInstance* bpp__JackAnimInstance__pf, class UObject* bpp____WorldContext__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "SaveDynamicBoneData");

	Params::BP_FLIB_AnimExpression_C_SaveDynamicBoneData Parms{};

	Parms.bpp__JackAnimInstance__pf = bpp__JackAnimInstance__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__CacheData__pf != nullptr)
		*bpp__CacheData__pf = std::move(Parms.bpp__CacheData__pf);
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.SelectRotZBetweenBoneAandB
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneA__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__BoneB__pf                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENUM_RotAxis                            bpp__SelectClampAxis__pf                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__bClampByPositiveRange__pf                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__bExceptionClampRot__pf                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__Result__pf                                        (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__BoneA_Rotation__pf                                (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__BoneB_Rotation__pf                                (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::SelectRotZBetweenBoneAandB(class ACharacter* bpp__Character__pf, class FName bpp__BoneA__pf, class FName bpp__BoneB__pf, ENUM_RotAxis bpp__SelectClampAxis__pf, bool bpp__bClampByPositiveRange__pf, bool bpp__bExceptionClampRot__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf, struct FRotator* bpp__BoneA_Rotation__pf, struct FRotator* bpp__BoneB_Rotation__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "SelectRotZBetweenBoneAandB");

	Params::BP_FLIB_AnimExpression_C_SelectRotZBetweenBoneAandB Parms{};

	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp__BoneA__pf = bpp__BoneA__pf;
	Parms.bpp__BoneB__pf = bpp__BoneB__pf;
	Parms.bpp__SelectClampAxis__pf = bpp__SelectClampAxis__pf;
	Parms.bpp__bClampByPositiveRange__pf = bpp__bClampByPositiveRange__pf;
	Parms.bpp__bExceptionClampRot__pf = bpp__bExceptionClampRot__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__Result__pf != nullptr)
		*bpp__Result__pf = std::move(Parms.bpp__Result__pf);

	if (bpp__BoneA_Rotation__pf != nullptr)
		*bpp__BoneA_Rotation__pf = std::move(Parms.bpp__BoneA_Rotation__pf);

	if (bpp__BoneB_Rotation__pf != nullptr)
		*bpp__BoneB_Rotation__pf = std::move(Parms.bpp__BoneB_Rotation__pf);
}


// Function BP_FLIB_AnimExpression.BP_FLIB_AnimExpression_C.TwoBoneRotCombineRatio
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                         bpp__RotA__pf                                          (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__RotB__pf                                          (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   bpp__RotA_Ratio__pf                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__RotB_Ratio__pf                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             bpp__TargetBone__pf                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacter*                       bpp__Character__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENUM_CoordinateMeshSlot                 bpp__PartsSlot__pf                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENUM_RotAxis                            bpp__ApplyBoneAxis__pf                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bpp__LimitLerpAxis__pf                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          bpp____WorldContext__pf                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         bpp__Result__pf                                        (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bpp__bUsedTargetBone__pf                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   bpp__Alpha__pf                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBP_FLIB_AnimExpression_C::TwoBoneRotCombineRatio(const struct FRotator& bpp__RotA__pf, const struct FRotator& bpp__RotB__pf, float bpp__RotA_Ratio__pf, float bpp__RotB_Ratio__pf, class FName bpp__TargetBone__pf, class ACharacter* bpp__Character__pf, ENUM_CoordinateMeshSlot bpp__PartsSlot__pf, ENUM_RotAxis bpp__ApplyBoneAxis__pf, bool bpp__LimitLerpAxis__pf, class UObject* bpp____WorldContext__pf, struct FRotator* bpp__Result__pf, bool* bpp__bUsedTargetBone__pf, float* bpp__Alpha__pf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FLIB_AnimExpression_C", "TwoBoneRotCombineRatio");

	Params::BP_FLIB_AnimExpression_C_TwoBoneRotCombineRatio Parms{};

	Parms.bpp__RotA__pf = std::move(bpp__RotA__pf);
	Parms.bpp__RotB__pf = std::move(bpp__RotB__pf);
	Parms.bpp__RotA_Ratio__pf = bpp__RotA_Ratio__pf;
	Parms.bpp__RotB_Ratio__pf = bpp__RotB_Ratio__pf;
	Parms.bpp__TargetBone__pf = bpp__TargetBone__pf;
	Parms.bpp__Character__pf = bpp__Character__pf;
	Parms.bpp__PartsSlot__pf = bpp__PartsSlot__pf;
	Parms.bpp__ApplyBoneAxis__pf = bpp__ApplyBoneAxis__pf;
	Parms.bpp__LimitLerpAxis__pf = bpp__LimitLerpAxis__pf;
	Parms.bpp____WorldContext__pf = bpp____WorldContext__pf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bpp__Result__pf != nullptr)
		*bpp__Result__pf = std::move(Parms.bpp__Result__pf);

	if (bpp__bUsedTargetBone__pf != nullptr)
		*bpp__bUsedTargetBone__pf = Parms.bpp__bUsedTargetBone__pf;

	if (bpp__Alpha__pf != nullptr)
		*bpp__Alpha__pf = Parms.bpp__Alpha__pf;
}

}

