#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TimeChangeFogBase

#include "Basic.hpp"

#include "STRUCT_TimeChangeFogParam_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "JackGame_structs.hpp"
#include "BP_TimeChangeEnvironmentBase_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// DynamicClass BP_TimeChangeFogBase.BP_TimeChangeFogBase_C
// 0x0310 (0x06C8 - 0x03B8)
class ABP_TimeChangeFogBase_C final : public ABP_TimeChangeEnvironmentBase_C
{
public:
	class AAtmosphericFog*                        AtmosphericFog;                                    // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AExponentialHeightFog*                  HeightFog;                                         // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_TimeChangeFogParam             P_Fine;                                            // 0x03C8(0x0018)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_TimeChangeFogParam             P_Cloudy;                                          // 0x03E0(0x0018)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_TimeChangeFogParam             P_LightRain;                                       // 0x03F8(0x0018)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_TimeChangeFogParam             P_Rain;                                            // 0x0410(0x0018)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_TimeChangeFogParam             P_HeavyRain;                                       // 0x0428(0x0018)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_TimeChangeFogParam             P_Storm;                                           // 0x0440(0x0018)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_TimeChangeFogParam             P_Snow;                                            // 0x0458(0x0018)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_TimeChangeFogParam             P_SnowStorm;                                       // 0x0470(0x0018)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_TimeChangeFogParam             P_Fog;                                             // 0x0488(0x0018)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_TimeChangeFogParam             P_DenseFog;                                        // 0x04A0(0x0018)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightFogZ_Base;                                   // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableHeightFogZ;                                  // 0x04BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4BD[0x3];                                      // 0x04BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               MID_PostProcess_Edge_Environment;                  // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             EditorWeather;                                     // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             NewWeather;                                        // 0x04C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackWorldWeather                             OldWeather;                                        // 0x04CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4CB[0x1];                                      // 0x04CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WeatherChangeRate;                                 // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempSunMultiplier;                                 // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempFogMultiplier;                                 // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempDensityMultiplier;                             // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempDistanceScale;                                 // 0x04DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempAltitudeScale;                                 // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempDistanceOffset;                                // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempGroundOffset;                                  // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempStartDistance;                                 // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempDefaultBrightness;                             // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TempDefaultLightColor;                             // 0x04F4(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempFogDensity;                                    // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TempFogInscatteringColor;                          // 0x0508(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempFogHeightFalloff;                              // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempHeghtFogStartDistance;                         // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempFogMaxOpacity;                                 // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempZOffset;                                       // 0x0524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempDepthEdgeDistance;                             // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempHeightFalloffOffset;                           // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempStartDistanceOffset;                           // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunMultiplier;                                     // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMultiplier;                                     // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DensityMultiplier;                                 // 0x053C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceScale;                                     // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AltitudeScale;                                     // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceOffset;                                    // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundOffset;                                      // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultBrightness;                                 // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DefaultLightColor;                                 // 0x0558(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDensity;                                        // 0x0568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogInscatteringColor;                              // 0x056C(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x057C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightFogStartDistance;                            // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMaxOpacity;                                     // 0x0584(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZOffset;                                           // 0x0588(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthEdgeDistance;                                 // 0x058C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightFalloffOffset;                               // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistanceOffset;                               // 0x0594(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSTRUCT_TimeChangeFogParam             P_Ending;                                          // 0x0598(0x0018)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableFogParam;                                    // 0x05B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B1[0x3];                                      // 0x05B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_Time;                                 // 0x05B4(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         K2Node_Event_UpdateCounter;                        // 0x05B8(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetNowFogParameter_SunMultiplier;         // 0x05BC(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetNowFogParameter_FogMultiplier;         // 0x05C0(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetNowFogParameter_DensityMultiplier;     // 0x05C4(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetNowFogParameter_DistanceScale;         // 0x05C8(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetNowFogParameter_AltitudeScale;         // 0x05CC(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetNowFogParameter_DistanceOffset;        // 0x05D0(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetNowFogParameter_GroundOffset;          // 0x05D4(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetNowFogParameter_StartDistance;         // 0x05D8(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetNowFogParameter_DefaultBrightness;     // 0x05DC(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CallFunc_GetNowFogParameter_DefaultLightColor;     // 0x05E0(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetNowFogParameter_FogDensity;            // 0x05F0(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CallFunc_GetNowFogParameter_FogInscatteringColor;  // 0x05F4(0x0010)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetNowFogParameter_FogHeightFalloff;      // 0x0604(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetNowFogParameter_HeightFogStartDistance; // 0x0608(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetNowFogParameter_FogMaxOpacity;         // 0x060C(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetNowFogParameter_ZOffset;               // 0x0610(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetNowFogParameter_DepthEdgeDistance;     // 0x0614(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetNowFogParameter_HeightFogFalloffOffset; // 0x0618(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_GetNowFogParameter_StartDistanceOffset;   // 0x061C(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakVector_X;                            // 0x0620(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakVector_Y;                            // 0x0624(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFunc_BreakVector_Z;                            // 0x0628(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62C[0x4];                                      // 0x062C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0630(0x0088)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UBP_COMP_WeatherAffect_C*               K2Node_DynamicCast_AsBP_COMP_Weather_Affect;       // 0x06B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x06C0(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C1[0x7];                                      // 0x06C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ExecuteUbergraph_BP_TimeChangeFogBase_1(int32 bpp__EntryPoint__pf);
	void FogUpdate();
	void GetNowColorWeatherCalc(const struct FLinearColor& bpp__OldColor__pf, TArray<struct FLinearColor>* bpp__NewColor__pf, float bpp__Rate__pf, int32 bpp__Time__pf, struct FLinearColor* bpp__Color__pf);
	void GetNowFloatWeatherCalc(float bpp__OldFloat__pf, TArray<float>* bpp__NewFloat__pf, float bpp__Rate__pf, int32 bpp__Time__pf, float* bpp__Float__pf);
	void GetNowFogParameter(int32 bpp__GameTime__pf, float* bpp__SunMultiplier__pf, float* bpp__FogMultiplier__pf, float* bpp__DensityMultiplier__pf, float* bpp__DistanceScale__pf, float* bpp__AltitudeScale__pf, float* bpp__DistanceOffset__pf, float* bpp__GroundOffset__pf, float* bpp__StartDistance__pf, float* bpp__DefaultBrightness__pf, struct FLinearColor* bpp__DefaultLightColor__pf, float* bpp__FogDensity__pf, struct FLinearColor* bpp__FogInscatteringColor__pf, float* bpp__FogHeightFalloff__pf, float* bpp__HeightFogStartDistance__pf, float* bpp__FogMaxOpacity__pf, float* bpp__ZOffset__pf, float* bpp__DepthEdgeDistance__pf, float* bpp__HeightFogFalloffOffset__pf, float* bpp__StartDistanceOffset__pf);
	void HeightFogUpdate();
	void ReceiveBeginPlay();
	void SetFogWeather(EJackWorldWeather bpp__NewWeather__pf, float bpp__WeatherChangeRate__pf);
	void SetTempParameter();
	void UpdateEnvironment(int32 bpp__Time__pf, int32 bpp__UpdateCounter__pf);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BP_TimeChangeFogBase_C">();
	}
	static class ABP_TimeChangeFogBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TimeChangeFogBase_C>();
	}
};
static_assert(alignof(ABP_TimeChangeFogBase_C) == 0x000008, "Wrong alignment on ABP_TimeChangeFogBase_C");
static_assert(sizeof(ABP_TimeChangeFogBase_C) == 0x0006C8, "Wrong size on ABP_TimeChangeFogBase_C");
static_assert(offsetof(ABP_TimeChangeFogBase_C, AtmosphericFog) == 0x0003B8, "Member 'ABP_TimeChangeFogBase_C::AtmosphericFog' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, HeightFog) == 0x0003C0, "Member 'ABP_TimeChangeFogBase_C::HeightFog' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, P_Fine) == 0x0003C8, "Member 'ABP_TimeChangeFogBase_C::P_Fine' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, P_Cloudy) == 0x0003E0, "Member 'ABP_TimeChangeFogBase_C::P_Cloudy' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, P_LightRain) == 0x0003F8, "Member 'ABP_TimeChangeFogBase_C::P_LightRain' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, P_Rain) == 0x000410, "Member 'ABP_TimeChangeFogBase_C::P_Rain' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, P_HeavyRain) == 0x000428, "Member 'ABP_TimeChangeFogBase_C::P_HeavyRain' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, P_Storm) == 0x000440, "Member 'ABP_TimeChangeFogBase_C::P_Storm' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, P_Snow) == 0x000458, "Member 'ABP_TimeChangeFogBase_C::P_Snow' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, P_SnowStorm) == 0x000470, "Member 'ABP_TimeChangeFogBase_C::P_SnowStorm' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, P_Fog) == 0x000488, "Member 'ABP_TimeChangeFogBase_C::P_Fog' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, P_DenseFog) == 0x0004A0, "Member 'ABP_TimeChangeFogBase_C::P_DenseFog' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, HeightFogZ_Base) == 0x0004B8, "Member 'ABP_TimeChangeFogBase_C::HeightFogZ_Base' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, EnableHeightFogZ) == 0x0004BC, "Member 'ABP_TimeChangeFogBase_C::EnableHeightFogZ' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, MID_PostProcess_Edge_Environment) == 0x0004C0, "Member 'ABP_TimeChangeFogBase_C::MID_PostProcess_Edge_Environment' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, EditorWeather) == 0x0004C8, "Member 'ABP_TimeChangeFogBase_C::EditorWeather' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, NewWeather) == 0x0004C9, "Member 'ABP_TimeChangeFogBase_C::NewWeather' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, OldWeather) == 0x0004CA, "Member 'ABP_TimeChangeFogBase_C::OldWeather' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, WeatherChangeRate) == 0x0004CC, "Member 'ABP_TimeChangeFogBase_C::WeatherChangeRate' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, TempSunMultiplier) == 0x0004D0, "Member 'ABP_TimeChangeFogBase_C::TempSunMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, TempFogMultiplier) == 0x0004D4, "Member 'ABP_TimeChangeFogBase_C::TempFogMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, TempDensityMultiplier) == 0x0004D8, "Member 'ABP_TimeChangeFogBase_C::TempDensityMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, TempDistanceScale) == 0x0004DC, "Member 'ABP_TimeChangeFogBase_C::TempDistanceScale' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, TempAltitudeScale) == 0x0004E0, "Member 'ABP_TimeChangeFogBase_C::TempAltitudeScale' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, TempDistanceOffset) == 0x0004E4, "Member 'ABP_TimeChangeFogBase_C::TempDistanceOffset' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, TempGroundOffset) == 0x0004E8, "Member 'ABP_TimeChangeFogBase_C::TempGroundOffset' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, TempStartDistance) == 0x0004EC, "Member 'ABP_TimeChangeFogBase_C::TempStartDistance' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, TempDefaultBrightness) == 0x0004F0, "Member 'ABP_TimeChangeFogBase_C::TempDefaultBrightness' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, TempDefaultLightColor) == 0x0004F4, "Member 'ABP_TimeChangeFogBase_C::TempDefaultLightColor' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, TempFogDensity) == 0x000504, "Member 'ABP_TimeChangeFogBase_C::TempFogDensity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, TempFogInscatteringColor) == 0x000508, "Member 'ABP_TimeChangeFogBase_C::TempFogInscatteringColor' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, TempFogHeightFalloff) == 0x000518, "Member 'ABP_TimeChangeFogBase_C::TempFogHeightFalloff' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, TempHeghtFogStartDistance) == 0x00051C, "Member 'ABP_TimeChangeFogBase_C::TempHeghtFogStartDistance' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, TempFogMaxOpacity) == 0x000520, "Member 'ABP_TimeChangeFogBase_C::TempFogMaxOpacity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, TempZOffset) == 0x000524, "Member 'ABP_TimeChangeFogBase_C::TempZOffset' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, TempDepthEdgeDistance) == 0x000528, "Member 'ABP_TimeChangeFogBase_C::TempDepthEdgeDistance' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, TempHeightFalloffOffset) == 0x00052C, "Member 'ABP_TimeChangeFogBase_C::TempHeightFalloffOffset' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, TempStartDistanceOffset) == 0x000530, "Member 'ABP_TimeChangeFogBase_C::TempStartDistanceOffset' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, SunMultiplier) == 0x000534, "Member 'ABP_TimeChangeFogBase_C::SunMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, FogMultiplier) == 0x000538, "Member 'ABP_TimeChangeFogBase_C::FogMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, DensityMultiplier) == 0x00053C, "Member 'ABP_TimeChangeFogBase_C::DensityMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, DistanceScale) == 0x000540, "Member 'ABP_TimeChangeFogBase_C::DistanceScale' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, AltitudeScale) == 0x000544, "Member 'ABP_TimeChangeFogBase_C::AltitudeScale' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, DistanceOffset) == 0x000548, "Member 'ABP_TimeChangeFogBase_C::DistanceOffset' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, GroundOffset) == 0x00054C, "Member 'ABP_TimeChangeFogBase_C::GroundOffset' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, StartDistance) == 0x000550, "Member 'ABP_TimeChangeFogBase_C::StartDistance' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, DefaultBrightness) == 0x000554, "Member 'ABP_TimeChangeFogBase_C::DefaultBrightness' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, DefaultLightColor) == 0x000558, "Member 'ABP_TimeChangeFogBase_C::DefaultLightColor' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, FogDensity) == 0x000568, "Member 'ABP_TimeChangeFogBase_C::FogDensity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, FogInscatteringColor) == 0x00056C, "Member 'ABP_TimeChangeFogBase_C::FogInscatteringColor' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, FogHeightFalloff) == 0x00057C, "Member 'ABP_TimeChangeFogBase_C::FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, HeightFogStartDistance) == 0x000580, "Member 'ABP_TimeChangeFogBase_C::HeightFogStartDistance' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, FogMaxOpacity) == 0x000584, "Member 'ABP_TimeChangeFogBase_C::FogMaxOpacity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, ZOffset) == 0x000588, "Member 'ABP_TimeChangeFogBase_C::ZOffset' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, DepthEdgeDistance) == 0x00058C, "Member 'ABP_TimeChangeFogBase_C::DepthEdgeDistance' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, HeightFalloffOffset) == 0x000590, "Member 'ABP_TimeChangeFogBase_C::HeightFalloffOffset' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, StartDistanceOffset) == 0x000594, "Member 'ABP_TimeChangeFogBase_C::StartDistanceOffset' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, P_Ending) == 0x000598, "Member 'ABP_TimeChangeFogBase_C::P_Ending' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, EnableFogParam) == 0x0005B0, "Member 'ABP_TimeChangeFogBase_C::EnableFogParam' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, K2Node_Event_Time) == 0x0005B4, "Member 'ABP_TimeChangeFogBase_C::K2Node_Event_Time' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, K2Node_Event_UpdateCounter) == 0x0005B8, "Member 'ABP_TimeChangeFogBase_C::K2Node_Event_UpdateCounter' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, CallFunc_GetNowFogParameter_SunMultiplier) == 0x0005BC, "Member 'ABP_TimeChangeFogBase_C::CallFunc_GetNowFogParameter_SunMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, CallFunc_GetNowFogParameter_FogMultiplier) == 0x0005C0, "Member 'ABP_TimeChangeFogBase_C::CallFunc_GetNowFogParameter_FogMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, CallFunc_GetNowFogParameter_DensityMultiplier) == 0x0005C4, "Member 'ABP_TimeChangeFogBase_C::CallFunc_GetNowFogParameter_DensityMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, CallFunc_GetNowFogParameter_DistanceScale) == 0x0005C8, "Member 'ABP_TimeChangeFogBase_C::CallFunc_GetNowFogParameter_DistanceScale' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, CallFunc_GetNowFogParameter_AltitudeScale) == 0x0005CC, "Member 'ABP_TimeChangeFogBase_C::CallFunc_GetNowFogParameter_AltitudeScale' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, CallFunc_GetNowFogParameter_DistanceOffset) == 0x0005D0, "Member 'ABP_TimeChangeFogBase_C::CallFunc_GetNowFogParameter_DistanceOffset' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, CallFunc_GetNowFogParameter_GroundOffset) == 0x0005D4, "Member 'ABP_TimeChangeFogBase_C::CallFunc_GetNowFogParameter_GroundOffset' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, CallFunc_GetNowFogParameter_StartDistance) == 0x0005D8, "Member 'ABP_TimeChangeFogBase_C::CallFunc_GetNowFogParameter_StartDistance' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, CallFunc_GetNowFogParameter_DefaultBrightness) == 0x0005DC, "Member 'ABP_TimeChangeFogBase_C::CallFunc_GetNowFogParameter_DefaultBrightness' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, CallFunc_GetNowFogParameter_DefaultLightColor) == 0x0005E0, "Member 'ABP_TimeChangeFogBase_C::CallFunc_GetNowFogParameter_DefaultLightColor' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, CallFunc_GetNowFogParameter_FogDensity) == 0x0005F0, "Member 'ABP_TimeChangeFogBase_C::CallFunc_GetNowFogParameter_FogDensity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, CallFunc_GetNowFogParameter_FogInscatteringColor) == 0x0005F4, "Member 'ABP_TimeChangeFogBase_C::CallFunc_GetNowFogParameter_FogInscatteringColor' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, CallFunc_GetNowFogParameter_FogHeightFalloff) == 0x000604, "Member 'ABP_TimeChangeFogBase_C::CallFunc_GetNowFogParameter_FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, CallFunc_GetNowFogParameter_HeightFogStartDistance) == 0x000608, "Member 'ABP_TimeChangeFogBase_C::CallFunc_GetNowFogParameter_HeightFogStartDistance' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, CallFunc_GetNowFogParameter_FogMaxOpacity) == 0x00060C, "Member 'ABP_TimeChangeFogBase_C::CallFunc_GetNowFogParameter_FogMaxOpacity' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, CallFunc_GetNowFogParameter_ZOffset) == 0x000610, "Member 'ABP_TimeChangeFogBase_C::CallFunc_GetNowFogParameter_ZOffset' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, CallFunc_GetNowFogParameter_DepthEdgeDistance) == 0x000614, "Member 'ABP_TimeChangeFogBase_C::CallFunc_GetNowFogParameter_DepthEdgeDistance' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, CallFunc_GetNowFogParameter_HeightFogFalloffOffset) == 0x000618, "Member 'ABP_TimeChangeFogBase_C::CallFunc_GetNowFogParameter_HeightFogFalloffOffset' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, CallFunc_GetNowFogParameter_StartDistanceOffset) == 0x00061C, "Member 'ABP_TimeChangeFogBase_C::CallFunc_GetNowFogParameter_StartDistanceOffset' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, CallFunc_BreakVector_X) == 0x000620, "Member 'ABP_TimeChangeFogBase_C::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, CallFunc_BreakVector_Y) == 0x000624, "Member 'ABP_TimeChangeFogBase_C::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, CallFunc_BreakVector_Z) == 0x000628, "Member 'ABP_TimeChangeFogBase_C::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000630, "Member 'ABP_TimeChangeFogBase_C::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, K2Node_DynamicCast_AsBP_COMP_Weather_Affect) == 0x0006B8, "Member 'ABP_TimeChangeFogBase_C::K2Node_DynamicCast_AsBP_COMP_Weather_Affect' has a wrong offset!");
static_assert(offsetof(ABP_TimeChangeFogBase_C, K2Node_DynamicCast_bSuccess) == 0x0006C0, "Member 'ABP_TimeChangeFogBase_C::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

