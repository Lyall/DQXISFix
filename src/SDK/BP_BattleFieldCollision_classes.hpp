#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleFieldCollision

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BattleFieldCollision.BP_BattleFieldCollision_C
// 0x00A8 (0x0440 - 0x0398)
class ABP_BattleFieldCollision_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0398(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          CreatedWall;                                       // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A9[0x3];                                      // 0x03A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BattleFieldLocation;                               // 0x03AC(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BattleFieldRadius;                                 // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 DecalClass;                                        // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADecalActor*                            DecalActor;                                        // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DecalHeightScale;                                  // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DecalMID;                                          // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DecalFinalColor;                                   // 0x03E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DecalColorA;                                       // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DecalBaseColor_Default;                            // 0x03F4(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DecalBaseColor_Invalid;                            // 0x0404(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DecalColorA_Range_Min;                             // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DecalColorA_Range_Max;                             // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DecalColorA_Min;                                   // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DecalColorA_Max;                                   // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         WallActors;                                        // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         CollisionHeight;                                   // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BattleFieldCollision(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();
	void CreateWall(int32 DivisionCount, const struct FVector& BattleFieldLocation_0, float BattleFieldRadius_0, bool DecalEnable);
	void SetHiddenDecal(bool bHidden_0);

	void CalcDecalColorA(float* ColorA) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BattleFieldCollision_C">();
	}
	static class ABP_BattleFieldCollision_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BattleFieldCollision_C>();
	}
};
static_assert(alignof(ABP_BattleFieldCollision_C) == 0x000008, "Wrong alignment on ABP_BattleFieldCollision_C");
static_assert(sizeof(ABP_BattleFieldCollision_C) == 0x000440, "Wrong size on ABP_BattleFieldCollision_C");
static_assert(offsetof(ABP_BattleFieldCollision_C, UberGraphFrame) == 0x000398, "Member 'ABP_BattleFieldCollision_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BattleFieldCollision_C, DefaultSceneRoot) == 0x0003A0, "Member 'ABP_BattleFieldCollision_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BattleFieldCollision_C, CreatedWall) == 0x0003A8, "Member 'ABP_BattleFieldCollision_C::CreatedWall' has a wrong offset!");
static_assert(offsetof(ABP_BattleFieldCollision_C, BattleFieldLocation) == 0x0003AC, "Member 'ABP_BattleFieldCollision_C::BattleFieldLocation' has a wrong offset!");
static_assert(offsetof(ABP_BattleFieldCollision_C, BattleFieldRadius) == 0x0003B8, "Member 'ABP_BattleFieldCollision_C::BattleFieldRadius' has a wrong offset!");
static_assert(offsetof(ABP_BattleFieldCollision_C, DecalClass) == 0x0003C0, "Member 'ABP_BattleFieldCollision_C::DecalClass' has a wrong offset!");
static_assert(offsetof(ABP_BattleFieldCollision_C, DecalActor) == 0x0003C8, "Member 'ABP_BattleFieldCollision_C::DecalActor' has a wrong offset!");
static_assert(offsetof(ABP_BattleFieldCollision_C, DecalHeightScale) == 0x0003D0, "Member 'ABP_BattleFieldCollision_C::DecalHeightScale' has a wrong offset!");
static_assert(offsetof(ABP_BattleFieldCollision_C, DecalMID) == 0x0003D8, "Member 'ABP_BattleFieldCollision_C::DecalMID' has a wrong offset!");
static_assert(offsetof(ABP_BattleFieldCollision_C, DecalFinalColor) == 0x0003E0, "Member 'ABP_BattleFieldCollision_C::DecalFinalColor' has a wrong offset!");
static_assert(offsetof(ABP_BattleFieldCollision_C, DecalColorA) == 0x0003F0, "Member 'ABP_BattleFieldCollision_C::DecalColorA' has a wrong offset!");
static_assert(offsetof(ABP_BattleFieldCollision_C, DecalBaseColor_Default) == 0x0003F4, "Member 'ABP_BattleFieldCollision_C::DecalBaseColor_Default' has a wrong offset!");
static_assert(offsetof(ABP_BattleFieldCollision_C, DecalBaseColor_Invalid) == 0x000404, "Member 'ABP_BattleFieldCollision_C::DecalBaseColor_Invalid' has a wrong offset!");
static_assert(offsetof(ABP_BattleFieldCollision_C, DecalColorA_Range_Min) == 0x000414, "Member 'ABP_BattleFieldCollision_C::DecalColorA_Range_Min' has a wrong offset!");
static_assert(offsetof(ABP_BattleFieldCollision_C, DecalColorA_Range_Max) == 0x000418, "Member 'ABP_BattleFieldCollision_C::DecalColorA_Range_Max' has a wrong offset!");
static_assert(offsetof(ABP_BattleFieldCollision_C, DecalColorA_Min) == 0x00041C, "Member 'ABP_BattleFieldCollision_C::DecalColorA_Min' has a wrong offset!");
static_assert(offsetof(ABP_BattleFieldCollision_C, DecalColorA_Max) == 0x000420, "Member 'ABP_BattleFieldCollision_C::DecalColorA_Max' has a wrong offset!");
static_assert(offsetof(ABP_BattleFieldCollision_C, WallActors) == 0x000428, "Member 'ABP_BattleFieldCollision_C::WallActors' has a wrong offset!");
static_assert(offsetof(ABP_BattleFieldCollision_C, CollisionHeight) == 0x000438, "Member 'ABP_BattleFieldCollision_C::CollisionHeight' has a wrong offset!");

}

