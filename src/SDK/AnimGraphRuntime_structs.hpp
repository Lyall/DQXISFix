#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimGraphRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimationCore_structs.hpp"


namespace SDK
{

// Enum AnimGraphRuntime.ESphericalLimitType
// NumValues: 0x0003
enum class ESphericalLimitType : uint8
{
	Inner                                    = 0,
	Outer                                    = 1,
	ESphericalLimitType_MAX                  = 2,
};

// Enum AnimGraphRuntime.AnimPhysSimSpaceType
// NumValues: 0x0006
enum class EAnimPhysSimSpaceType : uint8
{
	Component                                = 0,
	Actor                                    = 1,
	World                                    = 2,
	RootRelative                             = 3,
	BoneRelative                             = 4,
	AnimPhysSimSpaceType_MAX                 = 5,
};

// Enum AnimGraphRuntime.AnimPhysLinearConstraintType
// NumValues: 0x0003
enum class EAnimPhysLinearConstraintType : uint8
{
	Free                                     = 0,
	Limited                                  = 1,
	AnimPhysLinearConstraintType_MAX         = 2,
};

// Enum AnimGraphRuntime.AnimPhysAngularConstraintType
// NumValues: 0x0003
enum class EAnimPhysAngularConstraintType : uint8
{
	Angular                                  = 0,
	Cone                                     = 1,
	AnimPhysAngularConstraintType_MAX        = 2,
};

// Enum AnimGraphRuntime.EDrivenDestinationMode
// NumValues: 0x0004
enum class EDrivenDestinationMode : uint8
{
	Bone                                     = 0,
	MorphTarget                              = 1,
	MaterialParameter                        = 2,
	EDrivenDestinationMode_MAX               = 3,
};

// Enum AnimGraphRuntime.EDrivenBoneModificationMode
// NumValues: 0x0004
enum class EDrivenBoneModificationMode : uint8
{
	AddToInput                               = 0,
	ReplaceComponent                         = 1,
	AddToRefPose                             = 2,
	EDrivenBoneModificationMode_MAX          = 3,
};

// Enum AnimGraphRuntime.EComponentType
// NumValues: 0x000C
enum class EComponentType : uint8
{
	None                                     = 0,
	TranslationX                             = 1,
	TranslationY                             = 2,
	TranslationZ                             = 3,
	RotationX                                = 4,
	RotationY                                = 5,
	RotationZ                                = 6,
	Scale                                    = 7,
	ScaleX                                   = 8,
	ScaleY                                   = 9,
	ScaleZ                                   = 10,
	EComponentType_MAX                       = 11,
};

// Enum AnimGraphRuntime.EConstraintOffsetOption
// NumValues: 0x0003
enum class EConstraintOffsetOption : uint8
{
	None                                     = 0,
	Offset_RefPose                           = 1,
	EConstraintOffsetOption_MAX              = 2,
};

// Enum AnimGraphRuntime.CopyBoneDeltaMode
// NumValues: 0x0003
enum class ECopyBoneDeltaMode : uint8
{
	Accumulate                               = 0,
	Copy                                     = 1,
	CopyBoneDeltaMode_MAX                    = 2,
};

// Enum AnimGraphRuntime.EInterpolationBlend
// NumValues: 0x0008
enum class EInterpolationBlend : uint8
{
	Linear                                   = 0,
	Cubic                                    = 1,
	Sinusoidal                               = 2,
	EaseInOutExponent2                       = 3,
	EaseInOutExponent3                       = 4,
	EaseInOutExponent4                       = 5,
	EaseInOutExponent5                       = 6,
	MAX                                      = 7,
};

// Enum AnimGraphRuntime.EBoneModificationMode
// NumValues: 0x0004
enum class EBoneModificationMode : uint8
{
	BMM_Ignore                               = 0,
	BMM_Replace                              = 1,
	BMM_Additive                             = 2,
	BMM_MAX                                  = 3,
};

// Enum AnimGraphRuntime.EModifyCurveApplyMode
// NumValues: 0x0004
enum class EModifyCurveApplyMode : uint8
{
	Add                                      = 0,
	Scale                                    = 1,
	Blend                                    = 2,
	EModifyCurveApplyMode_MAX                = 3,
};

// Enum AnimGraphRuntime.EPoseDriverOutput
// NumValues: 0x0003
enum class EPoseDriverOutput : uint8
{
	DrivePoses                               = 0,
	DriveCurves                              = 1,
	EPoseDriverOutput_MAX                    = 2,
};

// Enum AnimGraphRuntime.EPoseDriverSource
// NumValues: 0x0003
enum class EPoseDriverSource : uint8
{
	Rotation                                 = 0,
	Translation                              = 1,
	EPoseDriverSource_MAX                    = 2,
};

// Enum AnimGraphRuntime.EPoseDriverType
// NumValues: 0x0004
enum class EPoseDriverType : uint8
{
	SwingAndTwist                            = 0,
	SwingOnly                                = 1,
	Translation                              = 2,
	EPoseDriverType_MAX                      = 3,
};

// Enum AnimGraphRuntime.ESnapshotSourceMode
// NumValues: 0x0003
enum class ESnapshotSourceMode : uint8
{
	NamedSnapshot                            = 0,
	SnapshotPin                              = 1,
	ESnapshotSourceMode_MAX                  = 2,
};

// Enum AnimGraphRuntime.ERefPoseType
// NumValues: 0x0003
enum class ERefPoseType : uint8
{
	EIT_LocalSpace                           = 0,
	EIT_Additive                             = 1,
	EIT_MAX                                  = 2,
};

// Enum AnimGraphRuntime.EScaleChainInitialLength
// NumValues: 0x0004
enum class EScaleChainInitialLength : uint8
{
	FixedDefaultLengthValue                  = 0,
	Distance                                 = 1,
	ChainLength                              = 2,
	EScaleChainInitialLength_MAX             = 3,
};

// Enum AnimGraphRuntime.ESequenceEvalReinit
// NumValues: 0x0004
enum class ESequenceEvalReinit : uint8
{
	NoReset                                  = 0,
	StartPosition                            = 1,
	ExplicitTime                             = 2,
	ESequenceEvalReinit_MAX                  = 3,
};

// Enum AnimGraphRuntime.ETimeAccumulatorFunc
// NumValues: 0x0003
enum class ETimeAccumulatorFunc : uint8
{
	None                                     = 0,
	ResetAll                                 = 1,
	ETimeAccumulatorFunc_MAX                 = 2,
};

// Enum AnimGraphRuntime.ESplineBoneAxis
// NumValues: 0x0004
enum class ESplineBoneAxis : uint8
{
	X                                        = 1,
	Y                                        = 2,
	Z                                        = 3,
	ESplineBoneAxis_MAX                      = 4,
};

// Enum AnimGraphRuntime.ERBFDistanceMethod
// NumValues: 0x0004
enum class ERBFDistanceMethod : uint8
{
	Euclidean                                = 0,
	Quaternion                               = 1,
	SwingAngle                               = 2,
	ERBFDistanceMethod_MAX                   = 3,
};

// Enum AnimGraphRuntime.ERBFFunctionType
// NumValues: 0x0006
enum class ERBFFunctionType : uint8
{
	Gaussian                                 = 0,
	Exponential                              = 1,
	Linear                                   = 2,
	Cubic                                    = 3,
	Quintic                                  = 4,
	ERBFFunctionType_MAX                     = 5,
};

// ScriptStruct AnimGraphRuntime.AnimLegIKDefinition
// 0x0040 (0x0040 - 0x0000)
struct FAnimLegIKDefinition final
{
public:
	struct FBoneReference                         IKFootBone;                                        // 0x0000(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         FKFootBone;                                        // 0x0018(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NumBonesInLimb;                                    // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         FootBoneForwardAxis;                               // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRotationLimit;                              // 0x0035(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinRotationAngle;                                  // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableKneeTwistCorrection;                        // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimLegIKDefinition) == 0x000008, "Wrong alignment on FAnimLegIKDefinition");
static_assert(sizeof(FAnimLegIKDefinition) == 0x000040, "Wrong size on FAnimLegIKDefinition");
static_assert(offsetof(FAnimLegIKDefinition, IKFootBone) == 0x000000, "Member 'FAnimLegIKDefinition::IKFootBone' has a wrong offset!");
static_assert(offsetof(FAnimLegIKDefinition, FKFootBone) == 0x000018, "Member 'FAnimLegIKDefinition::FKFootBone' has a wrong offset!");
static_assert(offsetof(FAnimLegIKDefinition, NumBonesInLimb) == 0x000030, "Member 'FAnimLegIKDefinition::NumBonesInLimb' has a wrong offset!");
static_assert(offsetof(FAnimLegIKDefinition, FootBoneForwardAxis) == 0x000034, "Member 'FAnimLegIKDefinition::FootBoneForwardAxis' has a wrong offset!");
static_assert(offsetof(FAnimLegIKDefinition, bEnableRotationLimit) == 0x000035, "Member 'FAnimLegIKDefinition::bEnableRotationLimit' has a wrong offset!");
static_assert(offsetof(FAnimLegIKDefinition, MinRotationAngle) == 0x000038, "Member 'FAnimLegIKDefinition::MinRotationAngle' has a wrong offset!");
static_assert(offsetof(FAnimLegIKDefinition, bEnableKneeTwistCorrection) == 0x00003C, "Member 'FAnimLegIKDefinition::bEnableKneeTwistCorrection' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_ApplyAdditive
// 0x0048 (0x0078 - 0x0030)
struct FAnimNode_ApplyAdditive final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Base;                                              // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              Additive;                                          // 0x0048(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x0064(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         LODThreshold;                                      // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActualAlpha;                                       // 0x0070(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_ApplyAdditive) == 0x000008, "Wrong alignment on FAnimNode_ApplyAdditive");
static_assert(sizeof(FAnimNode_ApplyAdditive) == 0x000078, "Wrong size on FAnimNode_ApplyAdditive");
static_assert(offsetof(FAnimNode_ApplyAdditive, Base) == 0x000030, "Member 'FAnimNode_ApplyAdditive::Base' has a wrong offset!");
static_assert(offsetof(FAnimNode_ApplyAdditive, Additive) == 0x000048, "Member 'FAnimNode_ApplyAdditive::Additive' has a wrong offset!");
static_assert(offsetof(FAnimNode_ApplyAdditive, Alpha) == 0x000060, "Member 'FAnimNode_ApplyAdditive::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_ApplyAdditive, AlphaScaleBias) == 0x000064, "Member 'FAnimNode_ApplyAdditive::AlphaScaleBias' has a wrong offset!");
static_assert(offsetof(FAnimNode_ApplyAdditive, LODThreshold) == 0x00006C, "Member 'FAnimNode_ApplyAdditive::LODThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_ApplyAdditive, ActualAlpha) == 0x000070, "Member 'FAnimNode_ApplyAdditive::ActualAlpha' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_SkeletalControlBase
// 0x0040 (0x0070 - 0x0030)
struct FAnimNode_SkeletalControlBase : public FAnimNode_Base
{
public:
	struct FComponentSpacePoseLink                ComponentPose;                                     // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x004C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         LODThreshold;                                      // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActualAlpha;                                       // 0x0058(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x14];                                      // 0x005C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_SkeletalControlBase) == 0x000008, "Wrong alignment on FAnimNode_SkeletalControlBase");
static_assert(sizeof(FAnimNode_SkeletalControlBase) == 0x000070, "Wrong size on FAnimNode_SkeletalControlBase");
static_assert(offsetof(FAnimNode_SkeletalControlBase, ComponentPose) == 0x000030, "Member 'FAnimNode_SkeletalControlBase::ComponentPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_SkeletalControlBase, Alpha) == 0x000048, "Member 'FAnimNode_SkeletalControlBase::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_SkeletalControlBase, AlphaScaleBias) == 0x00004C, "Member 'FAnimNode_SkeletalControlBase::AlphaScaleBias' has a wrong offset!");
static_assert(offsetof(FAnimNode_SkeletalControlBase, LODThreshold) == 0x000054, "Member 'FAnimNode_SkeletalControlBase::LODThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_SkeletalControlBase, ActualAlpha) == 0x000058, "Member 'FAnimNode_SkeletalControlBase::ActualAlpha' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_CopyBoneDelta
// 0x0040 (0x00B0 - 0x0070)
struct FAnimNode_CopyBoneDelta final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         SourceBone;                                        // 0x0070(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         TargetBone;                                        // 0x0088(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCopyTranslation;                                  // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyRotation;                                     // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyScale;                                        // 0x00A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECopyBoneDeltaMode                            CopyMode;                                          // 0x00A3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslationMultiplier;                             // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationMultiplier;                                // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleMultiplier;                                   // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_CopyBoneDelta) == 0x000008, "Wrong alignment on FAnimNode_CopyBoneDelta");
static_assert(sizeof(FAnimNode_CopyBoneDelta) == 0x0000B0, "Wrong size on FAnimNode_CopyBoneDelta");
static_assert(offsetof(FAnimNode_CopyBoneDelta, SourceBone) == 0x000070, "Member 'FAnimNode_CopyBoneDelta::SourceBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBoneDelta, TargetBone) == 0x000088, "Member 'FAnimNode_CopyBoneDelta::TargetBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBoneDelta, bCopyTranslation) == 0x0000A0, "Member 'FAnimNode_CopyBoneDelta::bCopyTranslation' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBoneDelta, bCopyRotation) == 0x0000A1, "Member 'FAnimNode_CopyBoneDelta::bCopyRotation' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBoneDelta, bCopyScale) == 0x0000A2, "Member 'FAnimNode_CopyBoneDelta::bCopyScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBoneDelta, CopyMode) == 0x0000A3, "Member 'FAnimNode_CopyBoneDelta::CopyMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBoneDelta, TranslationMultiplier) == 0x0000A4, "Member 'FAnimNode_CopyBoneDelta::TranslationMultiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBoneDelta, RotationMultiplier) == 0x0000A8, "Member 'FAnimNode_CopyBoneDelta::RotationMultiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBoneDelta, ScaleMultiplier) == 0x0000AC, "Member 'FAnimNode_CopyBoneDelta::ScaleMultiplier' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimPhysConstraintSetup
// 0x005C (0x005C - 0x0000)
struct FAnimPhysConstraintSetup final
{
public:
	EAnimPhysLinearConstraintType                 LinearXLimitType;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimPhysLinearConstraintType                 LinearYLimitType;                                  // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimPhysLinearConstraintType                 LinearZLimitType;                                  // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LinearAxesMin;                                     // 0x0004(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinearAxesMax;                                     // 0x0010(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimPhysAngularConstraintType                AngularConstraintType;                             // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimPhysTwistAxis                            TwistAxis;                                         // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConeAngle;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularXAngle;                                     // 0x0024(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularYAngle;                                     // 0x0028(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularZAngle;                                     // 0x002C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularLimitsMin;                                  // 0x0030(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularLimitsMax;                                  // 0x003C(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimPhysTwistAxis                            AngularTargetAxis;                                 // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AngularTarget;                                     // 0x004C(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLinearFullyLocked;                                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimPhysConstraintSetup) == 0x000004, "Wrong alignment on FAnimPhysConstraintSetup");
static_assert(sizeof(FAnimPhysConstraintSetup) == 0x00005C, "Wrong size on FAnimPhysConstraintSetup");
static_assert(offsetof(FAnimPhysConstraintSetup, LinearXLimitType) == 0x000000, "Member 'FAnimPhysConstraintSetup::LinearXLimitType' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, LinearYLimitType) == 0x000001, "Member 'FAnimPhysConstraintSetup::LinearYLimitType' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, LinearZLimitType) == 0x000002, "Member 'FAnimPhysConstraintSetup::LinearZLimitType' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, LinearAxesMin) == 0x000004, "Member 'FAnimPhysConstraintSetup::LinearAxesMin' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, LinearAxesMax) == 0x000010, "Member 'FAnimPhysConstraintSetup::LinearAxesMax' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, AngularConstraintType) == 0x00001C, "Member 'FAnimPhysConstraintSetup::AngularConstraintType' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, TwistAxis) == 0x00001D, "Member 'FAnimPhysConstraintSetup::TwistAxis' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, ConeAngle) == 0x000020, "Member 'FAnimPhysConstraintSetup::ConeAngle' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, AngularXAngle) == 0x000024, "Member 'FAnimPhysConstraintSetup::AngularXAngle' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, AngularYAngle) == 0x000028, "Member 'FAnimPhysConstraintSetup::AngularYAngle' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, AngularZAngle) == 0x00002C, "Member 'FAnimPhysConstraintSetup::AngularZAngle' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, AngularLimitsMin) == 0x000030, "Member 'FAnimPhysConstraintSetup::AngularLimitsMin' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, AngularLimitsMax) == 0x00003C, "Member 'FAnimPhysConstraintSetup::AngularLimitsMax' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, AngularTargetAxis) == 0x000048, "Member 'FAnimPhysConstraintSetup::AngularTargetAxis' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, AngularTarget) == 0x00004C, "Member 'FAnimPhysConstraintSetup::AngularTarget' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, bLinearFullyLocked) == 0x000058, "Member 'FAnimPhysConstraintSetup::bLinearFullyLocked' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_BlendSpacePlayer
// 0x00D8 (0x0130 - 0x0058)
struct FAnimNode_BlendSpacePlayer : public FAnimNode_AssetPlayerBase
{
public:
	float                                         X;                                                 // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TranslationMultiplier;                             // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartPosition;                                     // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpaceBase*                        BlendSpace;                                        // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetPlayTimeWhenBlendSpaceChanges;               // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlendFilter                           BlendFilter;                                       // 0x0088(0x0090)(Protected, NativeAccessSpecifierProtected)
	TArray<struct FBlendSampleData>               BlendSampleDataCache;                              // 0x0118(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UBlendSpaceBase*                        PreviousBlendSpace;                                // 0x0128(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FAnimNode_BlendSpacePlayer) == 0x000008, "Wrong alignment on FAnimNode_BlendSpacePlayer");
static_assert(sizeof(FAnimNode_BlendSpacePlayer) == 0x000130, "Wrong size on FAnimNode_BlendSpacePlayer");
static_assert(offsetof(FAnimNode_BlendSpacePlayer, X) == 0x000058, "Member 'FAnimNode_BlendSpacePlayer::X' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer, Y) == 0x00005C, "Member 'FAnimNode_BlendSpacePlayer::Y' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer, Z) == 0x000060, "Member 'FAnimNode_BlendSpacePlayer::Z' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer, PlayRate) == 0x000064, "Member 'FAnimNode_BlendSpacePlayer::PlayRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer, bLoop) == 0x000068, "Member 'FAnimNode_BlendSpacePlayer::bLoop' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer, TranslationMultiplier) == 0x00006C, "Member 'FAnimNode_BlendSpacePlayer::TranslationMultiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer, StartPosition) == 0x000070, "Member 'FAnimNode_BlendSpacePlayer::StartPosition' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer, BlendSpace) == 0x000078, "Member 'FAnimNode_BlendSpacePlayer::BlendSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer, bResetPlayTimeWhenBlendSpaceChanges) == 0x000080, "Member 'FAnimNode_BlendSpacePlayer::bResetPlayTimeWhenBlendSpaceChanges' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer, BlendFilter) == 0x000088, "Member 'FAnimNode_BlendSpacePlayer::BlendFilter' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer, BlendSampleDataCache) == 0x000118, "Member 'FAnimNode_BlendSpacePlayer::BlendSampleDataCache' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer, PreviousBlendSpace) == 0x000128, "Member 'FAnimNode_BlendSpacePlayer::PreviousBlendSpace' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_CopyPoseFromMesh
// 0x0068 (0x0098 - 0x0030)
struct FAnimNode_CopyPoseFromMesh final : public FAnimNode_Base
{
public:
	TWeakObjectPtr<class USkeletalMeshComponent>  SourceMeshComponent;                               // 0x0030(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAttachedParent;                                // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x5F];                                      // 0x0039(0x005F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_CopyPoseFromMesh) == 0x000008, "Wrong alignment on FAnimNode_CopyPoseFromMesh");
static_assert(sizeof(FAnimNode_CopyPoseFromMesh) == 0x000098, "Wrong size on FAnimNode_CopyPoseFromMesh");
static_assert(offsetof(FAnimNode_CopyPoseFromMesh, SourceMeshComponent) == 0x000030, "Member 'FAnimNode_CopyPoseFromMesh::SourceMeshComponent' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyPoseFromMesh, bUseAttachedParent) == 0x000038, "Member 'FAnimNode_CopyPoseFromMesh::bUseAttachedParent' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_AimOffsetLookAt
// 0x00F0 (0x0220 - 0x0130)
struct FAnimNode_AimOffsetLookAt final : public FAnimNode_BlendSpacePlayer
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0130(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         LODThreshold;                                      // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLODEnabled;                                     // 0x014C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LookAtLocation;                                    // 0x0150(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SourceSocketName;                                  // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PivotSocketName;                                   // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SocketAxis;                                        // 0x0170(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         SocketBoneReference;                               // 0x0180(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SocketLocalTransform;                              // 0x01A0(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         PivotSocketBoneReference;                          // 0x01D0(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8[0x8];                                      // 0x01E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PivotSocketLocalTransform;                         // 0x01F0(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_AimOffsetLookAt) == 0x000010, "Wrong alignment on FAnimNode_AimOffsetLookAt");
static_assert(sizeof(FAnimNode_AimOffsetLookAt) == 0x000220, "Wrong size on FAnimNode_AimOffsetLookAt");
static_assert(offsetof(FAnimNode_AimOffsetLookAt, BasePose) == 0x000130, "Member 'FAnimNode_AimOffsetLookAt::BasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetLookAt, LODThreshold) == 0x000148, "Member 'FAnimNode_AimOffsetLookAt::LODThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetLookAt, bIsLODEnabled) == 0x00014C, "Member 'FAnimNode_AimOffsetLookAt::bIsLODEnabled' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetLookAt, LookAtLocation) == 0x000150, "Member 'FAnimNode_AimOffsetLookAt::LookAtLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetLookAt, SourceSocketName) == 0x000160, "Member 'FAnimNode_AimOffsetLookAt::SourceSocketName' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetLookAt, PivotSocketName) == 0x000168, "Member 'FAnimNode_AimOffsetLookAt::PivotSocketName' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetLookAt, SocketAxis) == 0x000170, "Member 'FAnimNode_AimOffsetLookAt::SocketAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetLookAt, Alpha) == 0x00017C, "Member 'FAnimNode_AimOffsetLookAt::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetLookAt, SocketBoneReference) == 0x000180, "Member 'FAnimNode_AimOffsetLookAt::SocketBoneReference' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetLookAt, SocketLocalTransform) == 0x0001A0, "Member 'FAnimNode_AimOffsetLookAt::SocketLocalTransform' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetLookAt, PivotSocketBoneReference) == 0x0001D0, "Member 'FAnimNode_AimOffsetLookAt::PivotSocketBoneReference' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetLookAt, PivotSocketLocalTransform) == 0x0001F0, "Member 'FAnimNode_AimOffsetLookAt::PivotSocketLocalTransform' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.SplineIKCachedBoneData
// 0x0020 (0x0020 - 0x0000)
struct FSplineIKCachedBoneData final
{
public:
	struct FBoneReference                         Bone;                                              // 0x0000(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         RefSkeletonIndex;                                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSplineIKCachedBoneData) == 0x000008, "Wrong alignment on FSplineIKCachedBoneData");
static_assert(sizeof(FSplineIKCachedBoneData) == 0x000020, "Wrong size on FSplineIKCachedBoneData");
static_assert(offsetof(FSplineIKCachedBoneData, Bone) == 0x000000, "Member 'FSplineIKCachedBoneData::Bone' has a wrong offset!");
static_assert(offsetof(FSplineIKCachedBoneData, RefSkeletonIndex) == 0x000018, "Member 'FSplineIKCachedBoneData::RefSkeletonIndex' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.BlendBoneByChannelEntry
// 0x0038 (0x0038 - 0x0000)
struct FBlendBoneByChannelEntry final
{
public:
	struct FBoneReference                         SourceBone;                                        // 0x0000(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         TargetBone;                                        // 0x0018(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bBlendTranslation;                                 // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlendRotation;                                    // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlendScale;                                       // 0x0032(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBlendBoneByChannelEntry) == 0x000008, "Wrong alignment on FBlendBoneByChannelEntry");
static_assert(sizeof(FBlendBoneByChannelEntry) == 0x000038, "Wrong size on FBlendBoneByChannelEntry");
static_assert(offsetof(FBlendBoneByChannelEntry, SourceBone) == 0x000000, "Member 'FBlendBoneByChannelEntry::SourceBone' has a wrong offset!");
static_assert(offsetof(FBlendBoneByChannelEntry, TargetBone) == 0x000018, "Member 'FBlendBoneByChannelEntry::TargetBone' has a wrong offset!");
static_assert(offsetof(FBlendBoneByChannelEntry, bBlendTranslation) == 0x000030, "Member 'FBlendBoneByChannelEntry::bBlendTranslation' has a wrong offset!");
static_assert(offsetof(FBlendBoneByChannelEntry, bBlendRotation) == 0x000031, "Member 'FBlendBoneByChannelEntry::bBlendRotation' has a wrong offset!");
static_assert(offsetof(FBlendBoneByChannelEntry, bBlendScale) == 0x000032, "Member 'FBlendBoneByChannelEntry::bBlendScale' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimPhysPlanarLimit
// 0x0050 (0x0050 - 0x0000)
struct FAnimPhysPlanarLimit final
{
public:
	struct FBoneReference                         DrivingBone;                                       // 0x0000(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PlaneTransform;                                    // 0x0020(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimPhysPlanarLimit) == 0x000010, "Wrong alignment on FAnimPhysPlanarLimit");
static_assert(sizeof(FAnimPhysPlanarLimit) == 0x000050, "Wrong size on FAnimPhysPlanarLimit");
static_assert(offsetof(FAnimPhysPlanarLimit, DrivingBone) == 0x000000, "Member 'FAnimPhysPlanarLimit::DrivingBone' has a wrong offset!");
static_assert(offsetof(FAnimPhysPlanarLimit, PlaneTransform) == 0x000020, "Member 'FAnimPhysPlanarLimit::PlaneTransform' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimPhysSphericalLimit
// 0x0030 (0x0030 - 0x0000)
struct FAnimPhysSphericalLimit final
{
public:
	struct FBoneReference                         DrivingBone;                                       // 0x0000(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                SphereLocalOffset;                                 // 0x0018(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitRadius;                                       // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESphericalLimitType                           LimitType;                                         // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimPhysSphericalLimit) == 0x000008, "Wrong alignment on FAnimPhysSphericalLimit");
static_assert(sizeof(FAnimPhysSphericalLimit) == 0x000030, "Wrong size on FAnimPhysSphericalLimit");
static_assert(offsetof(FAnimPhysSphericalLimit, DrivingBone) == 0x000000, "Member 'FAnimPhysSphericalLimit::DrivingBone' has a wrong offset!");
static_assert(offsetof(FAnimPhysSphericalLimit, SphereLocalOffset) == 0x000018, "Member 'FAnimPhysSphericalLimit::SphereLocalOffset' has a wrong offset!");
static_assert(offsetof(FAnimPhysSphericalLimit, LimitRadius) == 0x000024, "Member 'FAnimPhysSphericalLimit::LimitRadius' has a wrong offset!");
static_assert(offsetof(FAnimPhysSphericalLimit, LimitType) == 0x000028, "Member 'FAnimPhysSphericalLimit::LimitType' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_AnimDynamics
// 0x0210 (0x0280 - 0x0070)
struct FAnimNode_AnimDynamics final : public FAnimNode_SkeletalControlBase
{
public:
	EAnimPhysSimSpaceType                         SimulationSpace;                                   // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         RelativeSpaceBone;                                 // 0x0078(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bChain;                                            // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         BoundBone;                                         // 0x0098(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         ChainEnd;                                          // 0x00B0(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtents;                                        // 0x00C8(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalJointOffset;                                  // 0x00D4(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLinearSpring;                                     // 0x00E4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAngularSpring;                                    // 0x00E5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E6[0x2];                                       // 0x00E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LinearSpringConstant;                              // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularSpringConstant;                             // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableWind;                                       // 0x00F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWindWasEnabled;                                   // 0x00F1(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2[0x2];                                       // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindScale;                                         // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideLinearDamping;                            // 0x00F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LinearDampingOverride;                             // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideAngularDamping;                           // 0x0100(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AngularDampingOverride;                            // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideAngularBias;                              // 0x0108(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AngularBiasOverride;                               // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoUpdate;                                         // 0x0110(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoEval;                                           // 0x0111(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_112[0x2];                                      // 0x0112(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumSolverIterationsPreUpdate;                      // 0x0114(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSolverIterationsPostUpdate;                     // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimPhysConstraintSetup               ConstraintSetup;                                   // 0x011C(0x005C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUsePlanarLimit;                                   // 0x0178(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAnimPhysPlanarLimit>           PlanarLimits;                                      // 0x0180(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseSphericalLimits;                               // 0x0190(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAnimPhysSphericalLimit>        SphericalLimits;                                   // 0x0198(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EAnimPhysCollisionType                        CollisionType;                                     // 0x01A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9[0x3];                                      // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SphereCollisionRadius;                             // 0x01AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ExternalForce;                                     // 0x01B0(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC[0xC4];                                     // 0x01BC(0x00C4)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_AnimDynamics) == 0x000008, "Wrong alignment on FAnimNode_AnimDynamics");
static_assert(sizeof(FAnimNode_AnimDynamics) == 0x000280, "Wrong size on FAnimNode_AnimDynamics");
static_assert(offsetof(FAnimNode_AnimDynamics, SimulationSpace) == 0x000070, "Member 'FAnimNode_AnimDynamics::SimulationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, RelativeSpaceBone) == 0x000078, "Member 'FAnimNode_AnimDynamics::RelativeSpaceBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, bChain) == 0x000090, "Member 'FAnimNode_AnimDynamics::bChain' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, BoundBone) == 0x000098, "Member 'FAnimNode_AnimDynamics::BoundBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, ChainEnd) == 0x0000B0, "Member 'FAnimNode_AnimDynamics::ChainEnd' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, BoxExtents) == 0x0000C8, "Member 'FAnimNode_AnimDynamics::BoxExtents' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, LocalJointOffset) == 0x0000D4, "Member 'FAnimNode_AnimDynamics::LocalJointOffset' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, GravityScale) == 0x0000E0, "Member 'FAnimNode_AnimDynamics::GravityScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, bLinearSpring) == 0x0000E4, "Member 'FAnimNode_AnimDynamics::bLinearSpring' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, bAngularSpring) == 0x0000E5, "Member 'FAnimNode_AnimDynamics::bAngularSpring' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, LinearSpringConstant) == 0x0000E8, "Member 'FAnimNode_AnimDynamics::LinearSpringConstant' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, AngularSpringConstant) == 0x0000EC, "Member 'FAnimNode_AnimDynamics::AngularSpringConstant' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, bEnableWind) == 0x0000F0, "Member 'FAnimNode_AnimDynamics::bEnableWind' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, bWindWasEnabled) == 0x0000F1, "Member 'FAnimNode_AnimDynamics::bWindWasEnabled' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, WindScale) == 0x0000F4, "Member 'FAnimNode_AnimDynamics::WindScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, bOverrideLinearDamping) == 0x0000F8, "Member 'FAnimNode_AnimDynamics::bOverrideLinearDamping' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, LinearDampingOverride) == 0x0000FC, "Member 'FAnimNode_AnimDynamics::LinearDampingOverride' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, bOverrideAngularDamping) == 0x000100, "Member 'FAnimNode_AnimDynamics::bOverrideAngularDamping' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, AngularDampingOverride) == 0x000104, "Member 'FAnimNode_AnimDynamics::AngularDampingOverride' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, bOverrideAngularBias) == 0x000108, "Member 'FAnimNode_AnimDynamics::bOverrideAngularBias' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, AngularBiasOverride) == 0x00010C, "Member 'FAnimNode_AnimDynamics::AngularBiasOverride' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, bDoUpdate) == 0x000110, "Member 'FAnimNode_AnimDynamics::bDoUpdate' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, bDoEval) == 0x000111, "Member 'FAnimNode_AnimDynamics::bDoEval' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, NumSolverIterationsPreUpdate) == 0x000114, "Member 'FAnimNode_AnimDynamics::NumSolverIterationsPreUpdate' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, NumSolverIterationsPostUpdate) == 0x000118, "Member 'FAnimNode_AnimDynamics::NumSolverIterationsPostUpdate' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, ConstraintSetup) == 0x00011C, "Member 'FAnimNode_AnimDynamics::ConstraintSetup' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, bUsePlanarLimit) == 0x000178, "Member 'FAnimNode_AnimDynamics::bUsePlanarLimit' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, PlanarLimits) == 0x000180, "Member 'FAnimNode_AnimDynamics::PlanarLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, bUseSphericalLimits) == 0x000190, "Member 'FAnimNode_AnimDynamics::bUseSphericalLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, SphericalLimits) == 0x000198, "Member 'FAnimNode_AnimDynamics::SphericalLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, CollisionType) == 0x0001A8, "Member 'FAnimNode_AnimDynamics::CollisionType' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, SphereCollisionRadius) == 0x0001AC, "Member 'FAnimNode_AnimDynamics::SphereCollisionRadius' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, ExternalForce) == 0x0001B0, "Member 'FAnimNode_AnimDynamics::ExternalForce' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_Slot
// 0x0038 (0x0068 - 0x0030)
struct FAnimNode_Slot final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SlotName;                                          // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysUpdateSourcePose;                           // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimeAccumulatorFunc                          TimeAccumulatorFunc;                               // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TranslationMultiplier;                             // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x10];                                      // 0x0058(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_Slot) == 0x000008, "Wrong alignment on FAnimNode_Slot");
static_assert(sizeof(FAnimNode_Slot) == 0x000068, "Wrong size on FAnimNode_Slot");
static_assert(offsetof(FAnimNode_Slot, Source) == 0x000030, "Member 'FAnimNode_Slot::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_Slot, SlotName) == 0x000048, "Member 'FAnimNode_Slot::SlotName' has a wrong offset!");
static_assert(offsetof(FAnimNode_Slot, bAlwaysUpdateSourcePose) == 0x000050, "Member 'FAnimNode_Slot::bAlwaysUpdateSourcePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_Slot, TimeAccumulatorFunc) == 0x000051, "Member 'FAnimNode_Slot::TimeAccumulatorFunc' has a wrong offset!");
static_assert(offsetof(FAnimNode_Slot, TranslationMultiplier) == 0x000054, "Member 'FAnimNode_Slot::TranslationMultiplier' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_RotateRootBone
// 0x0030 (0x0060 - 0x0030)
struct FAnimNode_RotateRootBone final : public FAnimNode_Base
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               MeshToComponent;                                   // 0x0050(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_RotateRootBone) == 0x000008, "Wrong alignment on FAnimNode_RotateRootBone");
static_assert(sizeof(FAnimNode_RotateRootBone) == 0x000060, "Wrong size on FAnimNode_RotateRootBone");
static_assert(offsetof(FAnimNode_RotateRootBone, BasePose) == 0x000030, "Member 'FAnimNode_RotateRootBone::BasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotateRootBone, Pitch) == 0x000048, "Member 'FAnimNode_RotateRootBone::Pitch' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotateRootBone, Yaw) == 0x00004C, "Member 'FAnimNode_RotateRootBone::Yaw' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotateRootBone, MeshToComponent) == 0x000050, "Member 'FAnimNode_RotateRootBone::MeshToComponent' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.SocketReference
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x10) FSocketReference final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x38];                                       // 0x0008(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSocketReference) == 0x000010, "Wrong alignment on FSocketReference");
static_assert(sizeof(FSocketReference) == 0x000040, "Wrong size on FSocketReference");
static_assert(offsetof(FSocketReference, SocketName) == 0x000000, "Member 'FSocketReference::SocketName' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_BlendBoneByChannel
// 0x0070 (0x00A0 - 0x0030)
struct FAnimNode_BlendBoneByChannel final : public FAnimNode_Base
{
public:
	struct FPoseLink                              A;                                                 // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              B;                                                 // 0x0048(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x0064(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBlendBoneByChannelEntry>       BoneDefinitions;                                   // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EBoneControlSpace                             TransformsSpace;                                   // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InternalBlendAlpha;                                // 0x0084(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBIsRelevant;                                      // 0x0088(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBlendBoneByChannelEntry>       ValidBoneEntries;                                  // 0x0090(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAnimNode_BlendBoneByChannel) == 0x000008, "Wrong alignment on FAnimNode_BlendBoneByChannel");
static_assert(sizeof(FAnimNode_BlendBoneByChannel) == 0x0000A0, "Wrong size on FAnimNode_BlendBoneByChannel");
static_assert(offsetof(FAnimNode_BlendBoneByChannel, A) == 0x000030, "Member 'FAnimNode_BlendBoneByChannel::A' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendBoneByChannel, B) == 0x000048, "Member 'FAnimNode_BlendBoneByChannel::B' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendBoneByChannel, Alpha) == 0x000060, "Member 'FAnimNode_BlendBoneByChannel::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendBoneByChannel, AlphaScaleBias) == 0x000064, "Member 'FAnimNode_BlendBoneByChannel::AlphaScaleBias' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendBoneByChannel, BoneDefinitions) == 0x000070, "Member 'FAnimNode_BlendBoneByChannel::BoneDefinitions' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendBoneByChannel, TransformsSpace) == 0x000080, "Member 'FAnimNode_BlendBoneByChannel::TransformsSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendBoneByChannel, InternalBlendAlpha) == 0x000084, "Member 'FAnimNode_BlendBoneByChannel::InternalBlendAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendBoneByChannel, bBIsRelevant) == 0x000088, "Member 'FAnimNode_BlendBoneByChannel::bBIsRelevant' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendBoneByChannel, ValidBoneEntries) == 0x000090, "Member 'FAnimNode_BlendBoneByChannel::ValidBoneEntries' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_BlendListBase
// 0x0098 (0x00C8 - 0x0030)
struct FAnimNode_BlendListBase : public FAnimNode_Base
{
public:
	TArray<struct FPoseLink>                      BlendPose;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 BlendTime;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             BlendType;                                         // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CustomBlendCurve;                                  // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendProfile*                          BlendProfile;                                      // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAlphaBlend>                    Blends;                                            // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 BlendWeights;                                      // 0x0078(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<float>                                 RemainingBlendTimes;                               // 0x0088(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         LastActiveChildIndex;                              // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBlendSampleData>               PerBoneSampleData;                                 // 0x00A0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_B0[0x10];                                      // 0x00B0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bResetChildOnActivation;                           // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BlendListBase) == 0x000008, "Wrong alignment on FAnimNode_BlendListBase");
static_assert(sizeof(FAnimNode_BlendListBase) == 0x0000C8, "Wrong size on FAnimNode_BlendListBase");
static_assert(offsetof(FAnimNode_BlendListBase, BlendPose) == 0x000030, "Member 'FAnimNode_BlendListBase::BlendPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendListBase, BlendTime) == 0x000040, "Member 'FAnimNode_BlendListBase::BlendTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendListBase, BlendType) == 0x000050, "Member 'FAnimNode_BlendListBase::BlendType' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendListBase, CustomBlendCurve) == 0x000058, "Member 'FAnimNode_BlendListBase::CustomBlendCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendListBase, BlendProfile) == 0x000060, "Member 'FAnimNode_BlendListBase::BlendProfile' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendListBase, Blends) == 0x000068, "Member 'FAnimNode_BlendListBase::Blends' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendListBase, BlendWeights) == 0x000078, "Member 'FAnimNode_BlendListBase::BlendWeights' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendListBase, RemainingBlendTimes) == 0x000088, "Member 'FAnimNode_BlendListBase::RemainingBlendTimes' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendListBase, LastActiveChildIndex) == 0x000098, "Member 'FAnimNode_BlendListBase::LastActiveChildIndex' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendListBase, PerBoneSampleData) == 0x0000A0, "Member 'FAnimNode_BlendListBase::PerBoneSampleData' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendListBase, bResetChildOnActivation) == 0x0000C0, "Member 'FAnimNode_BlendListBase::bResetChildOnActivation' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_BlendListByBool
// 0x0008 (0x00D0 - 0x00C8)
struct FAnimNode_BlendListByBool final : public FAnimNode_BlendListBase
{
public:
	bool                                          bActiveValue;                                      // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BlendListByBool) == 0x000008, "Wrong alignment on FAnimNode_BlendListByBool");
static_assert(sizeof(FAnimNode_BlendListByBool) == 0x0000D0, "Wrong size on FAnimNode_BlendListByBool");
static_assert(offsetof(FAnimNode_BlendListByBool, bActiveValue) == 0x0000C8, "Member 'FAnimNode_BlendListByBool::bActiveValue' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_BlendListByEnum
// 0x0018 (0x00E0 - 0x00C8)
struct FAnimNode_BlendListByEnum final : public FAnimNode_BlendListBase
{
public:
	TArray<int32>                                 EnumToPoseIndex;                                   // 0x00C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         ActiveEnumValue;                                   // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BlendListByEnum) == 0x000008, "Wrong alignment on FAnimNode_BlendListByEnum");
static_assert(sizeof(FAnimNode_BlendListByEnum) == 0x0000E0, "Wrong size on FAnimNode_BlendListByEnum");
static_assert(offsetof(FAnimNode_BlendListByEnum, EnumToPoseIndex) == 0x0000C8, "Member 'FAnimNode_BlendListByEnum::EnumToPoseIndex' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendListByEnum, ActiveEnumValue) == 0x0000D8, "Member 'FAnimNode_BlendListByEnum::ActiveEnumValue' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_ObserveBone
// 0x0040 (0x00B0 - 0x0070)
struct FAnimNode_ObserveBone final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         BoneToObserve;                                     // 0x0070(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EBoneControlSpace                             DisplaySpace;                                      // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelativeToRefPose;                                // 0x0089(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Translation;                                       // 0x008C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0098(0x000C)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x00A4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_ObserveBone) == 0x000008, "Wrong alignment on FAnimNode_ObserveBone");
static_assert(sizeof(FAnimNode_ObserveBone) == 0x0000B0, "Wrong size on FAnimNode_ObserveBone");
static_assert(offsetof(FAnimNode_ObserveBone, BoneToObserve) == 0x000070, "Member 'FAnimNode_ObserveBone::BoneToObserve' has a wrong offset!");
static_assert(offsetof(FAnimNode_ObserveBone, DisplaySpace) == 0x000088, "Member 'FAnimNode_ObserveBone::DisplaySpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_ObserveBone, bRelativeToRefPose) == 0x000089, "Member 'FAnimNode_ObserveBone::bRelativeToRefPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_ObserveBone, Translation) == 0x00008C, "Member 'FAnimNode_ObserveBone::Translation' has a wrong offset!");
static_assert(offsetof(FAnimNode_ObserveBone, Rotation) == 0x000098, "Member 'FAnimNode_ObserveBone::Rotation' has a wrong offset!");
static_assert(offsetof(FAnimNode_ObserveBone, Scale) == 0x0000A4, "Member 'FAnimNode_ObserveBone::Scale' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimLegIKData
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x10) FAnimLegIKData final
{
public:
	uint8                                         Pad_0[0x70];                                       // 0x0000(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimLegIKData) == 0x000010, "Wrong alignment on FAnimLegIKData");
static_assert(sizeof(FAnimLegIKData) == 0x000070, "Wrong size on FAnimLegIKData");

// ScriptStruct AnimGraphRuntime.AnimNode_BlendListByInt
// 0x0008 (0x00D0 - 0x00C8)
struct FAnimNode_BlendListByInt final : public FAnimNode_BlendListBase
{
public:
	int32                                         ActiveChildIndex;                                  // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BlendListByInt) == 0x000008, "Wrong alignment on FAnimNode_BlendListByInt");
static_assert(sizeof(FAnimNode_BlendListByInt) == 0x0000D0, "Wrong size on FAnimNode_BlendListByInt");
static_assert(offsetof(FAnimNode_BlendListByInt, ActiveChildIndex) == 0x0000C8, "Member 'FAnimNode_BlendListByInt::ActiveChildIndex' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.ReferenceBoneFrame
// 0x0028 (0x0028 - 0x0000)
struct FReferenceBoneFrame final
{
public:
	struct FBoneReference                         Bone;                                              // 0x0000(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FAxis                                  Axis;                                              // 0x0018(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReferenceBoneFrame) == 0x000008, "Wrong alignment on FReferenceBoneFrame");
static_assert(sizeof(FReferenceBoneFrame) == 0x000028, "Wrong size on FReferenceBoneFrame");
static_assert(offsetof(FReferenceBoneFrame, Bone) == 0x000000, "Member 'FReferenceBoneFrame::Bone' has a wrong offset!");
static_assert(offsetof(FReferenceBoneFrame, Axis) == 0x000018, "Member 'FReferenceBoneFrame::Axis' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_BlendSpaceEvaluator
// 0x0008 (0x0138 - 0x0130)
struct FAnimNode_BlendSpaceEvaluator final : public FAnimNode_BlendSpacePlayer
{
public:
	float                                         NormalizedTime;                                    // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BlendSpaceEvaluator) == 0x000008, "Wrong alignment on FAnimNode_BlendSpaceEvaluator");
static_assert(sizeof(FAnimNode_BlendSpaceEvaluator) == 0x000138, "Wrong size on FAnimNode_BlendSpaceEvaluator");
static_assert(offsetof(FAnimNode_BlendSpaceEvaluator, NormalizedTime) == 0x000130, "Member 'FAnimNode_BlendSpaceEvaluator::NormalizedTime' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_SplineIK
// 0x01A0 (0x0210 - 0x0070)
struct FAnimNode_SplineIK final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         StartBone;                                         // 0x0070(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         EndBone;                                           // 0x0088(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	ESplineBoneAxis                               BoneAxis;                                          // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoCalculateSpline;                              // 0x00A1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PointCount;                                        // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     ControlPoints;                                     // 0x00A8(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Roll;                                              // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TwistStart;                                        // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TwistEnd;                                          // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAlphaBlend                            TwistBlend;                                        // 0x00C8(0x0038)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Stretch;                                           // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Offset;                                            // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x70];                                     // 0x0108(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSplineCurves                          BoneSpline;                                        // 0x0178(0x0060)(NativeAccessSpecifierPrivate)
	float                                         OriginalSplineLength;                              // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSplineIKCachedBoneData>        CachedBoneReferences;                              // 0x01E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 CachedBoneLengths;                                 // 0x01F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FQuat>                          CachedOffsetRotations;                             // 0x0200(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAnimNode_SplineIK) == 0x000008, "Wrong alignment on FAnimNode_SplineIK");
static_assert(sizeof(FAnimNode_SplineIK) == 0x000210, "Wrong size on FAnimNode_SplineIK");
static_assert(offsetof(FAnimNode_SplineIK, StartBone) == 0x000070, "Member 'FAnimNode_SplineIK::StartBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, EndBone) == 0x000088, "Member 'FAnimNode_SplineIK::EndBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, BoneAxis) == 0x0000A0, "Member 'FAnimNode_SplineIK::BoneAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, bAutoCalculateSpline) == 0x0000A1, "Member 'FAnimNode_SplineIK::bAutoCalculateSpline' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, PointCount) == 0x0000A4, "Member 'FAnimNode_SplineIK::PointCount' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, ControlPoints) == 0x0000A8, "Member 'FAnimNode_SplineIK::ControlPoints' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, Roll) == 0x0000B8, "Member 'FAnimNode_SplineIK::Roll' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, TwistStart) == 0x0000BC, "Member 'FAnimNode_SplineIK::TwistStart' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, TwistEnd) == 0x0000C0, "Member 'FAnimNode_SplineIK::TwistEnd' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, TwistBlend) == 0x0000C8, "Member 'FAnimNode_SplineIK::TwistBlend' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, Stretch) == 0x000100, "Member 'FAnimNode_SplineIK::Stretch' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, Offset) == 0x000104, "Member 'FAnimNode_SplineIK::Offset' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, BoneSpline) == 0x000178, "Member 'FAnimNode_SplineIK::BoneSpline' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, OriginalSplineLength) == 0x0001D8, "Member 'FAnimNode_SplineIK::OriginalSplineLength' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, CachedBoneReferences) == 0x0001E0, "Member 'FAnimNode_SplineIK::CachedBoneReferences' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, CachedBoneLengths) == 0x0001F0, "Member 'FAnimNode_SplineIK::CachedBoneLengths' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, CachedOffsetRotations) == 0x000200, "Member 'FAnimNode_SplineIK::CachedOffsetRotations' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_BoneDrivenController
// 0x0078 (0x00E8 - 0x0070)
struct FAnimNode_BoneDrivenController final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         SourceBone;                                        // 0x0070(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EComponentType                                SourceComponent;                                   // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DrivingCurve;                                      // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRange;                                         // 0x009C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RangeMin;                                          // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeMax;                                          // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemappedMin;                                       // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemappedMax;                                       // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDrivenDestinationMode                        DestinationMode;                                   // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParameterName;                                     // 0x00B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         TargetBone;                                        // 0x00C0(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EComponentType                                TargetComponent;                                   // 0x00D8(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bAffectTargetTranslationX : 1;                     // 0x00DC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetTranslationY : 1;                     // 0x00DC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetTranslationZ : 1;                     // 0x00DC(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetRotationX : 1;                        // 0x00DC(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetRotationY : 1;                        // 0x00DC(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetRotationZ : 1;                        // 0x00DC(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetScaleX : 1;                           // 0x00DC(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetScaleY : 1;                           // 0x00DC(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetScaleZ : 1;                           // 0x00DD(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_DE[0x2];                                       // 0x00DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	EDrivenBoneModificationMode                   ModificationMode;                                  // 0x00E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BoneDrivenController) == 0x000008, "Wrong alignment on FAnimNode_BoneDrivenController");
static_assert(sizeof(FAnimNode_BoneDrivenController) == 0x0000E8, "Wrong size on FAnimNode_BoneDrivenController");
static_assert(offsetof(FAnimNode_BoneDrivenController, SourceBone) == 0x000070, "Member 'FAnimNode_BoneDrivenController::SourceBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, SourceComponent) == 0x000088, "Member 'FAnimNode_BoneDrivenController::SourceComponent' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, DrivingCurve) == 0x000090, "Member 'FAnimNode_BoneDrivenController::DrivingCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, Multiplier) == 0x000098, "Member 'FAnimNode_BoneDrivenController::Multiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, bUseRange) == 0x00009C, "Member 'FAnimNode_BoneDrivenController::bUseRange' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, RangeMin) == 0x0000A0, "Member 'FAnimNode_BoneDrivenController::RangeMin' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, RangeMax) == 0x0000A4, "Member 'FAnimNode_BoneDrivenController::RangeMax' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, RemappedMin) == 0x0000A8, "Member 'FAnimNode_BoneDrivenController::RemappedMin' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, RemappedMax) == 0x0000AC, "Member 'FAnimNode_BoneDrivenController::RemappedMax' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, DestinationMode) == 0x0000B0, "Member 'FAnimNode_BoneDrivenController::DestinationMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, ParameterName) == 0x0000B8, "Member 'FAnimNode_BoneDrivenController::ParameterName' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, TargetBone) == 0x0000C0, "Member 'FAnimNode_BoneDrivenController::TargetBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, TargetComponent) == 0x0000D8, "Member 'FAnimNode_BoneDrivenController::TargetComponent' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, ModificationMode) == 0x0000E0, "Member 'FAnimNode_BoneDrivenController::ModificationMode' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_LayeredBoneBlend
// 0x00B0 (0x00E0 - 0x0030)
struct FAnimNode_LayeredBoneBlend final : public FAnimNode_Base
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FPoseLink>                      BlendPoses;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FInputBlendPose>                LayerSetup;                                        // 0x0058(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 BlendWeights;                                      // 0x0068(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bMeshSpaceRotationBlend;                           // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECurveBlendOption                             CurveBlendOption;                                  // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlendRootMotionBasedOnRootBone;                   // 0x007A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasRelevantPoses;                                 // 0x007B(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPerBoneBlendWeight>            PerBoneBlendWeights;                               // 0x0080(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FGuid                                  SkeletonGuid;                                      // 0x0090(0x0010)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  VirtualBoneGuid;                                   // 0x00A0(0x0010)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B0[0x30];                                      // 0x00B0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_LayeredBoneBlend) == 0x000008, "Wrong alignment on FAnimNode_LayeredBoneBlend");
static_assert(sizeof(FAnimNode_LayeredBoneBlend) == 0x0000E0, "Wrong size on FAnimNode_LayeredBoneBlend");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, BasePose) == 0x000030, "Member 'FAnimNode_LayeredBoneBlend::BasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, BlendPoses) == 0x000048, "Member 'FAnimNode_LayeredBoneBlend::BlendPoses' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, LayerSetup) == 0x000058, "Member 'FAnimNode_LayeredBoneBlend::LayerSetup' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, BlendWeights) == 0x000068, "Member 'FAnimNode_LayeredBoneBlend::BlendWeights' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, bMeshSpaceRotationBlend) == 0x000078, "Member 'FAnimNode_LayeredBoneBlend::bMeshSpaceRotationBlend' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, CurveBlendOption) == 0x000079, "Member 'FAnimNode_LayeredBoneBlend::CurveBlendOption' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, bBlendRootMotionBasedOnRootBone) == 0x00007A, "Member 'FAnimNode_LayeredBoneBlend::bBlendRootMotionBasedOnRootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, bHasRelevantPoses) == 0x00007B, "Member 'FAnimNode_LayeredBoneBlend::bHasRelevantPoses' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, PerBoneBlendWeights) == 0x000080, "Member 'FAnimNode_LayeredBoneBlend::PerBoneBlendWeights' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, SkeletonGuid) == 0x000090, "Member 'FAnimNode_LayeredBoneBlend::SkeletonGuid' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, VirtualBoneGuid) == 0x0000A0, "Member 'FAnimNode_LayeredBoneBlend::VirtualBoneGuid' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.Constraint
// 0x0020 (0x0020 - 0x0000)
struct FConstraint final
{
public:
	struct FBoneReference                         TargetBone;                                        // 0x0000(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EConstraintOffsetOption                       OffsetOption;                                      // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETransformConstraintType                      TransformType;                                     // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFilterOptionPerAxis                   PerAxis;                                           // 0x001A(0x0003)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConstraint) == 0x000008, "Wrong alignment on FConstraint");
static_assert(sizeof(FConstraint) == 0x000020, "Wrong size on FConstraint");
static_assert(offsetof(FConstraint, TargetBone) == 0x000000, "Member 'FConstraint::TargetBone' has a wrong offset!");
static_assert(offsetof(FConstraint, OffsetOption) == 0x000018, "Member 'FConstraint::OffsetOption' has a wrong offset!");
static_assert(offsetof(FConstraint, TransformType) == 0x000019, "Member 'FConstraint::TransformType' has a wrong offset!");
static_assert(offsetof(FConstraint, PerAxis) == 0x00001A, "Member 'FConstraint::PerAxis' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_Constraint
// 0x0048 (0x00B8 - 0x0070)
struct FAnimNode_Constraint final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         BoneToModify;                                      // 0x0070(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FConstraint>                    ConstraintSetup;                                   // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ConstraintWeights;                                 // 0x0098(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x10];                                      // 0x00A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_Constraint) == 0x000008, "Wrong alignment on FAnimNode_Constraint");
static_assert(sizeof(FAnimNode_Constraint) == 0x0000B8, "Wrong size on FAnimNode_Constraint");
static_assert(offsetof(FAnimNode_Constraint, BoneToModify) == 0x000070, "Member 'FAnimNode_Constraint::BoneToModify' has a wrong offset!");
static_assert(offsetof(FAnimNode_Constraint, ConstraintSetup) == 0x000088, "Member 'FAnimNode_Constraint::ConstraintSetup' has a wrong offset!");
static_assert(offsetof(FAnimNode_Constraint, ConstraintWeights) == 0x000098, "Member 'FAnimNode_Constraint::ConstraintWeights' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_RefPose
// 0x0008 (0x0038 - 0x0030)
struct FAnimNode_RefPose final : public FAnimNode_Base
{
public:
	ERefPoseType                                  RefPoseType;                                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_RefPose) == 0x000008, "Wrong alignment on FAnimNode_RefPose");
static_assert(sizeof(FAnimNode_RefPose) == 0x000038, "Wrong size on FAnimNode_RefPose");
static_assert(offsetof(FAnimNode_RefPose, RefPoseType) == 0x000030, "Member 'FAnimNode_RefPose::RefPoseType' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_ModifyBone
// 0x0048 (0x00B8 - 0x0070)
struct FAnimNode_ModifyBone final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         BoneToModify;                                      // 0x0070(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Translation;                                       // 0x0088(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0094(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x00A0(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneModificationMode                         TranslationMode;                                   // 0x00AC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneModificationMode                         RotationMode;                                      // 0x00AD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneModificationMode                         ScaleMode;                                         // 0x00AE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             TranslationSpace;                                  // 0x00AF(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             RotationSpace;                                     // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             ScaleSpace;                                        // 0x00B1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_ModifyBone) == 0x000008, "Wrong alignment on FAnimNode_ModifyBone");
static_assert(sizeof(FAnimNode_ModifyBone) == 0x0000B8, "Wrong size on FAnimNode_ModifyBone");
static_assert(offsetof(FAnimNode_ModifyBone, BoneToModify) == 0x000070, "Member 'FAnimNode_ModifyBone::BoneToModify' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, Translation) == 0x000088, "Member 'FAnimNode_ModifyBone::Translation' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, Rotation) == 0x000094, "Member 'FAnimNode_ModifyBone::Rotation' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, Scale) == 0x0000A0, "Member 'FAnimNode_ModifyBone::Scale' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, TranslationMode) == 0x0000AC, "Member 'FAnimNode_ModifyBone::TranslationMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, RotationMode) == 0x0000AD, "Member 'FAnimNode_ModifyBone::RotationMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, ScaleMode) == 0x0000AE, "Member 'FAnimNode_ModifyBone::ScaleMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, TranslationSpace) == 0x0000AF, "Member 'FAnimNode_ModifyBone::TranslationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, RotationSpace) == 0x0000B0, "Member 'FAnimNode_ModifyBone::RotationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, ScaleSpace) == 0x0000B1, "Member 'FAnimNode_ModifyBone::ScaleSpace' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_CopyBone
// 0x0038 (0x00A8 - 0x0070)
struct FAnimNode_CopyBone final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         SourceBone;                                        // 0x0070(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         TargetBone;                                        // 0x0088(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCopyTranslation;                                  // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyRotation;                                     // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyScale;                                        // 0x00A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             ControlSpace;                                      // 0x00A3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_CopyBone) == 0x000008, "Wrong alignment on FAnimNode_CopyBone");
static_assert(sizeof(FAnimNode_CopyBone) == 0x0000A8, "Wrong size on FAnimNode_CopyBone");
static_assert(offsetof(FAnimNode_CopyBone, SourceBone) == 0x000070, "Member 'FAnimNode_CopyBone::SourceBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBone, TargetBone) == 0x000088, "Member 'FAnimNode_CopyBone::TargetBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBone, bCopyTranslation) == 0x0000A0, "Member 'FAnimNode_CopyBone::bCopyTranslation' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBone, bCopyRotation) == 0x0000A1, "Member 'FAnimNode_CopyBone::bCopyRotation' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBone, bCopyScale) == 0x0000A2, "Member 'FAnimNode_CopyBone::bCopyScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBone, ControlSpace) == 0x0000A3, "Member 'FAnimNode_CopyBone::ControlSpace' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_CurveSource
// 0x0038 (0x0068 - 0x0030)
struct FAnimNode_CurveSource final : public FAnimNode_Base
{
public:
	struct FPoseLink                              SourcePose;                                        // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SourceBinding;                                     // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICurveSourceInterface> CurveSource;                                       // 0x0058(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_CurveSource) == 0x000008, "Wrong alignment on FAnimNode_CurveSource");
static_assert(sizeof(FAnimNode_CurveSource) == 0x000068, "Wrong size on FAnimNode_CurveSource");
static_assert(offsetof(FAnimNode_CurveSource, SourcePose) == 0x000030, "Member 'FAnimNode_CurveSource::SourcePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_CurveSource, SourceBinding) == 0x000048, "Member 'FAnimNode_CurveSource::SourceBinding' has a wrong offset!");
static_assert(offsetof(FAnimNode_CurveSource, Alpha) == 0x000050, "Member 'FAnimNode_CurveSource::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_CurveSource, CurveSource) == 0x000058, "Member 'FAnimNode_CurveSource::CurveSource' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_ScaleChainLength
// 0x0088 (0x00B8 - 0x0030)
struct FAnimNode_ScaleChainLength final : public FAnimNode_Base
{
public:
	struct FPoseLink                              InputPose;                                         // 0x0030(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DefaultChainLength;                                // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         ChainStartBone;                                    // 0x0050(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         ChainEndBone;                                      // 0x0068(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EScaleChainInitialLength                      ChainInitialLength;                                // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetLocation;                                    // 0x0084(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActualAlpha;                                       // 0x0094(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x0098(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bBoneIndicesCached;                                // 0x00A0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x17];                                      // 0x00A1(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_ScaleChainLength) == 0x000008, "Wrong alignment on FAnimNode_ScaleChainLength");
static_assert(sizeof(FAnimNode_ScaleChainLength) == 0x0000B8, "Wrong size on FAnimNode_ScaleChainLength");
static_assert(offsetof(FAnimNode_ScaleChainLength, InputPose) == 0x000030, "Member 'FAnimNode_ScaleChainLength::InputPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_ScaleChainLength, DefaultChainLength) == 0x000048, "Member 'FAnimNode_ScaleChainLength::DefaultChainLength' has a wrong offset!");
static_assert(offsetof(FAnimNode_ScaleChainLength, ChainStartBone) == 0x000050, "Member 'FAnimNode_ScaleChainLength::ChainStartBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_ScaleChainLength, ChainEndBone) == 0x000068, "Member 'FAnimNode_ScaleChainLength::ChainEndBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_ScaleChainLength, ChainInitialLength) == 0x000080, "Member 'FAnimNode_ScaleChainLength::ChainInitialLength' has a wrong offset!");
static_assert(offsetof(FAnimNode_ScaleChainLength, TargetLocation) == 0x000084, "Member 'FAnimNode_ScaleChainLength::TargetLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_ScaleChainLength, Alpha) == 0x000090, "Member 'FAnimNode_ScaleChainLength::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_ScaleChainLength, ActualAlpha) == 0x000094, "Member 'FAnimNode_ScaleChainLength::ActualAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_ScaleChainLength, AlphaScaleBias) == 0x000098, "Member 'FAnimNode_ScaleChainLength::AlphaScaleBias' has a wrong offset!");
static_assert(offsetof(FAnimNode_ScaleChainLength, bBoneIndicesCached) == 0x0000A0, "Member 'FAnimNode_ScaleChainLength::bBoneIndicesCached' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.RandomPlayerSequenceEntry
// 0x0058 (0x0058 - 0x0000)
struct FRandomPlayerSequenceEntry final
{
public:
	class UAnimSequence*                          Sequence;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChanceToPlay;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinLoopCount;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLoopCount;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPlayRate;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPlayRate;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAlphaBlend                            BlendIn;                                           // 0x0020(0x0038)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRandomPlayerSequenceEntry) == 0x000008, "Wrong alignment on FRandomPlayerSequenceEntry");
static_assert(sizeof(FRandomPlayerSequenceEntry) == 0x000058, "Wrong size on FRandomPlayerSequenceEntry");
static_assert(offsetof(FRandomPlayerSequenceEntry, Sequence) == 0x000000, "Member 'FRandomPlayerSequenceEntry::Sequence' has a wrong offset!");
static_assert(offsetof(FRandomPlayerSequenceEntry, ChanceToPlay) == 0x000008, "Member 'FRandomPlayerSequenceEntry::ChanceToPlay' has a wrong offset!");
static_assert(offsetof(FRandomPlayerSequenceEntry, MinLoopCount) == 0x00000C, "Member 'FRandomPlayerSequenceEntry::MinLoopCount' has a wrong offset!");
static_assert(offsetof(FRandomPlayerSequenceEntry, MaxLoopCount) == 0x000010, "Member 'FRandomPlayerSequenceEntry::MaxLoopCount' has a wrong offset!");
static_assert(offsetof(FRandomPlayerSequenceEntry, MinPlayRate) == 0x000014, "Member 'FRandomPlayerSequenceEntry::MinPlayRate' has a wrong offset!");
static_assert(offsetof(FRandomPlayerSequenceEntry, MaxPlayRate) == 0x000018, "Member 'FRandomPlayerSequenceEntry::MaxPlayRate' has a wrong offset!");
static_assert(offsetof(FRandomPlayerSequenceEntry, BlendIn) == 0x000020, "Member 'FRandomPlayerSequenceEntry::BlendIn' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_RandomPlayer
// 0x0060 (0x0090 - 0x0030)
struct FAnimNode_RandomPlayer final : public FAnimNode_Base
{
public:
	bool                                          bShuffleMode;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRandomPlayerSequenceEntry>     Entries;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x48];                                      // 0x0048(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_RandomPlayer) == 0x000008, "Wrong alignment on FAnimNode_RandomPlayer");
static_assert(sizeof(FAnimNode_RandomPlayer) == 0x000090, "Wrong size on FAnimNode_RandomPlayer");
static_assert(offsetof(FAnimNode_RandomPlayer, bShuffleMode) == 0x000030, "Member 'FAnimNode_RandomPlayer::bShuffleMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_RandomPlayer, Entries) == 0x000038, "Member 'FAnimNode_RandomPlayer::Entries' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.BoneSocketTarget
// 0x0060 (0x0060 - 0x0000)
struct FBoneSocketTarget final
{
public:
	bool                                          bUseSocket;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         BoneReference;                                     // 0x0008(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSocketReference                       SocketReference;                                   // 0x0020(0x0040)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoneSocketTarget) == 0x000010, "Wrong alignment on FBoneSocketTarget");
static_assert(sizeof(FBoneSocketTarget) == 0x000060, "Wrong size on FBoneSocketTarget");
static_assert(offsetof(FBoneSocketTarget, bUseSocket) == 0x000000, "Member 'FBoneSocketTarget::bUseSocket' has a wrong offset!");
static_assert(offsetof(FBoneSocketTarget, BoneReference) == 0x000008, "Member 'FBoneSocketTarget::BoneReference' has a wrong offset!");
static_assert(offsetof(FBoneSocketTarget, SocketReference) == 0x000020, "Member 'FBoneSocketTarget::SocketReference' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_Fabrik
// 0x0100 (0x0170 - 0x0070)
struct FAnimNode_Fabrik final : public FAnimNode_SkeletalControlBase
{
public:
	struct FTransform                             EffectorTransform;                                 // 0x0070(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EBoneControlSpace                             EffectorTransformSpace;                            // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         EffectorTransformBone;                             // 0x00A8(0x0018)(Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneSocketTarget                      EffectorTarget;                                    // 0x00C0(0x0060)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EBoneRotationSource                           EffectorRotationSource;                            // 0x0120(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         TipBone;                                           // 0x0128(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RootBone;                                          // 0x0140(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Precision;                                         // 0x0158(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIterations;                                     // 0x015C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDebugDraw;                                  // 0x0160(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0xF];                                      // 0x0161(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_Fabrik) == 0x000010, "Wrong alignment on FAnimNode_Fabrik");
static_assert(sizeof(FAnimNode_Fabrik) == 0x000170, "Wrong size on FAnimNode_Fabrik");
static_assert(offsetof(FAnimNode_Fabrik, EffectorTransform) == 0x000070, "Member 'FAnimNode_Fabrik::EffectorTransform' has a wrong offset!");
static_assert(offsetof(FAnimNode_Fabrik, EffectorTransformSpace) == 0x0000A0, "Member 'FAnimNode_Fabrik::EffectorTransformSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_Fabrik, EffectorTransformBone) == 0x0000A8, "Member 'FAnimNode_Fabrik::EffectorTransformBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_Fabrik, EffectorTarget) == 0x0000C0, "Member 'FAnimNode_Fabrik::EffectorTarget' has a wrong offset!");
static_assert(offsetof(FAnimNode_Fabrik, EffectorRotationSource) == 0x000120, "Member 'FAnimNode_Fabrik::EffectorRotationSource' has a wrong offset!");
static_assert(offsetof(FAnimNode_Fabrik, TipBone) == 0x000128, "Member 'FAnimNode_Fabrik::TipBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_Fabrik, RootBone) == 0x000140, "Member 'FAnimNode_Fabrik::RootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_Fabrik, Precision) == 0x000158, "Member 'FAnimNode_Fabrik::Precision' has a wrong offset!");
static_assert(offsetof(FAnimNode_Fabrik, MaxIterations) == 0x00015C, "Member 'FAnimNode_Fabrik::MaxIterations' has a wrong offset!");
static_assert(offsetof(FAnimNode_Fabrik, bEnableDebugDraw) == 0x000160, "Member 'FAnimNode_Fabrik::bEnableDebugDraw' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_PoseHandler
// 0x0048 (0x00A0 - 0x0058)
struct FAnimNode_PoseHandler : public FAnimNode_AssetPlayerBase
{
public:
	class UPoseAsset*                             PoseAsset;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x40];                                      // 0x0060(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_PoseHandler) == 0x000008, "Wrong alignment on FAnimNode_PoseHandler");
static_assert(sizeof(FAnimNode_PoseHandler) == 0x0000A0, "Wrong size on FAnimNode_PoseHandler");
static_assert(offsetof(FAnimNode_PoseHandler, PoseAsset) == 0x000058, "Member 'FAnimNode_PoseHandler::PoseAsset' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_PoseByName
// 0x0010 (0x00B0 - 0x00A0)
struct FAnimNode_PoseByName final : public FAnimNode_PoseHandler
{
public:
	class FName                                   PoseName;                                          // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoseWeight;                                        // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_PoseByName) == 0x000008, "Wrong alignment on FAnimNode_PoseByName");
static_assert(sizeof(FAnimNode_PoseByName) == 0x0000B0, "Wrong size on FAnimNode_PoseByName");
static_assert(offsetof(FAnimNode_PoseByName, PoseName) == 0x0000A0, "Member 'FAnimNode_PoseByName::PoseName' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseByName, PoseWeight) == 0x0000A8, "Member 'FAnimNode_PoseByName::PoseWeight' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.IKChainLink
// 0x001C (0x001C - 0x0000)
struct alignas(0x04) FIKChainLink final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIKChainLink) == 0x000004, "Wrong alignment on FIKChainLink");
static_assert(sizeof(FIKChainLink) == 0x00001C, "Wrong size on FIKChainLink");

// ScriptStruct AnimGraphRuntime.AnimNode_HandIKRetargeting
// 0x0078 (0x00E8 - 0x0070)
struct FAnimNode_HandIKRetargeting final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         RightHandFK;                                       // 0x0070(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         LeftHandFK;                                        // 0x0088(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightHandIK;                                       // 0x00A0(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         LeftHandIK;                                        // 0x00B8(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 IKBonesToMove;                                     // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         HandFKWeight;                                      // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_HandIKRetargeting) == 0x000008, "Wrong alignment on FAnimNode_HandIKRetargeting");
static_assert(sizeof(FAnimNode_HandIKRetargeting) == 0x0000E8, "Wrong size on FAnimNode_HandIKRetargeting");
static_assert(offsetof(FAnimNode_HandIKRetargeting, RightHandFK) == 0x000070, "Member 'FAnimNode_HandIKRetargeting::RightHandFK' has a wrong offset!");
static_assert(offsetof(FAnimNode_HandIKRetargeting, LeftHandFK) == 0x000088, "Member 'FAnimNode_HandIKRetargeting::LeftHandFK' has a wrong offset!");
static_assert(offsetof(FAnimNode_HandIKRetargeting, RightHandIK) == 0x0000A0, "Member 'FAnimNode_HandIKRetargeting::RightHandIK' has a wrong offset!");
static_assert(offsetof(FAnimNode_HandIKRetargeting, LeftHandIK) == 0x0000B8, "Member 'FAnimNode_HandIKRetargeting::LeftHandIK' has a wrong offset!");
static_assert(offsetof(FAnimNode_HandIKRetargeting, IKBonesToMove) == 0x0000D0, "Member 'FAnimNode_HandIKRetargeting::IKBonesToMove' has a wrong offset!");
static_assert(offsetof(FAnimNode_HandIKRetargeting, HandFKWeight) == 0x0000E0, "Member 'FAnimNode_HandIKRetargeting::HandFKWeight' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_LegIK
// 0x0028 (0x0098 - 0x0070)
struct FAnimNode_LegIK final : public FAnimNode_SkeletalControlBase
{
public:
	float                                         ReachPrecision;                                    // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIterations;                                     // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimLegIKDefinition>           LegsDefinition;                                    // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAnimLegIKData>                 LegsData;                                          // 0x0088(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_LegIK) == 0x000008, "Wrong alignment on FAnimNode_LegIK");
static_assert(sizeof(FAnimNode_LegIK) == 0x000098, "Wrong size on FAnimNode_LegIK");
static_assert(offsetof(FAnimNode_LegIK, ReachPrecision) == 0x000070, "Member 'FAnimNode_LegIK::ReachPrecision' has a wrong offset!");
static_assert(offsetof(FAnimNode_LegIK, MaxIterations) == 0x000074, "Member 'FAnimNode_LegIK::MaxIterations' has a wrong offset!");
static_assert(offsetof(FAnimNode_LegIK, LegsDefinition) == 0x000078, "Member 'FAnimNode_LegIK::LegsDefinition' has a wrong offset!");
static_assert(offsetof(FAnimNode_LegIK, LegsData) == 0x000088, "Member 'FAnimNode_LegIK::LegsData' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_MeshSpaceRefPose
// 0x0000 (0x0030 - 0x0030)
struct FAnimNode_MeshSpaceRefPose final : public FAnimNode_Base
{
};
static_assert(alignof(FAnimNode_MeshSpaceRefPose) == 0x000008, "Wrong alignment on FAnimNode_MeshSpaceRefPose");
static_assert(sizeof(FAnimNode_MeshSpaceRefPose) == 0x000030, "Wrong size on FAnimNode_MeshSpaceRefPose");

// ScriptStruct AnimGraphRuntime.IKChain
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FIKChain final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIKChain) == 0x000008, "Wrong alignment on FIKChain");
static_assert(sizeof(FIKChain) == 0x000030, "Wrong size on FIKChain");

// ScriptStruct AnimGraphRuntime.AnimNode_SpringBone
// 0x0068 (0x00D8 - 0x0070)
struct FAnimNode_SpringBone final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         SpringBone;                                        // 0x0070(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bLimitDisplacement;                                // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDisplacement;                                   // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringStiffness;                                   // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringDamping;                                     // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ErrorResetThresh;                                  // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoZSpring;                                        // 0x009C(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTranslateX;                                       // 0x009D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTranslateY;                                       // 0x009E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTranslateZ;                                       // 0x009F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateX;                                          // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateY;                                          // 0x00A1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateZ;                                          // 0x00A2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A3[0x35];                                      // 0x00A3(0x0035)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_SpringBone) == 0x000008, "Wrong alignment on FAnimNode_SpringBone");
static_assert(sizeof(FAnimNode_SpringBone) == 0x0000D8, "Wrong size on FAnimNode_SpringBone");
static_assert(offsetof(FAnimNode_SpringBone, SpringBone) == 0x000070, "Member 'FAnimNode_SpringBone::SpringBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, bLimitDisplacement) == 0x000088, "Member 'FAnimNode_SpringBone::bLimitDisplacement' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, MaxDisplacement) == 0x00008C, "Member 'FAnimNode_SpringBone::MaxDisplacement' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, SpringStiffness) == 0x000090, "Member 'FAnimNode_SpringBone::SpringStiffness' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, SpringDamping) == 0x000094, "Member 'FAnimNode_SpringBone::SpringDamping' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, ErrorResetThresh) == 0x000098, "Member 'FAnimNode_SpringBone::ErrorResetThresh' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, bNoZSpring) == 0x00009C, "Member 'FAnimNode_SpringBone::bNoZSpring' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, bTranslateX) == 0x00009D, "Member 'FAnimNode_SpringBone::bTranslateX' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, bTranslateY) == 0x00009E, "Member 'FAnimNode_SpringBone::bTranslateY' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, bTranslateZ) == 0x00009F, "Member 'FAnimNode_SpringBone::bTranslateZ' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, bRotateX) == 0x0000A0, "Member 'FAnimNode_SpringBone::bRotateX' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, bRotateY) == 0x0000A1, "Member 'FAnimNode_SpringBone::bRotateY' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, bRotateZ) == 0x0000A2, "Member 'FAnimNode_SpringBone::bRotateZ' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_RotationOffsetBlendSpace
// 0x0030 (0x0160 - 0x0130)
struct FAnimNode_RotationOffsetBlendSpace final : public FAnimNode_BlendSpacePlayer
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0130(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         LODThreshold;                                      // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLODEnabled;                                     // 0x014C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Alpha;                                             // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x0154(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ActualAlpha;                                       // 0x015C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_RotationOffsetBlendSpace) == 0x000008, "Wrong alignment on FAnimNode_RotationOffsetBlendSpace");
static_assert(sizeof(FAnimNode_RotationOffsetBlendSpace) == 0x000160, "Wrong size on FAnimNode_RotationOffsetBlendSpace");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpace, BasePose) == 0x000130, "Member 'FAnimNode_RotationOffsetBlendSpace::BasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpace, LODThreshold) == 0x000148, "Member 'FAnimNode_RotationOffsetBlendSpace::LODThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpace, bIsLODEnabled) == 0x00014C, "Member 'FAnimNode_RotationOffsetBlendSpace::bIsLODEnabled' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpace, Alpha) == 0x000150, "Member 'FAnimNode_RotationOffsetBlendSpace::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpace, AlphaScaleBias) == 0x000154, "Member 'FAnimNode_RotationOffsetBlendSpace::AlphaScaleBias' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpace, ActualAlpha) == 0x00015C, "Member 'FAnimNode_RotationOffsetBlendSpace::ActualAlpha' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_LookAt
// 0x0130 (0x01A0 - 0x0070)
struct FAnimNode_LookAt final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         BoneToModify;                                      // 0x0070(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         LookAtBone;                                        // 0x0088(0x0018)(Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   LookAtSocket;                                      // 0x00A0(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneSocketTarget                      LookAtTarget;                                      // 0x00B0(0x0060)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LookAtLocation;                                    // 0x0110(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxisOption                                   LookAtAxis;                                        // 0x011C(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CustomLookAtAxis;                                  // 0x0120(0x000C)(Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAxis                                  LookAt_Axis;                                       // 0x012C(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseLookUpAxis;                                    // 0x013C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxisOption                                   LookUpAxis;                                        // 0x013D(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13E[0x2];                                      // 0x013E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CustomLookUpAxis;                                  // 0x0140(0x000C)(Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAxis                                  LookUp_Axis;                                       // 0x014C(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LookAtClamp;                                       // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInterpolationBlend                           InterpolationType;                                 // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpolationTime;                                 // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpolationTriggerThreashold;                    // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C[0x34];                                     // 0x016C(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_LookAt) == 0x000010, "Wrong alignment on FAnimNode_LookAt");
static_assert(sizeof(FAnimNode_LookAt) == 0x0001A0, "Wrong size on FAnimNode_LookAt");
static_assert(offsetof(FAnimNode_LookAt, BoneToModify) == 0x000070, "Member 'FAnimNode_LookAt::BoneToModify' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, LookAtBone) == 0x000088, "Member 'FAnimNode_LookAt::LookAtBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, LookAtSocket) == 0x0000A0, "Member 'FAnimNode_LookAt::LookAtSocket' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, LookAtTarget) == 0x0000B0, "Member 'FAnimNode_LookAt::LookAtTarget' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, LookAtLocation) == 0x000110, "Member 'FAnimNode_LookAt::LookAtLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, LookAtAxis) == 0x00011C, "Member 'FAnimNode_LookAt::LookAtAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, CustomLookAtAxis) == 0x000120, "Member 'FAnimNode_LookAt::CustomLookAtAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, LookAt_Axis) == 0x00012C, "Member 'FAnimNode_LookAt::LookAt_Axis' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, bUseLookUpAxis) == 0x00013C, "Member 'FAnimNode_LookAt::bUseLookUpAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, LookUpAxis) == 0x00013D, "Member 'FAnimNode_LookAt::LookUpAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, CustomLookUpAxis) == 0x000140, "Member 'FAnimNode_LookAt::CustomLookUpAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, LookUp_Axis) == 0x00014C, "Member 'FAnimNode_LookAt::LookUp_Axis' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, LookAtClamp) == 0x00015C, "Member 'FAnimNode_LookAt::LookAtClamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, InterpolationType) == 0x000160, "Member 'FAnimNode_LookAt::InterpolationType' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, InterpolationTime) == 0x000164, "Member 'FAnimNode_LookAt::InterpolationTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, InterpolationTriggerThreashold) == 0x000168, "Member 'FAnimNode_LookAt::InterpolationTriggerThreashold' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_MakeDynamicAdditive
// 0x0038 (0x0068 - 0x0030)
struct FAnimNode_MakeDynamicAdditive final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Base;                                              // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              Additive;                                          // 0x0048(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bMeshSpaceAdditive;                                // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_MakeDynamicAdditive) == 0x000008, "Wrong alignment on FAnimNode_MakeDynamicAdditive");
static_assert(sizeof(FAnimNode_MakeDynamicAdditive) == 0x000068, "Wrong size on FAnimNode_MakeDynamicAdditive");
static_assert(offsetof(FAnimNode_MakeDynamicAdditive, Base) == 0x000030, "Member 'FAnimNode_MakeDynamicAdditive::Base' has a wrong offset!");
static_assert(offsetof(FAnimNode_MakeDynamicAdditive, Additive) == 0x000048, "Member 'FAnimNode_MakeDynamicAdditive::Additive' has a wrong offset!");
static_assert(offsetof(FAnimNode_MakeDynamicAdditive, bMeshSpaceAdditive) == 0x000060, "Member 'FAnimNode_MakeDynamicAdditive::bMeshSpaceAdditive' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_ModifyCurve
// 0x0048 (0x0078 - 0x0030)
struct FAnimNode_ModifyCurve final : public FAnimNode_Base
{
public:
	struct FPoseLink                              SourcePose;                                        // 0x0030(0x0018)(Edit, BlueprintVisible, EditFixedSize, NoDestructor, NativeAccessSpecifierPublic)
	EModifyCurveApplyMode                         ApplyMode;                                         // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 CurveValues;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           CurveNames;                                        // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_ModifyCurve) == 0x000008, "Wrong alignment on FAnimNode_ModifyCurve");
static_assert(sizeof(FAnimNode_ModifyCurve) == 0x000078, "Wrong size on FAnimNode_ModifyCurve");
static_assert(offsetof(FAnimNode_ModifyCurve, SourcePose) == 0x000030, "Member 'FAnimNode_ModifyCurve::SourcePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyCurve, ApplyMode) == 0x000048, "Member 'FAnimNode_ModifyCurve::ApplyMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyCurve, CurveValues) == 0x000050, "Member 'FAnimNode_ModifyCurve::CurveValues' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyCurve, CurveNames) == 0x000060, "Member 'FAnimNode_ModifyCurve::CurveNames' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyCurve, Alpha) == 0x000070, "Member 'FAnimNode_ModifyCurve::Alpha' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_MultiWayBlend
// 0x0040 (0x0070 - 0x0030)
struct FAnimNode_MultiWayBlend final : public FAnimNode_Base
{
public:
	TArray<struct FPoseLink>                      Poses;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 DesiredAlphas;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAdditiveNode;                                     // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNormalizeAlpha;                                   // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x0054(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x14];                                      // 0x005C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_MultiWayBlend) == 0x000008, "Wrong alignment on FAnimNode_MultiWayBlend");
static_assert(sizeof(FAnimNode_MultiWayBlend) == 0x000070, "Wrong size on FAnimNode_MultiWayBlend");
static_assert(offsetof(FAnimNode_MultiWayBlend, Poses) == 0x000030, "Member 'FAnimNode_MultiWayBlend::Poses' has a wrong offset!");
static_assert(offsetof(FAnimNode_MultiWayBlend, DesiredAlphas) == 0x000040, "Member 'FAnimNode_MultiWayBlend::DesiredAlphas' has a wrong offset!");
static_assert(offsetof(FAnimNode_MultiWayBlend, bAdditiveNode) == 0x000050, "Member 'FAnimNode_MultiWayBlend::bAdditiveNode' has a wrong offset!");
static_assert(offsetof(FAnimNode_MultiWayBlend, bNormalizeAlpha) == 0x000051, "Member 'FAnimNode_MultiWayBlend::bNormalizeAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_MultiWayBlend, AlphaScaleBias) == 0x000054, "Member 'FAnimNode_MultiWayBlend::AlphaScaleBias' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_PoseBlendNode
// 0x0028 (0x00C8 - 0x00A0)
struct FAnimNode_PoseBlendNode final : public FAnimNode_PoseHandler
{
public:
	struct FPoseLink                              SourcePose;                                        // 0x00A0(0x0018)(Edit, BlueprintVisible, EditFixedSize, NoDestructor, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             BlendOption;                                       // 0x00B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CustomCurve;                                       // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_PoseBlendNode) == 0x000008, "Wrong alignment on FAnimNode_PoseBlendNode");
static_assert(sizeof(FAnimNode_PoseBlendNode) == 0x0000C8, "Wrong size on FAnimNode_PoseBlendNode");
static_assert(offsetof(FAnimNode_PoseBlendNode, SourcePose) == 0x0000A0, "Member 'FAnimNode_PoseBlendNode::SourcePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseBlendNode, BlendOption) == 0x0000B8, "Member 'FAnimNode_PoseBlendNode::BlendOption' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseBlendNode, CustomCurve) == 0x0000C0, "Member 'FAnimNode_PoseBlendNode::CustomCurve' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.RBFParams
// 0x0010 (0x0010 - 0x0000)
struct FRBFParams final
{
public:
	int32                                         TargetDimensions;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERBFFunctionType                              Function;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERBFDistanceMethod                            DistanceMethod;                                    // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneAxis                                     TwistAxis;                                         // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WeightThreshold;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRBFParams) == 0x000004, "Wrong alignment on FRBFParams");
static_assert(sizeof(FRBFParams) == 0x000010, "Wrong size on FRBFParams");
static_assert(offsetof(FRBFParams, TargetDimensions) == 0x000000, "Member 'FRBFParams::TargetDimensions' has a wrong offset!");
static_assert(offsetof(FRBFParams, Radius) == 0x000004, "Member 'FRBFParams::Radius' has a wrong offset!");
static_assert(offsetof(FRBFParams, Function) == 0x000008, "Member 'FRBFParams::Function' has a wrong offset!");
static_assert(offsetof(FRBFParams, DistanceMethod) == 0x000009, "Member 'FRBFParams::DistanceMethod' has a wrong offset!");
static_assert(offsetof(FRBFParams, TwistAxis) == 0x00000A, "Member 'FRBFParams::TwistAxis' has a wrong offset!");
static_assert(offsetof(FRBFParams, WeightThreshold) == 0x00000C, "Member 'FRBFParams::WeightThreshold' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.PoseDriverTransform
// 0x0018 (0x0018 - 0x0000)
struct FPoseDriverTransform final
{
public:
	struct FVector                                TargetTranslation;                                 // 0x0000(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TargetRotation;                                    // 0x000C(0x000C)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseDriverTransform) == 0x000004, "Wrong alignment on FPoseDriverTransform");
static_assert(sizeof(FPoseDriverTransform) == 0x000018, "Wrong size on FPoseDriverTransform");
static_assert(offsetof(FPoseDriverTransform, TargetTranslation) == 0x000000, "Member 'FPoseDriverTransform::TargetTranslation' has a wrong offset!");
static_assert(offsetof(FPoseDriverTransform, TargetRotation) == 0x00000C, "Member 'FPoseDriverTransform::TargetRotation' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.PoseDriverTarget
// 0x00A8 (0x00A8 - 0x0000)
struct FPoseDriverTarget final
{
public:
	TArray<struct FPoseDriverTransform>           BoneTransforms;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRotator                               TargetRotation;                                    // 0x0010(0x000C)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TargetScale;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyCustomCurve;                                 // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichCurve                             CustomCurve;                                       // 0x0028(0x0070)(Edit, NativeAccessSpecifierPublic)
	class FName                                   DrivenName;                                        // 0x0098(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPoseDriverTarget) == 0x000008, "Wrong alignment on FPoseDriverTarget");
static_assert(sizeof(FPoseDriverTarget) == 0x0000A8, "Wrong size on FPoseDriverTarget");
static_assert(offsetof(FPoseDriverTarget, BoneTransforms) == 0x000000, "Member 'FPoseDriverTarget::BoneTransforms' has a wrong offset!");
static_assert(offsetof(FPoseDriverTarget, TargetRotation) == 0x000010, "Member 'FPoseDriverTarget::TargetRotation' has a wrong offset!");
static_assert(offsetof(FPoseDriverTarget, TargetScale) == 0x00001C, "Member 'FPoseDriverTarget::TargetScale' has a wrong offset!");
static_assert(offsetof(FPoseDriverTarget, bApplyCustomCurve) == 0x000020, "Member 'FPoseDriverTarget::bApplyCustomCurve' has a wrong offset!");
static_assert(offsetof(FPoseDriverTarget, CustomCurve) == 0x000028, "Member 'FPoseDriverTarget::CustomCurve' has a wrong offset!");
static_assert(offsetof(FPoseDriverTarget, DrivenName) == 0x000098, "Member 'FPoseDriverTarget::DrivenName' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_PoseDriver
// 0x00D8 (0x0178 - 0x00A0)
struct FAnimNode_PoseDriver final : public FAnimNode_PoseHandler
{
public:
	struct FPoseLink                              SourcePose;                                        // 0x00A0(0x0018)(Edit, BlueprintVisible, EditFixedSize, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 SourceBones;                                       // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bOnlyDriveSelectedBones;                           // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBoneReference>                 OnlyDriveBones;                                    // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         EvalSpaceBone;                                     // 0x00E0(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRBFParams                             RBFParams;                                         // 0x00F8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EPoseDriverSource                             DriveSource;                                       // 0x0108(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPoseDriverOutput                             DriveOutput;                                       // 0x0109(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPoseDriverTarget>              PoseTargets;                                       // 0x0110(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         SourceBone;                                        // 0x0120(0x0018)(Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	EBoneAxis                                     TwistAxis;                                         // 0x0138(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPoseDriverType                               Type;                                              // 0x0139(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A[0x2];                                      // 0x013A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RadialScaling;                                     // 0x013C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_140[0x38];                                     // 0x0140(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_PoseDriver) == 0x000008, "Wrong alignment on FAnimNode_PoseDriver");
static_assert(sizeof(FAnimNode_PoseDriver) == 0x000178, "Wrong size on FAnimNode_PoseDriver");
static_assert(offsetof(FAnimNode_PoseDriver, SourcePose) == 0x0000A0, "Member 'FAnimNode_PoseDriver::SourcePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseDriver, SourceBones) == 0x0000B8, "Member 'FAnimNode_PoseDriver::SourceBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseDriver, bOnlyDriveSelectedBones) == 0x0000C8, "Member 'FAnimNode_PoseDriver::bOnlyDriveSelectedBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseDriver, OnlyDriveBones) == 0x0000D0, "Member 'FAnimNode_PoseDriver::OnlyDriveBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseDriver, EvalSpaceBone) == 0x0000E0, "Member 'FAnimNode_PoseDriver::EvalSpaceBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseDriver, RBFParams) == 0x0000F8, "Member 'FAnimNode_PoseDriver::RBFParams' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseDriver, DriveSource) == 0x000108, "Member 'FAnimNode_PoseDriver::DriveSource' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseDriver, DriveOutput) == 0x000109, "Member 'FAnimNode_PoseDriver::DriveOutput' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseDriver, PoseTargets) == 0x000110, "Member 'FAnimNode_PoseDriver::PoseTargets' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseDriver, SourceBone) == 0x000120, "Member 'FAnimNode_PoseDriver::SourceBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseDriver, TwistAxis) == 0x000138, "Member 'FAnimNode_PoseDriver::TwistAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseDriver, Type) == 0x000139, "Member 'FAnimNode_PoseDriver::Type' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseDriver, RadialScaling) == 0x00013C, "Member 'FAnimNode_PoseDriver::RadialScaling' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_PoseSnapshot
// 0x0080 (0x00B0 - 0x0030)
struct FAnimNode_PoseSnapshot final : public FAnimNode_Base
{
public:
	ESnapshotSourceMode                           Mode;                                              // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SnapshotName;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoseSnapshot                          Snapshot;                                          // 0x0040(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x38];                                      // 0x0078(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_PoseSnapshot) == 0x000008, "Wrong alignment on FAnimNode_PoseSnapshot");
static_assert(sizeof(FAnimNode_PoseSnapshot) == 0x0000B0, "Wrong size on FAnimNode_PoseSnapshot");
static_assert(offsetof(FAnimNode_PoseSnapshot, Mode) == 0x000030, "Member 'FAnimNode_PoseSnapshot::Mode' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseSnapshot, SnapshotName) == 0x000038, "Member 'FAnimNode_PoseSnapshot::SnapshotName' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseSnapshot, Snapshot) == 0x000040, "Member 'FAnimNode_PoseSnapshot::Snapshot' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_Root
// 0x0018 (0x0048 - 0x0030)
struct FAnimNode_Root final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Result;                                            // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_Root) == 0x000008, "Wrong alignment on FAnimNode_Root");
static_assert(sizeof(FAnimNode_Root) == 0x000048, "Wrong size on FAnimNode_Root");
static_assert(offsetof(FAnimNode_Root, Result) == 0x000030, "Member 'FAnimNode_Root::Result' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_RotationMultiplier
// 0x0038 (0x00A8 - 0x0070)
struct FAnimNode_RotationMultiplier final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         TargetBone;                                        // 0x0070(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         SourceBone;                                        // 0x0088(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneAxis                                     RotationAxisToRefer;                               // 0x00A4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAdditive;                                       // 0x00A5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_RotationMultiplier) == 0x000008, "Wrong alignment on FAnimNode_RotationMultiplier");
static_assert(sizeof(FAnimNode_RotationMultiplier) == 0x0000A8, "Wrong size on FAnimNode_RotationMultiplier");
static_assert(offsetof(FAnimNode_RotationMultiplier, TargetBone) == 0x000070, "Member 'FAnimNode_RotationMultiplier::TargetBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationMultiplier, SourceBone) == 0x000088, "Member 'FAnimNode_RotationMultiplier::SourceBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationMultiplier, Multiplier) == 0x0000A0, "Member 'FAnimNode_RotationMultiplier::Multiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationMultiplier, RotationAxisToRefer) == 0x0000A4, "Member 'FAnimNode_RotationMultiplier::RotationAxisToRefer' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationMultiplier, bIsAdditive) == 0x0000A5, "Member 'FAnimNode_RotationMultiplier::bIsAdditive' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_SequenceEvaluator
// 0x0018 (0x0070 - 0x0058)
struct FAnimNode_SequenceEvaluator final : public FAnimNode_AssetPlayerBase
{
public:
	class UAnimSequenceBase*                      Sequence;                                          // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplicitTime;                                      // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldLoop;                                       // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTeleportToExplicitTime;                           // 0x0065(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartPosition;                                     // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESequenceEvalReinit                           ReinitializationBehavior;                          // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReinitialized;                                    // 0x006D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_SequenceEvaluator) == 0x000008, "Wrong alignment on FAnimNode_SequenceEvaluator");
static_assert(sizeof(FAnimNode_SequenceEvaluator) == 0x000070, "Wrong size on FAnimNode_SequenceEvaluator");
static_assert(offsetof(FAnimNode_SequenceEvaluator, Sequence) == 0x000058, "Member 'FAnimNode_SequenceEvaluator::Sequence' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceEvaluator, ExplicitTime) == 0x000060, "Member 'FAnimNode_SequenceEvaluator::ExplicitTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceEvaluator, bShouldLoop) == 0x000064, "Member 'FAnimNode_SequenceEvaluator::bShouldLoop' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceEvaluator, bTeleportToExplicitTime) == 0x000065, "Member 'FAnimNode_SequenceEvaluator::bTeleportToExplicitTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceEvaluator, StartPosition) == 0x000068, "Member 'FAnimNode_SequenceEvaluator::StartPosition' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceEvaluator, ReinitializationBehavior) == 0x00006C, "Member 'FAnimNode_SequenceEvaluator::ReinitializationBehavior' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceEvaluator, bReinitialized) == 0x00006D, "Member 'FAnimNode_SequenceEvaluator::bReinitialized' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_Trail
// 0x0140 (0x01B0 - 0x0070)
struct alignas(0x10) FAnimNode_Trail final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         TrailBone;                                         // 0x0070(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ChainLength;                                       // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         ChainBoneAxis;                                     // 0x008C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertChainBoneAxis;                              // 0x008D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TrailRelaxation;                                   // 0x0090(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     TrailRelaxationSpeed;                              // 0x0098(0x0078)(Edit, NativeAccessSpecifierPublic)
	bool                                          bLimitStretch;                                     // 0x0110(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StretchLimit;                                      // 0x0114(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FakeVelocity;                                      // 0x0118(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActorSpaceFakeVel;                                // 0x0124(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         BaseJoint;                                         // 0x0128(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_140[0x70];                                     // 0x0140(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_Trail) == 0x000010, "Wrong alignment on FAnimNode_Trail");
static_assert(sizeof(FAnimNode_Trail) == 0x0001B0, "Wrong size on FAnimNode_Trail");
static_assert(offsetof(FAnimNode_Trail, TrailBone) == 0x000070, "Member 'FAnimNode_Trail::TrailBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, ChainLength) == 0x000088, "Member 'FAnimNode_Trail::ChainLength' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, ChainBoneAxis) == 0x00008C, "Member 'FAnimNode_Trail::ChainBoneAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, bInvertChainBoneAxis) == 0x00008D, "Member 'FAnimNode_Trail::bInvertChainBoneAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, TrailRelaxation) == 0x000090, "Member 'FAnimNode_Trail::TrailRelaxation' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, TrailRelaxationSpeed) == 0x000098, "Member 'FAnimNode_Trail::TrailRelaxationSpeed' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, bLimitStretch) == 0x000110, "Member 'FAnimNode_Trail::bLimitStretch' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, StretchLimit) == 0x000114, "Member 'FAnimNode_Trail::StretchLimit' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, FakeVelocity) == 0x000118, "Member 'FAnimNode_Trail::FakeVelocity' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, bActorSpaceFakeVel) == 0x000124, "Member 'FAnimNode_Trail::bActorSpaceFakeVel' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, BaseJoint) == 0x000128, "Member 'FAnimNode_Trail::BaseJoint' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_TwistCorrectiveNode
// 0x0088 (0x00F8 - 0x0070)
struct FAnimNode_TwistCorrectiveNode final : public FAnimNode_SkeletalControlBase
{
public:
	struct FReferenceBoneFrame                    BaseFrame;                                         // 0x0070(0x0028)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FReferenceBoneFrame                    TwistFrame;                                        // 0x0098(0x0028)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FAxis                                  TwistPlaneNormalAxis;                              // 0x00C0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RangeMax;                                          // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemappedMin;                                       // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemappedMax;                                       // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCurveParam                        Curve;                                             // 0x00E0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_TwistCorrectiveNode) == 0x000008, "Wrong alignment on FAnimNode_TwistCorrectiveNode");
static_assert(sizeof(FAnimNode_TwistCorrectiveNode) == 0x0000F8, "Wrong size on FAnimNode_TwistCorrectiveNode");
static_assert(offsetof(FAnimNode_TwistCorrectiveNode, BaseFrame) == 0x000070, "Member 'FAnimNode_TwistCorrectiveNode::BaseFrame' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwistCorrectiveNode, TwistFrame) == 0x000098, "Member 'FAnimNode_TwistCorrectiveNode::TwistFrame' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwistCorrectiveNode, TwistPlaneNormalAxis) == 0x0000C0, "Member 'FAnimNode_TwistCorrectiveNode::TwistPlaneNormalAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwistCorrectiveNode, RangeMax) == 0x0000D0, "Member 'FAnimNode_TwistCorrectiveNode::RangeMax' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwistCorrectiveNode, RemappedMin) == 0x0000D4, "Member 'FAnimNode_TwistCorrectiveNode::RemappedMin' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwistCorrectiveNode, RemappedMax) == 0x0000D8, "Member 'FAnimNode_TwistCorrectiveNode::RemappedMax' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwistCorrectiveNode, Curve) == 0x0000E0, "Member 'FAnimNode_TwistCorrectiveNode::Curve' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_TwoBoneIK
// 0x0150 (0x01C0 - 0x0070)
struct FAnimNode_TwoBoneIK final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         IKBone;                                            // 0x0070(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bAllowStretching : 1;                              // 0x0088(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartStretchRatio;                                 // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStretchScale;                                   // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StretchLimits;                                     // 0x0094(0x0008)(Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bTakeRotationFromEffectorSpace : 1;                // 0x009C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMaintainEffectorRelRot : 1;                       // 0x009C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EBoneControlSpace                             EffectorLocationSpace;                             // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EffectorSpaceBoneName;                             // 0x00A8(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EffectorLocation;                                  // 0x00B0(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneSocketTarget                      EffectorTarget;                                    // 0x00C0(0x0060)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EBoneControlSpace                             JointTargetLocationSpace;                          // 0x0120(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                JointTargetLocation;                               // 0x0124(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   JointTargetSpaceBoneName;                          // 0x0130(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneSocketTarget                      JointTarget;                                       // 0x0140(0x0060)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAllowTwist;                                       // 0x01A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0x3];                                      // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAxis                                  TwistAxis;                                         // 0x01A4(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bNoTwist;                                          // 0x01B4(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B5[0xB];                                      // 0x01B5(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_TwoBoneIK) == 0x000010, "Wrong alignment on FAnimNode_TwoBoneIK");
static_assert(sizeof(FAnimNode_TwoBoneIK) == 0x0001C0, "Wrong size on FAnimNode_TwoBoneIK");
static_assert(offsetof(FAnimNode_TwoBoneIK, IKBone) == 0x000070, "Member 'FAnimNode_TwoBoneIK::IKBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, StartStretchRatio) == 0x00008C, "Member 'FAnimNode_TwoBoneIK::StartStretchRatio' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, MaxStretchScale) == 0x000090, "Member 'FAnimNode_TwoBoneIK::MaxStretchScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, StretchLimits) == 0x000094, "Member 'FAnimNode_TwoBoneIK::StretchLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, EffectorLocationSpace) == 0x0000A0, "Member 'FAnimNode_TwoBoneIK::EffectorLocationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, EffectorSpaceBoneName) == 0x0000A8, "Member 'FAnimNode_TwoBoneIK::EffectorSpaceBoneName' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, EffectorLocation) == 0x0000B0, "Member 'FAnimNode_TwoBoneIK::EffectorLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, EffectorTarget) == 0x0000C0, "Member 'FAnimNode_TwoBoneIK::EffectorTarget' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, JointTargetLocationSpace) == 0x000120, "Member 'FAnimNode_TwoBoneIK::JointTargetLocationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, JointTargetLocation) == 0x000124, "Member 'FAnimNode_TwoBoneIK::JointTargetLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, JointTargetSpaceBoneName) == 0x000130, "Member 'FAnimNode_TwoBoneIK::JointTargetSpaceBoneName' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, JointTarget) == 0x000140, "Member 'FAnimNode_TwoBoneIK::JointTarget' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, bAllowTwist) == 0x0001A0, "Member 'FAnimNode_TwoBoneIK::bAllowTwist' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, TwistAxis) == 0x0001A4, "Member 'FAnimNode_TwoBoneIK::TwistAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, bNoTwist) == 0x0001B4, "Member 'FAnimNode_TwoBoneIK::bNoTwist' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_TwoWayBlend
// 0x0048 (0x0078 - 0x0030)
struct FAnimNode_TwoWayBlend final : public FAnimNode_Base
{
public:
	struct FPoseLink                              A;                                                 // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              B;                                                 // 0x0048(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x0064(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InternalBlendAlpha;                                // 0x006C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAIsRelevant;                                      // 0x0070(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBIsRelevant;                                      // 0x0071(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bResetChildOnActivation;                           // 0x0072(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_73[0x5];                                       // 0x0073(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_TwoWayBlend) == 0x000008, "Wrong alignment on FAnimNode_TwoWayBlend");
static_assert(sizeof(FAnimNode_TwoWayBlend) == 0x000078, "Wrong size on FAnimNode_TwoWayBlend");
static_assert(offsetof(FAnimNode_TwoWayBlend, A) == 0x000030, "Member 'FAnimNode_TwoWayBlend::A' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoWayBlend, B) == 0x000048, "Member 'FAnimNode_TwoWayBlend::B' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoWayBlend, Alpha) == 0x000060, "Member 'FAnimNode_TwoWayBlend::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoWayBlend, AlphaScaleBias) == 0x000064, "Member 'FAnimNode_TwoWayBlend::AlphaScaleBias' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoWayBlend, InternalBlendAlpha) == 0x00006C, "Member 'FAnimNode_TwoWayBlend::InternalBlendAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoWayBlend, bAIsRelevant) == 0x000070, "Member 'FAnimNode_TwoWayBlend::bAIsRelevant' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoWayBlend, bBIsRelevant) == 0x000071, "Member 'FAnimNode_TwoWayBlend::bBIsRelevant' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoWayBlend, bResetChildOnActivation) == 0x000072, "Member 'FAnimNode_TwoWayBlend::bResetChildOnActivation' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimSequencerInstanceProxy
// 0x01A0 (0x0670 - 0x04D0)
struct FAnimSequencerInstanceProxy final : public FAnimInstanceProxy
{
public:
	uint8                                         Pad_4D0[0x1A0];                                    // 0x04D0(0x01A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimSequencerInstanceProxy) == 0x000010, "Wrong alignment on FAnimSequencerInstanceProxy");
static_assert(sizeof(FAnimSequencerInstanceProxy) == 0x000670, "Wrong size on FAnimSequencerInstanceProxy");

// ScriptStruct AnimGraphRuntime.RBFEntry
// 0x0010 (0x0010 - 0x0000)
struct FRBFEntry
{
public:
	TArray<float>                                 Values;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRBFEntry) == 0x000008, "Wrong alignment on FRBFEntry");
static_assert(sizeof(FRBFEntry) == 0x000010, "Wrong size on FRBFEntry");
static_assert(offsetof(FRBFEntry, Values) == 0x000000, "Member 'FRBFEntry::Values' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.RBFTarget
// 0x0078 (0x0088 - 0x0010)
struct FRBFTarget final : public FRBFEntry
{
public:
	float                                         ScaleFactor;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyCustomCurve;                                 // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichCurve                             CustomCurve;                                       // 0x0018(0x0070)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRBFTarget) == 0x000008, "Wrong alignment on FRBFTarget");
static_assert(sizeof(FRBFTarget) == 0x000088, "Wrong size on FRBFTarget");
static_assert(offsetof(FRBFTarget, ScaleFactor) == 0x000010, "Member 'FRBFTarget::ScaleFactor' has a wrong offset!");
static_assert(offsetof(FRBFTarget, bApplyCustomCurve) == 0x000014, "Member 'FRBFTarget::bApplyCustomCurve' has a wrong offset!");
static_assert(offsetof(FRBFTarget, CustomCurve) == 0x000018, "Member 'FRBFTarget::CustomCurve' has a wrong offset!");

}

