#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FLIB_Event

#include "Basic.hpp"

#include "JackGame_structs.hpp"
#include "ENUM_ScenarioNum_structs.hpp"


namespace SDK::Params
{

// Function BP_FLIB_Event.BP_FLIB_Event_C.AddHeroTokugiForAwakening
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Event_C_AddHeroTokugiForAwakening final
{
public:
	class FName                                   bpp__AddHeroTokugi__pf;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__PoweupTokugiName__pf;                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_AddHeroTokugiForAwakening) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_AddHeroTokugiForAwakening");
static_assert(sizeof(BP_FLIB_Event_C_AddHeroTokugiForAwakening) == 0x000018, "Wrong size on BP_FLIB_Event_C_AddHeroTokugiForAwakening");
static_assert(offsetof(BP_FLIB_Event_C_AddHeroTokugiForAwakening, bpp__AddHeroTokugi__pf) == 0x000000, "Member 'BP_FLIB_Event_C_AddHeroTokugiForAwakening::bpp__AddHeroTokugi__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_AddHeroTokugiForAwakening, bpp__PoweupTokugiName__pf) == 0x000008, "Member 'BP_FLIB_Event_C_AddHeroTokugiForAwakening::bpp__PoweupTokugiName__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_AddHeroTokugiForAwakening, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Event_C_AddHeroTokugiForAwakening::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.AppendZenkeiInitializeWaitNPC
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_Event_C_AppendZenkeiInitializeWaitNPC final
{
public:
	TArray<class AActor*>                         bpp__ZenkeiCSInitializeWaitVolume__pf;             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AJackScheduledNPC*>              bpp__InitializeWaitNPC__pf;                        // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_AppendZenkeiInitializeWaitNPC) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_AppendZenkeiInitializeWaitNPC");
static_assert(sizeof(BP_FLIB_Event_C_AppendZenkeiInitializeWaitNPC) == 0x000028, "Wrong size on BP_FLIB_Event_C_AppendZenkeiInitializeWaitNPC");
static_assert(offsetof(BP_FLIB_Event_C_AppendZenkeiInitializeWaitNPC, bpp__ZenkeiCSInitializeWaitVolume__pf) == 0x000000, "Member 'BP_FLIB_Event_C_AppendZenkeiInitializeWaitNPC::bpp__ZenkeiCSInitializeWaitVolume__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_AppendZenkeiInitializeWaitNPC, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Event_C_AppendZenkeiInitializeWaitNPC::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_AppendZenkeiInitializeWaitNPC, bpp__InitializeWaitNPC__pf) == 0x000018, "Member 'BP_FLIB_Event_C_AppendZenkeiInitializeWaitNPC::bpp__InitializeWaitNPC__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.B030_40_ClearCheck
// 0x0008 (0x0008 - 0x0000)
struct BP_FLIB_Event_C_B030_40_ClearCheck final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_B030_40_ClearCheck) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_B030_40_ClearCheck");
static_assert(sizeof(BP_FLIB_Event_C_B030_40_ClearCheck) == 0x000008, "Wrong size on BP_FLIB_Event_C_B030_40_ClearCheck");
static_assert(offsetof(BP_FLIB_Event_C_B030_40_ClearCheck, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_B030_40_ClearCheck::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.CallDiscardItem_Integrate
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_Event_C_CallDiscardItem_Integrate final
{
public:
	struct FJackLDT_ItemTable                     bpp__ItemID__pf;                                   // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         bpp__SubCount__pf;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Out__pf;                                      // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Event_C_CallDiscardItem_Integrate) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_CallDiscardItem_Integrate");
static_assert(sizeof(BP_FLIB_Event_C_CallDiscardItem_Integrate) == 0x000028, "Wrong size on BP_FLIB_Event_C_CallDiscardItem_Integrate");
static_assert(offsetof(BP_FLIB_Event_C_CallDiscardItem_Integrate, bpp__ItemID__pf) == 0x000000, "Member 'BP_FLIB_Event_C_CallDiscardItem_Integrate::bpp__ItemID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_CallDiscardItem_Integrate, bpp__SubCount__pf) == 0x000010, "Member 'BP_FLIB_Event_C_CallDiscardItem_Integrate::bpp__SubCount__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_CallDiscardItem_Integrate, bpp____WorldContext__pf) == 0x000018, "Member 'BP_FLIB_Event_C_CallDiscardItem_Integrate::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_CallDiscardItem_Integrate, bpp__Out__pf) == 0x000020, "Member 'BP_FLIB_Event_C_CallDiscardItem_Integrate::bpp__Out__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.CallHasAllOrbs
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_CallHasAllOrbs final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Out__pf;                                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Event_C_CallHasAllOrbs) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_CallHasAllOrbs");
static_assert(sizeof(BP_FLIB_Event_C_CallHasAllOrbs) == 0x000010, "Wrong size on BP_FLIB_Event_C_CallHasAllOrbs");
static_assert(offsetof(BP_FLIB_Event_C_CallHasAllOrbs, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_CallHasAllOrbs::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_CallHasAllOrbs, bpp__Out__pf) == 0x000008, "Member 'BP_FLIB_Event_C_CallHasAllOrbs::bpp__Out__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.CheckM01Fukkou
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_CheckM01Fukkou final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Fukkou__pf;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Event_C_CheckM01Fukkou) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_CheckM01Fukkou");
static_assert(sizeof(BP_FLIB_Event_C_CheckM01Fukkou) == 0x000010, "Wrong size on BP_FLIB_Event_C_CheckM01Fukkou");
static_assert(offsetof(BP_FLIB_Event_C_CheckM01Fukkou, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_CheckM01Fukkou::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_CheckM01Fukkou, bpp__Fukkou__pf) == 0x000008, "Member 'BP_FLIB_Event_C_CheckM01Fukkou::bpp__Fukkou__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.CheckMapPartnerTuijyu
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_CheckMapPartnerTuijyu final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__UseMapID__pf;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_CheckMapPartnerTuijyu) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_CheckMapPartnerTuijyu");
static_assert(sizeof(BP_FLIB_Event_C_CheckMapPartnerTuijyu) == 0x000010, "Wrong size on BP_FLIB_Event_C_CheckMapPartnerTuijyu");
static_assert(offsetof(BP_FLIB_Event_C_CheckMapPartnerTuijyu, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_CheckMapPartnerTuijyu::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_CheckMapPartnerTuijyu, bpp__UseMapID__pf) == 0x000008, "Member 'BP_FLIB_Event_C_CheckMapPartnerTuijyu::bpp__UseMapID__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.ClearSaveSettings
// 0x0008 (0x0008 - 0x0000)
struct BP_FLIB_Event_C_ClearSaveSettings final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_ClearSaveSettings) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_ClearSaveSettings");
static_assert(sizeof(BP_FLIB_Event_C_ClearSaveSettings) == 0x000008, "Wrong size on BP_FLIB_Event_C_ClearSaveSettings");
static_assert(offsetof(BP_FLIB_Event_C_ClearSaveSettings, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_ClearSaveSettings::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.ConvertSenaLongHair
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Event_C_ConvertSenaLongHair final
{
public:
	class FName                                   bpp__CoordinateID__pf;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__LongHairCoordinate__pf;                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_ConvertSenaLongHair) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_ConvertSenaLongHair");
static_assert(sizeof(BP_FLIB_Event_C_ConvertSenaLongHair) == 0x000018, "Wrong size on BP_FLIB_Event_C_ConvertSenaLongHair");
static_assert(offsetof(BP_FLIB_Event_C_ConvertSenaLongHair, bpp__CoordinateID__pf) == 0x000000, "Member 'BP_FLIB_Event_C_ConvertSenaLongHair::bpp__CoordinateID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_ConvertSenaLongHair, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_ConvertSenaLongHair::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_ConvertSenaLongHair, bpp__LongHairCoordinate__pf) == 0x000010, "Member 'BP_FLIB_Event_C_ConvertSenaLongHair::bpp__LongHairCoordinate__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.ConvertSenaShortHair
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Event_C_ConvertSenaShortHair final
{
public:
	class FName                                   bpp__CoordinateID__pf;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__ShortHairCoordinate__pf;                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_ConvertSenaShortHair) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_ConvertSenaShortHair");
static_assert(sizeof(BP_FLIB_Event_C_ConvertSenaShortHair) == 0x000018, "Wrong size on BP_FLIB_Event_C_ConvertSenaShortHair");
static_assert(offsetof(BP_FLIB_Event_C_ConvertSenaShortHair, bpp__CoordinateID__pf) == 0x000000, "Member 'BP_FLIB_Event_C_ConvertSenaShortHair::bpp__CoordinateID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_ConvertSenaShortHair, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_ConvertSenaShortHair::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_ConvertSenaShortHair, bpp__ShortHairCoordinate__pf) == 0x000010, "Member 'BP_FLIB_Event_C_ConvertSenaShortHair::bpp__ShortHairCoordinate__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.Convert Rura
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Event_C_Convert_Rura final
{
public:
	class FName                                   bpp__From__pf;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__To__pf;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_Convert_Rura) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_Convert_Rura");
static_assert(sizeof(BP_FLIB_Event_C_Convert_Rura) == 0x000018, "Wrong size on BP_FLIB_Event_C_Convert_Rura");
static_assert(offsetof(BP_FLIB_Event_C_Convert_Rura, bpp__From__pf) == 0x000000, "Member 'BP_FLIB_Event_C_Convert_Rura::bpp__From__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_Convert_Rura, bpp__To__pf) == 0x000008, "Member 'BP_FLIB_Event_C_Convert_Rura::bpp__To__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_Convert_Rura, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Event_C_Convert_Rura::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.DisableCS AfterWeatherEffect
// 0x0008 (0x0008 - 0x0000)
struct BP_FLIB_Event_C_DisableCS_AfterWeatherEffect final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_DisableCS_AfterWeatherEffect) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_DisableCS_AfterWeatherEffect");
static_assert(sizeof(BP_FLIB_Event_C_DisableCS_AfterWeatherEffect) == 0x000008, "Wrong size on BP_FLIB_Event_C_DisableCS_AfterWeatherEffect");
static_assert(offsetof(BP_FLIB_Event_C_DisableCS_AfterWeatherEffect, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_DisableCS_AfterWeatherEffect::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.DisablePartyTalk
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Event_C_DisablePartyTalk final
{
public:
	struct FJackLDT_GameFlagDataCutScene          bpp__CutSceneFlag__pf;                             // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_DisablePartyTalk) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_DisablePartyTalk");
static_assert(sizeof(BP_FLIB_Event_C_DisablePartyTalk) == 0x000018, "Wrong size on BP_FLIB_Event_C_DisablePartyTalk");
static_assert(offsetof(BP_FLIB_Event_C_DisablePartyTalk, bpp__CutSceneFlag__pf) == 0x000000, "Member 'BP_FLIB_Event_C_DisablePartyTalk::bpp__CutSceneFlag__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_DisablePartyTalk, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Event_C_DisablePartyTalk::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.EnablePartyTalk
// 0x0008 (0x0008 - 0x0000)
struct BP_FLIB_Event_C_EnablePartyTalk final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_EnablePartyTalk) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_EnablePartyTalk");
static_assert(sizeof(BP_FLIB_Event_C_EnablePartyTalk) == 0x000008, "Wrong size on BP_FLIB_Event_C_EnablePartyTalk");
static_assert(offsetof(BP_FLIB_Event_C_EnablePartyTalk, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_EnablePartyTalk::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.FriendPartyInSetting
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Event_C_FriendPartyInSetting final
{
public:
	EJackCharacter                                bpp__Character__pf;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJackLDT_FriendCharacterPreset         bpp__Preset__pf;                                   // 0x0008(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_FriendPartyInSetting) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_FriendPartyInSetting");
static_assert(sizeof(BP_FLIB_Event_C_FriendPartyInSetting) == 0x000020, "Wrong size on BP_FLIB_Event_C_FriendPartyInSetting");
static_assert(offsetof(BP_FLIB_Event_C_FriendPartyInSetting, bpp__Character__pf) == 0x000000, "Member 'BP_FLIB_Event_C_FriendPartyInSetting::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_FriendPartyInSetting, bpp__Preset__pf) == 0x000008, "Member 'BP_FLIB_Event_C_FriendPartyInSetting::bpp__Preset__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_FriendPartyInSetting, bpp____WorldContext__pf) == 0x000018, "Member 'BP_FLIB_Event_C_FriendPartyInSetting::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetCutSceneFlag
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Event_C_GetCutSceneFlag final
{
public:
	struct FJackLDT_GameFlagDataCutScene          bpp__CutScene__pf;                                 // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Flag__pf;                                     // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Event_C_GetCutSceneFlag) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetCutSceneFlag");
static_assert(sizeof(BP_FLIB_Event_C_GetCutSceneFlag) == 0x000020, "Wrong size on BP_FLIB_Event_C_GetCutSceneFlag");
static_assert(offsetof(BP_FLIB_Event_C_GetCutSceneFlag, bpp__CutScene__pf) == 0x000000, "Member 'BP_FLIB_Event_C_GetCutSceneFlag::bpp__CutScene__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetCutSceneFlag, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Event_C_GetCutSceneFlag::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetCutSceneFlag, bpp__Flag__pf) == 0x000018, "Member 'BP_FLIB_Event_C_GetCutSceneFlag::bpp__Flag__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetCutSceneFlagCheckState
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_Event_C_GetCutSceneFlagCheckState final
{
public:
	TArray<struct FJackLDT_GameFlagDataCutScene>  bpp__CutSceneFlag__pf;                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bpp__AndCheck__pf;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__FlagDefault__pf;                              // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Flag__pf;                                     // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Event_C_GetCutSceneFlagCheckState) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetCutSceneFlagCheckState");
static_assert(sizeof(BP_FLIB_Event_C_GetCutSceneFlagCheckState) == 0x000028, "Wrong size on BP_FLIB_Event_C_GetCutSceneFlagCheckState");
static_assert(offsetof(BP_FLIB_Event_C_GetCutSceneFlagCheckState, bpp__CutSceneFlag__pf) == 0x000000, "Member 'BP_FLIB_Event_C_GetCutSceneFlagCheckState::bpp__CutSceneFlag__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetCutSceneFlagCheckState, bpp__AndCheck__pf) == 0x000010, "Member 'BP_FLIB_Event_C_GetCutSceneFlagCheckState::bpp__AndCheck__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetCutSceneFlagCheckState, bpp__FlagDefault__pf) == 0x000011, "Member 'BP_FLIB_Event_C_GetCutSceneFlagCheckState::bpp__FlagDefault__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetCutSceneFlagCheckState, bpp____WorldContext__pf) == 0x000018, "Member 'BP_FLIB_Event_C_GetCutSceneFlagCheckState::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetCutSceneFlagCheckState, bpp__Flag__pf) == 0x000020, "Member 'BP_FLIB_Event_C_GetCutSceneFlagCheckState::bpp__Flag__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetDirectBranchDefaultIDs
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Event_C_GetDirectBranchDefaultIDs final
{
public:
	class FName                                   bpp__UseMapID__pf;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           bpp__NewParam__pf;                                 // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_GetDirectBranchDefaultIDs) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetDirectBranchDefaultIDs");
static_assert(sizeof(BP_FLIB_Event_C_GetDirectBranchDefaultIDs) == 0x000020, "Wrong size on BP_FLIB_Event_C_GetDirectBranchDefaultIDs");
static_assert(offsetof(BP_FLIB_Event_C_GetDirectBranchDefaultIDs, bpp__UseMapID__pf) == 0x000000, "Member 'BP_FLIB_Event_C_GetDirectBranchDefaultIDs::bpp__UseMapID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetDirectBranchDefaultIDs, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_GetDirectBranchDefaultIDs::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetDirectBranchDefaultIDs, bpp__NewParam__pf) == 0x000010, "Member 'BP_FLIB_Event_C_GetDirectBranchDefaultIDs::bpp__NewParam__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetEmaExceptionBehaviorBranchID
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_GetEmaExceptionBehaviorBranchID final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__ID__pf;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_GetEmaExceptionBehaviorBranchID) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetEmaExceptionBehaviorBranchID");
static_assert(sizeof(BP_FLIB_Event_C_GetEmaExceptionBehaviorBranchID) == 0x000010, "Wrong size on BP_FLIB_Event_C_GetEmaExceptionBehaviorBranchID");
static_assert(offsetof(BP_FLIB_Event_C_GetEmaExceptionBehaviorBranchID, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_GetEmaExceptionBehaviorBranchID::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetEmaExceptionBehaviorBranchID, bpp__ID__pf) == 0x000008, "Member 'BP_FLIB_Event_C_GetEmaExceptionBehaviorBranchID::bpp__ID__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetFriendPartyBehaviorBranchID
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Event_C_GetFriendPartyBehaviorBranchID final
{
public:
	EJackCharacter                                bpp__InID__pf;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__UseMapID__pf;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__ID__pf;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_GetFriendPartyBehaviorBranchID) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetFriendPartyBehaviorBranchID");
static_assert(sizeof(BP_FLIB_Event_C_GetFriendPartyBehaviorBranchID) == 0x000020, "Wrong size on BP_FLIB_Event_C_GetFriendPartyBehaviorBranchID");
static_assert(offsetof(BP_FLIB_Event_C_GetFriendPartyBehaviorBranchID, bpp__InID__pf) == 0x000000, "Member 'BP_FLIB_Event_C_GetFriendPartyBehaviorBranchID::bpp__InID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetFriendPartyBehaviorBranchID, bpp__UseMapID__pf) == 0x000008, "Member 'BP_FLIB_Event_C_GetFriendPartyBehaviorBranchID::bpp__UseMapID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetFriendPartyBehaviorBranchID, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Event_C_GetFriendPartyBehaviorBranchID::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetFriendPartyBehaviorBranchID, bpp__ID__pf) == 0x000018, "Member 'BP_FLIB_Event_C_GetFriendPartyBehaviorBranchID::bpp__ID__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetIssyoPartner
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_GetIssyoPartner final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__Partner__pf;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Event_C_GetIssyoPartner) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetIssyoPartner");
static_assert(sizeof(BP_FLIB_Event_C_GetIssyoPartner) == 0x000010, "Wrong size on BP_FLIB_Event_C_GetIssyoPartner");
static_assert(offsetof(BP_FLIB_Event_C_GetIssyoPartner, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_GetIssyoPartner::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetIssyoPartner, bpp__Partner__pf) == 0x000008, "Member 'BP_FLIB_Event_C_GetIssyoPartner::bpp__Partner__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetIssyoPartnerCharacterType
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_GetIssyoPartnerCharacterType final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                bpp__PartnerCharacterType__pf;                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Event_C_GetIssyoPartnerCharacterType) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetIssyoPartnerCharacterType");
static_assert(sizeof(BP_FLIB_Event_C_GetIssyoPartnerCharacterType) == 0x000010, "Wrong size on BP_FLIB_Event_C_GetIssyoPartnerCharacterType");
static_assert(offsetof(BP_FLIB_Event_C_GetIssyoPartnerCharacterType, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_GetIssyoPartnerCharacterType::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetIssyoPartnerCharacterType, bpp__PartnerCharacterType__pf) == 0x000008, "Member 'BP_FLIB_Event_C_GetIssyoPartnerCharacterType::bpp__PartnerCharacterType__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetItemIDFromDataTable
// 0x0068 (0x0068 - 0x0000)
struct BP_FLIB_Event_C_GetItemIDFromDataTable final
{
public:
	struct FJackDataTableItem_EventGet            bpp__DataTable__pf;                                // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJackLDT_ItemTable                     bpp__ItemID__pf;                                   // 0x0058(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_GetItemIDFromDataTable) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetItemIDFromDataTable");
static_assert(sizeof(BP_FLIB_Event_C_GetItemIDFromDataTable) == 0x000068, "Wrong size on BP_FLIB_Event_C_GetItemIDFromDataTable");
static_assert(offsetof(BP_FLIB_Event_C_GetItemIDFromDataTable, bpp__DataTable__pf) == 0x000000, "Member 'BP_FLIB_Event_C_GetItemIDFromDataTable::bpp__DataTable__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetItemIDFromDataTable, bpp____WorldContext__pf) == 0x000050, "Member 'BP_FLIB_Event_C_GetItemIDFromDataTable::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetItemIDFromDataTable, bpp__ItemID__pf) == 0x000058, "Member 'BP_FLIB_Event_C_GetItemIDFromDataTable::bpp__ItemID__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetKamyuExceptionBehaviorBranchID
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_GetKamyuExceptionBehaviorBranchID final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__NewParam__pf;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_GetKamyuExceptionBehaviorBranchID) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetKamyuExceptionBehaviorBranchID");
static_assert(sizeof(BP_FLIB_Event_C_GetKamyuExceptionBehaviorBranchID) == 0x000010, "Wrong size on BP_FLIB_Event_C_GetKamyuExceptionBehaviorBranchID");
static_assert(offsetof(BP_FLIB_Event_C_GetKamyuExceptionBehaviorBranchID, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_GetKamyuExceptionBehaviorBranchID::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetKamyuExceptionBehaviorBranchID, bpp__NewParam__pf) == 0x000008, "Member 'BP_FLIB_Event_C_GetKamyuExceptionBehaviorBranchID::bpp__NewParam__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetNerusenBattleTurnCountSrc
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Event_C_GetNerusenBattleTurnCountSrc final
{
public:
	struct FJackLDT_EventBattle                   bpp__ID__pf;                                       // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__Point__pf;                                    // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Event_C_GetNerusenBattleTurnCountSrc) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetNerusenBattleTurnCountSrc");
static_assert(sizeof(BP_FLIB_Event_C_GetNerusenBattleTurnCountSrc) == 0x000020, "Wrong size on BP_FLIB_Event_C_GetNerusenBattleTurnCountSrc");
static_assert(offsetof(BP_FLIB_Event_C_GetNerusenBattleTurnCountSrc, bpp__ID__pf) == 0x000000, "Member 'BP_FLIB_Event_C_GetNerusenBattleTurnCountSrc::bpp__ID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetNerusenBattleTurnCountSrc, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Event_C_GetNerusenBattleTurnCountSrc::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetNerusenBattleTurnCountSrc, bpp__Point__pf) == 0x000018, "Member 'BP_FLIB_Event_C_GetNerusenBattleTurnCountSrc::bpp__Point__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetOmoideCsID
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Event_C_GetOmoideCsID final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 bpp__OmoideCsID__pf;                               // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__OmoideCs__pf;                                 // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Event_C_GetOmoideCsID) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetOmoideCsID");
static_assert(sizeof(BP_FLIB_Event_C_GetOmoideCsID) == 0x000020, "Wrong size on BP_FLIB_Event_C_GetOmoideCsID");
static_assert(offsetof(BP_FLIB_Event_C_GetOmoideCsID, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_GetOmoideCsID::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetOmoideCsID, bpp__OmoideCsID__pf) == 0x000008, "Member 'BP_FLIB_Event_C_GetOmoideCsID::bpp__OmoideCsID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetOmoideCsID, bpp__OmoideCs__pf) == 0x000018, "Member 'BP_FLIB_Event_C_GetOmoideCsID::bpp__OmoideCs__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetOrbsAllGetFlag
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Event_C_GetOrbsAllGetFlag final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJackLDT_GameFlagDataScenario          bpp__Flag__pf;                                     // 0x0008(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_GetOrbsAllGetFlag) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetOrbsAllGetFlag");
static_assert(sizeof(BP_FLIB_Event_C_GetOrbsAllGetFlag) == 0x000018, "Wrong size on BP_FLIB_Event_C_GetOrbsAllGetFlag");
static_assert(offsetof(BP_FLIB_Event_C_GetOrbsAllGetFlag, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_GetOrbsAllGetFlag::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetOrbsAllGetFlag, bpp__Flag__pf) == 0x000008, "Member 'BP_FLIB_Event_C_GetOrbsAllGetFlag::bpp__Flag__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetPafuPafuRandomValue
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Event_C_GetPafuPafuRandomValue final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           bpp__TextID__pf;                                   // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   bpp__SExTrackName__pfT;                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_GetPafuPafuRandomValue) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetPafuPafuRandomValue");
static_assert(sizeof(BP_FLIB_Event_C_GetPafuPafuRandomValue) == 0x000020, "Wrong size on BP_FLIB_Event_C_GetPafuPafuRandomValue");
static_assert(offsetof(BP_FLIB_Event_C_GetPafuPafuRandomValue, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_GetPafuPafuRandomValue::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetPafuPafuRandomValue, bpp__TextID__pf) == 0x000008, "Member 'BP_FLIB_Event_C_GetPafuPafuRandomValue::bpp__TextID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetPafuPafuRandomValue, bpp__SExTrackName__pfT) == 0x000018, "Member 'BP_FLIB_Event_C_GetPafuPafuRandomValue::bpp__SExTrackName__pfT' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetPartnerTsuijyuBehaviorBranchID
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Event_C_GetPartnerTsuijyuBehaviorBranchID final
{
public:
	EJackCharacter                                bpp__InID__pf;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__UseMapID__pf;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__ID__pf;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_GetPartnerTsuijyuBehaviorBranchID) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetPartnerTsuijyuBehaviorBranchID");
static_assert(sizeof(BP_FLIB_Event_C_GetPartnerTsuijyuBehaviorBranchID) == 0x000020, "Wrong size on BP_FLIB_Event_C_GetPartnerTsuijyuBehaviorBranchID");
static_assert(offsetof(BP_FLIB_Event_C_GetPartnerTsuijyuBehaviorBranchID, bpp__InID__pf) == 0x000000, "Member 'BP_FLIB_Event_C_GetPartnerTsuijyuBehaviorBranchID::bpp__InID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetPartnerTsuijyuBehaviorBranchID, bpp__UseMapID__pf) == 0x000008, "Member 'BP_FLIB_Event_C_GetPartnerTsuijyuBehaviorBranchID::bpp__UseMapID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetPartnerTsuijyuBehaviorBranchID, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Event_C_GetPartnerTsuijyuBehaviorBranchID::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetPartnerTsuijyuBehaviorBranchID, bpp__ID__pf) == 0x000018, "Member 'BP_FLIB_Event_C_GetPartnerTsuijyuBehaviorBranchID::bpp__ID__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetPartyCoordinate
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Event_C_GetPartyCoordinate final
{
public:
	EJackCharacter                                bpp__Character__pf;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__Coordinate__pf;                               // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_GetPartyCoordinate) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetPartyCoordinate");
static_assert(sizeof(BP_FLIB_Event_C_GetPartyCoordinate) == 0x000018, "Wrong size on BP_FLIB_Event_C_GetPartyCoordinate");
static_assert(offsetof(BP_FLIB_Event_C_GetPartyCoordinate, bpp__Character__pf) == 0x000000, "Member 'BP_FLIB_Event_C_GetPartyCoordinate::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetPartyCoordinate, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_GetPartyCoordinate::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetPartyCoordinate, bpp__Coordinate__pf) == 0x000010, "Member 'BP_FLIB_Event_C_GetPartyCoordinate::bpp__Coordinate__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetPlayerWeaponInfo
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_Event_C_GetPlayerWeaponInfo final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__MainWeaponItemID__pf;                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__MainWeaponSocket__pf;                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__SubWeaponItemID__pf;                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__SubWeaponSocket__pf;                          // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_GetPlayerWeaponInfo) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetPlayerWeaponInfo");
static_assert(sizeof(BP_FLIB_Event_C_GetPlayerWeaponInfo) == 0x000028, "Wrong size on BP_FLIB_Event_C_GetPlayerWeaponInfo");
static_assert(offsetof(BP_FLIB_Event_C_GetPlayerWeaponInfo, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_GetPlayerWeaponInfo::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetPlayerWeaponInfo, bpp__MainWeaponItemID__pf) == 0x000008, "Member 'BP_FLIB_Event_C_GetPlayerWeaponInfo::bpp__MainWeaponItemID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetPlayerWeaponInfo, bpp__MainWeaponSocket__pf) == 0x000010, "Member 'BP_FLIB_Event_C_GetPlayerWeaponInfo::bpp__MainWeaponSocket__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetPlayerWeaponInfo, bpp__SubWeaponItemID__pf) == 0x000018, "Member 'BP_FLIB_Event_C_GetPlayerWeaponInfo::bpp__SubWeaponItemID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetPlayerWeaponInfo, bpp__SubWeaponSocket__pf) == 0x000020, "Member 'BP_FLIB_Event_C_GetPlayerWeaponInfo::bpp__SubWeaponSocket__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetProgressEventState
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Event_C_GetProgressEventState final
{
public:
	struct FJackLDT_GameFlagDataGameProgress      bpp__NewParam__pf;                                 // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__State__pf;                                    // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Event_C_GetProgressEventState) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetProgressEventState");
static_assert(sizeof(BP_FLIB_Event_C_GetProgressEventState) == 0x000020, "Wrong size on BP_FLIB_Event_C_GetProgressEventState");
static_assert(offsetof(BP_FLIB_Event_C_GetProgressEventState, bpp__NewParam__pf) == 0x000000, "Member 'BP_FLIB_Event_C_GetProgressEventState::bpp__NewParam__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetProgressEventState, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Event_C_GetProgressEventState::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetProgressEventState, bpp__State__pf) == 0x000018, "Member 'BP_FLIB_Event_C_GetProgressEventState::bpp__State__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetProgressFlag
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Event_C_GetProgressFlag final
{
public:
	struct FJackLDT_GameFlagDataGameProgress      bpp__GameProgress__pf;                             // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Flag__pf;                                     // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Event_C_GetProgressFlag) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetProgressFlag");
static_assert(sizeof(BP_FLIB_Event_C_GetProgressFlag) == 0x000020, "Wrong size on BP_FLIB_Event_C_GetProgressFlag");
static_assert(offsetof(BP_FLIB_Event_C_GetProgressFlag, bpp__GameProgress__pf) == 0x000000, "Member 'BP_FLIB_Event_C_GetProgressFlag::bpp__GameProgress__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetProgressFlag, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Event_C_GetProgressFlag::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetProgressFlag, bpp__Flag__pf) == 0x000018, "Member 'BP_FLIB_Event_C_GetProgressFlag::bpp__Flag__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetProgressScenarioFlags
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Event_C_GetProgressScenarioFlags final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           bpp__OutxFlags__pfT;                               // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_GetProgressScenarioFlags) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetProgressScenarioFlags");
static_assert(sizeof(BP_FLIB_Event_C_GetProgressScenarioFlags) == 0x000018, "Wrong size on BP_FLIB_Event_C_GetProgressScenarioFlags");
static_assert(offsetof(BP_FLIB_Event_C_GetProgressScenarioFlags, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_GetProgressScenarioFlags::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetProgressScenarioFlags, bpp__OutxFlags__pfT) == 0x000008, "Member 'BP_FLIB_Event_C_GetProgressScenarioFlags::bpp__OutxFlags__pfT' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetProgressScenarioNum
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Event_C_GetProgressScenarioNum final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 bpp__ScenarioNum__pf;                              // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_GetProgressScenarioNum) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetProgressScenarioNum");
static_assert(sizeof(BP_FLIB_Event_C_GetProgressScenarioNum) == 0x000018, "Wrong size on BP_FLIB_Event_C_GetProgressScenarioNum");
static_assert(offsetof(BP_FLIB_Event_C_GetProgressScenarioNum, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_GetProgressScenarioNum::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetProgressScenarioNum, bpp__ScenarioNum__pf) == 0x000008, "Member 'BP_FLIB_Event_C_GetProgressScenarioNum::bpp__ScenarioNum__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetScenarioCount
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Event_C_GetScenarioCount final
{
public:
	struct FJackLDT_GameFlagDataScenario          bpp__Scenario__pf;                                 // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__Count__pf;                                    // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Event_C_GetScenarioCount) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetScenarioCount");
static_assert(sizeof(BP_FLIB_Event_C_GetScenarioCount) == 0x000020, "Wrong size on BP_FLIB_Event_C_GetScenarioCount");
static_assert(offsetof(BP_FLIB_Event_C_GetScenarioCount, bpp__Scenario__pf) == 0x000000, "Member 'BP_FLIB_Event_C_GetScenarioCount::bpp__Scenario__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetScenarioCount, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Event_C_GetScenarioCount::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetScenarioCount, bpp__Count__pf) == 0x000018, "Member 'BP_FLIB_Event_C_GetScenarioCount::bpp__Count__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetScenarioFlag
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Event_C_GetScenarioFlag final
{
public:
	struct FJackLDT_GameFlagDataScenario          bpp__Scenario__pf;                                 // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Flag__pf;                                     // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Event_C_GetScenarioFlag) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetScenarioFlag");
static_assert(sizeof(BP_FLIB_Event_C_GetScenarioFlag) == 0x000020, "Wrong size on BP_FLIB_Event_C_GetScenarioFlag");
static_assert(offsetof(BP_FLIB_Event_C_GetScenarioFlag, bpp__Scenario__pf) == 0x000000, "Member 'BP_FLIB_Event_C_GetScenarioFlag::bpp__Scenario__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetScenarioFlag, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Event_C_GetScenarioFlag::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetScenarioFlag, bpp__Flag__pf) == 0x000018, "Member 'BP_FLIB_Event_C_GetScenarioFlag::bpp__Flag__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetScenarioFlagCheckState
// 0x0030 (0x0030 - 0x0000)
struct BP_FLIB_Event_C_GetScenarioFlagCheckState final
{
public:
	TArray<struct FJackLDT_GameFlagDataScenario>  bpp__ScenarioFlag__pf;                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bpp__AndCheck__pf;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__FlagDefault__pf;                              // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 bpp__CheckActor__pf;                               // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Flag__pf;                                     // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Event_C_GetScenarioFlagCheckState) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetScenarioFlagCheckState");
static_assert(sizeof(BP_FLIB_Event_C_GetScenarioFlagCheckState) == 0x000030, "Wrong size on BP_FLIB_Event_C_GetScenarioFlagCheckState");
static_assert(offsetof(BP_FLIB_Event_C_GetScenarioFlagCheckState, bpp__ScenarioFlag__pf) == 0x000000, "Member 'BP_FLIB_Event_C_GetScenarioFlagCheckState::bpp__ScenarioFlag__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetScenarioFlagCheckState, bpp__AndCheck__pf) == 0x000010, "Member 'BP_FLIB_Event_C_GetScenarioFlagCheckState::bpp__AndCheck__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetScenarioFlagCheckState, bpp__FlagDefault__pf) == 0x000011, "Member 'BP_FLIB_Event_C_GetScenarioFlagCheckState::bpp__FlagDefault__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetScenarioFlagCheckState, bpp__CheckActor__pf) == 0x000018, "Member 'BP_FLIB_Event_C_GetScenarioFlagCheckState::bpp__CheckActor__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetScenarioFlagCheckState, bpp____WorldContext__pf) == 0x000020, "Member 'BP_FLIB_Event_C_GetScenarioFlagCheckState::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetScenarioFlagCheckState, bpp__Flag__pf) == 0x000028, "Member 'BP_FLIB_Event_C_GetScenarioFlagCheckState::bpp__Flag__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetScenarioFlagFromProgressNum
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Event_C_GetScenarioFlagFromProgressNum final
{
public:
	class FString                                 bpp__ProgressNum__pf__const;                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__Flag__pf;                                     // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_GetScenarioFlagFromProgressNum) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetScenarioFlagFromProgressNum");
static_assert(sizeof(BP_FLIB_Event_C_GetScenarioFlagFromProgressNum) == 0x000020, "Wrong size on BP_FLIB_Event_C_GetScenarioFlagFromProgressNum");
static_assert(offsetof(BP_FLIB_Event_C_GetScenarioFlagFromProgressNum, bpp__ProgressNum__pf__const) == 0x000000, "Member 'BP_FLIB_Event_C_GetScenarioFlagFromProgressNum::bpp__ProgressNum__pf__const' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetScenarioFlagFromProgressNum, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Event_C_GetScenarioFlagFromProgressNum::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetScenarioFlagFromProgressNum, bpp__Flag__pf) == 0x000018, "Member 'BP_FLIB_Event_C_GetScenarioFlagFromProgressNum::bpp__Flag__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.GetSilviaPartyBehaviorBranchID
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Event_C_GetSilviaPartyBehaviorBranchID final
{
public:
	EJackCharacter                                bpp__InID__pf;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__TownMap__pf;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__ID__pf;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_GetSilviaPartyBehaviorBranchID) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_GetSilviaPartyBehaviorBranchID");
static_assert(sizeof(BP_FLIB_Event_C_GetSilviaPartyBehaviorBranchID) == 0x000018, "Wrong size on BP_FLIB_Event_C_GetSilviaPartyBehaviorBranchID");
static_assert(offsetof(BP_FLIB_Event_C_GetSilviaPartyBehaviorBranchID, bpp__InID__pf) == 0x000000, "Member 'BP_FLIB_Event_C_GetSilviaPartyBehaviorBranchID::bpp__InID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetSilviaPartyBehaviorBranchID, bpp__TownMap__pf) == 0x000001, "Member 'BP_FLIB_Event_C_GetSilviaPartyBehaviorBranchID::bpp__TownMap__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetSilviaPartyBehaviorBranchID, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_GetSilviaPartyBehaviorBranchID::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_GetSilviaPartyBehaviorBranchID, bpp__ID__pf) == 0x000010, "Member 'BP_FLIB_Event_C_GetSilviaPartyBehaviorBranchID::bpp__ID__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.Is2ndScenario
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_Is2ndScenario final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__2ndScenario__pf;                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Event_C_Is2ndScenario) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_Is2ndScenario");
static_assert(sizeof(BP_FLIB_Event_C_Is2ndScenario) == 0x000010, "Wrong size on BP_FLIB_Event_C_Is2ndScenario");
static_assert(offsetof(BP_FLIB_Event_C_Is2ndScenario, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_Is2ndScenario::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_Is2ndScenario, bpp__2ndScenario__pf) == 0x000008, "Member 'BP_FLIB_Event_C_Is2ndScenario::bpp__2ndScenario__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.IsCutSceneFlagCheckActivate
// 0x0040 (0x0040 - 0x0000)
struct BP_FLIB_Event_C_IsCutSceneFlagCheckActivate final
{
public:
	TArray<struct FJackLDT_GameFlagDataCutScene>  bpp__ActivateCutSceneFlag__pf;                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bpp__ActivateAndCheck__pf;                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackLDT_GameFlagDataCutScene>  bpp__DeactivateCutSceneFlag__pf;                   // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bpp__DeactivateAndCheck__pf;                       // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Enable__pf;                                   // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Event_C_IsCutSceneFlagCheckActivate) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_IsCutSceneFlagCheckActivate");
static_assert(sizeof(BP_FLIB_Event_C_IsCutSceneFlagCheckActivate) == 0x000040, "Wrong size on BP_FLIB_Event_C_IsCutSceneFlagCheckActivate");
static_assert(offsetof(BP_FLIB_Event_C_IsCutSceneFlagCheckActivate, bpp__ActivateCutSceneFlag__pf) == 0x000000, "Member 'BP_FLIB_Event_C_IsCutSceneFlagCheckActivate::bpp__ActivateCutSceneFlag__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_IsCutSceneFlagCheckActivate, bpp__ActivateAndCheck__pf) == 0x000010, "Member 'BP_FLIB_Event_C_IsCutSceneFlagCheckActivate::bpp__ActivateAndCheck__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_IsCutSceneFlagCheckActivate, bpp__DeactivateCutSceneFlag__pf) == 0x000018, "Member 'BP_FLIB_Event_C_IsCutSceneFlagCheckActivate::bpp__DeactivateCutSceneFlag__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_IsCutSceneFlagCheckActivate, bpp__DeactivateAndCheck__pf) == 0x000028, "Member 'BP_FLIB_Event_C_IsCutSceneFlagCheckActivate::bpp__DeactivateAndCheck__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_IsCutSceneFlagCheckActivate, bpp____WorldContext__pf) == 0x000030, "Member 'BP_FLIB_Event_C_IsCutSceneFlagCheckActivate::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_IsCutSceneFlagCheckActivate, bpp__Enable__pf) == 0x000038, "Member 'BP_FLIB_Event_C_IsCutSceneFlagCheckActivate::bpp__Enable__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.IsHoukaiClearSky
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_IsHoukaiClearSky final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__HoukaiClearSky__pf;                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Event_C_IsHoukaiClearSky) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_IsHoukaiClearSky");
static_assert(sizeof(BP_FLIB_Event_C_IsHoukaiClearSky) == 0x000010, "Wrong size on BP_FLIB_Event_C_IsHoukaiClearSky");
static_assert(offsetof(BP_FLIB_Event_C_IsHoukaiClearSky, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_IsHoukaiClearSky::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_IsHoukaiClearSky, bpp__HoukaiClearSky__pf) == 0x000008, "Member 'BP_FLIB_Event_C_IsHoukaiClearSky::bpp__HoukaiClearSky__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.IsProgressScenarioNum
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Event_C_IsProgressScenarioNum final
{
public:
	ENUM_ScenarioNum                              bpp__ScenarioNum__pf;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__true__pf;                                     // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Event_C_IsProgressScenarioNum) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_IsProgressScenarioNum");
static_assert(sizeof(BP_FLIB_Event_C_IsProgressScenarioNum) == 0x000018, "Wrong size on BP_FLIB_Event_C_IsProgressScenarioNum");
static_assert(offsetof(BP_FLIB_Event_C_IsProgressScenarioNum, bpp__ScenarioNum__pf) == 0x000000, "Member 'BP_FLIB_Event_C_IsProgressScenarioNum::bpp__ScenarioNum__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_IsProgressScenarioNum, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_IsProgressScenarioNum::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_IsProgressScenarioNum, bpp__true__pf) == 0x000010, "Member 'BP_FLIB_Event_C_IsProgressScenarioNum::bpp__true__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.IsScenarioFlagCheckActivate
// 0x0048 (0x0048 - 0x0000)
struct BP_FLIB_Event_C_IsScenarioFlagCheckActivate final
{
public:
	TArray<struct FJackLDT_GameFlagDataScenario>  bpp__ActivateScenarioFlag__pf;                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bpp__ActivateAndCheck__pf;                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJackLDT_GameFlagDataScenario>  bpp__DeactivateScenarioFlag__pf;                   // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bpp__DeactivateAndCheck__pf;                       // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 bpp__CheckActor__pf;                               // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bEnable__pf;                                  // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Event_C_IsScenarioFlagCheckActivate) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_IsScenarioFlagCheckActivate");
static_assert(sizeof(BP_FLIB_Event_C_IsScenarioFlagCheckActivate) == 0x000048, "Wrong size on BP_FLIB_Event_C_IsScenarioFlagCheckActivate");
static_assert(offsetof(BP_FLIB_Event_C_IsScenarioFlagCheckActivate, bpp__ActivateScenarioFlag__pf) == 0x000000, "Member 'BP_FLIB_Event_C_IsScenarioFlagCheckActivate::bpp__ActivateScenarioFlag__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_IsScenarioFlagCheckActivate, bpp__ActivateAndCheck__pf) == 0x000010, "Member 'BP_FLIB_Event_C_IsScenarioFlagCheckActivate::bpp__ActivateAndCheck__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_IsScenarioFlagCheckActivate, bpp__DeactivateScenarioFlag__pf) == 0x000018, "Member 'BP_FLIB_Event_C_IsScenarioFlagCheckActivate::bpp__DeactivateScenarioFlag__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_IsScenarioFlagCheckActivate, bpp__DeactivateAndCheck__pf) == 0x000028, "Member 'BP_FLIB_Event_C_IsScenarioFlagCheckActivate::bpp__DeactivateAndCheck__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_IsScenarioFlagCheckActivate, bpp__CheckActor__pf) == 0x000030, "Member 'BP_FLIB_Event_C_IsScenarioFlagCheckActivate::bpp__CheckActor__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_IsScenarioFlagCheckActivate, bpp____WorldContext__pf) == 0x000038, "Member 'BP_FLIB_Event_C_IsScenarioFlagCheckActivate::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_IsScenarioFlagCheckActivate, bpp__bEnable__pf) == 0x000040, "Member 'BP_FLIB_Event_C_IsScenarioFlagCheckActivate::bpp__bEnable__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.IsSScenario
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_IsSScenario final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__SScenario__pf;                                // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Event_C_IsSScenario) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_IsSScenario");
static_assert(sizeof(BP_FLIB_Event_C_IsSScenario) == 0x000010, "Wrong size on BP_FLIB_Event_C_IsSScenario");
static_assert(offsetof(BP_FLIB_Event_C_IsSScenario, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_IsSScenario::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_IsSScenario, bpp__SScenario__pf) == 0x000008, "Member 'BP_FLIB_Event_C_IsSScenario::bpp__SScenario__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.M01Reconstruction
// 0x0008 (0x0008 - 0x0000)
struct BP_FLIB_Event_C_M01Reconstruction final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_M01Reconstruction) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_M01Reconstruction");
static_assert(sizeof(BP_FLIB_Event_C_M01Reconstruction) == 0x000008, "Wrong size on BP_FLIB_Event_C_M01Reconstruction");
static_assert(offsetof(BP_FLIB_Event_C_M01Reconstruction, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_M01Reconstruction::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.OrbCompleteCheck
// 0x0008 (0x0008 - 0x0000)
struct BP_FLIB_Event_C_OrbCompleteCheck final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_OrbCompleteCheck) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_OrbCompleteCheck");
static_assert(sizeof(BP_FLIB_Event_C_OrbCompleteCheck) == 0x000008, "Wrong size on BP_FLIB_Event_C_OrbCompleteCheck");
static_assert(offsetof(BP_FLIB_Event_C_OrbCompleteCheck, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_OrbCompleteCheck::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.PowerAwakeningFromElder
// 0x0008 (0x0008 - 0x0000)
struct BP_FLIB_Event_C_PowerAwakeningFromElder final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_PowerAwakeningFromElder) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_PowerAwakeningFromElder");
static_assert(sizeof(BP_FLIB_Event_C_PowerAwakeningFromElder) == 0x000008, "Wrong size on BP_FLIB_Event_C_PowerAwakeningFromElder");
static_assert(offsetof(BP_FLIB_Event_C_PowerAwakeningFromElder, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_PowerAwakeningFromElder::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.ResetProgressScenarioNum
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_ResetProgressScenarioNum final
{
public:
	ENUM_ScenarioNum                              bpp__ScenarioNum__pf;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_ResetProgressScenarioNum) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_ResetProgressScenarioNum");
static_assert(sizeof(BP_FLIB_Event_C_ResetProgressScenarioNum) == 0x000010, "Wrong size on BP_FLIB_Event_C_ResetProgressScenarioNum");
static_assert(offsetof(BP_FLIB_Event_C_ResetProgressScenarioNum, bpp__ScenarioNum__pf) == 0x000000, "Member 'BP_FLIB_Event_C_ResetProgressScenarioNum::bpp__ScenarioNum__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_ResetProgressScenarioNum, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_ResetProgressScenarioNum::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.ResetWeatherForEventBattleLose
// 0x0008 (0x0008 - 0x0000)
struct BP_FLIB_Event_C_ResetWeatherForEventBattleLose final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_ResetWeatherForEventBattleLose) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_ResetWeatherForEventBattleLose");
static_assert(sizeof(BP_FLIB_Event_C_ResetWeatherForEventBattleLose) == 0x000008, "Wrong size on BP_FLIB_Event_C_ResetWeatherForEventBattleLose");
static_assert(offsetof(BP_FLIB_Event_C_ResetWeatherForEventBattleLose, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_ResetWeatherForEventBattleLose::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetAlmostCutsceneFlagForOmoide
// 0x0008 (0x0008 - 0x0000)
struct BP_FLIB_Event_C_SetAlmostCutsceneFlagForOmoide final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetAlmostCutsceneFlagForOmoide) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetAlmostCutsceneFlagForOmoide");
static_assert(sizeof(BP_FLIB_Event_C_SetAlmostCutsceneFlagForOmoide) == 0x000008, "Wrong size on BP_FLIB_Event_C_SetAlmostCutsceneFlagForOmoide");
static_assert(offsetof(BP_FLIB_Event_C_SetAlmostCutsceneFlagForOmoide, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetAlmostCutsceneFlagForOmoide::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetBehaviorDirectBranch
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_SetBehaviorDirectBranch final
{
public:
	class FName                                   bpp__InBranch__pf;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetBehaviorDirectBranch) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetBehaviorDirectBranch");
static_assert(sizeof(BP_FLIB_Event_C_SetBehaviorDirectBranch) == 0x000010, "Wrong size on BP_FLIB_Event_C_SetBehaviorDirectBranch");
static_assert(offsetof(BP_FLIB_Event_C_SetBehaviorDirectBranch, bpp__InBranch__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetBehaviorDirectBranch::bpp__InBranch__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetBehaviorDirectBranch, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetBehaviorDirectBranch::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetBehaviorDirectBranchB040
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Event_C_SetBehaviorDirectBranchB040 final
{
public:
	TArray<class FName>                           bpp__InBranches__pf;                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetBehaviorDirectBranchB040) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetBehaviorDirectBranchB040");
static_assert(sizeof(BP_FLIB_Event_C_SetBehaviorDirectBranchB040) == 0x000018, "Wrong size on BP_FLIB_Event_C_SetBehaviorDirectBranchB040");
static_assert(offsetof(BP_FLIB_Event_C_SetBehaviorDirectBranchB040, bpp__InBranches__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetBehaviorDirectBranchB040::bpp__InBranches__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetBehaviorDirectBranchB040, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Event_C_SetBehaviorDirectBranchB040::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetBehaviorDirectBranchCommon
// 0x0008 (0x0008 - 0x0000)
struct BP_FLIB_Event_C_SetBehaviorDirectBranchCommon final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetBehaviorDirectBranchCommon) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetBehaviorDirectBranchCommon");
static_assert(sizeof(BP_FLIB_Event_C_SetBehaviorDirectBranchCommon) == 0x000008, "Wrong size on BP_FLIB_Event_C_SetBehaviorDirectBranchCommon");
static_assert(offsetof(BP_FLIB_Event_C_SetBehaviorDirectBranchCommon, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetBehaviorDirectBranchCommon::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetBehaviorDirectBranchs
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Event_C_SetBehaviorDirectBranchs final
{
public:
	TArray<class FName>                           bpp__InBranches__pf;                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetBehaviorDirectBranchs) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetBehaviorDirectBranchs");
static_assert(sizeof(BP_FLIB_Event_C_SetBehaviorDirectBranchs) == 0x000018, "Wrong size on BP_FLIB_Event_C_SetBehaviorDirectBranchs");
static_assert(offsetof(BP_FLIB_Event_C_SetBehaviorDirectBranchs, bpp__InBranches__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetBehaviorDirectBranchs::bpp__InBranches__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetBehaviorDirectBranchs, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Event_C_SetBehaviorDirectBranchs::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetCsBranch_2DMovie
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_SetCsBranch_2DMovie final
{
public:
	class AMatineeActor*                          bpp__Matinee__pf;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetCsBranch_2DMovie) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetCsBranch_2DMovie");
static_assert(sizeof(BP_FLIB_Event_C_SetCsBranch_2DMovie) == 0x000010, "Wrong size on BP_FLIB_Event_C_SetCsBranch_2DMovie");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_2DMovie, bpp__Matinee__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetCsBranch_2DMovie::bpp__Matinee__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_2DMovie, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetCsBranch_2DMovie::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetCsBranch_A_030_CS_083
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_SetCsBranch_A_030_CS_083 final
{
public:
	class AMatineeActor*                          bpp__Matinee__pf;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetCsBranch_A_030_CS_083) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetCsBranch_A_030_CS_083");
static_assert(sizeof(BP_FLIB_Event_C_SetCsBranch_A_030_CS_083) == 0x000010, "Wrong size on BP_FLIB_Event_C_SetCsBranch_A_030_CS_083");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_A_030_CS_083, bpp__Matinee__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetCsBranch_A_030_CS_083::bpp__Matinee__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_A_030_CS_083, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetCsBranch_A_030_CS_083::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetCsBranch_A_030_CS_085
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_SetCsBranch_A_030_CS_085 final
{
public:
	class AMatineeActor*                          bpp__Matinee__pf;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetCsBranch_A_030_CS_085) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetCsBranch_A_030_CS_085");
static_assert(sizeof(BP_FLIB_Event_C_SetCsBranch_A_030_CS_085) == 0x000010, "Wrong size on BP_FLIB_Event_C_SetCsBranch_A_030_CS_085");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_A_030_CS_085, bpp__Matinee__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetCsBranch_A_030_CS_085::bpp__Matinee__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_A_030_CS_085, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetCsBranch_A_030_CS_085::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetCsBranch_A_030_CS_087
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_SetCsBranch_A_030_CS_087 final
{
public:
	class AMatineeActor*                          bpp__Matinee__pf;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetCsBranch_A_030_CS_087) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetCsBranch_A_030_CS_087");
static_assert(sizeof(BP_FLIB_Event_C_SetCsBranch_A_030_CS_087) == 0x000010, "Wrong size on BP_FLIB_Event_C_SetCsBranch_A_030_CS_087");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_A_030_CS_087, bpp__Matinee__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetCsBranch_A_030_CS_087::bpp__Matinee__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_A_030_CS_087, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetCsBranch_A_030_CS_087::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetCsBranch_A_050_CS_040
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_SetCsBranch_A_050_CS_040 final
{
public:
	class AMatineeActor*                          bpp__Matinee__pf;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetCsBranch_A_050_CS_040) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetCsBranch_A_050_CS_040");
static_assert(sizeof(BP_FLIB_Event_C_SetCsBranch_A_050_CS_040) == 0x000010, "Wrong size on BP_FLIB_Event_C_SetCsBranch_A_050_CS_040");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_A_050_CS_040, bpp__Matinee__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetCsBranch_A_050_CS_040::bpp__Matinee__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_A_050_CS_040, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetCsBranch_A_050_CS_040::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetCsBranch_A_050_CS_100
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_SetCsBranch_A_050_CS_100 final
{
public:
	class AMatineeActor*                          bpp__Matinee__pf;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetCsBranch_A_050_CS_100) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetCsBranch_A_050_CS_100");
static_assert(sizeof(BP_FLIB_Event_C_SetCsBranch_A_050_CS_100) == 0x000010, "Wrong size on BP_FLIB_Event_C_SetCsBranch_A_050_CS_100");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_A_050_CS_100, bpp__Matinee__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetCsBranch_A_050_CS_100::bpp__Matinee__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_A_050_CS_100, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetCsBranch_A_050_CS_100::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetCsBranch_A_060_CS_100
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_SetCsBranch_A_060_CS_100 final
{
public:
	class AMatineeActor*                          bpp__Matinee__pf;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetCsBranch_A_060_CS_100) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetCsBranch_A_060_CS_100");
static_assert(sizeof(BP_FLIB_Event_C_SetCsBranch_A_060_CS_100) == 0x000010, "Wrong size on BP_FLIB_Event_C_SetCsBranch_A_060_CS_100");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_A_060_CS_100, bpp__Matinee__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetCsBranch_A_060_CS_100::bpp__Matinee__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_A_060_CS_100, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetCsBranch_A_060_CS_100::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetCsBranch_A_070_CS_050
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_SetCsBranch_A_070_CS_050 final
{
public:
	class AMatineeActor*                          bpp__Matinee__pf;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetCsBranch_A_070_CS_050) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetCsBranch_A_070_CS_050");
static_assert(sizeof(BP_FLIB_Event_C_SetCsBranch_A_070_CS_050) == 0x000010, "Wrong size on BP_FLIB_Event_C_SetCsBranch_A_070_CS_050");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_A_070_CS_050, bpp__Matinee__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetCsBranch_A_070_CS_050::bpp__Matinee__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_A_070_CS_050, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetCsBranch_A_070_CS_050::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetCsBranch_A_150_CS_050
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_SetCsBranch_A_150_CS_050 final
{
public:
	class AMatineeActor*                          bpp__Matinee__pf;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetCsBranch_A_150_CS_050) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetCsBranch_A_150_CS_050");
static_assert(sizeof(BP_FLIB_Event_C_SetCsBranch_A_150_CS_050) == 0x000010, "Wrong size on BP_FLIB_Event_C_SetCsBranch_A_150_CS_050");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_A_150_CS_050, bpp__Matinee__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetCsBranch_A_150_CS_050::bpp__Matinee__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_A_150_CS_050, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetCsBranch_A_150_CS_050::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetCsBranch_B_040_CS_150
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_SetCsBranch_B_040_CS_150 final
{
public:
	class AMatineeActor*                          bpp__Matinee__pf;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetCsBranch_B_040_CS_150) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetCsBranch_B_040_CS_150");
static_assert(sizeof(BP_FLIB_Event_C_SetCsBranch_B_040_CS_150) == 0x000010, "Wrong size on BP_FLIB_Event_C_SetCsBranch_B_040_CS_150");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_B_040_CS_150, bpp__Matinee__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetCsBranch_B_040_CS_150::bpp__Matinee__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_B_040_CS_150, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetCsBranch_B_040_CS_150::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetCsBranch_B_060_CS_005
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_SetCsBranch_B_060_CS_005 final
{
public:
	class AMatineeActor*                          bpp__Matinee__pf;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetCsBranch_B_060_CS_005) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetCsBranch_B_060_CS_005");
static_assert(sizeof(BP_FLIB_Event_C_SetCsBranch_B_060_CS_005) == 0x000010, "Wrong size on BP_FLIB_Event_C_SetCsBranch_B_060_CS_005");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_B_060_CS_005, bpp__Matinee__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetCsBranch_B_060_CS_005::bpp__Matinee__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_B_060_CS_005, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetCsBranch_B_060_CS_005::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetCsBranch_B_060_CS_060
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_SetCsBranch_B_060_CS_060 final
{
public:
	class AMatineeActor*                          bpp__Matinee__pf;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetCsBranch_B_060_CS_060) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetCsBranch_B_060_CS_060");
static_assert(sizeof(BP_FLIB_Event_C_SetCsBranch_B_060_CS_060) == 0x000010, "Wrong size on BP_FLIB_Event_C_SetCsBranch_B_060_CS_060");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_B_060_CS_060, bpp__Matinee__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetCsBranch_B_060_CS_060::bpp__Matinee__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_B_060_CS_060, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetCsBranch_B_060_CS_060::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetCsBranch_B_070_CS_060
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_SetCsBranch_B_070_CS_060 final
{
public:
	class AMatineeActor*                          bpp__Matinee__pf;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetCsBranch_B_070_CS_060) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetCsBranch_B_070_CS_060");
static_assert(sizeof(BP_FLIB_Event_C_SetCsBranch_B_070_CS_060) == 0x000010, "Wrong size on BP_FLIB_Event_C_SetCsBranch_B_070_CS_060");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_B_070_CS_060, bpp__Matinee__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetCsBranch_B_070_CS_060::bpp__Matinee__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_B_070_CS_060, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetCsBranch_B_070_CS_060::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetCsBranch_B_080_CS_080
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_SetCsBranch_B_080_CS_080 final
{
public:
	class AMatineeActor*                          bpp__Matinee__pf;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetCsBranch_B_080_CS_080) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetCsBranch_B_080_CS_080");
static_assert(sizeof(BP_FLIB_Event_C_SetCsBranch_B_080_CS_080) == 0x000010, "Wrong size on BP_FLIB_Event_C_SetCsBranch_B_080_CS_080");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_B_080_CS_080, bpp__Matinee__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetCsBranch_B_080_CS_080::bpp__Matinee__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_B_080_CS_080, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetCsBranch_B_080_CS_080::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetCsBranch_BreathTrackSetting
// 0x0038 (0x0038 - 0x0000)
struct BP_FLIB_Event_C_SetCsBranch_BreathTrackSetting final
{
public:
	class AMatineeActor*                          bpp__Matinee__pf;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                bpp__Character__pf;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 bpp__GroupName__pf__const;                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 bpp__TrackName__pf__const;                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetCsBranch_BreathTrackSetting) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetCsBranch_BreathTrackSetting");
static_assert(sizeof(BP_FLIB_Event_C_SetCsBranch_BreathTrackSetting) == 0x000038, "Wrong size on BP_FLIB_Event_C_SetCsBranch_BreathTrackSetting");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_BreathTrackSetting, bpp__Matinee__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetCsBranch_BreathTrackSetting::bpp__Matinee__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_BreathTrackSetting, bpp__Character__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetCsBranch_BreathTrackSetting::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_BreathTrackSetting, bpp__GroupName__pf__const) == 0x000010, "Member 'BP_FLIB_Event_C_SetCsBranch_BreathTrackSetting::bpp__GroupName__pf__const' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_BreathTrackSetting, bpp__TrackName__pf__const) == 0x000020, "Member 'BP_FLIB_Event_C_SetCsBranch_BreathTrackSetting::bpp__TrackName__pf__const' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_BreathTrackSetting, bpp____WorldContext__pf) == 0x000030, "Member 'BP_FLIB_Event_C_SetCsBranch_BreathTrackSetting::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetCsBranch_C_020_CS_010
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_SetCsBranch_C_020_CS_010 final
{
public:
	class AMatineeActor*                          bpp__Matinee__pf;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetCsBranch_C_020_CS_010) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetCsBranch_C_020_CS_010");
static_assert(sizeof(BP_FLIB_Event_C_SetCsBranch_C_020_CS_010) == 0x000010, "Wrong size on BP_FLIB_Event_C_SetCsBranch_C_020_CS_010");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_C_020_CS_010, bpp__Matinee__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetCsBranch_C_020_CS_010::bpp__Matinee__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_C_020_CS_010, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetCsBranch_C_020_CS_010::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetCsBranch_P_080_CS_010
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_SetCsBranch_P_080_CS_010 final
{
public:
	class AMatineeActor*                          bpp__Matinee__pf;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetCsBranch_P_080_CS_010) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetCsBranch_P_080_CS_010");
static_assert(sizeof(BP_FLIB_Event_C_SetCsBranch_P_080_CS_010) == 0x000010, "Wrong size on BP_FLIB_Event_C_SetCsBranch_P_080_CS_010");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_P_080_CS_010, bpp__Matinee__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetCsBranch_P_080_CS_010::bpp__Matinee__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_P_080_CS_010, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetCsBranch_P_080_CS_010::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetCsBranch_S_040_CS_040
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_SetCsBranch_S_040_CS_040 final
{
public:
	class AMatineeActor*                          bpp__Matinee__pf;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetCsBranch_S_040_CS_040) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetCsBranch_S_040_CS_040");
static_assert(sizeof(BP_FLIB_Event_C_SetCsBranch_S_040_CS_040) == 0x000010, "Wrong size on BP_FLIB_Event_C_SetCsBranch_S_040_CS_040");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_S_040_CS_040, bpp__Matinee__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetCsBranch_S_040_CS_040::bpp__Matinee__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_S_040_CS_040, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetCsBranch_S_040_CS_040::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetCsBranch_S_040_CS_100
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_SetCsBranch_S_040_CS_100 final
{
public:
	class AMatineeActor*                          bpp__Matinee__pf;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetCsBranch_S_040_CS_100) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetCsBranch_S_040_CS_100");
static_assert(sizeof(BP_FLIB_Event_C_SetCsBranch_S_040_CS_100) == 0x000010, "Wrong size on BP_FLIB_Event_C_SetCsBranch_S_040_CS_100");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_S_040_CS_100, bpp__Matinee__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetCsBranch_S_040_CS_100::bpp__Matinee__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranch_S_040_CS_100, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetCsBranch_S_040_CS_100::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetCsBranchBGM_B_080_CS_210
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_SetCsBranchBGM_B_080_CS_210 final
{
public:
	class AMatineeActor*                          bpp__Matinee__pf;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetCsBranchBGM_B_080_CS_210) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetCsBranchBGM_B_080_CS_210");
static_assert(sizeof(BP_FLIB_Event_C_SetCsBranchBGM_B_080_CS_210) == 0x000010, "Wrong size on BP_FLIB_Event_C_SetCsBranchBGM_B_080_CS_210");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranchBGM_B_080_CS_210, bpp__Matinee__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetCsBranchBGM_B_080_CS_210::bpp__Matinee__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsBranchBGM_B_080_CS_210, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetCsBranchBGM_B_080_CS_210::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetCsCoordinate
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Event_C_SetCsCoordinate final
{
public:
	class AJackCharacter*                         bpp__JackCharacter__pf;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__CSID__pf;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                bpp__Character__pf;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Omoide__pf;                                   // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetCsCoordinate) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetCsCoordinate");
static_assert(sizeof(BP_FLIB_Event_C_SetCsCoordinate) == 0x000020, "Wrong size on BP_FLIB_Event_C_SetCsCoordinate");
static_assert(offsetof(BP_FLIB_Event_C_SetCsCoordinate, bpp__JackCharacter__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetCsCoordinate::bpp__JackCharacter__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsCoordinate, bpp__CSID__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetCsCoordinate::bpp__CSID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsCoordinate, bpp__Character__pf) == 0x000010, "Member 'BP_FLIB_Event_C_SetCsCoordinate::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsCoordinate, bpp__Omoide__pf) == 0x000011, "Member 'BP_FLIB_Event_C_SetCsCoordinate::bpp__Omoide__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCsCoordinate, bpp____WorldContext__pf) == 0x000018, "Member 'BP_FLIB_Event_C_SetCsCoordinate::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetCSDefaultCoordinateEX
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_Event_C_SetCSDefaultCoordinateEX final
{
public:
	class AJackCharacter*                         bpp__JackCharacter__pf;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__CSxID__pfT;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJackCharacter                                bpp__Character__pf;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__CoordinateChanged__pf;                        // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Event_C_SetCSDefaultCoordinateEX) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetCSDefaultCoordinateEX");
static_assert(sizeof(BP_FLIB_Event_C_SetCSDefaultCoordinateEX) == 0x000028, "Wrong size on BP_FLIB_Event_C_SetCSDefaultCoordinateEX");
static_assert(offsetof(BP_FLIB_Event_C_SetCSDefaultCoordinateEX, bpp__JackCharacter__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetCSDefaultCoordinateEX::bpp__JackCharacter__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCSDefaultCoordinateEX, bpp__CSxID__pfT) == 0x000008, "Member 'BP_FLIB_Event_C_SetCSDefaultCoordinateEX::bpp__CSxID__pfT' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCSDefaultCoordinateEX, bpp__Character__pf) == 0x000010, "Member 'BP_FLIB_Event_C_SetCSDefaultCoordinateEX::bpp__Character__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCSDefaultCoordinateEX, bpp____WorldContext__pf) == 0x000018, "Member 'BP_FLIB_Event_C_SetCSDefaultCoordinateEX::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCSDefaultCoordinateEX, bpp__CoordinateChanged__pf) == 0x000020, "Member 'BP_FLIB_Event_C_SetCSDefaultCoordinateEX::bpp__CoordinateChanged__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetCutSceneFlag
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Event_C_SetCutSceneFlag final
{
public:
	struct FJackLDT_GameFlagDataCutScene          bpp__CutScene__pf;                                 // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bpp__Flag__pf;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetCutSceneFlag) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetCutSceneFlag");
static_assert(sizeof(BP_FLIB_Event_C_SetCutSceneFlag) == 0x000020, "Wrong size on BP_FLIB_Event_C_SetCutSceneFlag");
static_assert(offsetof(BP_FLIB_Event_C_SetCutSceneFlag, bpp__CutScene__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetCutSceneFlag::bpp__CutScene__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCutSceneFlag, bpp__Flag__pf) == 0x000010, "Member 'BP_FLIB_Event_C_SetCutSceneFlag::bpp__Flag__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetCutSceneFlag, bpp____WorldContext__pf) == 0x000018, "Member 'BP_FLIB_Event_C_SetCutSceneFlag::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetIssyoPartyTalkFlag
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_SetIssyoPartyTalkFlag final
{
public:
	int32                                         bpp__Progress__pf;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetIssyoPartyTalkFlag) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetIssyoPartyTalkFlag");
static_assert(sizeof(BP_FLIB_Event_C_SetIssyoPartyTalkFlag) == 0x000010, "Wrong size on BP_FLIB_Event_C_SetIssyoPartyTalkFlag");
static_assert(offsetof(BP_FLIB_Event_C_SetIssyoPartyTalkFlag, bpp__Progress__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetIssyoPartyTalkFlag::bpp__Progress__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetIssyoPartyTalkFlag, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetIssyoPartyTalkFlag::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetOmoidePlayerWeapon
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Event_C_SetOmoidePlayerWeapon final
{
public:
	class AJackCharacter*                         bpp__CSxPlayer__pfT;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__CSxID__pfT;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetOmoidePlayerWeapon) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetOmoidePlayerWeapon");
static_assert(sizeof(BP_FLIB_Event_C_SetOmoidePlayerWeapon) == 0x000018, "Wrong size on BP_FLIB_Event_C_SetOmoidePlayerWeapon");
static_assert(offsetof(BP_FLIB_Event_C_SetOmoidePlayerWeapon, bpp__CSxPlayer__pfT) == 0x000000, "Member 'BP_FLIB_Event_C_SetOmoidePlayerWeapon::bpp__CSxPlayer__pfT' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetOmoidePlayerWeapon, bpp__CSxID__pfT) == 0x000008, "Member 'BP_FLIB_Event_C_SetOmoidePlayerWeapon::bpp__CSxID__pfT' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetOmoidePlayerWeapon, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Event_C_SetOmoidePlayerWeapon::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetProgressEventState
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Event_C_SetProgressEventState final
{
public:
	struct FJackLDT_GameFlagDataGameProgress      bpp__EventState__pf;                               // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         bpp__State__pf;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetProgressEventState) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetProgressEventState");
static_assert(sizeof(BP_FLIB_Event_C_SetProgressEventState) == 0x000020, "Wrong size on BP_FLIB_Event_C_SetProgressEventState");
static_assert(offsetof(BP_FLIB_Event_C_SetProgressEventState, bpp__EventState__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetProgressEventState::bpp__EventState__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetProgressEventState, bpp__State__pf) == 0x000010, "Member 'BP_FLIB_Event_C_SetProgressEventState::bpp__State__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetProgressEventState, bpp____WorldContext__pf) == 0x000018, "Member 'BP_FLIB_Event_C_SetProgressEventState::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetProgressFlag
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Event_C_SetProgressFlag final
{
public:
	struct FJackLDT_GameFlagDataGameProgress      bpp__GameProgress__pf;                             // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bpp__Flag__pf;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetProgressFlag) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetProgressFlag");
static_assert(sizeof(BP_FLIB_Event_C_SetProgressFlag) == 0x000020, "Wrong size on BP_FLIB_Event_C_SetProgressFlag");
static_assert(offsetof(BP_FLIB_Event_C_SetProgressFlag, bpp__GameProgress__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetProgressFlag::bpp__GameProgress__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetProgressFlag, bpp__Flag__pf) == 0x000010, "Member 'BP_FLIB_Event_C_SetProgressFlag::bpp__Flag__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetProgressFlag, bpp____WorldContext__pf) == 0x000018, "Member 'BP_FLIB_Event_C_SetProgressFlag::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetProgressScenarioNum
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_SetProgressScenarioNum final
{
public:
	ENUM_ScenarioNum                              bpp__ScenarioNum__pf;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetProgressScenarioNum) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetProgressScenarioNum");
static_assert(sizeof(BP_FLIB_Event_C_SetProgressScenarioNum) == 0x000010, "Wrong size on BP_FLIB_Event_C_SetProgressScenarioNum");
static_assert(offsetof(BP_FLIB_Event_C_SetProgressScenarioNum, bpp__ScenarioNum__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetProgressScenarioNum::bpp__ScenarioNum__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetProgressScenarioNum, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetProgressScenarioNum::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetRuraSettingsForAwakening
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Event_C_SetRuraSettingsForAwakening final
{
public:
	class FString                                 bpp__RuraID__pf__const;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetRuraSettingsForAwakening) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetRuraSettingsForAwakening");
static_assert(sizeof(BP_FLIB_Event_C_SetRuraSettingsForAwakening) == 0x000018, "Wrong size on BP_FLIB_Event_C_SetRuraSettingsForAwakening");
static_assert(offsetof(BP_FLIB_Event_C_SetRuraSettingsForAwakening, bpp__RuraID__pf__const) == 0x000000, "Member 'BP_FLIB_Event_C_SetRuraSettingsForAwakening::bpp__RuraID__pf__const' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetRuraSettingsForAwakening, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Event_C_SetRuraSettingsForAwakening::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetSakusenPreset
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Event_C_SetSakusenPreset final
{
public:
	struct FJackLDT_FriendCharacterPreset         bpp__Preset__pf;                                   // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetSakusenPreset) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetSakusenPreset");
static_assert(sizeof(BP_FLIB_Event_C_SetSakusenPreset) == 0x000018, "Wrong size on BP_FLIB_Event_C_SetSakusenPreset");
static_assert(offsetof(BP_FLIB_Event_C_SetSakusenPreset, bpp__Preset__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetSakusenPreset::bpp__Preset__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetSakusenPreset, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Event_C_SetSakusenPreset::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetScenarioClear
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_SetScenarioClear final
{
public:
	ENUM_ScenarioNum                              bpp__ScenarioNum__pf;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetScenarioClear) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetScenarioClear");
static_assert(sizeof(BP_FLIB_Event_C_SetScenarioClear) == 0x000010, "Wrong size on BP_FLIB_Event_C_SetScenarioClear");
static_assert(offsetof(BP_FLIB_Event_C_SetScenarioClear, bpp__ScenarioNum__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetScenarioClear::bpp__ScenarioNum__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetScenarioClear, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetScenarioClear::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetScenarioCount
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Event_C_SetScenarioCount final
{
public:
	struct FJackLDT_GameFlagDataScenario          bpp__Scenario__pf;                                 // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         bpp__Count__pf;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetScenarioCount) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetScenarioCount");
static_assert(sizeof(BP_FLIB_Event_C_SetScenarioCount) == 0x000020, "Wrong size on BP_FLIB_Event_C_SetScenarioCount");
static_assert(offsetof(BP_FLIB_Event_C_SetScenarioCount, bpp__Scenario__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetScenarioCount::bpp__Scenario__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetScenarioCount, bpp__Count__pf) == 0x000010, "Member 'BP_FLIB_Event_C_SetScenarioCount::bpp__Count__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetScenarioCount, bpp____WorldContext__pf) == 0x000018, "Member 'BP_FLIB_Event_C_SetScenarioCount::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetScenarioFlag
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Event_C_SetScenarioFlag final
{
public:
	struct FJackLDT_GameFlagDataScenario          bpp__Scenario__pf;                                 // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bpp__Flag__pf;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetScenarioFlag) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetScenarioFlag");
static_assert(sizeof(BP_FLIB_Event_C_SetScenarioFlag) == 0x000020, "Wrong size on BP_FLIB_Event_C_SetScenarioFlag");
static_assert(offsetof(BP_FLIB_Event_C_SetScenarioFlag, bpp__Scenario__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetScenarioFlag::bpp__Scenario__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetScenarioFlag, bpp__Flag__pf) == 0x000010, "Member 'BP_FLIB_Event_C_SetScenarioFlag::bpp__Flag__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetScenarioFlag, bpp____WorldContext__pf) == 0x000018, "Member 'BP_FLIB_Event_C_SetScenarioFlag::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetScenarioFlagForS020
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Event_C_SetScenarioFlagForS020 final
{
public:
	struct FJackLDT_GameFlagDataScenario          bpp__Scenario__pf;                                 // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bpp__Flag__pf;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetScenarioFlagForS020) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetScenarioFlagForS020");
static_assert(sizeof(BP_FLIB_Event_C_SetScenarioFlagForS020) == 0x000020, "Wrong size on BP_FLIB_Event_C_SetScenarioFlagForS020");
static_assert(offsetof(BP_FLIB_Event_C_SetScenarioFlagForS020, bpp__Scenario__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetScenarioFlagForS020::bpp__Scenario__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetScenarioFlagForS020, bpp__Flag__pf) == 0x000010, "Member 'BP_FLIB_Event_C_SetScenarioFlagForS020::bpp__Flag__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetScenarioFlagForS020, bpp____WorldContext__pf) == 0x000018, "Member 'BP_FLIB_Event_C_SetScenarioFlagForS020::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetScenarioInitialzie
// 0x0008 (0x0008 - 0x0000)
struct BP_FLIB_Event_C_SetScenarioInitialzie final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetScenarioInitialzie) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetScenarioInitialzie");
static_assert(sizeof(BP_FLIB_Event_C_SetScenarioInitialzie) == 0x000008, "Wrong size on BP_FLIB_Event_C_SetScenarioInitialzie");
static_assert(offsetof(BP_FLIB_Event_C_SetScenarioInitialzie, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetScenarioInitialzie::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetSenaCoordinate
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Event_C_SetSenaCoordinate final
{
public:
	class AJackCharacter*                         bpp__JackCharacter__pf;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__CoordinateID__pf;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__CoordinateChanged__pf;                        // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Event_C_SetSenaCoordinate) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetSenaCoordinate");
static_assert(sizeof(BP_FLIB_Event_C_SetSenaCoordinate) == 0x000020, "Wrong size on BP_FLIB_Event_C_SetSenaCoordinate");
static_assert(offsetof(BP_FLIB_Event_C_SetSenaCoordinate, bpp__JackCharacter__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetSenaCoordinate::bpp__JackCharacter__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetSenaCoordinate, bpp__CoordinateID__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetSenaCoordinate::bpp__CoordinateID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetSenaCoordinate, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Event_C_SetSenaCoordinate::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetSenaCoordinate, bpp__CoordinateChanged__pf) == 0x000018, "Member 'BP_FLIB_Event_C_SetSenaCoordinate::bpp__CoordinateChanged__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetSenaHairStyle
// 0x0010 (0x0010 - 0x0000)
struct BP_FLIB_Event_C_SetSenaHairStyle final
{
public:
	EJackSenaHairStyle                            bpp__NewHairStyle__pf;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetSenaHairStyle) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetSenaHairStyle");
static_assert(sizeof(BP_FLIB_Event_C_SetSenaHairStyle) == 0x000010, "Wrong size on BP_FLIB_Event_C_SetSenaHairStyle");
static_assert(offsetof(BP_FLIB_Event_C_SetSenaHairStyle, bpp__NewHairStyle__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetSenaHairStyle::bpp__NewHairStyle__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetSenaHairStyle, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Event_C_SetSenaHairStyle::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetTempWeatherForEventBattleLose
// 0x0008 (0x0008 - 0x0000)
struct BP_FLIB_Event_C_SetTempWeatherForEventBattleLose final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetTempWeatherForEventBattleLose) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetTempWeatherForEventBattleLose");
static_assert(sizeof(BP_FLIB_Event_C_SetTempWeatherForEventBattleLose) == 0x000008, "Wrong size on BP_FLIB_Event_C_SetTempWeatherForEventBattleLose");
static_assert(offsetof(BP_FLIB_Event_C_SetTempWeatherForEventBattleLose, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetTempWeatherForEventBattleLose::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetWhalePowerUp
// 0x0008 (0x0008 - 0x0000)
struct BP_FLIB_Event_C_SetWhalePowerUp final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetWhalePowerUp) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetWhalePowerUp");
static_assert(sizeof(BP_FLIB_Event_C_SetWhalePowerUp) == 0x000008, "Wrong size on BP_FLIB_Event_C_SetWhalePowerUp");
static_assert(offsetof(BP_FLIB_Event_C_SetWhalePowerUp, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetWhalePowerUp::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.Set B Scenario
// 0x0008 (0x0008 - 0x0000)
struct BP_FLIB_Event_C_Set_B_Scenario final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_Set_B_Scenario) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_Set_B_Scenario");
static_assert(sizeof(BP_FLIB_Event_C_Set_B_Scenario) == 0x000008, "Wrong size on BP_FLIB_Event_C_Set_B_Scenario");
static_assert(offsetof(BP_FLIB_Event_C_Set_B_Scenario, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_Set_B_Scenario::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.Set C Scenario
// 0x0008 (0x0008 - 0x0000)
struct BP_FLIB_Event_C_Set_C_Scenario final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_Set_C_Scenario) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_Set_C_Scenario");
static_assert(sizeof(BP_FLIB_Event_C_Set_C_Scenario) == 0x000008, "Wrong size on BP_FLIB_Event_C_Set_C_Scenario");
static_assert(offsetof(BP_FLIB_Event_C_Set_C_Scenario, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_Set_C_Scenario::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.Set S Scenario
// 0x0008 (0x0008 - 0x0000)
struct BP_FLIB_Event_C_Set_S_Scenario final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_Set_S_Scenario) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_Set_S_Scenario");
static_assert(sizeof(BP_FLIB_Event_C_Set_S_Scenario) == 0x000008, "Wrong size on BP_FLIB_Event_C_Set_S_Scenario");
static_assert(offsetof(BP_FLIB_Event_C_Set_S_Scenario, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_Set_S_Scenario::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SetZenkeiNpcLoadReductionHiddenOwnerDistance
// 0x0020 (0x0020 - 0x0000)
struct BP_FLIB_Event_C_SetZenkeiNpcLoadReductionHiddenOwnerDistance final
{
public:
	TArray<class AJackScheduledNPC*>              bpp__NPC__pf;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         bpp__Distance__pf;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SetZenkeiNpcLoadReductionHiddenOwnerDistance) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SetZenkeiNpcLoadReductionHiddenOwnerDistance");
static_assert(sizeof(BP_FLIB_Event_C_SetZenkeiNpcLoadReductionHiddenOwnerDistance) == 0x000020, "Wrong size on BP_FLIB_Event_C_SetZenkeiNpcLoadReductionHiddenOwnerDistance");
static_assert(offsetof(BP_FLIB_Event_C_SetZenkeiNpcLoadReductionHiddenOwnerDistance, bpp__NPC__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SetZenkeiNpcLoadReductionHiddenOwnerDistance::bpp__NPC__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetZenkeiNpcLoadReductionHiddenOwnerDistance, bpp__Distance__pf) == 0x000010, "Member 'BP_FLIB_Event_C_SetZenkeiNpcLoadReductionHiddenOwnerDistance::bpp__Distance__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_SetZenkeiNpcLoadReductionHiddenOwnerDistance, bpp____WorldContext__pf) == 0x000018, "Member 'BP_FLIB_Event_C_SetZenkeiNpcLoadReductionHiddenOwnerDistance::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.SilviaGuestSetupFromTitle
// 0x0008 (0x0008 - 0x0000)
struct BP_FLIB_Event_C_SilviaGuestSetupFromTitle final
{
public:
	class UObject*                                bpp____WorldContext__pf;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_SilviaGuestSetupFromTitle) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_SilviaGuestSetupFromTitle");
static_assert(sizeof(BP_FLIB_Event_C_SilviaGuestSetupFromTitle) == 0x000008, "Wrong size on BP_FLIB_Event_C_SilviaGuestSetupFromTitle");
static_assert(offsetof(BP_FLIB_Event_C_SilviaGuestSetupFromTitle, bpp____WorldContext__pf) == 0x000000, "Member 'BP_FLIB_Event_C_SilviaGuestSetupFromTitle::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Event.BP_FLIB_Event_C.UpdateScenarioFlagIntegrateProcess
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Event_C_UpdateScenarioFlagIntegrateProcess final
{
public:
	struct FJackLDT_GameFlagDataScenario          bpp__ScenarioFlag__pf;                             // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Event_C_UpdateScenarioFlagIntegrateProcess) == 0x000008, "Wrong alignment on BP_FLIB_Event_C_UpdateScenarioFlagIntegrateProcess");
static_assert(sizeof(BP_FLIB_Event_C_UpdateScenarioFlagIntegrateProcess) == 0x000018, "Wrong size on BP_FLIB_Event_C_UpdateScenarioFlagIntegrateProcess");
static_assert(offsetof(BP_FLIB_Event_C_UpdateScenarioFlagIntegrateProcess, bpp__ScenarioFlag__pf) == 0x000000, "Member 'BP_FLIB_Event_C_UpdateScenarioFlagIntegrateProcess::bpp__ScenarioFlag__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Event_C_UpdateScenarioFlagIntegrateProcess, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Event_C_UpdateScenarioFlagIntegrateProcess::bpp____WorldContext__pf' has a wrong offset!");

}

