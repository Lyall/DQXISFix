#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FLIB_Schedule

#include "Basic.hpp"

#include "ENUM_Schedule_Pattern_structs.hpp"


namespace SDK::Params
{

// Function BP_FLIB_Schedule.BP_FLIB_Schedule_C.GetSchedulePattern
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Schedule_C_GetSchedulePattern final
{
public:
	class AJackScheduledNPC*                      bpp__Target__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                bpp____WorldContext__pf;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__PatternID__pf;                                // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_FLIB_Schedule_C_GetSchedulePattern) == 0x000008, "Wrong alignment on BP_FLIB_Schedule_C_GetSchedulePattern");
static_assert(sizeof(BP_FLIB_Schedule_C_GetSchedulePattern) == 0x000018, "Wrong size on BP_FLIB_Schedule_C_GetSchedulePattern");
static_assert(offsetof(BP_FLIB_Schedule_C_GetSchedulePattern, bpp__Target__pf) == 0x000000, "Member 'BP_FLIB_Schedule_C_GetSchedulePattern::bpp__Target__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Schedule_C_GetSchedulePattern, bpp____WorldContext__pf) == 0x000008, "Member 'BP_FLIB_Schedule_C_GetSchedulePattern::bpp____WorldContext__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Schedule_C_GetSchedulePattern, bpp__PatternID__pf) == 0x000010, "Member 'BP_FLIB_Schedule_C_GetSchedulePattern::bpp__PatternID__pf' has a wrong offset!");

// Function BP_FLIB_Schedule.BP_FLIB_Schedule_C.ScheduleEntryStart
// 0x0028 (0x0028 - 0x0000)
struct BP_FLIB_Schedule_C_ScheduleEntryStart final
{
public:
	class AJackScheduledNPC*                      bpp__Target__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__StartHour__pf;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__StartMinute__pf;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__EndHour__pf;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__EndMinute__pf;                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__Pattern__pf;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bLoop__pf;                                    // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDisappear__pf;                               // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReduction__pf;            // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf;      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__EnableForceFixedLocation__pf;                 // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Schedule_C_ScheduleEntryStart) == 0x000008, "Wrong alignment on BP_FLIB_Schedule_C_ScheduleEntryStart");
static_assert(sizeof(BP_FLIB_Schedule_C_ScheduleEntryStart) == 0x000028, "Wrong size on BP_FLIB_Schedule_C_ScheduleEntryStart");
static_assert(offsetof(BP_FLIB_Schedule_C_ScheduleEntryStart, bpp__Target__pf) == 0x000000, "Member 'BP_FLIB_Schedule_C_ScheduleEntryStart::bpp__Target__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Schedule_C_ScheduleEntryStart, bpp__StartHour__pf) == 0x000008, "Member 'BP_FLIB_Schedule_C_ScheduleEntryStart::bpp__StartHour__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Schedule_C_ScheduleEntryStart, bpp__StartMinute__pf) == 0x00000C, "Member 'BP_FLIB_Schedule_C_ScheduleEntryStart::bpp__StartMinute__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Schedule_C_ScheduleEntryStart, bpp__EndHour__pf) == 0x000010, "Member 'BP_FLIB_Schedule_C_ScheduleEntryStart::bpp__EndHour__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Schedule_C_ScheduleEntryStart, bpp__EndMinute__pf) == 0x000014, "Member 'BP_FLIB_Schedule_C_ScheduleEntryStart::bpp__EndMinute__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Schedule_C_ScheduleEntryStart, bpp__Pattern__pf) == 0x000018, "Member 'BP_FLIB_Schedule_C_ScheduleEntryStart::bpp__Pattern__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Schedule_C_ScheduleEntryStart, bpp__bLoop__pf) == 0x000019, "Member 'BP_FLIB_Schedule_C_ScheduleEntryStart::bpp__bLoop__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Schedule_C_ScheduleEntryStart, bpp__bDisappear__pf) == 0x00001A, "Member 'BP_FLIB_Schedule_C_ScheduleEntryStart::bpp__bDisappear__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Schedule_C_ScheduleEntryStart, bpp__bDoNotSkipTickAtLoadReduction__pf) == 0x00001B, "Member 'BP_FLIB_Schedule_C_ScheduleEntryStart::bpp__bDoNotSkipTickAtLoadReduction__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Schedule_C_ScheduleEntryStart, bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf) == 0x00001C, "Member 'BP_FLIB_Schedule_C_ScheduleEntryStart::bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Schedule_C_ScheduleEntryStart, bpp__EnableForceFixedLocation__pf) == 0x00001D, "Member 'BP_FLIB_Schedule_C_ScheduleEntryStart::bpp__EnableForceFixedLocation__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Schedule_C_ScheduleEntryStart, bpp____WorldContext__pf) == 0x000020, "Member 'BP_FLIB_Schedule_C_ScheduleEntryStart::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Schedule.BP_FLIB_Schedule_C.ScheduleEntryStartSimple
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Schedule_C_ScheduleEntryStartSimple final
{
public:
	class AJackScheduledNPC*                      bpp__Target__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__Pattern__pf;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Loop__pf;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__Disappear__pf;                                // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReduction__pf;            // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf;      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__EnableForceFixedLocation__pf;                 // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__IgnoreCollision__pf;                          // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Schedule_C_ScheduleEntryStartSimple) == 0x000008, "Wrong alignment on BP_FLIB_Schedule_C_ScheduleEntryStartSimple");
static_assert(sizeof(BP_FLIB_Schedule_C_ScheduleEntryStartSimple) == 0x000018, "Wrong size on BP_FLIB_Schedule_C_ScheduleEntryStartSimple");
static_assert(offsetof(BP_FLIB_Schedule_C_ScheduleEntryStartSimple, bpp__Target__pf) == 0x000000, "Member 'BP_FLIB_Schedule_C_ScheduleEntryStartSimple::bpp__Target__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Schedule_C_ScheduleEntryStartSimple, bpp__Pattern__pf) == 0x000008, "Member 'BP_FLIB_Schedule_C_ScheduleEntryStartSimple::bpp__Pattern__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Schedule_C_ScheduleEntryStartSimple, bpp__Loop__pf) == 0x000009, "Member 'BP_FLIB_Schedule_C_ScheduleEntryStartSimple::bpp__Loop__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Schedule_C_ScheduleEntryStartSimple, bpp__Disappear__pf) == 0x00000A, "Member 'BP_FLIB_Schedule_C_ScheduleEntryStartSimple::bpp__Disappear__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Schedule_C_ScheduleEntryStartSimple, bpp__bDoNotSkipTickAtLoadReduction__pf) == 0x00000B, "Member 'BP_FLIB_Schedule_C_ScheduleEntryStartSimple::bpp__bDoNotSkipTickAtLoadReduction__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Schedule_C_ScheduleEntryStartSimple, bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf) == 0x00000C, "Member 'BP_FLIB_Schedule_C_ScheduleEntryStartSimple::bpp__bDoNotSkipTickAtLoadReductionDoSkip__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Schedule_C_ScheduleEntryStartSimple, bpp__EnableForceFixedLocation__pf) == 0x00000D, "Member 'BP_FLIB_Schedule_C_ScheduleEntryStartSimple::bpp__EnableForceFixedLocation__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Schedule_C_ScheduleEntryStartSimple, bpp__IgnoreCollision__pf) == 0x00000E, "Member 'BP_FLIB_Schedule_C_ScheduleEntryStartSimple::bpp__IgnoreCollision__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Schedule_C_ScheduleEntryStartSimple, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Schedule_C_ScheduleEntryStartSimple::bpp____WorldContext__pf' has a wrong offset!");

// Function BP_FLIB_Schedule.BP_FLIB_Schedule_C.SetSchedulePattern
// 0x0018 (0x0018 - 0x0000)
struct BP_FLIB_Schedule_C_SetSchedulePattern final
{
public:
	class AJackScheduledNPC*                      bpp__Target__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENUM_Schedule_Pattern                         bpp__NextPatternID__pf;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bUsingStack__pf;                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                bpp____WorldContext__pf;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_FLIB_Schedule_C_SetSchedulePattern) == 0x000008, "Wrong alignment on BP_FLIB_Schedule_C_SetSchedulePattern");
static_assert(sizeof(BP_FLIB_Schedule_C_SetSchedulePattern) == 0x000018, "Wrong size on BP_FLIB_Schedule_C_SetSchedulePattern");
static_assert(offsetof(BP_FLIB_Schedule_C_SetSchedulePattern, bpp__Target__pf) == 0x000000, "Member 'BP_FLIB_Schedule_C_SetSchedulePattern::bpp__Target__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Schedule_C_SetSchedulePattern, bpp__NextPatternID__pf) == 0x000008, "Member 'BP_FLIB_Schedule_C_SetSchedulePattern::bpp__NextPatternID__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Schedule_C_SetSchedulePattern, bpp__bUsingStack__pf) == 0x000009, "Member 'BP_FLIB_Schedule_C_SetSchedulePattern::bpp__bUsingStack__pf' has a wrong offset!");
static_assert(offsetof(BP_FLIB_Schedule_C_SetSchedulePattern, bpp____WorldContext__pf) == 0x000010, "Member 'BP_FLIB_Schedule_C_SetSchedulePattern::bpp____WorldContext__pf' has a wrong offset!");

}

