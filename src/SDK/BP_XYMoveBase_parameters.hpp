#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_XYMoveBase

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_XYMoveBase.BP_XYMoveBase_C.BndEvt__PlaceLeftTrigger_K2Node_ComponentBoundEvent_282_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct BP_XYMoveBase_C_BndEvt__PlaceLeftTrigger_K2Node_ComponentBoundEvent_282_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    bpp__OverlappedComponent__pf;                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 bpp__OtherActor__pf;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    bpp__OtherComp__pf;                                // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__OtherBodyIndex__pf;                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bFromSweep__pf;                               // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             bpp__SweepResult__pf__const;                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_XYMoveBase_C_BndEvt__PlaceLeftTrigger_K2Node_ComponentBoundEvent_282_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_XYMoveBase_C_BndEvt__PlaceLeftTrigger_K2Node_ComponentBoundEvent_282_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_XYMoveBase_C_BndEvt__PlaceLeftTrigger_K2Node_ComponentBoundEvent_282_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on BP_XYMoveBase_C_BndEvt__PlaceLeftTrigger_K2Node_ComponentBoundEvent_282_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_XYMoveBase_C_BndEvt__PlaceLeftTrigger_K2Node_ComponentBoundEvent_282_ComponentBeginOverlapSignature__DelegateSignature, bpp__OverlappedComponent__pf) == 0x000000, "Member 'BP_XYMoveBase_C_BndEvt__PlaceLeftTrigger_K2Node_ComponentBoundEvent_282_ComponentBeginOverlapSignature__DelegateSignature::bpp__OverlappedComponent__pf' has a wrong offset!");
static_assert(offsetof(BP_XYMoveBase_C_BndEvt__PlaceLeftTrigger_K2Node_ComponentBoundEvent_282_ComponentBeginOverlapSignature__DelegateSignature, bpp__OtherActor__pf) == 0x000008, "Member 'BP_XYMoveBase_C_BndEvt__PlaceLeftTrigger_K2Node_ComponentBoundEvent_282_ComponentBeginOverlapSignature__DelegateSignature::bpp__OtherActor__pf' has a wrong offset!");
static_assert(offsetof(BP_XYMoveBase_C_BndEvt__PlaceLeftTrigger_K2Node_ComponentBoundEvent_282_ComponentBeginOverlapSignature__DelegateSignature, bpp__OtherComp__pf) == 0x000010, "Member 'BP_XYMoveBase_C_BndEvt__PlaceLeftTrigger_K2Node_ComponentBoundEvent_282_ComponentBeginOverlapSignature__DelegateSignature::bpp__OtherComp__pf' has a wrong offset!");
static_assert(offsetof(BP_XYMoveBase_C_BndEvt__PlaceLeftTrigger_K2Node_ComponentBoundEvent_282_ComponentBeginOverlapSignature__DelegateSignature, bpp__OtherBodyIndex__pf) == 0x000018, "Member 'BP_XYMoveBase_C_BndEvt__PlaceLeftTrigger_K2Node_ComponentBoundEvent_282_ComponentBeginOverlapSignature__DelegateSignature::bpp__OtherBodyIndex__pf' has a wrong offset!");
static_assert(offsetof(BP_XYMoveBase_C_BndEvt__PlaceLeftTrigger_K2Node_ComponentBoundEvent_282_ComponentBeginOverlapSignature__DelegateSignature, bpp__bFromSweep__pf) == 0x00001C, "Member 'BP_XYMoveBase_C_BndEvt__PlaceLeftTrigger_K2Node_ComponentBoundEvent_282_ComponentBeginOverlapSignature__DelegateSignature::bpp__bFromSweep__pf' has a wrong offset!");
static_assert(offsetof(BP_XYMoveBase_C_BndEvt__PlaceLeftTrigger_K2Node_ComponentBoundEvent_282_ComponentBeginOverlapSignature__DelegateSignature, bpp__SweepResult__pf__const) == 0x000020, "Member 'BP_XYMoveBase_C_BndEvt__PlaceLeftTrigger_K2Node_ComponentBoundEvent_282_ComponentBeginOverlapSignature__DelegateSignature::bpp__SweepResult__pf__const' has a wrong offset!");

// Function BP_XYMoveBase.BP_XYMoveBase_C.BndEvt__PlaceRightTrigger_K2Node_ComponentBoundEvent_291_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct BP_XYMoveBase_C_BndEvt__PlaceRightTrigger_K2Node_ComponentBoundEvent_291_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    bpp__OverlappedComponent__pf;                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 bpp__OtherActor__pf;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    bpp__OtherComp__pf;                                // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bpp__OtherBodyIndex__pf;                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bFromSweep__pf;                               // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             bpp__SweepResult__pf__const;                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_XYMoveBase_C_BndEvt__PlaceRightTrigger_K2Node_ComponentBoundEvent_291_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_XYMoveBase_C_BndEvt__PlaceRightTrigger_K2Node_ComponentBoundEvent_291_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_XYMoveBase_C_BndEvt__PlaceRightTrigger_K2Node_ComponentBoundEvent_291_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on BP_XYMoveBase_C_BndEvt__PlaceRightTrigger_K2Node_ComponentBoundEvent_291_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_XYMoveBase_C_BndEvt__PlaceRightTrigger_K2Node_ComponentBoundEvent_291_ComponentBeginOverlapSignature__DelegateSignature, bpp__OverlappedComponent__pf) == 0x000000, "Member 'BP_XYMoveBase_C_BndEvt__PlaceRightTrigger_K2Node_ComponentBoundEvent_291_ComponentBeginOverlapSignature__DelegateSignature::bpp__OverlappedComponent__pf' has a wrong offset!");
static_assert(offsetof(BP_XYMoveBase_C_BndEvt__PlaceRightTrigger_K2Node_ComponentBoundEvent_291_ComponentBeginOverlapSignature__DelegateSignature, bpp__OtherActor__pf) == 0x000008, "Member 'BP_XYMoveBase_C_BndEvt__PlaceRightTrigger_K2Node_ComponentBoundEvent_291_ComponentBeginOverlapSignature__DelegateSignature::bpp__OtherActor__pf' has a wrong offset!");
static_assert(offsetof(BP_XYMoveBase_C_BndEvt__PlaceRightTrigger_K2Node_ComponentBoundEvent_291_ComponentBeginOverlapSignature__DelegateSignature, bpp__OtherComp__pf) == 0x000010, "Member 'BP_XYMoveBase_C_BndEvt__PlaceRightTrigger_K2Node_ComponentBoundEvent_291_ComponentBeginOverlapSignature__DelegateSignature::bpp__OtherComp__pf' has a wrong offset!");
static_assert(offsetof(BP_XYMoveBase_C_BndEvt__PlaceRightTrigger_K2Node_ComponentBoundEvent_291_ComponentBeginOverlapSignature__DelegateSignature, bpp__OtherBodyIndex__pf) == 0x000018, "Member 'BP_XYMoveBase_C_BndEvt__PlaceRightTrigger_K2Node_ComponentBoundEvent_291_ComponentBeginOverlapSignature__DelegateSignature::bpp__OtherBodyIndex__pf' has a wrong offset!");
static_assert(offsetof(BP_XYMoveBase_C_BndEvt__PlaceRightTrigger_K2Node_ComponentBoundEvent_291_ComponentBeginOverlapSignature__DelegateSignature, bpp__bFromSweep__pf) == 0x00001C, "Member 'BP_XYMoveBase_C_BndEvt__PlaceRightTrigger_K2Node_ComponentBoundEvent_291_ComponentBeginOverlapSignature__DelegateSignature::bpp__bFromSweep__pf' has a wrong offset!");
static_assert(offsetof(BP_XYMoveBase_C_BndEvt__PlaceRightTrigger_K2Node_ComponentBoundEvent_291_ComponentBeginOverlapSignature__DelegateSignature, bpp__SweepResult__pf__const) == 0x000020, "Member 'BP_XYMoveBase_C_BndEvt__PlaceRightTrigger_K2Node_ComponentBoundEvent_291_ComponentBeginOverlapSignature__DelegateSignature::bpp__SweepResult__pf__const' has a wrong offset!");

// Function BP_XYMoveBase.BP_XYMoveBase_C.CustomEvent_0
// 0x0010 (0x0010 - 0x0000)
struct BP_XYMoveBase_C_CustomEvent_0 final
{
public:
	class AActor*                                 bpp__PlayerActor__pf;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 bpp__ControlActor__pf;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_XYMoveBase_C_CustomEvent_0) == 0x000008, "Wrong alignment on BP_XYMoveBase_C_CustomEvent_0");
static_assert(sizeof(BP_XYMoveBase_C_CustomEvent_0) == 0x000010, "Wrong size on BP_XYMoveBase_C_CustomEvent_0");
static_assert(offsetof(BP_XYMoveBase_C_CustomEvent_0, bpp__PlayerActor__pf) == 0x000000, "Member 'BP_XYMoveBase_C_CustomEvent_0::bpp__PlayerActor__pf' has a wrong offset!");
static_assert(offsetof(BP_XYMoveBase_C_CustomEvent_0, bpp__ControlActor__pf) == 0x000008, "Member 'BP_XYMoveBase_C_CustomEvent_0::bpp__ControlActor__pf' has a wrong offset!");

// Function BP_XYMoveBase.BP_XYMoveBase_C.CustomEvent_1
// 0x0010 (0x0010 - 0x0000)
struct BP_XYMoveBase_C_CustomEvent_1 final
{
public:
	class AActor*                                 bpp__PlayerActor__pf;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 bpp__ControlActor__pf;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_XYMoveBase_C_CustomEvent_1) == 0x000008, "Wrong alignment on BP_XYMoveBase_C_CustomEvent_1");
static_assert(sizeof(BP_XYMoveBase_C_CustomEvent_1) == 0x000010, "Wrong size on BP_XYMoveBase_C_CustomEvent_1");
static_assert(offsetof(BP_XYMoveBase_C_CustomEvent_1, bpp__PlayerActor__pf) == 0x000000, "Member 'BP_XYMoveBase_C_CustomEvent_1::bpp__PlayerActor__pf' has a wrong offset!");
static_assert(offsetof(BP_XYMoveBase_C_CustomEvent_1, bpp__ControlActor__pf) == 0x000008, "Member 'BP_XYMoveBase_C_CustomEvent_1::bpp__ControlActor__pf' has a wrong offset!");

// Function BP_XYMoveBase.BP_XYMoveBase_C.ExecuteUbergraph_BP_XYMoveBase_1
// 0x0004 (0x0004 - 0x0000)
struct BP_XYMoveBase_C_ExecuteUbergraph_BP_XYMoveBase_1 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_XYMoveBase_C_ExecuteUbergraph_BP_XYMoveBase_1) == 0x000004, "Wrong alignment on BP_XYMoveBase_C_ExecuteUbergraph_BP_XYMoveBase_1");
static_assert(sizeof(BP_XYMoveBase_C_ExecuteUbergraph_BP_XYMoveBase_1) == 0x000004, "Wrong size on BP_XYMoveBase_C_ExecuteUbergraph_BP_XYMoveBase_1");
static_assert(offsetof(BP_XYMoveBase_C_ExecuteUbergraph_BP_XYMoveBase_1, bpp__EntryPoint__pf) == 0x000000, "Member 'BP_XYMoveBase_C_ExecuteUbergraph_BP_XYMoveBase_1::bpp__EntryPoint__pf' has a wrong offset!");

// Function BP_XYMoveBase.BP_XYMoveBase_C.ExecuteUbergraph_BP_XYMoveBase_2
// 0x0004 (0x0004 - 0x0000)
struct BP_XYMoveBase_C_ExecuteUbergraph_BP_XYMoveBase_2 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_XYMoveBase_C_ExecuteUbergraph_BP_XYMoveBase_2) == 0x000004, "Wrong alignment on BP_XYMoveBase_C_ExecuteUbergraph_BP_XYMoveBase_2");
static_assert(sizeof(BP_XYMoveBase_C_ExecuteUbergraph_BP_XYMoveBase_2) == 0x000004, "Wrong size on BP_XYMoveBase_C_ExecuteUbergraph_BP_XYMoveBase_2");
static_assert(offsetof(BP_XYMoveBase_C_ExecuteUbergraph_BP_XYMoveBase_2, bpp__EntryPoint__pf) == 0x000000, "Member 'BP_XYMoveBase_C_ExecuteUbergraph_BP_XYMoveBase_2::bpp__EntryPoint__pf' has a wrong offset!");

// Function BP_XYMoveBase.BP_XYMoveBase_C.GetPlaceLeftInAnim
// 0x0008 (0x0008 - 0x0000)
struct BP_XYMoveBase_C_GetPlaceLeftInAnim final
{
public:
	class UAnimMontage*                           bpp__Montage__pf;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_XYMoveBase_C_GetPlaceLeftInAnim) == 0x000008, "Wrong alignment on BP_XYMoveBase_C_GetPlaceLeftInAnim");
static_assert(sizeof(BP_XYMoveBase_C_GetPlaceLeftInAnim) == 0x000008, "Wrong size on BP_XYMoveBase_C_GetPlaceLeftInAnim");
static_assert(offsetof(BP_XYMoveBase_C_GetPlaceLeftInAnim, bpp__Montage__pf) == 0x000000, "Member 'BP_XYMoveBase_C_GetPlaceLeftInAnim::bpp__Montage__pf' has a wrong offset!");

// Function BP_XYMoveBase.BP_XYMoveBase_C.GetPlaceLeftOutAnim
// 0x0008 (0x0008 - 0x0000)
struct BP_XYMoveBase_C_GetPlaceLeftOutAnim final
{
public:
	class UAnimMontage*                           bpp__Montage__pf;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_XYMoveBase_C_GetPlaceLeftOutAnim) == 0x000008, "Wrong alignment on BP_XYMoveBase_C_GetPlaceLeftOutAnim");
static_assert(sizeof(BP_XYMoveBase_C_GetPlaceLeftOutAnim) == 0x000008, "Wrong size on BP_XYMoveBase_C_GetPlaceLeftOutAnim");
static_assert(offsetof(BP_XYMoveBase_C_GetPlaceLeftOutAnim, bpp__Montage__pf) == 0x000000, "Member 'BP_XYMoveBase_C_GetPlaceLeftOutAnim::bpp__Montage__pf' has a wrong offset!");

// Function BP_XYMoveBase.BP_XYMoveBase_C.GetPlaceRightInAnim
// 0x0008 (0x0008 - 0x0000)
struct BP_XYMoveBase_C_GetPlaceRightInAnim final
{
public:
	class UAnimMontage*                           bpp__Montage__pf;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_XYMoveBase_C_GetPlaceRightInAnim) == 0x000008, "Wrong alignment on BP_XYMoveBase_C_GetPlaceRightInAnim");
static_assert(sizeof(BP_XYMoveBase_C_GetPlaceRightInAnim) == 0x000008, "Wrong size on BP_XYMoveBase_C_GetPlaceRightInAnim");
static_assert(offsetof(BP_XYMoveBase_C_GetPlaceRightInAnim, bpp__Montage__pf) == 0x000000, "Member 'BP_XYMoveBase_C_GetPlaceRightInAnim::bpp__Montage__pf' has a wrong offset!");

// Function BP_XYMoveBase.BP_XYMoveBase_C.GetPlaceRightOutAnim
// 0x0008 (0x0008 - 0x0000)
struct BP_XYMoveBase_C_GetPlaceRightOutAnim final
{
public:
	class UAnimMontage*                           bpp__Montage__pf;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_XYMoveBase_C_GetPlaceRightOutAnim) == 0x000008, "Wrong alignment on BP_XYMoveBase_C_GetPlaceRightOutAnim");
static_assert(sizeof(BP_XYMoveBase_C_GetPlaceRightOutAnim) == 0x000008, "Wrong size on BP_XYMoveBase_C_GetPlaceRightOutAnim");
static_assert(offsetof(BP_XYMoveBase_C_GetPlaceRightOutAnim, bpp__Montage__pf) == 0x000000, "Member 'BP_XYMoveBase_C_GetPlaceRightOutAnim::bpp__Montage__pf' has a wrong offset!");

// Function BP_XYMoveBase.BP_XYMoveBase_C.OnArrivedPoint
// 0x0010 (0x0010 - 0x0000)
struct BP_XYMoveBase_C_OnArrivedPoint final
{
public:
	class USceneComponent*                        bpp__Arrow__pf;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           bpp__AnimMontage__pf;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_XYMoveBase_C_OnArrivedPoint) == 0x000008, "Wrong alignment on BP_XYMoveBase_C_OnArrivedPoint");
static_assert(sizeof(BP_XYMoveBase_C_OnArrivedPoint) == 0x000010, "Wrong size on BP_XYMoveBase_C_OnArrivedPoint");
static_assert(offsetof(BP_XYMoveBase_C_OnArrivedPoint, bpp__Arrow__pf) == 0x000000, "Member 'BP_XYMoveBase_C_OnArrivedPoint::bpp__Arrow__pf' has a wrong offset!");
static_assert(offsetof(BP_XYMoveBase_C_OnArrivedPoint, bpp__AnimMontage__pf) == 0x000008, "Member 'BP_XYMoveBase_C_OnArrivedPoint::bpp__AnimMontage__pf' has a wrong offset!");

// Function BP_XYMoveBase.BP_XYMoveBase_C.OnBeginInteract
// 0x0020 (0x0020 - 0x0000)
struct BP_XYMoveBase_C_OnBeginInteract final
{
public:
	class AActor*                                 bpp__Actor__pf;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        bpp__Arrow__pf;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        bpp__RopeEnd__pf;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__OffsetHeight__pf;                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_XYMoveBase_C_OnBeginInteract) == 0x000008, "Wrong alignment on BP_XYMoveBase_C_OnBeginInteract");
static_assert(sizeof(BP_XYMoveBase_C_OnBeginInteract) == 0x000020, "Wrong size on BP_XYMoveBase_C_OnBeginInteract");
static_assert(offsetof(BP_XYMoveBase_C_OnBeginInteract, bpp__Actor__pf) == 0x000000, "Member 'BP_XYMoveBase_C_OnBeginInteract::bpp__Actor__pf' has a wrong offset!");
static_assert(offsetof(BP_XYMoveBase_C_OnBeginInteract, bpp__Arrow__pf) == 0x000008, "Member 'BP_XYMoveBase_C_OnBeginInteract::bpp__Arrow__pf' has a wrong offset!");
static_assert(offsetof(BP_XYMoveBase_C_OnBeginInteract, bpp__RopeEnd__pf) == 0x000010, "Member 'BP_XYMoveBase_C_OnBeginInteract::bpp__RopeEnd__pf' has a wrong offset!");
static_assert(offsetof(BP_XYMoveBase_C_OnBeginInteract, bpp__OffsetHeight__pf) == 0x000018, "Member 'BP_XYMoveBase_C_OnBeginInteract::bpp__OffsetHeight__pf' has a wrong offset!");

// Function BP_XYMoveBase.BP_XYMoveBase_C.OnPlayEndAnim
// 0x0008 (0x0008 - 0x0000)
struct BP_XYMoveBase_C_OnPlayEndAnim final
{
public:
	class AActor*                                 bpp__InteractActor__pf;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_XYMoveBase_C_OnPlayEndAnim) == 0x000008, "Wrong alignment on BP_XYMoveBase_C_OnPlayEndAnim");
static_assert(sizeof(BP_XYMoveBase_C_OnPlayEndAnim) == 0x000008, "Wrong size on BP_XYMoveBase_C_OnPlayEndAnim");
static_assert(offsetof(BP_XYMoveBase_C_OnPlayEndAnim, bpp__InteractActor__pf) == 0x000000, "Member 'BP_XYMoveBase_C_OnPlayEndAnim::bpp__InteractActor__pf' has a wrong offset!");

// Function BP_XYMoveBase.BP_XYMoveBase_C.OnPlayStartAnim
// 0x0008 (0x0008 - 0x0000)
struct BP_XYMoveBase_C_OnPlayStartAnim final
{
public:
	class AActor*                                 bpp__InteractxActor__pfT;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_XYMoveBase_C_OnPlayStartAnim) == 0x000008, "Wrong alignment on BP_XYMoveBase_C_OnPlayStartAnim");
static_assert(sizeof(BP_XYMoveBase_C_OnPlayStartAnim) == 0x000008, "Wrong size on BP_XYMoveBase_C_OnPlayStartAnim");
static_assert(offsetof(BP_XYMoveBase_C_OnPlayStartAnim, bpp__InteractxActor__pfT) == 0x000000, "Member 'BP_XYMoveBase_C_OnPlayStartAnim::bpp__InteractxActor__pfT' has a wrong offset!");

// Function BP_XYMoveBase.BP_XYMoveBase_C.OverlapLeft
// 0x0008 (0x0008 - 0x0000)
struct BP_XYMoveBase_C_OverlapLeft final
{
public:
	class AActor*                                 bpp__OtherxActor__pfT;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_XYMoveBase_C_OverlapLeft) == 0x000008, "Wrong alignment on BP_XYMoveBase_C_OverlapLeft");
static_assert(sizeof(BP_XYMoveBase_C_OverlapLeft) == 0x000008, "Wrong size on BP_XYMoveBase_C_OverlapLeft");
static_assert(offsetof(BP_XYMoveBase_C_OverlapLeft, bpp__OtherxActor__pfT) == 0x000000, "Member 'BP_XYMoveBase_C_OverlapLeft::bpp__OtherxActor__pfT' has a wrong offset!");

// Function BP_XYMoveBase.BP_XYMoveBase_C.OverlapRight
// 0x0008 (0x0008 - 0x0000)
struct BP_XYMoveBase_C_OverlapRight final
{
public:
	class AActor*                                 bpp__OtherxActor__pfT;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_XYMoveBase_C_OverlapRight) == 0x000008, "Wrong alignment on BP_XYMoveBase_C_OverlapRight");
static_assert(sizeof(BP_XYMoveBase_C_OverlapRight) == 0x000008, "Wrong size on BP_XYMoveBase_C_OverlapRight");
static_assert(offsetof(BP_XYMoveBase_C_OverlapRight, bpp__OtherxActor__pfT) == 0x000000, "Member 'BP_XYMoveBase_C_OverlapRight::bpp__OtherxActor__pfT' has a wrong offset!");

// Function BP_XYMoveBase.BP_XYMoveBase_C.PlayRiderAnim
// 0x0008 (0x0008 - 0x0000)
struct BP_XYMoveBase_C_PlayRiderAnim final
{
public:
	class UAnimMontage*                           bpp__AnimMontage__pf;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_XYMoveBase_C_PlayRiderAnim) == 0x000008, "Wrong alignment on BP_XYMoveBase_C_PlayRiderAnim");
static_assert(sizeof(BP_XYMoveBase_C_PlayRiderAnim) == 0x000008, "Wrong size on BP_XYMoveBase_C_PlayRiderAnim");
static_assert(offsetof(BP_XYMoveBase_C_PlayRiderAnim, bpp__AnimMontage__pf) == 0x000000, "Member 'BP_XYMoveBase_C_PlayRiderAnim::bpp__AnimMontage__pf' has a wrong offset!");

// Function BP_XYMoveBase.BP_XYMoveBase_C.SetCapsuleControl
// 0x0010 (0x0010 - 0x0000)
struct BP_XYMoveBase_C_SetCapsuleControl final
{
public:
	bool                                          bpp__IsForceOverlap__pf;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             bpp__Charcter__pf;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_XYMoveBase_C_SetCapsuleControl) == 0x000008, "Wrong alignment on BP_XYMoveBase_C_SetCapsuleControl");
static_assert(sizeof(BP_XYMoveBase_C_SetCapsuleControl) == 0x000010, "Wrong size on BP_XYMoveBase_C_SetCapsuleControl");
static_assert(offsetof(BP_XYMoveBase_C_SetCapsuleControl, bpp__IsForceOverlap__pf) == 0x000000, "Member 'BP_XYMoveBase_C_SetCapsuleControl::bpp__IsForceOverlap__pf' has a wrong offset!");
static_assert(offsetof(BP_XYMoveBase_C_SetCapsuleControl, bpp__Charcter__pf) == 0x000008, "Member 'BP_XYMoveBase_C_SetCapsuleControl::bpp__Charcter__pf' has a wrong offset!");

// Function BP_XYMoveBase.BP_XYMoveBase_C.SnapToClosetPoint
// 0x0008 (0x0008 - 0x0000)
struct BP_XYMoveBase_C_SnapToClosetPoint final
{
public:
	class UJackPlayableSplineMovementMode*        bpp__JackPlayableSplineMovementMode__pf;           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_XYMoveBase_C_SnapToClosetPoint) == 0x000008, "Wrong alignment on BP_XYMoveBase_C_SnapToClosetPoint");
static_assert(sizeof(BP_XYMoveBase_C_SnapToClosetPoint) == 0x000008, "Wrong size on BP_XYMoveBase_C_SnapToClosetPoint");
static_assert(offsetof(BP_XYMoveBase_C_SnapToClosetPoint, bpp__JackPlayableSplineMovementMode__pf) == 0x000000, "Member 'BP_XYMoveBase_C_SnapToClosetPoint::bpp__JackPlayableSplineMovementMode__pf' has a wrong offset!");

}

