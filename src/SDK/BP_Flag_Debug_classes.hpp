#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Flag_Debug

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "JackGame_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Flag_Debug.BP_Flag_Debug_C
// 0x0090 (0x0428 - 0x0398)
class ABP_Flag_Debug_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0398(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EJackGameFlagCategory                         Category;                                          // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A9[0x7];                                      // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FlagName;                                          // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJackGameFlagDataType                         DataType;                                          // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9[0x3];                                      // 0x03B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentX;                                          // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentY;                                          // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxCount;                                          // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Episode;                                           // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EpisodeMax;                                        // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         EpisodeName;                                       // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FLinearColor                           MessageColor;                                      // 0x03E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Current;                                           // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FC[0x4];                                      // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	EJackGameFlagDataType                         CurrentDataType;                                   // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_411[0x7];                                      // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CurrentFlagName;                                   // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsButtonRightOn;                                   // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsButtonLeftOn;                                    // 0x0421(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_422[0x2];                                      // 0x0422(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BaseY;                                             // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Flag_Debug(int32 EntryPoint);
	void ButtonLeftOn();
	void ButtonRightOn();
	void ReceiveTick(float DeltaSeconds);
	void InpActEvt_Gamepad_DPad_Left_K2Node_InputKeyEvent_10(const struct FKey& Key);
	void InpActEvt_Gamepad_DPad_Right_K2Node_InputKeyEvent_11(const struct FKey& Key);
	void InpActEvt_Gamepad_DPad_Up_K2Node_InputKeyEvent_12(const struct FKey& Key);
	void InpActEvt_Gamepad_DPad_Down_K2Node_InputKeyEvent_13(const struct FKey& Key);
	void InpActEvt_Gamepad_FaceButton_Left_K2Node_InputKeyEvent_14(const struct FKey& Key);
	void InpActEvt_Gamepad_FaceButton_Left_K2Node_InputKeyEvent_15(const struct FKey& Key);
	void InpActEvt_Gamepad_FaceButton_Right_K2Node_InputKeyEvent_16(const struct FKey& Key);
	void InpActEvt_Gamepad_FaceButton_Right_K2Node_InputKeyEvent_17(const struct FKey& Key);
	void InpActEvt_Gamepad_RightShoulder_K2Node_InputKeyEvent_18(const struct FKey& Key);
	void InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_19(const struct FKey& Key);
	void UserConstructionScript();
	void DebugModeSwitch(bool Start);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Flag_Debug_C">();
	}
	static class ABP_Flag_Debug_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Flag_Debug_C>();
	}
};
static_assert(alignof(ABP_Flag_Debug_C) == 0x000008, "Wrong alignment on ABP_Flag_Debug_C");
static_assert(sizeof(ABP_Flag_Debug_C) == 0x000428, "Wrong size on ABP_Flag_Debug_C");
static_assert(offsetof(ABP_Flag_Debug_C, UberGraphFrame) == 0x000398, "Member 'ABP_Flag_Debug_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Flag_Debug_C, DefaultSceneRoot) == 0x0003A0, "Member 'ABP_Flag_Debug_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Flag_Debug_C, Category) == 0x0003A8, "Member 'ABP_Flag_Debug_C::Category' has a wrong offset!");
static_assert(offsetof(ABP_Flag_Debug_C, FlagName) == 0x0003B0, "Member 'ABP_Flag_Debug_C::FlagName' has a wrong offset!");
static_assert(offsetof(ABP_Flag_Debug_C, DataType) == 0x0003B8, "Member 'ABP_Flag_Debug_C::DataType' has a wrong offset!");
static_assert(offsetof(ABP_Flag_Debug_C, CurrentX) == 0x0003BC, "Member 'ABP_Flag_Debug_C::CurrentX' has a wrong offset!");
static_assert(offsetof(ABP_Flag_Debug_C, CurrentY) == 0x0003C0, "Member 'ABP_Flag_Debug_C::CurrentY' has a wrong offset!");
static_assert(offsetof(ABP_Flag_Debug_C, Count) == 0x0003C4, "Member 'ABP_Flag_Debug_C::Count' has a wrong offset!");
static_assert(offsetof(ABP_Flag_Debug_C, MaxCount) == 0x0003C8, "Member 'ABP_Flag_Debug_C::MaxCount' has a wrong offset!");
static_assert(offsetof(ABP_Flag_Debug_C, Episode) == 0x0003CC, "Member 'ABP_Flag_Debug_C::Episode' has a wrong offset!");
static_assert(offsetof(ABP_Flag_Debug_C, EpisodeMax) == 0x0003D0, "Member 'ABP_Flag_Debug_C::EpisodeMax' has a wrong offset!");
static_assert(offsetof(ABP_Flag_Debug_C, EpisodeName) == 0x0003D8, "Member 'ABP_Flag_Debug_C::EpisodeName' has a wrong offset!");
static_assert(offsetof(ABP_Flag_Debug_C, MessageColor) == 0x0003E8, "Member 'ABP_Flag_Debug_C::MessageColor' has a wrong offset!");
static_assert(offsetof(ABP_Flag_Debug_C, Current) == 0x0003F8, "Member 'ABP_Flag_Debug_C::Current' has a wrong offset!");
static_assert(offsetof(ABP_Flag_Debug_C, Message) == 0x000400, "Member 'ABP_Flag_Debug_C::Message' has a wrong offset!");
static_assert(offsetof(ABP_Flag_Debug_C, CurrentDataType) == 0x000410, "Member 'ABP_Flag_Debug_C::CurrentDataType' has a wrong offset!");
static_assert(offsetof(ABP_Flag_Debug_C, CurrentFlagName) == 0x000418, "Member 'ABP_Flag_Debug_C::CurrentFlagName' has a wrong offset!");
static_assert(offsetof(ABP_Flag_Debug_C, IsButtonRightOn) == 0x000420, "Member 'ABP_Flag_Debug_C::IsButtonRightOn' has a wrong offset!");
static_assert(offsetof(ABP_Flag_Debug_C, IsButtonLeftOn) == 0x000421, "Member 'ABP_Flag_Debug_C::IsButtonLeftOn' has a wrong offset!");
static_assert(offsetof(ABP_Flag_Debug_C, BaseY) == 0x000424, "Member 'ABP_Flag_Debug_C::BaseY' has a wrong offset!");

}

