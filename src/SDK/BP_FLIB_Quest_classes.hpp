#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FLIB_Quest

#include "Basic.hpp"

#include "ENUM_LoadScreenType_structs.hpp"
#include "Engine_classes.hpp"
#include "JackGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FLIB_Quest.BP_FLIB_Quest_C
// 0x0000 (0x0038 - 0x0038)
class UBP_FLIB_Quest_C final : public UBlueprintFunctionLibrary
{
public:
	static void CheckQuestComplete(const struct FJackLDT_QuestTable& Quest, class UObject* __WorldContext, bool* Completed, class FName* RetID);
	static void CheckEquipment(class FName CharacterID, TArray<class FName>& ItemIds, class UObject* __WorldContext, bool* Result);
	static void CheckParameter(class FName CharacterID, class FName ParamID, class FName Value, class UObject* __WorldContext, bool* Result);
	static void SetQuestFlag(class FName QuestId, EJackProgression Flag, class UObject* __WorldContext, struct FJackDataTableQuest* QuestData);
	static void CheckQuestFlag(class FName QuestId, EJackProgression Flag, class UObject* __WorldContext, bool* Ret);
	static void CheckQuestFlagCore(class FName QuestFlag, EJackProgression Flag, class UObject* __WorldContext, bool* Ret);
	static void GetQuestFlag(class FName QuestFlag, class UObject* __WorldContext, EJackProgression* Flag);
	static void SetQuestFlagToComplete(class FName SetQuestID, class UObject* __WorldContext);
	static void CheckQuestFlagOver(class FName QuestId, EJackProgression Flag, class UObject* __WorldContext, bool* Ret);
	static void CalcCharacterNameToID(class FName CharacterName, class UObject* __WorldContext, EJackCharacter* ID);
	static void GetQuestIDToQuestFlag(class FName QuestId, class UObject* __WorldContext, bool* Success, class FName* QuestFlag, struct FJackDataTableQuest* QuestData);
	static void CheckCoordinate(class FName CharacterID, TArray<class FName>& CoordinateIDs, class UObject* __WorldContext, bool* Result);
	static void AddProgressBattleQuestID(class FName QuestId, class UObject* __WorldContext);
	static void ClearProgressBattleQuestID(class FName QuestId, class UObject* __WorldContext);
	static void CheckProgressBattleQuest(class UObject* __WorldContext, TArray<class FString>* QuestName, TArray<class FName>* GetItemId, TArray<class FName>* QuestId);
	static void DebugQuestStart(class FName QuestId, class UObject* __WorldContext);
	static void CheckToubatuMonster(class FName MonsterID_1, class FName MonsterID_2, class FName ActionID, class FName RenkeiID, class UObject* __WorldContext, bool* Ret);
	static void CheckProgressBattleQuestDropItem(class FName Rate, class UObject* __WorldContext, bool* Ret);
	static void CheckQuestFlagInnerRange(class FName QuestId, EJackProgression LowFlag, EJackProgression HighFlag, class UObject* __WorldContext, bool* Ret);
	static void AllActorChangeQuestProgressFlag(class UObject* __WorldContext);
	static void CheckQuestSerifuAfterRemoteEvent(class FName ProcName, class UObject* __WorldContext);
	static void IsValidQuest(class FName QuestId, class UObject* __WorldContext, bool* Valid);
	static void CheckEquipmentEx(class UObject* __WorldContext);
	static void CheckMartinaCoordinate(class UObject* __WorldContext, bool* Result);
	static void IsValidYottiAikotobaFlag(const struct FJackLDT_QuestTable& QuestId, class UObject* __WorldContext, bool* Valid, class FName* Flag);
	static void GetYottiAikotobaAllFlags(class UObject* __WorldContext, TArray<class FName>* Flags_0);
	static void IsYottiAikotobaAllClear(class UObject* __WorldContext, bool* AllClear);
	static void SetAikotobaYottiSchedule(class AJackScheduledNPC* Yotti, class AActor* Goal, class UObject* __WorldContext);
	static void CallQuestBegin(const struct FJackLDT_QuestTable& QuestId, class UObject* __WorldContext);
	static void ReturnFromYottiMuraProcess(bool Dead, class UObject* __WorldContext, bool* StartReturnEvent);
	static void GetKakosakuQuestClearAltarCount(class UObject* __WorldContext, int32* Count);
	static void KakosakuQuestAltarAchievement(class UObject* __WorldContext);
	static void CheckQuestEndCount(TArray<class FName>& Flags_0, class UObject* __WorldContext, int32* Count, bool* AllClear);
	static void GetAikotobaYottiFirstTextID(const struct FJackLDT_QuestTable& QuestId, class UObject* __WorldContext, class FName* TextID, bool* LookAt);
	static void KakosakuQuestListOpen(class UObject* __WorldContext);
	static void KakosakuQuestCheckAndSetPublish(class UObject* __WorldContext);

	static void CheckItem(TArray<class FName>& ItemIds, class UObject* __WorldContext, bool* Result, class FName* ItemID);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FLIB_Quest_C">();
	}
	static class UBP_FLIB_Quest_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_FLIB_Quest_C>();
	}
};
static_assert(alignof(UBP_FLIB_Quest_C) == 0x000008, "Wrong alignment on UBP_FLIB_Quest_C");
static_assert(sizeof(UBP_FLIB_Quest_C) == 0x000038, "Wrong size on UBP_FLIB_Quest_C");

}

