#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BCAI_Monster

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "JackGame_structs.hpp"
#include "JackGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BCAI_Monster.BP_BCAI_Monster_C
// 0x0078 (0x0598 - 0x0520)
class ABP_BCAI_Monster_C : public AJackBattleCommandAI_Monster
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0520(0x0008)(Transient, DuplicateTransient)
	class UBP_COMP_BCAI_Monster_C*                BP_COMP_BCAI_Monster;                              // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FJackMonsterBattleAI_ActionSlot> DefaultActionSlots;                                // 0x0538(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         NextBasisActionSlotID;                             // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C[0x4];                                      // 0x054C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ManulaProbabilityTable;                            // 0x0550(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackMonsterBattleAI_ActionSlot> DefaultExceptionActionSlots;                       // 0x0560(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackMonsterBattleAI_ActionSlot> CandidateActionSlots;                              // 0x0570(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          bUnUseExceptionActionSlot;                         // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_581[0x7];                                      // 0x0581(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CandidateSlotIDs;                                  // 0x0588(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_BCAI_Monster(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ExecTurnCommandCore();
	void InitializeMonsterBattleAI(class FName InMonsterBattleAIID);
	void UserConstructionScript();
	struct FJackBattleCommandAI_ExecTurnCommandResult ExecTurnCommand();
	void BuildCandidateActionSlots(TArray<struct FJackMonsterBattleAI_ActionSlot>* Result, TArray<int32>* CandidateSlotIDs_0);
	void CalcCandidateSlotIDs(TArray<struct FJackMonsterBattleAI_ActionSlot>& ActionSlots, TArray<int32>* CandidateSlotIDs_0);
	void BuildDefaultActionSlots();
	void CalcCanditateTargetGameCharacter(const struct FJackActionData& InActionData, TArray<class UJackGameCharacter*>* OutCanditateGameCharacters);
	void CalcExceptionActionSlotsTurnCommand(struct FJackActionData* OutExecActionData, class UJackGameCharacter** OutExecTargetGameCharacter);
	void CalcTargetGameCharacterWithSecondCheck(const struct FJackActionData& InActionData, class UJackGameCharacter** OutResult);

	void GetActionPatternType(EJackBattleActionPatternType* ActionPatternType_0) const;
	void IsReviveAction(struct FJackActionData& ActionData, bool* bReviveAction) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BCAI_Monster_C">();
	}
	static class ABP_BCAI_Monster_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BCAI_Monster_C>();
	}
};
static_assert(alignof(ABP_BCAI_Monster_C) == 0x000008, "Wrong alignment on ABP_BCAI_Monster_C");
static_assert(sizeof(ABP_BCAI_Monster_C) == 0x000598, "Wrong size on ABP_BCAI_Monster_C");
static_assert(offsetof(ABP_BCAI_Monster_C, UberGraphFrame) == 0x000520, "Member 'ABP_BCAI_Monster_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BCAI_Monster_C, BP_COMP_BCAI_Monster) == 0x000528, "Member 'ABP_BCAI_Monster_C::BP_COMP_BCAI_Monster' has a wrong offset!");
static_assert(offsetof(ABP_BCAI_Monster_C, DefaultSceneRoot) == 0x000530, "Member 'ABP_BCAI_Monster_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BCAI_Monster_C, DefaultActionSlots) == 0x000538, "Member 'ABP_BCAI_Monster_C::DefaultActionSlots' has a wrong offset!");
static_assert(offsetof(ABP_BCAI_Monster_C, NextBasisActionSlotID) == 0x000548, "Member 'ABP_BCAI_Monster_C::NextBasisActionSlotID' has a wrong offset!");
static_assert(offsetof(ABP_BCAI_Monster_C, ManulaProbabilityTable) == 0x000550, "Member 'ABP_BCAI_Monster_C::ManulaProbabilityTable' has a wrong offset!");
static_assert(offsetof(ABP_BCAI_Monster_C, DefaultExceptionActionSlots) == 0x000560, "Member 'ABP_BCAI_Monster_C::DefaultExceptionActionSlots' has a wrong offset!");
static_assert(offsetof(ABP_BCAI_Monster_C, CandidateActionSlots) == 0x000570, "Member 'ABP_BCAI_Monster_C::CandidateActionSlots' has a wrong offset!");
static_assert(offsetof(ABP_BCAI_Monster_C, bUnUseExceptionActionSlot) == 0x000580, "Member 'ABP_BCAI_Monster_C::bUnUseExceptionActionSlot' has a wrong offset!");
static_assert(offsetof(ABP_BCAI_Monster_C, CandidateSlotIDs) == 0x000588, "Member 'ABP_BCAI_Monster_C::CandidateSlotIDs' has a wrong offset!");

}

